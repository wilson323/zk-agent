# ZK-Agent 生产环境 Docker Compose 配置
# 包含安全配置、负载均衡和监控

version: '3.8'

services:
  # 主应用服务（多实例）
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:123456@postgres:5432/zkagent_dev?sslmode=require
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads:rw
      - app_logs:/app/logs:rw
    networks:
      - backend
      - frontend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL 数据库（主从复制）
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: zkagent_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      POSTGRES_SSL_MODE: require
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./backups:/backups:rw
    networks:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d zkagent_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL 从库（只读副本）
  postgres-replica:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      PGUSER: postgres
      POSTGRES_DB: zkagent_dev
      POSTGRES_MASTER_SERVICE: postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./config/recovery.conf:/var/lib/postgresql/recovery.conf:ro
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c '
      until pg_basebackup -h postgres -D /var/lib/postgresql/data -U postgres -v -P -W;
      do
        echo "Waiting for master to connect...";
        sleep 1s;
      done;
      echo "standby_mode = on" >> /var/lib/postgresql/data/recovery.conf;
      echo "primary_conninfo = host=postgres port=5432 user=postgres" >> /var/lib/postgresql/data/recovery.conf;
      postgres
      '

  # Redis 集群
  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx 负载均衡器
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - frontend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-prod:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - monitoring
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # 日志聚合
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped

  # 备份服务
  backup:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: zk_agent_prod
      POSTGRES_USER: zk_agent_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups:rw
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - backend
    restart: "no"
    command: >
      sh -c '
      echo "0 2 * * * /backup.sh" | crontab -
      crond -f
      '

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/zk-agent/postgres
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/zk-agent/redis
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/zk-agent/uploads
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/zk-agent
  nginx_logs:
    driver: local

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/16
  monitoring:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/16