---
description:
globs:
alwaysApply: false
---
# Team B Backend Development Rules - ZK-Agent Project

## 🎯 Core Mission & Boundaries

### Team B Responsibilities
- **Backend API Development**: All business logic API implementation
- **AI Service Integration**: FastGPT, 千问, 硅基流动 AI service connections
- **Database Management**: Data models, migrations, query optimization
- **System Architecture**: Caching, queues, monitoring, security infrastructure

### Strict Technical Boundaries
```typescript
// ✅ ALLOWED - Team B Scope
const ALLOWED_SCOPE = {
  api: "API routes and business logic",
  database: "Prisma ORM, PostgreSQL operations",
  ai: "AI service integration and adapters",
  auth: "Authentication and authorization logic",
  cache: "Redis caching and optimization",
  queue: "Background job processing",
  monitoring: "System metrics and logging",
  security: "Data protection and validation"
};

// ❌ FORBIDDEN - Team A Territory
const FORBIDDEN_SCOPE = {
  ui: "Frontend UI components and pages",
  styling: "CSS, Tailwind, component styling",
  routing: "Frontend page routing",
  interaction: "User interaction and UX logic",
  animation: "Frontend animations and transitions",
  responsive: "Mobile and responsive design"
};
```

## 📋 Development Workflow Rules

### Daily Execution Requirements
1. **9:00 AM Daily Standup** - Mandatory attendance
2. **5:00 PM Progress Report** - Submit to project tracking
3. **Performance Gates** - All APIs must meet:
   - Response time ≤ 500ms
   - Concurrent handling ≥ 1000 QPS
   - Database queries ≤ 100ms
   - Error rate ≤ 0.1%

### File Structure Compliance
Reference the project structure in [docs/项目总体设计与开发方案.md](mdc:docs/项目总体设计与开发方案.md):

```
app/api/             # API Routes (Team B primary responsibility)
├── ag-ui/          # Agent UI APIs
├── admin/          # Admin management APIs
├── ai-models/      # AI model management
├── auth/           # Authentication APIs
├── cad/            # CAD analysis APIs
├── fastgpt/        # FastGPT integration
└── poster/         # Poster generation APIs

lib/                # Business Logic (Team B primary)
├── ai/             # AI service integrations
├── auth/           # Authentication utilities
├── database/       # Database utilities
├── cache/          # Caching strategies
└── services/       # Business services

prisma/             # Database (Team B exclusive)
├── schema.prisma   # Database schema
├── migrations/     # Database migrations
└── seeds/          # Seed data
```

## 🔧 Technical Standards & Constraints

### API Development Rules
```typescript
// MANDATORY: All APIs must follow this pattern
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
  meta?: {
    pagination?: PaginationMeta;
    timestamp: string;
  };
}

// MANDATORY: All API routes must have authentication
export async function GET(request: NextRequest) {
  // Authentication middleware required
  const user = await authenticateRequest(request);
  if (!user) {
    return NextResponse.json({ success: false, error: { code: 'UNAUTHORIZED', message: 'Authentication required' } }, { status: 401 });
  }
  
  // Business logic implementation
}
```

### Performance Requirements (Non-Negotiable)
- **API Response Time**: ≤ 500ms (95th percentile)
- **Database Query Time**: ≤ 100ms average
- **Concurrent Processing**: ≥ 1000 QPS sustained
- **System Availability**: ≥ 99.5% uptime
- **Memory Usage**: ≤ 80% of allocated resources

### Technology Stack Constraints
```typescript
// REQUIRED Stack
const TECH_STACK = {
  framework: "Next.js 15 API Routes + Node.js",
  database: "PostgreSQL + Prisma ORM",
  cache: "Redis + Memory caching",
  queue: "Bull Queue / BullMQ",
  monitoring: "Winston + Prometheus + Grafana",
  ai: "FastGPT + 阿里云千问 + 硅基流动",
  deployment: "Docker + Kubernetes"
};
```

## 🤖 AI Service Integration Rules

### FastGPT Integration Standards
```typescript
// MANDATORY: FastGPT adapter implementation
interface FastGPTAdapter {
  chatCompletions: (messages: ChatMessage[]) => Promise<StreamResponse>;
  initChat: (config: ChatConfig) => Promise<ChatSession>;
  healthCheck: () => Promise<HealthStatus>;
  testConnection: () => Promise<ConnectionTest>;
}

// REQUIRED: Error handling and retry logic
const AI_SERVICE_CONSTRAINTS = {
  timeout: "30 seconds maximum",
  retries: "3 attempts with exponential backoff",
  fallback: "Graceful degradation to alternative models",
  monitoring: "Real-time performance tracking"
};
```

### Multi-AI Service Management
```typescript
// MANDATORY: Unified AI service interface
interface AIServiceManager {
  qianwen: QianwenAdapter;      // 阿里云千问
  siliconFlow: SiliconFlowAdapter; // 硅基流动
  fastgpt: FastGPTAdapter;      // FastGPT
  
  // Load balancing and fallback
  selectModel: (criteria: ModelCriteria) => AIService;
  handleFailover: (failedService: string) => AIService;
}
```

## 🗄️ Database Management Rules

### Prisma Schema Standards
Reference database design in [docs/项目总体设计与开发方案.md](mdc:docs/项目总体设计与开发方案.md):

```typescript
// MANDATORY: All models must include audit fields
model BaseModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("base_model")
}

// MANDATORY: Use transactions for critical operations
async function createAgentWithConfig(data: AgentData) {
  return await prisma.$transaction(async (tx) => {
    const agent = await tx.agent.create({ data: data.agent });
    const config = await tx.agentConfig.create({ 
      data: { ...data.config, agentId: agent.id } 
    });
    return { agent, config };
  });
}
```

### Database Optimization Requirements
- **Query Optimization**: All queries must use appropriate indexes
- **Connection Pooling**: Maximum 20 connections per instance
- **Transaction Management**: Critical operations must use transactions
- **Slow Query Monitoring**: Queries >100ms must be logged and optimized

## 🤝 Team A Collaboration Protocol

### Mock Data Provision Rules
```typescript
// MANDATORY: Provide complete mock data for Team A
interface MockDataProvider {
  // All API endpoints must have corresponding mock data
  agents: Agent[];
  chatSessions: ChatSession[];
  posterTasks: PosterTask[];
  users: User[];
  
  // Error scenarios must be mocked
  errorScenarios: {
    unauthorized: ErrorResponse;
    serverError: ErrorResponse;
    validationError: ErrorResponse;
  };
}

// MANDATORY: Mock data must match production API exactly
const MOCK_DATA_RULES = {
  structure: "Identical to production API responses",
  types: "Must match shared TypeScript definitions",
  scenarios: "Cover all success and error cases",
  updates: "Sync with API changes within 24 hours"
};
```

### API Documentation Standards
```typescript
// MANDATORY: OpenAPI 3.0 specification for all endpoints
/**
 * @swagger
 * /api/ag-ui/agents:
 *   get:
 *     summary: Get agents list
 *     parameters:
 *       - name: page
 *         in: query
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Success
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/AgentsResponse'
 */
```

### Communication Requirements
- **Interface Changes**: 3-day advance notice to Team A
- **API Documentation**: Real-time updates in OpenAPI spec
- **Breaking Changes**: Require joint approval from both teams
- **Weekly Integration**: Friday joint testing sessions mandatory

## 📊 Quality Gates & Testing

### Pre-Commit Checklist
```bash
# MANDATORY: All checks must pass before commit
✅ npm run lint        # ESLint compliance
✅ npm run type-check   # TypeScript validation
✅ npm run test         # Unit tests pass (≥80% coverage)
✅ npm run test:integration # Integration tests pass
✅ npm run security-scan    # Security vulnerability check
```

### API Testing Requirements
```typescript
// MANDATORY: Every API endpoint needs comprehensive tests
describe('POST /api/ag-ui/agents', () => {
  it('creates agent successfully', async () => {
    // Success scenario test
  });
  
  it('validates input parameters', async () => {
    // Input validation test
  });
  
  it('handles authentication errors', async () => {
    // Authentication test
  });
  
  it('meets performance requirements', async () => {
    // Performance test (≤500ms)
  });
});
```

### Database Testing Standards
```typescript
// MANDATORY: Database operations must be tested
describe('Agent Database Operations', () => {
  beforeEach(async () => {
    // Clean database state
    await cleanDatabase();
  });
  
  it('creates agent with transaction', async () => {
    // Transaction test
  });
  
  it('handles concurrent operations', async () => {
    // Concurrency test
  });
});
```

## 🚨 Critical Constraints & Violations

### Immediate Stop Violations
- Modifying Team A's frontend components or pages
- Direct UI/UX implementation
- Bypassing authentication middleware
- Database operations without proper error handling
- API responses not matching documented schema

### Warning Level Violations
- API response time >500ms
- Missing error handling
- Insufficient test coverage (<80%)
- Security vulnerabilities
- Database queries without optimization

### Code Review Requirements
- **Minimum 2 approvals** required
- **Security review** mandatory for auth/admin APIs
- **Performance impact assessment** required
- **Database migration review** for schema changes

## 🔒 Security & Authentication Rules

### Authentication Standards
```typescript
// MANDATORY: JWT token validation
interface AuthenticationRules {
  tokenValidation: "JWT with RS256 algorithm";
  sessionManagement: "Redis-based session store";
  roleBasedAccess: "RBAC with granular permissions";
  passwordPolicy: "Minimum 8 chars, complexity required";
}

// MANDATORY: Input validation and sanitization
const SECURITY_CONSTRAINTS = {
  inputValidation: "Zod schema validation required",
  sqlInjection: "Prisma ORM prevents SQL injection",
  xss: "Input sanitization mandatory",
  csrf: "CSRF tokens for state-changing operations"
};
```

### Data Protection Rules
- **Sensitive Data**: Must be encrypted at rest
- **API Keys**: Stored in secure environment variables
- **User Data**: GDPR compliance required
- **Audit Logging**: All admin actions must be logged

## 📈 Performance Optimization Rules

### Caching Strategy
```typescript
// MANDATORY: Redis caching implementation
interface CachingRules {
  userSessions: "Redis with 24h TTL";
  apiResponses: "Redis with 5min TTL for GET requests";
  agentConfigs: "Memory cache with Redis backup";
  staticData: "CDN caching for public assets";
}

// MANDATORY: Cache invalidation strategy
const CACHE_INVALIDATION = {
  userUpdate: "Invalidate user session cache",
  agentUpdate: "Invalidate agent config cache",
  systemConfig: "Invalidate all related caches"
};
```

### Database Optimization
```typescript
// MANDATORY: Query optimization patterns
const DB_OPTIMIZATION_RULES = {
  indexing: "All foreign keys and query fields indexed",
  pagination: "Cursor-based pagination for large datasets",
  nPlusOne: "Use include/select to prevent N+1 queries",
  connectionPool: "Optimize connection pool size"
};
```

## 🔍 Monitoring & Logging Rules

### System Monitoring
```typescript
// MANDATORY: Comprehensive monitoring setup
interface MonitoringRules {
  apiMetrics: "Response time, throughput, error rate";
  databaseMetrics: "Query performance, connection pool";
  aiServiceMetrics: "AI service response time, success rate";
  systemMetrics: "CPU, memory, disk usage";
}

// MANDATORY: Alert thresholds
const ALERT_THRESHOLDS = {
  apiResponseTime: ">500ms for 5 minutes",
  errorRate: ">1% for 2 minutes",
  databaseConnections: ">80% pool utilization",
  memoryUsage: ">85% for 3 minutes"
};
```

### Logging Standards
```typescript
// MANDATORY: Structured logging with Winston
interface LoggingRules {
  level: "info" | "warn" | "error" | "debug";
  format: "JSON structured logging";
  fields: ["timestamp", "level", "message", "userId", "requestId"];
  retention: "30 days for info, 90 days for errors";
}
```

## 📅 Milestone Deliverables

### Week 1-2: Core Infrastructure
- [ ] Database schema and migrations
- [ ] Authentication system implementation
- [ ] Core business APIs (agents, chat, CAD, poster)
- [ ] Error handling and logging setup

### Week 3-4: AI Service Integration
- [ ] FastGPT adapter completion
- [ ] 千问 API integration
- [ ] 硅基流动 service connection
- [ ] File storage and caching systems

### Week 5-6: Admin APIs & Optimization
- [ ] Admin management APIs
- [ ] System monitoring and metrics
- [ ] Performance optimization
- [ ] Production deployment preparation

## 🎯 Success Criteria

### Technical Excellence
- **API Performance**: Response time ≤ 500ms, QPS ≥ 1000
- **Code Quality**: SonarQube A+ rating, test coverage ≥ 80%
- **Security**: 0 high-severity vulnerabilities
- **Reliability**: System availability ≥ 99.5%

### Integration Success
- **API Documentation**: 100% OpenAPI coverage
- **Mock Data**: Complete coverage for Team A
- **Type Safety**: Shared types 100% accurate
- **Joint Testing**: Weekly integration tests pass

### AI Service Performance
- **FastGPT**: <2s response time, 99% availability
- **千问**: <3s response time, 95% availability  
- **硅基流动**: <2s response time, 95% availability
- **Fallback**: Seamless service switching

---

**Team B Focus: Build robust, scalable backend infrastructure that powers AI capabilities with enterprise-grade reliability, security, and performance.**
