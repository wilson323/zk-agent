---
description:
globs:
alwaysApply: false
---
# Team A Frontend Development Rules - ZK-Agent Project

## 🎯 Core Mission & Boundaries

### Team A Responsibilities
- **Frontend Pages**: All user interface implementation
- **UI/UX Optimization**: Responsive design, animations, user experience
- **Component Library**: Reusable UI components development
- **Frontend Performance**: Loading speed, rendering optimization

### Strict Technical Boundaries
```typescript
// ✅ ALLOWED - Team A Scope
const ALLOWED_SCOPE = {
  react: "React components and hooks",
  routing: "Page routing with Next.js App Router", 
  styling: "Tailwind CSS, CSS Modules, Framer Motion",
  state: "React Context, useState, useReducer",
  ui: "Component library, design system",
  testing: "Frontend unit tests, E2E tests",
  performance: "Bundle optimization, lazy loading"
};

// ❌ FORBIDDEN - Team B Territory  
const FORBIDDEN_SCOPE = {
  api: "Backend API implementation",
  database: "Database operations and queries",
  ai: "Direct AI service integration", 
  server: "Server configuration and deployment",
  auth: "Authentication logic (only UI components)",
  business: "Core business logic processing"
};
```

## 📋 Development Workflow Rules

### Daily Execution Requirements
1. **9:00 AM Daily Standup** - Mandatory attendance
2. **5:00 PM Progress Report** - Submit to project tracking
3. **Code Quality Gates** - All commits must pass:
   - ESLint rules (100% compliance)
   - TypeScript compilation (0 errors)
   - Unit tests (100% pass rate)
   - Prettier formatting

### File Structure Compliance
Reference the project structure in [docs/项目总体设计与开发方案.md](mdc:docs/项目总体设计与开发方案.md):

```
app/                 # Next.js pages (Team A responsibility)
├── page.tsx         # Main landing page
├── chat/           # Chat interface pages
├── cad-analyzer/   # CAD analysis UI
├── poster-generator/ # Poster generation UI
└── auth/           # Authentication pages

components/         # UI Components (Team A primary)
├── ui/             # Base UI components
├── chat/           # Chat-specific components  
├── cad/            # CAD analysis components
└── poster/         # Poster generation components
```

## 🔧 Technical Standards & Constraints

### Component Development Rules
```typescript
// MANDATORY: All components must follow this pattern
interface ComponentProps {
  // All props must have explicit types
}

export const ComponentName: React.FC<ComponentProps> = React.memo(({ ...props }) => {
  // Component implementation
  // Must use React.memo for performance
});

// MANDATORY: Export types for Team B integration
export type { ComponentProps };
```

### Performance Requirements (Non-Negotiable)
- **Lighthouse Score**: ≥90 points
- **First Contentful Paint**: ≤1.5 seconds  
- **Largest Contentful Paint**: ≤2.5 seconds
- **Bundle Size**: ≤500KB (gzipped)
- **Test Coverage**: ≥80%

### Technology Stack Constraints
```typescript
// REQUIRED Stack
const TECH_STACK = {
  framework: "Next.js 15 + React 18 + TypeScript",
  styling: "Tailwind CSS + CSS Modules", 
  components: "Radix UI + Custom Components",
  animation: "Framer Motion",
  state: "React Context + Hooks",
  testing: "Jest + React Testing Library + Playwright",
  icons: "Lucide React"
};
```

## 🤝 Team B Collaboration Protocol

### API Integration Rules
```typescript
// MANDATORY: Use MSW for API mocking
// Reference shared types from Team B
import type { ApiResponse, Agent, ChatSession } from '@/types/shared';

// FORBIDDEN: Direct API calls in components
// ❌ fetch('/api/agents') 
// ✅ Use mock data during development
```

### Shared Type Definitions
All API-related types must be imported from shared location:
```typescript
// Import from shared types (maintained by Team B)
import type { 
  Agent, 
  ChatSession, 
  PosterTask,
  User 
} from '@/types/shared';
```

### Communication Requirements
- **Interface Changes**: 3-day advance notice to Team B
- **Mock Data**: Must match Team B API specifications
- **Weekly Integration**: Friday joint testing sessions
- **Issue Escalation**: <4 hours for blocking issues

## 📊 Quality Gates & Testing

### Pre-Commit Checklist
```bash
# MANDATORY: All checks must pass before commit
✅ npm run lint        # ESLint compliance
✅ npm run type-check   # TypeScript validation  
✅ npm run test         # Unit tests pass
✅ npm run build        # Production build success
```

### Component Testing Requirements
```typescript
// MANDATORY: Every component needs tests
describe('ComponentName', () => {
  it('renders correctly', () => {
    // Rendering test
  });
  
  it('handles user interactions', () => {
    // Interaction test
  });
  
  it('meets accessibility standards', () => {
    // A11y test
  });
});
```

### Storybook Documentation
```typescript
// MANDATORY: All components need Storybook stories
export default {
  title: 'Components/ComponentName',
  component: ComponentName,
} as Meta;

export const Default: Story = {
  args: {
    // Default props
  },
};
```

## 🚨 Critical Constraints & Violations

### Immediate Stop Violations
- Modifying Team B's API routes in `app/api/`
- Direct database operations
- Bypassing authentication middleware
- Committing without passing quality gates

### Warning Level Violations  
- Missing TypeScript types
- Insufficient test coverage (<80%)
- Performance regression
- Accessibility violations

### Code Review Requirements
- **Minimum 2 approvals** required
- **24-hour review window** maximum
- **Performance impact assessment** mandatory
- **Accessibility compliance check** required

## 📈 Performance Optimization Rules

### Bundle Optimization
```typescript
// MANDATORY: Use dynamic imports for large components
const HeavyComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <LoadingSpinner />,
  ssr: false
});

// MANDATORY: Optimize images
import Image from 'next/image';
// Always use Next.js Image component
```

### Rendering Optimization
```typescript
// MANDATORY: Memoize expensive calculations
const expensiveValue = useMemo(() => {
  return heavyCalculation(data);
}, [data]);

// MANDATORY: Optimize re-renders
const MemoizedComponent = React.memo(Component);
```

## 🎨 UI/UX Standards

### Design System Compliance
Reference design guidelines in [docs/项目总体设计与开发方案.md](mdc:docs/项目总体设计与开发方案.md):

- **Primary Color**: #6cb33f
- **Theme Support**: Light/Dark mode required
- **Responsive Breakpoints**: Mobile-first approach
- **Animation**: Smooth transitions with Framer Motion

### Accessibility Requirements
- **WCAG 2.1 AA compliance** mandatory
- **Keyboard navigation** support
- **Screen reader** compatibility  
- **Color contrast** ratios met

## 📅 Milestone Deliverables

### Week 1-2: Core Pages Framework
- [ ] Landing page implementation
- [ ] Navigation system
- [ ] Agent marketplace UI
- [ ] Chat interface foundation

### Week 3-4: Interactive Experience  
- [ ] Mobile responsiveness
- [ ] Animation system
- [ ] Real-time UI components
- [ ] Data visualization

### Week 5-6: Polish & Optimization
- [ ] Component library completion
- [ ] Performance optimization
- [ ] Documentation finalization
- [ ] Production readiness

## 🔍 Monitoring & Reporting

### Daily Progress Tracking
```typescript
// MANDATORY: Daily progress format
interface DailyProgress {
  completed: string[];      // Tasks finished
  inProgress: string[];     // Current work
  blockers: string[];       // Issues encountered
  nextDay: string[];        // Tomorrow's plan
}
```

### Weekly Quality Metrics
- Lighthouse performance scores
- Test coverage percentages  
- Bundle size measurements
- Accessibility audit results

## 🏆 Success Criteria

### Technical Excellence
- **Code Quality**: SonarQube A+ rating
- **Performance**: Lighthouse ≥95 points  
- **Testing**: Coverage ≥90%
- **Accessibility**: WCAG 2.1 AA compliance

### User Experience
- **SUS Score**: ≥85 points
- **Task Completion**: ≥95% success rate
- **Error Rate**: ≤1%
- **User Satisfaction**: ≥4.5/5

---

**Team A Focus: Deliver exceptional frontend experiences that showcase AI capabilities through elegant, performant, and accessible user interfaces.**
