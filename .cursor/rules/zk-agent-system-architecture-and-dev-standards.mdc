---
description:
globs:
alwaysApply: false
---
# zk-agent 系统级架构与开发规范（生产级高标准）

> 本规则为 zk-agent 项目唯一权威的系统级架构与开发规范，所有开发人员必须严格遵守。任何阶段、信息不全时，均可参考本规则高质量推进开发。**规范需随项目变化及时更新。**

---

## 1. 项目目标与全局关联
- 明确目标：打造高可靠、可扩展、前沿的AI智能体平台，支持多智能体并行，具备专业级CAD解析、智能对话、创意生成等能力。
- 全局关联：各子模块通过统一接口、类型、UI风格和服务规范协作，保证系统一致性和可维护性。

## 2. 目录结构与命名规范
- 强制目录结构：见 [项目结构说明](mdc:README.md) 或主目录结构注释。
- 文件命名：组件用 PascalCase，工具函数用 kebab-case，类型定义用 kebab-case.types.ts，API路由用 [功能]/route.ts。
- 方法命名：动词+对象，语义清晰统一。

## 3. 文件头部注释与模块概述
- 每个文件前几行必须包含结构化注释，说明用途、功能、输入输出、全局关联、依赖、扩展点、维护人、变更日志。
- 每个子模块（如：CAD、对话、海报、API、服务、hooks、类型、数据库等）主入口或 README 必须有详细模块概述，内容参考：

```typescript
/**
 * @module [模块名称]
 * @description
 *   - [模块定位]：本模块负责……
 *   - [主要功能]：如CAD文件解析、对话流转、用户认证等
 *   - [输入输出]：输入（如API参数、props、文件等），输出（如API响应、组件渲染、事件等）
 *   - [与全局的关联]：本模块与哪些其他模块有直接/间接依赖或调用关系
 *   - [依赖关系]：依赖的第三方库、内部服务、类型等
 *   - [扩展点]：可扩展的部分、推荐的扩展方式
 *   - [维护人]：责任人/团队
 * @lastUpdate [最后更新时间]
 * @updateLog
 *   - [时间] [变更内容简述]
 */
```

- 概述需随模块变更及时维护，代码审查时如不全或过时视为不合格。

## 4. 组件与服务开发
- 智能体容器组件独立于 `components/ag-ui/`，需包含完整功能（如文件上传、解析、预览、结果展示、导出等）。
- 组件无副作用，状态管理用Hooks/Context，UI风格与全局一致。
- 服务逻辑与API解耦，业务逻辑放于 `lib/services/`。

## 5. API与类型定义
- API路由统一于 `app/api/`，每功能独立子目录，接口需详细注释。
- 所有核心类型、接口统一于 `types/`，命名规范、注释齐全。

## 6. 测试、性能与安全
- 关键功能必须有单元/集成测试，测试覆盖率80%以上。
- 大文件处理用异步队列，API有权限/速率/输入校验。
- 敏感数据加密存储，异常处理完善。

## 7. 代码审查与CI
- 所有PR需经核心开发者审查，内容包括规范、功能、性能、安全、注释、文档。
- CI流程包括lint、测试、构建、依赖安全。

## 8. 文档与知识传承
- 项目内必须有详细开发规范文档（如本规则），每个模块、组件、API、服务均需有独立文档。
- 文档需随代码同步更新，禁止文档滞后。

## 9. UI/UX与品牌一致性
- 统一主色调、字体、图标、动画风格，响应式设计，交互体验专业流畅。

## 10. 变更与版本管理
- 采用语义化版本管理，重大变更需在文档和CHANGELOG中说明。

---

> **本规则为开发落地的唯一标准，任何阶段、信息不全时，均可据此高质量推进开发。规范需随项目变化及时更新。**
