---
description:
globs:
alwaysApply: false
---
# 共同协作规则 - 两团队强制执行标准

## 🎯 核心使命与目标

### 项目核心目标
**构建生产级AI多智能体平台ZK-Agent，集成对话智能体(FastGPT)、CAD分析专家、AI海报设计师，提供企业级高性能、高可靠性的统一AI服务平台。**

### 架构师专家标准
```typescript
// 两个团队都是架构师专家和研发专家
interface ExpertStandards {
  architecture: "系统级架构思维，全局设计能力";
  development: "生产级代码质量，高性能实现";
  innovation: "技术创新能力，最佳实践应用";
  leadership: "技术领导力，团队协作能力";
}

// 必须输出的代码质量标准
const CODE_QUALITY_REQUIREMENTS = {
  performance: "高性能优化，超越行业标准20%",
  reliability: "生产级稳定性，99.5%可用率",
  maintainability: "高可维护性，模块化设计",
  scalability: "高扩展性，支持业务快速增长"
};
```

## 📋 强制执行的协作约束

### 1. 团队协作指令严格执行
参考 [docs/团队协作指令与约束规范.md](mdc:docs/团队协作指令与约束规范.md) 中的所有约束：

```typescript
// 强制执行的协作约束
interface MandatoryCollaborationRules {
  // 质量门禁 - 不可妥协
  qualityGates: {
    codeReview: "2人审查通过，24小时内完成";
    testing: "单元测试≥80%，集成测试100%通过";
    performance: "性能指标100%达标";
    security: "安全扫描0高危漏洞";
  };
  
  // 违规处理 - 立即执行
  violationHandling: {
    qualityFailure: "立即停止工作，整改后继续";
    deadlineMiss: "制定改进计划，24小时内提交";
    communicationDelay: "阻塞问题4小时内上报";
  };
  
  // 奖励机制 - 激励创新
  rewardSystem: {
    excellence: "超预期表现获得项目奖金";
    sharing: "技术分享机会和内部表彰";
    growth: "技能培训和会议参与机会";
  };
}
```

### 2. 代码审查强制标准
```typescript
// 代码审查不可妥协的标准
interface CodeReviewStandards {
  // 审查要求
  requirements: {
    reviewers: "最少2人审查通过";
    timeLimit: "24小时内必须完成";
    coverage: "100%代码变更必须审查";
    documentation: "重要变更必须有文档";
  };
  
  // 审查清单
  checklist: [
    "代码逻辑正确性和最佳实践",
    "性能影响评估和优化建议", 
    "安全风险检查和防护措施",
    "可维护性和代码可读性",
    "测试覆盖充分性和质量",
    "架构一致性和设计模式",
    "全局影响分析和依赖检查"
  ];
  
  // 审查标准
  standards: {
    blocking: "发现重大问题必须阻止合并";
    suggestions: "改进建议必须认真考虑";
    learning: "审查过程是学习和知识分享";
  };
}
```

## 🏗️ 全局架构思维要求

### 3. 全局代码梳理与重复检查
```typescript
// 新功能开发前的全局分析流程
interface GlobalCodeAnalysis {
  // 步骤1: 全项目搜索类似功能
  searchExisting: {
    semantic: "语义搜索相关功能模块";
    pattern: "搜索相似代码模式和实现";
    api: "检查是否存在类似API接口";
    component: "查找可复用的组件和服务";
  };
  
  // 步骤2: 避免重复和冗余
  avoidDuplication: {
    refactor: "重构现有代码以支持新需求";
    extend: "扩展现有功能而非重新实现";
    abstract: "抽象公共逻辑为可复用模块";
    integrate: "集成现有服务而非重复开发";
  };
  
  // 步骤3: 架构一致性检查
  architectureConsistency: {
    patterns: "遵循项目既定的设计模式";
    conventions: "符合代码规范和命名约定";
    dependencies: "合理管理依赖关系";
    interfaces: "保持接口设计的一致性";
  };
}
```

### 4. 全局项目思考习惯
```typescript
// 每个开发决策都必须考虑的全局因素
interface GlobalThinkingHabits {
  // 系统级影响分析
  systemImpact: {
    performance: "对整体系统性能的影响";
    scalability: "对系统扩展性的影响";
    maintainability: "对代码维护性的影响";
    security: "对系统安全性的影响";
  };
  
  // 业务价值考量
  businessValue: {
    userExperience: "对用户体验的提升";
    businessGoals: "对业务目标的贡献";
    competitiveness: "对产品竞争力的影响";
    roi: "投入产出比的合理性";
  };
  
  // 技术债务管理
  technicalDebt: {
    prevention: "预防新技术债务产生";
    reduction: "减少现有技术债务";
    documentation: "记录技术决策和权衡";
    monitoring: "持续监控代码质量";
  };
}
```

## 🔒 质量门禁与违规处理

### 5. 质量门禁立即停止机制
```typescript
// 触发立即停止的质量门禁
interface QualityGateViolations {
  // 代码质量违规
  codeQuality: {
    sonarQube: "SonarQube评分低于A级";
    testCoverage: "测试覆盖率低于80%";
    complexity: "代码复杂度超过阈值";
    duplication: "代码重复率超过5%";
  };
  
  // 性能违规
  performance: {
    responseTime: "API响应时间>500ms";
    bundleSize: "前端Bundle大小>500KB";
    lighthouse: "Lighthouse评分<90分";
    memoryLeak: "检测到内存泄漏";
  };
  
  // 安全违规
  security: {
    vulnerabilities: "发现高危安全漏洞";
    authentication: "认证机制不完善";
    dataExposure: "敏感数据暴露风险";
    injection: "存在注入攻击风险";
  };
  
  // 立即停止流程
  immediateStop: {
    notification: "立即通知团队和项目经理";
    isolation: "隔离问题代码，防止扩散";
    analysis: "深入分析问题根本原因";
    remediation: "制定详细整改计划";
    verification: "整改完成后重新验证";
  };
}
```

### 6. 里程碑达标与改进计划
```typescript
// 每周里程碑评估标准
interface MilestoneAssessment {
  // 评估维度
  dimensions: {
    functionality: "功能完成度和质量";
    performance: "性能指标达成情况";
    quality: "代码质量和测试覆盖";
    collaboration: "团队协作效果";
    innovation: "技术创新和改进";
  };
  
  // 未达标处理流程
  underperformanceHandling: {
    identification: "快速识别未达标原因";
    analysis: "深入分析根本原因";
    planning: "制定具体改进计划";
    timeline: "设定明确改进时间线";
    monitoring: "持续跟踪改进效果";
    escalation: "必要时上报项目经理";
  };
  
  // 改进计划要求
  improvementPlan: {
    specific: "具体明确的改进措施";
    measurable: "可量化的改进目标";
    achievable: "现实可行的实施方案";
    relevant: "与项目目标高度相关";
    timeBound: "明确的时间约束";
  };
}
```

## 📞 沟通协作与问题升级

### 7. 及时沟通与问题上报
```typescript
// 沟通协作的强制要求
interface CommunicationRequirements {
  // 日常沟通
  dailyCommunication: {
    standup: "每日9:00AM站会，15分钟内完成";
    progress: "每日5:00PM进度同步";
    blockers: "遇到阻塞立即沟通";
    decisions: "重要技术决策及时分享";
  };
  
  // 问题升级机制
  escalationProcess: {
    level1: "团队内部解决 - 1小时内";
    level2: "跨团队协作解决 - 4小时内";
    level3: "项目经理介入 - 8小时内";
    level4: "技术总监决策 - 24小时内";
  };
  
  // 阻塞问题处理
  blockerHandling: {
    identification: "快速识别阻塞类型和影响";
    communication: "立即通知相关人员";
    collaboration: "组织相关人员协作解决";
    documentation: "记录问题和解决方案";
    prevention: "制定预防措施";
  };
}
```

## 🏆 生产级交付标准

### 8. 最终交付质量要求
```typescript
// 生产级交付的不可妥协标准
interface ProductionDeliveryStandards {
  // 用户体验标准
  userExperience: {
    sus: "SUS可用性评分≥85分";
    taskCompletion: "用户任务完成率≥95%";
    errorRate: "用户操作错误率≤1%";
    satisfaction: "用户满意度≥4.5/5";
    accessibility: "WCAG 2.1 AA级无障碍访问";
  };
  
  // 技术性能标准
  technicalPerformance: {
    frontend: "Lighthouse性能评分≥90分";
    backend: "API响应时间≤500ms";
    database: "数据库查询≤100ms";
    availability: "系统可用率≥99.5%";
    scalability: "支持1000+并发用户";
  };
  
  // 代码质量标准
  codeQuality: {
    sonarQube: "SonarQube评分A+级";
    testCoverage: "测试覆盖率≥90%";
    documentation: "代码文档覆盖率100%";
    maintainability: "维护性指数≥80分";
    security: "安全扫描0高危漏洞";
  };
  
  // 业务价值标准
  businessValue: {
    functionality: "功能完整性100%";
    reliability: "业务流程稳定性100%";
    efficiency: "业务效率提升≥30%";
    innovation: "技术创新突破≥3项";
    competitiveness: "市场竞争力显著提升";
  };
}
```

## 🔍 持续监控与改进

### 9. 质量监控与反馈机制
```typescript
// 持续质量监控体系
interface ContinuousQualityMonitoring {
  // 实时监控指标
  realTimeMetrics: {
    codeQuality: "代码质量实时评分";
    performance: "系统性能实时监控";
    userExperience: "用户体验实时反馈";
    teamProductivity: "团队生产力指标";
  };
  
  // 定期评估机制
  periodicAssessment: {
    daily: "每日质量快速检查";
    weekly: "每周全面质量评估";
    milestone: "里程碑深度质量审查";
    retrospective: "项目回顾和改进";
  };
  
  // 改进行动计划
  improvementActions: {
    identification: "快速识别改进机会";
    prioritization: "改进优先级排序";
    implementation: "改进措施具体实施";
    validation: "改进效果验证评估";
    standardization: "成功经验标准化";
  };
}
```

## 🎯 超预期成功标准

### 10. 卓越表现激励机制
```typescript
// 超预期表现的定义和奖励
interface ExcellenceIncentives {
  // 超预期表现标准
  excellenceStandards: {
    technical: "技术创新和突破";
    quality: "代码质量超越标准";
    performance: "性能优化显著提升";
    collaboration: "团队协作卓越表现";
    leadership: "技术领导力体现";
    mentorship: "知识分享和团队成长";
  };
  
  // 奖励机制
  rewardMechanisms: {
    financial: "项目奖金和绩效奖励";
    recognition: "内部表彰和技术分享";
    growth: "技能培训和会议参与";
    career: "职业发展和晋升机会";
    innovation: "创新项目参与机会";
  };
  
  // 知识分享要求
  knowledgeSharing: {
    documentation: "技术文档和最佳实践";
    presentation: "技术分享和培训";
    mentoring: "新人指导和团队成长";
    community: "开源贡献和社区参与";
  };
}
```

---

## 🚀 执行总结

### 核心执行要点
1. **严格质量门禁**: 代码审查2人通过，24小时完成，违规立即停止
2. **全局架构思维**: 新功能前全项目搜索，避免重复冗余代码
3. **及时沟通协作**: 阻塞问题4小时内上报，重要决策及时分享
4. **生产级交付**: SUS评分≥85分，性能超越行业标准20%
5. **持续改进**: 里程碑未达标制定改进计划，超预期表现获得奖励

### 成功保障机制
- **实时监控**: 代码质量、性能指标、用户体验全方位监控
- **快速响应**: 问题发现到解决的完整闭环流程
- **激励创新**: 技术创新和卓越表现的多维度奖励机制
- **知识传承**: 经验分享和团队成长的持续机制

**两个团队作为架构师专家和研发专家，必须以最高标准要求自己，输出生产级高质量代码，确保ZK-Agent项目成为行业标杆！** 🏆
