23eaa48a39469b32c7e399c62e1b0012
"use strict";
// 简化的全局错误处理器测试
// 避免Next.js依赖问题，专注于核心逻辑测试
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
// Mock Next.js dependencies
const mockNextResponse = {
    json: vitest_1.vi.fn((data, options) => ({
        json: async () => data,
        status: options?.status || 200,
        headers: options?.headers || {}
    }))
};
vitest_1.vi.mock('next/server', () => ({
    NextResponse: mockNextResponse,
    NextRequest: vitest_1.vi.fn()
}));
vitest_1.vi.mock('../../lib/utils/api-logger', () => ({
    ApiLogger: {
        error: vitest_1.vi.fn(),
        info: vitest_1.vi.fn(),
        warn: vitest_1.vi.fn()
    }
}));
vitest_1.vi.mock('../../lib/types/api-response', () => ({
    ErrorCode: {
        VALIDATION_ERROR: 'VALIDATION_ERROR',
        NETWORK_ERROR: 'NETWORK_ERROR',
        SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
        INTERNAL_ERROR: 'INTERNAL_ERROR'
    }
}));
// 简化的错误类型定义
var AgentErrorType;
(function (AgentErrorType) {
    AgentErrorType["VALIDATION_ERROR"] = "VALIDATION_ERROR";
    AgentErrorType["NETWORK_ERROR"] = "NETWORK_ERROR";
    AgentErrorType["SYSTEM_ERROR"] = "SYSTEM_ERROR";
    AgentErrorType["SERVICE_UNAVAILABLE"] = "SERVICE_UNAVAILABLE";
})(AgentErrorType || (AgentErrorType = {}));
// 简化的AgentError类
class AgentError extends Error {
    constructor(type, message, context, statusCode) {
        super(message);
        this.name = 'AgentError';
        this.id = Math.random().toString(36).substr(2, 9);
        this.type = type;
        this.context = context;
        this.timestamp = new Date().toISOString();
        this.statusCode = statusCode || this.getDefaultStatusCode(type);
        this.userMessage = this.getUserMessage(type);
        this.retryable = this.isRetryableError(type);
    }
    getDefaultStatusCode(type) {
        switch (type) {
            case AgentErrorType.VALIDATION_ERROR:
                return 400;
            case AgentErrorType.NETWORK_ERROR:
                return 502;
            case AgentErrorType.SERVICE_UNAVAILABLE:
                return 503;
            default:
                return 500;
        }
    }
    getUserMessage(type) {
        switch (type) {
            case AgentErrorType.VALIDATION_ERROR:
                return '请求参数有误，请检查后重试';
            case AgentErrorType.NETWORK_ERROR:
                return '网络连接异常，请稍后重试';
            case AgentErrorType.SERVICE_UNAVAILABLE:
                return '服务暂时不可用，请稍后重试';
            default:
                return '系统内部错误，请联系管理员';
        }
    }
    isRetryableError(type) {
        return [AgentErrorType.NETWORK_ERROR, AgentErrorType.SERVICE_UNAVAILABLE].includes(type);
    }
}
// 简化的全局错误处理器
class GlobalErrorHandler {
    constructor() {
        this.errorCount = 0;
        this.lastErrorTime = 0;
        this.circuitBreakerOpen = false;
        this.circuitBreakerTimeout = 60000;
        this.timeWindowMs = 60000;
        this.errorThreshold = parseInt(process.env.ERROR_THRESHOLD || '50');
    }
    static getInstance() {
        if (!GlobalErrorHandler.instance) {
            GlobalErrorHandler.instance = new GlobalErrorHandler();
        }
        return GlobalErrorHandler.instance;
    }
    handleError(error, context) {
        try {
            let agentError;
            if (error instanceof AgentError) {
                agentError = error;
            }
            else {
                // 分类普通错误
                const errorType = this.classifyError(error);
                agentError = new AgentError(errorType, error.message, context);
            }
            // 记录错误
            this.recordError(agentError);
            // 检查时间窗口并更新统计
            this.checkTimeWindowAndUpdateStats();
            // 检查断路器
            if (this.errorCount >= this.errorThreshold) {
                this.openCircuitBreaker();
            }
            return this.createErrorResponse(agentError);
        }
        catch (handlerError) {
            console.error('Error in error handler:', handlerError);
            return this.createFallbackResponse();
        }
    }
    classifyError(error) {
        if (error.name === 'ValidationError' || error.message.includes('validation')) {
            return AgentErrorType.VALIDATION_ERROR;
        }
        if (error.name === 'NetworkError' || error.message.includes('network')) {
            return AgentErrorType.NETWORK_ERROR;
        }
        return AgentErrorType.SYSTEM_ERROR;
    }
    recordError(error) {
        console.error('Error recorded:', {
            id: error.id,
            type: error.type,
            message: error.message,
            timestamp: error.timestamp
        });
    }
    updateErrorStats() {
        const now = Date.now();
        this.errorCount++;
        this.lastErrorTime = now;
    }
    checkTimeWindowAndUpdateStats() {
        const now = Date.now();
        // 检查时间窗口是否过期
        if (this.lastErrorTime > 0 && now - this.lastErrorTime > this.timeWindowMs) {
            this.errorCount = 0;
        }
        // 更新统计
        this.errorCount++;
        this.lastErrorTime = now;
    }
    shouldTriggerCircuitBreaker() {
        const now = Date.now();
        if (now - this.lastErrorTime > this.timeWindowMs) {
            this.errorCount = 0;
            this.lastErrorTime = now;
        }
        return this.errorCount >= this.errorThreshold;
    }
    openCircuitBreaker() {
        if (this.circuitBreakerOpen) {
            return;
        }
        this.circuitBreakerOpen = true;
        console.warn('🚨 Circuit breaker opened due to high error rate');
        if (this.circuitBreakerResetTimer) {
            clearTimeout(this.circuitBreakerResetTimer);
        }
        this.circuitBreakerResetTimer = setTimeout(() => {
            this.circuitBreakerOpen = false;
            this.errorCount = 0;
            this.lastErrorTime = 0;
            console.info('✅ Circuit breaker closed, service restored');
        }, this.circuitBreakerTimeout);
    }
    createErrorResponse(error) {
        return mockNextResponse.json({
            success: false,
            error: {
                code: error.type,
                message: error.userMessage,
                type: error.type
            },
            requestId: error.id,
            timestamp: error.timestamp
        }, { status: error.statusCode });
    }
    createFallbackResponse() {
        return mockNextResponse.json({
            success: false,
            error: {
                code: 'INTERNAL_ERROR',
                message: '系统内部错误',
                type: 'SYSTEM_ERROR'
            },
            timestamp: new Date().toISOString()
        }, { status: 500 });
    }
    isCircuitBreakerOpen() {
        return this.circuitBreakerOpen;
    }
    getErrorStats() {
        return {
            errorCount: this.errorCount,
            lastErrorTime: this.lastErrorTime,
            circuitBreakerOpen: this.circuitBreakerOpen,
            errorThreshold: this.errorThreshold,
            timeWindowMs: this.timeWindowMs
        };
    }
    // 重置实例（用于测试）
    static resetInstance() {
        GlobalErrorHandler.instance = undefined;
    }
}
(0, vitest_1.describe)('GlobalErrorHandler', () => {
    let errorHandler;
    (0, vitest_1.beforeEach)(() => {
        GlobalErrorHandler.resetInstance();
        errorHandler = GlobalErrorHandler.getInstance();
        delete process.env.ERROR_THRESHOLD;
        vitest_1.vi.clearAllMocks();
        vitest_1.vi.spyOn(console, 'error').mockImplementation(() => { });
        vitest_1.vi.spyOn(console, 'warn').mockImplementation(() => { });
        vitest_1.vi.spyOn(console, 'info').mockImplementation(() => { });
    });
    (0, vitest_1.afterEach)(() => {
        vitest_1.vi.restoreAllMocks();
    });
    (0, vitest_1.describe)('Singleton Pattern', () => {
        (0, vitest_1.it)('should return the same instance', () => {
            const instance1 = GlobalErrorHandler.getInstance();
            const instance2 = GlobalErrorHandler.getInstance();
            (0, vitest_1.expect)(instance1).toBe(instance2);
        });
    });
    (0, vitest_1.describe)('Error Classification', () => {
        (0, vitest_1.it)('should classify validation errors correctly', () => {
            const validationError = new Error('Validation failed');
            validationError.name = 'ValidationError';
            const result = errorHandler.handleError(validationError);
            (0, vitest_1.expect)(result).toBeDefined();
            (0, vitest_1.expect)(mockNextResponse.json).toHaveBeenCalled();
        });
        (0, vitest_1.it)('should classify network errors correctly', () => {
            const networkError = new Error('Network timeout');
            networkError.name = 'NetworkError';
            const result = errorHandler.handleError(networkError);
            (0, vitest_1.expect)(result).toBeDefined();
        });
        (0, vitest_1.it)('should handle AgentError instances', () => {
            const agentError = new AgentError(AgentErrorType.VALIDATION_ERROR, 'Test validation error', { field: 'email' });
            const result = errorHandler.handleError(agentError);
            (0, vitest_1.expect)(result).toBeDefined();
        });
    });
    (0, vitest_1.describe)('Circuit Breaker', () => {
        (0, vitest_1.it)('should not trigger circuit breaker with few errors', () => {
            for (let i = 0; i < 10; i++) {
                errorHandler.handleError(new Error(`Error ${i}`));
            }
            (0, vitest_1.expect)(errorHandler.isCircuitBreakerOpen()).toBe(false);
        });
        (0, vitest_1.it)('should trigger circuit breaker with many errors', () => {
            process.env.ERROR_THRESHOLD = '5';
            GlobalErrorHandler.resetInstance();
            errorHandler = GlobalErrorHandler.getInstance();
            for (let i = 0; i < 6; i++) {
                errorHandler.handleError(new Error(`Error ${i}`));
            }
            (0, vitest_1.expect)(errorHandler.isCircuitBreakerOpen()).toBe(true);
        });
        (0, vitest_1.it)('should reset error count after time window', () => {
            errorHandler.handleError(new Error('Test error'));
            const stats = errorHandler.getErrorStats();
            (0, vitest_1.expect)(stats.errorCount).toBe(1);
            vitest_1.vi.useFakeTimers();
            vitest_1.vi.advanceTimersByTime(61000);
            errorHandler.handleError(new Error('Another error'));
            const newStats = errorHandler.getErrorStats();
            (0, vitest_1.expect)(newStats.errorCount).toBe(1);
            vitest_1.vi.useRealTimers();
        });
    });
    (0, vitest_1.describe)('Error Statistics', () => {
        (0, vitest_1.it)('should track error statistics correctly', () => {
            const initialStats = errorHandler.getErrorStats();
            (0, vitest_1.expect)(initialStats.errorCount).toBe(0);
            errorHandler.handleError(new Error('Test error'));
            const updatedStats = errorHandler.getErrorStats();
            (0, vitest_1.expect)(updatedStats.errorCount).toBe(1);
            (0, vitest_1.expect)(updatedStats.lastErrorTime).toBeGreaterThan(0);
        });
        (0, vitest_1.it)('should include configuration in stats', () => {
            const stats = errorHandler.getErrorStats();
            (0, vitest_1.expect)(stats).toHaveProperty('errorThreshold');
            (0, vitest_1.expect)(stats).toHaveProperty('timeWindowMs');
            (0, vitest_1.expect)(stats.timeWindowMs).toBe(60000);
        });
    });
    (0, vitest_1.describe)('Error Response Format', () => {
        (0, vitest_1.it)('should create properly formatted error responses', async () => {
            const error = new AgentError(AgentErrorType.VALIDATION_ERROR, 'Test validation error', { field: 'email' });
            const response = errorHandler.handleError(error);
            const responseBody = await response.json();
            (0, vitest_1.expect)(responseBody).toHaveProperty('success', false);
            (0, vitest_1.expect)(responseBody).toHaveProperty('error');
            (0, vitest_1.expect)(responseBody).toHaveProperty('requestId');
            (0, vitest_1.expect)(responseBody).toHaveProperty('timestamp');
            (0, vitest_1.expect)(responseBody.error).toHaveProperty('code');
            (0, vitest_1.expect)(responseBody.error).toHaveProperty('message');
            (0, vitest_1.expect)(responseBody.error).toHaveProperty('type');
        });
    });
    (0, vitest_1.describe)('Error Recording', () => {
        (0, vitest_1.it)('should record errors to monitoring system', () => {
            const consoleSpy = vitest_1.vi.spyOn(console, 'error');
            const error = new AgentError(AgentErrorType.SYSTEM_ERROR, 'Test system error');
            errorHandler.handleError(error);
            (0, vitest_1.expect)(consoleSpy).toHaveBeenCalledWith('Error recorded:', vitest_1.expect.objectContaining({
                id: vitest_1.expect.any(String),
                type: AgentErrorType.SYSTEM_ERROR,
                message: 'Test system error',
                timestamp: vitest_1.expect.any(String)
            }));
        });
    });
    (0, vitest_1.describe)('Fallback Error Handling', () => {
        (0, vitest_1.it)('should handle errors within the error handler', () => {
            // 模拟错误处理器内部错误
            const originalRecordError = errorHandler.recordError;
            errorHandler.recordError = () => {
                throw new Error('Recording failed');
            };
            const result = errorHandler.handleError(new Error('Test error'));
            (0, vitest_1.expect)(result).toBeDefined();
            // 恢复原方法
            errorHandler.recordError = originalRecordError;
        });
    });
});
// 集成测试
(0, vitest_1.describe)('GlobalErrorHandler Integration', () => {
    (0, vitest_1.it)('should handle complete error flow', async () => {
        const errorHandler = GlobalErrorHandler.getInstance();
        const error = new Error('Database connection failed');
        const result = errorHandler.handleError(error);
        (0, vitest_1.expect)(result).toBeDefined();
        (0, vitest_1.expect)(result.status).toBeGreaterThanOrEqual(400);
        const responseBody = await result.json();
        (0, vitest_1.expect)(responseBody.success).toBe(false);
        (0, vitest_1.expect)(responseBody.error).toBeDefined();
        (0, vitest_1.expect)(responseBody.requestId).toBeDefined();
    });
    (0, vitest_1.it)('should maintain circuit breaker state across multiple errors', () => {
        process.env.ERROR_THRESHOLD = '3';
        GlobalErrorHandler.resetInstance();
        const errorHandler = GlobalErrorHandler.getInstance();
        // 触发断路器
        for (let i = 0; i < 4; i++) {
            errorHandler.handleError(new Error(`Error ${i}`));
        }
        (0, vitest_1.expect)(errorHandler.isCircuitBreakerOpen()).toBe(true);
        const stats = errorHandler.getErrorStats();
        (0, vitest_1.expect)(stats.circuitBreakerOpen).toBe(true);
        (0, vitest_1.expect)(stats.errorCount).toBeGreaterThanOrEqual(3);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,