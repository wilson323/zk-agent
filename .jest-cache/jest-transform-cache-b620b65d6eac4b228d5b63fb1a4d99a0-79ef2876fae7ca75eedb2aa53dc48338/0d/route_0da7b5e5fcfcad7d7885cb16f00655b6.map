{"version":3,"names":["cov_2hgj77rtk2","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","zod_1","connection_1","__importDefault","middleware_1","updateProfileSchema","z","object","string","optional","avatar","exports","GET","createApiRoute","RouteConfigs","publicGet","req","params","validatedBody","validatedQuery","user","requestId","currentUser","getCurrentUser","ApiResponseWrapper","success","error","status","foundUser","default","findUnique","where","id","userId","select","email","createdAt","updatedAt","stats","usageStats","aggregate","_count","profile","role","loginCount","data","PUT","protectedPut","updateData","updatedUser","update","Date","create","agentType","action","metadata","updatedFields","Object","keys","userAgent","headers","get","ip","catch","console","message"],"sources":["E:\\zk-agent\\app\\api\\auth\\profile\\route.ts"],"sourcesContent":["/**\n * @file auth\\profile\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { z } from \"zod\"\nimport prisma from \"@/lib/database/connection\"\nimport { getCurrentUser } from \"@/lib/auth/middleware\"\nimport type { UserProfile } from \"@/types/auth\"\n\nconst updateProfileSchema = z.object({\n  name: z.string().optional(),\n  avatar: z.string().optional(),\n});\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    const currentUser = getCurrentUser(req)\n    if (!currentUser) {\n      return ApiResponseWrapper.success(\n        {\n          success: false,\n          error: \"未授权访问\",\n        },\n        { status: 401 },\n      )\n    }\n\n    const foundUser = await prisma.user.findUnique({\n      where: { id: currentUser.userId },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n\n    if (!foundUser) {\n      return ApiResponseWrapper.success(\n        {\n          success: false,\n          error: \"用户不存在\",\n        },\n        { status: 404 },\n      )\n    }\n\n    // 获取用户统计信息\n    const stats = await prisma.usageStats.aggregate({\n      where: { userId: foundUser.id },\n      _count: { id: true },\n    })\n\n    const profile: UserProfile = {\n      id: foundUser.id,\n      email: foundUser.email,\n      name: foundUser.name,\n      avatar: foundUser.avatar,\n      role: currentUser.role,\n      createdAt: foundUser.createdAt,\n      updatedAt: foundUser.updatedAt,\n      loginCount: stats._count.id || 0,\n    }\n\n    return ApiResponseWrapper.success({\n      success: true,\n      data: profile,\n    })\n  }\n);\n\nexport const PUT = createApiRoute(\n  RouteConfigs.protectedPut(updateProfileSchema),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    const currentUser = getCurrentUser(req)\n    if (!currentUser) {\n      return ApiResponseWrapper.success(\n        {\n          success: false,\n          error: \"未授权访问\",\n        },\n        { status: 401 },\n      )\n    }\n\n    const updateData = validatedBody\n\n    // 更新用户资料\n    const updatedUser = await prisma.user.update({\n      where: { id: currentUser.userId },\n      data: {\n        ...updateData,\n        updatedAt: new Date(),\n      },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n\n    // 记录更新日志\n    await prisma.usageStats\n      .create({\n        data: {\n          userId: currentUser.userId,\n          agentType: \"auth\",\n          action: \"update_profile\",\n          metadata: {\n            updatedFields: Object.keys(updateData),\n            userAgent: req.headers.get(\"user-agent\"),\n            ip: req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\"),\n          },\n        },\n      })\n      .catch((error) => {\n        console.error(\"Failed to log profile update:\", error);\n      })\n\n    return ApiResponseWrapper.success({\n      success: true,\n      data: updatedUser,\n      message: \"资料更新成功\",\n    })\n  }\n);\n\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UA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","ignoreList":[]}