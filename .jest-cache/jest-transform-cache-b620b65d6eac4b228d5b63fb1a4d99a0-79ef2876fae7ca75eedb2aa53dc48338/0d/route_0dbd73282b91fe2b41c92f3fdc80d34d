c0279448d8e9d2022ed4de3340be7baa
"use strict";

/**
 * @file fastgpt\api\v1\chat\completions\route.ts
 * @description Migrated API route with global error handling
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_2ftsdgrvv0() {
  var path = "E:\\zk-agent\\app\\api\\fastgpt\\api\\v1\\chat\\completions\\route.ts";
  var hash = "d9c0f3202f7525893049467f093fca32b00f57d7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\fastgpt\\api\\v1\\chat\\completions\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 22
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "4": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 72,
          column: 3
        }
      },
      "5": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "6": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "7": {
        start: {
          line: 15,
          column: 32
        },
        end: {
          line: 15,
          column: 59
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "9": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 89
        }
      },
      "10": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 19,
          column: 37
        }
      },
      "11": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "12": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "13": {
        start: {
          line: 31,
          column: 27
        },
        end: {
          line: 54,
          column: 14
        }
      },
      "14": {
        start: {
          line: 34,
          column: 35
        },
        end: {
          line: 34,
          column: 61
        }
      },
      "15": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 38,
          column: 21
        }
      },
      "16": {
        start: {
          line: 36,
          column: 24
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "17": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 31
        }
      },
      "18": {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 52,
          column: 21
        }
      },
      "19": {
        start: {
          line: 40,
          column: 24
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "20": {
        start: {
          line: 41,
          column: 52
        },
        end: {
          line: 41,
          column: 71
        }
      },
      "21": {
        start: {
          line: 42,
          column: 28
        },
        end: {
          line: 44,
          column: 29
        }
      },
      "22": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "23": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 46,
          column: 54
        }
      },
      "24": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 50,
          column: 43
        }
      },
      "25": {
        start: {
          line: 51,
          column: 24
        },
        end: {
          line: 51,
          column: 45
        }
      },
      "26": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 62,
          column: 15
        }
      },
      "27": {
        start: {
          line: 65,
          column: 21
        },
        end: {
          line: 65,
          column: 42
        }
      },
      "28": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 90
        }
      },
      "29": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 51
        }
      },
      "30": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 89
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 105
          },
          end: {
            line: 12,
            column: 106
          }
        },
        loc: {
          start: {
            line: 12,
            column: 180
          },
          end: {
            line: 72,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 16
          },
          end: {
            line: 32,
            column: 17
          }
        },
        loc: {
          start: {
            line: 32,
            column: 40
          },
          end: {
            line: 53,
            column: 17
          }
        },
        line: 32
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 16,
            column: 28
          }
        }, {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 48
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 38,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 20
          },
          end: {
            line: 38,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 44,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 44,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\fastgpt\\api\\v1\\chat\\completions\\route.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAGH,0EAAqG;AACrG,uDAA4D;AAE/C,QAAA,IAAI,GAAG,IAAA,kCAAc,EAChC,gCAAY,CAAC,aAAa,EAAE,EAC5B,KAAK,EAAE,GAAgB,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;IACrF,IAAI,CAAC;QACH,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAA;QACnD,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAA;QAEnD,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,EAAE,CAAC;YACzC,OAAO,+BAAkB,CAAC,KAAK,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;QACjE,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAA;QAE7B,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,eAAe,0BAA0B,EAAE;YACzE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,aAAa,EAAE,UAAU,eAAe,EAAE;aAC3C;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;SAC3B,CAAC,CAAA;QAEF,gEAAgE;QAChE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,+BAA+B;YAC/B,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;gBAChC,KAAK,CAAC,KAAK,CAAC,UAAU;oBACpB,oCAAoC;oBACpC,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,CAAA;oBACzC,IAAI,CAAC,MAAM,EAAE,CAAC;wBACZ,UAAU,CAAC,KAAK,EAAE,CAAA;wBAClB,OAAM;oBACR,CAAC;oBAED,IAAI,CAAC;wBACH,OAAO,IAAI,EAAE,CAAC;4BACZ,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAA;4BAC3C,IAAI,IAAI,EAAE,CAAC;gCACT,MAAK;4BACP,CAAC;4BACD,mCAAmC;4BACnC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;wBAC3B,CAAC;oBACH,CAAC;4BAAS,CAAC;wBACT,UAAU,CAAC,KAAK,EAAE,CAAA;wBAClB,MAAM,CAAC,WAAW,EAAE,CAAA;oBACtB,CAAC;gBACH,CAAC;aACF,CAAC,CAAA;YAEF,iDAAiD;YACjD,OAAO,IAAI,QAAQ,CAAC,MAAM,EAAE;gBAC1B,OAAO,EAAE;oBACP,cAAc,EAAE,mBAAmB;oBACnC,eAAe,EAAE,UAAU;oBAC3B,UAAU,EAAE,YAAY;iBACzB;aACF,CAAC,CAAA;QACJ,CAAC;QAED,+CAA+C;QAC/C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAClC,OAAO,+BAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAA;IACtE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAA;QAC1C,OAAO,+BAAkB,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;IACrE,CAAC;AACH,CAAC,CACF,CAAC",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\fastgpt\\api\\v1\\chat\\completions\\route.ts"],
      sourcesContent: ["/**\n * @file fastgpt\\api\\v1\\chat\\completions\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const FASTGPT_API_URL = process.env.FASTGPT_API_URL\n      const FASTGPT_API_KEY = process.env.FASTGPT_API_KEY\n      \n      if (!FASTGPT_API_URL || !FASTGPT_API_KEY) {\n        return ApiResponseWrapper.error('FastGPT\u914D\u7F6E\u7F3A\u5931', { status: 500 })\n      }\n      \n      const body = await req.json()\n      \n      const response = await fetch(`${FASTGPT_API_URL}/api/v1/chat/completions`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${FASTGPT_API_KEY}`,\n        },\n        body: JSON.stringify(body),\n      })\n  \n      // For streaming responses, we need to return the response as is\n      if (body.stream) {\n        // Create a new readable stream\n        const stream = new ReadableStream({\n          async start(controller) {\n            // Get the response body as a reader\n            const reader = response.body?.getReader()\n            if (!reader) {\n              controller.close()\n              return\n            }\n  \n            try {\n              while (true) {\n                const { done, value } = await reader.read()\n                if (done) {\n                  break\n                }\n                // Push the chunk to the new stream\n                controller.enqueue(value)\n              }\n            } finally {\n              controller.close()\n              reader.releaseLock()\n            }\n          },\n        })\n  \n        // Return the stream with the appropriate headers\n        return new Response(stream, {\n          headers: {\n            \"Content-Type\": \"text/event-stream\",\n            \"Cache-Control\": \"no-cache\",\n            Connection: \"keep-alive\",\n          },\n        })\n      }\n  \n      // For non-streaming responses, return the JSON\n      const data = await response.json()\n      return ApiResponseWrapper.success(data, { status: response.status })\n    } catch (error) {\n      console.error('FastGPT API error:', error)\n      return ApiResponseWrapper.error('FastGPT API\u8C03\u7528\u5931\u8D25', { status: 500 })\n    }\n  }\n);\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d9c0f3202f7525893049467f093fca32b00f57d7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ftsdgrvv0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ftsdgrvv0();
cov_2ftsdgrvv0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ftsdgrvv0().s[1]++;
exports.POST = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_2ftsdgrvv0().s[2]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_2ftsdgrvv0().s[3]++, require("@/lib/utils/api-helper"));
/* istanbul ignore next */
cov_2ftsdgrvv0().s[4]++;
exports.POST = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPost(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_2ftsdgrvv0().f[0]++;
  cov_2ftsdgrvv0().s[5]++;
  try {
    const FASTGPT_API_URL =
    /* istanbul ignore next */
    (cov_2ftsdgrvv0().s[6]++, process.env.FASTGPT_API_URL);
    const FASTGPT_API_KEY =
    /* istanbul ignore next */
    (cov_2ftsdgrvv0().s[7]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_2ftsdgrvv0().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_2ftsdgrvv0().b[1][0]++, !FASTGPT_API_URL) ||
    /* istanbul ignore next */
    (cov_2ftsdgrvv0().b[1][1]++, !FASTGPT_API_KEY)) {
      /* istanbul ignore next */
      cov_2ftsdgrvv0().b[0][0]++;
      cov_2ftsdgrvv0().s[9]++;
      return api_helper_1.ApiResponseWrapper.error('FastGPT配置缺失', {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ftsdgrvv0().b[0][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_2ftsdgrvv0().s[10]++, await req.json());
    const response =
    /* istanbul ignore next */
    (cov_2ftsdgrvv0().s[11]++, await fetch(`${FASTGPT_API_URL}/api/v1/chat/completions`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${FASTGPT_API_KEY}`
      },
      body: JSON.stringify(body)
    }));
    // For streaming responses, we need to return the response as is
    /* istanbul ignore next */
    cov_2ftsdgrvv0().s[12]++;
    if (body.stream) {
      /* istanbul ignore next */
      cov_2ftsdgrvv0().b[2][0]++;
      // Create a new readable stream
      const stream =
      /* istanbul ignore next */
      (cov_2ftsdgrvv0().s[13]++, new ReadableStream({
        async start(controller) {
          /* istanbul ignore next */
          cov_2ftsdgrvv0().f[1]++;
          // Get the response body as a reader
          const reader =
          /* istanbul ignore next */
          (cov_2ftsdgrvv0().s[14]++, response.body?.getReader());
          /* istanbul ignore next */
          cov_2ftsdgrvv0().s[15]++;
          if (!reader) {
            /* istanbul ignore next */
            cov_2ftsdgrvv0().b[3][0]++;
            cov_2ftsdgrvv0().s[16]++;
            controller.close();
            /* istanbul ignore next */
            cov_2ftsdgrvv0().s[17]++;
            return;
          } else
          /* istanbul ignore next */
          {
            cov_2ftsdgrvv0().b[3][1]++;
          }
          cov_2ftsdgrvv0().s[18]++;
          try {
            /* istanbul ignore next */
            cov_2ftsdgrvv0().s[19]++;
            while (true) {
              const {
                done,
                value
              } =
              /* istanbul ignore next */
              (cov_2ftsdgrvv0().s[20]++, await reader.read());
              /* istanbul ignore next */
              cov_2ftsdgrvv0().s[21]++;
              if (done) {
                /* istanbul ignore next */
                cov_2ftsdgrvv0().b[4][0]++;
                cov_2ftsdgrvv0().s[22]++;
                break;
              } else
              /* istanbul ignore next */
              {
                cov_2ftsdgrvv0().b[4][1]++;
              }
              // Push the chunk to the new stream
              cov_2ftsdgrvv0().s[23]++;
              controller.enqueue(value);
            }
          } finally {
            /* istanbul ignore next */
            cov_2ftsdgrvv0().s[24]++;
            controller.close();
            /* istanbul ignore next */
            cov_2ftsdgrvv0().s[25]++;
            reader.releaseLock();
          }
        }
      }));
      // Return the stream with the appropriate headers
      /* istanbul ignore next */
      cov_2ftsdgrvv0().s[26]++;
      return new Response(stream, {
        headers: {
          "Content-Type": "text/event-stream",
          "Cache-Control": "no-cache",
          Connection: "keep-alive"
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ftsdgrvv0().b[2][1]++;
    }
    // For non-streaming responses, return the JSON
    const data =
    /* istanbul ignore next */
    (cov_2ftsdgrvv0().s[27]++, await response.json());
    /* istanbul ignore next */
    cov_2ftsdgrvv0().s[28]++;
    return api_helper_1.ApiResponseWrapper.success(data, {
      status: response.status
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ftsdgrvv0().s[29]++;
    console.error('FastGPT API error:', error);
    /* istanbul ignore next */
    cov_2ftsdgrvv0().s[30]++;
    return api_helper_1.ApiResponseWrapper.error('FastGPT API调用失败', {
      status: 500
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmZ0c2RncnZ2MCIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImFwaV9yb3V0ZV93cmFwcGVyXzEiLCJyZXF1aXJlIiwiYXBpX2hlbHBlcl8xIiwiZXhwb3J0cyIsIlBPU1QiLCJjcmVhdGVBcGlSb3V0ZSIsIlJvdXRlQ29uZmlncyIsInByb3RlY3RlZFBvc3QiLCJyZXEiLCJwYXJhbXMiLCJ2YWxpZGF0ZWRCb2R5IiwidmFsaWRhdGVkUXVlcnkiLCJ1c2VyIiwicmVxdWVzdElkIiwiRkFTVEdQVF9BUElfVVJMIiwicHJvY2VzcyIsImVudiIsIkZBU1RHUFRfQVBJX0tFWSIsIkFwaVJlc3BvbnNlV3JhcHBlciIsImVycm9yIiwic3RhdHVzIiwiYm9keSIsImpzb24iLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJKU09OIiwic3RyaW5naWZ5Iiwic3RyZWFtIiwiUmVhZGFibGVTdHJlYW0iLCJjb250cm9sbGVyIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwiY2xvc2UiLCJkb25lIiwidmFsdWUiLCJyZWFkIiwiZW5xdWV1ZSIsInJlbGVhc2VMb2NrIiwiUmVzcG9uc2UiLCJDb25uZWN0aW9uIiwiZGF0YSIsInN1Y2Nlc3MiLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiRTpcXHprLWFnZW50XFxhcHBcXGFwaVxcZmFzdGdwdFxcYXBpXFx2MVxcY2hhdFxcY29tcGxldGlvbnNcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGUgZmFzdGdwdFxcYXBpXFx2MVxcY2hhdFxcY29tcGxldGlvbnNcXHJvdXRlLnRzXG4gKiBAZGVzY3JpcHRpb24gTWlncmF0ZWQgQVBJIHJvdXRlIHdpdGggZ2xvYmFsIGVycm9yIGhhbmRsaW5nXG4gKiBAYXV0aG9yIFpLLUFnZW50IFRlYW1cbiAqIEBkYXRlIDIwMjUtMDYtMjVcbiAqL1xuXG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgY3JlYXRlQXBpUm91dGUsIFJvdXRlQ29uZmlncywgQ29tbW9uVmFsaWRhdGlvbnMgfSBmcm9tICdAL2xpYi9taWRkbGV3YXJlL2FwaS1yb3V0ZS13cmFwcGVyJztcbmltcG9ydCB7IEFwaVJlc3BvbnNlV3JhcHBlciB9IGZyb20gJ0AvbGliL3V0aWxzL2FwaS1oZWxwZXInO1xuXG5leHBvcnQgY29uc3QgUE9TVCA9IGNyZWF0ZUFwaVJvdXRlKFxuICBSb3V0ZUNvbmZpZ3MucHJvdGVjdGVkUG9zdCgpLFxuICBhc3luYyAocmVxOiBOZXh0UmVxdWVzdCwgeyBwYXJhbXMsIHZhbGlkYXRlZEJvZHksIHZhbGlkYXRlZFF1ZXJ5LCB1c2VyLCByZXF1ZXN0SWQgfSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBGQVNUR1BUX0FQSV9VUkwgPSBwcm9jZXNzLmVudi5GQVNUR1BUX0FQSV9VUkxcbiAgICAgIGNvbnN0IEZBU1RHUFRfQVBJX0tFWSA9IHByb2Nlc3MuZW52LkZBU1RHUFRfQVBJX0tFWVxuICAgICAgXG4gICAgICBpZiAoIUZBU1RHUFRfQVBJX1VSTCB8fCAhRkFTVEdQVF9BUElfS0VZKSB7XG4gICAgICAgIHJldHVybiBBcGlSZXNwb25zZVdyYXBwZXIuZXJyb3IoJ0Zhc3RHUFTphY3nva7nvLrlpLEnLCB7IHN0YXR1czogNTAwIH0pXG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpXG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7RkFTVEdQVF9BUElfVVJMfS9hcGkvdjEvY2hhdC9jb21wbGV0aW9uc2AsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtGQVNUR1BUX0FQSV9LRVl9YCxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICB9KVxuICBcbiAgICAgIC8vIEZvciBzdHJlYW1pbmcgcmVzcG9uc2VzLCB3ZSBuZWVkIHRvIHJldHVybiB0aGUgcmVzcG9uc2UgYXMgaXNcbiAgICAgIGlmIChib2R5LnN0cmVhbSkge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgcmVhZGFibGUgc3RyZWFtXG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgYXN5bmMgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSByZXNwb25zZSBib2R5IGFzIGEgcmVhZGVyXG4gICAgICAgICAgICBjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5Py5nZXRSZWFkZXIoKVxuICAgICAgICAgICAgaWYgKCFyZWFkZXIpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpXG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICBcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKVxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQdXNoIHRoZSBjaHVuayB0byB0aGUgbmV3IHN0cmVhbVxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpXG4gICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgXG4gICAgICAgIC8vIFJldHVybiB0aGUgc3RyZWFtIHdpdGggdGhlIGFwcHJvcHJpYXRlIGhlYWRlcnNcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShzdHJlYW0sIHtcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcInRleHQvZXZlbnQtc3RyZWFtXCIsXG4gICAgICAgICAgICBcIkNhY2hlLUNvbnRyb2xcIjogXCJuby1jYWNoZVwiLFxuICAgICAgICAgICAgQ29ubmVjdGlvbjogXCJrZWVwLWFsaXZlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgXG4gICAgICAvLyBGb3Igbm9uLXN0cmVhbWluZyByZXNwb25zZXMsIHJldHVybiB0aGUgSlNPTlxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5zdWNjZXNzKGRhdGEsIHsgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFzdEdQVCBBUEkgZXJyb3I6JywgZXJyb3IpXG4gICAgICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLmVycm9yKCdGYXN0R1BUIEFQSeiwg+eUqOWksei0pScsIHsgc3RhdHVzOiA1MDAgfSlcbiAgICB9XG4gIH1cbik7XG5cbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7O0FBQUE7QUFBQSxTQUFBQSxlQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxNQUFBLE9BQUFDLFFBQUE7RUFBQSxJQUFBQyxHQUFBO0VBQUEsSUFBQUMsWUFBQTtJQUFBTCxJQUFBO0lBQUFNLFlBQUE7TUFBQTtRQUFBQyxLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtJQUFBO0lBQUFXLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxjQUFBO01BQUFDLElBQUE7TUFBQUMsUUFBQTtNQUFBQyxLQUFBO01BQUFDLE9BQUE7TUFBQUMsY0FBQTtNQUFBQyxPQUFBO0lBQUE7SUFBQUMsZUFBQTtJQUFBNUIsSUFBQTtFQUFBO0VBQUEsSUFBQTZCLFFBQUEsR0FBQTVCLE1BQUEsQ0FBQUUsR0FBQSxNQUFBRixNQUFBLENB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