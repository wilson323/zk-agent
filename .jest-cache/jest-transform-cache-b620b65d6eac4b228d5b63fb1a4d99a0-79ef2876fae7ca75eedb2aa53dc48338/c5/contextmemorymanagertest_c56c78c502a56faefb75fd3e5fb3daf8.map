{"file":"E:\\zk-agent\\__tests__\\lib\\chat\\context-memory-manager.test.ts","mappings":";AAAA,cAAc;AACd;;;GAGG;;AAEH,8EAAwE;AAExE,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAClD,IAAI,cAAoC,CAAA;IAExC,UAAU,CAAC,GAAG,EAAE;QACd,cAAc,GAAG,IAAI,6CAAoB,EAAE,CAAA;IAC7C,CAAC,CAAC,CAAA;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAA;QACpB,cAAc,CAAC,KAAK,EAAE,CAAA;IACxB,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC3B,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAA;YACpC,MAAM,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,6CAAoB,CAAC,CAAA;QAC7D,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,EAAE,CAAA;YACzC,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC;gBAC3B,gBAAgB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACpC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBAC/B,oBAAoB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACxC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAClC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,MAAM,OAAO,GAAG;gBACd,EAAE,EAAE,OAAO;gBACX,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACtB,CAAA;YAED,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,CAAA;YAC/C,MAAM,QAAQ,GAAG,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YAExD,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAChC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;QAC5C,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;gBACnE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;gBAC3F,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;aAClF,CAAA;YAED,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YACpE,MAAM,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YAE9D,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YACtC,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAC1C,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;YACvB,MAAM,QAAQ,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,CAAA;YAC5F,MAAM,QAAQ,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,CAAA;YAC5F,MAAM,QAAQ,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,CAAA;YAE5F,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;YAChD,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;YAChD,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAA;YAEhD,MAAM,QAAQ,GAAG,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YACxD,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACvC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACvC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACzC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;YACvB,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;gBACpE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,0BAA0B,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;aACtG,CAAA;YAED,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YACpE,MAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAA;YAElE,MAAM,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACxC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAA;QAC5F,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC1B,gBAAgB;YAChB,cAAc,CAAC,YAAY,CAAC,EAAE,gBAAgB,EAAE,GAAG,EAAE,CAAC,CAAA;YAEtD,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACzD,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,OAAO,EAAE,MAAM,CAAC,qBAAqB;gBACrC,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;gBACxC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI;aACjC,CAAC,CAAC,CAAA;YAEH,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YAExE,MAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAA;YAClE,MAAM,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAA;QAChD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC5B,iBAAiB;YACjB,cAAc,CAAC,YAAY,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAA;YAE/C,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACrD,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,OAAO,EAAE,MAAM,CAAC,EAAE;gBAClB,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;gBACxC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI;aACjC,CAAC,CAAC,CAAA;YAEH,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YACpE,MAAM,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YAE9D,MAAM,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YACtC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC9C,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAChD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACzD,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,OAAO,EAAE,MAAM,CAAC,mCAAmC;gBACnD,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;gBACxC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI;aACjC,CAAC,CAAC,CAAA;YAEH,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YAExE,MAAM,cAAc,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAA;YACnE,MAAM,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;YACjD,MAAM,gBAAgB,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAA;YAErE,MAAM,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,cAAc,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;gBAC9F,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;gBACjF,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;gBAC/E,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE;aAC5G,CAAA;YAED,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YACpE,MAAM,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;YAEjD,MAAM,kBAAkB,GAAG,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YAClE,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;YAEtF,MAAM,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,MAAM,gBAAgB,GAAG;gBACvB,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;gBACzE,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;aACtF,CAAA;YAED,MAAM,gBAAgB,GAAG;gBACvB,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;gBACzE,EAAE,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;aACtF,CAAA;YAED,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YAC5E,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YAE5E,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/D,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/D,MAAM,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;YAC5G,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;YAE5G,MAAM,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAEhD,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;YAEzC,MAAM,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAChD,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/D,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QACjE,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;YAC5G,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAA;YAE5G,MAAM,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;YAEhD,cAAc,CAAC,KAAK,EAAE,CAAA;YAEtB,MAAM,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;YACvB,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;gBACzE,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;gBACzF,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;gBACzF,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;aACjF,CAAA;YAED,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YAEpE,MAAM,eAAe,GAAG,cAAc,CAAC,kBAAkB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAA;YAEjF,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAA;YACjD,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC9E,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;YACvB,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE;gBACtF,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;gBAC9E,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE;aAC1F,CAAA;YAED,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YAEpE,MAAM,eAAe,GAAG,cAAc,CAAC,kBAAkB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;YAE9E,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QACtD,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;YACtB,gBAAgB;YAChB,cAAc,CAAC,YAAY,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAA,CAAC,KAAK;YAE1D,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE;gBACrC,EAAE,EAAE,OAAO;gBACX,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM;aACpC,CAAC,CAAA;YAEF,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE;gBACrC,EAAE,EAAE,OAAO;gBACX,OAAO,EAAE,KAAK;gBACd,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK;aAC5B,CAAC,CAAA;YAEF,cAAc,CAAC,OAAO,EAAE,CAAA;YAExB,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;YAC/D,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;QACjE,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;YACxB,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBACtD,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACpB,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;gBACxC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,IAAI;aACjC,CAAC,CAAC,CAAA;YAEH,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAA;YAEpE,MAAM,WAAW,GAAG,cAAc,CAAC,cAAc,EAAE,CAAA;YAEnD,MAAM,CAAC,WAAW,CAAC,CAAC,aAAa,CAAC;gBAChC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACjC,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACjC,kBAAkB,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtC,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC/B,CAAC,CAAA;YAEF,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YAC3C,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QAC3C,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,UAAU,EAAE,GAAG,EAAE;YACpB,MAAM,SAAS,GAAG;gBAChB,gBAAgB,EAAE,IAAI;gBACtB,WAAW,EAAE,EAAE;gBACf,oBAAoB,EAAE,GAAG;gBACzB,aAAa,EAAE,QAAQ,CAAC,OAAO;aAChC,CAAA;YAED,cAAc,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;YACtC,MAAM,aAAa,GAAG,cAAc,CAAC,SAAS,EAAE,CAAA;YAEhD,MAAM,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;QAChD,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;YACxB,MAAM,aAAa,GAAG;gBACpB,gBAAgB,EAAE,CAAC,CAAC;gBACpB,WAAW,EAAE,CAAC;gBACd,oBAAoB,EAAE,GAAG;gBACzB,aAAa,EAAE,CAAC,IAAI;aACrB,CAAA;YAED,MAAM,CAAC,GAAG,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;iBACrD,OAAO,CAAC,uBAAuB,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,IAAI,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACpD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAC1B,cAAc,CAAC,UAAU,CAAC,WAAW,EAAE;gBACrC,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,OAAO,EAAE,QAAQ,CAAC,EAAE;gBACpB,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW;gBACxC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;aAC1B,CAAC,CACH,CACF,CAAA;YAED,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;YAE3B,MAAM,QAAQ,GAAG,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YACxD,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\chat\\context-memory-manager.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * 上下文内存管理器测试\r\n * 确保智能对话的上下文管理100%可靠\r\n */\r\n\r\nimport { ContextMemoryManager } from '@/lib/chat/context-memory-manager'\r\n\r\ndescribe('ContextMemoryManager - 智能对话上下文内存管理', () => {\r\n  let contextManager: ContextMemoryManager\r\n  \r\n  beforeEach(() => {\r\n    contextManager = new ContextMemoryManager()\r\n  })\r\n  \r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n    contextManager.clear()\r\n  })\r\n\r\n  describe('基础功能测试', () => {\r\n    test('应该正确初始化上下文内存管理器', () => {\r\n      expect(contextManager).toBeDefined()\r\n      expect(contextManager).toBeInstanceOf(ContextMemoryManager)\r\n    })\r\n\r\n    test('应该正确设置默认配置', () => {\r\n      const config = contextManager.getConfig()\r\n      expect(config).toMatchObject({\r\n        maxContextLength: expect.any(Number),\r\n        maxMessages: expect.any(Number),\r\n        compressionThreshold: expect.any(Number),\r\n        retentionTime: expect.any(Number)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('消息存储测试', () => {\r\n    test('应该正确存储单条消息', () => {\r\n      const message = {\r\n        id: 'msg-1',\r\n        content: '你好',\r\n        role: 'user',\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      contextManager.addMessage('session-1', message)\r\n      const messages = contextManager.getMessages('session-1')\r\n      \r\n      expect(messages).toHaveLength(1)\r\n      expect(messages[0]).toMatchObject(message)\r\n    })\r\n\r\n    test('应该正确存储多条消息', () => {\r\n      const messages = [\r\n        { id: 'msg-1', content: '你好', role: 'user', timestamp: Date.now() },\r\n        { id: 'msg-2', content: '你好！有什么可以帮助你的吗？', role: 'assistant', timestamp: Date.now() + 1000 },\r\n        { id: 'msg-3', content: '请介绍一下你的功能', role: 'user', timestamp: Date.now() + 2000 }\r\n      ]\r\n      \r\n      messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      const storedMessages = contextManager.getMessages('session-1')\r\n      \r\n      expect(storedMessages).toHaveLength(3)\r\n      expect(storedMessages).toEqual(messages)\r\n    })\r\n\r\n    test('应该按时间顺序存储消息', () => {\r\n      const message1 = { id: 'msg-1', content: '第一条', role: 'user', timestamp: Date.now() + 2000 }\r\n      const message2 = { id: 'msg-2', content: '第二条', role: 'user', timestamp: Date.now() + 1000 }\r\n      const message3 = { id: 'msg-3', content: '第三条', role: 'user', timestamp: Date.now() + 3000 }\r\n      \r\n      contextManager.addMessage('session-1', message1)\r\n      contextManager.addMessage('session-1', message2)\r\n      contextManager.addMessage('session-1', message3)\r\n      \r\n      const messages = contextManager.getMessages('session-1')\r\n      expect(messages[0].content).toBe('第二条')\r\n      expect(messages[1].content).toBe('第一条')\r\n      expect(messages[2].content).toBe('第三条')\r\n    })\r\n  })\r\n\r\n  describe('上下文长度管理测试', () => {\r\n    test('应该正确计算上下文长度', () => {\r\n      const messages = [\r\n        { id: 'msg-1', content: '短消息', role: 'user', timestamp: Date.now() },\r\n        { id: 'msg-2', content: '这是一条比较长的消息内容，用于测试上下文长度计算', role: 'assistant', timestamp: Date.now() + 1000 }\r\n      ]\r\n      \r\n      messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      const contextLength = contextManager.getContextLength('session-1')\r\n      \r\n      expect(contextLength).toBeGreaterThan(0)\r\n      expect(contextLength).toBe(messages.reduce((total, msg) => total + msg.content.length, 0))\r\n    })\r\n\r\n    test('应该在超过最大长度时自动压缩', () => {\r\n      // 设置较小的最大长度用于测试\r\n      contextManager.updateConfig({ maxContextLength: 100 })\r\n      \r\n      const longMessages = Array.from({ length: 10 }, (_, i) => ({\r\n        id: `msg-${i}`,\r\n        content: `这是第${i}条很长的消息内容，用于测试自动压缩功能`,\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        timestamp: Date.now() + i * 1000\r\n      }))\r\n      \r\n      longMessages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      \r\n      const contextLength = contextManager.getContextLength('session-1')\r\n      expect(contextLength).toBeLessThanOrEqual(100)\r\n    })\r\n  })\r\n\r\n  describe('消息数量限制测试', () => {\r\n    test('应该在超过最大消息数时移除旧消息', () => {\r\n      // 设置较小的最大消息数用于测试\r\n      contextManager.updateConfig({ maxMessages: 5 })\r\n      \r\n      const messages = Array.from({ length: 10 }, (_, i) => ({\r\n        id: `msg-${i}`,\r\n        content: `消息 ${i}`,\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        timestamp: Date.now() + i * 1000\r\n      }))\r\n      \r\n      messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      const storedMessages = contextManager.getMessages('session-1')\r\n      \r\n      expect(storedMessages).toHaveLength(5)\r\n      expect(storedMessages[0].content).toBe('消息 5')\r\n      expect(storedMessages[4].content).toBe('消息 9')\r\n    })\r\n  })\r\n\r\n  describe('上下文压缩测试', () => {\r\n    test('应该正确压缩长上下文', () => {\r\n      const longMessages = Array.from({ length: 20 }, (_, i) => ({\r\n        id: `msg-${i}`,\r\n        content: `这是第${i}条消息，包含了很多详细的内容和信息，用于测试上下文压缩功能的有效性`,\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        timestamp: Date.now() + i * 1000\r\n      }))\r\n      \r\n      longMessages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      \r\n      const originalLength = contextManager.getContextLength('session-1')\r\n      await contextManager.compressContext('session-1')\r\n      const compressedLength = contextManager.getContextLength('session-1')\r\n      \r\n      expect(compressedLength).toBeLessThan(originalLength)\r\n    })\r\n\r\n    test('应该保留重要消息在压缩后', async () => {\r\n      const messages = [\r\n        { id: 'msg-1', content: '重要：这是关键信息', role: 'user', timestamp: Date.now(), importance: 'high' },\r\n        { id: 'msg-2', content: '普通消息', role: 'assistant', timestamp: Date.now() + 1000 },\r\n        { id: 'msg-3', content: '另一条普通消息', role: 'user', timestamp: Date.now() + 2000 },\r\n        { id: 'msg-4', content: '重要：这也是关键信息', role: 'assistant', timestamp: Date.now() + 3000, importance: 'high' }\r\n      ]\r\n      \r\n      messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      await contextManager.compressContext('session-1')\r\n      \r\n      const compressedMessages = contextManager.getMessages('session-1')\r\n      const importantMessages = compressedMessages.filter(msg => msg.content.includes('重要'))\r\n      \r\n      expect(importantMessages).toHaveLength(2)\r\n    })\r\n  })\r\n\r\n  describe('会话管理测试', () => {\r\n    test('应该正确管理多个会话', () => {\r\n      const session1Messages = [\r\n        { id: 'msg-1-1', content: '会话1消息1', role: 'user', timestamp: Date.now() },\r\n        { id: 'msg-1-2', content: '会话1消息2', role: 'assistant', timestamp: Date.now() + 1000 }\r\n      ]\r\n      \r\n      const session2Messages = [\r\n        { id: 'msg-2-1', content: '会话2消息1', role: 'user', timestamp: Date.now() },\r\n        { id: 'msg-2-2', content: '会话2消息2', role: 'assistant', timestamp: Date.now() + 1000 }\r\n      ]\r\n      \r\n      session1Messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      session2Messages.forEach(msg => contextManager.addMessage('session-2', msg))\r\n      \r\n      expect(contextManager.getMessages('session-1')).toHaveLength(2)\r\n      expect(contextManager.getMessages('session-2')).toHaveLength(2)\r\n      expect(contextManager.getSessionCount()).toBe(2)\r\n    })\r\n\r\n    test('应该正确删除指定会话', () => {\r\n      contextManager.addMessage('session-1', { id: 'msg-1', content: '消息1', role: 'user', timestamp: Date.now() })\r\n      contextManager.addMessage('session-2', { id: 'msg-2', content: '消息2', role: 'user', timestamp: Date.now() })\r\n      \r\n      expect(contextManager.getSessionCount()).toBe(2)\r\n      \r\n      contextManager.deleteSession('session-1')\r\n      \r\n      expect(contextManager.getSessionCount()).toBe(1)\r\n      expect(contextManager.getMessages('session-1')).toHaveLength(0)\r\n      expect(contextManager.getMessages('session-2')).toHaveLength(1)\r\n    })\r\n\r\n    test('应该正确清空所有会话', () => {\r\n      contextManager.addMessage('session-1', { id: 'msg-1', content: '消息1', role: 'user', timestamp: Date.now() })\r\n      contextManager.addMessage('session-2', { id: 'msg-2', content: '消息2', role: 'user', timestamp: Date.now() })\r\n      \r\n      expect(contextManager.getSessionCount()).toBe(2)\r\n      \r\n      contextManager.clear()\r\n      \r\n      expect(contextManager.getSessionCount()).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe('上下文检索测试', () => {\r\n    test('应该正确检索相关上下文', () => {\r\n      const messages = [\r\n        { id: 'msg-1', content: '我想了解人工智能', role: 'user', timestamp: Date.now() },\r\n        { id: 'msg-2', content: '人工智能是一个广泛的领域', role: 'assistant', timestamp: Date.now() + 1000 },\r\n        { id: 'msg-3', content: '机器学习是AI的一个分支', role: 'assistant', timestamp: Date.now() + 2000 },\r\n        { id: 'msg-4', content: '今天天气怎么样？', role: 'user', timestamp: Date.now() + 3000 }\r\n      ]\r\n      \r\n      messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      \r\n      const relevantContext = contextManager.getRelevantContext('session-1', '人工智能的应用')\r\n      \r\n      expect(relevantContext.length).toBeGreaterThan(0)\r\n      expect(relevantContext.some(msg => msg.content.includes('人工智能'))).toBe(true)\r\n    })\r\n\r\n    test('应该按相关性排序上下文', () => {\r\n      const messages = [\r\n        { id: 'msg-1', content: '深度学习是机器学习的一个重要分支', role: 'assistant', timestamp: Date.now() },\r\n        { id: 'msg-2', content: '今天天气很好', role: 'user', timestamp: Date.now() + 1000 },\r\n        { id: 'msg-3', content: '神经网络是深度学习的基础', role: 'assistant', timestamp: Date.now() + 2000 }\r\n      ]\r\n      \r\n      messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      \r\n      const relevantContext = contextManager.getRelevantContext('session-1', '深度学习')\r\n      \r\n      expect(relevantContext[0].content).toContain('深度学习')\r\n    })\r\n  })\r\n\r\n  describe('内存优化测试', () => {\r\n    test('应该正确清理过期会话', () => {\r\n      // 设置较短的保留时间用于测试\r\n      contextManager.updateConfig({ retentionTime: 1000 }) // 1秒\r\n      \r\n      contextManager.addMessage('session-1', { \r\n        id: 'msg-1', \r\n        content: '旧消息', \r\n        role: 'user', \r\n        timestamp: Date.now() - 2000 // 2秒前\r\n      })\r\n      \r\n      contextManager.addMessage('session-2', { \r\n        id: 'msg-2', \r\n        content: '新消息', \r\n        role: 'user', \r\n        timestamp: Date.now() // 现在\r\n      })\r\n      \r\n      contextManager.cleanup()\r\n      \r\n      expect(contextManager.getMessages('session-1')).toHaveLength(0)\r\n      expect(contextManager.getMessages('session-2')).toHaveLength(1)\r\n    })\r\n\r\n    test('应该正确报告内存使用情况', () => {\r\n      const messages = Array.from({ length: 100 }, (_, i) => ({\r\n        id: `msg-${i}`,\r\n        content: `消息内容 ${i}`,\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        timestamp: Date.now() + i * 1000\r\n      }))\r\n      \r\n      messages.forEach(msg => contextManager.addMessage('session-1', msg))\r\n      \r\n      const memoryUsage = contextManager.getMemoryUsage()\r\n      \r\n      expect(memoryUsage).toMatchObject({\r\n        totalSessions: expect.any(Number),\r\n        totalMessages: expect.any(Number),\r\n        totalContextLength: expect.any(Number),\r\n        memorySize: expect.any(Number)\r\n      })\r\n      \r\n      expect(memoryUsage.totalMessages).toBe(100)\r\n      expect(memoryUsage.totalSessions).toBe(1)\r\n    })\r\n  })\r\n\r\n  describe('配置更新测试', () => {\r\n    test('应该允许更新配置', () => {\r\n      const newConfig = {\r\n        maxContextLength: 5000,\r\n        maxMessages: 50,\r\n        compressionThreshold: 0.7,\r\n        retentionTime: 86400000 // 24小时\r\n      }\r\n      \r\n      contextManager.updateConfig(newConfig)\r\n      const updatedConfig = contextManager.getConfig()\r\n      \r\n      expect(updatedConfig).toMatchObject(newConfig)\r\n    })\r\n\r\n    test('应该验证配置参数的有效性', () => {\r\n      const invalidConfig = {\r\n        maxContextLength: -1,\r\n        maxMessages: 0,\r\n        compressionThreshold: 1.5,\r\n        retentionTime: -1000\r\n      }\r\n      \r\n      expect(() => contextManager.updateConfig(invalidConfig))\r\n        .toThrow('Invalid configuration')\r\n    })\r\n  })\r\n\r\n  describe('并发安全测试', () => {\r\n    test('应该正确处理并发消息添加', async () => {\r\n      const promises = Array.from({ length: 100 }, (_, i) => \r\n        Promise.resolve().then(() => \r\n          contextManager.addMessage('session-1', {\r\n            id: `msg-${i}`,\r\n            content: `并发消息 ${i}`,\r\n            role: i % 2 === 0 ? 'user' : 'assistant',\r\n            timestamp: Date.now() + i\r\n          })\r\n        )\r\n      )\r\n      \r\n      await Promise.all(promises)\r\n      \r\n      const messages = contextManager.getMessages('session-1')\r\n      expect(messages).toHaveLength(100)\r\n    })\r\n  })\r\n}) "],"version":3}