{"version":3,"names":["cov_25iinvtzcy","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","performance_monitor_1","enhanced_database_manager_1","unified_ai_adapter_1","exports","GET","createApiRoute","RouteConfigs","protectedGet","req","params","validatedBody","validatedQuery","user","requestId","ApiResponseWrapper","success","getSystemOverview","getPerformanceMetrics","getHealthStatus","getDatabaseMetrics","getAIServiceMetrics","getResourceUsage","error","status","uptime","process","timestamp","Date","toISOString","performanceMonitor","getMetrics","database","enhancedDatabaseManager","healthCheck","ai","unifiedAIAdapter","system","memory","memoryUsage","cpu","cpuUsage"],"sources":["E:\\zk-agent\\app\\api\\admin\\system-monitor\\route.ts"],"sourcesContent":["/**\n * @file admin\\system-monitor\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { performanceMonitor } from '@/lib/middleware/performance-monitor'\nimport { enhancedDatabaseManager } from '@/lib/database/enhanced-database-manager'\nimport { highAvailabilityManager } from '@/lib/system/high-availability-manager'\nimport { unifiedAIAdapter } from '@/lib/ai/unified-ai-adapter'\nimport { enhancedMockService } from '@/lib/mocks/enhanced-mock-service'\n\nexport const GET = createApiRoute(\n  RouteConfigs.protectedGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const type = validatedQuery?.type || 'overview';\n    \n      switch (type) {\n        case 'overview':\n          return ApiResponseWrapper.success(await getSystemOverview());\n        \n        case 'performance':\n          return ApiResponseWrapper.success(await getPerformanceMetrics());\n        \n        case 'health':\n          return ApiResponseWrapper.success(await getHealthStatus());\n        \n        case 'database':\n          return ApiResponseWrapper.success(await getDatabaseMetrics());\n        \n        case 'ai':\n          return ApiResponseWrapper.success(await getAIServiceMetrics());\n        \n        case 'resources':\n          return ApiResponseWrapper.success(await getResourceUsage());\n        \n        default:\n          return ApiResponseWrapper.error('Invalid monitor type', 400);\n      }\n    } catch (error) {\n      return ApiResponseWrapper.error('Failed to get system monitor data', 500);\n    }\n  }\n);\n\n// Helper functions for system monitoring\nasync function getSystemOverview() {\n  return {\n    status: 'operational',\n    uptime: process.uptime(),\n    timestamp: new Date().toISOString()\n  };\n}\n\nasync function getPerformanceMetrics() {\n  return performanceMonitor.getMetrics();\n}\n\nasync function getHealthStatus() {\n  return {\n    database: await enhancedDatabaseManager.healthCheck(),\n    ai: await unifiedAIAdapter.healthCheck(),\n    system: 'healthy'\n  };\n}\n\nasync function getDatabaseMetrics() {\n  return enhancedDatabaseManager.getMetrics();\n}\n\nasync function getAIServiceMetrics() {\n  return unifiedAIAdapter.getMetrics();\n}\n\nasync function getResourceUsage() {\n  return {\n    memory: process.memoryUsage(),\n    cpu: process.cpuUsage(),\n    timestamp: new Date().toISOString()\n  };\n}\n\n"],"mappings":"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","ignoreList":[]}