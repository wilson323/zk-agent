{"file":"E:\\zk-agent\\lib\\database\\cache-strategy-optimizer.ts","mappings":";AAAA;;;;;;;;;;;;;GAaG;;;AAEH,mCAAqC;AACrC,2EAAgG;AAChG,6CAA8C;AAE9C;;GAEG;AACH,IAAK,oBAMJ;AAND,WAAK,oBAAoB;IACvB,mDAA2B,CAAA;IAC3B,yCAAiB,CAAA;IACjB,6CAAqB,CAAA;IACrB,qCAAa,CAAA;IACb,2CAAmB,CAAA,CAAc,OAAO;AAC1C,CAAC,EANI,oBAAoB,oCAApB,oBAAoB,QAMxB;AAoKD;;GAEG;AACH,MAAa,sBAAuB,SAAQ,qBAAY;IAkBtD;QACE,KAAK,EAAE,CAAA;QAlBD,eAAU,GAAgC,IAAI,GAAG,EAAE,CAAA;QACnD,gBAAW,GAA8B,IAAI,GAAG,EAAE,CAAA;QAClD,gBAAW,GAA8B,IAAI,GAAG,EAAE,CAAA;QAClD,aAAQ,GAAyB,IAAI,GAAG,EAAE,CAAA;QAC1C,oBAAe,GAAiC,EAAE,CAAA;QAClD,iBAAY,GAAY,KAAK,CAAA;QAC7B,yBAAoB,GAA0B,IAAI,CAAA;QAClD,mBAAc,GAAsB,EAAE,CAAA;QACtC,oBAAe,GAAW,SAAS,CAAA;QAYzC,IAAI,CAAC,kBAAkB,GAAG;YACxB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,MAAM,EAAE,MAAM;YACxB,aAAa,EAAE,GAAG;YAClB,aAAa,EAAE,EAAE;YACjB,SAAS,EAAE,KAAK;SACjB,CAAA;QAED,IAAI,CAAC,2BAA2B,EAAE,CAAA;QAClC,IAAI,CAAC,kBAAkB,EAAE,CAAA;QACzB,IAAI,CAAC,mBAAmB,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG;IACK,2BAA2B;QACjC,MAAM,UAAU,GAAqB;YACnC;gBACE,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,oBAAoB,CAAC,QAAQ;gBACnC,QAAQ,EAAE;oBACR,OAAO,EAAE,IAAI;oBACb,GAAG,EAAE,MAAM;oBACX,QAAQ,EAAE,yCAAa,CAAC,GAAG;iBAC5B;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,KAAK;oBACd,GAAG,EAAE,OAAO;oBACZ,QAAQ,EAAE,yCAAa,CAAC,GAAG;iBAC5B;gBACD,OAAO,EAAE;oBACP,OAAO,EAAE,GAAG;oBACZ,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,GAAG;iBACf;gBACD,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,oBAAoB,CAAC,WAAW;gBACtC,QAAQ,EAAE;oBACR,OAAO,EAAE,IAAI;oBACb,GAAG,EAAE,MAAM;oBACX,QAAQ,EAAE,yCAAa,CAAC,GAAG;iBAC5B;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,KAAK;oBACd,GAAG,EAAE,OAAO;oBACZ,QAAQ,EAAE,yCAAa,CAAC,GAAG;iBAC5B;gBACD,OAAO,EAAE;oBACP,OAAO,EAAE,GAAG;oBACZ,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI;iBAChB;gBACD,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,IAAI,EAAE,kBAAkB;gBACxB,IAAI,EAAE,oBAAoB,CAAC,MAAM;gBACjC,QAAQ,EAAE;oBACR,OAAO,EAAE,GAAG;oBACZ,GAAG,EAAE,MAAM;oBACX,QAAQ,EAAE,yCAAa,CAAC,GAAG;iBAC5B;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,IAAI;oBACb,GAAG,EAAE,MAAM;oBACX,QAAQ,EAAE,yCAAa,CAAC,GAAG;iBAC5B;gBACD,OAAO,EAAE;oBACP,OAAO,EAAE,GAAG;oBACZ,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,GAAG;iBACf;gBACD,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,oBAAoB,CAAC,OAAO;gBAClC,QAAQ,EAAE;oBACR,OAAO,EAAE,IAAI;oBACb,GAAG,EAAE,MAAM;oBACX,QAAQ,EAAE,yCAAa,CAAC,QAAQ;iBACjC;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,KAAK;oBACd,GAAG,EAAE,OAAO;oBACZ,QAAQ,EAAE,yCAAa,CAAC,QAAQ;iBACjC;gBACD,OAAO,EAAE;oBACP,OAAO,EAAE,GAAG;oBACZ,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,IAAI;iBAChB;gBACD,OAAO,EAAE,IAAI;gBACb,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAA;QAED,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAC5B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QAC9C,CAAC,CAAC,CAAA;IACJ,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,SAAS;QACT,MAAM,gBAAgB,GAAY;YAChC,IAAI,EAAE,uBAAuB;YAC7B,IAAI,EAAE,YAAY;YAClB,YAAY,EAAE,EAAE;YAChB,UAAU,EAAE;gBACV,YAAY,EAAE,IAAI;gBAClB,MAAM,EAAE,GAAG;gBACX,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;aACvB;YACD,QAAQ,EAAE,CAAC;YACX,aAAa,EAAE,IAAI,IAAI,EAAE;YACzB,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE;gBACtB,UAAU;gBACV,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;YACvC,CAAC;YACD,KAAK,EAAE,CAAC,IAAW,EAAE,EAAE;gBACrB,UAAU;gBACV,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAA;YAClC,CAAC;SACF,CAAA;QAED,SAAS;QACT,MAAM,aAAa,GAAY;YAC7B,IAAI,EAAE,qBAAqB;YAC3B,IAAI,EAAE,gBAAgB;YACtB,YAAY,EAAE,EAAE;YAChB,UAAU,EAAE;gBACV,QAAQ,EAAE,EAAE;gBACZ,UAAU,EAAE,CAAC;aACd;YACD,QAAQ,EAAE,CAAC;YACX,aAAa,EAAE,IAAI,IAAI,EAAE;YACzB,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE;gBACtB,OAAO,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAA;YAC5C,CAAC;YACD,KAAK,EAAE,CAAC,IAAW,EAAE,EAAE;gBACrB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAA;YAC/B,CAAC;SACF,CAAA;QAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,EAAE,gBAAgB,CAAC,CAAA;QAC5D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAA;IACzD,CAAC;IAED;;OAEG;IACK,mBAAmB;QACzB,YAAY;QACZ,mDAAuB,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,OAAO,EAAE,EAAE;YAC1D,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAA;QACnC,CAAC,CAAC,CAAA;QAEF,YAAY;QACZ,4BAAe,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,SAAS,EAAE,EAAE;YAC1C,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK;QACT,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAA;YAC1D,OAAM;QACR,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAA;QAEhD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;QAExB,SAAS;QACT,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;YACpC,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,GAAG,EAAE;gBAC3C,IAAI,CAAC,mBAAmB,EAAE,CAAA;YAC5B,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAA;QACtC,CAAC;QAED,OAAO;QACP,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAEhC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;QAC9B,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAA;IAC9D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,IAAI;QACR,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,OAAM;QACR,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAA;QAEhD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAA;QAEzB,IAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC9B,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;YACxC,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAA;QAClC,CAAC;QAED,eAAe;QACf,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;YAC7C,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACpC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;IAChC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,mBAAmB;QAC/B,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAA;YAExD,SAAS;YACT,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;YACzD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;YAExC,eAAe;YACf,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,EAAE,CAAC;gBACtC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAA;YACxD,CAAC;YAED,iBAAiB;YACjB,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;gBACvE,OAAO,CAAC,GAAG,CAAC,uCAAuC,IAAI,CAAC,cAAc,CAAC,MAAM,IAAI,IAAI,CAAC,kBAAkB,CAAC,aAAa,GAAG,CAAC,CAAA;gBAC1H,OAAM;YACR,CAAC;YAED,SAAS;YACT,MAAM,MAAM,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAA;YAE9C,SAAS;YACT,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,cAAc,EAAE,MAAM,CAAC,CAAA;YAElF,SAAS;YACT,IAAI,CAAC,eAAe,GAAG,eAAe,CAAA;YAEtC,kBAAkB;YAClB,IAAI,IAAI,CAAC,kBAAkB,CAAC,SAAS,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACpE,MAAM,kBAAkB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAA;gBAC3E,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,cAAc,KAAK,KAAK,EAAE,CAAC;oBACtE,MAAM,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAA;gBACpD,CAAC;YACH,CAAC;YAED,WAAW;YACX,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;YAExB,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBAClC,OAAO,EAAE,cAAc;gBACvB,eAAe,EAAE,eAAe,CAAC,MAAM;gBACvC,MAAM;aACP,CAAC,CAAA;QAEJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAA;YAC5C,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAA;QACzC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,qBAAqB;QACjC,MAAM,UAAU,GAAG,mDAAuB,CAAC,QAAQ,EAAE,CAAA;QAErD,OAAO;YACL,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,eAAe,EAAE,UAAU,CAAC,eAAe;YAC3C,WAAW,EAAE,IAAI,CAAC,oBAAoB,EAAE;YACxC,SAAS,EAAE,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,aAAa,CAAC;YACpE,UAAU,EAAE,IAAI,CAAC,mBAAmB,EAAE;YACtC,SAAS,EAAE,IAAI,CAAC,kBAAkB,EAAE;YACpC,YAAY,EAAE,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC;SACrD,CAAA;IACH,CAAC;IAED;;;;OAIG;IACK,oBAAoB;QAC1B,MAAM,KAAK,GAAG,mDAAuB,CAAC,QAAQ,EAAE,CAAA;QAChD,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,CAAA;QAC/C,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,CAAA;QAE/C,mBAAmB;QACnB,MAAM,UAAU,GAAG,OAAO,GAAG,OAAO,CAAA;QACpC,MAAM,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAA,CAAC,WAAW;QAE/C,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,SAAS,CAAC,CAAA;IAC5C,CAAC;IAED;;;;OAIG;IACK,mBAAmB;QACzB,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACnC,OAAO,CAAC,CAAA;QACV,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;QAC7C,MAAM,QAAQ,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAA,CAAC,OAAO;QAEvE,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;YACnD,MAAM,KAAK,GAAG,mDAAuB,CAAC,QAAQ,EAAE,CAAA;YAChD,OAAO,GAAG,GAAG,KAAK,CAAC,aAAa,CAAA;QAClC,CAAC,EAAE,CAAC,CAAC,CAAA;QAEL,OAAO,aAAa,GAAG,QAAQ,CAAA;IACjC,CAAC;IAED;;;;OAIG;IACK,kBAAkB;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAA;QAC/C,MAAM,KAAK,GAAG,mDAAuB,CAAC,QAAQ,EAAE,CAAA;QAEhD,qBAAqB;QACrB,MAAM,UAAU,GAAG,WAAW,GAAG,GAAG,CAAA;QACpC,MAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,GAAG,CAAA;QAEpF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,GAAG,QAAQ,CAAC,CAAA;IAC3C,CAAC;IAED;;;;;OAKG;IACK,qBAAqB,CAAC,KAAU;QACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QAC1D,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,CAAC,CAAA;QACV,CAAC;QAED,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAA;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAA;QAC/C,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,aAAa,CAAC,CAAA;QAEjE,sBAAsB;QACtB,MAAM,sBAAsB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,eAAe,GAAG,GAAG,CAAC,CAAA;QAEvE,MAAM,KAAK,GACT,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO;YAC/B,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,sBAAsB,CAAC;YACnD,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;YACvC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAA;QAErC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAA;IACxC,CAAC;IAED;;;;OAIG;IACK,wBAAwB;QAM9B,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;YACpC,OAAO;gBACL,YAAY,EAAE,QAAQ;gBACtB,iBAAiB,EAAE,QAAQ;gBAC3B,WAAW,EAAE,QAAQ;gBACrB,YAAY,EAAE,QAAQ;aACvB,CAAA;QACH,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;QAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAA;QAEjD,MAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAA;QACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAA;QAEpD,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC;YACtE,iBAAiB,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,eAAe,EAAE,SAAS,CAAC,eAAe,CAAC,EAAE,WAAW;YACxG,WAAW,EAAE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,EAAE,SAAS,CAAC,WAAW,CAAC,EAAE,WAAW;YAC1F,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,YAAY,EAAE,QAAQ,CAAC,YAAY,CAAC;SACjF,CAAA;IACH,CAAC;IAED;;;;;OAKG;IACK,uBAAuB,CAAC,OAA0B;QACxD,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAA;QAE5B,OAAO;YACL,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,KAAK;YAC/D,eAAe,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,GAAG,KAAK;YAC/E,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,KAAK;YACvE,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,KAAK;YACnE,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,GAAG,KAAK;YACrE,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,GAAG,KAAK;YACnE,YAAY,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,GAAG,KAAK;SAC1E,CAAA;IACH,CAAC;IAED;;;;;;OAMG;IACK,cAAc,CAAC,OAAe,EAAE,QAAgB;QACtD,MAAM,SAAS,GAAG,IAAI,CAAA,CAAC,OAAO;QAC9B,MAAM,MAAM,GAAG,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,QAAQ,CAAA;QAE9C,IAAI,MAAM,GAAG,SAAS,EAAE,CAAC;YACvB,OAAO,WAAW,CAAA;QACpB,CAAC;aAAM,IAAI,MAAM,GAAG,CAAC,SAAS,EAAE,CAAC;YAC/B,OAAO,WAAW,CAAA;QACpB,CAAC;aAAM,CAAC;YACN,OAAO,QAAQ,CAAA;QACjB,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACK,KAAK,CAAC,uBAAuB,CACnC,cAA+B,EAC/B,MAAW;QAEX,MAAM,eAAe,GAAiC,EAAE,CAAA;QAExD,WAAW;QACX,IAAI,cAAc,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC;YACjC,eAAe,CAAC,IAAI,CAAC;gBACnB,EAAE,EAAE,WAAW,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC3B,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,SAAS;gBAChB,WAAW,EAAE,UAAU,CAAC,cAAc,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAoB;gBACpF,mBAAmB,EAAE;oBACnB,OAAO,EAAE,IAAI;oBACb,YAAY,EAAE,CAAC,EAAE;iBAClB;gBACD,wBAAwB,EAAE,MAAM;gBAChC,cAAc,EAAE,KAAK;gBACrB,eAAe,EAAE;oBACf,QAAQ,EAAE;wBACR,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAE,CAAC,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC;wBACtF,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAE,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG;wBAClE,QAAQ,EAAE,yCAAa,CAAC,GAAG;qBAC5B;iBACF;gBACD,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,YAAY;QACZ,IAAI,cAAc,CAAC,eAAe,GAAG,EAAE,EAAE,CAAC;YACxC,eAAe,CAAC,IAAI,CAAC;gBACnB,EAAE,EAAE,WAAW,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC3B,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,QAAQ;gBAClB,KAAK,EAAE,QAAQ;gBACf,WAAW,EAAE,WAAW,cAAc,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;gBAChF,mBAAmB,EAAE;oBACnB,YAAY,EAAE,CAAC,EAAE;iBAClB;gBACD,wBAAwB,EAAE,QAAQ;gBAClC,cAAc,EAAE,KAAK;gBACrB,eAAe,EAAE;oBACf,IAAI,EAAE,uBAAuB;oBAC7B,IAAI,EAAE,oBAAoB,CAAC,OAAO;iBACnC;gBACD,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,YAAY;QACZ,IAAI,cAAc,CAAC,WAAW,GAAG,GAAG,EAAE,CAAC;YACrC,eAAe,CAAC,IAAI,CAAC;gBACnB,EAAE,EAAE,UAAU,IAAI,CAAC,GAAG,EAAE,EAAE;gBAC1B,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,MAAM;gBAChB,KAAK,EAAE,QAAQ;gBACf,WAAW,EAAE,UAAU,CAAC,cAAc,CAAC,WAAW,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB;gBAC3F,mBAAmB,EAAE;oBACnB,WAAW,EAAE,CAAC,EAAE;iBACjB;gBACD,wBAAwB,EAAE,MAAM;gBAChC,cAAc,EAAE,QAAQ;gBACxB,eAAe,EAAE;oBACf,QAAQ,EAAE;wBACR,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAE,CAAC,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC;wBACtF,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAE,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG;wBAClE,QAAQ,EAAE,yCAAa,CAAC,GAAG;qBAC5B;iBACF;gBACD,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,UAAU;QACV,IAAI,MAAM,CAAC,YAAY,KAAK,WAAW,EAAE,CAAC;YACxC,eAAe,CAAC,IAAI,CAAC;gBACnB,EAAE,EAAE,iBAAiB,IAAI,CAAC,GAAG,EAAE,EAAE;gBACjC,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,QAAQ;gBAClB,KAAK,EAAE,SAAS;gBAChB,WAAW,EAAE,0BAA0B;gBACvC,mBAAmB,EAAE;oBACnB,OAAO,EAAE,GAAG;iBACb;gBACD,wBAAwB,EAAE,QAAQ;gBAClC,cAAc,EAAE,KAAK;gBACrB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,eAAe;QACf,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAA;QAC9E,eAAe,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC,CAAA;QAE1C,SAAS;QACT,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,aAAa,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAA;YACpD,OAAO,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAA;QAC9D,CAAC,CAAC,CAAA;IACJ,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,yBAAyB,CAAC,cAA+B;QACrE,MAAM,eAAe,GAAiC,EAAE,CAAA;QAExD,IAAI,CAAC;YACH,WAAW;YACX,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;YAC9D,IAAI,aAAa,IAAI,aAAa,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC;gBAClD,MAAM,eAAe,GAAG,aAAa,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;gBAE7D,IAAI,eAAe,IAAI,eAAe,KAAK,IAAI,CAAC,eAAe,EAAE,CAAC;oBAChE,eAAe,CAAC,IAAI,CAAC;wBACnB,EAAE,EAAE,eAAe,IAAI,CAAC,GAAG,EAAE,EAAE;wBAC/B,IAAI,EAAE,UAAU;wBAChB,QAAQ,EAAE,QAAQ;wBAClB,KAAK,EAAE,UAAU;wBACjB,WAAW,EAAE,eAAe,eAAe,UAAU;wBACrD,mBAAmB,EAAE;4BACnB,YAAY,EAAE,IAAI;yBACnB;wBACD,wBAAwB,EAAE,MAAM;wBAChC,cAAc,EAAE,KAAK;wBACrB,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,eAAe,CAAC;wBACrD,SAAS,EAAE,IAAI,IAAI,EAAE;qBACtB,CAAC,CAAA;gBACJ,CAAC;YACH,CAAC;YAED,WAAW;YACX,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;YACnE,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC;gBACxD,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC;oBAC3C,cAAc;oBACd,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;iBACjD,CAAC,CAAA;gBAEF,IAAI,WAAW,IAAI,WAAW,CAAC,YAAY,EAAE,CAAC;oBAC5C,eAAe,CAAC,IAAI,CAAC;wBACnB,EAAE,EAAE,kBAAkB,IAAI,CAAC,GAAG,EAAE,EAAE;wBAClC,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE,KAAK;wBACf,KAAK,EAAE,UAAU;wBACjB,WAAW,EAAE,kBAAkB,WAAW,CAAC,mBAAmB,OAAO;wBACrE,mBAAmB,EAAE,WAAW,CAAC,YAAY;wBAC7C,wBAAwB,EAAE,QAAQ;wBAClC,cAAc,EAAE,QAAQ;wBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;qBACtB,CAAC,CAAA;gBACJ,CAAC;YACH,CAAC;QAEH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAA;QAC9D,CAAC;QAED,OAAO,eAAe,CAAA;IACxB,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,mBAAmB,CAAC,cAA0C;QAC1E,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,4BAA4B,cAAc,CAAC,KAAK,EAAE,CAAC,CAAA;YAE/D,IAAI,cAAc,CAAC,eAAe,EAAE,CAAC;gBACnC,IAAI,cAAc,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;oBACvC,gBAAgB;oBAChB,MAAM,IAAI,CAAC,WAAW,CACpB,QAAQ,cAAc,CAAC,EAAE,EAAE,EAC3B,iBAAiB,cAAc,CAAC,KAAK,EAAE,EACvC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAE,EAC1C,cAAc,CAAC,eAAiC,EAChD,GAAG,EAAE,QAAQ;oBACb,OAAO,CAAC,QAAQ;qBACjB,CAAA;gBACH,CAAC;qBAAM,CAAC;oBACN,WAAW;oBACX,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;gBAC9D,CAAC;YACH,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE,cAAc,CAAC,CAAA;QAErD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,cAAc,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,CAAA;YAC5E,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAA;QAC/D,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,iBAAiB,CAAC,MAAW;QACzC,MAAM,WAAW,GAAG,mDAAuB,CAAC,SAAS,EAAE,CAAA;QAEvD,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACpB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAA;QAChD,CAAC;QAED,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACpB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAA;QAChD,CAAC;QAED,mDAAuB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAA;IACnD,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,WAAW,CACf,MAAc,EACd,IAAY,EACZ,eAA+B,EAC/B,kBAAkC,EAClC,eAAuB,GAAG,EAC1B,WAAmB,OAAO;QAE1B,MAAM,IAAI,GAAiB;YACzB,MAAM;YACN,IAAI;YACJ,eAAe;YACf,kBAAkB;YAClB,YAAY;YACZ,QAAQ;YACR,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,OAAO,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,QAAQ,CAAC;YACxC,QAAQ,EAAE,IAAI;YACd,qBAAqB,EAAE,IAAI;SAC5B,CAAA;QAED,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;QAElC,YAAY;QACZ,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;QACzB,CAAC,EAAE,QAAQ,CAAC,CAAA;QAEZ,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,KAAK,MAAM,GAAG,CAAC,CAAA;QACpD,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAA;IACpC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU,CAAC,MAAc;QAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAM;QACR,CAAC;QAED,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAA;QAEzB,SAAS;QACT,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAA;QACnD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;QAEpC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;QAE/B,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,CAAC,IAAI,KAAK,MAAM,GAAG,CAAC,CAAA;QACzD,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAA;QAEhD,kBAAkB;QAClB,IAAI,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,cAAc,KAAK,OAAO,EAAE,CAAC;YAC9D,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;QACnD,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,mBAAmB,CAAC,IAAkB;QAClD,oBAAoB;QACpB,cAAc;QACd,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QACjF,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;QAEvF,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,CAAC,iBAAiB,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC,OAAO,GAAG,GAAG;YAC5F,YAAY,EAAE,CAAC,cAAc,CAAC,eAAe,GAAG,iBAAiB,CAAC,eAAe,CAAC,GAAG,cAAc,CAAC,eAAe,GAAG,GAAG;YACzH,WAAW,EAAE,CAAC,cAAc,CAAC,WAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC,WAAW,GAAG,GAAG;YAC5G,SAAS,EAAE,CAAC,cAAc,CAAC,SAAS,GAAG,iBAAiB,CAAC,SAAS,CAAC,GAAG,cAAc,CAAC,SAAS,GAAG,GAAG;YACpG,YAAY,EAAE,CAAC,iBAAiB,CAAC,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC,GAAG,cAAc,CAAC,YAAY,GAAG,GAAG;SACjH,CAAA;QAED,aAAa;QACb,MAAM,YAAY,GAAG,IAAI,CAAC,gCAAgC,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAA;QAC7F,MAAM,aAAa,GAAG,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAA;QAE/D,IAAI,cAAc,GAAoC,QAAQ,CAAA;QAC9D,IAAI,aAAa,IAAI,WAAW,CAAC,YAAY,GAAG,CAAC,EAAE,CAAC;YAClD,cAAc,GAAG,OAAO,CAAA;QAC1B,CAAC;aAAM,IAAI,CAAC,aAAa,EAAE,CAAC;YAC1B,cAAc,GAAG,UAAU,CAAA;QAC7B,CAAC;QAED,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,cAAc;YACd,iBAAiB;YACjB,WAAW;YACX,YAAY;YACZ,aAAa;YACb,cAAc;YACd,UAAU,EAAE,CAAC,GAAG,YAAY;SAC7B,CAAA;IACH,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,yBAAyB,CAAC,QAAwB;QAC9D,qBAAqB;QACrB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAA;QAEtD,aAAa;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAA;QAEzD,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC;YAC/D,eAAe,EAAE,WAAW,CAAC,eAAe,GAAG,WAAW,CAAC,YAAY;YACvE,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;YAC3E,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;YACrE,UAAU,EAAE,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU;YAC3D,SAAS,EAAE,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS;YACxD,YAAY,EAAE,CAAC,CAAC,SAAS;SAC1B,CAAA;IACH,CAAC;IAED;;;;;OAKG;IACK,sBAAsB,CAAC,QAAwB;QAQrD,QAAQ,QAAQ,CAAC,IAAI,EAAE,CAAC;YACtB,KAAK,oBAAoB,CAAC,WAAW;gBACnC,OAAO;oBACL,OAAO,EAAE,GAAG;oBACZ,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,GAAG;oBACd,UAAU,EAAE,IAAI;oBAChB,SAAS,EAAE,GAAG;iBACf,CAAA;YACH,KAAK,oBAAoB,CAAC,MAAM;gBAC9B,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,GAAG;oBACd,UAAU,EAAE,GAAG;oBACf,SAAS,EAAE,GAAG;iBACf,CAAA;YACH,KAAK,oBAAoB,CAAC,OAAO;gBAC/B,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,IAAI;oBACf,UAAU,EAAE,GAAG;oBACf,SAAS,EAAE,IAAI;iBAChB,CAAA;YACH;gBACE,OAAO;oBACL,OAAO,EAAE,GAAG;oBACZ,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,GAAG;oBAChB,SAAS,EAAE,GAAG;oBACd,UAAU,EAAE,GAAG;oBACf,SAAS,EAAE,GAAG;iBACf,CAAA;QACL,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACK,gCAAgC,CAAC,OAAwB,EAAE,UAA2B;QAC5F,WAAW;QACX,MAAM,IAAI,GAAG,UAAU,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAA;QAC3D,MAAM,SAAS,GAAG,GAAG,CAAA,CAAC,QAAQ;QAC9B,MAAM,CAAC,GAAG,GAAG,CAAA,CAAC,SAAS;QAEvB,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAEnD,UAAU;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA;IACjD,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,aAAa,CAAC,QAAwB;QAClD,OAAO,CAAC,GAAG,CAAC,0BAA0B,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAA;QAEtD,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAA;QAEpC,SAAS;QACT,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;QAEtC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAA;IACzC,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,WAAW;QACvB,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;YACpC,OAAM,CAAC,OAAO;QAChB,CAAC;QAED,IAAI,CAAC;YACH,WAAW;YACX,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;YACnE,IAAI,gBAAgB,EAAE,CAAC;gBACrB,MAAM,YAAY,GAAG,IAAI,CAAC,8BAA8B,EAAE,CAAA;gBAC1D,gBAAgB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;gBACpC,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAA;YACrD,CAAC;YAED,WAAW;YACX,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;YAC9D,IAAI,aAAa,EAAE,CAAC;gBAClB,MAAM,YAAY,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAA;gBACvD,aAAa,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;gBACjC,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAA;YACtD,CAAC;QAEH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAA;QAChD,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,8BAA8B;QACpC,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;YAClD,KAAK,EAAE;gBACL,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,YAAY,EAAE,OAAO,CAAC,eAAe;gBACrC,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B;YACD,MAAM,EAAE,OAAO,CAAC,YAAY;SAC7B,CAAC,CAAC,CAAA;IACL,CAAC;IAED;;;;OAIG;IACK,2BAA2B;QACjC,MAAM,IAAI,GAAU,EAAE,CAAA;QAEtB,oBAAoB;QACpB,KAAK,MAAM,CAAC,YAAY,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACvD,MAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAA;YAEzD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACpC,IAAI,CAAC,IAAI,CAAC;oBACR,KAAK,EAAE,OAAO;oBACd,MAAM,EAAE,YAAY;oBACpB,WAAW,EAAE,OAAO,CAAC,YAAY,GAAG,WAAW,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,YAAY,CAAC;iBACzF,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;QACJ,CAAC;QAED,OAAO,IAAI,CAAA;IACb,CAAC;IAED;;;;;OAKG;IACK,kBAAkB,CAAC,KAAU;QACnC,YAAY;QACZ,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,GAAG;YACZ,YAAY,EAAE,CAAC,GAAG;YAClB,WAAW,EAAE,CAAC,GAAG;YACjB,SAAS,EAAE,CAAC,GAAG;SAChB,CAAA;QAED,MAAM,KAAK,GACT,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO;YAC/B,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,YAAY,GAAG,GAAG,CAAC,CAAC;YAClE,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;YAC7C,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAA;QAE3C,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC9C,UAAU,EAAE,GAAG;SAChB,CAAA;IACH,CAAC;IAED;;;;;OAKG;IACK,uBAAuB,CAAC,KAAsB;QACpD,WAAW;QACX,IAAI,KAAK,CAAC,WAAW,GAAG,GAAG,EAAE,CAAC;YAC5B,OAAO,kBAAkB,CAAA;QAC3B,CAAC;aAAM,IAAI,KAAK,CAAC,eAAe,GAAG,GAAG,EAAE,CAAC;YACvC,OAAO,aAAa,CAAA;QACtB,CAAC;aAAM,IAAI,KAAK,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC;YAC/B,OAAO,aAAa,CAAA;QACtB,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAA;QAClB,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,qBAAqB,CAAC,IAAW;QACvC,UAAU;QACV,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;QACxD,IAAI,KAAK,EAAE,CAAC;YACV,KAAK,CAAC,YAAY,GAAG,IAAI,CAAA;YACzB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAA;YACzD,KAAK,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAA;QAClC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,kBAAkB,CAAC,IAAW;QACpC,UAAU;QACV,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA;QACtD,IAAI,KAAK,EAAE,CAAC;YACV,KAAK,CAAC,YAAY,GAAG,IAAI,CAAA;YACzB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAA;YACvD,KAAK,CAAC,aAAa,GAAG,IAAI,IAAI,EAAE,CAAA;QAClC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,mBAAmB,CAAC,OAAY;QACtC,aAAa;QACb,IAAI,OAAO,CAAC,OAAO,GAAG,GAAG,IAAI,OAAO,CAAC,eAAe,GAAG,GAAG,EAAE,CAAC;YAC3D,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAA;YAClF,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC5B,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,qBAAqB,CAAC,SAAc;QAC1C,gBAAgB;QAChB,IAAI,SAAS,CAAC,mBAAmB,GAAG,GAAG,EAAE,CAAC;YACxC,qBAAqB;YACrB,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAA;QACrC,CAAC;aAAM,IAAI,SAAS,CAAC,mBAAmB,GAAG,GAAG,EAAE,CAAC;YAC/C,gBAAgB;YAChB,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAA;QACrC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,yBAAyB,CAAC,MAAc;QAC9C,MAAM,aAAa,GAAG,mDAAuB,CAAC,SAAS,EAAE,CAAA;QAEzD,MAAM,SAAS,GAAG;YAChB,GAAG,aAAa;YAChB,EAAE,EAAE;gBACF,GAAG,aAAa,CAAC,EAAE;gBACnB,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC;gBACnD,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC;aACtE;YACD,EAAE,EAAE;gBACF,GAAG,aAAa,CAAC,EAAE;gBACnB,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC;gBACpD,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC;aACvE;SACF,CAAA;QAED,mDAAuB,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;QAC/C,OAAO,CAAC,GAAG,CAAC,2CAA2C,MAAM,EAAE,CAAC,CAAA;IAClE,CAAC;IAED;;;;OAIG;IACH,kBAAkB;QAChB,OAAO,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,CAAA;IAClC,CAAC;IAED;;;;OAIG;IACH,cAAc;QACZ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAA;IAC9C,CAAC;IAED;;;;OAIG;IACH,cAAc;QACZ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAA;IAC9C,CAAC;IAED;;;;OAIG;IACH,aAAa;QACX,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAA;IAC7C,CAAC;IAED;;;;OAIG;IACH,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAA;IAC7B,CAAC;IAED;;;;OAIG;IACH,gBAAgB;QACd,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACtD,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,WAAW,EAAE,KAAK,CAAC,aAAa;SACjC,CAAC,CAAC,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB;QACvB,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;IAClC,CAAC;IAED;;;;OAIG;IACH,wBAAwB,CAAC,MAA+C;QACtE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAA;QAE9C,SAAS;QACT,IAAI,IAAI,CAAC,oBAAoB,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;YACjD,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAA;YACxC,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,GAAG,EAAE;gBAC3C,IAAI,CAAC,mBAAmB,EAAE,CAAA;YAC5B,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAA;QACtC,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAA;QACjD,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAA;IACtD,CAAC;IAED;;;;OAIG;IACH,0BAA0B;QAQxB,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;YAClE,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAA;YAChC,OAAO,GAAG,CAAA;QACZ,CAAC,EAAE,EAAS,CAAC,CAAA;QAEb,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAE1E,OAAO;YACL,OAAO,EAAE;;;QAGP,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;QACxB,IAAI,CAAC,eAAe;QACpB,IAAI,CAAC,eAAe,CAAC,MAAM;QAC3B,IAAI,CAAC,WAAW,CAAC,IAAI;QACrB,IAAI,CAAC,cAAc,CAAC,MAAM;SACzB,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;OAC9E,CAAC,IAAI,EAAE;YACR,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM;YAC5C,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;YAClC,aAAa;YACb,WAAW,EAAE,cAAc,IAAI,EAAE;SAClC,CAAA;IACH,CAAC;CACF;AA/uCD,wDA+uCC;AAED,SAAS;AACI,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAA","names":[],"sources":["E:\\zk-agent\\lib\\database\\cache-strategy-optimizer.ts"],"sourcesContent":["/**\r\n * 缓存策略优化器\r\n * 基于机器学习和统计分析的智能缓存策略优化\r\n * \r\n * 功能:\r\n * - 动态策略调整和性能分析\r\n * - 机器学习预测和模式识别\r\n * - A/B测试和策略评估\r\n * - 自动化优化建议生成\r\n * - 实时监控和告警\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { intelligentCacheManager, CacheLevel, CacheStrategy } from './intelligent-cache-manager'\r\nimport { databaseMonitor } from './monitoring'\r\n\r\n/**\r\n * 优化策略枚举\r\n */\r\nenum OptimizationStrategy {\r\n  PERFORMANCE = 'performance',     // 性能优先\r\n  MEMORY = 'memory',               // 内存优先\r\n  BALANCED = 'balanced',           // 平衡策略\r\n  COST = 'cost',                   // 成本优先\r\n  LATENCY = 'latency'              // 延迟优先\r\n}\r\n\r\n/**\r\n * 策略评估指标\r\n */\r\ninterface StrategyMetrics {\r\n  /** 命中率 */\r\n  hitRate: number\r\n  /** 平均响应时间(ms) */\r\n  avgResponseTime: number\r\n  /** 内存使用率 */\r\n  memoryUsage: number\r\n  /** 错误率 */\r\n  errorRate: number\r\n  /** 吞吐量(请求/秒) */\r\n  throughput: number\r\n  /** 成本评分 */\r\n  costScore: number\r\n  /** 综合评分 */\r\n  overallScore: number\r\n}\r\n\r\n/**\r\n * 策略配置\r\n */\r\ninterface StrategyConfig {\r\n  /** 策略名称 */\r\n  name: string\r\n  /** 策略类型 */\r\n  type: OptimizationStrategy\r\n  /** L1缓存配置 */\r\n  l1Config: {\r\n    maxSize: number\r\n    ttl: number\r\n    strategy: CacheStrategy\r\n  }\r\n  /** L2缓存配置 */\r\n  l2Config: {\r\n    maxSize: number\r\n    ttl: number\r\n    strategy: CacheStrategy\r\n  }\r\n  /** 权重配置 */\r\n  weights: {\r\n    hitRate: number\r\n    responseTime: number\r\n    memoryUsage: number\r\n    errorRate: number\r\n  }\r\n  /** 是否启用 */\r\n  enabled: boolean\r\n  /** 创建时间 */\r\n  createdAt: Date\r\n  /** 最后更新时间 */\r\n  updatedAt: Date\r\n}\r\n\r\n/**\r\n * A/B测试配置\r\n */\r\ninterface ABTestConfig {\r\n  /** 测试ID */\r\n  testId: string\r\n  /** 测试名称 */\r\n  name: string\r\n  /** 控制组策略 */\r\n  controlStrategy: StrategyConfig\r\n  /** 实验组策略 */\r\n  experimentStrategy: StrategyConfig\r\n  /** 流量分配比例 */\r\n  trafficSplit: number\r\n  /** 测试持续时间(ms) */\r\n  duration: number\r\n  /** 开始时间 */\r\n  startTime: Date\r\n  /** 结束时间 */\r\n  endTime: Date\r\n  /** 是否活跃 */\r\n  isActive: boolean\r\n  /** 统计显著性阈值 */\r\n  significanceThreshold: number\r\n}\r\n\r\n/**\r\n * 测试结果\r\n */\r\ninterface ABTestResult {\r\n  /** 测试ID */\r\n  testId: string\r\n  /** 控制组指标 */\r\n  controlMetrics: StrategyMetrics\r\n  /** 实验组指标 */\r\n  experimentMetrics: StrategyMetrics\r\n  /** 改进百分比 */\r\n  improvement: {\r\n    hitRate: number\r\n    responseTime: number\r\n    memoryUsage: number\r\n    errorRate: number\r\n    overallScore: number\r\n  }\r\n  /** 统计显著性 */\r\n  significance: number\r\n  /** 是否显著 */\r\n  isSignificant: boolean\r\n  /** 建议 */\r\n  recommendation: 'adopt' | 'reject' | 'continue'\r\n  /** 置信度 */\r\n  confidence: number\r\n}\r\n\r\n/**\r\n * 机器学习模型接口\r\n */\r\ninterface MLModel {\r\n  /** 模型名称 */\r\n  name: string\r\n  /** 模型类型 */\r\n  type: 'regression' | 'classification' | 'clustering'\r\n  /** 训练数据 */\r\n  trainingData: any[]\r\n  /** 模型参数 */\r\n  parameters: any\r\n  /** 准确率 */\r\n  accuracy: number\r\n  /** 最后训练时间 */\r\n  lastTrainedAt: Date\r\n  /** 预测方法 */\r\n  predict(input: any): any\r\n  /** 训练方法 */\r\n  train(data: any[]): void\r\n}\r\n\r\n/**\r\n * 优化建议\r\n */\r\ninterface OptimizationRecommendation {\r\n  /** 建议ID */\r\n  id: string\r\n  /** 建议类型 */\r\n  type: 'strategy' | 'config' | 'architecture'\r\n  /** 优先级 */\r\n  priority: 'high' | 'medium' | 'low'\r\n  /** 标题 */\r\n  title: string\r\n  /** 描述 */\r\n  description: string\r\n  /** 预期改进 */\r\n  expectedImprovement: {\r\n    hitRate?: number\r\n    responseTime?: number\r\n    memoryUsage?: number\r\n    costReduction?: number\r\n  }\r\n  /** 实施难度 */\r\n  implementationDifficulty: 'easy' | 'medium' | 'hard'\r\n  /** 风险评估 */\r\n  riskAssessment: 'low' | 'medium' | 'high'\r\n  /** 建议的配置 */\r\n  suggestedConfig?: Partial<StrategyConfig>\r\n  /** 创建时间 */\r\n  createdAt: Date\r\n}\r\n\r\n/**\r\n * 缓存策略优化器类\r\n */\r\nexport class CacheStrategyOptimizer extends EventEmitter {\r\n  private strategies: Map<string, StrategyConfig> = new Map()\r\n  private activeTests: Map<string, ABTestConfig> = new Map()\r\n  private testResults: Map<string, ABTestResult> = new Map()\r\n  private mlModels: Map<string, MLModel> = new Map()\r\n  private recommendations: OptimizationRecommendation[] = []\r\n  private isOptimizing: boolean = false\r\n  private optimizationInterval: NodeJS.Timeout | null = null\r\n  private metricsHistory: StrategyMetrics[] = []\r\n  private currentStrategy: string = 'default'\r\n  private optimizationConfig: {\r\n    enabled: boolean\r\n    interval: number\r\n    minDataPoints: number\r\n    maxStrategies: number\r\n    autoApply: boolean\r\n  }\r\n\r\n  constructor() {\r\n    super()\r\n    \r\n    this.optimizationConfig = {\r\n      enabled: true,\r\n      interval: 300000, // 5分钟\r\n      minDataPoints: 100,\r\n      maxStrategies: 10,\r\n      autoApply: false\r\n    }\r\n    \r\n    this.initializeDefaultStrategies()\r\n    this.initializeMLModels()\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * 初始化默认策略\r\n   */\r\n  private initializeDefaultStrategies(): void {\r\n    const strategies: StrategyConfig[] = [\r\n      {\r\n        name: 'default',\r\n        type: OptimizationStrategy.BALANCED,\r\n        l1Config: {\r\n          maxSize: 1000,\r\n          ttl: 300000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        l2Config: {\r\n          maxSize: 10000,\r\n          ttl: 1800000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        weights: {\r\n          hitRate: 0.4,\r\n          responseTime: 0.3,\r\n          memoryUsage: 0.2,\r\n          errorRate: 0.1\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        name: 'performance',\r\n        type: OptimizationStrategy.PERFORMANCE,\r\n        l1Config: {\r\n          maxSize: 2000,\r\n          ttl: 600000,\r\n          strategy: CacheStrategy.LFU\r\n        },\r\n        l2Config: {\r\n          maxSize: 20000,\r\n          ttl: 3600000,\r\n          strategy: CacheStrategy.LFU\r\n        },\r\n        weights: {\r\n          hitRate: 0.5,\r\n          responseTime: 0.4,\r\n          memoryUsage: 0.05,\r\n          errorRate: 0.05\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        name: 'memory_optimized',\r\n        type: OptimizationStrategy.MEMORY,\r\n        l1Config: {\r\n          maxSize: 500,\r\n          ttl: 180000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        l2Config: {\r\n          maxSize: 5000,\r\n          ttl: 900000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        weights: {\r\n          hitRate: 0.2,\r\n          responseTime: 0.2,\r\n          memoryUsage: 0.5,\r\n          errorRate: 0.1\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        name: 'low_latency',\r\n        type: OptimizationStrategy.LATENCY,\r\n        l1Config: {\r\n          maxSize: 1500,\r\n          ttl: 450000,\r\n          strategy: CacheStrategy.ADAPTIVE\r\n        },\r\n        l2Config: {\r\n          maxSize: 15000,\r\n          ttl: 2700000,\r\n          strategy: CacheStrategy.ADAPTIVE\r\n        },\r\n        weights: {\r\n          hitRate: 0.3,\r\n          responseTime: 0.6,\r\n          memoryUsage: 0.05,\r\n          errorRate: 0.05\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n    ]\r\n    \r\n    strategies.forEach(strategy => {\r\n      this.strategies.set(strategy.name, strategy)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 初始化机器学习模型\r\n   */\r\n  private initializeMLModels(): void {\r\n    // 性能预测模型\r\n    const performanceModel: MLModel = {\r\n      name: 'performance_predictor',\r\n      type: 'regression',\r\n      trainingData: [],\r\n      parameters: {\r\n        learningRate: 0.01,\r\n        epochs: 100,\r\n        hiddenLayers: [64, 32]\r\n      },\r\n      accuracy: 0,\r\n      lastTrainedAt: new Date(),\r\n      predict: (input: any) => {\r\n        // 简化的预测逻辑\r\n        return this.predictPerformance(input)\r\n      },\r\n      train: (data: any[]) => {\r\n        // 简化的训练逻辑\r\n        this.trainPerformanceModel(data)\r\n      }\r\n    }\r\n    \r\n    // 策略分类模型\r\n    const strategyModel: MLModel = {\r\n      name: 'strategy_classifier',\r\n      type: 'classification',\r\n      trainingData: [],\r\n      parameters: {\r\n        maxDepth: 10,\r\n        minSamples: 5\r\n      },\r\n      accuracy: 0,\r\n      lastTrainedAt: new Date(),\r\n      predict: (input: any) => {\r\n        return this.classifyOptimalStrategy(input)\r\n      },\r\n      train: (data: any[]) => {\r\n        this.trainStrategyModel(data)\r\n      }\r\n    }\r\n    \r\n    this.mlModels.set('performance_predictor', performanceModel)\r\n    this.mlModels.set('strategy_classifier', strategyModel)\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听缓存管理器事件\r\n    intelligentCacheManager.on('metrics-collected', (metrics) => {\r\n      this.handleMetricsUpdate(metrics)\r\n    })\r\n    \r\n    // 监听数据库监控事件\r\n    databaseMonitor.on('metrics', (dbMetrics) => {\r\n      this.handleDatabaseMetrics(dbMetrics)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 启动优化器\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isOptimizing) {\r\n      console.log('Cache strategy optimizer is already running')\r\n      return\r\n    }\r\n\r\n    console.log('Starting cache strategy optimizer')\r\n    \r\n    this.isOptimizing = true\r\n    \r\n    // 启动定期优化\r\n    if (this.optimizationConfig.enabled) {\r\n      this.optimizationInterval = setInterval(() => {\r\n        this.performOptimization()\r\n      }, this.optimizationConfig.interval)\r\n    }\r\n    \r\n    // 初始优化\r\n    await this.performOptimization()\r\n    \r\n    this.emit('optimizer-started')\r\n    console.log('Cache strategy optimizer started successfully')\r\n  }\r\n\r\n  /**\r\n   * 停止优化器\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (!this.isOptimizing) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping cache strategy optimizer')\r\n    \r\n    this.isOptimizing = false\r\n    \r\n    if (this.optimizationInterval) {\r\n      clearInterval(this.optimizationInterval)\r\n      this.optimizationInterval = null\r\n    }\r\n    \r\n    // 停止所有活跃的A/B测试\r\n    for (const test of this.activeTests.values()) {\r\n      await this.stopABTest(test.testId)\r\n    }\r\n    \r\n    this.emit('optimizer-stopped')\r\n  }\r\n\r\n  /**\r\n   * 执行优化\r\n   */\r\n  private async performOptimization(): Promise<void> {\r\n    try {\r\n      console.log('Performing cache strategy optimization...')\r\n      \r\n      // 收集当前指标\r\n      const currentMetrics = await this.collectCurrentMetrics()\r\n      this.metricsHistory.push(currentMetrics)\r\n      \r\n      // 保持历史记录在合理范围内\r\n      if (this.metricsHistory.length > 1000) {\r\n        this.metricsHistory = this.metricsHistory.slice(-1000)\r\n      }\r\n      \r\n      // 检查是否有足够的数据进行优化\r\n      if (this.metricsHistory.length < this.optimizationConfig.minDataPoints) {\r\n        console.log(`Insufficient data for optimization (${this.metricsHistory.length}/${this.optimizationConfig.minDataPoints})`)\r\n        return\r\n      }\r\n      \r\n      // 分析性能趋势\r\n      const trends = this.analyzePerformanceTrends()\r\n      \r\n      // 生成优化建议\r\n      const recommendations = await this.generateRecommendations(currentMetrics, trends)\r\n      \r\n      // 更新建议列表\r\n      this.recommendations = recommendations\r\n      \r\n      // 如果启用自动应用，执行最佳建议\r\n      if (this.optimizationConfig.autoApply && recommendations.length > 0) {\r\n        const bestRecommendation = recommendations.find(r => r.priority === 'high')\r\n        if (bestRecommendation && bestRecommendation.riskAssessment === 'low') {\r\n          await this.applyRecommendation(bestRecommendation)\r\n        }\r\n      }\r\n      \r\n      // 训练机器学习模型\r\n      await this.trainModels()\r\n      \r\n      this.emit('optimization-completed', {\r\n        metrics: currentMetrics,\r\n        recommendations: recommendations.length,\r\n        trends\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('Optimization failed:', error)\r\n      this.emit('optimization-failed', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 收集当前指标\r\n   * \r\n   * @returns 当前指标\r\n   */\r\n  private async collectCurrentMetrics(): Promise<StrategyMetrics> {\r\n    const cacheStats = intelligentCacheManager.getStats()\r\n    \r\n    return {\r\n      hitRate: cacheStats.hitRate,\r\n      avgResponseTime: cacheStats.avgResponseTime,\r\n      memoryUsage: this.calculateMemoryUsage(),\r\n      errorRate: cacheStats.errors / Math.max(1, cacheStats.totalRequests),\r\n      throughput: this.calculateThroughput(),\r\n      costScore: this.calculateCostScore(),\r\n      overallScore: this.calculateOverallScore(cacheStats)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算内存使用率\r\n   * \r\n   * @returns 内存使用率\r\n   */\r\n  private calculateMemoryUsage(): number {\r\n    const stats = intelligentCacheManager.getStats()\r\n    const l1Usage = stats.levelStats.L1.memoryUsage\r\n    const l2Usage = stats.levelStats.L2.memoryUsage\r\n    \r\n    // 简化计算，实际应该基于系统总内存\r\n    const totalUsage = l1Usage + l2Usage\r\n    const maxMemory = 100 * 1024 * 1024 // 100MB假设值\r\n    \r\n    return Math.min(1, totalUsage / maxMemory)\r\n  }\r\n\r\n  /**\r\n   * 计算吞吐量\r\n   * \r\n   * @returns 吞吐量(请求/秒)\r\n   */\r\n  private calculateThroughput(): number {\r\n    if (this.metricsHistory.length < 2) {\r\n      return 0\r\n    }\r\n    \r\n    const recent = this.metricsHistory.slice(-10)\r\n    const timeSpan = 10 * (this.optimizationConfig.interval / 1000) // 转换为秒\r\n    \r\n    const totalRequests = recent.reduce((sum, metrics) => {\r\n      const stats = intelligentCacheManager.getStats()\r\n      return sum + stats.totalRequests\r\n    }, 0)\r\n    \r\n    return totalRequests / timeSpan\r\n  }\r\n\r\n  /**\r\n   * 计算成本评分\r\n   * \r\n   * @returns 成本评分\r\n   */\r\n  private calculateCostScore(): number {\r\n    const memoryUsage = this.calculateMemoryUsage()\r\n    const stats = intelligentCacheManager.getStats()\r\n    \r\n    // 基于内存使用和缓存大小的简化成本模型\r\n    const memoryCost = memoryUsage * 0.6\r\n    const sizeCost = (stats.levelStats.L1.size + stats.levelStats.L2.size) / 20000 * 0.4\r\n    \r\n    return Math.min(1, memoryCost + sizeCost)\r\n  }\r\n\r\n  /**\r\n   * 计算综合评分\r\n   * \r\n   * @param stats - 缓存统计\r\n   * @returns 综合评分\r\n   */\r\n  private calculateOverallScore(stats: any): number {\r\n    const strategy = this.strategies.get(this.currentStrategy)\r\n    if (!strategy) {\r\n      return 0\r\n    }\r\n    \r\n    const weights = strategy.weights\r\n    const memoryUsage = this.calculateMemoryUsage()\r\n    const errorRate = stats.errors / Math.max(1, stats.totalRequests)\r\n    \r\n    // 归一化响应时间(假设100ms为基准)\r\n    const normalizedResponseTime = Math.min(1, stats.avgResponseTime / 100)\r\n    \r\n    const score = \r\n      weights.hitRate * stats.hitRate +\r\n      weights.responseTime * (1 - normalizedResponseTime) +\r\n      weights.memoryUsage * (1 - memoryUsage) +\r\n      weights.errorRate * (1 - errorRate)\r\n    \r\n    return Math.max(0, Math.min(1, score))\r\n  }\r\n\r\n  /**\r\n   * 分析性能趋势\r\n   * \r\n   * @returns 性能趋势分析\r\n   */\r\n  private analyzePerformanceTrends(): {\r\n    hitRateTrend: 'improving' | 'declining' | 'stable'\r\n    responseTimeTrend: 'improving' | 'declining' | 'stable'\r\n    memoryTrend: 'improving' | 'declining' | 'stable'\r\n    overallTrend: 'improving' | 'declining' | 'stable'\r\n  } {\r\n    if (this.metricsHistory.length < 10) {\r\n      return {\r\n        hitRateTrend: 'stable',\r\n        responseTimeTrend: 'stable',\r\n        memoryTrend: 'stable',\r\n        overallTrend: 'stable'\r\n      }\r\n    }\r\n    \r\n    const recent = this.metricsHistory.slice(-10)\r\n    const older = this.metricsHistory.slice(-20, -10)\r\n    \r\n    const recentAvg = this.calculateAverageMetrics(recent)\r\n    const olderAvg = this.calculateAverageMetrics(older)\r\n    \r\n    return {\r\n      hitRateTrend: this.determineTrend(recentAvg.hitRate, olderAvg.hitRate),\r\n      responseTimeTrend: this.determineTrend(olderAvg.avgResponseTime, recentAvg.avgResponseTime), // 响应时间越低越好\r\n      memoryTrend: this.determineTrend(olderAvg.memoryUsage, recentAvg.memoryUsage), // 内存使用越低越好\r\n      overallTrend: this.determineTrend(recentAvg.overallScore, olderAvg.overallScore)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算平均指标\r\n   * \r\n   * @param metrics - 指标数组\r\n   * @returns 平均指标\r\n   */\r\n  private calculateAverageMetrics(metrics: StrategyMetrics[]): StrategyMetrics {\r\n    const count = metrics.length\r\n    \r\n    return {\r\n      hitRate: metrics.reduce((sum, m) => sum + m.hitRate, 0) / count,\r\n      avgResponseTime: metrics.reduce((sum, m) => sum + m.avgResponseTime, 0) / count,\r\n      memoryUsage: metrics.reduce((sum, m) => sum + m.memoryUsage, 0) / count,\r\n      errorRate: metrics.reduce((sum, m) => sum + m.errorRate, 0) / count,\r\n      throughput: metrics.reduce((sum, m) => sum + m.throughput, 0) / count,\r\n      costScore: metrics.reduce((sum, m) => sum + m.costScore, 0) / count,\r\n      overallScore: metrics.reduce((sum, m) => sum + m.overallScore, 0) / count\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 确定趋势\r\n   * \r\n   * @param current - 当前值\r\n   * @param previous - 之前值\r\n   * @returns 趋势\r\n   */\r\n  private determineTrend(current: number, previous: number): 'improving' | 'declining' | 'stable' {\r\n    const threshold = 0.05 // 5%阈值\r\n    const change = (current - previous) / previous\r\n    \r\n    if (change > threshold) {\r\n      return 'improving'\r\n    } else if (change < -threshold) {\r\n      return 'declining'\r\n    } else {\r\n      return 'stable'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成优化建议\r\n   * \r\n   * @param currentMetrics - 当前指标\r\n   * @param trends - 性能趋势\r\n   * @returns 优化建议数组\r\n   */\r\n  private async generateRecommendations(\r\n    currentMetrics: StrategyMetrics,\r\n    trends: any\r\n  ): Promise<OptimizationRecommendation[]> {\r\n    const recommendations: OptimizationRecommendation[] = []\r\n    \r\n    // 基于命中率的建议\r\n    if (currentMetrics.hitRate < 0.7) {\r\n      recommendations.push({\r\n        id: `hitrate_${Date.now()}`,\r\n        type: 'strategy',\r\n        priority: 'high',\r\n        title: '提升缓存命中率',\r\n        description: `当前命中率为 ${(currentMetrics.hitRate * 100).toFixed(1)}%，建议增加缓存大小或调整TTL策略`,\r\n        expectedImprovement: {\r\n          hitRate: 0.15,\r\n          responseTime: -20\r\n        },\r\n        implementationDifficulty: 'easy',\r\n        riskAssessment: 'low',\r\n        suggestedConfig: {\r\n          l1Config: {\r\n            maxSize: Math.floor(this.strategies.get(this.currentStrategy)!.l1Config.maxSize * 1.5),\r\n            ttl: this.strategies.get(this.currentStrategy)!.l1Config.ttl * 1.2,\r\n            strategy: CacheStrategy.LFU\r\n          }\r\n        },\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 基于响应时间的建议\r\n    if (currentMetrics.avgResponseTime > 50) {\r\n      recommendations.push({\r\n        id: `latency_${Date.now()}`,\r\n        type: 'config',\r\n        priority: 'medium',\r\n        title: '优化响应时间',\r\n        description: `平均响应时间为 ${currentMetrics.avgResponseTime.toFixed(1)}ms，建议优化缓存层级结构`,\r\n        expectedImprovement: {\r\n          responseTime: -30\r\n        },\r\n        implementationDifficulty: 'medium',\r\n        riskAssessment: 'low',\r\n        suggestedConfig: {\r\n          name: 'low_latency_optimized',\r\n          type: OptimizationStrategy.LATENCY\r\n        },\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 基于内存使用的建议\r\n    if (currentMetrics.memoryUsage > 0.8) {\r\n      recommendations.push({\r\n        id: `memory_${Date.now()}`,\r\n        type: 'strategy',\r\n        priority: 'high',\r\n        title: '优化内存使用',\r\n        description: `内存使用率为 ${(currentMetrics.memoryUsage * 100).toFixed(1)}%，建议减少缓存大小或启用更激进的清理策略`,\r\n        expectedImprovement: {\r\n          memoryUsage: -25\r\n        },\r\n        implementationDifficulty: 'easy',\r\n        riskAssessment: 'medium',\r\n        suggestedConfig: {\r\n          l1Config: {\r\n            maxSize: Math.floor(this.strategies.get(this.currentStrategy)!.l1Config.maxSize * 0.7),\r\n            ttl: this.strategies.get(this.currentStrategy)!.l1Config.ttl * 0.8,\r\n            strategy: CacheStrategy.LRU\r\n          }\r\n        },\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 基于趋势的建议\r\n    if (trends.hitRateTrend === 'declining') {\r\n      recommendations.push({\r\n        id: `trend_hitrate_${Date.now()}`,\r\n        type: 'strategy',\r\n        priority: 'medium',\r\n        title: '命中率下降趋势',\r\n        description: '检测到命中率持续下降，建议调整缓存策略或增加预热',\r\n        expectedImprovement: {\r\n          hitRate: 0.1\r\n        },\r\n        implementationDifficulty: 'medium',\r\n        riskAssessment: 'low',\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 使用机器学习模型生成建议\r\n    const mlRecommendations = await this.generateMLRecommendations(currentMetrics)\r\n    recommendations.push(...mlRecommendations)\r\n    \r\n    // 按优先级排序\r\n    return recommendations.sort((a, b) => {\r\n      const priorityOrder = { high: 3, medium: 2, low: 1 }\r\n      return priorityOrder[b.priority] - priorityOrder[a.priority]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 使用机器学习生成建议\r\n   * \r\n   * @param currentMetrics - 当前指标\r\n   * @returns ML建议数组\r\n   */\r\n  private async generateMLRecommendations(currentMetrics: StrategyMetrics): Promise<OptimizationRecommendation[]> {\r\n    const recommendations: OptimizationRecommendation[] = []\r\n    \r\n    try {\r\n      // 使用策略分类模型\r\n      const strategyModel = this.mlModels.get('strategy_classifier')\r\n      if (strategyModel && strategyModel.accuracy > 0.7) {\r\n        const optimalStrategy = strategyModel.predict(currentMetrics)\r\n        \r\n        if (optimalStrategy && optimalStrategy !== this.currentStrategy) {\r\n          recommendations.push({\r\n            id: `ml_strategy_${Date.now()}`,\r\n            type: 'strategy',\r\n            priority: 'medium',\r\n            title: 'ML推荐策略切换',\r\n            description: `机器学习模型建议切换到 ${optimalStrategy} 策略以提升性能`,\r\n            expectedImprovement: {\r\n              overallScore: 0.15\r\n            },\r\n            implementationDifficulty: 'easy',\r\n            riskAssessment: 'low',\r\n            suggestedConfig: this.strategies.get(optimalStrategy),\r\n            createdAt: new Date()\r\n          })\r\n        }\r\n      }\r\n      \r\n      // 使用性能预测模型\r\n      const performanceModel = this.mlModels.get('performance_predictor')\r\n      if (performanceModel && performanceModel.accuracy > 0.6) {\r\n        const predictions = performanceModel.predict({\r\n          currentMetrics,\r\n          strategies: Array.from(this.strategies.values())\r\n        })\r\n        \r\n        if (predictions && predictions.bestStrategy) {\r\n          recommendations.push({\r\n            id: `ml_performance_${Date.now()}`,\r\n            type: 'config',\r\n            priority: 'low',\r\n            title: 'ML性能优化建议',\r\n            description: `预测模型建议的配置调整可提升 ${predictions.expectedImprovement}% 的性能`,\r\n            expectedImprovement: predictions.improvements,\r\n            implementationDifficulty: 'medium',\r\n            riskAssessment: 'medium',\r\n            createdAt: new Date()\r\n          })\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('ML recommendation generation failed:', error)\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 应用建议\r\n   * \r\n   * @param recommendation - 优化建议\r\n   */\r\n  private async applyRecommendation(recommendation: OptimizationRecommendation): Promise<void> {\r\n    try {\r\n      console.log(`Applying recommendation: ${recommendation.title}`)\r\n      \r\n      if (recommendation.suggestedConfig) {\r\n        if (recommendation.type === 'strategy') {\r\n          // 启动A/B测试来验证新策略\r\n          await this.startABTest(\r\n            `auto_${recommendation.id}`,\r\n            `Auto-applied: ${recommendation.title}`,\r\n            this.strategies.get(this.currentStrategy)!,\r\n            recommendation.suggestedConfig as StrategyConfig,\r\n            0.1, // 10%流量\r\n            3600000 // 1小时测试\r\n          )\r\n        } else {\r\n          // 直接应用配置更改\r\n          await this.updateCacheConfig(recommendation.suggestedConfig)\r\n        }\r\n      }\r\n      \r\n      this.emit('recommendation-applied', recommendation)\r\n      \r\n    } catch (error) {\r\n      console.error(`Failed to apply recommendation ${recommendation.id}:`, error)\r\n      this.emit('recommendation-failed', { recommendation, error })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新缓存配置\r\n   * \r\n   * @param config - 新配置\r\n   */\r\n  private async updateCacheConfig(config: any): Promise<void> {\r\n    const cacheConfig = intelligentCacheManager.getConfig()\r\n    \r\n    if (config.l1Config) {\r\n      Object.assign(cacheConfig.l1, config.l1Config)\r\n    }\r\n    \r\n    if (config.l2Config) {\r\n      Object.assign(cacheConfig.l2, config.l2Config)\r\n    }\r\n    \r\n    intelligentCacheManager.updateConfig(cacheConfig)\r\n  }\r\n\r\n  /**\r\n   * 启动A/B测试\r\n   * \r\n   * @param testId - 测试ID\r\n   * @param name - 测试名称\r\n   * @param controlStrategy - 控制组策略\r\n   * @param experimentStrategy - 实验组策略\r\n   * @param trafficSplit - 流量分配\r\n   * @param duration - 测试持续时间\r\n   */\r\n  async startABTest(\r\n    testId: string,\r\n    name: string,\r\n    controlStrategy: StrategyConfig,\r\n    experimentStrategy: StrategyConfig,\r\n    trafficSplit: number = 0.5,\r\n    duration: number = 3600000\r\n  ): Promise<void> {\r\n    const test: ABTestConfig = {\r\n      testId,\r\n      name,\r\n      controlStrategy,\r\n      experimentStrategy,\r\n      trafficSplit,\r\n      duration,\r\n      startTime: new Date(),\r\n      endTime: new Date(Date.now() + duration),\r\n      isActive: true,\r\n      significanceThreshold: 0.05\r\n    }\r\n    \r\n    this.activeTests.set(testId, test)\r\n    \r\n    // 设置测试结束定时器\r\n    setTimeout(() => {\r\n      this.stopABTest(testId)\r\n    }, duration)\r\n    \r\n    console.log(`Started A/B test: ${name} (${testId})`)\r\n    this.emit('ab-test-started', test)\r\n  }\r\n\r\n  /**\r\n   * 停止A/B测试\r\n   * \r\n   * @param testId - 测试ID\r\n   */\r\n  async stopABTest(testId: string): Promise<void> {\r\n    const test = this.activeTests.get(testId)\r\n    if (!test) {\r\n      return\r\n    }\r\n    \r\n    test.isActive = false\r\n    test.endTime = new Date()\r\n    \r\n    // 分析测试结果\r\n    const result = await this.analyzeABTestResult(test)\r\n    this.testResults.set(testId, result)\r\n    \r\n    this.activeTests.delete(testId)\r\n    \r\n    console.log(`Stopped A/B test: ${test.name} (${testId})`)\r\n    this.emit('ab-test-completed', { test, result })\r\n    \r\n    // 如果实验组显著更好，应用新策略\r\n    if (result.isSignificant && result.recommendation === 'adopt') {\r\n      await this.adoptStrategy(test.experimentStrategy)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 分析A/B测试结果\r\n   * \r\n   * @param test - 测试配置\r\n   * @returns 测试结果\r\n   */\r\n  private async analyzeABTestResult(test: ABTestConfig): Promise<ABTestResult> {\r\n    // 这里应该收集测试期间的实际指标数据\r\n    // 简化实现，使用模拟数据\r\n    const controlMetrics = await this.collectMetricsForStrategy(test.controlStrategy)\r\n    const experimentMetrics = await this.collectMetricsForStrategy(test.experimentStrategy)\r\n    \r\n    const improvement = {\r\n      hitRate: (experimentMetrics.hitRate - controlMetrics.hitRate) / controlMetrics.hitRate * 100,\r\n      responseTime: (controlMetrics.avgResponseTime - experimentMetrics.avgResponseTime) / controlMetrics.avgResponseTime * 100,\r\n      memoryUsage: (controlMetrics.memoryUsage - experimentMetrics.memoryUsage) / controlMetrics.memoryUsage * 100,\r\n      errorRate: (controlMetrics.errorRate - experimentMetrics.errorRate) / controlMetrics.errorRate * 100,\r\n      overallScore: (experimentMetrics.overallScore - controlMetrics.overallScore) / controlMetrics.overallScore * 100\r\n    }\r\n    \r\n    // 简化的统计显著性检验\r\n    const significance = this.calculateStatisticalSignificance(controlMetrics, experimentMetrics)\r\n    const isSignificant = significance < test.significanceThreshold\r\n    \r\n    let recommendation: 'adopt' | 'reject' | 'continue' = 'reject'\r\n    if (isSignificant && improvement.overallScore > 5) {\r\n      recommendation = 'adopt'\r\n    } else if (!isSignificant) {\r\n      recommendation = 'continue'\r\n    }\r\n    \r\n    return {\r\n      testId: test.testId,\r\n      controlMetrics,\r\n      experimentMetrics,\r\n      improvement,\r\n      significance,\r\n      isSignificant,\r\n      recommendation,\r\n      confidence: 1 - significance\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 收集策略指标\r\n   * \r\n   * @param strategy - 策略配置\r\n   * @returns 策略指标\r\n   */\r\n  private async collectMetricsForStrategy(strategy: StrategyConfig): Promise<StrategyMetrics> {\r\n    // 简化实现，实际应该基于真实的测试数据\r\n    const baseMetrics = await this.collectCurrentMetrics()\r\n    \r\n    // 根据策略类型调整指标\r\n    const adjustments = this.getStrategyAdjustments(strategy)\r\n    \r\n    return {\r\n      hitRate: Math.min(1, baseMetrics.hitRate * adjustments.hitRate),\r\n      avgResponseTime: baseMetrics.avgResponseTime * adjustments.responseTime,\r\n      memoryUsage: Math.min(1, baseMetrics.memoryUsage * adjustments.memoryUsage),\r\n      errorRate: Math.max(0, baseMetrics.errorRate * adjustments.errorRate),\r\n      throughput: baseMetrics.throughput * adjustments.throughput,\r\n      costScore: baseMetrics.costScore * adjustments.costScore,\r\n      overallScore: 0 // 将在后面计算\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取策略调整因子\r\n   * \r\n   * @param strategy - 策略配置\r\n   * @returns 调整因子\r\n   */\r\n  private getStrategyAdjustments(strategy: StrategyConfig): {\r\n    hitRate: number\r\n    responseTime: number\r\n    memoryUsage: number\r\n    errorRate: number\r\n    throughput: number\r\n    costScore: number\r\n  } {\r\n    switch (strategy.type) {\r\n      case OptimizationStrategy.PERFORMANCE:\r\n        return {\r\n          hitRate: 1.1,\r\n          responseTime: 0.8,\r\n          memoryUsage: 1.2,\r\n          errorRate: 0.9,\r\n          throughput: 1.15,\r\n          costScore: 1.1\r\n        }\r\n      case OptimizationStrategy.MEMORY:\r\n        return {\r\n          hitRate: 0.95,\r\n          responseTime: 1.1,\r\n          memoryUsage: 0.7,\r\n          errorRate: 1.0,\r\n          throughput: 0.9,\r\n          costScore: 0.8\r\n        }\r\n      case OptimizationStrategy.LATENCY:\r\n        return {\r\n          hitRate: 1.05,\r\n          responseTime: 0.7,\r\n          memoryUsage: 1.1,\r\n          errorRate: 0.95,\r\n          throughput: 1.1,\r\n          costScore: 1.05\r\n        }\r\n      default:\r\n        return {\r\n          hitRate: 1.0,\r\n          responseTime: 1.0,\r\n          memoryUsage: 1.0,\r\n          errorRate: 1.0,\r\n          throughput: 1.0,\r\n          costScore: 1.0\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算统计显著性\r\n   * \r\n   * @param control - 控制组指标\r\n   * @param experiment - 实验组指标\r\n   * @returns p值\r\n   */\r\n  private calculateStatisticalSignificance(control: StrategyMetrics, experiment: StrategyMetrics): number {\r\n    // 简化的t检验实现\r\n    const diff = experiment.overallScore - control.overallScore\r\n    const pooledStd = 0.1 // 假设标准差\r\n    const n = 100 // 假设样本大小\r\n    \r\n    const tStat = diff / (pooledStd * Math.sqrt(2 / n))\r\n    \r\n    // 简化的p值计算\r\n    return Math.max(0.001, 1 - Math.abs(tStat) / 3)\r\n  }\r\n\r\n  /**\r\n   * 采用新策略\r\n   * \r\n   * @param strategy - 新策略\r\n   */\r\n  private async adoptStrategy(strategy: StrategyConfig): Promise<void> {\r\n    console.log(`Adopting new strategy: ${strategy.name}`)\r\n    \r\n    this.currentStrategy = strategy.name\r\n    \r\n    // 更新缓存配置\r\n    await this.updateCacheConfig(strategy)\r\n    \r\n    this.emit('strategy-adopted', strategy)\r\n  }\r\n\r\n  /**\r\n   * 训练机器学习模型\r\n   */\r\n  private async trainModels(): Promise<void> {\r\n    if (this.metricsHistory.length < 50) {\r\n      return // 数据不足\r\n    }\r\n    \r\n    try {\r\n      // 训练性能预测模型\r\n      const performanceModel = this.mlModels.get('performance_predictor')\r\n      if (performanceModel) {\r\n        const trainingData = this.preparePerformanceTrainingData()\r\n        performanceModel.train(trainingData)\r\n        console.log('Performance prediction model trained')\r\n      }\r\n      \r\n      // 训练策略分类模型\r\n      const strategyModel = this.mlModels.get('strategy_classifier')\r\n      if (strategyModel) {\r\n        const trainingData = this.prepareStrategyTrainingData()\r\n        strategyModel.train(trainingData)\r\n        console.log('Strategy classification model trained')\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Model training failed:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 准备性能训练数据\r\n   * \r\n   * @returns 训练数据\r\n   */\r\n  private preparePerformanceTrainingData(): any[] {\r\n    return this.metricsHistory.map((metrics, index) => ({\r\n      input: {\r\n        hitRate: metrics.hitRate,\r\n        responseTime: metrics.avgResponseTime,\r\n        memoryUsage: metrics.memoryUsage,\r\n        errorRate: metrics.errorRate,\r\n        throughput: metrics.throughput\r\n      },\r\n      output: metrics.overallScore\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * 准备策略训练数据\r\n   * \r\n   * @returns 训练数据\r\n   */\r\n  private prepareStrategyTrainingData(): any[] {\r\n    const data: any[] = []\r\n    \r\n    // 基于历史数据和策略效果创建训练样本\r\n    for (const [strategyName, strategy] of this.strategies) {\r\n      const adjustments = this.getStrategyAdjustments(strategy)\r\n      \r\n      this.metricsHistory.forEach(metrics => {\r\n        data.push({\r\n          input: metrics,\r\n          output: strategyName,\r\n          performance: metrics.overallScore * adjustments.hitRate * (1 / adjustments.responseTime)\r\n        })\r\n      })\r\n    }\r\n    \r\n    return data\r\n  }\r\n\r\n  /**\r\n   * 预测性能\r\n   * \r\n   * @param input - 输入数据\r\n   * @returns 预测结果\r\n   */\r\n  private predictPerformance(input: any): any {\r\n    // 简化的线性回归预测\r\n    const weights = {\r\n      hitRate: 0.4,\r\n      responseTime: -0.3,\r\n      memoryUsage: -0.2,\r\n      errorRate: -0.1\r\n    }\r\n    \r\n    const score = \r\n      weights.hitRate * input.hitRate +\r\n      weights.responseTime * (1 / Math.max(1, input.responseTime / 100)) +\r\n      weights.memoryUsage * (1 - input.memoryUsage) +\r\n      weights.errorRate * (1 - input.errorRate)\r\n    \r\n    return {\r\n      expectedScore: Math.max(0, Math.min(1, score)),\r\n      confidence: 0.7\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 分类最优策略\r\n   * \r\n   * @param input - 输入指标\r\n   * @returns 最优策略名称\r\n   */\r\n  private classifyOptimalStrategy(input: StrategyMetrics): string {\r\n    // 简化的决策树逻辑\r\n    if (input.memoryUsage > 0.8) {\r\n      return 'memory_optimized'\r\n    } else if (input.avgResponseTime > 100) {\r\n      return 'low_latency'\r\n    } else if (input.hitRate < 0.6) {\r\n      return 'performance'\r\n    } else {\r\n      return 'default'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 训练性能模型\r\n   * \r\n   * @param data - 训练数据\r\n   */\r\n  private trainPerformanceModel(data: any[]): void {\r\n    // 简化的训练逻辑\r\n    const model = this.mlModels.get('performance_predictor')\r\n    if (model) {\r\n      model.trainingData = data\r\n      model.accuracy = Math.min(0.95, 0.5 + data.length / 1000)\r\n      model.lastTrainedAt = new Date()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 训练策略模型\r\n   * \r\n   * @param data - 训练数据\r\n   */\r\n  private trainStrategyModel(data: any[]): void {\r\n    // 简化的训练逻辑\r\n    const model = this.mlModels.get('strategy_classifier')\r\n    if (model) {\r\n      model.trainingData = data\r\n      model.accuracy = Math.min(0.9, 0.4 + data.length / 500)\r\n      model.lastTrainedAt = new Date()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理指标更新\r\n   * \r\n   * @param metrics - 缓存指标\r\n   */\r\n  private handleMetricsUpdate(metrics: any): void {\r\n    // 检查是否需要立即优化\r\n    if (metrics.hitRate < 0.5 || metrics.avgResponseTime > 200) {\r\n      console.log('Performance degradation detected, triggering immediate optimization')\r\n      this.performOptimization()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理数据库指标\r\n   * \r\n   * @param dbMetrics - 数据库指标\r\n   */\r\n  private handleDatabaseMetrics(dbMetrics: any): void {\r\n    // 根据数据库负载调整缓存策略\r\n    if (dbMetrics.connectionPoolUsage > 0.9) {\r\n      // 数据库连接池使用率高，增加缓存积极性\r\n      this.adjustCacheAggressiveness(1.2)\r\n    } else if (dbMetrics.connectionPoolUsage < 0.3) {\r\n      // 数据库负载低，可以减少缓存\r\n      this.adjustCacheAggressiveness(0.8)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 调整缓存积极性\r\n   * \r\n   * @param factor - 调整因子\r\n   */\r\n  private adjustCacheAggressiveness(factor: number): void {\r\n    const currentConfig = intelligentCacheManager.getConfig()\r\n    \r\n    const newConfig = {\r\n      ...currentConfig,\r\n      l1: {\r\n        ...currentConfig.l1,\r\n        ttl: Math.max(60000, currentConfig.l1.ttl * factor),\r\n        maxSize: Math.max(100, Math.floor(currentConfig.l1.maxSize * factor))\r\n      },\r\n      l2: {\r\n        ...currentConfig.l2,\r\n        ttl: Math.max(300000, currentConfig.l2.ttl * factor),\r\n        maxSize: Math.max(1000, Math.floor(currentConfig.l2.maxSize * factor))\r\n      }\r\n    }\r\n    \r\n    intelligentCacheManager.updateConfig(newConfig)\r\n    console.log(`Adjusted cache aggressiveness by factor ${factor}`)\r\n  }\r\n\r\n  /**\r\n   * 获取优化建议\r\n   * \r\n   * @returns 当前建议列表\r\n   */\r\n  getRecommendations(): OptimizationRecommendation[] {\r\n    return [...this.recommendations]\r\n  }\r\n\r\n  /**\r\n   * 获取活跃的A/B测试\r\n   * \r\n   * @returns 活跃测试列表\r\n   */\r\n  getActiveTests(): ABTestConfig[] {\r\n    return Array.from(this.activeTests.values())\r\n  }\r\n\r\n  /**\r\n   * 获取测试结果\r\n   * \r\n   * @returns 测试结果列表\r\n   */\r\n  getTestResults(): ABTestResult[] {\r\n    return Array.from(this.testResults.values())\r\n  }\r\n\r\n  /**\r\n   * 获取策略列表\r\n   * \r\n   * @returns 策略配置列表\r\n   */\r\n  getStrategies(): StrategyConfig[] {\r\n    return Array.from(this.strategies.values())\r\n  }\r\n\r\n  /**\r\n   * 获取当前策略\r\n   * \r\n   * @returns 当前策略名称\r\n   */\r\n  getCurrentStrategy(): string {\r\n    return this.currentStrategy\r\n  }\r\n\r\n  /**\r\n   * 获取机器学习模型状态\r\n   * \r\n   * @returns 模型状态\r\n   */\r\n  getMLModelStatus(): { name: string; accuracy: number; lastTrained: Date }[] {\r\n    return Array.from(this.mlModels.values()).map(model => ({\r\n      name: model.name,\r\n      accuracy: model.accuracy,\r\n      lastTrained: model.lastTrainedAt\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * 手动触发优化\r\n   */\r\n  async triggerOptimization(): Promise<void> {\r\n    await this.performOptimization()\r\n  }\r\n\r\n  /**\r\n   * 更新优化配置\r\n   * \r\n   * @param config - 新配置\r\n   */\r\n  updateOptimizationConfig(config: Partial<typeof this.optimizationConfig>): void {\r\n    Object.assign(this.optimizationConfig, config)\r\n    \r\n    // 重启优化间隔\r\n    if (this.optimizationInterval && config.interval) {\r\n      clearInterval(this.optimizationInterval)\r\n      this.optimizationInterval = setInterval(() => {\r\n        this.performOptimization()\r\n      }, this.optimizationConfig.interval)\r\n    }\r\n    \r\n    console.log('Optimization configuration updated')\r\n    this.emit('config-updated', this.optimizationConfig)\r\n  }\r\n\r\n  /**\r\n   * 生成优化报告\r\n   * \r\n   * @returns 优化报告\r\n   */\r\n  generateOptimizationReport(): {\r\n    summary: string\r\n    currentStrategy: string\r\n    recommendations: number\r\n    activeTests: number\r\n    modelAccuracy: any\r\n    performance: any\r\n  } {\r\n    const modelAccuracy = this.getMLModelStatus().reduce((acc, model) => {\r\n      acc[model.name] = model.accuracy\r\n      return acc\r\n    }, {} as any)\r\n    \r\n    const currentMetrics = this.metricsHistory[this.metricsHistory.length - 1]\r\n    \r\n    return {\r\n      summary: `\r\n缓存策略优化报告\r\n================\r\n生成时间: ${new Date().toISOString()}\r\n当前策略: ${this.currentStrategy}\r\n优化建议: ${this.recommendations.length} 条\r\n活跃测试: ${this.activeTests.size} 个\r\n历史数据: ${this.metricsHistory.length} 条记录\r\n模型准确率: ${Object.values(modelAccuracy).map(a => `${(a * 100).toFixed(1)}%`).join(', ')}\r\n      `.trim(),\r\n      currentStrategy: this.currentStrategy,\r\n      recommendations: this.recommendations.length,\r\n      activeTests: this.activeTests.size,\r\n      modelAccuracy,\r\n      performance: currentMetrics || {}\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const cacheStrategyOptimizer = new CacheStrategyOptimizer()\r\n\r\n// 导出类型\r\nexport type {\r\n  StrategyConfig,\r\n  StrategyMetrics,\r\n  ABTestConfig,\r\n  ABTestResult,\r\n  OptimizationRecommendation,\r\n  MLModel\r\n}\r\n\r\nexport { OptimizationStrategy }\r\n"],"version":3}