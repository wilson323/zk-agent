{"version":3,"names":["cov_1h97lu4vqo","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_1","require","api_helper_1","route_configs_1","exports","POST","createApiRoute","RouteConfigs","protectedPost","validatedBody","baseUrl","useProxy","_validatedBody","apiKey","process","env","FASTGPT_API_KEY","apiUrl","FASTGPT_API_URL","endpoint","encodeURIComponent","replace","ApiResponseWrapper","error","response","fetch","method","headers","Authorization","ok","errorData","json","catch","message","statusText","status","data","success"],"sources":["E:\\zk-agent\\app\\api\\fastgpt\\test-connection\\route.ts"],"sourcesContent":["/**\n * @file fastgpt\\test-connection\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { createApiRoute } from '@/lib/middleware/api-route';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { RouteConfigs } from '@/lib/middleware/route-configs';\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async ({ validatedBody }) => {\n    try {\n      const { baseUrl, useProxy } = _validatedBody\n    \n      // Use server-side environment variable for API key\n      const apiKey = process.env.FASTGPT_API_KEY\n    \n      // Use server-side or provided API URL\n      const apiUrl = process.env.FASTGPT_API_URL || baseUrl || \"https://zktecoaihub.com\"\n    \n      // Determine the actual API endpoint for testing\n      const endpoint = useProxy\n        ? `/api/proxy?url=${encodeURIComponent(apiUrl.replace(/^https?:\\/\\//, \"\"))}/api/v1/models`\n        : `${apiUrl}/api/v1/models`\n    \n      if (!apiKey) {\n        return ApiResponseWrapper.error('FastGPT API key not configured', 500)\n      }\n    \n      // Test the connection by making a simple request\n      const response = await fetch(endpoint, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n      })\n    \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ error: { message: response.statusText } }))\n        return ApiResponseWrapper.error(\n          `Connection test failed: ${errorData.error?.message || response.statusText}`,\n          response.status\n        )\n      }\n    \n      const data = await response.json()\n      return ApiResponseWrapper.success({ success: true, data, useProxy })\n    } catch (error) {\n      return ApiResponseWrapper.error('Internal server error', 500)\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}