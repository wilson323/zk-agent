{"version":3,"names":["validateJestConfig","validateTestEnvironment","safeRequire","createSafePolyfills","applySafePolyfills","require","describe","originalEnv","originalConsole","beforeEach","process","env","log","console","warn","error","jest","fn","afterEach","it","result","expect","toHaveProperty","originalJest","global","not","toThrow","toHaveBeenCalledWith","any","String","NODE_ENV","warnings","toContain","toBeDefined","join","toBe","toBeNull","stringContaining","fallback","custom","polyfills","TextEncoder","TextDecoder","originalTextEncoder","invalidPolyfills","Error"],"sources":["jest-config-validator.test.js"],"sourcesContent":["/**\n * Jest 配置验证器测试\n * 测试增强的错误处理和验证机制\n */\n\nconst {\n  validateJestConfig,\n  validateTestEnvironment,\n  safeRequire,\n  createSafePolyfills,\n  applySafePolyfills\n} = require('./jest-config-validator');\n\ndescribe('Jest 配置验证器', () => {\n  let originalEnv;\n  let originalConsole;\n\n  beforeEach(() => {\n    // 保存原始环境\n    originalEnv = { ...process.env };\n    originalConsole = {\n      log: console.log,\n      warn: console.warn,\n      error: console.error\n    };\n    \n    // Mock console 方法\n    console.log = jest.fn();\n    console.warn = jest.fn();\n    console.error = jest.fn();\n  });\n\n  afterEach(() => {\n    // 恢复原始环境\n    process.env = originalEnv;\n    console.log = originalConsole.log;\n    console.warn = originalConsole.warn;\n    console.error = originalConsole.error;\n  });\n\n  describe('validateJestConfig', () => {\n    it('应该成功验证有效的 Jest 配置', () => {\n      const result = validateJestConfig();\n      expect(result).toHaveProperty('valid');\n      expect(result).toHaveProperty('errors');\n      expect(result).toHaveProperty('warnings');\n    });\n\n    it('应该检测到缺失的 Jest 配置', () => {\n      // Mock jest 对象不存在的情况\n      const originalJest = global.jest;\n      delete global.jest;\n      \n      expect(() => validateJestConfig()).not.toThrow();\n      expect(console.warn).toHaveBeenCalledWith(\n        'Failed to require E:\\\\zk-agent\\\\jest.config.fixed.js:',\n        expect.any(String)\n      );\n      \n      // 恢复 jest 对象\n      global.jest = originalJest;\n    });\n  });\n\n  describe('validateTestEnvironment', () => {\n    it('应该验证测试环境配置', () => {\n      process.env.NODE_ENV = 'test';\n      \n      const result = validateTestEnvironment();\n      expect(result).toHaveProperty('isValid');\n      expect(result).toHaveProperty('errors');\n      expect(result).toHaveProperty('warnings');\n      expect(result).toHaveProperty('info');\n    });\n\n    it('应该警告非测试环境', () => {\n      process.env.NODE_ENV = 'development';\n      \n      const result = validateTestEnvironment();\n      expect(result.warnings).toContain('NODE_ENV is not set to \"test\"');\n    });\n  });\n\n  describe('safeRequire', () => {\n    it('应该成功加载存在的模块', () => {\n      const result = safeRequire('path');\n      expect(result).toBeDefined();\n      expect(typeof result.join).toBe('function');\n    });\n\n    it('应该处理不存在的模块', () => {\n      const result = safeRequire('non-existent-module');\n      expect(result).toBeNull();\n      expect(console.warn).toHaveBeenCalledWith(\n        'Failed to require non-existent-module:',\n        expect.stringContaining('Cannot find module')\n      );\n    });\n\n    it('应该使用自定义回退值', () => {\n      const fallback = { custom: 'fallback' };\n      const result = safeRequire('non-existent-module', fallback);\n      expect(result).toBe(fallback);\n    });\n  });\n\n  describe('createSafePolyfills', () => {\n    it('should create necessary polyfills', () => {\n      const polyfills = createSafePolyfills();\n      \n      expect(polyfills).toHaveProperty('TextEncoder');\n      expect(polyfills).toHaveProperty('TextDecoder');\n      expect(typeof polyfills.TextEncoder).toBe('function');\n      expect(typeof polyfills.TextDecoder).toBe('function');\n    });\n\n    it('should create working TextEncoder polyfill', () => {\n      const polyfills = createSafePolyfills();\n      expect(() => new polyfills.TextEncoder()).not.toThrow();\n    });\n\n    it('should create working TextDecoder polyfill', () => {\n      const polyfills = createSafePolyfills();\n      expect(() => new polyfills.TextDecoder()).not.toThrow();\n    });\n  });\n\n  describe('applySafePolyfills', () => {\n    it('should apply polyfills safely', () => {\n      const polyfills = createSafePolyfills();\n      \n      expect(polyfills).toHaveProperty('TextEncoder');\n      expect(polyfills).toHaveProperty('TextDecoder');\n      \n      expect(() => applySafePolyfills(polyfills)).not.toThrow();\n    });\n\n    it('should not override existing polyfills', () => {\n      const originalTextEncoder = global.TextEncoder;\n      \n      const polyfills = createSafePolyfills();\n      applySafePolyfills(polyfills);\n      \n      expect(global.TextEncoder).toBe(originalTextEncoder);\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining('already exists, skipping polyfill')\n      );\n    });\n\n    it('应该处理应用 polyfills 时的错误', () => {\n      const invalidPolyfills = {\n        get TextEncoder() {\n          throw new Error('Test error');\n        }\n      };\n      \n      expect(() => applySafePolyfills(invalidPolyfills)).not.toThrow();\n      expect(console.error).toHaveBeenCalledWith(\n        '应用 polyfills 时发生错误:',\n        'Test error'\n      );\n    });\n  });\n\n  describe('集成测试', () => {\n    it('应该完整地验证和设置测试环境', () => {\n      process.env.NODE_ENV = 'test';\n      \n      // 运行完整的验证流程\n      expect(() => {\n        validateJestConfig();\n        validateTestEnvironment();\n        const polyfills = createSafePolyfills();\n        applySafePolyfills(polyfills);\n      }).not.toThrow();\n      \n      // 验证所有组件都正常工作\n      expect(global.TextEncoder).toBeDefined();\n      expect(global.TextDecoder).toBeDefined();\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining('Jest 配置验证通过')\n      );\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}