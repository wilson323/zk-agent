3353702038628f8211822ea3dedc70a5
"use strict";
/**
 * 负载感知的动态连接池调整器
 * 基于实时负载和使用模式动态调整连接池参数
 *
 * 功能:
 * - 实时监控系统负载和连接池使用情况
 * - 基于机器学习算法预测最优连接池配置
 * - 自动调整连接池参数以适应负载变化
 * - 提供平滑的扩缩容策略避免系统震荡
 *
 * @author ZK-Agent Team
 * @version 1.0.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.dynamicPoolAdjuster = exports.DynamicPoolAdjuster = void 0;
const events_1 = require("events");
const monitoring_1 = require("./monitoring");
const connection_pool_analyzer_1 = require("./connection-pool-analyzer");
/**
 * 动态连接池调整器类
 */
class DynamicPoolAdjuster extends events_1.EventEmitter {
    constructor(intervalMs = 30000, // 30秒检查一次
    maxHistorySize = 500, smoothingFactor = 0.3 // 平滑因子，用于避免频繁调整
    ) {
        super();
        this.isActive = false;
        this.adjustmentInterval = null;
        this.loadMetricsHistory = [];
        this.adjustmentHistory = [];
        this.lastAdjustmentTime = null;
        this.intervalMs = intervalMs;
        this.maxHistorySize = maxHistorySize;
        this.smoothingFactor = smoothingFactor;
        // 初始化策略
        this.strategies = this.initializeStrategies();
        // 初始化预测模型
        this.predictionModel = this.initializePredictionModel();
        // 设置监听器
        this.setupEventListeners();
    }
    /**
     * 初始化调整策略
     *
     * @returns 策略数组
     */
    initializeStrategies() {
        return [
            {
                name: 'high_load_scale_up',
                description: '高负载时扩容连接池',
                triggers: {
                    cpuThreshold: 80,
                    memoryThreshold: 85,
                    responseTimeThreshold: 2000,
                    poolUtilizationThreshold: 90
                },
                actions: {
                    connectionAdjustment: {
                        type: 'increase',
                        amount: 3,
                        maxLimit: 50
                    },
                    timeoutAdjustment: {
                        acquireTimeout: 90000,
                        createTimeout: 45000
                    }
                },
                priority: 1,
                cooldownMs: 120000 // 2分钟冷却
            },
            {
                name: 'low_load_scale_down',
                description: '低负载时缩容连接池',
                triggers: {
                    cpuThreshold: 20,
                    memoryThreshold: 30,
                    poolUtilizationThreshold: 25
                },
                actions: {
                    connectionAdjustment: {
                        type: 'decrease',
                        amount: 2,
                        minLimit: 3
                    },
                    timeoutAdjustment: {
                        idleTimeout: 180000 // 3分钟空闲超时
                    }
                },
                priority: 3,
                cooldownMs: 300000 // 5分钟冷却
            },
            {
                name: 'high_error_rate_recovery',
                description: '高错误率时的恢复策略',
                triggers: {
                    errorRateThreshold: 5
                },
                actions: {
                    connectionAdjustment: {
                        type: 'decrease',
                        amount: 1,
                        minLimit: 2
                    },
                    timeoutAdjustment: {
                        createTimeout: 60000,
                        acquireTimeout: 120000
                    },
                    configAdjustment: {
                        createRetryInterval: 1000
                    }
                },
                priority: 2,
                cooldownMs: 180000 // 3分钟冷却
            },
            {
                name: 'burst_traffic_handling',
                description: '突发流量处理',
                triggers: {
                    responseTimeThreshold: 1500,
                    poolUtilizationThreshold: 85
                },
                actions: {
                    connectionAdjustment: {
                        type: 'increase',
                        amount: 5,
                        maxLimit: 40
                    },
                    timeoutAdjustment: {
                        acquireTimeout: 60000
                    }
                },
                priority: 1,
                cooldownMs: 90000 // 1.5分钟冷却
            },
            {
                name: 'memory_pressure_optimization',
                description: '内存压力优化',
                triggers: {
                    memoryThreshold: 90
                },
                actions: {
                    connectionAdjustment: {
                        type: 'decrease',
                        amount: 3,
                        minLimit: 2
                    },
                    timeoutAdjustment: {
                        idleTimeout: 120000 // 2分钟空闲超时
                    },
                    configAdjustment: {
                        reapInterval: 500 // 更频繁的连接回收
                    }
                },
                priority: 2,
                cooldownMs: 240000 // 4分钟冷却
            }
        ];
    }
    /**
     * 初始化预测模型
     *
     * @returns 预测模型实例
     */
    initializePredictionModel() {
        return {
            predictOptimalConnections: (metrics, currentConfig) => {
                if (metrics.length < 5) {
                    return currentConfig.max || 10;
                }
                // 简单的线性回归预测
                const recentMetrics = metrics.slice(-10);
                const avgCpu = recentMetrics.reduce((sum, m) => sum + m.cpuUsage, 0) / recentMetrics.length;
                const avgMemory = recentMetrics.reduce((sum, m) => sum + m.memoryUsage, 0) / recentMetrics.length;
                const avgConcurrent = recentMetrics.reduce((sum, m) => sum + m.concurrentRequests, 0) / recentMetrics.length;
                // 基于负载计算最优连接数
                let optimalConnections = Math.ceil(avgConcurrent * 1.2);
                // 根据CPU和内存使用率调整
                if (avgCpu > 70 || avgMemory > 80) {
                    optimalConnections = Math.min(optimalConnections, currentConfig.max * 0.8);
                }
                else if (avgCpu < 30 && avgMemory < 50) {
                    optimalConnections = Math.max(optimalConnections, currentConfig.min || 2);
                }
                return Math.max(2, Math.min(50, optimalConnections));
            },
            predictLoadTrend: (metrics) => {
                if (metrics.length < 3) {
                    return 'stable';
                }
                const recent = metrics.slice(-3);
                const throughputTrend = recent[2].throughput - recent[0].throughput;
                const cpuTrend = recent[2].cpuUsage - recent[0].cpuUsage;
                if (throughputTrend > 10 || cpuTrend > 15) {
                    return 'increasing';
                }
                else if (throughputTrend < -10 || cpuTrend < -15) {
                    return 'decreasing';
                }
                else {
                    return 'stable';
                }
            },
            calculateConfidence: (metrics) => {
                if (metrics.length < 5) {
                    return 0.3;
                }
                // 基于数据一致性计算置信度
                const recent = metrics.slice(-5);
                const cpuVariance = this.calculateVariance(recent.map(m => m.cpuUsage));
                const memoryVariance = this.calculateVariance(recent.map(m => m.memoryUsage));
                // 方差越小，置信度越高
                const confidence = Math.max(0.1, Math.min(1.0, 1 - (cpuVariance + memoryVariance) / 200));
                return confidence;
            }
        };
    }
    /**
     * 计算方差
     *
     * @param values - 数值数组
     * @returns 方差
     */
    calculateVariance(values) {
        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;
        const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
        return variance;
    }
    /**
     * 设置事件监听器
     */
    setupEventListeners() {
        // 监听数据库监控事件
        monitoring_1.databaseMonitor.on('metrics', (metrics) => {
            this.collectLoadMetrics(metrics);
        });
        // 监听连接池分析器事件
        connection_pool_analyzer_1.connectionPoolAnalyzer.on('analysis-complete', (data) => {
            this.handleAnalysisComplete(data);
        });
    }
    /**
     * 收集负载指标
     *
     * @param dbMetrics - 数据库监控指标
     */
    collectLoadMetrics(dbMetrics) {
        const loadMetrics = {
            timestamp: new Date(),
            cpuUsage: dbMetrics.cpuUsage.user + dbMetrics.cpuUsage.system,
            memoryUsage: (dbMetrics.memoryUsage.heapUsed / dbMetrics.memoryUsage.heapTotal) * 100,
            concurrentRequests: dbMetrics.activeConnections || 0,
            avgResponseTime: dbMetrics.avgLatency || 0,
            errorRate: ((dbMetrics.totalQueries - dbMetrics.successfulQueries) / Math.max(1, dbMetrics.totalQueries)) * 100,
            throughput: dbMetrics.totalQueries / Math.max(1, (Date.now() - dbMetrics.timestamp.getTime()) / 1000)
        };
        this.loadMetricsHistory.push(loadMetrics);
        // 限制历史记录大小
        if (this.loadMetricsHistory.length > this.maxHistorySize) {
            this.loadMetricsHistory.shift();
        }
        this.emit('load-metrics', loadMetrics);
    }
    /**
     * 处理分析完成事件
     *
     * @param data - 分析数据
     */
    handleAnalysisComplete(data) {
        // 基于分析结果触发调整
        if (data.recommendations && data.recommendations.length > 0) {
            const highPriorityRecommendations = data.recommendations.filter((rec) => rec.priority === 'high');
            if (highPriorityRecommendations.length > 0) {
                this.triggerAdjustment('analysis_recommendation');
            }
        }
    }
    /**
     * 开始动态调整
     */
    start() {
        if (this.isActive) {
            console.log('Dynamic pool adjuster is already active');
            return;
        }
        console.log(`Starting dynamic pool adjustment (interval: ${this.intervalMs}ms)`);
        this.isActive = true;
        // 启动连接池分析器
        connection_pool_analyzer_1.connectionPoolAnalyzer.startAnalysis();
        this.adjustmentInterval = setInterval(() => {
            this.performAdjustment();
        }, this.intervalMs);
        // 立即执行一次检查
        this.performAdjustment();
    }
    /**
     * 停止动态调整
     */
    stop() {
        if (!this.isActive) {
            return;
        }
        console.log('Stopping dynamic pool adjustment');
        this.isActive = false;
        if (this.adjustmentInterval) {
            clearInterval(this.adjustmentInterval);
            this.adjustmentInterval = null;
        }
        // 停止连接池分析器
        connection_pool_analyzer_1.connectionPoolAnalyzer.stopAnalysis();
    }
    /**
     * 触发立即调整
     *
     * @param reason - 触发原因
     */
    triggerAdjustment(reason) {
        console.log(`Triggering immediate pool adjustment: ${reason}`);
        this.performAdjustment();
    }
    /**
     * 执行调整
     */
    async performAdjustment() {
        if (this.loadMetricsHistory.length < 3) {
            // 数据不足，无法进行调整
            return;
        }
        try {
            const currentMetrics = this.loadMetricsHistory[this.loadMetricsHistory.length - 1];
            const triggeredStrategies = this.findTriggeredStrategies(currentMetrics);
            if (triggeredStrategies.length === 0) {
                return;
            }
            // 选择优先级最高的策略
            const strategy = triggeredStrategies.sort((a, b) => a.priority - b.priority)[0];
            // 检查冷却时间
            if (this.isInCooldown(strategy)) {
                return;
            }
            // 获取当前配置
            const currentConfig = await this.getCurrentPoolConfig();
            // 计算调整置信度
            const confidence = this.predictionModel.calculateConfidence(this.loadMetricsHistory);
            if (confidence < 0.5) {
                console.log(`Skipping adjustment due to low confidence: ${confidence.toFixed(2)}`);
                return;
            }
            // 应用调整
            const adjustmentResult = await this.applyAdjustment(strategy, currentConfig, currentMetrics);
            if (adjustmentResult) {
                this.recordAdjustment(adjustmentResult);
                this.lastAdjustmentTime = new Date();
                this.emit('adjustment-applied', adjustmentResult);
            }
        }
        catch (error) {
            console.error('Error during dynamic pool adjustment:', error);
            this.emit('adjustment-error', error);
        }
    }
    /**
     * 查找被触发的策略
     *
     * @param metrics - 当前负载指标
     * @returns 被触发的策略数组
     */
    findTriggeredStrategies(metrics) {
        return this.strategies.filter(strategy => {
            const triggers = strategy.triggers;
            // 检查CPU阈值
            if (triggers.cpuThreshold !== undefined && metrics.cpuUsage < triggers.cpuThreshold) {
                return false;
            }
            // 检查内存阈值
            if (triggers.memoryThreshold !== undefined && metrics.memoryUsage < triggers.memoryThreshold) {
                return false;
            }
            // 检查响应时间阈值
            if (triggers.responseTimeThreshold !== undefined && metrics.avgResponseTime < triggers.responseTimeThreshold) {
                return false;
            }
            // 检查错误率阈值
            if (triggers.errorRateThreshold !== undefined && metrics.errorRate < triggers.errorRateThreshold) {
                return false;
            }
            // 检查连接池使用率阈值
            if (triggers.poolUtilizationThreshold !== undefined) {
                const currentStats = connection_pool_analyzer_1.connectionPoolAnalyzer.getCurrentStats();
                if (!currentStats || currentStats.utilizationRate < triggers.poolUtilizationThreshold) {
                    return false;
                }
            }
            return true;
        });
    }
    /**
     * 检查是否在冷却期内
     *
     * @param strategy - 策略
     * @returns 是否在冷却期
     */
    isInCooldown(strategy) {
        if (!this.lastAdjustmentTime) {
            return false;
        }
        const timeSinceLastAdjustment = Date.now() - this.lastAdjustmentTime.getTime();
        return timeSinceLastAdjustment < strategy.cooldownMs;
    }
    /**
     * 获取当前连接池配置
     *
     * @returns 当前配置
     */
    async getCurrentPoolConfig() {
        // 这里需要从实际的连接池获取配置
        // 暂时返回默认配置
        return {
            min: parseInt(process.env.DB_MIN_CONNECTIONS || '2'),
            max: parseInt(process.env.DB_MAX_CONNECTIONS || '20'),
            acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000'),
            createTimeout: parseInt(process.env.DB_CREATE_TIMEOUT || '30000'),
            idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '300000')
        };
    }
    /**
     * 应用调整
     *
     * @param strategy - 调整策略
     * @param currentConfig - 当前配置
     * @param metrics - 负载指标
     * @returns 调整结果
     */
    async applyAdjustment(strategy, currentConfig, metrics) {
        const newConfig = { ...currentConfig };
        let hasChanges = false;
        // 应用连接数调整
        if (strategy.actions.connectionAdjustment) {
            const adjustment = strategy.actions.connectionAdjustment;
            if (adjustment.type === 'increase') {
                newConfig.max = Math.min(newConfig.max + adjustment.amount, adjustment.maxLimit || 50);
                hasChanges = true;
            }
            else if (adjustment.type === 'decrease') {
                newConfig.max = Math.max(newConfig.max - adjustment.amount, adjustment.minLimit || 2);
                newConfig.min = Math.min(newConfig.min, newConfig.max - 1);
                hasChanges = true;
            }
        }
        // 应用超时调整
        if (strategy.actions.timeoutAdjustment) {
            const timeouts = strategy.actions.timeoutAdjustment;
            if (timeouts.acquireTimeout) {
                newConfig.acquireTimeout = timeouts.acquireTimeout;
                hasChanges = true;
            }
            if (timeouts.createTimeout) {
                newConfig.createTimeout = timeouts.createTimeout;
                hasChanges = true;
            }
            if (timeouts.idleTimeout) {
                newConfig.idleTimeout = timeouts.idleTimeout;
                hasChanges = true;
            }
        }
        if (!hasChanges) {
            return null;
        }
        // 应用平滑因子
        const smoothedConfig = this.applySmoothingFactor(currentConfig, newConfig);
        try {
            // 这里需要实际应用配置到连接池
            // await enhancedDatabaseManager.updatePoolConfig(smoothedConfig)
            console.log(`Applied pool adjustment using strategy: ${strategy.name}`, {
                before: currentConfig,
                after: smoothedConfig
            });
            return {
                timestamp: new Date(),
                beforeConfig: currentConfig,
                afterConfig: smoothedConfig,
                strategy: strategy.name,
                reason: strategy.description,
                loadMetrics: metrics,
                result: 'success'
            };
        }
        catch (error) {
            console.error('Failed to apply pool configuration:', error);
            return {
                timestamp: new Date(),
                beforeConfig: currentConfig,
                afterConfig: smoothedConfig,
                strategy: strategy.name,
                reason: strategy.description,
                loadMetrics: metrics,
                result: 'failed'
            };
        }
    }
    /**
     * 应用平滑因子
     *
     * @param currentConfig - 当前配置
     * @param newConfig - 新配置
     * @returns 平滑后的配置
     */
    applySmoothingFactor(currentConfig, newConfig) {
        const smoothedConfig = { ...currentConfig };
        // 对数值型配置应用平滑因子
        const numericFields = ['max', 'min', 'acquireTimeout', 'createTimeout', 'idleTimeout'];
        numericFields.forEach(field => {
            if (newConfig[field] !== undefined && currentConfig[field] !== undefined) {
                const delta = newConfig[field] - currentConfig[field];
                smoothedConfig[field] = Math.round(currentConfig[field] + delta * this.smoothingFactor);
            }
        });
        return smoothedConfig;
    }
    /**
     * 记录调整历史
     *
     * @param adjustment - 调整记录
     */
    recordAdjustment(adjustment) {
        this.adjustmentHistory.push(adjustment);
        // 限制历史记录大小
        if (this.adjustmentHistory.length > 100) {
            this.adjustmentHistory.shift();
        }
    }
    /**
     * 获取调整历史
     *
     * @param limit - 限制返回数量
     * @returns 调整历史
     */
    getAdjustmentHistory(limit) {
        if (limit) {
            return this.adjustmentHistory.slice(-limit);
        }
        return [...this.adjustmentHistory];
    }
    /**
     * 获取负载指标历史
     *
     * @param limit - 限制返回数量
     * @returns 负载指标历史
     */
    getLoadMetricsHistory(limit) {
        if (limit) {
            return this.loadMetricsHistory.slice(-limit);
        }
        return [...this.loadMetricsHistory];
    }
    /**
     * 获取当前状态
     *
     * @returns 当前状态
     */
    getStatus() {
        return {
            isActive: this.isActive,
            lastAdjustment: this.lastAdjustmentTime,
            totalAdjustments: this.adjustmentHistory.length,
            currentLoadMetrics: this.loadMetricsHistory.length > 0
                ? this.loadMetricsHistory[this.loadMetricsHistory.length - 1]
                : null,
            strategies: this.strategies
        };
    }
    /**
     * 更新策略
     *
     * @param strategies - 新的策略数组
     */
    updateStrategies(strategies) {
        this.strategies = strategies;
        console.log(`Updated adjustment strategies: ${strategies.length} strategies loaded`);
        this.emit('strategies-updated', strategies);
    }
    /**
     * 生成性能报告
     *
     * @returns 性能报告
     */
    generatePerformanceReport() {
        const recentAdjustments = this.adjustmentHistory.slice(-10);
        const recentMetrics = this.loadMetricsHistory.slice(-50);
        const successfulAdjustments = recentAdjustments.filter(adj => adj.result === 'success').length;
        const avgCpuUsage = recentMetrics.reduce((sum, m) => sum + m.cpuUsage, 0) / recentMetrics.length;
        const avgMemoryUsage = recentMetrics.reduce((sum, m) => sum + m.memoryUsage, 0) / recentMetrics.length;
        const recommendations = [];
        if (avgCpuUsage > 80) {
            recommendations.push('考虑增加服务器资源或优化查询性能');
        }
        if (avgMemoryUsage > 85) {
            recommendations.push('内存使用率较高，建议优化内存使用或增加内存');
        }
        if (successfulAdjustments < recentAdjustments.length * 0.8) {
            recommendations.push('调整成功率较低，建议检查策略配置');
        }
        return {
            summary: `
动态连接池调整性能报告
========================
分析时间: ${new Date().toISOString()}
总调整次数: ${this.adjustmentHistory.length}
成功调整次数: ${successfulAdjustments}
平均CPU使用率: ${avgCpuUsage.toFixed(2)}%
平均内存使用率: ${avgMemoryUsage.toFixed(2)}%
      `.trim(),
            adjustmentStats: {
                total: this.adjustmentHistory.length,
                successful: successfulAdjustments,
                successRate: (successfulAdjustments / Math.max(1, recentAdjustments.length)) * 100
            },
            loadTrends: {
                avgCpuUsage,
                avgMemoryUsage,
                trend: this.predictionModel.predictLoadTrend(recentMetrics)
            },
            recommendations
        };
    }
}
exports.DynamicPoolAdjuster = DynamicPoolAdjuster;
// 创建全局实例
exports.dynamicPoolAdjuster = new DynamicPoolAdjuster();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,