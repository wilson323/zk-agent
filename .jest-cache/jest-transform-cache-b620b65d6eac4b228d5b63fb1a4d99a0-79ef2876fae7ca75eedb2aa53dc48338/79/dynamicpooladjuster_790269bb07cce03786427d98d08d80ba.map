{"file":"E:\\zk-agent\\lib\\database\\dynamic-pool-adjuster.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\dynamic-pool-adjuster.ts"],"sourcesContent":["/**\r\n * 负载感知的动态连接池调整器\r\n * 基于实时负载和使用模式动态调整连接池参数\r\n * \r\n * 功能:\r\n * - 实时监控系统负载和连接池使用情况\r\n * - 基于机器学习算法预测最优连接池配置\r\n * - 自动调整连接池参数以适应负载变化\r\n * - 提供平滑的扩缩容策略避免系统震荡\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { DatabaseMetrics } from './monitoring'\r\nimport { databaseMonitor } from './monitoring'\r\nimport { connectionPoolAnalyzer, PoolUsageStats, UsagePatternAnalysis } from './connection-pool-analyzer'\r\nimport { enhancedDatabaseManager } from './enhanced-database-manager'\r\n\r\n/**\r\n * 负载指标接口\r\n */\r\ninterface LoadMetrics {\r\n  /** 时间戳 */\r\n  timestamp: Date\r\n  /** CPU使用率 */\r\n  cpuUsage: number\r\n  /** 内存使用率 */\r\n  memoryUsage: number\r\n  /** 并发请求数 */\r\n  concurrentRequests: number\r\n  /** 平均响应时间 */\r\n  avgResponseTime: number\r\n  /** 错误率 */\r\n  errorRate: number\r\n  /** 吞吐量(请求/秒) */\r\n  throughput: number\r\n}\r\n\r\n/**\r\n * 调整策略接口\r\n */\r\ninterface AdjustmentStrategy {\r\n  /** 策略名称 */\r\n  name: string\r\n  /** 策略描述 */\r\n  description: string\r\n  /** 触发条件 */\r\n  triggers: {\r\n    /** CPU使用率阈值 */\r\n    cpuThreshold?: number\r\n    /** 内存使用率阈值 */\r\n    memoryThreshold?: number\r\n    /** 响应时间阈值 */\r\n    responseTimeThreshold?: number\r\n    /** 错误率阈值 */\r\n    errorRateThreshold?: number\r\n    /** 连接池使用率阈值 */\r\n    poolUtilizationThreshold?: number\r\n  }\r\n  /** 调整动作 */\r\n  actions: {\r\n    /** 连接数调整 */\r\n    connectionAdjustment?: {\r\n      type: 'increase' | 'decrease'\r\n      amount: number\r\n      maxLimit?: number\r\n      minLimit?: number\r\n    }\r\n    /** 超时调整 */\r\n    timeoutAdjustment?: {\r\n      acquireTimeout?: number\r\n      idleTimeout?: number\r\n      createTimeout?: number\r\n    }\r\n    /** 其他配置调整 */\r\n    configAdjustment?: {\r\n      reapInterval?: number\r\n      createRetryInterval?: number\r\n    }\r\n  }\r\n  /** 策略优先级 */\r\n  priority: number\r\n  /** 冷却时间(ms) */\r\n  cooldownMs: number\r\n}\r\n\r\n/**\r\n * 调整历史记录接口\r\n */\r\ninterface AdjustmentHistory {\r\n  /** 时间戳 */\r\n  timestamp: Date\r\n  /** 调整前配置 */\r\n  beforeConfig: any\r\n  /** 调整后配置 */\r\n  afterConfig: any\r\n  /** 使用的策略 */\r\n  strategy: string\r\n  /** 触发原因 */\r\n  reason: string\r\n  /** 负载指标 */\r\n  loadMetrics: LoadMetrics\r\n  /** 调整结果 */\r\n  result: 'success' | 'failed' | 'partial'\r\n  /** 性能影响 */\r\n  performanceImpact?: {\r\n    responseTimeDelta: number\r\n    throughputDelta: number\r\n    errorRateDelta: number\r\n  }\r\n}\r\n\r\n/**\r\n * 预测模型接口\r\n */\r\ninterface PredictionModel {\r\n  /** 预测最优连接数 */\r\n  predictOptimalConnections(metrics: LoadMetrics[], currentConfig: any): number\r\n  /** 预测负载趋势 */\r\n  predictLoadTrend(metrics: LoadMetrics[]): 'increasing' | 'decreasing' | 'stable'\r\n  /** 计算调整置信度 */\r\n  calculateConfidence(metrics: LoadMetrics[]): number\r\n}\r\n\r\n/**\r\n * 动态连接池调整器类\r\n */\r\nexport class DynamicPoolAdjuster extends EventEmitter {\r\n  private isActive: boolean = false\r\n  private adjustmentInterval: NodeJS.Timeout | null = null\r\n  private loadMetricsHistory: LoadMetrics[] = []\r\n  private adjustmentHistory: AdjustmentHistory[] = []\r\n  private strategies: AdjustmentStrategy[]\r\n  private predictionModel: PredictionModel\r\n  private lastAdjustmentTime: Date | null = null\r\n  private intervalMs: number\r\n  private maxHistorySize: number\r\n  private smoothingFactor: number\r\n\r\n  constructor(\r\n    intervalMs: number = 30000, // 30秒检查一次\r\n    maxHistorySize: number = 500,\r\n    smoothingFactor: number = 0.3 // 平滑因子，用于避免频繁调整\r\n  ) {\r\n    super()\r\n    this.intervalMs = intervalMs\r\n    this.maxHistorySize = maxHistorySize\r\n    this.smoothingFactor = smoothingFactor\r\n    \r\n    // 初始化策略\r\n    this.strategies = this.initializeStrategies()\r\n    \r\n    // 初始化预测模型\r\n    this.predictionModel = this.initializePredictionModel()\r\n    \r\n    // 设置监听器\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * 初始化调整策略\r\n   * \r\n   * @returns 策略数组\r\n   */\r\n  private initializeStrategies(): AdjustmentStrategy[] {\r\n    return [\r\n      {\r\n        name: 'high_load_scale_up',\r\n        description: '高负载时扩容连接池',\r\n        triggers: {\r\n          cpuThreshold: 80,\r\n          memoryThreshold: 85,\r\n          responseTimeThreshold: 2000,\r\n          poolUtilizationThreshold: 90\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'increase',\r\n            amount: 3,\r\n            maxLimit: 50\r\n          },\r\n          timeoutAdjustment: {\r\n            acquireTimeout: 90000,\r\n            createTimeout: 45000\r\n          }\r\n        },\r\n        priority: 1,\r\n        cooldownMs: 120000 // 2分钟冷却\r\n      },\r\n      {\r\n        name: 'low_load_scale_down',\r\n        description: '低负载时缩容连接池',\r\n        triggers: {\r\n          cpuThreshold: 20,\r\n          memoryThreshold: 30,\r\n          poolUtilizationThreshold: 25\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'decrease',\r\n            amount: 2,\r\n            minLimit: 3\r\n          },\r\n          timeoutAdjustment: {\r\n            idleTimeout: 180000 // 3分钟空闲超时\r\n          }\r\n        },\r\n        priority: 3,\r\n        cooldownMs: 300000 // 5分钟冷却\r\n      },\r\n      {\r\n        name: 'high_error_rate_recovery',\r\n        description: '高错误率时的恢复策略',\r\n        triggers: {\r\n          errorRateThreshold: 5\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'decrease',\r\n            amount: 1,\r\n            minLimit: 2\r\n          },\r\n          timeoutAdjustment: {\r\n            createTimeout: 60000,\r\n            acquireTimeout: 120000\r\n          },\r\n          configAdjustment: {\r\n            createRetryInterval: 1000\r\n          }\r\n        },\r\n        priority: 2,\r\n        cooldownMs: 180000 // 3分钟冷却\r\n      },\r\n      {\r\n        name: 'burst_traffic_handling',\r\n        description: '突发流量处理',\r\n        triggers: {\r\n          responseTimeThreshold: 1500,\r\n          poolUtilizationThreshold: 85\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'increase',\r\n            amount: 5,\r\n            maxLimit: 40\r\n          },\r\n          timeoutAdjustment: {\r\n            acquireTimeout: 60000\r\n          }\r\n        },\r\n        priority: 1,\r\n        cooldownMs: 90000 // 1.5分钟冷却\r\n      },\r\n      {\r\n        name: 'memory_pressure_optimization',\r\n        description: '内存压力优化',\r\n        triggers: {\r\n          memoryThreshold: 90\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'decrease',\r\n            amount: 3,\r\n            minLimit: 2\r\n          },\r\n          timeoutAdjustment: {\r\n            idleTimeout: 120000 // 2分钟空闲超时\r\n          },\r\n          configAdjustment: {\r\n            reapInterval: 500 // 更频繁的连接回收\r\n          }\r\n        },\r\n        priority: 2,\r\n        cooldownMs: 240000 // 4分钟冷却\r\n      }\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * 初始化预测模型\r\n   * \r\n   * @returns 预测模型实例\r\n   */\r\n  private initializePredictionModel(): PredictionModel {\r\n    return {\r\n      predictOptimalConnections: (metrics: LoadMetrics[], currentConfig: any): number => {\r\n        if (metrics.length < 5) {\r\n          return currentConfig.max || 10\r\n        }\r\n\r\n        // 简单的线性回归预测\r\n        const recentMetrics = metrics.slice(-10)\r\n        const avgCpu = recentMetrics.reduce((sum, m) => sum + m.cpuUsage, 0) / recentMetrics.length\r\n        const avgMemory = recentMetrics.reduce((sum, m) => sum + m.memoryUsage, 0) / recentMetrics.length\r\n        const avgConcurrent = recentMetrics.reduce((sum, m) => sum + m.concurrentRequests, 0) / recentMetrics.length\r\n\r\n        // 基于负载计算最优连接数\r\n        let optimalConnections = Math.ceil(avgConcurrent * 1.2)\r\n        \r\n        // 根据CPU和内存使用率调整\r\n        if (avgCpu > 70 || avgMemory > 80) {\r\n          optimalConnections = Math.min(optimalConnections, currentConfig.max * 0.8)\r\n        } else if (avgCpu < 30 && avgMemory < 50) {\r\n          optimalConnections = Math.max(optimalConnections, currentConfig.min || 2)\r\n        }\r\n\r\n        return Math.max(2, Math.min(50, optimalConnections))\r\n      },\r\n\r\n      predictLoadTrend: (metrics: LoadMetrics[]): 'increasing' | 'decreasing' | 'stable' => {\r\n        if (metrics.length < 3) {\r\n          return 'stable'\r\n        }\r\n\r\n        const recent = metrics.slice(-3)\r\n        const throughputTrend = recent[2].throughput - recent[0].throughput\r\n        const cpuTrend = recent[2].cpuUsage - recent[0].cpuUsage\r\n\r\n        if (throughputTrend > 10 || cpuTrend > 15) {\r\n          return 'increasing'\r\n        } else if (throughputTrend < -10 || cpuTrend < -15) {\r\n          return 'decreasing'\r\n        } else {\r\n          return 'stable'\r\n        }\r\n      },\r\n\r\n      calculateConfidence: (metrics: LoadMetrics[]): number => {\r\n        if (metrics.length < 5) {\r\n          return 0.3\r\n        }\r\n\r\n        // 基于数据一致性计算置信度\r\n        const recent = metrics.slice(-5)\r\n        const cpuVariance = this.calculateVariance(recent.map(m => m.cpuUsage))\r\n        const memoryVariance = this.calculateVariance(recent.map(m => m.memoryUsage))\r\n        \r\n        // 方差越小，置信度越高\r\n        const confidence = Math.max(0.1, Math.min(1.0, 1 - (cpuVariance + memoryVariance) / 200))\r\n        return confidence\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算方差\r\n   * \r\n   * @param values - 数值数组\r\n   * @returns 方差\r\n   */\r\n  private calculateVariance(values: number[]): number {\r\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length\r\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length\r\n    return variance\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听数据库监控事件\r\n    databaseMonitor.on('metrics', (metrics: DatabaseMetrics) => {\r\n      this.collectLoadMetrics(metrics)\r\n    })\r\n\r\n    // 监听连接池分析器事件\r\n    connectionPoolAnalyzer.on('analysis-complete', (data) => {\r\n      this.handleAnalysisComplete(data)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 收集负载指标\r\n   * \r\n   * @param dbMetrics - 数据库监控指标\r\n   */\r\n  private collectLoadMetrics(dbMetrics: DatabaseMetrics): void {\r\n    const loadMetrics: LoadMetrics = {\r\n      timestamp: new Date(),\r\n      cpuUsage: dbMetrics.cpuUsage.user + dbMetrics.cpuUsage.system,\r\n      memoryUsage: (dbMetrics.memoryUsage.heapUsed / dbMetrics.memoryUsage.heapTotal) * 100,\r\n      concurrentRequests: dbMetrics.activeConnections || 0,\r\n      avgResponseTime: dbMetrics.avgLatency || 0,\r\n      errorRate: ((dbMetrics.totalQueries - dbMetrics.successfulQueries) / Math.max(1, dbMetrics.totalQueries)) * 100,\r\n      throughput: dbMetrics.totalQueries / Math.max(1, (Date.now() - dbMetrics.timestamp.getTime()) / 1000)\r\n    }\r\n\r\n    this.loadMetricsHistory.push(loadMetrics)\r\n\r\n    // 限制历史记录大小\r\n    if (this.loadMetricsHistory.length > this.maxHistorySize) {\r\n      this.loadMetricsHistory.shift()\r\n    }\r\n\r\n    this.emit('load-metrics', loadMetrics)\r\n  }\r\n\r\n  /**\r\n   * 处理分析完成事件\r\n   * \r\n   * @param data - 分析数据\r\n   */\r\n  private handleAnalysisComplete(data: any): void {\r\n    // 基于分析结果触发调整\r\n    if (data.recommendations && data.recommendations.length > 0) {\r\n      const highPriorityRecommendations = data.recommendations.filter(\r\n        (rec: any) => rec.priority === 'high'\r\n      )\r\n      \r\n      if (highPriorityRecommendations.length > 0) {\r\n        this.triggerAdjustment('analysis_recommendation')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始动态调整\r\n   */\r\n  start(): void {\r\n    if (this.isActive) {\r\n      console.log('Dynamic pool adjuster is already active')\r\n      return\r\n    }\r\n\r\n    console.log(`Starting dynamic pool adjustment (interval: ${this.intervalMs}ms)`)\r\n    this.isActive = true\r\n\r\n    // 启动连接池分析器\r\n    connectionPoolAnalyzer.startAnalysis()\r\n\r\n    this.adjustmentInterval = setInterval(() => {\r\n      this.performAdjustment()\r\n    }, this.intervalMs)\r\n\r\n    // 立即执行一次检查\r\n    this.performAdjustment()\r\n  }\r\n\r\n  /**\r\n   * 停止动态调整\r\n   */\r\n  stop(): void {\r\n    if (!this.isActive) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping dynamic pool adjustment')\r\n    this.isActive = false\r\n\r\n    if (this.adjustmentInterval) {\r\n      clearInterval(this.adjustmentInterval)\r\n      this.adjustmentInterval = null\r\n    }\r\n\r\n    // 停止连接池分析器\r\n    connectionPoolAnalyzer.stopAnalysis()\r\n  }\r\n\r\n  /**\r\n   * 触发立即调整\r\n   * \r\n   * @param reason - 触发原因\r\n   */\r\n  triggerAdjustment(reason: string): void {\r\n    console.log(`Triggering immediate pool adjustment: ${reason}`)\r\n    this.performAdjustment()\r\n  }\r\n\r\n  /**\r\n   * 执行调整\r\n   */\r\n  private async performAdjustment(): Promise<void> {\r\n    if (this.loadMetricsHistory.length < 3) {\r\n      // 数据不足，无法进行调整\r\n      return\r\n    }\r\n\r\n    try {\r\n      const currentMetrics = this.loadMetricsHistory[this.loadMetricsHistory.length - 1]\r\n      const triggeredStrategies = this.findTriggeredStrategies(currentMetrics)\r\n\r\n      if (triggeredStrategies.length === 0) {\r\n        return\r\n      }\r\n\r\n      // 选择优先级最高的策略\r\n      const strategy = triggeredStrategies.sort((a, b) => a.priority - b.priority)[0]\r\n\r\n      // 检查冷却时间\r\n      if (this.isInCooldown(strategy)) {\r\n        return\r\n      }\r\n\r\n      // 获取当前配置\r\n      const currentConfig = await this.getCurrentPoolConfig()\r\n      \r\n      // 计算调整置信度\r\n      const confidence = this.predictionModel.calculateConfidence(this.loadMetricsHistory)\r\n      \r\n      if (confidence < 0.5) {\r\n        console.log(`Skipping adjustment due to low confidence: ${confidence.toFixed(2)}`)\r\n        return\r\n      }\r\n\r\n      // 应用调整\r\n      const adjustmentResult = await this.applyAdjustment(strategy, currentConfig, currentMetrics)\r\n      \r\n      if (adjustmentResult) {\r\n        this.recordAdjustment(adjustmentResult)\r\n        this.lastAdjustmentTime = new Date()\r\n        this.emit('adjustment-applied', adjustmentResult)\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error during dynamic pool adjustment:', error)\r\n      this.emit('adjustment-error', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 查找被触发的策略\r\n   * \r\n   * @param metrics - 当前负载指标\r\n   * @returns 被触发的策略数组\r\n   */\r\n  private findTriggeredStrategies(metrics: LoadMetrics): AdjustmentStrategy[] {\r\n    return this.strategies.filter(strategy => {\r\n      const triggers = strategy.triggers\r\n      \r\n      // 检查CPU阈值\r\n      if (triggers.cpuThreshold !== undefined && metrics.cpuUsage < triggers.cpuThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查内存阈值\r\n      if (triggers.memoryThreshold !== undefined && metrics.memoryUsage < triggers.memoryThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查响应时间阈值\r\n      if (triggers.responseTimeThreshold !== undefined && metrics.avgResponseTime < triggers.responseTimeThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查错误率阈值\r\n      if (triggers.errorRateThreshold !== undefined && metrics.errorRate < triggers.errorRateThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查连接池使用率阈值\r\n      if (triggers.poolUtilizationThreshold !== undefined) {\r\n        const currentStats = connectionPoolAnalyzer.getCurrentStats()\r\n        if (!currentStats || currentStats.utilizationRate < triggers.poolUtilizationThreshold) {\r\n          return false\r\n        }\r\n      }\r\n      \r\n      return true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 检查是否在冷却期内\r\n   * \r\n   * @param strategy - 策略\r\n   * @returns 是否在冷却期\r\n   */\r\n  private isInCooldown(strategy: AdjustmentStrategy): boolean {\r\n    if (!this.lastAdjustmentTime) {\r\n      return false\r\n    }\r\n    \r\n    const timeSinceLastAdjustment = Date.now() - this.lastAdjustmentTime.getTime()\r\n    return timeSinceLastAdjustment < strategy.cooldownMs\r\n  }\r\n\r\n  /**\r\n   * 获取当前连接池配置\r\n   * \r\n   * @returns 当前配置\r\n   */\r\n  private async getCurrentPoolConfig(): Promise<any> {\r\n    // 这里需要从实际的连接池获取配置\r\n    // 暂时返回默认配置\r\n    return {\r\n      min: parseInt(process.env.DB_MIN_CONNECTIONS || '2'),\r\n      max: parseInt(process.env.DB_MAX_CONNECTIONS || '20'),\r\n      acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000'),\r\n      createTimeout: parseInt(process.env.DB_CREATE_TIMEOUT || '30000'),\r\n      idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '300000')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用调整\r\n   * \r\n   * @param strategy - 调整策略\r\n   * @param currentConfig - 当前配置\r\n   * @param metrics - 负载指标\r\n   * @returns 调整结果\r\n   */\r\n  private async applyAdjustment(\r\n    strategy: AdjustmentStrategy,\r\n    currentConfig: any,\r\n    metrics: LoadMetrics\r\n  ): Promise<AdjustmentHistory | null> {\r\n    const newConfig = { ...currentConfig }\r\n    let hasChanges = false\r\n\r\n    // 应用连接数调整\r\n    if (strategy.actions.connectionAdjustment) {\r\n      const adjustment = strategy.actions.connectionAdjustment\r\n      \r\n      if (adjustment.type === 'increase') {\r\n        newConfig.max = Math.min(\r\n          newConfig.max + adjustment.amount,\r\n          adjustment.maxLimit || 50\r\n        )\r\n        hasChanges = true\r\n      } else if (adjustment.type === 'decrease') {\r\n        newConfig.max = Math.max(\r\n          newConfig.max - adjustment.amount,\r\n          adjustment.minLimit || 2\r\n        )\r\n        newConfig.min = Math.min(newConfig.min, newConfig.max - 1)\r\n        hasChanges = true\r\n      }\r\n    }\r\n\r\n    // 应用超时调整\r\n    if (strategy.actions.timeoutAdjustment) {\r\n      const timeouts = strategy.actions.timeoutAdjustment\r\n      \r\n      if (timeouts.acquireTimeout) {\r\n        newConfig.acquireTimeout = timeouts.acquireTimeout\r\n        hasChanges = true\r\n      }\r\n      \r\n      if (timeouts.createTimeout) {\r\n        newConfig.createTimeout = timeouts.createTimeout\r\n        hasChanges = true\r\n      }\r\n      \r\n      if (timeouts.idleTimeout) {\r\n        newConfig.idleTimeout = timeouts.idleTimeout\r\n        hasChanges = true\r\n      }\r\n    }\r\n\r\n    if (!hasChanges) {\r\n      return null\r\n    }\r\n\r\n    // 应用平滑因子\r\n    const smoothedConfig = this.applySmoothingFactor(currentConfig, newConfig)\r\n\r\n    try {\r\n      // 这里需要实际应用配置到连接池\r\n      // await enhancedDatabaseManager.updatePoolConfig(smoothedConfig)\r\n      \r\n      console.log(`Applied pool adjustment using strategy: ${strategy.name}`, {\r\n        before: currentConfig,\r\n        after: smoothedConfig\r\n      })\r\n\r\n      return {\r\n        timestamp: new Date(),\r\n        beforeConfig: currentConfig,\r\n        afterConfig: smoothedConfig,\r\n        strategy: strategy.name,\r\n        reason: strategy.description,\r\n        loadMetrics: metrics,\r\n        result: 'success'\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Failed to apply pool configuration:', error)\r\n      \r\n      return {\r\n        timestamp: new Date(),\r\n        beforeConfig: currentConfig,\r\n        afterConfig: smoothedConfig,\r\n        strategy: strategy.name,\r\n        reason: strategy.description,\r\n        loadMetrics: metrics,\r\n        result: 'failed'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用平滑因子\r\n   * \r\n   * @param currentConfig - 当前配置\r\n   * @param newConfig - 新配置\r\n   * @returns 平滑后的配置\r\n   */\r\n  private applySmoothingFactor(currentConfig: any, newConfig: any): any {\r\n    const smoothedConfig = { ...currentConfig }\r\n    \r\n    // 对数值型配置应用平滑因子\r\n    const numericFields = ['max', 'min', 'acquireTimeout', 'createTimeout', 'idleTimeout']\r\n    \r\n    numericFields.forEach(field => {\r\n      if (newConfig[field] !== undefined && currentConfig[field] !== undefined) {\r\n        const delta = newConfig[field] - currentConfig[field]\r\n        smoothedConfig[field] = Math.round(currentConfig[field] + delta * this.smoothingFactor)\r\n      }\r\n    })\r\n    \r\n    return smoothedConfig\r\n  }\r\n\r\n  /**\r\n   * 记录调整历史\r\n   * \r\n   * @param adjustment - 调整记录\r\n   */\r\n  private recordAdjustment(adjustment: AdjustmentHistory): void {\r\n    this.adjustmentHistory.push(adjustment)\r\n    \r\n    // 限制历史记录大小\r\n    if (this.adjustmentHistory.length > 100) {\r\n      this.adjustmentHistory.shift()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取调整历史\r\n   * \r\n   * @param limit - 限制返回数量\r\n   * @returns 调整历史\r\n   */\r\n  getAdjustmentHistory(limit?: number): AdjustmentHistory[] {\r\n    if (limit) {\r\n      return this.adjustmentHistory.slice(-limit)\r\n    }\r\n    return [...this.adjustmentHistory]\r\n  }\r\n\r\n  /**\r\n   * 获取负载指标历史\r\n   * \r\n   * @param limit - 限制返回数量\r\n   * @returns 负载指标历史\r\n   */\r\n  getLoadMetricsHistory(limit?: number): LoadMetrics[] {\r\n    if (limit) {\r\n      return this.loadMetricsHistory.slice(-limit)\r\n    }\r\n    return [...this.loadMetricsHistory]\r\n  }\r\n\r\n  /**\r\n   * 获取当前状态\r\n   * \r\n   * @returns 当前状态\r\n   */\r\n  getStatus(): {\r\n    isActive: boolean\r\n    lastAdjustment: Date | null\r\n    totalAdjustments: number\r\n    currentLoadMetrics: LoadMetrics | null\r\n    strategies: AdjustmentStrategy[]\r\n  } {\r\n    return {\r\n      isActive: this.isActive,\r\n      lastAdjustment: this.lastAdjustmentTime,\r\n      totalAdjustments: this.adjustmentHistory.length,\r\n      currentLoadMetrics: this.loadMetricsHistory.length > 0 \r\n        ? this.loadMetricsHistory[this.loadMetricsHistory.length - 1] \r\n        : null,\r\n      strategies: this.strategies\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新策略\r\n   * \r\n   * @param strategies - 新的策略数组\r\n   */\r\n  updateStrategies(strategies: AdjustmentStrategy[]): void {\r\n    this.strategies = strategies\r\n    console.log(`Updated adjustment strategies: ${strategies.length} strategies loaded`)\r\n    this.emit('strategies-updated', strategies)\r\n  }\r\n\r\n  /**\r\n   * 生成性能报告\r\n   * \r\n   * @returns 性能报告\r\n   */\r\n  generatePerformanceReport(): {\r\n    summary: string\r\n    adjustmentStats: any\r\n    loadTrends: any\r\n    recommendations: string[]\r\n  } {\r\n    const recentAdjustments = this.adjustmentHistory.slice(-10)\r\n    const recentMetrics = this.loadMetricsHistory.slice(-50)\r\n    \r\n    const successfulAdjustments = recentAdjustments.filter(adj => adj.result === 'success').length\r\n    const avgCpuUsage = recentMetrics.reduce((sum, m) => sum + m.cpuUsage, 0) / recentMetrics.length\r\n    const avgMemoryUsage = recentMetrics.reduce((sum, m) => sum + m.memoryUsage, 0) / recentMetrics.length\r\n    \r\n    const recommendations = []\r\n    \r\n    if (avgCpuUsage > 80) {\r\n      recommendations.push('考虑增加服务器资源或优化查询性能')\r\n    }\r\n    \r\n    if (avgMemoryUsage > 85) {\r\n      recommendations.push('内存使用率较高，建议优化内存使用或增加内存')\r\n    }\r\n    \r\n    if (successfulAdjustments < recentAdjustments.length * 0.8) {\r\n      recommendations.push('调整成功率较低，建议检查策略配置')\r\n    }\r\n    \r\n    return {\r\n      summary: `\r\n动态连接池调整性能报告\r\n========================\r\n分析时间: ${new Date().toISOString()}\r\n总调整次数: ${this.adjustmentHistory.length}\r\n成功调整次数: ${successfulAdjustments}\r\n平均CPU使用率: ${avgCpuUsage.toFixed(2)}%\r\n平均内存使用率: ${avgMemoryUsage.toFixed(2)}%\r\n      `.trim(),\r\n      adjustmentStats: {\r\n        total: this.adjustmentHistory.length,\r\n        successful: successfulAdjustments,\r\n        successRate: (successfulAdjustments / Math.max(1, recentAdjustments.length)) * 100\r\n      },\r\n      loadTrends: {\r\n        avgCpuUsage,\r\n        avgMemoryUsage,\r\n        trend: this.predictionModel.predictLoadTrend(recentMetrics)\r\n      },\r\n      recommendations\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const dynamicPoolAdjuster = new DynamicPoolAdjuster()\r\n\r\n// 导出类型\r\nexport type {\r\n  LoadMetrics,\r\n  AdjustmentStrategy,\r\n  AdjustmentHistory,\r\n  PredictionModel\r\n}\r\n"],"version":3}