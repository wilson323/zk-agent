{"file":"E:\\zk-agent\\__tests__\\lib\\storage\\real-cloud-storage-adapter.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\storage\\real-cloud-storage-adapter.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/storage/real-cloud-storage-adapter.test.ts\r\n * @description 真实云存储适配器测试 - 无模拟数据的真实测试\r\n * @author B团队测试工程师\r\n * @lastUpdate 2024-12-19\r\n */\r\n\r\nimport { \r\n  RealCloudStorageAdapter, \r\n  CloudProvider,\r\n  realCloudStorageAdapter,\r\n  uploadFile,\r\n  downloadFile,\r\n  deleteFile,\r\n  fileExists,\r\n  getFileInfo,\r\n  listFiles,\r\n  getSignedUrl\r\n} from '@/lib/storage/real-cloud-storage-adapter';\r\nimport { Logger } from '@/lib/utils/logger';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n// 测试配置\r\nconst TEST_UPLOAD_DIR = path.join(process.cwd(), 'test-uploads');\r\nconst TEST_FILE_KEY = 'test-files/sample.txt';\r\nconst TEST_FILE_CONTENT = Buffer.from('This is a test file for real cloud storage adapter');\r\n\r\ndescribe('RealCloudStorageAdapter', () => {\r\n  let adapter: RealCloudStorageAdapter;\r\n\r\n  beforeAll(async () => {\r\n    // 设置测试环境变量\r\n    process.env.UPLOAD_DIR = TEST_UPLOAD_DIR;\r\n    \r\n    // 确保测试目录存在\r\n    if (!fs.existsSync(TEST_UPLOAD_DIR)) {\r\n      fs.mkdirSync(TEST_UPLOAD_DIR, { recursive: true });\r\n    }\r\n\r\n    adapter = RealCloudStorageAdapter.getInstance();\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // 清理测试文件\r\n    try {\r\n      if (fs.existsSync(TEST_UPLOAD_DIR)) {\r\n        fs.rmSync(TEST_UPLOAD_DIR, { recursive: true, force: true });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to cleanup test directory:', error.message);\r\n    }\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    // 清理可能存在的测试文件\r\n    try {\r\n      await adapter.delete(TEST_FILE_KEY);\r\n    } catch (error) {\r\n      // 忽略删除不存在文件的错误\r\n    }\r\n  });\r\n\r\n  describe('单例模式', () => {\r\n    it('应该返回同一个实例', () => {\r\n      const instance1 = RealCloudStorageAdapter.getInstance();\r\n      const instance2 = RealCloudStorageAdapter.getInstance();\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n\r\n    it('应该与导出的单例实例相同', () => {\r\n      const instance = RealCloudStorageAdapter.getInstance();\r\n      expect(instance).toBe(realCloudStorageAdapter);\r\n    });\r\n  });\r\n\r\n  describe('本地存储功能', () => {\r\n    it('应该成功上传文件到本地存储', async () => {\r\n      const result = await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      expect(result).toMatchObject({\r\n        key: TEST_FILE_KEY,\r\n        size: TEST_FILE_CONTENT.length,\r\n      });\r\n      expect(result.url).toContain('file://');\r\n      expect(result.etag).toBeDefined();\r\n      expect(typeof result.etag).toBe('string');\r\n    });\r\n\r\n    it('应该成功下载已上传的文件', async () => {\r\n      // 先上传文件\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 然后下载文件\r\n      const downloadedContent = await adapter.download({\r\n        key: TEST_FILE_KEY,\r\n      });\r\n\r\n      expect(downloadedContent).toEqual(TEST_FILE_CONTENT);\r\n    });\r\n\r\n    it('应该正确检查文件是否存在', async () => {\r\n      // 检查不存在的文件\r\n      const existsBefore = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsBefore).toBe(false);\r\n\r\n      // 上传文件\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 检查存在的文件\r\n      const existsAfter = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsAfter).toBe(true);\r\n    });\r\n\r\n    it('应该成功删除文件', async () => {\r\n      // 先上传文件\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 确认文件存在\r\n      const existsBefore = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsBefore).toBe(true);\r\n\r\n      // 删除文件\r\n      await adapter.delete(TEST_FILE_KEY);\r\n\r\n      // 确认文件已删除\r\n      const existsAfter = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsAfter).toBe(false);\r\n    });\r\n\r\n    it('应该获取正确的文件信息', async () => {\r\n      // 上传文件\r\n      const uploadResult = await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 获取文件信息\r\n      const fileInfo = await adapter.getFileInfo(TEST_FILE_KEY);\r\n\r\n      expect(fileInfo).toMatchObject({\r\n        key: TEST_FILE_KEY,\r\n        size: TEST_FILE_CONTENT.length,\r\n        etag: uploadResult.etag,\r\n      });\r\n             expect(fileInfo.lastModified).toBeDefined();\r\n       expect(fileInfo.lastModified instanceof Date).toBe(true);\r\n      expect(fileInfo.url).toContain('file://');\r\n    });\r\n\r\n    it('应该列出文件', async () => {\r\n      // 上传多个测试文件\r\n      const testFiles = [\r\n        { key: 'test-files/file1.txt', content: Buffer.from('File 1 content') },\r\n        { key: 'test-files/file2.txt', content: Buffer.from('File 2 content') },\r\n        { key: 'other/file3.txt', content: Buffer.from('File 3 content') },\r\n      ];\r\n\r\n      for (const file of testFiles) {\r\n        await adapter.upload(file.content, {\r\n          key: file.key,\r\n          contentType: 'text/plain',\r\n        });\r\n      }\r\n\r\n      // 列出所有文件\r\n      const allFiles = await adapter.listFiles();\r\n      expect(allFiles.length).toBeGreaterThanOrEqual(testFiles.length);\r\n\r\n      // 列出特定前缀的文件\r\n      const testPrefixFiles = await adapter.listFiles('test-files/');\r\n      expect(testPrefixFiles.length).toBe(2);\r\n      expect(testPrefixFiles.every(file => file.key.startsWith('test-files/'))).toBe(true);\r\n\r\n      // 清理测试文件\r\n      for (const file of testFiles) {\r\n        await adapter.delete(file.key);\r\n      }\r\n    });\r\n\r\n    it('应该生成签名URL', async () => {\r\n      const signedUrl = await adapter.getSignedUrl(TEST_FILE_KEY, 'get');\r\n      expect(signedUrl).toContain('file://');\r\n      expect(signedUrl).toContain(TEST_FILE_KEY);\r\n    });\r\n\r\n    it('应该获取存储统计信息', async () => {\r\n      // 上传一些测试文件\r\n      const testFiles = [\r\n        { key: 'stats-test/file1.txt', content: Buffer.from('Content 1') },\r\n        { key: 'stats-test/file2.txt', content: Buffer.from('Content 2') },\r\n      ];\r\n\r\n      for (const file of testFiles) {\r\n        await adapter.upload(file.content, {\r\n          key: file.key,\r\n          contentType: 'text/plain',\r\n        });\r\n      }\r\n\r\n      const stats = await adapter.getStats();\r\n      expect(stats).toMatchObject({\r\n        totalFiles: expect.any(Number),\r\n        totalSize: expect.any(Number),\r\n        usedQuota: expect.any(Number),\r\n        availableQuota: expect.any(Number),\r\n      });\r\n      expect(stats.totalFiles).toBeGreaterThanOrEqual(testFiles.length);\r\n      expect(stats.totalSize).toBeGreaterThan(0);\r\n\r\n      // 清理测试文件\r\n      for (const file of testFiles) {\r\n        await adapter.delete(file.key);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理下载不存在文件的情况', async () => {\r\n      await expect(adapter.download({\r\n        key: 'non-existent-file.txt',\r\n      })).rejects.toThrow();\r\n    });\r\n\r\n    it('应该处理获取不存在文件信息的情况', async () => {\r\n      await expect(adapter.getFileInfo('non-existent-file.txt')).rejects.toThrow();\r\n    });\r\n\r\n    it('应该安全处理删除不存在文件的情况', async () => {\r\n      // 删除不存在的文件不应该抛出错误\r\n      await expect(adapter.delete('non-existent-file.txt')).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('便捷方法', () => {\r\n    it('uploadFile 方法应该正常工作', async () => {\r\n      const result = await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      expect(result.key).toBe(TEST_FILE_KEY);\r\n      expect(result.size).toBe(TEST_FILE_CONTENT.length);\r\n    });\r\n\r\n    it('downloadFile 方法应该正常工作', async () => {\r\n      // 先上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 然后下载文件\r\n      const content = await downloadFile({ key: TEST_FILE_KEY });\r\n      expect(content).toEqual(TEST_FILE_CONTENT);\r\n    });\r\n\r\n    it('fileExists 方法应该正常工作', async () => {\r\n      // 检查不存在的文件\r\n      const existsBefore = await fileExists(TEST_FILE_KEY);\r\n      expect(existsBefore).toBe(false);\r\n\r\n      // 上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 检查存在的文件\r\n      const existsAfter = await fileExists(TEST_FILE_KEY);\r\n      expect(existsAfter).toBe(true);\r\n    });\r\n\r\n    it('deleteFile 方法应该正常工作', async () => {\r\n      // 先上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 删除文件\r\n      await deleteFile(TEST_FILE_KEY);\r\n\r\n      // 确认文件已删除\r\n      const exists = await fileExists(TEST_FILE_KEY);\r\n      expect(exists).toBe(false);\r\n    });\r\n\r\n    it('getFileInfo 方法应该正常工作', async () => {\r\n      // 先上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 获取文件信息\r\n      const info = await getFileInfo(TEST_FILE_KEY);\r\n      expect(info.key).toBe(TEST_FILE_KEY);\r\n      expect(info.size).toBe(TEST_FILE_CONTENT.length);\r\n    });\r\n\r\n    it('listFiles 方法应该正常工作', async () => {\r\n      // 上传测试文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 列出文件\r\n      const files = await listFiles('test-files/');\r\n      expect(files.length).toBeGreaterThanOrEqual(1);\r\n      expect(files.some(file => file.key === TEST_FILE_KEY)).toBe(true);\r\n    });\r\n\r\n    it('getSignedUrl 方法应该正常工作', async () => {\r\n      const url = await getSignedUrl(TEST_FILE_KEY, 'get');\r\n      expect(url).toContain('file://');\r\n      expect(url).toContain(TEST_FILE_KEY);\r\n    });\r\n  });\r\n\r\n  describe('AWS S3 集成检查', () => {\r\n    it('应该在没有AWS凭证时使用本地存储', () => {\r\n      // 确保没有设置AWS环境变量\r\n      delete process.env.AWS_ACCESS_KEY_ID;\r\n      delete process.env.AWS_SECRET_ACCESS_KEY;\r\n\r\n      // 创建新实例应该默认使用本地存储\r\n      const newAdapter = new (RealCloudStorageAdapter as any)();\r\n      expect(newAdapter).toBeDefined();\r\n    });\r\n\r\n    it('应该在有AWS凭证时尝试初始化AWS S3', () => {\r\n      // 设置模拟的AWS环境变量\r\n      process.env.AWS_ACCESS_KEY_ID = 'test-key';\r\n      process.env.AWS_SECRET_ACCESS_KEY = 'test-secret';\r\n      process.env.AWS_REGION = 'us-east-1';\r\n      process.env.AWS_S3_BUCKET = 'test-bucket';\r\n\r\n      // 由于没有真实的AWS SDK，这应该会回退到本地存储\r\n      const newAdapter = new (RealCloudStorageAdapter as any)();\r\n      expect(newAdapter).toBeDefined();\r\n\r\n      // 清理环境变量\r\n      delete process.env.AWS_ACCESS_KEY_ID;\r\n      delete process.env.AWS_SECRET_ACCESS_KEY;\r\n      delete process.env.AWS_REGION;\r\n      delete process.env.AWS_S3_BUCKET;\r\n    });\r\n  });\r\n\r\n  describe('性能测试', () => {\r\n    it('应该在合理时间内完成文件操作', async () => {\r\n      const startTime = Date.now();\r\n\r\n      // 执行一系列文件操作\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      const exists = await adapter.exists(TEST_FILE_KEY);\r\n      expect(exists).toBe(true);\r\n\r\n      const content = await adapter.download({ key: TEST_FILE_KEY });\r\n      expect(content).toEqual(TEST_FILE_CONTENT);\r\n\r\n      await adapter.delete(TEST_FILE_KEY);\r\n\r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 所有操作应该在5秒内完成\r\n      expect(duration).toBeLessThan(5000);\r\n    });\r\n\r\n    it('应该高效处理多个小文件', async () => {\r\n      const fileCount = 10;\r\n      const files = Array.from({ length: fileCount }, (_, i) => ({\r\n        key: `perf-test/file-${i}.txt`,\r\n        content: Buffer.from(`Content for file ${i}`),\r\n      }));\r\n\r\n      const startTime = Date.now();\r\n\r\n      // 并发上传文件\r\n      await Promise.all(files.map(file => \r\n        adapter.upload(file.content, {\r\n          key: file.key,\r\n          contentType: 'text/plain',\r\n        })\r\n      ));\r\n\r\n      // 并发下载文件\r\n      const downloadedContents = await Promise.all(files.map(file =>\r\n        adapter.download({ key: file.key })\r\n      ));\r\n\r\n      // 验证下载的内容\r\n      downloadedContents.forEach((content, i) => {\r\n        expect(content).toEqual(files[i].content);\r\n      });\r\n\r\n      // 清理文件\r\n      await Promise.all(files.map(file => adapter.delete(file.key)));\r\n\r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 操作应该在合理时间内完成\r\n      expect(duration).toBeLessThan(10000);\r\n    });\r\n  });\r\n}); "],"version":3}