{"version":3,"names":["cov_1sprm22u6r","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","withPerformanceMonitoring","logger_1","require","PerformanceMonitor","constructor","metrics","Map","qpsCounter","logger","Logger","THRESHOLDS","API_RESPONSE_TIME","QPS_LIMIT","MEMORY_LIMIT","CPU_LIMIT","getInstance","instance","middleware","request","handler","requestId","generateRequestId","startTime","Date","now","startCpuUsage","process","cpuUsage","recordRequestStart","checkQpsLimit","response","endTime","duration","endCpuUsage","recordRequestEnd","headers","set","getCurrentQps","toString","error","recordError","currentQps","warn","limit","Error","updateQpsCounter","info","method","url","userAgent","get","ip","getClientIp","memoryUsage","statusCode","status","checkPerformanceThresholds","logLevel","log","memoryUsed","Math","round","heapUsed","size","oldestKey","keys","next","value","delete","message","stack","sendErrorMetrics","sendAlert","threshold","windowSize","filter","metric","timestamp","push","count","length","random","substr","data","fetch","body","JSON","stringify","toISOString","err","getPerformanceStats","recentMetrics","Array","from","values","m","totalRequests","averageResponseTime","errorRate","reduce","sum","errorCount","uptime","performanceMonitor","args","req"],"sources":["E:\\zk-agent\\lib\\middleware\\performance-monitor.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file lib/middleware/performance-monitor.ts\r\n * @description 统一性能监控中间件 - B团队核心组件\r\n * @author B团队后端架构师\r\n * @lastUpdate 2024-12-19\r\n * @performance API响应≤500ms，并发≥1000 QPS\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { Logger } from '@/lib/utils/logger';\r\n\r\ninterface PerformanceMetrics {\r\n  requestId: string;\r\n  method: string;\r\n  url: string;\r\n  startTime: number;\r\n  endTime: number;\r\n  duration: number;\r\n  statusCode: number;\r\n  userAgent?: string;\r\n  ip?: string;\r\n  memoryUsage: NodeJS.MemoryUsage;\r\n  cpuUsage: NodeJS.CpuUsage;\r\n}\r\n\r\ninterface QpsMetrics {\r\n  timestamp: number;\r\n  count: number;\r\n  windowSize: number; // 时间窗口大小（秒）\r\n}\r\n\r\nclass PerformanceMonitor {\r\n  private static instance: PerformanceMonitor;\r\n  private metrics: Map<string, PerformanceMetrics> = new Map();\r\n  private qpsCounter: QpsMetrics[] = [];\r\n  private logger = new Logger('PerformanceMonitor');\r\n  \r\n  // 性能阈值配置\r\n  private readonly THRESHOLDS = {\r\n    API_RESPONSE_TIME: 500, // 500ms\r\n    QPS_LIMIT: 1000, // 1000 QPS\r\n    MEMORY_LIMIT: 1024 * 1024 * 1024, // 1GB\r\n    CPU_LIMIT: 80, // 80%\r\n  };\r\n\r\n  public static getInstance(): PerformanceMonitor {\r\n    if (!PerformanceMonitor.instance) {\r\n      PerformanceMonitor.instance = new PerformanceMonitor();\r\n    }\r\n    return PerformanceMonitor.instance;\r\n  }\r\n\r\n  /**\r\n   * 性能监控中间件\r\n   */\r\n  public middleware() {\r\n    return async (\r\n      request: NextRequest,\r\n      handler: (req: NextRequest) => Promise<NextResponse>\r\n    ): Promise<NextResponse> => {\r\n      const requestId = this.generateRequestId();\r\n      const startTime = Date.now();\r\n      const startCpuUsage = process.cpuUsage();\r\n\r\n      // 记录请求开始\r\n      this.recordRequestStart(requestId, request, startTime);\r\n\r\n      try {\r\n        // 检查QPS限制\r\n        await this.checkQpsLimit();\r\n\r\n        // 执行请求处理\r\n        const response = await handler(request);\r\n\r\n        // 记录请求完成\r\n        const endTime = Date.now();\r\n        const duration = endTime - startTime;\r\n        const endCpuUsage = process.cpuUsage(startCpuUsage);\r\n\r\n        await this.recordRequestEnd(\r\n          requestId,\r\n          request,\r\n          response,\r\n          startTime,\r\n          endTime,\r\n          duration,\r\n          endCpuUsage\r\n        );\r\n\r\n        // 添加性能头部\r\n        response.headers.set('X-Request-ID', requestId);\r\n        response.headers.set('X-Response-Time', `${duration}ms`);\r\n        response.headers.set('X-QPS-Current', this.getCurrentQps().toString());\r\n\r\n        return response;\r\n      } catch (error) {\r\n        const endTime = Date.now();\r\n        const duration = endTime - startTime;\r\n\r\n        // 记录错误\r\n        await this.recordError(requestId, request, error, duration);\r\n        throw error;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 检查QPS限制\r\n   */\r\n  private async checkQpsLimit(): Promise<void> {\r\n    const currentQps = this.getCurrentQps();\r\n    \r\n    if (currentQps > this.THRESHOLDS.QPS_LIMIT) {\r\n      this.logger.warn('QPS limit exceeded', {\r\n        currentQps,\r\n        limit: this.THRESHOLDS.QPS_LIMIT,\r\n      });\r\n      \r\n      // 可以选择抛出错误或实施限流\r\n      throw new Error(`QPS limit exceeded: ${currentQps}/${this.THRESHOLDS.QPS_LIMIT}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录请求开始\r\n   */\r\n  private recordRequestStart(\r\n    requestId: string,\r\n    request: NextRequest,\r\n    startTime: number\r\n  ): void {\r\n    // 更新QPS计数器\r\n    this.updateQpsCounter();\r\n\r\n    this.logger.info('Request started', {\r\n      requestId,\r\n      method: request.method,\r\n      url: request.url,\r\n      userAgent: request.headers.get('user-agent'),\r\n      ip: this.getClientIp(request),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 记录请求完成\r\n   */\r\n  private async recordRequestEnd(\r\n    requestId: string,\r\n    request: NextRequest,\r\n    response: NextResponse,\r\n    startTime: number,\r\n    endTime: number,\r\n    duration: number,\r\n    cpuUsage: NodeJS.CpuUsage\r\n  ): Promise<void> {\r\n    const memoryUsage = process.memoryUsage();\r\n    \r\n    const metrics: PerformanceMetrics = {\r\n      requestId,\r\n      method: request.method,\r\n      url: request.url,\r\n      startTime,\r\n      endTime,\r\n      duration,\r\n      statusCode: response.status,\r\n      userAgent: request.headers.get('user-agent') || undefined,\r\n      ip: this.getClientIp(request),\r\n      memoryUsage,\r\n      cpuUsage,\r\n    };\r\n\r\n    // 存储指标\r\n    this.metrics.set(requestId, metrics);\r\n\r\n    // 检查性能阈值\r\n    await this.checkPerformanceThresholds(metrics);\r\n\r\n    // 记录日志\r\n    const logLevel = duration > this.THRESHOLDS.API_RESPONSE_TIME ? 'warn' : 'info';\r\n    this.logger.log(logLevel, 'Request completed', {\r\n      requestId,\r\n      duration,\r\n      statusCode: response.status,\r\n      memoryUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024), // MB\r\n    });\r\n\r\n    // 清理旧指标（保留最近1000条）\r\n    if (this.metrics.size > 1000) {\r\n      const oldestKey = this.metrics.keys().next().value;\r\n      this.metrics.delete(oldestKey);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录错误\r\n   */\r\n  private async recordError(\r\n    requestId: string,\r\n    request: NextRequest,\r\n    error: any,\r\n    duration: number\r\n  ): Promise<void> {\r\n    this.logger.error('Request failed', {\r\n      requestId,\r\n      method: request.method,\r\n      url: request.url,\r\n      duration,\r\n      error: error.message,\r\n      stack: error.stack,\r\n    });\r\n\r\n    // 发送错误指标到监控系统\r\n    await this.sendErrorMetrics(requestId, error, duration);\r\n  }\r\n\r\n  /**\r\n   * 检查性能阈值\r\n   */\r\n  private async checkPerformanceThresholds(metrics: PerformanceMetrics): Promise<void> {\r\n    // 检查响应时间\r\n    if (metrics.duration > this.THRESHOLDS.API_RESPONSE_TIME) {\r\n      await this.sendAlert('SLOW_RESPONSE', {\r\n        requestId: metrics.requestId,\r\n        duration: metrics.duration,\r\n        threshold: this.THRESHOLDS.API_RESPONSE_TIME,\r\n        url: metrics.url,\r\n      });\r\n    }\r\n\r\n    // 检查内存使用\r\n    if (metrics.memoryUsage.heapUsed > this.THRESHOLDS.MEMORY_LIMIT) {\r\n      await this.sendAlert('HIGH_MEMORY_USAGE', {\r\n        requestId: metrics.requestId,\r\n        memoryUsed: metrics.memoryUsage.heapUsed,\r\n        threshold: this.THRESHOLDS.MEMORY_LIMIT,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新QPS计数器\r\n   */\r\n  private updateQpsCounter(): void {\r\n    const now = Date.now();\r\n    const windowSize = 1000; // 1秒窗口\r\n    \r\n    // 清理过期的计数器\r\n    this.qpsCounter = this.qpsCounter.filter(\r\n      metric => now - metric.timestamp < windowSize\r\n    );\r\n    \r\n    // 添加新的计数\r\n    this.qpsCounter.push({\r\n      timestamp: now,\r\n      count: 1,\r\n      windowSize,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取当前QPS\r\n   */\r\n  private getCurrentQps(): number {\r\n    const now = Date.now();\r\n    const windowSize = 1000; // 1秒窗口\r\n    \r\n    // 清理过期的计数器\r\n    this.qpsCounter = this.qpsCounter.filter(\r\n      metric => now - metric.timestamp < windowSize\r\n    );\r\n    \r\n    return this.qpsCounter.length;\r\n  }\r\n\r\n  /**\r\n   * 获取客户端IP\r\n   */\r\n  private getClientIp(request: NextRequest): string {\r\n    return (\r\n      request.headers.get('x-forwarded-for') ||\r\n      request.headers.get('x-real-ip') ||\r\n      'unknown'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 生成请求ID\r\n   */\r\n  private generateRequestId(): string {\r\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * 发送告警\r\n   */\r\n  private async sendAlert(type: string, data: any): Promise<void> {\r\n    try {\r\n      // 发送到监控系统或告警服务\r\n      await fetch('/api/admin/alerts', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          type,\r\n          data,\r\n          timestamp: new Date().toISOString(),\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      this.logger.error('Failed to send alert', { type, error: error.message });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送错误指标\r\n   */\r\n  private async sendErrorMetrics(\r\n    requestId: string,\r\n    error: any,\r\n    duration: number\r\n  ): Promise<void> {\r\n    try {\r\n      await fetch('/api/metrics/record', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          type: 'error',\r\n          requestId,\r\n          error: error.message,\r\n          duration,\r\n          timestamp: new Date().toISOString(),\r\n        }),\r\n      });\r\n    } catch (err) {\r\n      this.logger.error('Failed to send error metrics', { error: err.message });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取性能统计\r\n   */\r\n  public getPerformanceStats(): any {\r\n    const recentMetrics = Array.from(this.metrics.values())\r\n      .filter(m => Date.now() - m.endTime < 60000); // 最近1分钟\r\n\r\n    if (recentMetrics.length === 0) {\r\n      return {\r\n        totalRequests: 0,\r\n        averageResponseTime: 0,\r\n        currentQps: 0,\r\n        errorRate: 0,\r\n      };\r\n    }\r\n\r\n    const totalRequests = recentMetrics.length;\r\n    const averageResponseTime = recentMetrics.reduce((sum, m) => sum + m.duration, 0) / totalRequests;\r\n    const errorCount = recentMetrics.filter(m => m.statusCode >= 400).length;\r\n    const errorRate = (errorCount / totalRequests) * 100;\r\n\r\n    return {\r\n      totalRequests,\r\n      averageResponseTime: Math.round(averageResponseTime),\r\n      currentQps: this.getCurrentQps(),\r\n      errorRate: Math.round(errorRate * 100) / 100,\r\n      memoryUsage: process.memoryUsage(),\r\n      uptime: process.uptime(),\r\n    };\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const performanceMonitor = PerformanceMonitor.getInstance();\r\n\r\n// 导出中间件函数\r\nexport function withPerformanceMonitoring<T extends any[]>(\r\n  handler: (...args: T) => Promise<NextResponse>\r\n) {\r\n  return async (...args: T): Promise<NextResponse> => {\r\n    const [request] = args;\r\n    return performanceMonitor.middleware()(request as NextRequest, async (req) => {\r\n      return handler(...args);\r\n    });\r\n  };\r\n} "],"mappings":"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","ignoreList":[]}