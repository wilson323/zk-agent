{"file":"E:\\zk-agent\\__tests__\\lib\\database\\poster-db.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\database\\poster-db.test.ts"],"sourcesContent":["/**\n * 海报数据库操作测试\n * 测试poster-db.ts中的所有方法\n */\n\nimport { PosterDatabase } from '@/lib/database/poster-db'\nimport { PrismaClient } from '@prisma/client'\nimport type { PosterStyle, PosterSize, ColorPalette, PosterTask } from '@/types/poster'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\nconst mockPrisma = {\n  posterStyle: {\n    findMany: jest.fn(),\n  },\n  posterSize: {\n    findMany: jest.fn(),\n  },\n  colorPalette: {\n    findMany: jest.fn(),\n  },\n  posterTask: {\n    create: jest.fn(),\n    update: jest.fn(),\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n  },\n  posterGenerationHistory: {\n    create: jest.fn(),\n    findMany: jest.fn(),\n  },\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrisma as any)\n\ndescribe('PosterDatabase', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('getStyles', () => {\n    it('应该成功获取海报风格列表', async () => {\n      const mockStyles = [\n        {\n          id: '1',\n          name: '现代简约',\n          description: '简洁现代的设计风格',\n          category: 'modern',\n          previewUrl: 'https://example.com/preview1.jpg',\n          isActive: true,\n          order: 1,\n        },\n        {\n          id: '2',\n          name: '复古经典',\n          description: '经典复古的设计风格',\n          category: 'vintage',\n          previewUrl: 'https://example.com/preview2.jpg',\n          isActive: true,\n          order: 2,\n        },\n      ]\n\n      mockPrisma.posterStyle.findMany.mockResolvedValue(mockStyles)\n\n      const result = await PosterDatabase.getStyles()\n\n      expect(mockPrisma.posterStyle.findMany).toHaveBeenCalledWith({\n        where: { isActive: true },\n        orderBy: { order: 'asc' },\n      })\n\n      expect(result).toEqual([\n        {\n          id: '1',\n          name: '现代简约',\n          description: '简洁现代的设计风格',\n          category: 'modern',\n          previewUrl: 'https://example.com/preview1.jpg',\n        },\n        {\n          id: '2',\n          name: '复古经典',\n          description: '经典复古的设计风格',\n          category: 'vintage',\n          previewUrl: 'https://example.com/preview2.jpg',\n        },\n      ])\n    })\n\n    it('应该处理获取风格时的错误', async () => {\n      mockPrisma.posterStyle.findMany.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.getStyles()).rejects.toThrow('获取海报风格失败')\n    })\n  })\n\n  describe('getSizes', () => {\n    it('应该成功获取海报尺寸列表', async () => {\n      const mockSizes = [\n        {\n          id: '1',\n          name: 'A4',\n          dimensions: '210x297mm',\n          ratio: '1:1.414',\n          width: 210,\n          height: 297,\n          isActive: true,\n          order: 1,\n        },\n      ]\n\n      mockPrisma.posterSize.findMany.mockResolvedValue(mockSizes)\n\n      const result = await PosterDatabase.getSizes()\n\n      expect(mockPrisma.posterSize.findMany).toHaveBeenCalledWith({\n        where: { isActive: true },\n        orderBy: { order: 'asc' },\n      })\n\n      expect(result).toEqual([\n        {\n          id: '1',\n          name: 'A4',\n          dimensions: '210x297mm',\n          ratio: '1:1.414',\n          height: 297,\n        },\n      ])\n    })\n\n    it('应该处理获取尺寸时的错误', async () => {\n      mockPrisma.posterSize.findMany.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.getSizes()).rejects.toThrow('获取海报尺寸失败')\n    })\n  })\n\n  describe('getColorPalettes', () => {\n    it('应该成功获取配色方案列表', async () => {\n      const mockPalettes = [\n        {\n          id: '1',\n          name: '清新蓝绿',\n          colors: ['#00BCD4', '#4CAF50', '#8BC34A'],\n          description: '清新自然的蓝绿配色',\n          isActive: true,\n          order: 1,\n        },\n      ]\n\n      mockPrisma.colorPalette.findMany.mockResolvedValue(mockPalettes)\n\n      const result = await PosterDatabase.getColorPalettes()\n\n      expect(mockPrisma.colorPalette.findMany).toHaveBeenCalledWith({\n        where: { isActive: true },\n        orderBy: { order: 'asc' },\n      })\n\n      expect(result).toEqual([\n        {\n          id: '1',\n          name: '清新蓝绿',\n          colors: ['#00BCD4', '#4CAF50', '#8BC34A'],\n          description: '清新自然的蓝绿配色',\n        },\n      ])\n    })\n\n    it('应该处理获取配色方案时的错误', async () => {\n      mockPrisma.colorPalette.findMany.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.getColorPalettes()).rejects.toThrow('获取配色方案失败')\n    })\n  })\n\n  describe('createPosterTask', () => {\n    it('应该成功创建海报任务', async () => {\n      const taskData = {\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n        referenceImageUrl: 'https://example.com/ref.jpg',\n        templateId: 'template1',\n      }\n\n      const mockCreatedTask = {\n        id: 'task123',\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n        referenceImageUrl: 'https://example.com/ref.jpg',\n        resultImageUrl: '',\n        createdAt: new Date('2024-01-01'),\n        templateId: 'template1',\n        status: 'pending',\n        updatedAt: new Date('2024-01-01'),\n      }\n\n      mockPrisma.posterTask.create.mockResolvedValue(mockCreatedTask)\n\n      const result = await PosterDatabase.createPosterTask(taskData)\n\n      expect(mockPrisma.posterTask.create).toHaveBeenCalledWith({\n        data: {\n          userId: 'user123',\n          description: '创建一个现代风格的海报',\n          style: 'modern',\n          size: 'A4',\n          palette: 'blue-green',\n          referenceImageUrl: 'https://example.com/ref.jpg',\n          templateId: 'template1',\n          resultImageUrl: '',\n          status: 'pending',\n        },\n      })\n\n      expect(result).toEqual({\n        id: 'task123',\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n        referenceImageUrl: 'https://example.com/ref.jpg',\n        resultImageUrl: '',\n        createdAt: new Date('2024-01-01'),\n      })\n    })\n\n    it('应该处理创建任务时的错误', async () => {\n      const taskData = {\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n      }\n\n      mockPrisma.posterTask.create.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.createPosterTask(taskData)).rejects.toThrow('创建海报任务失败')\n    })\n  })\n\n  describe('updatePosterTaskResult', () => {\n    it('应该成功更新海报任务结果', async () => {\n      const taskId = 'task123'\n      const resultImageUrl = 'https://example.com/result.jpg'\n\n      mockPrisma.posterTask.update.mockResolvedValue({})\n\n      await PosterDatabase.updatePosterTaskResult(taskId, resultImageUrl)\n\n      expect(mockPrisma.posterTask.update).toHaveBeenCalledWith({\n        where: { id: taskId },\n        data: {\n          resultImageUrl,\n          status: 'completed',\n          updatedAt: expect.any(Date),\n        },\n      })\n    })\n\n    it('应该处理更新任务结果时的错误', async () => {\n      mockPrisma.posterTask.update.mockRejectedValue(new Error('Database error'))\n\n      await expect(\n        PosterDatabase.updatePosterTaskResult('task123', 'https://example.com/result.jpg')\n      ).rejects.toThrow('更新海报任务结果失败')\n    })\n  })\n})"],"version":3}