{"version":3,"names":["cov_vc1hlum60","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","monitoring_1","connection_pool_analyzer_1","query_performance_optimizer_1","AnomalyType","exports","PerformanceMonitorEnhancer","EventEmitter","constructor","isMonitoring","collectionInterval","analysisInterval","reportInterval","metricsHistory","anomalies","Map","trends","lastHealthScore","baselineMetrics","config","enabled","retentionPeriod","anomalyDetectionSensitivity","autoOptimization","thresholds","connectionPool","usageWarning","usageCritical","waitTimeWarning","waitTimeCritical","queryPerformance","avgLatencyWarning","avgLatencyCritical","errorRateWarning","errorRateCritical","slowQueryThreshold","systemResources","cpuWarning","cpuCritical","memoryWarning","memoryCritical","database","connectionsWarning","connectionsCritical","cacheHitRateWarning","setupEventListeners","databaseMonitor","on","metrics","handleDatabaseMetrics","connectionPoolAnalyzer","analysis","handlePoolAnalysis","queryPerformanceOptimizer","query","handleSlowQuery","console","log","establishBaseline","setInterval","collectMetrics","performAnalysis","generateReport","emit","stop","clearInterval","samples","i","collectCurrentMetrics","push","Promise","resolve","setTimeout","calculateAverageMetrics","cleanupOldMetrics","error","poolStats","getStats","queryStats","dbStats","getMetrics","timestamp","Date","active","activeConnections","idle","idleConnections","total","totalConnections","usage","waitingCount","avgWaitTime","totalQueries","avgExecutionTime","slowQueries","errorRate","throughput","cpuUsage","getCPUUsage","memoryUsage","getMemoryUsage","diskIO","getDiskIO","networkIO","getNetworkIO","connections","transactions","locks","deadlocks","cacheHitRate","Math","random","used","process","heapTotal","external","min","heapUsed","cutoffTime","now","filter","id","anomaly","detectedAt","delete","length","detectAnomalies","analyzeTrends","healthScore","calculateHealthScore","generateOptimizationRecommendations","size","currentMetrics","detectedAnomalies","CONNECTION_POOL_EXHAUSTION","severity","description","toFixed","threshold","expected","actual","deviation","recommendations","resolved","HIGH_LATENCY","HIGH_ERROR_RATE","detectMemoryLeak","MEMORY_LEAK","forEach","set","sendAlert","recent","slice","memoryUsages","map","m","increasingCount","timeRange","metric","trend","calculateTrend","metricPath","values","getNestedValue","n","x","Array","from","_","y","sumX","reduce","a","sumY","sumXY","sum","xi","sumXX","slope","intercept","yMean","ssRes","yi","predicted","pow","ssTot","rSquared","direction","changeRate","abs","isNegativeMetric","includes","nextHourIndex","nextDayIndex","prediction","nextHour","nextDay","confidence","max","obj","split","current","key","score","poolUsage","avgLatency","criticalAnomalies","highAnomalies","rec","priority","category","expectedImprovement","warn","message","oneHourAgo","getTime","reportMetrics","Error","avgMetrics","report","generatedAt","summary","avgResponseTime","availability","calculateAvailability","byType","getAnomaliesByType","bySeverity","getAnomaliesBySeverity","getRecommendations","detailedMetrics","count","avg","acc","Object","keys","totalSamples","healthySamples","stats","low","medium","high","critical","connectionPoolUsage","value","bottlenecks","SLOW_QUERY","executionTime","getStatus","metricsCount","anomaliesCount","trendsCount","getLatestMetrics","getAnomalies","getTrends","updateConfig","newConfig","assign","then","updateThresholds","newThresholds","resolveAnomaly","anomalyId","get","resolvedAt","triggerAnalysis","triggerReport","performanceMonitorEnhancer"],"sources":["E:\\zk-agent\\lib\\database\\performance-monitor-enhancer.ts"],"sourcesContent":["/**\r\n * 数据库性能监控增强器\r\n * 提供实时性能监控、异常检测、预警和自动优化建议\r\n * \r\n * 功能:\r\n * - 实时性能指标收集和分析\r\n * - 异常检测和预警机制\r\n * - 性能趋势分析和预测\r\n * - 自动优化建议生成\r\n * - 性能报告和可视化数据\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { databaseMonitor } from './monitoring'\r\nimport { connectionPoolAnalyzer } from './connection-pool-analyzer'\r\nimport { queryPerformanceOptimizer } from './query-performance-optimizer'\r\n\r\n/**\r\n * 性能指标类型\r\n */\r\ninterface PerformanceMetrics {\r\n  /** 时间戳 */\r\n  timestamp: Date\r\n  /** 连接池指标 */\r\n  connectionPool: {\r\n    active: number\r\n    idle: number\r\n    total: number\r\n    usage: number\r\n    waitingCount: number\r\n    avgWaitTime: number\r\n  }\r\n  /** 查询性能指标 */\r\n  queryPerformance: {\r\n    totalQueries: number\r\n    avgExecutionTime: number\r\n    slowQueries: number\r\n    errorRate: number\r\n    throughput: number\r\n  }\r\n  /** 系统资源指标 */\r\n  systemResources: {\r\n    cpuUsage: number\r\n    memoryUsage: number\r\n    diskIO: number\r\n    networkIO: number\r\n  }\r\n  /** 数据库指标 */\r\n  database: {\r\n    connections: number\r\n    transactions: number\r\n    locks: number\r\n    deadlocks: number\r\n    cacheHitRate: number\r\n  }\r\n}\r\n\r\n/**\r\n * 异常类型\r\n */\r\nenum AnomalyType {\r\n  HIGH_LATENCY = 'high_latency',\r\n  HIGH_ERROR_RATE = 'high_error_rate',\r\n  CONNECTION_POOL_EXHAUSTION = 'connection_pool_exhaustion',\r\n  MEMORY_LEAK = 'memory_leak',\r\n  SLOW_QUERY = 'slow_query',\r\n  DEADLOCK = 'deadlock',\r\n  RESOURCE_CONTENTION = 'resource_contention'\r\n}\r\n\r\n/**\r\n * 异常检测结果\r\n */\r\ninterface AnomalyDetection {\r\n  /** 异常ID */\r\n  id: string\r\n  /** 异常类型 */\r\n  type: AnomalyType\r\n  /** 严重程度 */\r\n  severity: 'low' | 'medium' | 'high' | 'critical'\r\n  /** 异常描述 */\r\n  description: string\r\n  /** 检测时间 */\r\n  detectedAt: Date\r\n  /** 相关指标 */\r\n  metrics: Partial<PerformanceMetrics>\r\n  /** 阈值信息 */\r\n  threshold: {\r\n    expected: number\r\n    actual: number\r\n    deviation: number\r\n  }\r\n  /** 建议操作 */\r\n  recommendations: string[]\r\n  /** 是否已解决 */\r\n  resolved: boolean\r\n  /** 解决时间 */\r\n  resolvedAt?: Date\r\n}\r\n\r\n/**\r\n * 性能趋势\r\n */\r\ninterface PerformanceTrend {\r\n  /** 指标名称 */\r\n  metric: string\r\n  /** 趋势方向 */\r\n  direction: 'improving' | 'degrading' | 'stable'\r\n  /** 变化率 */\r\n  changeRate: number\r\n  /** 预测值 */\r\n  prediction: {\r\n    nextHour: number\r\n    nextDay: number\r\n    confidence: number\r\n  }\r\n  /** 分析时间范围 */\r\n  timeRange: {\r\n    start: Date\r\n    end: Date\r\n  }\r\n}\r\n\r\n/**\r\n * 性能阈值配置\r\n */\r\ninterface PerformanceThresholds {\r\n  /** 连接池阈值 */\r\n  connectionPool: {\r\n    usageWarning: number\r\n    usageCritical: number\r\n    waitTimeWarning: number\r\n    waitTimeCritical: number\r\n  }\r\n  /** 查询性能阈值 */\r\n  queryPerformance: {\r\n    avgLatencyWarning: number\r\n    avgLatencyCritical: number\r\n    errorRateWarning: number\r\n    errorRateCritical: number\r\n    slowQueryThreshold: number\r\n  }\r\n  /** 系统资源阈值 */\r\n  systemResources: {\r\n    cpuWarning: number\r\n    cpuCritical: number\r\n    memoryWarning: number\r\n    memoryCritical: number\r\n  }\r\n  /** 数据库阈值 */\r\n  database: {\r\n    connectionsWarning: number\r\n    connectionsCritical: number\r\n    cacheHitRateWarning: number\r\n  }\r\n}\r\n\r\n/**\r\n * 监控配置\r\n */\r\ninterface MonitoringConfig {\r\n  /** 是否启用 */\r\n  enabled: boolean\r\n  /** 采集间隔(ms) */\r\n  collectionInterval: number\r\n  /** 分析间隔(ms) */\r\n  analysisInterval: number\r\n  /** 历史数据保留时间(ms) */\r\n  retentionPeriod: number\r\n  /** 异常检测敏感度 */\r\n  anomalyDetectionSensitivity: 'low' | 'medium' | 'high'\r\n  /** 是否启用自动优化 */\r\n  autoOptimization: boolean\r\n  /** 报告生成间隔(ms) */\r\n  reportInterval: number\r\n}\r\n\r\n/**\r\n * 性能报告\r\n */\r\ninterface PerformanceReport {\r\n  /** 报告ID */\r\n  id: string\r\n  /** 生成时间 */\r\n  generatedAt: Date\r\n  /** 报告时间范围 */\r\n  timeRange: {\r\n    start: Date\r\n    end: Date\r\n  }\r\n  /** 总体健康评分 */\r\n  healthScore: number\r\n  /** 关键指标摘要 */\r\n  summary: {\r\n    avgResponseTime: number\r\n    errorRate: number\r\n    throughput: number\r\n    availability: number\r\n  }\r\n  /** 异常统计 */\r\n  anomalies: {\r\n    total: number\r\n    byType: Record<AnomalyType, number>\r\n    bySeverity: Record<string, number>\r\n  }\r\n  /** 性能趋势 */\r\n  trends: PerformanceTrend[]\r\n  /** 优化建议 */\r\n  recommendations: {\r\n    priority: 'high' | 'medium' | 'low'\r\n    category: string\r\n    description: string\r\n    expectedImprovement: string\r\n  }[]\r\n  /** 详细数据 */\r\n  detailedMetrics: PerformanceMetrics[]\r\n}\r\n\r\n/**\r\n * 数据库性能监控增强器类\r\n */\r\nexport class PerformanceMonitorEnhancer extends EventEmitter {\r\n  private isMonitoring: boolean = false\r\n  private collectionInterval: NodeJS.Timeout | null = null\r\n  private analysisInterval: NodeJS.Timeout | null = null\r\n  private reportInterval: NodeJS.Timeout | null = null\r\n  private metricsHistory: PerformanceMetrics[] = []\r\n  private anomalies: Map<string, AnomalyDetection> = new Map()\r\n  private trends: Map<string, PerformanceTrend> = new Map()\r\n  private config: MonitoringConfig\r\n  private thresholds: PerformanceThresholds\r\n  private lastHealthScore: number = 1.0\r\n  private baselineMetrics: PerformanceMetrics | null = null\r\n\r\n  constructor() {\r\n    super()\r\n    \r\n    this.config = {\r\n      enabled: true,\r\n      collectionInterval: 30000, // 30秒\r\n      analysisInterval: 300000,  // 5分钟\r\n      retentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7天\r\n      anomalyDetectionSensitivity: 'medium',\r\n      autoOptimization: false,\r\n      reportInterval: 3600000 // 1小时\r\n    }\r\n    \r\n    this.thresholds = {\r\n      connectionPool: {\r\n        usageWarning: 0.7,\r\n        usageCritical: 0.9,\r\n        waitTimeWarning: 100,\r\n        waitTimeCritical: 500\r\n      },\r\n      queryPerformance: {\r\n        avgLatencyWarning: 100,\r\n        avgLatencyCritical: 500,\r\n        errorRateWarning: 0.01,\r\n        errorRateCritical: 0.05,\r\n        slowQueryThreshold: 1000\r\n      },\r\n      systemResources: {\r\n        cpuWarning: 0.7,\r\n        cpuCritical: 0.9,\r\n        memoryWarning: 0.8,\r\n        memoryCritical: 0.95\r\n      },\r\n      database: {\r\n        connectionsWarning: 80,\r\n        connectionsCritical: 95,\r\n        cacheHitRateWarning: 0.8\r\n      }\r\n    }\r\n    \r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听数据库监控事件\r\n    databaseMonitor.on('metrics', (metrics) => {\r\n      this.handleDatabaseMetrics(metrics)\r\n    })\r\n    \r\n    // 监听连接池分析器事件\r\n    connectionPoolAnalyzer.on('analysis-completed', (analysis) => {\r\n      this.handlePoolAnalysis(analysis)\r\n    })\r\n    \r\n    // 监听查询性能优化器事件\r\n    queryPerformanceOptimizer.on('slow-query-detected', (query) => {\r\n      this.handleSlowQuery(query)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 启动性能监控\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isMonitoring) {\r\n      console.log('Performance monitor enhancer is already running')\r\n      return\r\n    }\r\n\r\n    console.log('Starting performance monitor enhancer')\r\n    \r\n    this.isMonitoring = true\r\n    \r\n    // 建立基线指标\r\n    await this.establishBaseline()\r\n    \r\n    // 启动指标收集\r\n    if (this.config.enabled) {\r\n      this.collectionInterval = setInterval(() => {\r\n        this.collectMetrics()\r\n      }, this.config.collectionInterval)\r\n      \r\n      // 启动分析\r\n      this.analysisInterval = setInterval(() => {\r\n        this.performAnalysis()\r\n      }, this.config.analysisInterval)\r\n      \r\n      // 启动报告生成\r\n      this.reportInterval = setInterval(() => {\r\n        this.generateReport()\r\n      }, this.config.reportInterval)\r\n    }\r\n    \r\n    // 初始收集和分析\r\n    await this.collectMetrics()\r\n    await this.performAnalysis()\r\n    \r\n    this.emit('monitor-started')\r\n    console.log('Performance monitor enhancer started successfully')\r\n  }\r\n\r\n  /**\r\n   * 停止性能监控\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (!this.isMonitoring) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping performance monitor enhancer')\r\n    \r\n    this.isMonitoring = false\r\n    \r\n    if (this.collectionInterval) {\r\n      clearInterval(this.collectionInterval)\r\n      this.collectionInterval = null\r\n    }\r\n    \r\n    if (this.analysisInterval) {\r\n      clearInterval(this.analysisInterval)\r\n      this.analysisInterval = null\r\n    }\r\n    \r\n    if (this.reportInterval) {\r\n      clearInterval(this.reportInterval)\r\n      this.reportInterval = null\r\n    }\r\n    \r\n    this.emit('monitor-stopped')\r\n  }\r\n\r\n  /**\r\n   * 建立基线指标\r\n   */\r\n  private async establishBaseline(): Promise<void> {\r\n    console.log('Establishing performance baseline...')\r\n    \r\n    // 收集多个样本来建立基线\r\n    const samples: PerformanceMetrics[] = []\r\n    \r\n    for (let i = 0; i < 5; i++) {\r\n      const metrics = await this.collectCurrentMetrics()\r\n      samples.push(metrics)\r\n      \r\n      if (i < 4) {\r\n        await new Promise(resolve => setTimeout(resolve, 5000)) // 等待5秒\r\n      }\r\n    }\r\n    \r\n    // 计算基线指标\r\n    this.baselineMetrics = this.calculateAverageMetrics(samples)\r\n    \r\n    console.log('Performance baseline established')\r\n    this.emit('baseline-established', this.baselineMetrics)\r\n  }\r\n\r\n  /**\r\n   * 收集性能指标\r\n   */\r\n  private async collectMetrics(): Promise<void> {\r\n    try {\r\n      const metrics = await this.collectCurrentMetrics()\r\n      \r\n      this.metricsHistory.push(metrics)\r\n      \r\n      // 清理过期数据\r\n      this.cleanupOldMetrics()\r\n      \r\n      this.emit('metrics-collected', metrics)\r\n      \r\n    } catch (error) {\r\n      console.error('Failed to collect metrics:', error)\r\n      this.emit('collection-error', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 收集当前指标\r\n   * \r\n   * @returns 当前性能指标\r\n   */\r\n  private async collectCurrentMetrics(): Promise<PerformanceMetrics> {\r\n    const poolStats = connectionPoolAnalyzer.getStats()\r\n    const queryStats = queryPerformanceOptimizer.getStats()\r\n    const dbStats = databaseMonitor.getMetrics()\r\n    \r\n    return {\r\n      timestamp: new Date(),\r\n      connectionPool: {\r\n        active: poolStats.activeConnections,\r\n        idle: poolStats.idleConnections,\r\n        total: poolStats.totalConnections,\r\n        usage: poolStats.usage,\r\n        waitingCount: poolStats.waitingCount,\r\n        avgWaitTime: poolStats.avgWaitTime\r\n      },\r\n      queryPerformance: {\r\n        totalQueries: queryStats.totalQueries,\r\n        avgExecutionTime: queryStats.avgExecutionTime,\r\n        slowQueries: queryStats.slowQueries,\r\n        errorRate: queryStats.errorRate,\r\n        throughput: queryStats.throughput\r\n      },\r\n      systemResources: {\r\n        cpuUsage: this.getCPUUsage(),\r\n        memoryUsage: this.getMemoryUsage(),\r\n        diskIO: this.getDiskIO(),\r\n        networkIO: this.getNetworkIO()\r\n      },\r\n      database: {\r\n        connections: dbStats.connections || 0,\r\n        transactions: dbStats.transactions || 0,\r\n        locks: dbStats.locks || 0,\r\n        deadlocks: dbStats.deadlocks || 0,\r\n        cacheHitRate: dbStats.cacheHitRate || 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取CPU使用率\r\n   * \r\n   * @returns CPU使用率\r\n   */\r\n  private getCPUUsage(): number {\r\n    // 简化实现，实际应该使用系统API\r\n    return Math.random() * 0.3 + 0.1 // 模拟10-40%的CPU使用率\r\n  }\r\n\r\n  /**\r\n   * 获取内存使用率\r\n   * \r\n   * @returns 内存使用率\r\n   */\r\n  private getMemoryUsage(): number {\r\n    const used = process.memoryUsage()\r\n    const total = used.heapTotal + used.external\r\n    return Math.min(1, used.heapUsed / total)\r\n  }\r\n\r\n  /**\r\n   * 获取磁盘IO\r\n   * \r\n   * @returns 磁盘IO指标\r\n   */\r\n  private getDiskIO(): number {\r\n    // 简化实现\r\n    return Math.random() * 100\r\n  }\r\n\r\n  /**\r\n   * 获取网络IO\r\n   * \r\n   * @returns 网络IO指标\r\n   */\r\n  private getNetworkIO(): number {\r\n    // 简化实现\r\n    return Math.random() * 1000\r\n  }\r\n\r\n  /**\r\n   * 清理过期指标\r\n   */\r\n  private cleanupOldMetrics(): void {\r\n    const cutoffTime = new Date(Date.now() - this.config.retentionPeriod)\r\n    \r\n    this.metricsHistory = this.metricsHistory.filter(\r\n      metrics => metrics.timestamp > cutoffTime\r\n    )\r\n    \r\n    // 清理过期异常\r\n    for (const [id, anomaly] of this.anomalies) {\r\n      if (anomaly.detectedAt < cutoffTime) {\r\n        this.anomalies.delete(id)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行性能分析\r\n   */\r\n  private async performAnalysis(): Promise<void> {\r\n    try {\r\n      console.log('Performing performance analysis...')\r\n      \r\n      if (this.metricsHistory.length < 2) {\r\n        console.log('Insufficient data for analysis')\r\n        return\r\n      }\r\n      \r\n      // 异常检测\r\n      await this.detectAnomalies()\r\n      \r\n      // 趋势分析\r\n      await this.analyzeTrends()\r\n      \r\n      // 计算健康评分\r\n      const healthScore = this.calculateHealthScore()\r\n      this.lastHealthScore = healthScore\r\n      \r\n      // 生成优化建议\r\n      if (this.config.autoOptimization) {\r\n        await this.generateOptimizationRecommendations()\r\n      }\r\n      \r\n      this.emit('analysis-completed', {\r\n        healthScore,\r\n        anomalies: this.anomalies.size,\r\n        trends: this.trends.size\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('Performance analysis failed:', error)\r\n      this.emit('analysis-error', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 异常检测\r\n   */\r\n  private async detectAnomalies(): Promise<void> {\r\n    const currentMetrics = this.metricsHistory[this.metricsHistory.length - 1]\r\n    const detectedAnomalies: AnomalyDetection[] = []\r\n    \r\n    // 检测连接池异常\r\n    if (currentMetrics.connectionPool.usage > this.thresholds.connectionPool.usageCritical) {\r\n      detectedAnomalies.push({\r\n        id: `pool_exhaustion_${Date.now()}`,\r\n        type: AnomalyType.CONNECTION_POOL_EXHAUSTION,\r\n        severity: 'critical',\r\n        description: `连接池使用率达到 ${(currentMetrics.connectionPool.usage * 100).toFixed(1)}%，超过临界阈值`,\r\n        detectedAt: new Date(),\r\n        metrics: { connectionPool: currentMetrics.connectionPool },\r\n        threshold: {\r\n          expected: this.thresholds.connectionPool.usageCritical,\r\n          actual: currentMetrics.connectionPool.usage,\r\n          deviation: currentMetrics.connectionPool.usage - this.thresholds.connectionPool.usageCritical\r\n        },\r\n        recommendations: [\r\n          '增加连接池大小',\r\n          '优化长时间运行的查询',\r\n          '检查连接泄漏'\r\n        ],\r\n        resolved: false\r\n      })\r\n    }\r\n    \r\n    // 检测高延迟异常\r\n    if (currentMetrics.queryPerformance.avgExecutionTime > this.thresholds.queryPerformance.avgLatencyCritical) {\r\n      detectedAnomalies.push({\r\n        id: `high_latency_${Date.now()}`,\r\n        type: AnomalyType.HIGH_LATENCY,\r\n        severity: 'high',\r\n        description: `平均查询延迟为 ${currentMetrics.queryPerformance.avgExecutionTime.toFixed(1)}ms，超过临界阈值`,\r\n        detectedAt: new Date(),\r\n        metrics: { queryPerformance: currentMetrics.queryPerformance },\r\n        threshold: {\r\n          expected: this.thresholds.queryPerformance.avgLatencyCritical,\r\n          actual: currentMetrics.queryPerformance.avgExecutionTime,\r\n          deviation: currentMetrics.queryPerformance.avgExecutionTime - this.thresholds.queryPerformance.avgLatencyCritical\r\n        },\r\n        recommendations: [\r\n          '优化慢查询',\r\n          '添加数据库索引',\r\n          '启用查询缓存'\r\n        ],\r\n        resolved: false\r\n      })\r\n    }\r\n    \r\n    // 检测高错误率异常\r\n    if (currentMetrics.queryPerformance.errorRate > this.thresholds.queryPerformance.errorRateCritical) {\r\n      detectedAnomalies.push({\r\n        id: `high_error_rate_${Date.now()}`,\r\n        type: AnomalyType.HIGH_ERROR_RATE,\r\n        severity: 'critical',\r\n        description: `查询错误率为 ${(currentMetrics.queryPerformance.errorRate * 100).toFixed(2)}%，超过临界阈值`,\r\n        detectedAt: new Date(),\r\n        metrics: { queryPerformance: currentMetrics.queryPerformance },\r\n        threshold: {\r\n          expected: this.thresholds.queryPerformance.errorRateCritical,\r\n          actual: currentMetrics.queryPerformance.errorRate,\r\n          deviation: currentMetrics.queryPerformance.errorRate - this.thresholds.queryPerformance.errorRateCritical\r\n        },\r\n        recommendations: [\r\n          '检查数据库连接状态',\r\n          '分析错误日志',\r\n          '验证查询语法'\r\n        ],\r\n        resolved: false\r\n      })\r\n    }\r\n    \r\n    // 检测内存泄漏异常\r\n    if (this.detectMemoryLeak()) {\r\n      detectedAnomalies.push({\r\n        id: `memory_leak_${Date.now()}`,\r\n        type: AnomalyType.MEMORY_LEAK,\r\n        severity: 'high',\r\n        description: '检测到潜在的内存泄漏模式',\r\n        detectedAt: new Date(),\r\n        metrics: { systemResources: currentMetrics.systemResources },\r\n        threshold: {\r\n          expected: this.thresholds.systemResources.memoryWarning,\r\n          actual: currentMetrics.systemResources.memoryUsage,\r\n          deviation: currentMetrics.systemResources.memoryUsage - this.thresholds.systemResources.memoryWarning\r\n        },\r\n        recommendations: [\r\n          '检查应用程序内存使用',\r\n          '分析内存分配模式',\r\n          '重启应用程序'\r\n        ],\r\n        resolved: false\r\n      })\r\n    }\r\n    \r\n    // 存储新检测到的异常\r\n    detectedAnomalies.forEach(anomaly => {\r\n      this.anomalies.set(anomaly.id, anomaly)\r\n      this.emit('anomaly-detected', anomaly)\r\n      \r\n      // 发送告警\r\n      this.sendAlert(anomaly)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 检测内存泄漏\r\n   * \r\n   * @returns 是否检测到内存泄漏\r\n   */\r\n  private detectMemoryLeak(): boolean {\r\n    if (this.metricsHistory.length < 10) {\r\n      return false\r\n    }\r\n    \r\n    const recent = this.metricsHistory.slice(-10)\r\n    const memoryUsages = recent.map(m => m.systemResources.memoryUsage)\r\n    \r\n    // 检查内存使用是否持续增长\r\n    let increasingCount = 0\r\n    for (let i = 1; i < memoryUsages.length; i++) {\r\n      if (memoryUsages[i] > memoryUsages[i - 1]) {\r\n        increasingCount++\r\n      }\r\n    }\r\n    \r\n    // 如果80%的时间内存都在增长，可能存在内存泄漏\r\n    return increasingCount >= 8\r\n  }\r\n\r\n  /**\r\n   * 趋势分析\r\n   */\r\n  private async analyzeTrends(): Promise<void> {\r\n    if (this.metricsHistory.length < 10) {\r\n      return\r\n    }\r\n    \r\n    const timeRange = {\r\n      start: this.metricsHistory[0].timestamp,\r\n      end: this.metricsHistory[this.metricsHistory.length - 1].timestamp\r\n    }\r\n    \r\n    // 分析各项指标的趋势\r\n    const metrics = [\r\n      'connectionPool.usage',\r\n      'queryPerformance.avgExecutionTime',\r\n      'queryPerformance.errorRate',\r\n      'systemResources.memoryUsage',\r\n      'systemResources.cpuUsage'\r\n    ]\r\n    \r\n    for (const metric of metrics) {\r\n      const trend = this.calculateTrend(metric, timeRange)\r\n      this.trends.set(metric, trend)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算指标趋势\r\n   * \r\n   * @param metricPath - 指标路径\r\n   * @param timeRange - 时间范围\r\n   * @returns 趋势分析结果\r\n   */\r\n  private calculateTrend(metricPath: string, timeRange: { start: Date; end: Date }): PerformanceTrend {\r\n    const values = this.metricsHistory.map(m => this.getNestedValue(m, metricPath))\r\n    \r\n    // 计算线性回归\r\n    const n = values.length\r\n    const x = Array.from({ length: n }, (_, i) => i)\r\n    const y = values\r\n    \r\n    const sumX = x.reduce((a, b) => a + b, 0)\r\n    const sumY = y.reduce((a, b) => a + b, 0)\r\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0)\r\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0)\r\n    \r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX)\r\n    const intercept = (sumY - slope * sumX) / n\r\n    \r\n    // 计算R²\r\n    const yMean = sumY / n\r\n    const ssRes = y.reduce((sum, yi, i) => {\r\n      const predicted = slope * x[i] + intercept\r\n      return sum + Math.pow(yi - predicted, 2)\r\n    }, 0)\r\n    const ssTot = y.reduce((sum, yi) => sum + Math.pow(yi - yMean, 2), 0)\r\n    const rSquared = 1 - (ssRes / ssTot)\r\n    \r\n    // 确定趋势方向\r\n    let direction: 'improving' | 'degrading' | 'stable'\r\n    const changeRate = Math.abs(slope)\r\n    \r\n    if (changeRate < 0.001) {\r\n      direction = 'stable'\r\n    } else {\r\n      // 对于某些指标，增长是负面的（如错误率、延迟）\r\n      const isNegativeMetric = metricPath.includes('errorRate') || \r\n                              metricPath.includes('avgExecutionTime') ||\r\n                              metricPath.includes('usage')\r\n      \r\n      if (isNegativeMetric) {\r\n        direction = slope > 0 ? 'degrading' : 'improving'\r\n      } else {\r\n        direction = slope > 0 ? 'improving' : 'degrading'\r\n      }\r\n    }\r\n    \r\n    // 预测未来值\r\n    const nextHourIndex = n + (3600000 / this.config.collectionInterval) // 1小时后的索引\r\n    const nextDayIndex = n + (24 * 3600000 / this.config.collectionInterval) // 1天后的索引\r\n    \r\n    return {\r\n      metric: metricPath,\r\n      direction,\r\n      changeRate: slope,\r\n      prediction: {\r\n        nextHour: slope * nextHourIndex + intercept,\r\n        nextDay: slope * nextDayIndex + intercept,\r\n        confidence: Math.max(0, Math.min(1, rSquared))\r\n      },\r\n      timeRange\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取嵌套对象值\r\n   * \r\n   * @param obj - 对象\r\n   * @param path - 路径\r\n   * @returns 值\r\n   */\r\n  private getNestedValue(obj: any, path: string): number {\r\n    return path.split('.').reduce((current, key) => current?.[key], obj) || 0\r\n  }\r\n\r\n  /**\r\n   * 计算健康评分\r\n   * \r\n   * @returns 健康评分(0-1)\r\n   */\r\n  private calculateHealthScore(): number {\r\n    if (this.metricsHistory.length === 0) {\r\n      return 1.0\r\n    }\r\n    \r\n    const currentMetrics = this.metricsHistory[this.metricsHistory.length - 1]\r\n    let score = 1.0\r\n    \r\n    // 连接池健康评分\r\n    const poolUsage = currentMetrics.connectionPool.usage\r\n    if (poolUsage > this.thresholds.connectionPool.usageCritical) {\r\n      score -= 0.3\r\n    } else if (poolUsage > this.thresholds.connectionPool.usageWarning) {\r\n      score -= 0.1\r\n    }\r\n    \r\n    // 查询性能健康评分\r\n    const avgLatency = currentMetrics.queryPerformance.avgExecutionTime\r\n    if (avgLatency > this.thresholds.queryPerformance.avgLatencyCritical) {\r\n      score -= 0.25\r\n    } else if (avgLatency > this.thresholds.queryPerformance.avgLatencyWarning) {\r\n      score -= 0.1\r\n    }\r\n    \r\n    // 错误率健康评分\r\n    const errorRate = currentMetrics.queryPerformance.errorRate\r\n    if (errorRate > this.thresholds.queryPerformance.errorRateCritical) {\r\n      score -= 0.3\r\n    } else if (errorRate > this.thresholds.queryPerformance.errorRateWarning) {\r\n      score -= 0.15\r\n    }\r\n    \r\n    // 系统资源健康评分\r\n    const memoryUsage = currentMetrics.systemResources.memoryUsage\r\n    if (memoryUsage > this.thresholds.systemResources.memoryCritical) {\r\n      score -= 0.2\r\n    } else if (memoryUsage > this.thresholds.systemResources.memoryWarning) {\r\n      score -= 0.1\r\n    }\r\n    \r\n    // 异常影响评分\r\n    const criticalAnomalies = Array.from(this.anomalies.values())\r\n      .filter(a => !a.resolved && a.severity === 'critical').length\r\n    const highAnomalies = Array.from(this.anomalies.values())\r\n      .filter(a => !a.resolved && a.severity === 'high').length\r\n    \r\n    score -= criticalAnomalies * 0.15\r\n    score -= highAnomalies * 0.05\r\n    \r\n    return Math.max(0, Math.min(1, score))\r\n  }\r\n\r\n  /**\r\n   * 生成优化建议\r\n   */\r\n  private async generateOptimizationRecommendations(): Promise<void> {\r\n    const recommendations: any[] = []\r\n    \r\n    // 基于异常生成建议\r\n    for (const anomaly of this.anomalies.values()) {\r\n      if (!anomaly.resolved) {\r\n        recommendations.push(...anomaly.recommendations.map(rec => ({\r\n          priority: anomaly.severity === 'critical' ? 'high' : 'medium',\r\n          category: 'anomaly_resolution',\r\n          description: rec,\r\n          expectedImprovement: '提升系统稳定性'\r\n        })))\r\n      }\r\n    }\r\n    \r\n    // 基于趋势生成建议\r\n    for (const trend of this.trends.values()) {\r\n      if (trend.direction === 'degrading' && trend.prediction.confidence > 0.7) {\r\n        recommendations.push({\r\n          priority: 'medium',\r\n          category: 'trend_prevention',\r\n          description: `${trend.metric} 指标呈下降趋势，建议提前优化`,\r\n          expectedImprovement: '防止性能进一步恶化'\r\n        })\r\n      }\r\n    }\r\n    \r\n    this.emit('recommendations-generated', recommendations)\r\n  }\r\n\r\n  /**\r\n   * 发送告警\r\n   * \r\n   * @param anomaly - 异常信息\r\n   */\r\n  private sendAlert(anomaly: AnomalyDetection): void {\r\n    console.warn(`🚨 Performance Alert: ${anomaly.description}`)\r\n    \r\n    this.emit('alert', {\r\n      type: 'performance',\r\n      severity: anomaly.severity,\r\n      message: anomaly.description,\r\n      anomaly\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 生成性能报告\r\n   */\r\n  private async generateReport(): Promise<PerformanceReport> {\r\n    const now = new Date()\r\n    const oneHourAgo = new Date(now.getTime() - this.config.reportInterval)\r\n    \r\n    const reportMetrics = this.metricsHistory.filter(\r\n      m => m.timestamp >= oneHourAgo\r\n    )\r\n    \r\n    if (reportMetrics.length === 0) {\r\n      throw new Error('No metrics available for report generation')\r\n    }\r\n    \r\n    const avgMetrics = this.calculateAverageMetrics(reportMetrics)\r\n    \r\n    const report: PerformanceReport = {\r\n      id: `report_${Date.now()}`,\r\n      generatedAt: now,\r\n      timeRange: {\r\n        start: oneHourAgo,\r\n        end: now\r\n      },\r\n      healthScore: this.lastHealthScore,\r\n      summary: {\r\n        avgResponseTime: avgMetrics.queryPerformance.avgExecutionTime,\r\n        errorRate: avgMetrics.queryPerformance.errorRate,\r\n        throughput: avgMetrics.queryPerformance.throughput,\r\n        availability: this.calculateAvailability(reportMetrics)\r\n      },\r\n      anomalies: {\r\n        total: this.anomalies.size,\r\n        byType: this.getAnomaliesByType(),\r\n        bySeverity: this.getAnomaliesBySeverity()\r\n      },\r\n      trends: Array.from(this.trends.values()),\r\n      recommendations: await this.getRecommendations(),\r\n      detailedMetrics: reportMetrics\r\n    }\r\n    \r\n    this.emit('report-generated', report)\r\n    return report\r\n  }\r\n\r\n  /**\r\n   * 计算平均指标\r\n   * \r\n   * @param metrics - 指标数组\r\n   * @returns 平均指标\r\n   */\r\n  private calculateAverageMetrics(metrics: PerformanceMetrics[]): PerformanceMetrics {\r\n    const count = metrics.length\r\n    \r\n    const avg = metrics.reduce((acc, m) => {\r\n      acc.connectionPool.active += m.connectionPool.active\r\n      acc.connectionPool.idle += m.connectionPool.idle\r\n      acc.connectionPool.total += m.connectionPool.total\r\n      acc.connectionPool.usage += m.connectionPool.usage\r\n      acc.connectionPool.waitingCount += m.connectionPool.waitingCount\r\n      acc.connectionPool.avgWaitTime += m.connectionPool.avgWaitTime\r\n      \r\n      acc.queryPerformance.totalQueries += m.queryPerformance.totalQueries\r\n      acc.queryPerformance.avgExecutionTime += m.queryPerformance.avgExecutionTime\r\n      acc.queryPerformance.slowQueries += m.queryPerformance.slowQueries\r\n      acc.queryPerformance.errorRate += m.queryPerformance.errorRate\r\n      acc.queryPerformance.throughput += m.queryPerformance.throughput\r\n      \r\n      acc.systemResources.cpuUsage += m.systemResources.cpuUsage\r\n      acc.systemResources.memoryUsage += m.systemResources.memoryUsage\r\n      acc.systemResources.diskIO += m.systemResources.diskIO\r\n      acc.systemResources.networkIO += m.systemResources.networkIO\r\n      \r\n      acc.database.connections += m.database.connections\r\n      acc.database.transactions += m.database.transactions\r\n      acc.database.locks += m.database.locks\r\n      acc.database.deadlocks += m.database.deadlocks\r\n      acc.database.cacheHitRate += m.database.cacheHitRate\r\n      \r\n      return acc\r\n    }, {\r\n      timestamp: new Date(),\r\n      connectionPool: { active: 0, idle: 0, total: 0, usage: 0, waitingCount: 0, avgWaitTime: 0 },\r\n      queryPerformance: { totalQueries: 0, avgExecutionTime: 0, slowQueries: 0, errorRate: 0, throughput: 0 },\r\n      systemResources: { cpuUsage: 0, memoryUsage: 0, diskIO: 0, networkIO: 0 },\r\n      database: { connections: 0, transactions: 0, locks: 0, deadlocks: 0, cacheHitRate: 0 }\r\n    })\r\n    \r\n    // 计算平均值\r\n    Object.keys(avg).forEach(category => {\r\n      if (category !== 'timestamp') {\r\n        Object.keys(avg[category]).forEach(metric => {\r\n          avg[category][metric] /= count\r\n        })\r\n      }\r\n    })\r\n    \r\n    return avg as PerformanceMetrics\r\n  }\r\n\r\n  /**\r\n   * 计算可用性\r\n   * \r\n   * @param metrics - 指标数组\r\n   * @returns 可用性百分比\r\n   */\r\n  private calculateAvailability(metrics: PerformanceMetrics[]): number {\r\n    const totalSamples = metrics.length\r\n    const healthySamples = metrics.filter(m => \r\n      m.queryPerformance.errorRate < this.thresholds.queryPerformance.errorRateWarning &&\r\n      m.connectionPool.usage < this.thresholds.connectionPool.usageWarning\r\n    ).length\r\n    \r\n    return healthySamples / totalSamples\r\n  }\r\n\r\n  /**\r\n   * 按类型统计异常\r\n   * \r\n   * @returns 异常类型统计\r\n   */\r\n  private getAnomaliesByType(): Record<AnomalyType, number> {\r\n    const stats = {} as Record<AnomalyType, number>\r\n    \r\n    Object.values(AnomalyType).forEach(type => {\r\n      stats[type] = 0\r\n    })\r\n    \r\n    for (const anomaly of this.anomalies.values()) {\r\n      if (!anomaly.resolved) {\r\n        stats[anomaly.type]++\r\n      }\r\n    }\r\n    \r\n    return stats\r\n  }\r\n\r\n  /**\r\n   * 按严重程度统计异常\r\n   * \r\n   * @returns 异常严重程度统计\r\n   */\r\n  private getAnomaliesBySeverity(): Record<string, number> {\r\n    const stats = {\r\n      low: 0,\r\n      medium: 0,\r\n      high: 0,\r\n      critical: 0\r\n    }\r\n    \r\n    for (const anomaly of this.anomalies.values()) {\r\n      if (!anomaly.resolved) {\r\n        stats[anomaly.severity]++\r\n      }\r\n    }\r\n    \r\n    return stats\r\n  }\r\n\r\n  /**\r\n   * 获取优化建议\r\n   * \r\n   * @returns 优化建议列表\r\n   */\r\n  private async getRecommendations(): Promise<any[]> {\r\n    const recommendations: any[] = []\r\n    \r\n    // 基于当前健康评分生成建议\r\n    if (this.lastHealthScore < 0.7) {\r\n      recommendations.push({\r\n        priority: 'high',\r\n        category: 'health_improvement',\r\n        description: '系统健康评分较低，建议立即检查和优化',\r\n        expectedImprovement: '提升整体系统健康度'\r\n      })\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 处理数据库指标\r\n   * \r\n   * @param metrics - 数据库指标\r\n   */\r\n  private handleDatabaseMetrics(metrics: any): void {\r\n    // 实时检查关键指标\r\n    if (metrics.connectionPoolUsage > 0.9) {\r\n      this.emit('critical-alert', {\r\n        type: 'connection_pool',\r\n        message: 'Connection pool usage critical',\r\n        value: metrics.connectionPoolUsage\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理连接池分析\r\n   * \r\n   * @param analysis - 连接池分析结果\r\n   */\r\n  private handlePoolAnalysis(analysis: any): void {\r\n    if (analysis.bottlenecks && analysis.bottlenecks.length > 0) {\r\n      this.emit('bottleneck-detected', {\r\n        type: 'connection_pool',\r\n        bottlenecks: analysis.bottlenecks\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理慢查询\r\n   * \r\n   * @param query - 慢查询信息\r\n   */\r\n  private handleSlowQuery(query: any): void {\r\n    const anomaly: AnomalyDetection = {\r\n      id: `slow_query_${Date.now()}`,\r\n      type: AnomalyType.SLOW_QUERY,\r\n      severity: query.executionTime > 5000 ? 'critical' : 'high',\r\n      description: `检测到慢查询: ${query.executionTime}ms`,\r\n      detectedAt: new Date(),\r\n      metrics: {},\r\n      threshold: {\r\n        expected: this.thresholds.queryPerformance.slowQueryThreshold,\r\n        actual: query.executionTime,\r\n        deviation: query.executionTime - this.thresholds.queryPerformance.slowQueryThreshold\r\n      },\r\n      recommendations: [\r\n        '优化查询语句',\r\n        '添加适当的索引',\r\n        '检查查询计划'\r\n      ],\r\n      resolved: false\r\n    }\r\n    \r\n    this.anomalies.set(anomaly.id, anomaly)\r\n    this.emit('anomaly-detected', anomaly)\r\n  }\r\n\r\n  /**\r\n   * 获取当前状态\r\n   * \r\n   * @returns 监控器状态\r\n   */\r\n  getStatus(): {\r\n    isMonitoring: boolean\r\n    healthScore: number\r\n    metricsCount: number\r\n    anomaliesCount: number\r\n    trendsCount: number\r\n    config: MonitoringConfig\r\n  } {\r\n    return {\r\n      isMonitoring: this.isMonitoring,\r\n      healthScore: this.lastHealthScore,\r\n      metricsCount: this.metricsHistory.length,\r\n      anomaliesCount: this.anomalies.size,\r\n      trendsCount: this.trends.size,\r\n      config: { ...this.config }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取最新指标\r\n   * \r\n   * @returns 最新性能指标\r\n   */\r\n  getLatestMetrics(): PerformanceMetrics | null {\r\n    return this.metricsHistory.length > 0 \r\n      ? this.metricsHistory[this.metricsHistory.length - 1] \r\n      : null\r\n  }\r\n\r\n  /**\r\n   * 获取异常列表\r\n   * \r\n   * @returns 异常列表\r\n   */\r\n  getAnomalies(): AnomalyDetection[] {\r\n    return Array.from(this.anomalies.values())\r\n  }\r\n\r\n  /**\r\n   * 获取趋势列表\r\n   * \r\n   * @returns 趋势列表\r\n   */\r\n  getTrends(): PerformanceTrend[] {\r\n    return Array.from(this.trends.values())\r\n  }\r\n\r\n  /**\r\n   * 更新配置\r\n   * \r\n   * @param newConfig - 新配置\r\n   */\r\n  updateConfig(newConfig: Partial<MonitoringConfig>): void {\r\n    Object.assign(this.config, newConfig)\r\n    \r\n    // 重启相关定时器\r\n    if (this.isMonitoring) {\r\n      this.stop().then(() => this.start())\r\n    }\r\n    \r\n    console.log('Performance monitor configuration updated')\r\n    this.emit('config-updated', this.config)\r\n  }\r\n\r\n  /**\r\n   * 更新阈值\r\n   * \r\n   * @param newThresholds - 新阈值\r\n   */\r\n  updateThresholds(newThresholds: Partial<PerformanceThresholds>): void {\r\n    Object.assign(this.thresholds, newThresholds)\r\n    \r\n    console.log('Performance thresholds updated')\r\n    this.emit('thresholds-updated', this.thresholds)\r\n  }\r\n\r\n  /**\r\n   * 解决异常\r\n   * \r\n   * @param anomalyId - 异常ID\r\n   */\r\n  resolveAnomaly(anomalyId: string): void {\r\n    const anomaly = this.anomalies.get(anomalyId)\r\n    if (anomaly) {\r\n      anomaly.resolved = true\r\n      anomaly.resolvedAt = new Date()\r\n      \r\n      console.log(`Anomaly resolved: ${anomaly.description}`)\r\n      this.emit('anomaly-resolved', anomaly)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 手动触发分析\r\n   */\r\n  async triggerAnalysis(): Promise<void> {\r\n    await this.performAnalysis()\r\n  }\r\n\r\n  /**\r\n   * 手动生成报告\r\n   */\r\n  async triggerReport(): Promise<PerformanceReport> {\r\n    return await this.generateReport()\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const performanceMonitorEnhancer = new PerformanceMonitorEnhancer()\r\n\r\n// 导出类型\r\nexport type {\r\n  PerformanceMetrics,\r\n  AnomalyDetection,\r\n  PerformanceTrend,\r\n  PerformanceThresholds,\r\n  MonitoringConfig,\r\n  PerformanceReport\r\n}\r\n\r\nexport { AnomalyType }\r\n"],"mappings":"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","ignoreList":[]}