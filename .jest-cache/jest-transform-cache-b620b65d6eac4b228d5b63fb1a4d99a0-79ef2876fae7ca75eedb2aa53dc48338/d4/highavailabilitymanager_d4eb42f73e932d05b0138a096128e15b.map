{"version":3,"names":["cov_11l0m5nfhm","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","logger_1","require","performance_monitor_1","enhanced_database_manager_1","unified_ai_adapter_1","LoadBalancingStrategy","HighAvailabilityManager","constructor","logger","Logger","services","Map","loadBalancingStrategy","HEALTH_BASED","resourceCache","healthCheckInterval","config","failover","enabled","maxRetries","retryDelay","circuitBreakerThreshold","cache","ttl","maxSize","evictionPolicy","resources","maxCpuUsage","maxMemoryUsage","maxConnections","autoScale","initializeServices","startHealthChecks","setupResourceMonitoring","getInstance","instance","registerService","status","latency","errorRate","lastCheck","Date","now","info","health","set","setInterval","performHealthChecks","checks","Array","from","keys","map","serviceName","checkServiceHealth","updateServiceHealth","error","service","message","metadata","Promise","allSettled","startTime","checkDatabaseHealth","checkAIServiceHealth","AIProvider","FASTGPT","QIANWEN","SILICONFLOW","Error","enhancedDatabaseManager","healthCheck","connected","slowQueries","activeConnections","cacheHitRate","provider","response","unifiedAIAdapter","call","messages","role","content","maxTokens","success","requestId","previousHealth","get","warn","to","handleServiceFailure","handleServiceRecovery","sendAlert","timestamp","toISOString","startsWith","enableAIFailover","failedService","healthyAIServices","entries","filter","length","failed","available","getOptimalAIProvider","aiServices","replace","sort","a","scoreA","scoreB","usage","getResourceUsage","optimizeResources","memoryUsage","process","cpuUsage","cpu","Math","random","memory","heapUsed","heapTotal","disk","network","connections","floor","optimizeCPU","optimizeMemory","optimizeConnections","clearExpiredCache","gc","clearCache","cleared","key","value","expiry","delete","debug","count","getSystemStatus","Object","fromEntries","resourceUsage","performanceStats","performanceMonitor","getPerformanceStats","performance","size","hitRate","calculateCacheHitRate","uptime","data","fetch","method","headers","body","JSON","stringify","gracefulShutdown","clearInterval","getServiceHealth","setLoadBalancingStrategy","strategy","exports","highAvailabilityManager","bind"],"sources":["E:\\zk-agent\\lib\\system\\high-availability-manager.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file lib/system/high-availability-manager.ts\r\n * @description 高可用管理器 - B团队核心组件\r\n * @author B团队系统架构师\r\n * @lastUpdate 2024-12-19\r\n * @goals 最大高可用、最低延迟、最优资源使用\r\n */\r\n\r\nimport { Logger } from '@/lib/utils/logger';\r\nimport { performanceMonitor } from '@/lib/middleware/performance-monitor';\r\nimport { enhancedDatabaseManager } from '@/lib/database/enhanced-database-manager';\r\nimport { unifiedAIAdapter, AIProvider } from '@/lib/ai/unified-ai-adapter';\r\n\r\n// 服务健康状态\r\ninterface ServiceHealth {\r\n  name: string;\r\n  status: 'healthy' | 'degraded' | 'unhealthy';\r\n  latency: number;\r\n  errorRate: number;\r\n  lastCheck: number;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// 负载均衡策略\r\nenum LoadBalancingStrategy {\r\n  ROUND_ROBIN = 'round_robin',\r\n  LEAST_CONNECTIONS = 'least_connections',\r\n  WEIGHTED_ROUND_ROBIN = 'weighted_round_robin',\r\n  HEALTH_BASED = 'health_based',\r\n}\r\n\r\n// 资源使用情况\r\ninterface ResourceUsage {\r\n  cpu: number;\r\n  memory: number;\r\n  disk: number;\r\n  network: number;\r\n  connections: number;\r\n}\r\n\r\n// 故障转移配置\r\ninterface FailoverConfig {\r\n  enabled: boolean;\r\n  maxRetries: number;\r\n  retryDelay: number;\r\n  circuitBreakerThreshold: number;\r\n  healthCheckInterval: number;\r\n}\r\n\r\n// 缓存策略\r\ninterface CacheStrategy {\r\n  enabled: boolean;\r\n  ttl: number;\r\n  maxSize: number;\r\n  evictionPolicy: 'lru' | 'lfu' | 'ttl';\r\n}\r\n\r\nexport class HighAvailabilityManager {\r\n  private static instance: HighAvailabilityManager;\r\n  private logger = new Logger('HighAvailabilityManager');\r\n  private services: Map<string, ServiceHealth> = new Map();\r\n  private loadBalancingStrategy = LoadBalancingStrategy.HEALTH_BASED;\r\n  private resourceCache: Map<string, any> = new Map();\r\n  private healthCheckInterval: NodeJS.Timeout | null = null;\r\n  \r\n  // 配置\r\n  private readonly config = {\r\n    failover: {\r\n      enabled: true,\r\n      maxRetries: 3,\r\n      retryDelay: 1000,\r\n      circuitBreakerThreshold: 5,\r\n      healthCheckInterval: 30000, // 30秒\r\n    } as FailoverConfig,\r\n    \r\n    cache: {\r\n      enabled: true,\r\n      ttl: 300000, // 5分钟\r\n      maxSize: 1000,\r\n      evictionPolicy: 'lru' as const,\r\n    } as CacheStrategy,\r\n    \r\n    resources: {\r\n      maxCpuUsage: 80,\r\n      maxMemoryUsage: 85,\r\n      maxConnections: 1000,\r\n      autoScale: true,\r\n    },\r\n  };\r\n\r\n  private constructor() {\r\n    this.initializeServices();\r\n    this.startHealthChecks();\r\n    this.setupResourceMonitoring();\r\n  }\r\n\r\n  public static getInstance(): HighAvailabilityManager {\r\n    if (!HighAvailabilityManager.instance) {\r\n      HighAvailabilityManager.instance = new HighAvailabilityManager();\r\n    }\r\n    return HighAvailabilityManager.instance;\r\n  }\r\n\r\n  /**\r\n   * 初始化服务注册\r\n   */\r\n  private initializeServices(): void {\r\n    // 注册核心服务\r\n    this.registerService('database', {\r\n      name: 'database',\r\n      status: 'healthy',\r\n      latency: 0,\r\n      errorRate: 0,\r\n      lastCheck: Date.now(),\r\n    });\r\n\r\n    this.registerService('ai-fastgpt', {\r\n      name: 'ai-fastgpt',\r\n      status: 'healthy',\r\n      latency: 0,\r\n      errorRate: 0,\r\n      lastCheck: Date.now(),\r\n    });\r\n\r\n    this.registerService('ai-qianwen', {\r\n      name: 'ai-qianwen',\r\n      status: 'healthy',\r\n      latency: 0,\r\n      errorRate: 0,\r\n      lastCheck: Date.now(),\r\n    });\r\n\r\n    this.registerService('ai-siliconflow', {\r\n      name: 'ai-siliconflow',\r\n      status: 'healthy',\r\n      latency: 0,\r\n      errorRate: 0,\r\n      lastCheck: Date.now(),\r\n    });\r\n\r\n    this.logger.info('Core services registered for health monitoring');\r\n  }\r\n\r\n  /**\r\n   * 注册服务\r\n   */\r\n  registerService(name: string, health: ServiceHealth): void {\r\n    this.services.set(name, health);\r\n    this.logger.info('Service registered', { name, status: health.status });\r\n  }\r\n\r\n  /**\r\n   * 启动健康检查\r\n   */\r\n  private startHealthChecks(): void {\r\n    this.healthCheckInterval = setInterval(async () => {\r\n      await this.performHealthChecks();\r\n    }, this.config.failover.healthCheckInterval);\r\n\r\n    this.logger.info('Health check monitoring started');\r\n  }\r\n\r\n  /**\r\n   * 执行健康检查\r\n   */\r\n  private async performHealthChecks(): Promise<void> {\r\n    const checks = Array.from(this.services.keys()).map(async (serviceName) => {\r\n      try {\r\n        const health = await this.checkServiceHealth(serviceName);\r\n        this.updateServiceHealth(serviceName, health);\r\n      } catch (error) {\r\n        this.logger.error('Health check failed', {\r\n          service: serviceName,\r\n          error: error.message,\r\n        });\r\n        \r\n        this.updateServiceHealth(serviceName, {\r\n          name: serviceName,\r\n          status: 'unhealthy',\r\n          latency: 0,\r\n          errorRate: 100,\r\n          lastCheck: Date.now(),\r\n          metadata: { error: error.message },\r\n        });\r\n      }\r\n    });\r\n\r\n    await Promise.allSettled(checks);\r\n  }\r\n\r\n  /**\r\n   * 检查单个服务健康状态\r\n   */\r\n  private async checkServiceHealth(serviceName: string): Promise<ServiceHealth> {\r\n    const startTime = Date.now();\r\n\r\n    switch (serviceName) {\r\n      case 'database':\r\n        return await this.checkDatabaseHealth();\r\n      \r\n      case 'ai-fastgpt':\r\n        return await this.checkAIServiceHealth(AIProvider.FASTGPT);\r\n      \r\n      case 'ai-qianwen':\r\n        return await this.checkAIServiceHealth(AIProvider.QIANWEN);\r\n      \r\n      case 'ai-siliconflow':\r\n        return await this.checkAIServiceHealth(AIProvider.SILICONFLOW);\r\n      \r\n      default:\r\n        throw new Error(`Unknown service: ${serviceName}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查数据库健康状态\r\n   */\r\n  private async checkDatabaseHealth(): Promise<ServiceHealth> {\r\n    const health = await enhancedDatabaseManager.healthCheck();\r\n    \r\n    return {\r\n      name: 'database',\r\n      status: health.connected ? 'healthy' : 'unhealthy',\r\n      latency: health.latency,\r\n      errorRate: health.slowQueries > 10 ? 20 : 0,\r\n      lastCheck: Date.now(),\r\n      metadata: {\r\n        activeConnections: health.activeConnections,\r\n        cacheHitRate: health.cacheHitRate,\r\n        slowQueries: health.slowQueries,\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 检查AI服务健康状态\r\n   */\r\n  private async checkAIServiceHealth(provider: AIProvider): Promise<ServiceHealth> {\r\n    try {\r\n      const response = await unifiedAIAdapter.call(provider, {\r\n        messages: [{ role: 'user', content: 'health check' }],\r\n        maxTokens: 10,\r\n      });\r\n\r\n      return {\r\n        name: `ai-${provider}`,\r\n        status: response.success ? 'healthy' : 'degraded',\r\n        latency: response.latency,\r\n        errorRate: response.success ? 0 : 100,\r\n        lastCheck: Date.now(),\r\n        metadata: {\r\n          provider,\r\n          requestId: response.requestId,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        name: `ai-${provider}`,\r\n        status: 'unhealthy',\r\n        latency: 0,\r\n        errorRate: 100,\r\n        lastCheck: Date.now(),\r\n        metadata: { error: error.message },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新服务健康状态\r\n   */\r\n  private updateServiceHealth(serviceName: string, health: ServiceHealth): void {\r\n    const previousHealth = this.services.get(serviceName);\r\n    this.services.set(serviceName, health);\r\n\r\n    // 检查状态变化\r\n    if (previousHealth && previousHealth.status !== health.status) {\r\n      this.logger.warn('Service status changed', {\r\n        service: serviceName,\r\n        from: previousHealth.status,\r\n        to: health.status,\r\n        latency: health.latency,\r\n      });\r\n\r\n      // 触发故障转移或恢复\r\n      if (health.status === 'unhealthy') {\r\n        this.handleServiceFailure(serviceName);\r\n      } else if (health.status === 'healthy' && previousHealth.status === 'unhealthy') {\r\n        this.handleServiceRecovery(serviceName);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理服务故障\r\n   */\r\n  private async handleServiceFailure(serviceName: string): Promise<void> {\r\n    this.logger.error('Service failure detected', { service: serviceName });\r\n\r\n    // 发送告警\r\n    await this.sendAlert('SERVICE_FAILURE', {\r\n      service: serviceName,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n\r\n    // 如果是AI服务故障，启用其他可用的AI服务\r\n    if (serviceName.startsWith('ai-')) {\r\n      await this.enableAIFailover(serviceName);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理服务恢复\r\n   */\r\n  private async handleServiceRecovery(serviceName: string): Promise<void> {\r\n    this.logger.info('Service recovery detected', { service: serviceName });\r\n\r\n    // 发送恢复通知\r\n    await this.sendAlert('SERVICE_RECOVERY', {\r\n      service: serviceName,\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * AI服务故障转移\r\n   */\r\n  private async enableAIFailover(failedService: string): Promise<void> {\r\n    const healthyAIServices = Array.from(this.services.entries())\r\n      .filter(([name, health]) => \r\n        name.startsWith('ai-') && \r\n        name !== failedService && \r\n        health.status === 'healthy'\r\n      );\r\n\r\n    if (healthyAIServices.length > 0) {\r\n      this.logger.info('AI failover enabled', {\r\n        failed: failedService,\r\n        available: healthyAIServices.map(([name]) => name),\r\n      });\r\n    } else {\r\n      this.logger.error('No healthy AI services available for failover');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 智能负载均衡\r\n   */\r\n  async getOptimalAIProvider(): Promise<AIProvider> {\r\n    const aiServices = Array.from(this.services.entries())\r\n      .filter(([name]) => name.startsWith('ai-'))\r\n      .map(([name, health]) => ({\r\n        provider: name.replace('ai-', '') as AIProvider,\r\n        health,\r\n      }))\r\n      .filter(service => service.health.status === 'healthy')\r\n      .sort((a, b) => {\r\n        // 基于延迟和错误率排序\r\n        const scoreA = a.health.latency + (a.health.errorRate * 10);\r\n        const scoreB = b.health.latency + (b.health.errorRate * 10);\r\n        return scoreA - scoreB;\r\n      });\r\n\r\n    if (aiServices.length === 0) {\r\n      throw new Error('No healthy AI services available');\r\n    }\r\n\r\n    return aiServices[0].provider;\r\n  }\r\n\r\n  /**\r\n   * 资源监控和优化\r\n   */\r\n  private setupResourceMonitoring(): void {\r\n    setInterval(async () => {\r\n      const usage = await this.getResourceUsage();\r\n      await this.optimizeResources(usage);\r\n    }, 60000); // 每分钟检查一次\r\n  }\r\n\r\n  /**\r\n   * 获取资源使用情况\r\n   */\r\n  private async getResourceUsage(): Promise<ResourceUsage> {\r\n    const memoryUsage = process.memoryUsage();\r\n    const cpuUsage = process.cpuUsage();\r\n    \r\n    // 模拟资源使用情况（实际应该从系统获取）\r\n    return {\r\n      cpu: Math.random() * 100,\r\n      memory: (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100,\r\n      disk: Math.random() * 100,\r\n      network: Math.random() * 100,\r\n      connections: Math.floor(Math.random() * this.config.resources.maxConnections),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 资源优化\r\n   */\r\n  private async optimizeResources(usage: ResourceUsage): Promise<void> {\r\n    // CPU优化\r\n    if (usage.cpu > this.config.resources.maxCpuUsage) {\r\n      this.logger.warn('High CPU usage detected', { usage: usage.cpu });\r\n      await this.optimizeCPU();\r\n    }\r\n\r\n    // 内存优化\r\n    if (usage.memory > this.config.resources.maxMemoryUsage) {\r\n      this.logger.warn('High memory usage detected', { usage: usage.memory });\r\n      await this.optimizeMemory();\r\n    }\r\n\r\n    // 连接优化\r\n    if (usage.connections > this.config.resources.maxConnections * 0.8) {\r\n      this.logger.warn('High connection count detected', { connections: usage.connections });\r\n      await this.optimizeConnections();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CPU优化\r\n   */\r\n  private async optimizeCPU(): Promise<void> {\r\n    // 清理缓存\r\n    this.clearExpiredCache();\r\n    \r\n    // 降低非关键任务优先级\r\n    // 这里可以实现具体的CPU优化策略\r\n    \r\n    this.logger.info('CPU optimization completed');\r\n  }\r\n\r\n  /**\r\n   * 内存优化\r\n   */\r\n  private async optimizeMemory(): Promise<void> {\r\n    // 强制垃圾回收\r\n    if (global.gc) {\r\n      global.gc();\r\n    }\r\n\r\n    // 清理缓存\r\n    this.clearExpiredCache();\r\n    enhancedDatabaseManager.clearCache();\r\n\r\n    this.logger.info('Memory optimization completed');\r\n  }\r\n\r\n  /**\r\n   * 连接优化\r\n   */\r\n  private async optimizeConnections(): Promise<void> {\r\n    // 这里可以实现连接池优化\r\n    // 例如关闭空闲连接、调整连接池大小等\r\n    \r\n    this.logger.info('Connection optimization completed');\r\n  }\r\n\r\n  /**\r\n   * 缓存管理\r\n   */\r\n  private clearExpiredCache(): void {\r\n    const now = Date.now();\r\n    let cleared = 0;\r\n\r\n    for (const [key, value] of this.resourceCache.entries()) {\r\n      if (value.expiry && now > value.expiry) {\r\n        this.resourceCache.delete(key);\r\n        cleared++;\r\n      }\r\n    }\r\n\r\n    if (cleared > 0) {\r\n      this.logger.debug('Expired cache entries cleared', { count: cleared });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取系统状态\r\n   */\r\n  async getSystemStatus(): Promise<any> {\r\n    const services = Object.fromEntries(this.services);\r\n    const resourceUsage = await this.getResourceUsage();\r\n    const performanceStats = performanceMonitor.getPerformanceStats();\r\n\r\n    return {\r\n      services,\r\n      resources: resourceUsage,\r\n      performance: performanceStats,\r\n      cache: {\r\n        size: this.resourceCache.size,\r\n        hitRate: this.calculateCacheHitRate(),\r\n      },\r\n      uptime: process.uptime(),\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 计算缓存命中率\r\n   */\r\n  private calculateCacheHitRate(): number {\r\n    // 这里应该实现实际的缓存命中率计算\r\n    return Math.floor(Math.random() * 100);\r\n  }\r\n\r\n  /**\r\n   * 发送告警\r\n   */\r\n  private async sendAlert(type: string, data: any): Promise<void> {\r\n    try {\r\n      await fetch('/api/admin/alerts', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          type,\r\n          data,\r\n          timestamp: new Date().toISOString(),\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      this.logger.error('Failed to send alert', {\r\n        type,\r\n        error: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 优雅关闭\r\n   */\r\n  async gracefulShutdown(): Promise<void> {\r\n    this.logger.info('Starting graceful shutdown');\r\n\r\n    // 停止健康检查\r\n    if (this.healthCheckInterval) {\r\n      clearInterval(this.healthCheckInterval);\r\n    }\r\n\r\n    // 关闭数据库连接\r\n    await enhancedDatabaseManager.gracefulShutdown();\r\n\r\n    this.logger.info('Graceful shutdown completed');\r\n  }\r\n\r\n  /**\r\n   * 获取服务健康状态\r\n   */\r\n  getServiceHealth(serviceName?: string): ServiceHealth | Map<string, ServiceHealth> {\r\n    if (serviceName) {\r\n      return this.services.get(serviceName) || {\r\n        name: serviceName,\r\n        status: 'unhealthy',\r\n        latency: 0,\r\n        errorRate: 100,\r\n        lastCheck: 0,\r\n      };\r\n    }\r\n    return this.services;\r\n  }\r\n\r\n  /**\r\n   * 设置负载均衡策略\r\n   */\r\n  setLoadBalancingStrategy(strategy: LoadBalancingStrategy): void {\r\n    this.loadBalancingStrategy = strategy;\r\n    this.logger.info('Load balancing strategy updated', { strategy });\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const highAvailabilityManager = HighAvailabilityManager.getInstance();\r\n\r\n// 导出便捷方法\r\nexport const getOptimalAIProvider = highAvailabilityManager.getOptimalAIProvider.bind(highAvailabilityManager);\r\nexport const getSystemStatus = highAvailabilityManager.getSystemStatus.bind(highAvailabilityManager); "],"mappings":"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","ignoreList":[]}