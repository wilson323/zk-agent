c332f62cdf33f7f237aea85390ec861b
"use strict";
/**
 * @file fastgpt.test.ts
 * @description FastGPT相关API路由错误处理测试
 * @author ZK-Agent Team
 * @date 2025-01-27
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const server_1 = require("next/server");
const route_1 = require("@/app/api/fastgpt/chat/route");
const route_2 = require("@/app/api/fastgpt/test-connection/route");
const route_3 = require("@/app/api/fastgpt/health/route");
const route_4 = require("@/app/api/fastgpt/init-chat/route");
const route_5 = require("@/app/api/fastgpt/feedback/route");
const global_error_handler_1 = require("@/lib/middleware/global-error-handler");
(0, vitest_1.describe)('FastGPT API Routes Error Handling', () => {
    let errorHandler;
    (0, vitest_1.beforeEach)(() => {
        errorHandler = global_error_handler_1.GlobalErrorHandler.getInstance();
        errorHandler.reset?.();
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.afterEach)(() => {
        errorHandler.reset?.();
    });
    (0, vitest_1.describe)('Chat Route (/api/fastgpt/chat)', () => {
        (0, vitest_1.it)('should handle missing API key error', async () => {
            // Mock missing API key
            const originalApiKey = process.env['FASTGPT_API_KEY'];
            delete process.env['FASTGPT_API_KEY'];
            try {
                const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        messages: [{ role: 'user', content: 'Hello' }]
                    })
                });
                const response = await (0, route_1.POST)(request);
                const data = await response.json();
                (0, vitest_1.expect)(response.status).toBe(500);
                (0, vitest_1.expect)(data.error).toBeDefined();
                (0, vitest_1.expect)(data.code).toBe('CONFIGURATION_ERROR');
            }
            finally {
                if (originalApiKey) {
                    process.env['FASTGPT_API_KEY'] = originalApiKey;
                }
            }
        });
        (0, vitest_1.it)('should handle invalid message format error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: 'invalid format'
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle FastGPT API timeout error', async () => {
            // Mock fetch to simulate timeout
            global.fetch = vitest_1.vi.fn().mockImplementation(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Request timeout')), 100)));
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: [{ role: 'user', content: 'Hello' }]
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(504);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('TIMEOUT_ERROR');
        });
        (0, vitest_1.it)('should handle FastGPT API rate limit error', async () => {
            // Mock fetch to simulate rate limit
            global.fetch = vitest_1.vi.fn().mockResolvedValue({
                ok: false,
                status: 429,
                json: () => Promise.resolve({ error: 'Rate limit exceeded' })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: [{ role: 'user', content: 'Hello' }]
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(429);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('RATE_LIMIT_ERROR');
        });
        (0, vitest_1.it)('should handle FastGPT API server error', async () => {
            // Mock fetch to simulate server error
            global.fetch = vitest_1.vi.fn().mockResolvedValue({
                ok: false,
                status: 500,
                json: () => Promise.resolve({ error: 'Internal server error' })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: [{ role: 'user', content: 'Hello' }]
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(502);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('EXTERNAL_API_ERROR');
        });
    });
    (0, vitest_1.describe)('Test Connection Route (/api/fastgpt/test-connection)', () => {
        (0, vitest_1.it)('should handle missing base URL error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/test-connection', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    useProxy: false
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle invalid URL format error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/test-connection', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    baseUrl: 'invalid-url',
                    useProxy: false
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle connection refused error', async () => {
            // Mock fetch to simulate connection refused
            global.fetch = vitest_1.vi.fn().mockRejectedValue(new Error('ECONNREFUSED'));
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/test-connection', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    baseUrl: 'https://unreachable-server.com',
                    useProxy: false
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(503);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('CONNECTION_ERROR');
        });
    });
    (0, vitest_1.describe)('Health Route (/api/fastgpt/health)', () => {
        (0, vitest_1.it)('should handle service unavailable error', async () => {
            // Mock fetch to simulate service unavailable
            global.fetch = vitest_1.vi.fn().mockResolvedValue({
                ok: false,
                status: 503,
                json: () => Promise.resolve({ error: 'Service unavailable' })
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/health', {
                method: 'GET'
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(503);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('SERVICE_UNAVAILABLE');
        });
    });
    (0, vitest_1.describe)('Init Chat Route (/api/fastgpt/init-chat)', () => {
        (0, vitest_1.it)('should handle missing chat configuration error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/init-chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });
            const response = await (0, route_4.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
    });
    (0, vitest_1.describe)('Feedback Route (/api/fastgpt/feedback)', () => {
        (0, vitest_1.it)('should handle missing feedback data error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/feedback', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });
            const response = await (0, route_5.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle invalid rating value error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/feedback', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    rating: 10, // Invalid rating (should be 1-5)
                    comment: 'Test feedback'
                })
            });
            const response = await (0, route_5.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
    });
    (0, vitest_1.describe)('Error Recovery and Retry Logic', () => {
        (0, vitest_1.it)('should implement exponential backoff for retries', async () => {
            let callCount = 0;
            global.fetch = vitest_1.vi.fn().mockImplementation(() => {
                callCount++;
                if (callCount < 3) {
                    return Promise.reject(new Error('Temporary failure'));
                }
                return Promise.resolve({
                    ok: true,
                    json: () => Promise.resolve({ success: true })
                });
            });
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: [{ role: 'user', content: 'Hello' }]
                })
            });
            const response = await (0, route_1.POST)(request);
            (0, vitest_1.expect)(callCount).toBe(3);
            (0, vitest_1.expect)(response.status).toBe(200);
        });
        (0, vitest_1.it)('should fallback to cached response on API failure', async () => {
            // Mock persistent API failure
            global.fetch = vitest_1.vi.fn().mockRejectedValue(new Error('API unavailable'));
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: [{ role: 'user', content: 'Hello' }]
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            // Should return fallback response instead of error
            (0, vitest_1.expect)(response.status).toBe(200);
            (0, vitest_1.expect)(data.fallback).toBe(true);
        });
    });
    (0, vitest_1.describe)('Circuit Breaker Integration', () => {
        (0, vitest_1.it)('should open circuit breaker after consecutive failures', async () => {
            // Configure low threshold for testing
            const originalThreshold = errorHandler.errorThreshold;
            Object.defineProperty(errorHandler, 'errorThreshold', { value: 2, writable: true, configurable: true });
            try {
                // Mock persistent failures
                global.fetch = vitest_1.vi.fn().mockRejectedValue(new Error('API failure'));
                // Trigger multiple failures
                for (let i = 0; i < 3; i++) {
                    const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            messages: [{ role: 'user', content: 'Hello' }]
                        })
                    });
                    await (0, route_1.POST)(request).catch(() => { });
                }
                (0, vitest_1.expect)(errorHandler.isCircuitBreakerOpen()).toBe(true);
            }
            finally {
                Object.defineProperty(errorHandler, 'errorThreshold', { value: originalThreshold, writable: true, configurable: true });
            }
        });
        (0, vitest_1.it)('should return circuit breaker response when open', async () => {
            // Open circuit breaker
            Object.defineProperty(errorHandler, 'circuitBreakerOpen', { value: true, writable: true, configurable: true });
            const request = new server_1.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    messages: [{ role: 'user', content: 'Hello' }]
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(503);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('CIRCUIT_BREAKER_OPEN');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,