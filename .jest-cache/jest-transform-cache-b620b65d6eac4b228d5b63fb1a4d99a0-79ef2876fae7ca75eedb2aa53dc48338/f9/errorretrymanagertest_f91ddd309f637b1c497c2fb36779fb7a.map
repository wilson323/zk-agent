{"file":"E:\\zk-agent\\__tests__\\lib\\chat\\error-retry-manager.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\chat\\error-retry-manager.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * 错误重试管理器测试\r\n * 确保智能对话的错误处理和重试机制100%可靠\r\n */\r\n\r\nimport { ErrorRetryManager } from '@/lib/chat/error-retry-manager'\r\n\r\ndescribe('ErrorRetryManager - 智能对话错误重试管理', () => {\r\n  let errorRetryManager: ErrorRetryManager\r\n  \r\n  beforeEach(() => {\r\n    errorRetryManager = new ErrorRetryManager()\r\n  })\r\n  \r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('基础功能测试', () => {\r\n    test('应该正确初始化错误重试管理器', () => {\r\n      expect(errorRetryManager).toBeDefined()\r\n      expect(errorRetryManager).toBeInstanceOf(ErrorRetryManager)\r\n    })\r\n\r\n    test('应该正确设置默认配置', () => {\r\n      const config = errorRetryManager.getConfig()\r\n      expect(config).toMatchObject({\r\n        maxRetries: expect.any(Number),\r\n        baseDelay: expect.any(Number),\r\n        maxDelay: expect.any(Number),\r\n        backoffMultiplier: expect.any(Number)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('错误分类测试', () => {\r\n    test('应该正确识别网络错误', () => {\r\n      const networkError = new Error('Network request failed')\r\n      networkError.name = 'NetworkError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(networkError)\r\n      expect(isRetryable).toBe(true)\r\n    })\r\n\r\n    test('应该正确识别超时错误', () => {\r\n      const timeoutError = new Error('Request timeout')\r\n      timeoutError.name = 'TimeoutError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(timeoutError)\r\n      expect(isRetryable).toBe(true)\r\n    })\r\n\r\n    test('应该正确识别服务器错误', () => {\r\n      const serverError = new Error('Internal server error')\r\n      serverError.name = 'ServerError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(serverError)\r\n      expect(isRetryable).toBe(true)\r\n    })\r\n\r\n    test('应该正确识别不可重试错误', () => {\r\n      const authError = new Error('Unauthorized')\r\n      authError.name = 'AuthError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(authError)\r\n      expect(isRetryable).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('重试延迟计算测试', () => {\r\n    test('应该正确计算指数退避延迟', () => {\r\n      const delay1 = errorRetryManager.calculateDelay(1)\r\n      const delay2 = errorRetryManager.calculateDelay(2)\r\n      const delay3 = errorRetryManager.calculateDelay(3)\r\n      \r\n      expect(delay1).toBeGreaterThan(0)\r\n      expect(delay2).toBeGreaterThan(delay1)\r\n      expect(delay3).toBeGreaterThan(delay2)\r\n    })\r\n\r\n    test('应该限制最大延迟时间', () => {\r\n      const maxDelay = errorRetryManager.getConfig().maxDelay\r\n      const delay = errorRetryManager.calculateDelay(10)\r\n      \r\n      expect(delay).toBeLessThanOrEqual(maxDelay)\r\n    })\r\n\r\n    test('应该添加随机抖动', () => {\r\n      const delay1 = errorRetryManager.calculateDelay(1)\r\n      const delay2 = errorRetryManager.calculateDelay(1)\r\n      \r\n      // 由于随机抖动，两次计算的延迟可能不同\r\n      expect(delay1).toBeGreaterThan(0)\r\n      expect(delay2).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  describe('重试执行测试', () => {\r\n    test('应该在成功时立即返回结果', async () => {\r\n      const successFn = jest.fn().mockResolvedValue('success')\r\n      \r\n      const result = await errorRetryManager.executeWithRetry(successFn)\r\n      \r\n      expect(result).toBe('success')\r\n      expect(successFn).toHaveBeenCalledTimes(1)\r\n    })\r\n\r\n    test('应该在可重试错误时进行重试', async () => {\r\n      const retryableFn = jest.fn()\r\n        .mockRejectedValueOnce(new Error('Network error'))\r\n        .mockRejectedValueOnce(new Error('Timeout error'))\r\n        .mockResolvedValue('success')\r\n      \r\n      const result = await errorRetryManager.executeWithRetry(retryableFn)\r\n      \r\n      expect(result).toBe('success')\r\n      expect(retryableFn).toHaveBeenCalledTimes(3)\r\n    })\r\n\r\n    test('应该在达到最大重试次数后抛出错误', async () => {\r\n      const failingFn = jest.fn().mockRejectedValue(new Error('Persistent error'))\r\n      \r\n      await expect(errorRetryManager.executeWithRetry(failingFn))\r\n        .rejects.toThrow('Persistent error')\r\n      \r\n      const maxRetries = errorRetryManager.getConfig().maxRetries\r\n      expect(failingFn).toHaveBeenCalledTimes(maxRetries + 1)\r\n    })\r\n\r\n    test('应该在不可重试错误时立即抛出', async () => {\r\n      const authError = new Error('Unauthorized')\r\n      authError.name = 'AuthError'\r\n      const nonRetryableFn = jest.fn().mockRejectedValue(authError)\r\n      \r\n      await expect(errorRetryManager.executeWithRetry(nonRetryableFn))\r\n        .rejects.toThrow('Unauthorized')\r\n      \r\n      expect(nonRetryableFn).toHaveBeenCalledTimes(1)\r\n    })\r\n  })\r\n\r\n  describe('错误统计测试', () => {\r\n    test('应该正确记录错误统计', async () => {\r\n      const failingFn = jest.fn().mockRejectedValue(new Error('Test error'))\r\n      \r\n      try {\r\n        await errorRetryManager.executeWithRetry(failingFn)\r\n      } catch (error) {\r\n        // 预期的错误\r\n      }\r\n      \r\n      const stats = errorRetryManager.getErrorStats()\r\n      expect(stats.totalErrors).toBeGreaterThan(0)\r\n      expect(stats.retryAttempts).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该正确分类错误类型统计', async () => {\r\n      const networkError = new Error('Network error')\r\n      networkError.name = 'NetworkError'\r\n      const networkFn = jest.fn().mockRejectedValue(networkError)\r\n      \r\n      try {\r\n        await errorRetryManager.executeWithRetry(networkFn)\r\n      } catch (error) {\r\n        // 预期的错误\r\n      }\r\n      \r\n      const stats = errorRetryManager.getErrorStats()\r\n      expect(stats.errorTypes['NetworkError']).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  describe('配置更新测试', () => {\r\n    test('应该允许更新重试配置', () => {\r\n      const newConfig = {\r\n        maxRetries: 5,\r\n        baseDelay: 2000,\r\n        maxDelay: 30000,\r\n        backoffMultiplier: 3\r\n      }\r\n      \r\n      errorRetryManager.updateConfig(newConfig)\r\n      const updatedConfig = errorRetryManager.getConfig()\r\n      \r\n      expect(updatedConfig).toMatchObject(newConfig)\r\n    })\r\n\r\n    test('应该验证配置参数的有效性', () => {\r\n      const invalidConfig = {\r\n        maxRetries: -1,\r\n        baseDelay: 0,\r\n        maxDelay: -1000,\r\n        backoffMultiplier: 0\r\n      }\r\n      \r\n      expect(() => errorRetryManager.updateConfig(invalidConfig))\r\n        .toThrow('Invalid configuration')\r\n    })\r\n  })\r\n\r\n  describe('并发处理测试', () => {\r\n    test('应该正确处理并发重试请求', async () => {\r\n      const concurrentFns = Array.from({ length: 5 }, (_, i) => \r\n        jest.fn()\r\n          .mockRejectedValueOnce(new Error(`Error ${i}`))\r\n          .mockResolvedValue(`Success ${i}`)\r\n      )\r\n      \r\n      const promises = concurrentFns.map(fn => \r\n        errorRetryManager.executeWithRetry(fn)\r\n      )\r\n      \r\n      const results = await Promise.all(promises)\r\n      \r\n      expect(results).toEqual([\r\n        'Success 0',\r\n        'Success 1', \r\n        'Success 2',\r\n        'Success 3',\r\n        'Success 4'\r\n      ])\r\n    })\r\n  })\r\n\r\n  describe('内存管理测试', () => {\r\n    test('应该正确清理过期的错误记录', () => {\r\n      // 模拟大量错误记录\r\n      for (let i = 0; i < 1000; i++) {\r\n        errorRetryManager.recordError(new Error(`Error ${i}`))\r\n      }\r\n      \r\n      const statsBefore = errorRetryManager.getErrorStats()\r\n      expect(statsBefore.totalErrors).toBe(1000)\r\n      \r\n      // 清理过期记录\r\n      errorRetryManager.cleanup()\r\n      \r\n      const statsAfter = errorRetryManager.getErrorStats()\r\n      expect(statsAfter.totalErrors).toBeLessThan(1000)\r\n    })\r\n  })\r\n}) "],"version":3}