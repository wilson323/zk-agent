{"version":3,"names":["cov_6hhktm7mv","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_1","require","api_helper_1","route_configs_1","checkDatabase","status","message","checkRedis","checkFastGPT","checkFileSystem","exports","GET","createApiRoute","RouteConfigs","publicGet","requestId","health","timestamp","Date","toISOString","services","database","redis","fastgpt","fileSystem","process","env","npm_package_version","environment","NODE_ENV","_requestId","allHealthy","Object","values","every","service","ApiResponseWrapper","success","error"],"sources":["E:\\zk-agent\\app\\api\\health\\route.ts"],"sourcesContent":["/**\n * @file health\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { createApiRoute } from '@/lib/middleware/api-route';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { RouteConfigs } from '@/lib/middleware/route-configs';\n\n// Mock health check functions\nasync function checkDatabase() {\n  return { status: \"healthy\", message: \"Database connection OK\" };\n}\n\nasync function checkRedis() {\n  return { status: \"healthy\", message: \"Redis connection OK\" };\n}\n\nasync function checkFastGPT() {\n  return { status: \"healthy\", message: \"FastGPT API accessible\" };\n}\n\nasync function checkFileSystem() {\n  return { status: \"healthy\", message: \"File system accessible\" };\n}\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async ({ requestId }) => {\n    try {\n      const health = {\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        services: {\n          database: await checkDatabase(),\n          redis: await checkRedis(),\n          fastgpt: await checkFastGPT(),\n          fileSystem: await checkFileSystem(),\n        },\n        version: process.env.npm_package_version || \"unknown\",\n        environment: process.env.NODE_ENV || \"unknown\",\n        requestId: _requestId\n      };\n      \n      const allHealthy = Object.values(health.services).every(\n        (service: any) => service.status === \"healthy\"\n      );\n      \n      health.status = allHealthy ? \"healthy\" : \"unhealthy\";\n      \n      return ApiResponseWrapper.success(health);\n    } catch (error) {\n      return ApiResponseWrapper.error('Internal server error', 500);\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}