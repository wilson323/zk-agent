{"version":3,"names":["cov_qgc3ffpn2","actualCoverage","s","StandardAgentManager","constructor","f","agents","Map","registerAgent","agent","set","id","getAgent","agentId","b","get","createAgentFromFastGPT","appId","apiKey","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","statusText","data","json","name","description","welcomeMessage","instructions","systemPrompt","tools","convertFastGPTTools","model","temperature","maxTokens","variables","fastgptTools","map","tool","parameters","type","properties","required","getAllAgents","Array","from","values","removeAgent","delete","updateAgent","updates","updatedAgent","exports"],"sources":["E:\\zk-agent\\lib\\ag-ui\\standard-agent-manager.ts"],"sourcesContent":["// @ts-nocheck\nimport type { AgentDefinition, Tool } from \"./types\"\n\n/**\n * 标准AG-UI智能体管理器\n */\nexport class StandardAgentManager {\n  private agents: Map<string, AgentDefinition> = new Map()\n\n  /**\n   * 注册智能体\n   */\n  registerAgent(agent: AgentDefinition): void {\n    this.agents.set(agent.id, agent)\n  }\n\n  /**\n   * 获取智能体定义\n   */\n  getAgent(agentId: string): AgentDefinition | null {\n    return this.agents.get(agentId) || null\n  }\n\n  /**\n   * 从FastGPT配置创建智能体定义\n   */\n  async createAgentFromFastGPT(appId: string, apiKey: string): Promise<AgentDefinition> {\n    // 调用FastGPT API获取智能体信息\n    const response = await fetch(\"/api/fastgpt/init-chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({ appId }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch agent info: ${response.statusText}`)\n    }\n\n    const data = await response.json()\n\n    // 转换为标准AG-UI智能体定义\n    const agent: AgentDefinition = {\n      id: appId,\n      name: data.name || `Agent ${appId}`,\n      description: data.description || data.welcomeMessage || \"\",\n      instructions: data.systemPrompt || \"\",\n      tools: this.convertFastGPTTools(data.tools || []),\n      model: data.model || \"gpt-3.5-turbo\",\n      temperature: data.temperature || 0.7,\n      maxTokens: data.maxTokens || 2000,\n      variables: data.variables || {},\n      welcomeMessage: data.welcomeMessage,\n    }\n\n    // 注册智能体\n    this.registerAgent(agent)\n\n    return agent\n  }\n\n  /**\n   * 转换FastGPT工具为标准AG-UI工具格式\n   */\n  private convertFastGPTTools(fastgptTools: any[]): Tool[] {\n    return fastgptTools.map((tool) => ({\n      name: tool.name,\n      description: tool.description,\n      parameters: tool.parameters || {\n        type: \"object\",\n        properties: {},\n        required: [],\n      },\n    }))\n  }\n\n  /**\n   * 获取所有智能体\n   */\n  getAllAgents(): AgentDefinition[] {\n    return Array.from(this.agents.values())\n  }\n\n  /**\n   * 删除智能体\n   */\n  removeAgent(agentId: string): boolean {\n    return this.agents.delete(agentId)\n  }\n\n  /**\n   * 更新智能体\n   */\n  updateAgent(agentId: string, updates: Partial<AgentDefinition>): boolean {\n    const agent = this.agents.get(agentId)\n    if (!agent) return false\n\n    const updatedAgent = { ...agent, ...updates }\n    this.agents.set(agentId, updatedAgent)\n    return true\n  }\n}\n"],"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","ignoreList":[]}