{"version":3,"names":["cov_3qt0zhv8b","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","CacheStrategy","exports","SW_CONFIG","cacheStrategies","static","pattern","strategy","CACHE_FIRST","cacheName","maxEntries","maxAgeSeconds","cacheableResponse","statuses","priority","compression","prefetch","warmupCache","intelligentPurge","metrics","trackHitRate","trackResponseTime","trackBandwidthSaving","fallbackStrategy","NETWORK_FIRST","conditionalCaching","connectionType","api","networkTimeoutSeconds","headers","backgroundSync","broadcastUpdate","adaptiveTimeout","STALE_WHILE_REVALIDATE","timeOfDay","apiStatic","apiRealtime","NETWORK_ONLY","pages","userAgent","precache","enabled","urls","runtime","skipWaiting","clientsClaim","cleanupOutdatedCaches","monitoring","reportCacheHitRate","reportNetworkFailures","reportBandwidthSavings","reportResponseTimes","enableRealTimeMetrics","metricsEndpoint","intelligentWarmup","strategies","userBehaviorPrediction","popularContentPrefetch","timeBasedWarmup","locationBasedPrefetch","warmupSchedule","morning","lunch","evening","maxWarmupRequests","warmupInterval","adaptiveOptimization","autoAdjustCacheSize","dynamicTimeoutAdjustment","intelligentStrategySelection","performanceBasedPriority","networkConditionAdaptation","userPatternLearning","optimizationInterval","advancedFeatures","enableServiceWorkerUpdate","enableBackgroundFetch","enablePushNotifications","enablePeriodicBackgroundSync","enableAdvancedCompression","enableImageOptimization","enableCriticalResourcePrioritization","createCacheStrategy","config","PerformanceOptimizer","getOptimalStrategy","resourceType","networkCondition","adjustCacheSize","hitRate","currentSize","Math","min","max","cacheEntries","sort","a","scoreA","accessCount","Date","now","lastAccess","size","scoreB","slice"],"sources":["E:\\zk-agent\\lib\\config\\service-worker.ts"],"sourcesContent":["// @ts-nocheck\n\n/**\n * @file Service Worker Configuration\n * @description Service Worker缓存策略配置 - 第二阶段优化版本\n */\n\n// 缓存策略枚举\nexport enum CacheStrategy {\n  CACHE_FIRST = 'CacheFirst',\n  NETWORK_FIRST = 'NetworkFirst',\n  STALE_WHILE_REVALIDATE = 'StaleWhileRevalidate',\n  NETWORK_ONLY = 'NetworkOnly',\n  CACHE_ONLY = 'CacheOnly'\n}\n\n// 缓存配置接口 - 增强版\ninterface CacheConfig {\n  pattern: RegExp;\n  strategy: CacheStrategy;\n  cacheName: string;\n  maxEntries: number;\n  maxAgeSeconds: number;\n  networkTimeoutSeconds?: number;\n  cacheableResponse?: {\n    statuses: number[];\n    headers?: Record<string, string>;\n  };\n  backgroundSync?: boolean;\n  broadcastUpdate?: boolean;\n  // 新增性能优化选项\n  priority?: 'high' | 'normal' | 'low'; // 缓存优先级\n  compression?: boolean; // 启用压缩\n  prefetch?: boolean; // 预取资源\n  warmupCache?: boolean; // 预热缓存\n  adaptiveTimeout?: boolean; // 自适应超时\n  intelligentPurge?: boolean; // 智能清理\n  metrics?: {\n    trackHitRate?: boolean;\n    trackResponseTime?: boolean;\n    trackBandwidthSaving?: boolean;\n  };\n  fallbackStrategy?: CacheStrategy; // 降级策略\n  conditionalCaching?: {\n    userAgent?: RegExp;\n    connectionType?: string[];\n    timeOfDay?: { start: number; end: number };\n  };\n}\n\nexport const SW_CONFIG = {\n  // 缓存策略\n  cacheStrategies: {\n    // 静态资源 - Cache First (高性能优化版)\n    static: {\n      pattern: /\\.(js|css|png|jpg|jpeg|gif|svg|woff|woff2|ico|webp|avif)$/,\n      strategy: CacheStrategy.CACHE_FIRST,\n      cacheName: 'static-cache-v3',\n      maxEntries: 200, // 增加缓存容量\n      maxAgeSeconds: 30 * 24 * 60 * 60, // 30天\n      cacheableResponse: {\n        statuses: [0, 200, 206],\n      },\n      // 新增优化配置\n      priority: 'high',\n      compression: true,\n      prefetch: true,\n      warmupCache: true,\n      intelligentPurge: true,\n      metrics: {\n        trackHitRate: true,\n        trackResponseTime: true,\n        trackBandwidthSaving: true,\n      },\n      fallbackStrategy: CacheStrategy.NETWORK_FIRST,\n      conditionalCaching: {\n        connectionType: ['4g', 'wifi'],\n      },\n    } as CacheConfig,\n    \n    // API请求 - 智能自适应缓存策略 (重点优化)\n    api: {\n      pattern: /\\/api\\//,\n      strategy: CacheStrategy.NETWORK_FIRST,\n      cacheName: 'api-cache-v3',\n      maxEntries: 150, // 进一步增加缓存条目\n      maxAgeSeconds: 15 * 60, // 延长到15分钟\n      networkTimeoutSeconds: 3, // 3秒网络超时\n      cacheableResponse: {\n        statuses: [200, 201, 202, 204], // 只缓存成功响应\n        headers: {\n          'cache-control': 'public, max-age=900' // 15分钟缓存控制\n        }\n      },\n      backgroundSync: true, // 启用后台同步\n      broadcastUpdate: true, // 启用广播更新\n      // 智能优化配置\n      priority: 'normal',\n      compression: true,\n      adaptiveTimeout: true, // 自适应超时\n      intelligentPurge: true,\n      metrics: {\n        trackHitRate: true,\n        trackResponseTime: true,\n        trackBandwidthSaving: true,\n      },\n      fallbackStrategy: CacheStrategy.STALE_WHILE_REVALIDATE,\n      conditionalCaching: {\n        connectionType: ['3g', '4g', 'wifi'],\n        timeOfDay: { start: 9, end: 18 }, // 工作时间优化\n      },\n    } as CacheConfig,\n    \n    // 特殊API - 长期缓存 (新增)\n    apiStatic: {\n      pattern: /\\/api\\/(config|constants|metadata)\\//,\n      strategy: CacheStrategy.CACHE_FIRST,\n      cacheName: 'api-static-cache-v2',\n      maxEntries: 50,\n      maxAgeSeconds: 60 * 60, // 1小时\n      cacheableResponse: {\n        statuses: [200],\n      },\n    } as CacheConfig,\n    \n    // 实时API - 仅网络 (新增)\n    apiRealtime: {\n      pattern: /\\/api\\/(chat|stream|websocket)\\//,\n      strategy: CacheStrategy.NETWORK_ONLY,\n      cacheName: 'no-cache',\n      maxEntries: 0,\n      maxAgeSeconds: 0,\n    } as CacheConfig,\n\n    // 页面 - 智能预取缓存策略 (高级优化版)\n    pages: {\n      pattern: /\\//,\n      strategy: CacheStrategy.STALE_WHILE_REVALIDATE,\n      cacheName: 'page-cache-v3',\n      maxEntries: 50, // 大幅增加页面缓存\n      maxAgeSeconds: 24 * 60 * 60, // 1天\n      networkTimeoutSeconds: 5, // 5秒超时\n      cacheableResponse: {\n        statuses: [200],\n      },\n      broadcastUpdate: true,\n      // 智能页面优化\n      priority: 'normal',\n      compression: true,\n      prefetch: true, // 启用页面预取\n      warmupCache: true,\n      adaptiveTimeout: true,\n      intelligentPurge: true,\n      metrics: {\n        trackHitRate: true,\n        trackResponseTime: true,\n        trackBandwidthSaving: true,\n      },\n      fallbackStrategy: CacheStrategy.NETWORK_FIRST,\n      conditionalCaching: {\n        userAgent: /Chrome|Firefox|Safari/,\n        connectionType: ['wifi', '4g'],\n        timeOfDay: { start: 6, end: 23 }, // 活跃时间优化\n      },\n    } as CacheConfig,\n  },\n  \n  // 预缓存配置\n  precache: {\n    enabled: true,\n    urls: [\n      '/',\n      '/chat',\n      '/admin',\n      '/api/health',\n    ],\n  },\n  \n  // 运行时配置\n  runtime: {\n    skipWaiting: true,\n    clientsClaim: true,\n    cleanupOutdatedCaches: true,\n  },\n  \n  // 性能监控 - 增强版\n  monitoring: {\n    enabled: true,\n    reportCacheHitRate: true,\n    reportNetworkFailures: true,\n    reportBandwidthSavings: true,\n    reportResponseTimes: true,\n    enableRealTimeMetrics: true,\n    metricsEndpoint: '/api/sw-metrics',\n  },\n  \n  // 智能预热配置\n  intelligentWarmup: {\n    enabled: true,\n    strategies: {\n      userBehaviorPrediction: true, // 基于用户行为预测\n      popularContentPrefetch: true, // 热门内容预取\n      timeBasedWarmup: true, // 基于时间的预热\n      locationBasedPrefetch: true, // 基于位置的预取\n    },\n    warmupSchedule: {\n      morning: { start: 7, end: 9, priority: 'high' },\n      lunch: { start: 12, end: 14, priority: 'normal' },\n      evening: { start: 18, end: 20, priority: 'high' },\n    },\n    maxWarmupRequests: 20,\n    warmupInterval: 5 * 60 * 1000, // 5分钟\n  },\n  \n  // 自适应优化\n  adaptiveOptimization: {\n    enabled: true,\n    autoAdjustCacheSize: true,\n    dynamicTimeoutAdjustment: true,\n    intelligentStrategySelection: true,\n    performanceBasedPriority: true,\n    networkConditionAdaptation: true,\n    userPatternLearning: true,\n    optimizationInterval: 10 * 60 * 1000, // 10分钟\n  },\n  \n  // 高级功能\n  advancedFeatures: {\n    enableServiceWorkerUpdate: true,\n    enableBackgroundFetch: true,\n    enablePushNotifications: false,\n    enablePeriodicBackgroundSync: true,\n    enableAdvancedCompression: true,\n    enableImageOptimization: true,\n    enableCriticalResourcePrioritization: true,\n  },\n};\n\n// 导出缓存策略工厂函数\nexport const createCacheStrategy = (config: Partial<CacheConfig>) => {\n  return {\n    ...SW_CONFIG.cacheStrategies.static,\n    ...config,\n  } as CacheConfig;\n};\n\n// 导出性能优化工具\nexport const PerformanceOptimizer = {\n  // 获取最优缓存策略\n  getOptimalStrategy: (resourceType: string, networkCondition: string) => {\n    if (networkCondition === 'slow') {\n      return CacheStrategy.CACHE_FIRST;\n    }\n    if (resourceType === 'api') {\n      return CacheStrategy.NETWORK_FIRST;\n    }\n    return CacheStrategy.STALE_WHILE_REVALIDATE;\n  },\n  \n  // 动态调整缓存大小\n  adjustCacheSize: (hitRate: number, currentSize: number) => {\n    if (hitRate > 0.8) {\n      return Math.min(currentSize * 1.2, 500);\n    }\n    if (hitRate < 0.5) {\n      return Math.max(currentSize * 0.8, 50);\n    }\n    return currentSize;\n  },\n  \n  // 智能清理策略\n  intelligentPurge: (cacheEntries: any[], maxEntries: number) => {\n    return cacheEntries\n      .sort((a, b) => {\n        // 综合考虑访问频率、最后访问时间和资源大小\n        const scoreA = a.accessCount * 0.4 + (Date.now() - a.lastAccess) * 0.3 + a.size * 0.3;\n        const scoreB = b.accessCount * 0.4 + (Date.now() - b.lastAccess) * 0.3 + b.size * 0.3;\n        return scoreB - scoreA;\n      })\n      .slice(0, maxEntries);\n  },\n};\n"],"mappings":";;AAAA;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,I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","ignoreList":[]}