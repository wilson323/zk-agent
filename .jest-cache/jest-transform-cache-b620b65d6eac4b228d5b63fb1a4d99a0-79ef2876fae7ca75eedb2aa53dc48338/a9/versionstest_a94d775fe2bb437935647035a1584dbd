a3a067414f76ae704c6c8bea603d410a
"use strict";
/**
 * 版本信息API路由错误处理测试
 * 测试版本管理端点的各种错误场景和版本控制
 */
Object.defineProperty(exports, "__esModule", { value: true });
// import { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';
// import { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';
// Mock dependencies
jest.mock('../../../lib/services/version-manager', () => ({
    getCurrentVersion: jest.fn(),
    getVersionHistory: jest.fn(),
    createVersion: jest.fn(),
    updateVersion: jest.fn(),
    deleteVersion: jest.fn(),
    validateVersionFormat: jest.fn(),
    checkVersionCompatibility: jest.fn(),
    deployVersion: jest.fn(),
    rollbackVersion: jest.fn()
}));
jest.mock('../../../lib/storage/version-store', () => ({
    storeVersionData: jest.fn(),
    retrieveVersionData: jest.fn(),
    deleteVersionData: jest.fn(),
    getVersionMetadata: jest.fn()
}));
jest.mock('../../../lib/auth/session', () => ({
    validateSession: jest.fn(),
    checkDeploymentPermissions: jest.fn()
}));
const server_1 = require("next/server");
const route_1 = require("@/app/api/versions/route");
describe('Versions API Error Handling', () => {
    let errorHandler;
    beforeEach(() => {
        // errorHandler = GlobalErrorHandler.getInstance();
        errorHandler = { errorCount: 0, circuitBreakerOpen: false };
        jest.clearAllMocks();
    });
    describe('GET /api/versions - Get Version Info', () => {
        it('should handle version service unavailable', async () => {
            const { getCurrentVersion } = require('../../../lib/services/version-manager');
            getCurrentVersion.mockRejectedValue(new Error('Version service unavailable'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions');
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(503);
            expect(data.success).toBe(false);
            expect(data.error.message).toContain('Version service unavailable');
        });
        it('should handle corrupted version data', async () => {
            const { getCurrentVersion } = require('../../../lib/services/version-manager');
            getCurrentVersion.mockRejectedValue(new Error('Version data corrupted'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions');
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Version data corrupted');
        });
        it('should handle missing version metadata', async () => {
            const { getCurrentVersion } = require('../../../lib/services/version-manager');
            getCurrentVersion.mockResolvedValue(null);
            const request = new server_1.NextRequest('http://localhost:3000/api/versions');
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(404);
            expect(data.error.code).toBe('NOT_FOUND');
            expect(data.error.message).toContain('Version information not found');
        });
        it('should handle version history retrieval failure', async () => {
            const { getVersionHistory } = require('../../../lib/services/version-manager');
            getVersionHistory.mockRejectedValue(new Error('Failed to retrieve version history'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/history');
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Failed to retrieve version history');
        });
    });
    describe('POST /api/versions - Create Version', () => {
        let validVersionData;
        beforeEach(() => {
            validVersionData = {
                version: '1.2.0',
                description: 'New feature release',
                changes: [
                    'Added new poster templates',
                    'Improved CAD analysis performance',
                    'Fixed authentication issues'
                ],
                breaking: false,
                releaseNotes: 'This release includes several improvements...'
            };
        });
        it('should handle invalid version format', async () => {
            const { validateVersionFormat } = require('../../../lib/services/version-manager');
            validateVersionFormat.mockRejectedValue(new Error('Invalid version format: must follow semver'));
            const invalidVersionData = { ...validVersionData, version: 'invalid-version' };
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify(invalidVersionData),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.code).toBe('VALIDATION_ERROR');
            expect(data.error.message).toContain('Invalid version format');
        });
        it('should handle duplicate version creation', async () => {
            const { createVersion } = require('../../../lib/services/version-manager');
            createVersion.mockRejectedValue(new Error('Version 1.2.0 already exists'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify(validVersionData),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Version 1.2.0 already exists');
        });
        it('should handle missing required fields', async () => {
            const incompleteData = { version: '1.2.0' }; // Missing required fields
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify(incompleteData),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.code).toBe('VALIDATION_ERROR');
            expect(data.error.details).toContain('description');
        });
        it('should handle version compatibility check failure', async () => {
            const { checkVersionCompatibility } = require('../../../lib/services/version-manager');
            checkVersionCompatibility.mockRejectedValue(new Error('Version incompatible with current system'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify(validVersionData),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('Version incompatible');
        });
        it('should handle insufficient deployment permissions', async () => {
            const { checkDeploymentPermissions } = require('../../../lib/auth/session');
            checkDeploymentPermissions.mockRejectedValue(new Error('Deployment permissions required'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify(validVersionData),
                headers: { 'Authorization': 'Bearer user-token' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(403);
            expect(data.error.code).toBe('AUTHORIZATION_ERROR');
        });
        it('should handle version storage failure', async () => {
            const { storeVersionData } = require('../../../lib/storage/version-store');
            storeVersionData.mockRejectedValue(new Error('Storage quota exceeded'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify(validVersionData),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(507); // Insufficient storage
            expect(data.error.message).toContain('Storage quota exceeded');
        });
    });
    describe('PUT /api/versions/[version] - Update Version', () => {
        it('should handle version not found for update', async () => {
            const { retrieveVersionData } = require('../../../lib/storage/version-store');
            retrieveVersionData.mockResolvedValue(null);
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'PUT',
                body: JSON.stringify({ description: 'Updated description' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(404);
            expect(data.error.code).toBe('NOT_FOUND');
            expect(data.error.message).toContain('Version not found');
        });
        it('should handle attempt to update deployed version', async () => {
            const { updateVersion } = require('../../../lib/services/version-manager');
            updateVersion.mockRejectedValue(new Error('Cannot update deployed version'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'PUT',
                body: JSON.stringify({ description: 'Updated description' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Cannot update deployed version');
        });
        it('should handle invalid version update data', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'PUT',
                body: JSON.stringify({ invalidField: 'value' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.code).toBe('VALIDATION_ERROR');
            expect(data.error.message).toContain('Invalid update data');
        });
        it('should handle version update conflict', async () => {
            const { updateVersion } = require('../../../lib/services/version-manager');
            updateVersion.mockRejectedValue(new Error('Version update conflict: concurrent modification'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'PUT',
                body: JSON.stringify({ description: 'Updated description' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Version update conflict');
        });
    });
    describe('DELETE /api/versions/[version] - Delete Version', () => {
        it('should handle version not found for deletion', async () => {
            const { retrieveVersionData } = require('../../../lib/storage/version-store');
            retrieveVersionData.mockResolvedValue(null);
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'DELETE'
            });
            const response = await (0, route_1.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(404);
            expect(data.error.code).toBe('NOT_FOUND');
        });
        it('should handle attempt to delete current version', async () => {
            const { deleteVersion } = require('../../../lib/services/version-manager');
            deleteVersion.mockRejectedValue(new Error('Cannot delete current active version'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'DELETE'
            });
            const response = await (0, route_1.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Cannot delete current active version');
        });
        it('should handle version with dependencies', async () => {
            const { deleteVersion } = require('../../../lib/services/version-manager');
            deleteVersion.mockRejectedValue(new Error('Version has dependencies and cannot be deleted'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'DELETE'
            });
            const response = await (0, route_1.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Version has dependencies');
        });
        it('should handle storage deletion failure', async () => {
            const { deleteVersionData } = require('../../../lib/storage/version-store');
            deleteVersionData.mockRejectedValue(new Error('Failed to delete version data from storage'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'DELETE'
            });
            const response = await (0, route_1.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Failed to delete version data');
        });
    });
    describe('Version Deployment Errors', () => {
        it('should handle deployment preparation failure', async () => {
            const { deployVersion } = require('../../../lib/services/version-manager');
            deployVersion.mockRejectedValue(new Error('Deployment preparation failed: missing dependencies'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.2.0/deploy', {
                method: 'POST',
                headers: { 'Authorization': 'Bearer deploy-token' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Deployment preparation failed');
        });
        it('should handle deployment rollback failure', async () => {
            const { rollbackVersion } = require('../../../lib/services/version-manager');
            rollbackVersion.mockRejectedValue(new Error('Rollback failed: backup not found'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/rollback', {
                method: 'POST',
                body: JSON.stringify({ targetVersion: '1.1.0' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Rollback failed');
        });
        it('should handle deployment timeout', async () => {
            const { deployVersion } = require('../../../lib/services/version-manager');
            deployVersion.mockImplementation(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Deployment timeout')), 100)));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.2.0/deploy', {
                method: 'POST',
                headers: { 'Authorization': 'Bearer deploy-token' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(408);
            expect(data.error.message).toContain('Deployment timeout');
        });
        it('should handle deployment environment mismatch', async () => {
            const { deployVersion } = require('../../../lib/services/version-manager');
            deployVersion.mockRejectedValue(new Error('Version not compatible with production environment'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.2.0/deploy', {
                method: 'POST',
                body: JSON.stringify({ environment: 'production' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('not compatible with production environment');
        });
    });
    describe('Version Validation Errors', () => {
        it('should handle semantic version validation failure', async () => {
            const { validateVersionFormat } = require('../../../lib/services/version-manager');
            validateVersionFormat.mockRejectedValue(new Error('Version must follow semantic versioning (x.y.z)'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({ version: '1.2', description: 'Test' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('semantic versioning');
        });
        it('should handle version downgrade attempt', async () => {
            const { validateVersionFormat } = require('../../../lib/services/version-manager');
            validateVersionFormat.mockRejectedValue(new Error('Version downgrade not allowed'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({ version: '0.9.0', description: 'Downgrade' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('Version downgrade not allowed');
        });
        it('should handle breaking change validation', async () => {
            const { checkVersionCompatibility } = require('../../../lib/services/version-manager');
            checkVersionCompatibility.mockRejectedValue(new Error('Breaking changes require major version increment'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({
                    version: '1.2.1',
                    description: 'Minor update',
                    breaking: true
                }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('Breaking changes require major version increment');
        });
    });
    describe('Version Metadata Errors', () => {
        it('should handle corrupted version metadata', async () => {
            const { getVersionMetadata } = require('../../../lib/storage/version-store');
            getVersionMetadata.mockRejectedValue(new Error('Version metadata corrupted'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0/metadata');
            const response = await (0, route_1.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Version metadata corrupted');
        });
        it('should handle missing release notes', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({
                    version: '1.2.0',
                    description: 'Test',
                    changes: ['Change 1']
                    // Missing releaseNotes
                }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.details).toContain('releaseNotes');
        });
        it('should handle invalid changelog format', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({
                    version: '1.2.0',
                    description: 'Test',
                    changes: 'Invalid format - should be array'
                }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('Invalid changelog format');
        });
    });
    describe('Concurrent Version Operations', () => {
        it('should handle concurrent version creation', async () => {
            const { createVersion } = require('../../../lib/services/version-manager');
            createVersion.mockRejectedValue(new Error('Concurrent version creation detected'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({ version: '1.2.0', description: 'Test' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Concurrent version creation detected');
        });
        it('should handle version lock timeout', async () => {
            const { updateVersion } = require('../../../lib/services/version-manager');
            updateVersion.mockRejectedValue(new Error('Version lock timeout'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions/1.0.0', {
                method: 'PUT',
                body: JSON.stringify({ description: 'Updated' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(408);
            expect(data.error.message).toContain('Version lock timeout');
        });
    });
    describe('Error Recovery and Monitoring', () => {
        it('should provide version operation recovery suggestions', async () => {
            const { createVersion } = require('../../../lib/services/version-manager');
            createVersion.mockRejectedValue(new Error('Storage service temporarily unavailable'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({ version: '1.2.0', description: 'Test' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(data.error.recovery).toBeDefined();
            expect(data.error.recovery.suggestions).toContain('Retry operation');
        });
        it('should track version operation metrics', async () => {
            const { createVersion } = require('../../../lib/services/version-manager');
            createVersion.mockRejectedValue(new Error('Test error'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({ version: '1.2.0', description: 'Test' }),
                headers: { 'Content-Type': 'application/json' }
            });
            await (0, route_1.POST)(request);
            const stats = errorHandler.getErrorStats();
            expect(stats.errorCount).toBeGreaterThan(0);
        });
        it('should include version context in error responses', async () => {
            const { createVersion } = require('../../../lib/services/version-manager');
            createVersion.mockRejectedValue(new Error('Test error'));
            const request = new server_1.NextRequest('http://localhost:3000/api/versions', {
                method: 'POST',
                body: JSON.stringify({ version: '1.2.0', description: 'Test' }),
                headers: { 'Content-Type': 'application/json' }
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            expect(data.error.context).toBeDefined();
            expect(data.error.context.operation).toBe('createVersion');
            expect(data.error.context.version).toBe('1.2.0');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,