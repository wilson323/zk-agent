{"file":"E:\\zk-agent\\tests\\api\\routes\\versions.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\versions.test.ts"],"sourcesContent":["/**\n * 版本信息API路由错误处理测试\n * 测试版本管理端点的各种错误场景和版本控制\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '@/app/api/versions/route';\n// import { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/version-manager', () => ({\n  getCurrentVersion: jest.fn(),\n  getVersionHistory: jest.fn(),\n  createVersion: jest.fn(),\n  updateVersion: jest.fn(),\n  deleteVersion: jest.fn(),\n  validateVersionFormat: jest.fn(),\n  checkVersionCompatibility: jest.fn(),\n  deployVersion: jest.fn(),\n  rollbackVersion: jest.fn()\n}));\n\njest.mock('../../../lib/storage/version-store', () => ({\n  storeVersionData: jest.fn(),\n  retrieveVersionData: jest.fn(),\n  deleteVersionData: jest.fn(),\n  getVersionMetadata: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkDeploymentPermissions: jest.fn()\n}));\n\ndescribe('Versions API Error Handling', () => {\n  let errorHandler: any;\n\n  beforeEach(() => {\n    // errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler = { errorCount: 0, circuitBreakerOpen: false };\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/versions - Get Version Info', () => {\n    it('should handle version service unavailable', async () => {\n      const { getCurrentVersion } = require('../../../lib/services/version-manager');\n      getCurrentVersion.mockRejectedValue(new Error('Version service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.error.message).toContain('Version service unavailable');\n    });\n\n    it('should handle corrupted version data', async () => {\n      const { getCurrentVersion } = require('../../../lib/services/version-manager');\n      getCurrentVersion.mockRejectedValue(new Error('Version data corrupted'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Version data corrupted');\n    });\n\n    it('should handle missing version metadata', async () => {\n      const { getCurrentVersion } = require('../../../lib/services/version-manager');\n      getCurrentVersion.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/versions');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Version information not found');\n    });\n\n    it('should handle version history retrieval failure', async () => {\n      const { getVersionHistory } = require('../../../lib/services/version-manager');\n      getVersionHistory.mockRejectedValue(new Error('Failed to retrieve version history'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/history');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to retrieve version history');\n    });\n  });\n\n  describe('POST /api/versions - Create Version', () => {\n    let validVersionData: any;\n\n    beforeEach(() => {\n      validVersionData = {\n        version: '1.2.0',\n        description: 'New feature release',\n        changes: [\n          'Added new poster templates',\n          'Improved CAD analysis performance',\n          'Fixed authentication issues'\n        ],\n        breaking: false,\n        releaseNotes: 'This release includes several improvements...'\n      };\n    });\n\n    it('should handle invalid version format', async () => {\n      const { validateVersionFormat } = require('../../../lib/services/version-manager');\n      validateVersionFormat.mockRejectedValue(new Error('Invalid version format: must follow semver'));\n\n      const invalidVersionData = { ...validVersionData, version: 'invalid-version' };\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify(invalidVersionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid version format');\n    });\n\n    it('should handle duplicate version creation', async () => {\n      const { createVersion } = require('../../../lib/services/version-manager');\n      createVersion.mockRejectedValue(new Error('Version 1.2.0 already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify(validVersionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Version 1.2.0 already exists');\n    });\n\n    it('should handle missing required fields', async () => {\n      const incompleteData = { version: '1.2.0' }; // Missing required fields\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify(incompleteData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('description');\n    });\n\n    it('should handle version compatibility check failure', async () => {\n      const { checkVersionCompatibility } = require('../../../lib/services/version-manager');\n      checkVersionCompatibility.mockRejectedValue(new Error('Version incompatible with current system'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify(validVersionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Version incompatible');\n    });\n\n    it('should handle insufficient deployment permissions', async () => {\n      const { checkDeploymentPermissions } = require('../../../lib/auth/session');\n      checkDeploymentPermissions.mockRejectedValue(new Error('Deployment permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify(validVersionData),\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle version storage failure', async () => {\n      const { storeVersionData } = require('../../../lib/storage/version-store');\n      storeVersionData.mockRejectedValue(new Error('Storage quota exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify(validVersionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient storage\n      expect(data.error.message).toContain('Storage quota exceeded');\n    });\n  });\n\n  describe('PUT /api/versions/[version] - Update Version', () => {\n    it('should handle version not found for update', async () => {\n      const { retrieveVersionData } = require('../../../lib/storage/version-store');\n      retrieveVersionData.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'PUT',\n        body: JSON.stringify({ description: 'Updated description' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Version not found');\n    });\n\n    it('should handle attempt to update deployed version', async () => {\n      const { updateVersion } = require('../../../lib/services/version-manager');\n      updateVersion.mockRejectedValue(new Error('Cannot update deployed version'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'PUT',\n        body: JSON.stringify({ description: 'Updated description' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Cannot update deployed version');\n    });\n\n    it('should handle invalid version update data', async () => {\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'PUT',\n        body: JSON.stringify({ invalidField: 'value' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid update data');\n    });\n\n    it('should handle version update conflict', async () => {\n      const { updateVersion } = require('../../../lib/services/version-manager');\n      updateVersion.mockRejectedValue(new Error('Version update conflict: concurrent modification'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'PUT',\n        body: JSON.stringify({ description: 'Updated description' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Version update conflict');\n    });\n  });\n\n  describe('DELETE /api/versions/[version] - Delete Version', () => {\n    it('should handle version not found for deletion', async () => {\n      const { retrieveVersionData } = require('../../../lib/storage/version-store');\n      retrieveVersionData.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n    });\n\n    it('should handle attempt to delete current version', async () => {\n      const { deleteVersion } = require('../../../lib/services/version-manager');\n      deleteVersion.mockRejectedValue(new Error('Cannot delete current active version'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Cannot delete current active version');\n    });\n\n    it('should handle version with dependencies', async () => {\n      const { deleteVersion } = require('../../../lib/services/version-manager');\n      deleteVersion.mockRejectedValue(new Error('Version has dependencies and cannot be deleted'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Version has dependencies');\n    });\n\n    it('should handle storage deletion failure', async () => {\n      const { deleteVersionData } = require('../../../lib/storage/version-store');\n      deleteVersionData.mockRejectedValue(new Error('Failed to delete version data from storage'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to delete version data');\n    });\n  });\n\n  describe('Version Deployment Errors', () => {\n    it('should handle deployment preparation failure', async () => {\n      const { deployVersion } = require('../../../lib/services/version-manager');\n      deployVersion.mockRejectedValue(new Error('Deployment preparation failed: missing dependencies'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.2.0/deploy', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer deploy-token' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Deployment preparation failed');\n    });\n\n    it('should handle deployment rollback failure', async () => {\n      const { rollbackVersion } = require('../../../lib/services/version-manager');\n      rollbackVersion.mockRejectedValue(new Error('Rollback failed: backup not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/rollback', {\n        method: 'POST',\n        body: JSON.stringify({ targetVersion: '1.1.0' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Rollback failed');\n    });\n\n    it('should handle deployment timeout', async () => {\n      const { deployVersion } = require('../../../lib/services/version-manager');\n      deployVersion.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Deployment timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.2.0/deploy', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer deploy-token' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Deployment timeout');\n    });\n\n    it('should handle deployment environment mismatch', async () => {\n      const { deployVersion } = require('../../../lib/services/version-manager');\n      deployVersion.mockRejectedValue(new Error('Version not compatible with production environment'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.2.0/deploy', {\n        method: 'POST',\n        body: JSON.stringify({ environment: 'production' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('not compatible with production environment');\n    });\n  });\n\n  describe('Version Validation Errors', () => {\n    it('should handle semantic version validation failure', async () => {\n      const { validateVersionFormat } = require('../../../lib/services/version-manager');\n      validateVersionFormat.mockRejectedValue(new Error('Version must follow semantic versioning (x.y.z)'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ version: '1.2', description: 'Test' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('semantic versioning');\n    });\n\n    it('should handle version downgrade attempt', async () => {\n      const { validateVersionFormat } = require('../../../lib/services/version-manager');\n      validateVersionFormat.mockRejectedValue(new Error('Version downgrade not allowed'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ version: '0.9.0', description: 'Downgrade' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Version downgrade not allowed');\n    });\n\n    it('should handle breaking change validation', async () => {\n      const { checkVersionCompatibility } = require('../../../lib/services/version-manager');\n      checkVersionCompatibility.mockRejectedValue(new Error('Breaking changes require major version increment'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ \n          version: '1.2.1', \n          description: 'Minor update',\n          breaking: true \n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Breaking changes require major version increment');\n    });\n  });\n\n  describe('Version Metadata Errors', () => {\n    it('should handle corrupted version metadata', async () => {\n      const { getVersionMetadata } = require('../../../lib/storage/version-store');\n      getVersionMetadata.mockRejectedValue(new Error('Version metadata corrupted'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0/metadata');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Version metadata corrupted');\n    });\n\n    it('should handle missing release notes', async () => {\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ \n          version: '1.2.0', \n          description: 'Test',\n          changes: ['Change 1']\n          // Missing releaseNotes\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.details).toContain('releaseNotes');\n    });\n\n    it('should handle invalid changelog format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ \n          version: '1.2.0', \n          description: 'Test',\n          changes: 'Invalid format - should be array'\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid changelog format');\n    });\n  });\n\n  describe('Concurrent Version Operations', () => {\n    it('should handle concurrent version creation', async () => {\n      const { createVersion } = require('../../../lib/services/version-manager');\n      createVersion.mockRejectedValue(new Error('Concurrent version creation detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ version: '1.2.0', description: 'Test' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Concurrent version creation detected');\n    });\n\n    it('should handle version lock timeout', async () => {\n      const { updateVersion } = require('../../../lib/services/version-manager');\n      updateVersion.mockRejectedValue(new Error('Version lock timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions/1.0.0', {\n        method: 'PUT',\n        body: JSON.stringify({ description: 'Updated' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Version lock timeout');\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide version operation recovery suggestions', async () => {\n      const { createVersion } = require('../../../lib/services/version-manager');\n      createVersion.mockRejectedValue(new Error('Storage service temporarily unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ version: '1.2.0', description: 'Test' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry operation');\n    });\n\n    it('should track version operation metrics', async () => {\n      const { createVersion } = require('../../../lib/services/version-manager');\n      createVersion.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ version: '1.2.0', description: 'Test' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      await POST(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include version context in error responses', async () => {\n      const { createVersion } = require('../../../lib/services/version-manager');\n      createVersion.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/versions', {\n        method: 'POST',\n        body: JSON.stringify({ version: '1.2.0', description: 'Test' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('createVersion');\n      expect(data.error.context.version).toBe('1.2.0');\n    });\n  });\n});"],"version":3}