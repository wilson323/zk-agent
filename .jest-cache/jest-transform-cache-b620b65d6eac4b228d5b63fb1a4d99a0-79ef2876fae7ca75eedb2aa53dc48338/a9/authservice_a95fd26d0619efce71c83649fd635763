5ebbc910985e66f417d931fafb9557ef
"use strict";

/**
 * @file lib/services/auth-service.ts
 * @description Authentication service for handling user authentication and authorization.
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_4ers7xjov() {
  var path = "E:\\zk-agent\\lib\\services\\auth-service.ts";
  var hash = "01464f35c0fa191553640d4d4dd746eba64eafae";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\services\\auth-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 90
        }
      },
      "2": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "3": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 43
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "7": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 25,
          column: 2
        }
      },
      "8": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "9": {
        start: {
          line: 37,
          column: 14
        },
        end: {
          line: 80,
          column: 1
        }
      },
      "10": {
        start: {
          line: 38,
          column: 32
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "11": {
        start: {
          line: 39,
          column: 17
        },
        end: {
          line: 50,
          column: 6
        }
      },
      "12": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "13": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 54
        }
      },
      "14": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 54,
          column: 89
        }
      },
      "15": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 54
        }
      },
      "17": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "18": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 50
        }
      },
      "19": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 68,
          column: 7
        }
      },
      "20": {
        start: {
          line: 69,
          column: 42
        },
        end: {
          line: 69,
          column: 80
        }
      },
      "21": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 79,
          column: 6
        }
      },
      "22": {
        start: {
          line: 81,
          column: 0
        },
        end: {
          line: 81,
          column: 22
        }
      },
      "23": {
        start: {
          line: 88,
          column: 17
        },
        end: {
          line: 119,
          column: 1
        }
      },
      "24": {
        start: {
          line: 89,
          column: 46
        },
        end: {
          line: 89,
          column: 50
        }
      },
      "25": {
        start: {
          line: 90,
          column: 25
        },
        end: {
          line: 92,
          column: 6
        }
      },
      "26": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "27": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 64
        }
      },
      "28": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 71
        }
      },
      "29": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 113,
          column: 6
        }
      },
      "30": {
        start: {
          line: 114,
          column: 42
        },
        end: {
          line: 114,
          column: 83
        }
      },
      "31": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 118,
          column: 6
        }
      },
      "32": {
        start: {
          line: 120,
          column: 0
        },
        end: {
          line: 120,
          column: 28
        }
      },
      "33": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 148,
          column: 1
        }
      },
      "34": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 68
        }
      },
      "35": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 131,
          column: 5
        }
      },
      "36": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 50
        }
      },
      "37": {
        start: {
          line: 132,
          column: 17
        },
        end: {
          line: 142,
          column: 6
        }
      },
      "38": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "39": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "40": {
        start: {
          line: 146,
          column: 59
        },
        end: {
          line: 146,
          column: 97
        }
      },
      "41": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 58
        }
      },
      "42": {
        start: {
          line: 149,
          column: 0
        },
        end: {
          line: 149,
          column: 36
        }
      },
      "43": {
        start: {
          line: 157,
          column: 23
        },
        end: {
          line: 181,
          column: 1
        }
      },
      "44": {
        start: {
          line: 158,
          column: 41
        },
        end: {
          line: 158,
          column: 45
        }
      },
      "45": {
        start: {
          line: 159,
          column: 17
        },
        end: {
          line: 165,
          column: 6
        }
      },
      "46": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "47": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 43
        }
      },
      "48": {
        start: {
          line: 169,
          column: 28
        },
        end: {
          line: 169,
          column: 92
        }
      },
      "49": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 172,
          column: 5
        }
      },
      "50": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 53
        }
      },
      "51": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 74
        }
      },
      "52": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 180,
          column: 7
        }
      },
      "53": {
        start: {
          line: 182,
          column: 0
        },
        end: {
          line: 182,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 37,
            column: 14
          },
          end: {
            line: 37,
            column: 15
          }
        },
        loc: {
          start: {
            line: 37,
            column: 30
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 37
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 88,
            column: 17
          },
          end: {
            line: 88,
            column: 18
          }
        },
        loc: {
          start: {
            line: 88,
            column: 33
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 88
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 127,
            column: 21
          },
          end: {
            line: 127,
            column: 22
          }
        },
        loc: {
          start: {
            line: 127,
            column: 38
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 127
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 157,
            column: 23
          },
          end: {
            line: 157,
            column: 24
          }
        },
        loc: {
          start: {
            line: 157,
            column: 47
          },
          end: {
            line: 181,
            column: 1
          }
        },
        line: 157
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "4": {
        loc: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "5": {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "6": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: 143,
            column: 17
          },
          end: {
            line: 143,
            column: 41
          }
        }],
        line: 143
      },
      "7": {
        loc: {
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "8": {
        loc: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\services\\auth-service.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\lib\\services\\auth-service.ts"],
      sourcesContent: ["/**\n * @file lib/services/auth-service.ts\n * @description Authentication service for handling user authentication and authorization.\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { prisma } from '@/lib/database';\nimport { z } from 'zod';\nimport { hashPassword, verifyPassword } from '@/lib/auth/password';\nimport { generateToken, verifyToken } from '@/lib/auth/token';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { ErrorCode } from '@/types/core';\n\n// Zod validation schema for login\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n});\n\n// Zod validation schema for registration\nconst registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  name: z.string().optional(),\n  avatar: z.string().optional(),\n});\n\n// Zod validation schema for password change\nconst changePasswordSchema = z.object({\n  oldPassword: z.string(),\n  newPassword: z.string().min(8),\n});\n\n/**\n * Handles user login.\n *\n * @param {object} data - The login data.\n * @returns {Promise<object>} The login result with tokens.\n */\nexport const login = async (data: z.infer<typeof loginSchema>) => {\n  const { email, password } = data;\n\n  const user = await prisma.user.findUnique({\n    where: { email: email.toLowerCase() },\n    select: {\n      id: true,\n      email: true,\n      password: true,\n      name: true,\n      avatar: true,\n      role: true,\n      status: true,\n    },\n  });\n\n  if (!user) {\n    throw new Error('Invalid email or password.');\n  }\n\n  const isValidPassword = await verifyPassword(password, user.password);\n  if (!isValidPassword) {\n    throw new Error('Invalid email or password.');\n  }\n\n  if (user.status !== 'ACTIVE') {\n    throw new Error('Account is not active.');\n  }\n\n  // Update login stats\n  await prisma.user.update({\n    where: { id: user.id },\n    data: {\n      lastLoginAt: new Date(),\n      loginCount: { increment: 1 },\n    },\n  });\n\n  const { accessToken, refreshToken } = await generateToken(user);\n\n  return {\n    user: {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      avatar: user.avatar,\n      role: user.role,\n    },\n    tokens: { accessToken, refreshToken },\n  };\n};\n\n/**\n * Handles user registration.\n *\n * @param {object} data - The registration data.\n * @returns {Promise<object>} The registration result with tokens.\n */\nexport const register = async (data: z.infer<typeof registerSchema>) => {\n  const { email, password, name, avatar } = data;\n\n  const existingUser = await prisma.user.findUnique({\n    where: { email: email.toLowerCase() },\n  });\n\n  if (existingUser) {\n    throw new Error('User with this email already exists.');\n  }\n\n  const hashedPassword = await hashPassword(password);\n\n  const newUser = await prisma.user.create({\n    data: {\n      email: email.toLowerCase(),\n      password: hashedPassword,\n      name,\n      avatar,\n      role: 'USER',\n      status: 'ACTIVE',\n    },\n    select: {\n      id: true,\n      email: true,\n      name: true,\n      avatar: true,\n      role: true,\n    },\n  });\n\n  const { accessToken, refreshToken } = await generateToken(newUser);\n\n  return {\n    user: newUser,\n    tokens: { accessToken, refreshToken },\n  };\n};\n\n/**\n * Refreshes the access token using a refresh token.\n *\n * @param {string} refreshToken - The refresh token.\n * @returns {Promise<object>} The new tokens.\n */\nexport const refreshToken = async (token: string) => {\n  const payload = await verifyToken(token, 'refresh');\n  if (!payload) {\n    throw new Error('Invalid refresh token.');\n  }\n\n  const user = await prisma.user.findUnique({\n    where: { id: payload.userId },\n    select: {\n      id: true,\n      email: true,\n      name: true,\n      avatar: true,\n      role: true,\n      status: true,\n    },\n  });\n\n  if (!user || user.status !== 'ACTIVE') {\n    throw new Error('User not found or inactive.');\n  }\n\n  const { accessToken, refreshToken: newRefreshToken } = await generateToken(user);\n\n  return { accessToken, refreshToken: newRefreshToken };\n};\n\n/**\n * Changes a user's password.\n *\n * @param {string} userId - The user ID.\n * @param {object} data - The password change data.\n * @returns {Promise<void>}\n */\nexport const changePassword = async (userId: string, data: z.infer<typeof changePasswordSchema>) => {\n  const { oldPassword, newPassword } = data;\n\n  const user = await prisma.user.findUnique({\n    where: { id: userId },\n    select: {\n      id: true,\n      password: true,\n    },\n  });\n\n  if (!user) {\n    throw new Error('User not found.');\n  }\n\n  const isValidPassword = await verifyPassword(oldPassword, user.password);\n  if (!isValidPassword) {\n    throw new Error('Invalid current password.');\n  }\n\n  const hashedPassword = await hashPassword(newPassword);\n\n  await prisma.user.update({\n    where: { id: userId },\n    data: {\n      password: hashedPassword,\n      updatedAt: new Date(),\n    },\n  });\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "01464f35c0fa191553640d4d4dd746eba64eafae"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_4ers7xjov = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_4ers7xjov();
cov_4ers7xjov().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_4ers7xjov().s[1]++;
exports.changePassword = exports.refreshToken = exports.register = exports.login = void 0;
const database_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[2]++, require("@/lib/database"));
const zod_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[3]++, require("zod"));
const password_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[4]++, require("@/lib/auth/password"));
const token_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[5]++, require("@/lib/auth/token"));
// Zod validation schema for login
const loginSchema =
/* istanbul ignore next */
(cov_4ers7xjov().s[6]++, zod_1.z.object({
  email: zod_1.z.string().email(),
  password: zod_1.z.string().min(8)
}));
// Zod validation schema for registration
const registerSchema =
/* istanbul ignore next */
(cov_4ers7xjov().s[7]++, zod_1.z.object({
  email: zod_1.z.string().email(),
  password: zod_1.z.string().min(8),
  name: zod_1.z.string().optional(),
  avatar: zod_1.z.string().optional()
}));
// Zod validation schema for password change
const changePasswordSchema =
/* istanbul ignore next */
(cov_4ers7xjov().s[8]++, zod_1.z.object({
  oldPassword: zod_1.z.string(),
  newPassword: zod_1.z.string().min(8)
}));
/**
 * Handles user login.
 *
 * @param {object} data - The login data.
 * @returns {Promise<object>} The login result with tokens.
 */
/* istanbul ignore next */
cov_4ers7xjov().s[9]++;
const login = async data => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[0]++;
  const {
    email,
    password
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[10]++, data);
  const user =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[11]++, await database_1.prisma.user.findUnique({
    where: {
      email: email.toLowerCase()
    },
    select: {
      id: true,
      email: true,
      password: true,
      name: true,
      avatar: true,
      role: true,
      status: true
    }
  }));
  /* istanbul ignore next */
  cov_4ers7xjov().s[12]++;
  if (!user) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[0][0]++;
    cov_4ers7xjov().s[13]++;
    throw new Error('Invalid email or password.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[0][1]++;
  }
  const isValidPassword =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[14]++, await (0, password_1.verifyPassword)(password, user.password));
  /* istanbul ignore next */
  cov_4ers7xjov().s[15]++;
  if (!isValidPassword) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[1][0]++;
    cov_4ers7xjov().s[16]++;
    throw new Error('Invalid email or password.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[1][1]++;
  }
  cov_4ers7xjov().s[17]++;
  if (user.status !== 'ACTIVE') {
    /* istanbul ignore next */
    cov_4ers7xjov().b[2][0]++;
    cov_4ers7xjov().s[18]++;
    throw new Error('Account is not active.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[2][1]++;
  }
  // Update login stats
  cov_4ers7xjov().s[19]++;
  await database_1.prisma.user.update({
    where: {
      id: user.id
    },
    data: {
      lastLoginAt: new Date(),
      loginCount: {
        increment: 1
      }
    }
  });
  const {
    accessToken,
    refreshToken
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[20]++, await (0, token_1.generateToken)(user));
  /* istanbul ignore next */
  cov_4ers7xjov().s[21]++;
  return {
    user: {
      id: user.id,
      email: user.email,
      name: user.name,
      avatar: user.avatar,
      role: user.role
    },
    tokens: {
      accessToken,
      refreshToken
    }
  };
};
/* istanbul ignore next */
cov_4ers7xjov().s[22]++;
exports.login = login;
/**
 * Handles user registration.
 *
 * @param {object} data - The registration data.
 * @returns {Promise<object>} The registration result with tokens.
 */
/* istanbul ignore next */
cov_4ers7xjov().s[23]++;
const register = async data => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[1]++;
  const {
    email,
    password,
    name,
    avatar
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[24]++, data);
  const existingUser =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[25]++, await database_1.prisma.user.findUnique({
    where: {
      email: email.toLowerCase()
    }
  }));
  /* istanbul ignore next */
  cov_4ers7xjov().s[26]++;
  if (existingUser) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[3][0]++;
    cov_4ers7xjov().s[27]++;
    throw new Error('User with this email already exists.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[3][1]++;
  }
  const hashedPassword =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[28]++, await (0, password_1.hashPassword)(password));
  const newUser =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[29]++, await database_1.prisma.user.create({
    data: {
      email: email.toLowerCase(),
      password: hashedPassword,
      name,
      avatar,
      role: 'USER',
      status: 'ACTIVE'
    },
    select: {
      id: true,
      email: true,
      name: true,
      avatar: true,
      role: true
    }
  }));
  const {
    accessToken,
    refreshToken
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[30]++, await (0, token_1.generateToken)(newUser));
  /* istanbul ignore next */
  cov_4ers7xjov().s[31]++;
  return {
    user: newUser,
    tokens: {
      accessToken,
      refreshToken
    }
  };
};
/* istanbul ignore next */
cov_4ers7xjov().s[32]++;
exports.register = register;
/**
 * Refreshes the access token using a refresh token.
 *
 * @param {string} refreshToken - The refresh token.
 * @returns {Promise<object>} The new tokens.
 */
/* istanbul ignore next */
cov_4ers7xjov().s[33]++;
const refreshToken = async token => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[2]++;
  const payload =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[34]++, await (0, token_1.verifyToken)(token, 'refresh'));
  /* istanbul ignore next */
  cov_4ers7xjov().s[35]++;
  if (!payload) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[4][0]++;
    cov_4ers7xjov().s[36]++;
    throw new Error('Invalid refresh token.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[4][1]++;
  }
  const user =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[37]++, await database_1.prisma.user.findUnique({
    where: {
      id: payload.userId
    },
    select: {
      id: true,
      email: true,
      name: true,
      avatar: true,
      role: true,
      status: true
    }
  }));
  /* istanbul ignore next */
  cov_4ers7xjov().s[38]++;
  if (
  /* istanbul ignore next */
  (cov_4ers7xjov().b[6][0]++, !user) ||
  /* istanbul ignore next */
  (cov_4ers7xjov().b[6][1]++, user.status !== 'ACTIVE')) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[5][0]++;
    cov_4ers7xjov().s[39]++;
    throw new Error('User not found or inactive.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[5][1]++;
  }
  const {
    accessToken,
    refreshToken: newRefreshToken
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[40]++, await (0, token_1.generateToken)(user));
  /* istanbul ignore next */
  cov_4ers7xjov().s[41]++;
  return {
    accessToken,
    refreshToken: newRefreshToken
  };
};
/* istanbul ignore next */
cov_4ers7xjov().s[42]++;
exports.refreshToken = refreshToken;
/**
 * Changes a user's password.
 *
 * @param {string} userId - The user ID.
 * @param {object} data - The password change data.
 * @returns {Promise<void>}
 */
/* istanbul ignore next */
cov_4ers7xjov().s[43]++;
const changePassword = async (userId, data) => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[3]++;
  const {
    oldPassword,
    newPassword
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[44]++, data);
  const user =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[45]++, await database_1.prisma.user.findUnique({
    where: {
      id: userId
    },
    select: {
      id: true,
      password: true
    }
  }));
  /* istanbul ignore next */
  cov_4ers7xjov().s[46]++;
  if (!user) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[7][0]++;
    cov_4ers7xjov().s[47]++;
    throw new Error('User not found.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[7][1]++;
  }
  const isValidPassword =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[48]++, await (0, password_1.verifyPassword)(oldPassword, user.password));
  /* istanbul ignore next */
  cov_4ers7xjov().s[49]++;
  if (!isValidPassword) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[8][0]++;
    cov_4ers7xjov().s[50]++;
    throw new Error('Invalid current password.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[8][1]++;
  }
  const hashedPassword =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[51]++, await (0, password_1.hashPassword)(newPassword));
  /* istanbul ignore next */
  cov_4ers7xjov().s[52]++;
  await database_1.prisma.user.update({
    where: {
      id: userId
    },
    data: {
      password: hashedPassword,
      updatedAt: new Date()
    }
  });
};
/* istanbul ignore next */
cov_4ers7xjov().s[53]++;
exports.changePassword = changePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNGVyczd4am92IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwidW5kZWZpbmVkIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJmaWxlIiwibWFwcGluZ3MiLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsInZlcnNpb24iLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiZGF0YWJhc2VfMSIsInJlcXVpcmUiLCJ6b2RfMSIsInBhc3N3b3JkXzEiLCJ0b2tlbl8xIiwibG9naW5TY2hlbWEiLCJ6Iiwib2JqZWN0IiwiZW1haWwiLCJzdHJpbmciLCJwYXNzd29yZCIsIm1pbiIsInJlZ2lzdGVyU2NoZW1hIiwib3B0aW9uYWwiLCJhdmF0YXIiLCJjaGFuZ2VQYXNzd29yZFNjaGVtYSIsIm9sZFBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJsb2dpbiIsImRhdGEiLCJ1c2VyIiwicHJpc21hIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwidG9Mb3dlckNhc2UiLCJzZWxlY3QiLCJpZCIsInJvbGUiLCJzdGF0dXMiLCJFcnJvciIsImlzVmFsaWRQYXNzd29yZCIsInZlcmlmeVBhc3N3b3JkIiwidXBkYXRlIiwibGFzdExvZ2luQXQiLCJEYXRlIiwibG9naW5Db3VudCIsImluY3JlbWVudCIsImFjY2Vzc1Rva2VuIiwicmVmcmVzaFRva2VuIiwiZ2VuZXJhdGVUb2tlbiIsInRva2VucyIsImV4cG9ydHMiLCJyZWdpc3RlciIsImV4aXN0aW5nVXNlciIsImhhc2hlZFBhc3N3b3JkIiwiaGFzaFBhc3N3b3JkIiwibmV3VXNlciIsImNyZWF0ZSIsInRva2VuIiwicGF5bG9hZCIsInZlcmlmeVRva2VuIiwidXNlcklkIiwibmV3UmVmcmVzaFRva2VuIiwiY2hhbmdlUGFzc3dvcmQiLCJ1cGRhdGVkQXQiXSwic291cmNlcyI6WyJFOlxcemstYWdlbnRcXGxpYlxcc2VydmljZXNcXGF1dGgtc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGxpYi9zZXJ2aWNlcy9hdXRoLXNlcnZpY2UudHNcbiAqIEBkZXNjcmlwdGlvbiBBdXRoZW50aWNhdGlvbiBzZXJ2aWNlIGZvciBoYW5kbGluZyB1c2VyIGF1dGhlbnRpY2F0aW9uIGFuZCBhdXRob3JpemF0aW9uLlxuICogQGF1dGhvciBaSy1BZ2VudCBUZWFtXG4gKiBAZGF0ZSAyMDI1LTA2LTI1XG4gKi9cblxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQC9saWIvZGF0YWJhc2UnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBoYXNoUGFzc3dvcmQsIHZlcmlmeVBhc3N3b3JkIH0gZnJvbSAnQC9saWIvYXV0aC9wYXNzd29yZCc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRva2VuLCB2ZXJpZnlUb2tlbiB9IGZyb20gJ0AvbGliL2F1dGgvdG9rZW4nO1xuaW1wb3J0IHsgQXBpUmVzcG9uc2VXcmFwcGVyIH0gZnJvbSAnQC9saWIvdXRpbHMvYXBpLWhlbHBlcic7XG5pbXBvcnQgeyBFcnJvckNvZGUgfSBmcm9tICdAL3R5cGVzL2NvcmUnO1xuXG4vLyBab2QgdmFsaWRhdGlvbiBzY2hlbWEgZm9yIGxvZ2luXG5jb25zdCBsb2dpblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZW1haWw6IHouc3RyaW5nKCkuZW1haWwoKSxcbiAgcGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDgpLFxufSk7XG5cbi8vIFpvZCB2YWxpZGF0aW9uIHNjaGVtYSBmb3IgcmVnaXN0cmF0aW9uXG5jb25zdCByZWdpc3RlclNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZW1haWw6IHouc3RyaW5nKCkuZW1haWwoKSxcbiAgcGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDgpLFxuICBuYW1lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGF2YXRhcjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIFpvZCB2YWxpZGF0aW9uIHNjaGVtYSBmb3IgcGFzc3dvcmQgY2hhbmdlXG5jb25zdCBjaGFuZ2VQYXNzd29yZFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgb2xkUGFzc3dvcmQ6IHouc3RyaW5nKCksXG4gIG5ld1Bhc3N3b3JkOiB6LnN0cmluZygpLm1pbig4KSxcbn0pO1xuXG4vKipcbiAqIEhhbmRsZXMgdXNlciBsb2dpbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIFRoZSBsb2dpbiBkYXRhLlxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gVGhlIGxvZ2luIHJlc3VsdCB3aXRoIHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2luID0gYXN5bmMgKGRhdGE6IHouaW5mZXI8dHlwZW9mIGxvZ2luU2NoZW1hPikgPT4ge1xuICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gZGF0YTtcblxuICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgZW1haWw6IGVtYWlsLnRvTG93ZXJDYXNlKCkgfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIGlkOiB0cnVlLFxuICAgICAgZW1haWw6IHRydWUsXG4gICAgICBwYXNzd29yZDogdHJ1ZSxcbiAgICAgIG5hbWU6IHRydWUsXG4gICAgICBhdmF0YXI6IHRydWUsXG4gICAgICByb2xlOiB0cnVlLFxuICAgICAgc3RhdHVzOiB0cnVlLFxuICAgIH0sXG4gIH0pO1xuXG4gIGlmICghdXNlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbWFpbCBvciBwYXNzd29yZC4nKTtcbiAgfVxuXG4gIGNvbnN0IGlzVmFsaWRQYXNzd29yZCA9IGF3YWl0IHZlcmlmeVBhc3N3b3JkKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKTtcbiAgaWYgKCFpc1ZhbGlkUGFzc3dvcmQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW1haWwgb3IgcGFzc3dvcmQuJyk7XG4gIH1cblxuICBpZiAodXNlci5zdGF0dXMgIT09ICdBQ1RJVkUnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBY2NvdW50IGlzIG5vdCBhY3RpdmUuJyk7XG4gIH1cblxuICAvLyBVcGRhdGUgbG9naW4gc3RhdHNcbiAgYXdhaXQgcHJpc21hLnVzZXIudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogdXNlci5pZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIGxhc3RMb2dpbkF0OiBuZXcgRGF0ZSgpLFxuICAgICAgbG9naW5Db3VudDogeyBpbmNyZW1lbnQ6IDEgfSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB7IGFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW4gfSA9IGF3YWl0IGdlbmVyYXRlVG9rZW4odXNlcik7XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyOiB7XG4gICAgICBpZDogdXNlci5pZCxcbiAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgbmFtZTogdXNlci5uYW1lLFxuICAgICAgYXZhdGFyOiB1c2VyLmF2YXRhcixcbiAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICB9LFxuICAgIHRva2VuczogeyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuIH0sXG4gIH07XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgdXNlciByZWdpc3RyYXRpb24uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBUaGUgcmVnaXN0cmF0aW9uIGRhdGEuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBUaGUgcmVnaXN0cmF0aW9uIHJlc3VsdCB3aXRoIHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gYXN5bmMgKGRhdGE6IHouaW5mZXI8dHlwZW9mIHJlZ2lzdGVyU2NoZW1hPikgPT4ge1xuICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgbmFtZSwgYXZhdGFyIH0gPSBkYXRhO1xuXG4gIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0sXG4gIH0pO1xuXG4gIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLicpO1xuICB9XG5cbiAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuXG4gIGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5jcmVhdGUoe1xuICAgIGRhdGE6IHtcbiAgICAgIGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgbmFtZSxcbiAgICAgIGF2YXRhcixcbiAgICAgIHJvbGU6ICdVU0VSJyxcbiAgICAgIHN0YXR1czogJ0FDVElWRScsXG4gICAgfSxcbiAgICBzZWxlY3Q6IHtcbiAgICAgIGlkOiB0cnVlLFxuICAgICAgZW1haWw6IHRydWUsXG4gICAgICBuYW1lOiB0cnVlLFxuICAgICAgYXZhdGFyOiB0cnVlLFxuICAgICAgcm9sZTogdHJ1ZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB7IGFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW4gfSA9IGF3YWl0IGdlbmVyYXRlVG9rZW4obmV3VXNlcik7XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyOiBuZXdVc2VyLFxuICAgIHRva2VuczogeyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuIH0sXG4gIH07XG59O1xuXG4vKipcbiAqIFJlZnJlc2hlcyB0aGUgYWNjZXNzIHRva2VuIHVzaW5nIGEgcmVmcmVzaCB0b2tlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVmcmVzaFRva2VuIC0gVGhlIHJlZnJlc2ggdG9rZW4uXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBUaGUgbmV3IHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZnJlc2hUb2tlbiA9IGFzeW5jICh0b2tlbjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHBheWxvYWQgPSBhd2FpdCB2ZXJpZnlUb2tlbih0b2tlbiwgJ3JlZnJlc2gnKTtcbiAgaWYgKCFwYXlsb2FkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlZnJlc2ggdG9rZW4uJyk7XG4gIH1cblxuICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHBheWxvYWQudXNlcklkIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICBpZDogdHJ1ZSxcbiAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgIGF2YXRhcjogdHJ1ZSxcbiAgICAgIHJvbGU6IHRydWUsXG4gICAgICBzdGF0dXM6IHRydWUsXG4gICAgfSxcbiAgfSk7XG5cbiAgaWYgKCF1c2VyIHx8IHVzZXIuc3RhdHVzICE9PSAnQUNUSVZFJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgb3IgaW5hY3RpdmUuJyk7XG4gIH1cblxuICBjb25zdCB7IGFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW46IG5ld1JlZnJlc2hUb2tlbiB9ID0gYXdhaXQgZ2VuZXJhdGVUb2tlbih1c2VyKTtcblxuICByZXR1cm4geyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuOiBuZXdSZWZyZXNoVG9rZW4gfTtcbn07XG5cbi8qKlxuICogQ2hhbmdlcyBhIHVzZXIncyBwYXNzd29yZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIC0gVGhlIHVzZXIgSUQuXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIFRoZSBwYXNzd29yZCBjaGFuZ2UgZGF0YS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgY2hhbmdlUGFzc3dvcmQgPSBhc3luYyAodXNlcklkOiBzdHJpbmcsIGRhdGE6IHouaW5mZXI8dHlwZW9mIGNoYW5nZVBhc3N3b3JkU2NoZW1hPikgPT4ge1xuICBjb25zdCB7IG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZCB9ID0gZGF0YTtcblxuICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9LFxuICAgIHNlbGVjdDoge1xuICAgICAgaWQ6IHRydWUsXG4gICAgICBwYXNzd29yZDogdHJ1ZSxcbiAgICB9LFxuICB9KTtcblxuICBpZiAoIXVzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kLicpO1xuICB9XG5cbiAgY29uc3QgaXNWYWxpZFBhc3N3b3JkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQob2xkUGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICBpZiAoIWlzVmFsaWRQYXNzd29yZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjdXJyZW50IHBhc3N3b3JkLicpO1xuICB9XG5cbiAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQobmV3UGFzc3dvcmQpO1xuXG4gIGF3YWl0IHByaXNtYS51c2VyLnVwZGF0ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9LFxuICB9KTtcbn07Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFBQTtBQUFBLFNBQUFBLGNBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7SUFBQTtJQUFBVyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLGNBQUE7TUFBQUMsSUFBQTtNQUFBQyxRQUFBO01BQUFDLEtBQUE7TUFBQUMsT0FBQTtNQUFBQyxjQUFBO01BQUFDLE9BQUE7SUFBQTtJQUFBQyxlQUFBO0lBQUE1QixJQUFBO0VBQUE7RUFBQSxJQUFBNkIsUUFBQSxHQUFBNUIsTUFBQSxDQUFBRSxHQUFBLE1BQUFGLE1BQUEsQ0FBQUUsR0FBQTtFQUFBLEtBQUEwQixRQUFBLENBQUE5QixJQUFBLEtBQUE4QixRQUFBLENBQUE5QixJQUFBLEVBQUFDLElBQUEsS0FBQUEsSUFBQTtJQUFBNkIsUUFBQSxDQUFBOUIsSUFBQSxJQUFBSyxZQUFBO0VBQUE7RUFBQSxJQUFBMEIsY0FBQSxHQUFBRCxRQUFBLENBQUE5QixJQUFBO0VBQUE7SUFnQlM7SUFBQUQsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQWdDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFoQyxhQUFBO0FBQUFBLGFBQUEsR0FBQW9CLENBQUE7Ozs7Ozs7QUFUVCxNQUFBYSxVQUFBO0FBQUE7QUFBQSxDQUFBakMsYUFBQSxHQUFBb0IsQ0FBQSxPQUFBYyxPQUFBO0FBQ0EsTUFBQUMsS0FBQTtBQUFBO0FBQUEsQ0FBQW5DLGFBQUEsR0FBQW9CLENBQUEsT0FBQWMsT0FBQTtBQUNBLE1BQUFFLFVBQUE7QUFBQTtBQUFBLENBQUFwQyxhQUFBLEdBQUFvQixDQUFBLE9BQUFjLE9BQUE7QUFDQSxNQUFBRyxPQUFBO0FBQUE7QUFBQSxDQUFBckMsYUFBQSxHQUFBb0IsQ0FBQSxPQUFBYyxPQUFBO0FBSUE7QUFDQSxNQUFNSSxXQUFXO0FBQUE7QUFBQSxDQUFBdEMsYUFBQSxHQUFBb0IsQ0FBQSxPQUFHZSxLQUFBLENBQUFJLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0VBQzNCQyxLQUFLLEVBQUVOLEtBQUEsQ0FBQUksQ0FBQyxDQUFDRyxNQUFNLEVBQUUsQ0FBQ0QsS0FBSyxFQUFFO0VBQ3pCRSxRQUFRLEVBQUVSLEtBQUEsQ0FBQUksQ0FBQyxDQUFDRyxNQUFNLEVBQUUsQ0FBQ0UsR0FBRyxDQUFDLENBQUM7Q0FDM0IsQ0FBQztBQUVGO0FBQ0EsTUFBTUMsY0FBYztBQUFBO0FBQUEsQ0FBQTdDLGFBQUEsR0FBQW9CLENBQUEsT0FBR2UsS0FBQSxDQUFBSSxDQUFDLENBQUNDLE1BQU0sQ0FBQztFQUM5QkMsS0FBSyxFQUFFTixLQUFBLENBQUFJLENBQUMsQ0FBQ0csTUFBTSxFQUFFLENBQUNELEtBQUssRUFBRTtFQUN6QkUsUUFBUSxFQUFFUixLQUFBLENBQUFJLENBQUMsQ0FBQ0csTUFBTSxFQUFFLENBQUNFLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDM0IvQixJQUFJLEVBQUVzQixLQUFBLENBQUFJLENBQUMsQ0FBQ0csTUFBTSxFQUFFLENBQUNJLFFBQVEsRUFBRTtFQUMzQkMsTUFBTSxFQUFFWixLQUFBLENBQUFJLENBQUMsQ0FBQ0csTUFBTSxFQUFFLENBQUNJLFFBQVE7Q0FDNUIsQ0FBQztBQUVGO0FBQ0EsTUFBTUUsb0JBQW9CO0FBQUE7QUFBQSxDQUFBaEQsYUFBQSxHQUFBb0IsQ0FBQSxPQUFHZSxLQUFBLENBQUFJLENBQUMsQ0FBQ0MsTUFBTSxDQUFDO0VBQ3BDUyxXQUFXLEVBQUVkLEtBQUEsQ0FBQUksQ0FBQyxDQUFDRyxNQUFNLEVBQUU7RUFDdkJRLFdBQVcsRUFBRWYsS0FBQSxDQUFBSSxDQUFDLENBQUNHLE1BQU0sRUFBRSxDQUFDRSxHQUFHLENBQUMsQ0FBQztDQUM5QixDQUFDO0FBRUY7Ozs7OztBQUFBO0FBQUE1QyxhQUFBLEdBQUFvQixDQUFBO0FBTU8sTUFBTStCLEtBQUssR0FBRyxNQUFPQyxJQUFpQyxJQUFJO0VBQUE7RUFBQXBELGFBQUEsR0FBQXFCLENBQUE7RUFDL0QsTUFBTTtJQUFFb0IsS0FBSztJQUFFRTtFQUFRLENBQUU7RUFBQTtFQUFBLENBQUEzQyxhQUFBLEdBQUFvQixDQUFBLFFBQUdnQyxJQUFJO0VBRWhDLE1BQU1DLElBQUk7RUFBQTtFQUFBLENBQUFyRCxhQUFBLEdBQUFvQixDQUFBLFFBQUcsTUFBTWEsVUFBQSxDQUFBcUIsTUFBTSxDQUFDRCxJQUFJLENBQUNFLFVBQVUsQ0FBQztJQUN4Q0MsS0FBSyxFQUFFO01BQUVmLEtBQUssRUFBRUEsS0FBSyxDQUFDZ0IsV0FBVztJQUFFLENBQUU7SUFDckNDLE1BQU0sRUFBRTtNQUNOQyxFQUFFLEVBQUUsSUFBSTtNQUNSbEIsS0FBSyxFQUFFLElBQUk7TUFDWEUsUUFBUSxFQUFFLElBQUk7TUFDZDlCLElBQUksRUFBRSxJQUFJO01BQ1ZrQyxNQUFNLEVBQUUsSUFBSTtNQUNaYSxJQUFJLEVBQUUsSUFBSTtNQUNWQyxNQUFNLEVBQUU7O0dBRVgsQ0FBQztFQUFDO0VBQUE3RCxhQUFBLEdBQUFvQixDQUFBO0VBRUgsSUFBSSxDQUFDaUMsSUFBSSxFQUFFO0lBQUE7SUFBQXJELGFBQUEsR0FBQXNCLENBQUE7SUFBQXRCLGFBQUEsR0FBQW9CLENBQUE7SUFDVCxNQUFNLElBQUkwQyxLQUFLLENBQUMsNEJBQTRCLENBQUM7RUFDL0MsQ0FBQztFQUFBO0VBQUE7SUFBQTlELGFBQUEsR0FBQXNCLENBQUE7RUFBQTtFQUVELE1BQU15QyxlQUFlO0VBQUE7RUFBQSxDQUFBL0QsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHLE1BQU0sSUFBQWdCLFVBQUEsQ0FBQTRCLGNBQWMsRUFBQ3JCLFFBQVEsRUFBRVUsSUFBSSxDQUFDVixRQUFRLENBQUM7RUFBQztFQUFBM0MsYUFBQSxHQUFBb0IsQ0FBQTtFQUN0RSxJQUFJLENBQUMyQyxlQUFlLEVBQUU7SUFBQTtJQUFBL0QsYUFBQSxHQUFBc0IsQ0FBQTtJQUFBdEIsYUFBQSxHQUFBb0IsQ0FBQTtJQUNwQixNQUFNLElBQUkwQyxLQUFLLENBQUMsNEJBQTRCLENBQUM7RUFDL0MsQ0FBQztFQUFBO0VBQUE7SUFBQTlELGFBQUEsR0FBQXNCLENBQUE7RUFBQTtFQUFBdEIsYUFBQSxHQUFBb0IsQ0FBQTtFQUVELElBQUlpQyxJQUFJLENBQUNRLE1BQU0sS0FBSyxRQUFRLEVBQUU7SUFBQTtJQUFBN0QsYUFBQSxHQUFBc0IsQ0FBQTtJQUFBdEIsYUFBQSxHQUFBb0IsQ0FBQTtJQUM1QixNQUFNLElBQUkwQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7RUFDM0MsQ0FBQztFQUFBO0VBQUE7SUFBQTlELGFBQUEsR0FBQXNCLENBQUE7RUFBQTtFQUVEO0VBQUF0QixhQUFBLEdBQUFvQixDQUFBO0VBQ0EsTUFBTWEsVUFBQSxDQUFBcUIsTUFBTSxDQUFDRCxJQUFJLENBQUNZLE1BQU0sQ0FBQztJQUN2QlQsS0FBSyxFQUFFO01BQUVHLEVBQUUsRUFBRU4sSUFBSSxDQUFDTTtJQUFFLENBQUU7SUFDdEJQLElBQUksRUFBRTtNQUNKYyxXQUFXLEVBQUUsSUFBSUMsSUFBSSxFQUFFO01BQ3ZCQyxVQUFVLEVBQUU7UUFBRUMsU0FBUyxFQUFFO01BQUM7O0dBRTdCLENBQUM7RUFFRixNQUFNO0lBQUVDLFdBQVc7SUFBRUM7RUFBWSxDQUFFO0VBQUE7RUFBQSxDQUFBdkUsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHLE1BQU0sSUFBQWlCLE9BQUEsQ0FBQW1DLGFBQWEsRUFBQ25CLElBQUksQ0FBQztFQUFDO0VBQUFyRCxhQUFBLEdBQUFvQixDQUFBO0VBRWhFLE9BQU87SUFDTGlDLElBQUksRUFBRTtNQUNKTSxFQUFFLEVBQUVOLElBQUksQ0FBQ00sRUFBRTtNQUNYbEIsS0FBSyxFQUFFWSxJQUFJLENBQUNaLEtBQUs7TUFDakI1QixJQUFJLEVBQUV3QyxJQUFJLENBQUN4QyxJQUFJO01BQ2ZrQyxNQUFNLEVBQUVNLElBQUksQ0FBQ04sTUFBTTtNQUNuQmEsSUFBSSxFQUFFUCxJQUFJLENBQUNPO0tBQ1o7SUFDRGEsTUFBTSxFQUFFO01BQUVILFdBQVc7TUFBRUM7SUFBWTtHQUNwQztBQUNILENBQUM7QUFBQztBQUFBdkUsYUFBQSxHQUFBb0IsQ0FBQTtBQWxEV3NELE9BQUEsQ0FBQXZCLEtBQUssR0FBQUEsS0FBQTtBQW9EbEI7Ozs7OztBQUFBO0FBQUFuRCxhQUFBLEdBQUFvQixDQUFBO0FBTU8sTUFBTXVELFFBQVEsR0FBRyxNQUFPdkIsSUFBb0MsSUFBSTtFQUFBO0VBQUFwRCxhQUFBLEdBQUFxQixDQUFBO0VBQ3JFLE1BQU07SUFBRW9CLEtBQUs7SUFBRUUsUUFBUTtJQUFFOUIsSUFBSTtJQUFFa0M7RUFBTSxDQUFFO0VBQUE7RUFBQSxDQUFBL0MsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHZ0MsSUFBSTtFQUU5QyxNQUFNd0IsWUFBWTtFQUFBO0VBQUEsQ0FBQTVFLGFBQUEsR0FBQW9CLENBQUEsUUFBRyxNQUFNYSxVQUFBLENBQUFxQixNQUFNLENBQUNELElBQUksQ0FBQ0UsVUFBVSxDQUFDO0lBQ2hEQyxLQUFLLEVBQUU7TUFBRWYsS0FBSyxFQUFFQSxLQUFLLENBQUNnQixXQUFXO0lBQUU7R0FDcEMsQ0FBQztFQUFDO0VBQUF6RCxhQUFBLEdBQUFvQixDQUFBO0VBRUgsSUFBSXdELFlBQVksRUFBRTtJQUFBO0lBQUE1RSxhQUFBLEdBQUFzQixDQUFBO0lBQUF0QixhQUFBLEdBQUFvQixDQUFBO0lBQ2hCLE1BQU0sSUFBSTBDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQztFQUN6RCxDQUFDO0VBQUE7RUFBQTtJQUFBOUQsYUFBQSxHQUFBc0IsQ0FBQTtFQUFBO0VBRUQsTUFBTXVELGNBQWM7RUFBQTtFQUFBLENBQUE3RSxhQUFBLEdBQUFvQixDQUFBLFFBQUcsTUFBTSxJQUFBZ0IsVUFBQSxDQUFBMEMsWUFBWSxFQUFDbkMsUUFBUSxDQUFDO0VBRW5ELE1BQU1vQyxPQUFPO0VBQUE7RUFBQSxDQUFBL0UsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHLE1BQU1hLFVBQUEsQ0FBQXFCLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDMkIsTUFBTSxDQUFDO0lBQ3ZDNUIsSUFBSSxFQUFFO01BQ0pYLEtBQUssRUFBRUEsS0FBSyxDQUFDZ0IsV0FBVyxFQUFFO01BQzFCZCxRQUFRLEVBQUVrQyxjQUFjO01BQ3hCaEUsSUFBSTtNQUNKa0MsTUFBTTtNQUNOYSxJQUFJLEVBQUUsTUFBTTtNQUNaQyxNQUFNLEVBQUU7S0FDVDtJQUNESCxNQUFNLEVBQUU7TUFDTkMsRUFBRSxFQUFFLElBQUk7TUFDUmxCLEtBQUssRUFBRSxJQUFJO01BQ1g1QixJQUFJLEVBQUUsSUFBSTtNQUNWa0MsTUFBTSxFQUFFLElBQUk7TUFDWmEsSUFBSSxFQUFFOztHQUVULENBQUM7RUFFRixNQUFNO0lBQUVVLFdBQVc7SUFBRUM7RUFBWSxDQUFFO0VBQUE7RUFBQSxDQUFBdkUsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHLE1BQU0sSUFBQWlCLE9BQUEsQ0FBQW1DLGFBQWEsRUFBQ08sT0FBTyxDQUFDO0VBQUM7RUFBQS9FLGFBQUEsR0FBQW9CLENBQUE7RUFFbkUsT0FBTztJQUNMaUMsSUFBSSxFQUFFMEIsT0FBTztJQUNiTixNQUFNLEVBQUU7TUFBRUgsV0FBVztNQUFFQztJQUFZO0dBQ3BDO0FBQ0gsQ0FBQztBQUFDO0FBQUF2RSxhQUFBLEdBQUFvQixDQUFBO0FBckNXc0QsT0FBQSxDQUFBQyxRQUFRLEdBQUFBLFFBQUE7QUF1Q3JCOzs7Ozs7QUFBQTtBQUFBM0UsYUFBQSxHQUFBb0IsQ0FBQTtBQU1PLE1BQU1tRCxZQUFZLEdBQUcsTUFBT1UsS0FBYSxJQUFJO0VBQUE7RUFBQWpGLGFBQUEsR0FBQXFCLENBQUE7RUFDbEQsTUFBTTZELE9BQU87RUFBQTtFQUFBLENBQUFsRixhQUFBLEdBQUFvQixDQUFBLFFBQUcsTUFBTSxJQUFBaUIsT0FBQSxDQUFBOEMsV0FBVyxFQUFDRixLQUFLLEVBQUUsU0FBUyxDQUFDO0VBQUM7RUFBQWpGLGFBQUEsR0FBQW9CLENBQUE7RUFDcEQsSUFBSSxDQUFDOEQsT0FBTyxFQUFFO0lBQUE7SUFBQWxGLGFBQUEsR0FBQXNCLENBQUE7SUFBQXRCLGFBQUEsR0FBQW9CLENBQUE7SUFDWixNQUFNLElBQUkwQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7RUFDM0MsQ0FBQztFQUFBO0VBQUE7SUFBQTlELGFBQUEsR0FBQXNCLENBQUE7RUFBQTtFQUVELE1BQU0rQixJQUFJO0VBQUE7RUFBQSxDQUFBckQsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHLE1BQU1hLFVBQUEsQ0FBQXFCLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDRSxVQUFVLENBQUM7SUFDeENDLEtBQUssRUFBRTtNQUFFRyxFQUFFLEVBQUV1QixPQUFPLENBQUNFO0lBQU0sQ0FBRTtJQUM3QjFCLE1BQU0sRUFBRTtNQUNOQyxFQUFFLEVBQUUsSUFBSTtNQUNSbEIsS0FBSyxFQUFFLElBQUk7TUFDWDVCLElBQUksRUFBRSxJQUFJO01BQ1ZrQyxNQUFNLEVBQUUsSUFBSTtNQUNaYSxJQUFJLEVBQUUsSUFBSTtNQUNWQyxNQUFNLEVBQUU7O0dBRVgsQ0FBQztFQUFDO0VBQUE3RCxhQUFBLEdBQUFvQixDQUFBO0VBRUg7RUFBSTtFQUFBLENBQUFwQixhQUFBLEdBQUFzQixDQUFBLFdBQUMrQixJQUFJO0VBQUE7RUFBQSxDQUFBckQsYUFBQSxHQUFBc0IsQ0FBQSxVQUFJK0IsSUFBSSxDQUFDUSxNQUFNLEtBQUssUUFBUSxHQUFFO0lBQUE7SUFBQTdELGFBQUEsR0FBQXNCLENBQUE7SUFBQXRCLGFBQUEsR0FBQW9CLENBQUE7SUFDckMsTUFBTSxJQUFJMEMsS0FBSyxDQUFDLDZCQUE2QixDQUFDO0VBQ2hELENBQUM7RUFBQTtFQUFBO0lBQUE5RCxhQUFBLEdBQUFzQixDQUFBO0VBQUE7RUFFRCxNQUFNO0lBQUVnRCxXQUFXO0lBQUVDLFlBQVksRUFBRWM7RUFBZSxDQUFFO0VBQUE7RUFBQSxDQUFBckYsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHLE1BQU0sSUFBQWlCLE9BQUEsQ0FBQW1DLGFBQWEsRUFBQ25CLElBQUksQ0FBQztFQUFDO0VBQUFyRCxhQUFBLEdBQUFvQixDQUFBO0VBRWpGLE9BQU87SUFBRWtELFdBQVc7SUFBRUMsWUFBWSxFQUFFYztFQUFlLENBQUU7QUFDdkQsQ0FBQztBQUFDO0FBQUFyRixhQUFBLEdBQUFvQixDQUFBO0FBekJXc0QsT0FBQSxDQUFBSCxZQUFZLEdBQUFBLFlBQUE7QUEyQnpCOzs7Ozs7O0FBQUE7QUFBQXZFLGFBQUEsR0FBQW9CLENBQUE7QUFPTyxNQUFNa0UsY0FBYyxHQUFHLE1BQUFBLENBQU9GLE1BQWMsRUFBRWhDLElBQTBDLEtBQUk7RUFBQTtFQUFBcEQsYUFBQSxHQUFBcUIsQ0FBQTtFQUNqRyxNQUFNO0lBQUU0QixXQUFXO0lBQUVDO0VBQVcsQ0FBRTtFQUFBO0VBQUEsQ0FBQWxELGFBQUEsR0FBQW9CLENBQUEsUUFBR2dDLElBQUk7RUFFekMsTUFBTUMsSUFBSTtFQUFBO0VBQUEsQ0FBQXJELGFBQUEsR0FBQW9CLENBQUEsUUFBRyxNQUFNYSxVQUFBLENBQUFxQixNQUFNLENBQUNELElBQUksQ0FBQ0UsVUFBVSxDQUFDO0lBQ3hDQyxLQUFLLEVBQUU7TUFBRUcsRUFBRSxFQUFFeUI7SUFBTSxDQUFFO0lBQ3JCMUIsTUFBTSxFQUFFO01BQ05DLEVBQUUsRUFBRSxJQUFJO01BQ1JoQixRQUFRLEVBQUU7O0dBRWIsQ0FBQztFQUFDO0VBQUEzQyxhQUFBLEdBQUFvQixDQUFBO0VBRUgsSUFBSSxDQUFDaUMsSUFBSSxFQUFFO0lBQUE7SUFBQXJELGFBQUEsR0FBQXNCLENBQUE7SUFBQXRCLGFBQUEsR0FBQW9CLENBQUE7SUFDVCxNQUFNLElBQUkwQyxLQUFLLENBQUMsaUJBQWlCLENBQUM7RUFDcEMsQ0FBQztFQUFBO0VBQUE7SUFBQTlELGFBQUEsR0FBQXNCLENBQUE7RUFBQTtFQUVELE1BQU15QyxlQUFlO0VBQUE7RUFBQSxDQUFBL0QsYUFBQSxHQUFBb0IsQ0FBQSxRQUFHLE1BQU0sSUFBQWdCLFVBQUEsQ0FBQTRCLGNBQWMsRUFBQ2YsV0FBVyxFQUFFSSxJQUFJLENBQUNWLFFBQVEsQ0FBQztFQUFDO0VBQUEzQyxhQUFBLEdBQUFvQixDQUFBO0VBQ3pFLElBQUksQ0FBQzJDLGVBQWUsRUFBRTtJQUFBO0lBQUEvRCxhQUFBLEdBQUFzQixDQUFBO0lBQUF0QixhQUFBLEdBQUFvQixDQUFBO0lBQ3BCLE1BQU0sSUFBSTBDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQztFQUM5QyxDQUFDO0VBQUE7RUFBQTtJQUFBOUQsYUFBQSxHQUFBc0IsQ0FBQTtFQUFBO0VBRUQsTUFBTXVELGNBQWM7RUFBQTtFQUFBLENBQUE3RSxhQUFBLEdBQUFvQixDQUFBLFFBQUcsTUFBTSxJQUFBZ0IsVUFBQSxDQUFBMEMsWUFBWSxFQUFDNUIsV0FBVyxDQUFDO0VBQUM7RUFBQWxELGFBQUEsR0FBQW9CLENBQUE7RUFFdkQsTUFBTWEsVUFBQSxDQUFBcUIsTUFBTSxDQUFDRCxJQUFJLENBQUNZLE1BQU0sQ0FBQztJQUN2QlQsS0FBSyxFQUFFO01BQUVHLEVBQUUsRUFBRXlCO0lBQU0sQ0FBRTtJQUNyQmhDLElBQUksRUFBRTtNQUNKVCxRQUFRLEVBQUVrQyxjQUFjO01BQ3hCVSxTQUFTLEVBQUUsSUFBSXBCLElBQUk7O0dBRXRCLENBQUM7QUFDSixDQUFDO0FBQUM7QUFBQW5FLGFBQUEsR0FBQW9CLENBQUE7QUE3QldzRCxPQUFBLENBQUFZLGNBQWMsR0FBQUEsY0FBQSIsImlnbm9yZUxpc3QiOltdfQ==