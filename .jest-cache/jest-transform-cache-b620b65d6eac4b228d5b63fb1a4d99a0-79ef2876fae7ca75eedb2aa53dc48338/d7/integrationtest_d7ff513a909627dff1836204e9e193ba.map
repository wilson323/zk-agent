{"file":"E:\\zk-agent\\tests\\database\\integration.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\database\\integration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach, afterEach, jest } from '@jest/globals'\nimport { enhancedDb } from '../../lib/database/enhanced-connection'\nimport { databaseMonitor } from '../../lib/database/monitoring'\nimport { poolOptimizer } from '../../lib/database/pool-optimizer'\nimport { errorRecovery } from '../../lib/database/error-recovery'\nimport { checkDatabaseConnection, getDatabasePoolStatus } from '../../lib/database/connection'\n\n// Mock environment variables\nprocess.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test_db'\nprocess.env.ENHANCED_DB_CONNECTION = 'true'\nprocess.env.DB_MONITORING_ENABLED = 'true'\nprocess.env.DB_POOL_OPTIMIZATION_ENABLED = 'true'\nprocess.env.DB_ERROR_RECOVERY_ENABLED = 'true'\n\ndescribe('Database Integration Tests', () => {\n  beforeAll(async () => {\n    // 确保所有模块都已初始化\n    await new Promise(resolve => setTimeout(resolve, 1000))\n  })\n\n  afterAll(async () => {\n    // 清理所有连接和监控\n    await enhancedDb.disconnect()\n    databaseMonitor.stop()\n    poolOptimizer.stop()\n    errorRecovery.stop()\n  })\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Enhanced Database Connection Integration', () => {\n    it('should connect and provide basic functionality', async () => {\n      const isConnected = await enhancedDb.connect()\n      expect(isConnected).toBe(true)\n      expect(enhancedDb.isConnected()).toBe(true)\n\n      const stats = enhancedDb.getStats()\n      expect(stats.state).toBe('connected')\n      expect(stats.isHealthy).toBe(true)\n    })\n\n    it('should handle configuration updates', async () => {\n      const newConfig = {\n        maxConnections: 15,\n        minConnections: 3,\n        connectionTimeout: 8000\n      }\n\n      await enhancedDb.updateConfiguration(newConfig)\n      const config = enhancedDb.getConfiguration()\n      expect(config.pool).toMatchObject(newConfig)\n    })\n\n    it('should provide detailed statistics', () => {\n      const detailedStats = enhancedDb.getDetailedStats()\n      \n      expect(detailedStats).toHaveProperty('state')\n      expect(detailedStats).toHaveProperty('uptime')\n      expect(detailedStats).toHaveProperty('configuration')\n      expect(detailedStats).toHaveProperty('performance')\n      expect(detailedStats.performance).toHaveProperty('successRate')\n      expect(detailedStats.performance).toHaveProperty('queriesPerSecond')\n      expect(detailedStats.performance).toHaveProperty('avgResponseTime')\n    })\n  })\n\n  describe('Database Monitoring Integration', () => {\n    it('should start monitoring and collect metrics', async () => {\n      databaseMonitor.start()\n      \n      // 等待监控收集一些数据\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      const metrics = databaseMonitor.getMetrics()\n      expect(metrics).toHaveProperty('timestamp')\n      expect(metrics).toHaveProperty('connections')\n      expect(metrics).toHaveProperty('performance')\n      expect(metrics).toHaveProperty('system')\n    })\n\n    it('should detect performance issues', async () => {\n      const alertSpy = jest.fn()\n      databaseMonitor.on('alert', alertSpy)\n\n      // 模拟性能问题\n      const mockMetrics = {\n        timestamp: new Date(),\n        connections: {\n          active: 18, // 超过阈值\n          idle: 2,\n          total: 20\n        },\n        performance: {\n          avgLatency: 1200, // 超过阈值\n          queryRate: 50,\n          errorRate: 0.05\n        },\n        system: {\n          cpuUsage: 85, // 超过阈值\n          memoryUsage: 90,\n          diskUsage: 60\n        }\n      }\n\n      // 手动触发性能检查\n      databaseMonitor['checkPerformanceThresholds'](mockMetrics)\n      \n      // 验证是否生成了警报\n      expect(alertSpy).toHaveBeenCalled()\n    })\n  })\n\n  describe('Pool Optimizer Integration', () => {\n    it('should start optimization and evaluate strategies', async () => {\n      poolOptimizer.start()\n      \n      // 等待优化器运行\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      const history = poolOptimizer.getOptimizationHistory()\n      expect(Array.isArray(history)).toBe(true)\n    })\n\n    it('should respond to performance alerts', async () => {\n      const optimizationSpy = jest.fn()\n      poolOptimizer.on('optimizationApplied', optimizationSpy)\n\n      // 模拟性能警报\n      const alert = {\n        id: 'test-alert',\n        type: 'performance' as const,\n        severity: 'high' as const,\n        message: 'High connection usage detected',\n        timestamp: new Date(),\n        metrics: {\n          connections: { active: 18, idle: 2, total: 20 },\n          performance: { avgLatency: 800, queryRate: 100, errorRate: 0.02 }\n        }\n      }\n\n      // 手动触发警报处理\n      poolOptimizer['handleAlert'](alert)\n      \n      // 验证是否应用了优化\n      expect(optimizationSpy).toHaveBeenCalled()\n    })\n  })\n\n  describe('Error Recovery Integration', () => {\n    it('should start error recovery system', () => {\n      errorRecovery.start()\n      \n      const stats = errorRecovery.getStats()\n      expect(stats).toHaveProperty('totalErrors')\n      expect(stats).toHaveProperty('recoveryAttempts')\n      expect(stats).toHaveProperty('circuitBreakerState')\n    })\n\n    it('should handle database errors', async () => {\n      const recoverySpy = jest.fn()\n      errorRecovery.on('recoveryExecuted', recoverySpy)\n\n      // 模拟数据库错误\n      const error = new Error('Connection timeout')\n      error.name = 'ConnectionError'\n\n      // 手动触发错误处理\n      await errorRecovery.handleError(error)\n      \n      // 验证是否执行了恢复策略\n      expect(recoverySpy).toHaveBeenCalled()\n    })\n\n    it('should update circuit breaker state', async () => {\n      // 模拟多次错误以触发断路器\n      for (let i = 0; i < 6; i++) {\n        const error = new Error(`Error ${i}`)\n        await errorRecovery.handleError(error)\n      }\n\n      const stats = errorRecovery.getStats()\n      expect(stats.circuitBreakerState).toBe('open')\n    })\n  })\n\n  describe('Legacy Connection Integration', () => {\n    it('should work with existing connection functions', async () => {\n      const connectionStatus = await checkDatabaseConnection()\n      \n      expect(connectionStatus).toHaveProperty('connected')\n      expect(connectionStatus).toHaveProperty('message')\n      expect(connectionStatus).toHaveProperty('stats')\n      \n      if (connectionStatus.connected) {\n        expect(connectionStatus.stats).toHaveProperty('totalQueries')\n        expect(connectionStatus.stats).toHaveProperty('failedQueries')\n        expect(connectionStatus.stats).toHaveProperty('avgLatency')\n      }\n    })\n\n    it('should provide enhanced pool status', async () => {\n      const poolStatus = await getDatabasePoolStatus()\n      \n      expect(poolStatus).toHaveProperty('status')\n      expect(poolStatus).toHaveProperty('connections')\n      expect(poolStatus).toHaveProperty('performance')\n      \n      if (enhancedDb.isConnected()) {\n        expect(poolStatus.performance).toHaveProperty('successRate')\n        expect(poolStatus.performance).toHaveProperty('avgLatency')\n        expect(poolStatus.connections).toHaveProperty('reconnectAttempts')\n      }\n    })\n  })\n\n  describe('End-to-End Workflow', () => {\n    it('should handle complete error recovery workflow', async () => {\n      // 1. 连接数据库\n      await enhancedDb.connect()\n      expect(enhancedDb.isConnected()).toBe(true)\n\n      // 2. 启动所有监控系统\n      databaseMonitor.start()\n      poolOptimizer.start()\n      errorRecovery.start()\n\n      // 3. 模拟查询执行\n      try {\n        await enhancedDb.executeQuery(async (prisma) => {\n          // 模拟简单查询\n          return { result: 'success' }\n        })\n      } catch (error) {\n        // 预期可能的错误\n      }\n\n      // 4. 检查统计信息\n      const stats = enhancedDb.getDetailedStats()\n      expect(stats.totalQueries).toBeGreaterThan(0)\n\n      // 5. 验证监控数据\n      const metrics = databaseMonitor.getMetrics()\n      expect(metrics.timestamp).toBeInstanceOf(Date)\n\n      // 6. 验证错误恢复状态\n      const errorStats = errorRecovery.getStats()\n      expect(errorStats).toHaveProperty('totalErrors')\n\n      // 7. 清理\n      databaseMonitor.stop()\n      poolOptimizer.stop()\n      errorRecovery.stop()\n      await enhancedDb.disconnect()\n    })\n\n    it('should maintain system stability under load', async () => {\n      await enhancedDb.connect()\n      \n      // 启动监控\n      databaseMonitor.start()\n      errorRecovery.start()\n\n      // 模拟并发查询\n      const queries = Array.from({ length: 10 }, (_, i) => \n        enhancedDb.executeQuery(async () => ({ id: i, result: 'test' }))\n          .catch(error => ({ error: error.message }))\n      )\n\n      const results = await Promise.all(queries)\n      \n      // 验证系统仍然稳定\n      expect(enhancedDb.isConnected()).toBe(true)\n      expect(results.length).toBe(10)\n\n      // 检查性能指标\n      const detailedStats = enhancedDb.getDetailedStats()\n      expect(detailedStats.performance.successRate).toBeGreaterThan(0)\n\n      // 清理\n      databaseMonitor.stop()\n      errorRecovery.stop()\n      await enhancedDb.disconnect()\n    })\n  })\n\n  describe('Configuration Management', () => {\n    it('should handle dynamic configuration updates', async () => {\n      await enhancedDb.connect()\n\n      // 更新连接池配置\n      const poolConfig = {\n        maxConnections: 25,\n        minConnections: 5,\n        connectionTimeout: 10000\n      }\n      \n      await enhancedDb.updateConfiguration(poolConfig)\n      \n      // 更新恢复配置\n      const recoveryConfig = {\n        maxRetries: 5,\n        retryDelay: 2000,\n        circuitBreakerThreshold: 8\n      }\n      \n      enhancedDb.updateRecoveryConfiguration(recoveryConfig)\n      \n      // 验证配置已更新\n      const currentConfig = enhancedDb.getConfiguration()\n      expect(currentConfig.pool).toMatchObject(poolConfig)\n      expect(currentConfig.recovery).toMatchObject(recoveryConfig)\n    })\n  })\n})"],"version":3}