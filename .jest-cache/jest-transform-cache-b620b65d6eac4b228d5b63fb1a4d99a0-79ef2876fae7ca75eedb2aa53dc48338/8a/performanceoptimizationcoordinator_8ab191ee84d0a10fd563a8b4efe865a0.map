{"file":"E:\\zk-agent\\lib\\database\\performance-optimization-coordinator.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\performance-optimization-coordinator.ts"],"sourcesContent":["/**\r\n * 数据库性能优化协调器\r\n * 统一管理和协调所有数据库性能优化组件\r\n * \r\n * 功能:\r\n * - 组件生命周期管理\r\n * - 优化策略协调\r\n * - 性能监控集成\r\n * - 自动化优化决策\r\n * - 配置统一管理\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { DatabasePoolOptimizer } from './pool-optimizer'\r\nimport { ConnectionPoolAnalyzer } from './connection-pool-analyzer'\r\nimport { DynamicPoolAdjuster } from './dynamic-pool-adjuster'\r\nimport { QueryPerformanceOptimizer } from './query-performance-optimizer'\r\nimport { IntelligentCacheManager } from './intelligent-cache-manager'\r\nimport { CacheStrategyOptimizer } from './cache-strategy-optimizer'\r\nimport { PerformanceMonitorEnhancer } from './performance-monitor-enhancer'\r\nimport { databaseMonitor } from './monitoring'\r\n\r\n/**\r\n * 优化组件状态\r\n */\r\ninterface ComponentStatus {\r\n  /** 组件名称 */\r\n  name: string\r\n  /** 是否启用 */\r\n  enabled: boolean\r\n  /** 是否运行中 */\r\n  running: boolean\r\n  /** 最后更新时间 */\r\n  lastUpdate: Date\r\n  /** 健康状态 */\r\n  health: 'healthy' | 'warning' | 'error'\r\n  /** 状态消息 */\r\n  message?: string\r\n  /** 性能指标 */\r\n  metrics?: Record<string, number>\r\n}\r\n\r\n/**\r\n * 优化策略配置\r\n */\r\ninterface OptimizationStrategy {\r\n  /** 策略名称 */\r\n  name: string\r\n  /** 是否启用 */\r\n  enabled: boolean\r\n  /** 优先级 */\r\n  priority: number\r\n  /** 触发条件 */\r\n  triggers: {\r\n    /** 性能阈值 */\r\n    performanceThreshold?: number\r\n    /** 错误率阈值 */\r\n    errorRateThreshold?: number\r\n    /** 延迟阈值 */\r\n    latencyThreshold?: number\r\n    /** 资源使用率阈值 */\r\n    resourceUsageThreshold?: number\r\n  }\r\n  /** 优化动作 */\r\n  actions: {\r\n    /** 连接池优化 */\r\n    poolOptimization?: boolean\r\n    /** 查询优化 */\r\n    queryOptimization?: boolean\r\n    /** 缓存优化 */\r\n    cacheOptimization?: boolean\r\n    /** 监控增强 */\r\n    monitoringEnhancement?: boolean\r\n  }\r\n  /** 冷却期(ms) */\r\n  cooldownPeriod: number\r\n  /** 最后执行时间 */\r\n  lastExecuted?: Date\r\n}\r\n\r\n/**\r\n * 协调器配置\r\n */\r\ninterface CoordinatorConfig {\r\n  /** 是否启用自动优化 */\r\n  autoOptimization: boolean\r\n  /** 检查间隔(ms) */\r\n  checkInterval: number\r\n  /** 优化间隔(ms) */\r\n  optimizationInterval: number\r\n  /** 是否启用性能监控 */\r\n  performanceMonitoring: boolean\r\n  /** 是否启用告警 */\r\n  alerting: boolean\r\n  /** 日志级别 */\r\n  logLevel: 'debug' | 'info' | 'warn' | 'error'\r\n  /** 最大并发优化数 */\r\n  maxConcurrentOptimizations: number\r\n}\r\n\r\n/**\r\n * 优化结果\r\n */\r\ninterface OptimizationResult {\r\n  /** 优化ID */\r\n  id: string\r\n  /** 策略名称 */\r\n  strategy: string\r\n  /** 开始时间 */\r\n  startTime: Date\r\n  /** 结束时间 */\r\n  endTime: Date\r\n  /** 是否成功 */\r\n  success: boolean\r\n  /** 错误信息 */\r\n  error?: string\r\n  /** 优化前指标 */\r\n  beforeMetrics: Record<string, number>\r\n  /** 优化后指标 */\r\n  afterMetrics: Record<string, number>\r\n  /** 改进情况 */\r\n  improvements: {\r\n    metric: string\r\n    before: number\r\n    after: number\r\n    improvement: number\r\n    percentage: number\r\n  }[]\r\n  /** 执行的动作 */\r\n  actions: string[]\r\n}\r\n\r\n/**\r\n * 性能优化协调器类\r\n */\r\nexport class PerformanceOptimizationCoordinator extends EventEmitter {\r\n  private isRunning: boolean = false\r\n  private checkInterval: NodeJS.Timeout | null = null\r\n  private optimizationInterval: NodeJS.Timeout | null = null\r\n  private components: Map<string, any> = new Map()\r\n  private componentStatus: Map<string, ComponentStatus> = new Map()\r\n  private strategies: Map<string, OptimizationStrategy> = new Map()\r\n  private optimizationHistory: OptimizationResult[] = []\r\n  private activeOptimizations: Set<string> = new Set()\r\n  private config: CoordinatorConfig\r\n\r\n  constructor() {\r\n    super()\r\n    \r\n    this.config = {\r\n      autoOptimization: true,\r\n      checkInterval: 60000,      // 1分钟\r\n      optimizationInterval: 300000, // 5分钟\r\n      performanceMonitoring: true,\r\n      alerting: true,\r\n      logLevel: 'info',\r\n      maxConcurrentOptimizations: 3\r\n    }\r\n    \r\n    this.initializeComponents()\r\n    this.initializeStrategies()\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * 初始化组件\r\n   */\r\n  private initializeComponents(): void {\r\n    // 注册所有优化组件\r\n    this.components.set('poolOptimizer', new DatabasePoolOptimizer())\r\n    this.components.set('poolAnalyzer', new ConnectionPoolAnalyzer())\r\n    this.components.set('dynamicAdjuster', new DynamicPoolAdjuster())\r\n    this.components.set('queryOptimizer', new QueryPerformanceOptimizer())\r\n    this.components.set('cacheManager', new IntelligentCacheManager())\r\n    this.components.set('cacheOptimizer', new CacheStrategyOptimizer())\r\n    this.components.set('performanceMonitor', new PerformanceMonitorEnhancer())\r\n    \r\n    // 初始化组件状态\r\n    for (const [name, component] of this.components) {\r\n      this.componentStatus.set(name, {\r\n        name,\r\n        enabled: true,\r\n        running: false,\r\n        lastUpdate: new Date(),\r\n        health: 'healthy'\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化优化策略\r\n   */\r\n  private initializeStrategies(): void {\r\n    // 连接池优化策略\r\n    this.strategies.set('connectionPoolOptimization', {\r\n      name: 'Connection Pool Optimization',\r\n      enabled: true,\r\n      priority: 1,\r\n      triggers: {\r\n        performanceThreshold: 0.8,\r\n        latencyThreshold: 200\r\n      },\r\n      actions: {\r\n        poolOptimization: true\r\n      },\r\n      cooldownPeriod: 300000 // 5分钟\r\n    })\r\n    \r\n    // 查询性能优化策略\r\n    this.strategies.set('queryPerformanceOptimization', {\r\n      name: 'Query Performance Optimization',\r\n      enabled: true,\r\n      priority: 2,\r\n      triggers: {\r\n        latencyThreshold: 500,\r\n        errorRateThreshold: 0.01\r\n      },\r\n      actions: {\r\n        queryOptimization: true\r\n      },\r\n      cooldownPeriod: 600000 // 10分钟\r\n    })\r\n    \r\n    // 缓存优化策略\r\n    this.strategies.set('cacheOptimization', {\r\n      name: 'Cache Optimization',\r\n      enabled: true,\r\n      priority: 3,\r\n      triggers: {\r\n        performanceThreshold: 0.7\r\n      },\r\n      actions: {\r\n        cacheOptimization: true\r\n      },\r\n      cooldownPeriod: 900000 // 15分钟\r\n    })\r\n    \r\n    // 综合优化策略\r\n    this.strategies.set('comprehensiveOptimization', {\r\n      name: 'Comprehensive Optimization',\r\n      enabled: true,\r\n      priority: 4,\r\n      triggers: {\r\n        performanceThreshold: 0.6,\r\n        errorRateThreshold: 0.05,\r\n        latencyThreshold: 1000\r\n      },\r\n      actions: {\r\n        poolOptimization: true,\r\n        queryOptimization: true,\r\n        cacheOptimization: true,\r\n        monitoringEnhancement: true\r\n      },\r\n      cooldownPeriod: 1800000 // 30分钟\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听性能监控器事件\r\n    const performanceMonitor = this.components.get('performanceMonitor')\r\n    if (performanceMonitor) {\r\n      performanceMonitor.on('anomaly-detected', (anomaly) => {\r\n        this.handleAnomalyDetected(anomaly)\r\n      })\r\n      \r\n      performanceMonitor.on('critical-alert', (alert) => {\r\n        this.handleCriticalAlert(alert)\r\n      })\r\n    }\r\n    \r\n    // 监听数据库监控事件\r\n    databaseMonitor.on('performance-degradation', (metrics) => {\r\n      this.handlePerformanceDegradation(metrics)\r\n    })\r\n    \r\n    // 监听组件事件\r\n    for (const [name, component] of this.components) {\r\n      if (component.on) {\r\n        component.on('error', (error) => {\r\n          this.handleComponentError(name, error)\r\n        })\r\n        \r\n        component.on('optimization-completed', (result) => {\r\n          this.handleOptimizationCompleted(name, result)\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动协调器\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isRunning) {\r\n      console.log('Performance optimization coordinator is already running')\r\n      return\r\n    }\r\n\r\n    console.log('Starting performance optimization coordinator')\r\n    \r\n    this.isRunning = true\r\n    \r\n    // 启动所有组件\r\n    await this.startAllComponents()\r\n    \r\n    // 启动定期检查\r\n    if (this.config.autoOptimization) {\r\n      this.checkInterval = setInterval(() => {\r\n        this.performHealthCheck()\r\n      }, this.config.checkInterval)\r\n      \r\n      this.optimizationInterval = setInterval(() => {\r\n        this.evaluateOptimizationNeeds()\r\n      }, this.config.optimizationInterval)\r\n    }\r\n    \r\n    // 初始健康检查\r\n    await this.performHealthCheck()\r\n    \r\n    this.emit('coordinator-started')\r\n    console.log('Performance optimization coordinator started successfully')\r\n  }\r\n\r\n  /**\r\n   * 停止协调器\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (!this.isRunning) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping performance optimization coordinator')\r\n    \r\n    this.isRunning = false\r\n    \r\n    // 停止定时器\r\n    if (this.checkInterval) {\r\n      clearInterval(this.checkInterval)\r\n      this.checkInterval = null\r\n    }\r\n    \r\n    if (this.optimizationInterval) {\r\n      clearInterval(this.optimizationInterval)\r\n      this.optimizationInterval = null\r\n    }\r\n    \r\n    // 停止所有组件\r\n    await this.stopAllComponents()\r\n    \r\n    this.emit('coordinator-stopped')\r\n  }\r\n\r\n  /**\r\n   * 启动所有组件\r\n   */\r\n  private async startAllComponents(): Promise<void> {\r\n    const startPromises: Promise<void>[] = []\r\n    \r\n    for (const [name, component] of this.components) {\r\n      const status = this.componentStatus.get(name)\r\n      if (status?.enabled && component.start) {\r\n        startPromises.push(\r\n          component.start().then(() => {\r\n            this.updateComponentStatus(name, {\r\n              running: true,\r\n              health: 'healthy',\r\n              lastUpdate: new Date()\r\n            })\r\n            console.log(`Component ${name} started successfully`)\r\n          }).catch((error) => {\r\n            this.updateComponentStatus(name, {\r\n              running: false,\r\n              health: 'error',\r\n              message: error.message,\r\n              lastUpdate: new Date()\r\n            })\r\n            console.error(`Failed to start component ${name}:`, error)\r\n          })\r\n        )\r\n      }\r\n    }\r\n    \r\n    await Promise.allSettled(startPromises)\r\n  }\r\n\r\n  /**\r\n   * 停止所有组件\r\n   */\r\n  private async stopAllComponents(): Promise<void> {\r\n    const stopPromises: Promise<void>[] = []\r\n    \r\n    for (const [name, component] of this.components) {\r\n      if (component.stop) {\r\n        stopPromises.push(\r\n          component.stop().then(() => {\r\n            this.updateComponentStatus(name, {\r\n              running: false,\r\n              lastUpdate: new Date()\r\n            })\r\n            console.log(`Component ${name} stopped successfully`)\r\n          }).catch((error) => {\r\n            console.error(`Failed to stop component ${name}:`, error)\r\n          })\r\n        )\r\n      }\r\n    }\r\n    \r\n    await Promise.allSettled(stopPromises)\r\n  }\r\n\r\n  /**\r\n   * 执行健康检查\r\n   */\r\n  private async performHealthCheck(): Promise<void> {\r\n    try {\r\n      console.log('Performing health check...')\r\n      \r\n      for (const [name, component] of this.components) {\r\n        const status = this.componentStatus.get(name)\r\n        if (!status?.enabled) continue\r\n        \r\n        try {\r\n          // 检查组件健康状态\r\n          let health: 'healthy' | 'warning' | 'error' = 'healthy'\r\n          let message: string | undefined\r\n          let metrics: Record<string, number> | undefined\r\n          \r\n          if (component.getStatus) {\r\n            const componentStatus = component.getStatus()\r\n            \r\n            // 根据组件状态判断健康度\r\n            if (componentStatus.error) {\r\n              health = 'error'\r\n              message = componentStatus.error\r\n            } else if (componentStatus.warnings && componentStatus.warnings.length > 0) {\r\n              health = 'warning'\r\n              message = componentStatus.warnings.join(', ')\r\n            }\r\n            \r\n            metrics = componentStatus.metrics\r\n          }\r\n          \r\n          this.updateComponentStatus(name, {\r\n            health,\r\n            message,\r\n            metrics,\r\n            lastUpdate: new Date()\r\n          })\r\n          \r\n        } catch (error) {\r\n          this.updateComponentStatus(name, {\r\n            health: 'error',\r\n            message: error.message,\r\n            lastUpdate: new Date()\r\n          })\r\n        }\r\n      }\r\n      \r\n      // 发送健康检查完成事件\r\n      this.emit('health-check-completed', this.getOverallHealth())\r\n      \r\n    } catch (error) {\r\n      console.error('Health check failed:', error)\r\n      this.emit('health-check-error', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 评估优化需求\r\n   */\r\n  private async evaluateOptimizationNeeds(): Promise<void> {\r\n    try {\r\n      console.log('Evaluating optimization needs...')\r\n      \r\n      // 获取当前性能指标\r\n      const performanceMonitor = this.components.get('performanceMonitor')\r\n      if (!performanceMonitor) {\r\n        return\r\n      }\r\n      \r\n      const currentMetrics = performanceMonitor.getLatestMetrics()\r\n      if (!currentMetrics) {\r\n        return\r\n      }\r\n      \r\n      // 评估每个策略\r\n      for (const [strategyName, strategy] of this.strategies) {\r\n        if (!strategy.enabled) continue\r\n        \r\n        // 检查冷却期\r\n        if (this.isInCooldown(strategy)) {\r\n          continue\r\n        }\r\n        \r\n        // 检查是否达到触发条件\r\n        if (this.shouldTriggerStrategy(strategy, currentMetrics)) {\r\n          await this.executeOptimizationStrategy(strategyName, strategy, currentMetrics)\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Optimization evaluation failed:', error)\r\n      this.emit('optimization-evaluation-error', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查策略是否在冷却期\r\n   * \r\n   * @param strategy - 优化策略\r\n   * @returns 是否在冷却期\r\n   */\r\n  private isInCooldown(strategy: OptimizationStrategy): boolean {\r\n    if (!strategy.lastExecuted) {\r\n      return false\r\n    }\r\n    \r\n    const timeSinceLastExecution = Date.now() - strategy.lastExecuted.getTime()\r\n    return timeSinceLastExecution < strategy.cooldownPeriod\r\n  }\r\n\r\n  /**\r\n   * 检查是否应该触发策略\r\n   * \r\n   * @param strategy - 优化策略\r\n   * @param metrics - 当前指标\r\n   * @returns 是否应该触发\r\n   */\r\n  private shouldTriggerStrategy(strategy: OptimizationStrategy, metrics: any): boolean {\r\n    const triggers = strategy.triggers\r\n    \r\n    // 检查性能阈值\r\n    if (triggers.performanceThreshold) {\r\n      const healthScore = this.components.get('performanceMonitor')?.lastHealthScore || 1\r\n      if (healthScore < triggers.performanceThreshold) {\r\n        return true\r\n      }\r\n    }\r\n    \r\n    // 检查错误率阈值\r\n    if (triggers.errorRateThreshold) {\r\n      if (metrics.queryPerformance.errorRate > triggers.errorRateThreshold) {\r\n        return true\r\n      }\r\n    }\r\n    \r\n    // 检查延迟阈值\r\n    if (triggers.latencyThreshold) {\r\n      if (metrics.queryPerformance.avgExecutionTime > triggers.latencyThreshold) {\r\n        return true\r\n      }\r\n    }\r\n    \r\n    // 检查资源使用率阈值\r\n    if (triggers.resourceUsageThreshold) {\r\n      if (metrics.connectionPool.usage > triggers.resourceUsageThreshold) {\r\n        return true\r\n      }\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  /**\r\n   * 执行优化策略\r\n   * \r\n   * @param strategyName - 策略名称\r\n   * @param strategy - 优化策略\r\n   * @param currentMetrics - 当前指标\r\n   */\r\n  private async executeOptimizationStrategy(\r\n    strategyName: string,\r\n    strategy: OptimizationStrategy,\r\n    currentMetrics: any\r\n  ): Promise<void> {\r\n    // 检查并发限制\r\n    if (this.activeOptimizations.size >= this.config.maxConcurrentOptimizations) {\r\n      console.log(`Skipping optimization ${strategyName} due to concurrency limit`)\r\n      return\r\n    }\r\n    \r\n    const optimizationId = `${strategyName}_${Date.now()}`\r\n    this.activeOptimizations.add(optimizationId)\r\n    \r\n    const startTime = new Date()\r\n    const beforeMetrics = this.extractMetrics(currentMetrics)\r\n    const actions: string[] = []\r\n    \r\n    try {\r\n      console.log(`Executing optimization strategy: ${strategy.name}`)\r\n      \r\n      // 执行连接池优化\r\n      if (strategy.actions.poolOptimization) {\r\n        const poolOptimizer = this.components.get('poolOptimizer')\r\n        const dynamicAdjuster = this.components.get('dynamicAdjuster')\r\n        \r\n        if (poolOptimizer && poolOptimizer.triggerOptimization) {\r\n          await poolOptimizer.triggerOptimization()\r\n          actions.push('Pool optimization')\r\n        }\r\n        \r\n        if (dynamicAdjuster && dynamicAdjuster.triggerAdjustment) {\r\n          await dynamicAdjuster.triggerAdjustment()\r\n          actions.push('Dynamic pool adjustment')\r\n        }\r\n      }\r\n      \r\n      // 执行查询优化\r\n      if (strategy.actions.queryOptimization) {\r\n        const queryOptimizer = this.components.get('queryOptimizer')\r\n        \r\n        if (queryOptimizer && queryOptimizer.triggerOptimization) {\r\n          await queryOptimizer.triggerOptimization()\r\n          actions.push('Query optimization')\r\n        }\r\n      }\r\n      \r\n      // 执行缓存优化\r\n      if (strategy.actions.cacheOptimization) {\r\n        const cacheManager = this.components.get('cacheManager')\r\n        const cacheOptimizer = this.components.get('cacheOptimizer')\r\n        \r\n        if (cacheManager && cacheManager.optimizeCache) {\r\n          await cacheManager.optimizeCache()\r\n          actions.push('Cache management optimization')\r\n        }\r\n        \r\n        if (cacheOptimizer && cacheOptimizer.triggerOptimization) {\r\n          await cacheOptimizer.triggerOptimization()\r\n          actions.push('Cache strategy optimization')\r\n        }\r\n      }\r\n      \r\n      // 执行监控增强\r\n      if (strategy.actions.monitoringEnhancement) {\r\n        const performanceMonitor = this.components.get('performanceMonitor')\r\n        \r\n        if (performanceMonitor && performanceMonitor.triggerAnalysis) {\r\n          await performanceMonitor.triggerAnalysis()\r\n          actions.push('Performance monitoring enhancement')\r\n        }\r\n      }\r\n      \r\n      // 等待优化生效\r\n      await new Promise(resolve => setTimeout(resolve, 5000))\r\n      \r\n      // 获取优化后指标\r\n      const afterMetrics = this.extractMetrics(\r\n        this.components.get('performanceMonitor')?.getLatestMetrics() || currentMetrics\r\n      )\r\n      \r\n      // 计算改进情况\r\n      const improvements = this.calculateImprovements(beforeMetrics, afterMetrics)\r\n      \r\n      // 记录优化结果\r\n      const result: OptimizationResult = {\r\n        id: optimizationId,\r\n        strategy: strategyName,\r\n        startTime,\r\n        endTime: new Date(),\r\n        success: true,\r\n        beforeMetrics,\r\n        afterMetrics,\r\n        improvements,\r\n        actions\r\n      }\r\n      \r\n      this.optimizationHistory.push(result)\r\n      strategy.lastExecuted = new Date()\r\n      \r\n      console.log(`Optimization strategy ${strategy.name} completed successfully`)\r\n      this.emit('optimization-completed', result)\r\n      \r\n    } catch (error) {\r\n      const result: OptimizationResult = {\r\n        id: optimizationId,\r\n        strategy: strategyName,\r\n        startTime,\r\n        endTime: new Date(),\r\n        success: false,\r\n        error: error.message,\r\n        beforeMetrics,\r\n        afterMetrics: beforeMetrics,\r\n        improvements: [],\r\n        actions\r\n      }\r\n      \r\n      this.optimizationHistory.push(result)\r\n      \r\n      console.error(`Optimization strategy ${strategy.name} failed:`, error)\r\n      this.emit('optimization-failed', result)\r\n      \r\n    } finally {\r\n      this.activeOptimizations.delete(optimizationId)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 提取关键指标\r\n   * \r\n   * @param metrics - 原始指标\r\n   * @returns 关键指标\r\n   */\r\n  private extractMetrics(metrics: any): Record<string, number> {\r\n    return {\r\n      connectionPoolUsage: metrics.connectionPool?.usage || 0,\r\n      avgExecutionTime: metrics.queryPerformance?.avgExecutionTime || 0,\r\n      errorRate: metrics.queryPerformance?.errorRate || 0,\r\n      throughput: metrics.queryPerformance?.throughput || 0,\r\n      memoryUsage: metrics.systemResources?.memoryUsage || 0,\r\n      cpuUsage: metrics.systemResources?.cpuUsage || 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算改进情况\r\n   * \r\n   * @param before - 优化前指标\r\n   * @param after - 优化后指标\r\n   * @returns 改进情况\r\n   */\r\n  private calculateImprovements(\r\n    before: Record<string, number>,\r\n    after: Record<string, number>\r\n  ): { metric: string; before: number; after: number; improvement: number; percentage: number }[] {\r\n    const improvements: any[] = []\r\n    \r\n    for (const metric in before) {\r\n      const beforeValue = before[metric]\r\n      const afterValue = after[metric]\r\n      \r\n      if (beforeValue > 0) {\r\n        const improvement = beforeValue - afterValue\r\n        const percentage = (improvement / beforeValue) * 100\r\n        \r\n        // 对于某些指标，减少是改进（如错误率、延迟）\r\n        const isNegativeMetric = metric.includes('errorRate') || \r\n                                metric.includes('avgExecutionTime') ||\r\n                                metric.includes('Usage')\r\n        \r\n        if (isNegativeMetric ? improvement > 0 : improvement < 0) {\r\n          improvements.push({\r\n            metric,\r\n            before: beforeValue,\r\n            after: afterValue,\r\n            improvement: Math.abs(improvement),\r\n            percentage: Math.abs(percentage)\r\n          })\r\n        }\r\n      }\r\n    }\r\n    \r\n    return improvements\r\n  }\r\n\r\n  /**\r\n   * 处理异常检测\r\n   * \r\n   * @param anomaly - 异常信息\r\n   */\r\n  private async handleAnomalyDetected(anomaly: any): Promise<void> {\r\n    console.log(`Anomaly detected: ${anomaly.description}`)\r\n    \r\n    // 根据异常类型触发相应的优化策略\r\n    if (anomaly.type === 'CONNECTION_POOL_EXHAUSTION') {\r\n      await this.triggerStrategy('connectionPoolOptimization')\r\n    } else if (anomaly.type === 'HIGH_LATENCY' || anomaly.type === 'SLOW_QUERY') {\r\n      await this.triggerStrategy('queryPerformanceOptimization')\r\n    } else if (anomaly.severity === 'critical') {\r\n      await this.triggerStrategy('comprehensiveOptimization')\r\n    }\r\n    \r\n    this.emit('anomaly-handled', anomaly)\r\n  }\r\n\r\n  /**\r\n   * 处理关键告警\r\n   * \r\n   * @param alert - 告警信息\r\n   */\r\n  private async handleCriticalAlert(alert: any): Promise<void> {\r\n    console.warn(`Critical alert: ${alert.message}`)\r\n    \r\n    // 立即触发综合优化策略\r\n    await this.triggerStrategy('comprehensiveOptimization')\r\n    \r\n    this.emit('critical-alert-handled', alert)\r\n  }\r\n\r\n  /**\r\n   * 处理性能下降\r\n   * \r\n   * @param metrics - 性能指标\r\n   */\r\n  private async handlePerformanceDegradation(metrics: any): Promise<void> {\r\n    console.log('Performance degradation detected')\r\n    \r\n    // 根据性能下降程度选择优化策略\r\n    const healthScore = this.components.get('performanceMonitor')?.lastHealthScore || 1\r\n    \r\n    if (healthScore < 0.5) {\r\n      await this.triggerStrategy('comprehensiveOptimization')\r\n    } else if (healthScore < 0.7) {\r\n      await this.triggerStrategy('connectionPoolOptimization')\r\n      await this.triggerStrategy('queryPerformanceOptimization')\r\n    }\r\n    \r\n    this.emit('performance-degradation-handled', metrics)\r\n  }\r\n\r\n  /**\r\n   * 处理组件错误\r\n   * \r\n   * @param componentName - 组件名称\r\n   * @param error - 错误信息\r\n   */\r\n  private handleComponentError(componentName: string, error: any): void {\r\n    console.error(`Component ${componentName} error:`, error)\r\n    \r\n    this.updateComponentStatus(componentName, {\r\n      health: 'error',\r\n      message: error.message,\r\n      lastUpdate: new Date()\r\n    })\r\n    \r\n    this.emit('component-error', { componentName, error })\r\n  }\r\n\r\n  /**\r\n   * 处理优化完成\r\n   * \r\n   * @param componentName - 组件名称\r\n   * @param result - 优化结果\r\n   */\r\n  private handleOptimizationCompleted(componentName: string, result: any): void {\r\n    console.log(`Component ${componentName} optimization completed`)\r\n    \r\n    this.updateComponentStatus(componentName, {\r\n      health: 'healthy',\r\n      lastUpdate: new Date(),\r\n      metrics: result.metrics\r\n    })\r\n    \r\n    this.emit('component-optimization-completed', { componentName, result })\r\n  }\r\n\r\n  /**\r\n   * 触发指定策略\r\n   * \r\n   * @param strategyName - 策略名称\r\n   */\r\n  private async triggerStrategy(strategyName: string): Promise<void> {\r\n    const strategy = this.strategies.get(strategyName)\r\n    if (!strategy || !strategy.enabled) {\r\n      return\r\n    }\r\n    \r\n    // 检查冷却期\r\n    if (this.isInCooldown(strategy)) {\r\n      console.log(`Strategy ${strategyName} is in cooldown period`)\r\n      return\r\n    }\r\n    \r\n    const performanceMonitor = this.components.get('performanceMonitor')\r\n    const currentMetrics = performanceMonitor?.getLatestMetrics()\r\n    \r\n    if (currentMetrics) {\r\n      await this.executeOptimizationStrategy(strategyName, strategy, currentMetrics)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新组件状态\r\n   * \r\n   * @param componentName - 组件名称\r\n   * @param updates - 状态更新\r\n   */\r\n  private updateComponentStatus(componentName: string, updates: Partial<ComponentStatus>): void {\r\n    const currentStatus = this.componentStatus.get(componentName)\r\n    if (currentStatus) {\r\n      Object.assign(currentStatus, updates)\r\n      this.componentStatus.set(componentName, currentStatus)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取整体健康状态\r\n   * \r\n   * @returns 整体健康状态\r\n   */\r\n  private getOverallHealth(): {\r\n    status: 'healthy' | 'warning' | 'error'\r\n    score: number\r\n    components: ComponentStatus[]\r\n  } {\r\n    const components = Array.from(this.componentStatus.values())\r\n    const enabledComponents = components.filter(c => c.enabled)\r\n    \r\n    if (enabledComponents.length === 0) {\r\n      return { status: 'error', score: 0, components }\r\n    }\r\n    \r\n    const healthyCount = enabledComponents.filter(c => c.health === 'healthy').length\r\n    const warningCount = enabledComponents.filter(c => c.health === 'warning').length\r\n    const errorCount = enabledComponents.filter(c => c.health === 'error').length\r\n    \r\n    const score = (healthyCount + warningCount * 0.5) / enabledComponents.length\r\n    \r\n    let status: 'healthy' | 'warning' | 'error'\r\n    if (errorCount > 0) {\r\n      status = 'error'\r\n    } else if (warningCount > 0) {\r\n      status = 'warning'\r\n    } else {\r\n      status = 'healthy'\r\n    }\r\n    \r\n    return { status, score, components }\r\n  }\r\n\r\n  /**\r\n   * 获取协调器状态\r\n   * \r\n   * @returns 协调器状态\r\n   */\r\n  getStatus(): {\r\n    isRunning: boolean\r\n    config: CoordinatorConfig\r\n    overallHealth: ReturnType<typeof this.getOverallHealth>\r\n    activeOptimizations: number\r\n    optimizationHistory: number\r\n    strategies: { name: string; enabled: boolean; lastExecuted?: Date }[]\r\n  } {\r\n    return {\r\n      isRunning: this.isRunning,\r\n      config: { ...this.config },\r\n      overallHealth: this.getOverallHealth(),\r\n      activeOptimizations: this.activeOptimizations.size,\r\n      optimizationHistory: this.optimizationHistory.length,\r\n      strategies: Array.from(this.strategies.values()).map(s => ({\r\n        name: s.name,\r\n        enabled: s.enabled,\r\n        lastExecuted: s.lastExecuted\r\n      }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取组件状态\r\n   * \r\n   * @returns 组件状态列表\r\n   */\r\n  getComponentStatus(): ComponentStatus[] {\r\n    return Array.from(this.componentStatus.values())\r\n  }\r\n\r\n  /**\r\n   * 获取优化历史\r\n   * \r\n   * @param limit - 限制数量\r\n   * @returns 优化历史\r\n   */\r\n  getOptimizationHistory(limit?: number): OptimizationResult[] {\r\n    const history = [...this.optimizationHistory].reverse()\r\n    return limit ? history.slice(0, limit) : history\r\n  }\r\n\r\n  /**\r\n   * 启用/禁用组件\r\n   * \r\n   * @param componentName - 组件名称\r\n   * @param enabled - 是否启用\r\n   */\r\n  async setComponentEnabled(componentName: string, enabled: boolean): Promise<void> {\r\n    const status = this.componentStatus.get(componentName)\r\n    if (!status) {\r\n      throw new Error(`Component ${componentName} not found`)\r\n    }\r\n    \r\n    status.enabled = enabled\r\n    \r\n    if (this.isRunning) {\r\n      const component = this.components.get(componentName)\r\n      if (component) {\r\n        if (enabled && !status.running && component.start) {\r\n          await component.start()\r\n          status.running = true\r\n        } else if (!enabled && status.running && component.stop) {\r\n          await component.stop()\r\n          status.running = false\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(`Component ${componentName} ${enabled ? 'enabled' : 'disabled'}`)\r\n    this.emit('component-status-changed', { componentName, enabled })\r\n  }\r\n\r\n  /**\r\n   * 启用/禁用策略\r\n   * \r\n   * @param strategyName - 策略名称\r\n   * @param enabled - 是否启用\r\n   */\r\n  setStrategyEnabled(strategyName: string, enabled: boolean): void {\r\n    const strategy = this.strategies.get(strategyName)\r\n    if (!strategy) {\r\n      throw new Error(`Strategy ${strategyName} not found`)\r\n    }\r\n    \r\n    strategy.enabled = enabled\r\n    \r\n    console.log(`Strategy ${strategyName} ${enabled ? 'enabled' : 'disabled'}`)\r\n    this.emit('strategy-status-changed', { strategyName, enabled })\r\n  }\r\n\r\n  /**\r\n   * 更新配置\r\n   * \r\n   * @param newConfig - 新配置\r\n   */\r\n  updateConfig(newConfig: Partial<CoordinatorConfig>): void {\r\n    Object.assign(this.config, newConfig)\r\n    \r\n    // 重启定时器\r\n    if (this.isRunning) {\r\n      this.stop().then(() => this.start())\r\n    }\r\n    \r\n    console.log('Coordinator configuration updated')\r\n    this.emit('config-updated', this.config)\r\n  }\r\n\r\n  /**\r\n   * 手动触发健康检查\r\n   */\r\n  async triggerHealthCheck(): Promise<void> {\r\n    await this.performHealthCheck()\r\n  }\r\n\r\n  /**\r\n   * 手动触发优化评估\r\n   */\r\n  async triggerOptimizationEvaluation(): Promise<void> {\r\n    await this.evaluateOptimizationNeeds()\r\n  }\r\n\r\n  /**\r\n   * 手动执行指定策略\r\n   * \r\n   * @param strategyName - 策略名称\r\n   */\r\n  async executeStrategy(strategyName: string): Promise<void> {\r\n    await this.triggerStrategy(strategyName)\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const performanceOptimizationCoordinator = new PerformanceOptimizationCoordinator()\r\n\r\n// 导出类型\r\nexport type {\r\n  ComponentStatus,\r\n  OptimizationStrategy,\r\n  CoordinatorConfig,\r\n  OptimizationResult\r\n}\r\n"],"version":3}