{"version":3,"names":["cov_1uewkseex6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage"],"sources":["E:\\zk-agent\\lib\\component-standards\\performance-optimizers-types.ts"],"sourcesContent":["/**\n * Performance Optimizers Types\n * 性能优化工具类型定义\n * \n * 这个文件包含了性能优化工具的所有类型定义，\n * 用于在TypeScript文件中导入，避免直接导入TSX文件的问题。\n */\n\n// =============================================================================\n// 懒加载配置\n// =============================================================================\n\n/**\n * 懒加载选项配置\n */\nexport interface LazyLoadOptions {\n  /** 根元素边距 */\n  rootMargin?: string;\n  /** 触发阈值 */\n  threshold?: number | number[];\n  /** 是否只触发一次 */\n  triggerOnce?: boolean;\n  /** 占位符组件 */\n  placeholder?: React.ComponentType;\n  /** 错误回调 */\n  onError?: (error: Error) => void;\n  /** 加载完成回调 */\n  onLoad?: () => void;\n}\n\n// =============================================================================\n// 虚拟化配置\n// =============================================================================\n\n/**\n * 虚拟化配置\n */\nexport interface VirtualizationConfig {\n  /** 容器高度 */\n  containerHeight: number;\n  /** 项目高度（固定）或高度计算函数 */\n  itemHeight: number | ((index: number, item: any) => number);\n  /** 缓冲区大小 */\n  bufferSize?: number;\n  /** 滚动节流延迟 */\n  scrollThrottle?: number;\n  /** 是否启用动态高度 */\n  dynamicHeight?: boolean;\n}\n\n// =============================================================================\n// 防抖和节流配置\n// =============================================================================\n\n/**\n * 防抖选项\n */\nexport interface DebounceOptions {\n  /** 延迟时间（毫秒） */\n  delay: number;\n  /** 是否立即执行 */\n  immediate?: boolean;\n  /** 最大等待时间 */\n  maxWait?: number;\n}\n\n/**\n * 节流选项\n */\nexport interface ThrottleOptions {\n  /** 延迟时间（毫秒） */\n  delay: number;\n  /** 是否在开始时执行 */\n  leading?: boolean;\n  /** 是否在结束时执行 */\n  trailing?: boolean;\n}\n\n// =============================================================================\n// 内存监控配置\n// =============================================================================\n\n/**\n * 内存监控配置\n */\nexport interface MemoryMonitorConfig {\n  /** 监控间隔（毫秒） */\n  interval?: number;\n  /** 内存使用阈值（MB） */\n  threshold?: number;\n  /** 警告回调 */\n  onWarning?: (usage: number) => void;\n  /** 错误回调 */\n  onError?: (usage: number) => void;\n}\n\n// =============================================================================\n// 性能指标\n// =============================================================================\n\n/**\n * 性能指标\n */\nexport interface PerformanceMetrics {\n  /** 首次内容绘制时间 */\n  fcp?: number;\n  /** 最大内容绘制时间 */\n  lcp?: number;\n  /** 首次输入延迟 */\n  fid?: number;\n  /** 累积布局偏移 */\n  cls?: number;\n  /** 首次字节时间 */\n  ttfb?: number;\n  /** 内存使用量 */\n  memoryUsage?: number;\n  /** 渲染时间 */\n  renderTime?: number;\n}\n\n// =============================================================================\n// 性能优化工具类型\n// =============================================================================\n\n/**\n * 性能优化工具集合类型\n */\nexport interface PerformanceOptimizers {\n  // 懒加载\n  LazyLoad: React.ComponentType<any>;\n  useLazyLoad: (options?: LazyLoadOptions) => {\n    ref: React.RefObject<HTMLElement>;\n    isVisible: boolean;\n    isLoaded: boolean;\n  };\n  \n  // 虚拟化\n  VirtualList: React.ComponentType<any>;\n  useVirtualization: (config: VirtualizationConfig) => any;\n  \n  // 防抖节流\n  useDebounce: <T extends (...args: any[]) => any>(callback: T, options: DebounceOptions) => T;\n  useThrottle: <T extends (...args: any[]) => any>(callback: T, options: ThrottleOptions) => T;\n  \n  // 内存监控\n  useMemoryMonitor: (config?: MemoryMonitorConfig) => {\n    usage: number;\n    isHigh: boolean;\n    cleanup: () => void;\n  };\n  \n  // 性能监控\n  usePerformanceMonitor: () => {\n    metrics: PerformanceMetrics;\n    startMeasure: (name: string) => void;\n    endMeasure: (name: string) => number;\n  };\n  \n  // 组件大小监控\n  useComponentSizeMonitor: (ref: React.RefObject<HTMLElement>) => {\n    width: number;\n    height: number;\n  };\n  \n  // 批量更新\n  useBatchedUpdates: () => {\n    batchUpdate: (callback: () => void) => void;\n    flushUpdates: () => void;\n  };\n  \n  // 批量DOM操作\n  BatchedDOMOperations: {\n    batch: (operations: (() => void)[]) => void;\n    flush: () => void;\n  };\n  \n  getBatchedDOMOperations: () => {\n    batch: (operations: (() => void)[]) => void;\n    flush: () => void;\n  };\n}"],"mappings":";;AAAA;;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;IAAAC,SAAA;IAAAC,CAAA;MAAA;IAAA;IAAAC,CAAA;IAAAC,CAAA;IAAAC,cAAA;MAAAC,IAAA;MAAAC,QAAA;MAAAC,KAAA;MAAAC,OAAA;MAAAC,cAAA;MAAAC,OAAA;IAAA;IAAAC,eAAA;IAAAtB,IAAA;EAAA;EAAA,IAAAuB,QAAA,GAAAtB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAoB,QAAA,CAAAxB,IAAA,KAAAwB,QAAA,CAAAxB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAuB,QAAA,CAAAxB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAoB,cAAA,GAAAD,QAAA,CAAAxB,IAAA;EAAA","ignoreList":[]}