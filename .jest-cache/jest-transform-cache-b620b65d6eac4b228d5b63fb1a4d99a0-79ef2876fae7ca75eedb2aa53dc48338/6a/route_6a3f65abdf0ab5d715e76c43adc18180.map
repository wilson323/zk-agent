{"version":3,"names":["cov_1i0vq4gill","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","model_manager_1","zod_1","addModelSchema","z","object","string","min","provider","isActive","boolean","optional","default","exports","GET","createApiRoute","RouteConfigs","publicGet","req","validatedQuery","active","models","aiModelManager","getAllModels","filter","model","ApiResponseWrapper","success","data","total","length","error","console","status","POST","protectedPost","validatedBody","user","addModel","message","ZodError"],"sources":["E:\\zk-agent\\app\\api\\ai-models\\route.ts"],"sourcesContent":["/**\n * @file ai-models\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { aiModelManager } from \"@/lib/ai-models/model-manager\";\nimport { z } from 'zod';\n\n// 定义查询参数类型\ninterface GetQuery {\n  type?: string;\n  provider?: string;\n  active?: \"true\" | \"false\";\n}\n\n// 定义POST请求体验证schema\nconst addModelSchema = z.object({\n  name: z.string().min(1),\n  provider: z.string().min(1),\n  type: z.string().min(1),\n  isActive: z.boolean().optional().default(true)\n});\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { validatedQuery }) => {\n    try {\n      const { type, provider, active } = validatedQuery as GetQuery;\n      \n      let models = aiModelManager.getAllModels();\n      \n      // 优化的单次过滤\n      models = models.filter(model => \n        (!type || model.type === type) &&\n        (!provider || model.provider === provider) &&\n        (active === undefined || model.isActive === (active === \"true\"))\n      );\n      \n      return ApiResponseWrapper.success({\n        success: true,\n        data: models,\n        total: models.length,\n      });\n    } catch (error) {\n      console.error('Error fetching AI models:', error);\n      return ApiResponseWrapper.error(\n        \"Failed to get AI models\",\n        { status: 500 }\n      );\n    }\n  }\n);\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(addModelSchema),\n  async (req: NextRequest, { validatedBody, user }) => {\n    try {\n      // 使用已验证的请求体数据\n      const model = await aiModelManager.addModel(validatedBody);\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        data: model,\n        message: \"Model added successfully\",\n      });\n    } catch (error) {\n      console.error('Error adding AI model:', error);\n      \n      // 区分错误类型\n      if (error instanceof z.ZodError) {\n        return ApiResponseWrapper.error(\n          \"Invalid input data\",\n          { status: 400 }\n        );\n      }\n      \n      return ApiResponseWrapper.error(\n        \"Failed to add AI model\",\n        { status: 500 }\n      );\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}