{"file":"E:\\zk-agent\\tests\\database\\enhanced-connection.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\database\\enhanced-connection.test.ts"],"sourcesContent":["/**\n * @file Enhanced Database Connection Tests\n * @description 增强数据库连接管理器的测试文件\n * @author ZK-Agent Team\n * @date 2024-12-19\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals'\nimport type { MockedFunction, MockedClass } from 'jest-mock'\nimport { \n  EnhancedDatabaseConnection, \n  ConnectionState,\n  enhancedDb,\n  connectDatabase,\n  disconnectDatabase,\n  getDatabaseStats,\n  isDatabaseConnected,\n  executeQuery\n} from '../../lib/database/enhanced-connection'\nimport { PrismaClient } from '@prisma/client'\n\n// 模拟Prisma客户端\njest.mock('@prisma/client')\nconst MockedPrismaClient = PrismaClient as MockedClass<typeof PrismaClient>\n\ndescribe('增强数据库连接管理器测试', () => {\n  let connection: EnhancedDatabaseConnection\n  let mockPrismaClient: any\n\n  beforeEach(() => {\n    // 重置所有模拟\n    jest.clearAllMocks()\n    \n    // 创建模拟的Prisma客户端\n    mockPrismaClient = {\n      $connect: jest.fn(),\n      $disconnect: jest.fn(),\n      $queryRaw: jest.fn(),\n    } as any\n    \n    MockedPrismaClient.mockImplementation(() => mockPrismaClient)\n    \n    // 创建新的连接实例\n    connection = new EnhancedDatabaseConnection(\n      { maxConnections: 10, minConnections: 2 },\n      { enabled: true, maxRetries: 3 },\n      { enabled: true, intervalMs: 5000 }\n    )\n  })\n\n  afterEach(async () => {\n    // 清理连接\n    if (connection.isConnected()) {\n      await connection.disconnect()\n    }\n  })\n\n  describe('连接管理', () => {\n    it('应该成功连接到数据库', async () => {\n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      await connection.connect()\n      \n      expect(connection.isConnected()).toBe(true)\n      expect(connection.getState()).toBe(ConnectionState.CONNECTED)\n      expect(mockPrismaClient.$connect).toHaveBeenCalled()\n    })\n\n    it('应该处理连接失败', async () => {\n      // 模拟连接失败\n      const connectionError = new Error('Connection failed')\n      mockPrismaClient.$connect.mockRejectedValue(connectionError)\n      \n      await expect(connection.connect()).rejects.toThrow('Connection failed')\n      expect(connection.getState()).toBe(ConnectionState.FAILED)\n    })\n\n    it('应该成功断开连接', async () => {\n      // 先连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 模拟断开连接\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined)\n      \n      await connection.disconnect()\n      \n      expect(connection.isConnected()).toBe(false)\n      expect(connection.getState()).toBe(ConnectionState.DISCONNECTED)\n      expect(mockPrismaClient.$disconnect).toHaveBeenCalled()\n    })\n  })\n\n  describe('重连机制', () => {\n    it('应该在连接失败后自动重连', async () => {\n      // 配置重连\n      connection.updateConfig(undefined, { \n        enabled: true, \n        maxRetries: 2, \n        retryDelayMs: 100 \n      })\n      \n      // 第一次连接失败\n      mockPrismaClient.$connect\n        .mockRejectedValueOnce(new Error('First attempt failed'))\n        .mockResolvedValueOnce(undefined)\n      \n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      // 监听重连事件\n      const reconnectingPromise = new Promise(resolve => {\n        connection.once('reconnecting', resolve)\n      })\n      \n      const reconnectedPromise = new Promise(resolve => {\n        connection.once('reconnected', resolve)\n      })\n      \n      // 尝试连接（会失败并触发重连）\n      await expect(connection.connect()).rejects.toThrow('First attempt failed')\n      \n      // 等待重连事件\n      await reconnectingPromise\n      await reconnectedPromise\n      \n      expect(connection.isConnected()).toBe(true)\n    }, 10000)\n\n    it('应该在达到最大重试次数后停止重连', async () => {\n      // 配置重连\n      connection.updateConfig(undefined, { \n        enabled: true, \n        maxRetries: 1, \n        retryDelayMs: 100 \n      })\n      \n      // 所有连接尝试都失败\n      mockPrismaClient.$connect.mockRejectedValue(new Error('Connection always fails'))\n      \n      // 监听错误事件\n      const errorPromise = new Promise(resolve => {\n        connection.once('error', resolve)\n      })\n      \n      // 尝试连接\n      await expect(connection.connect()).rejects.toThrow('Connection always fails')\n      \n      // 等待错误事件\n      await errorPromise\n      \n      // 等待重连尝试完成\n      await new Promise(resolve => setTimeout(resolve, 500))\n      \n      expect(connection.getState()).toBe(ConnectionState.FAILED)\n    }, 10000)\n  })\n\n  describe('健康检查', () => {\n    it('应该定期执行健康检查', async () => {\n      // 启用健康检查\n      connection.updateConfig(undefined, undefined, { \n        enabled: true, \n        intervalMs: 200 \n      })\n      \n      // 模拟成功连接和健康检查\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ health_check: 1 }])\n      \n      await connection.connect()\n      \n      // 监听健康检查事件\n      const healthCheckPromise = new Promise(resolve => {\n        connection.once('healthCheck', resolve)\n      })\n      \n      // 等待健康检查执行\n      const result = await healthCheckPromise\n      \n      expect(result).toBe(true)\n      expect(mockPrismaClient.$queryRaw).toHaveBeenCalledWith(\n        expect.arrayContaining([expect.stringContaining('health_check')])\n      )\n    }, 5000)\n\n    it('应该处理健康检查失败', async () => {\n      // 启用健康检查\n      connection.updateConfig(undefined, undefined, { \n        enabled: true, \n        intervalMs: 200,\n        timeoutMs: 100\n      })\n      \n      // 模拟成功连接但健康检查失败\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // 初始连接验证\n        .mockRejectedValue(new Error('Health check failed')) // 健康检查失败\n      \n      await connection.connect()\n      \n      // 监听健康检查失败事件\n      const healthCheckPromise = new Promise(resolve => {\n        connection.once('healthCheck', resolve)\n      })\n      \n      // 等待健康检查失败\n      const result = await healthCheckPromise\n      \n      expect(result).toBe(false)\n    }, 5000)\n  })\n\n  describe('查询执行', () => {\n    it('应该成功执行查询并更新统计信息', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 执行查询\n      const queryResult = await connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT * FROM users LIMIT 1`\n      })\n      \n      expect(queryResult).toEqual([{ test: 1 }])\n      \n      // 检查统计信息\n      const stats = connection.getStats()\n      expect(stats.totalQueries).toBeGreaterThan(0)\n      expect(stats.avgLatency).toBeGreaterThan(0)\n    })\n\n    it('应该处理查询失败并更新失败统计', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // 连接验证\n        .mockRejectedValueOnce(new Error('Query failed')) // 查询失败\n      \n      await connection.connect()\n      \n      // 执行失败的查询\n      await expect(connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT * FROM non_existent_table`\n      })).rejects.toThrow('Query failed')\n      \n      // 检查失败统计\n      const stats = connection.getStats()\n      expect(stats.failedQueries).toBeGreaterThan(0)\n    })\n\n    it('应该在未连接时拒绝查询', async () => {\n      // 确保未连接\n      expect(connection.isConnected()).toBe(false)\n      \n      // 尝试执行查询\n      await expect(connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT 1`\n      })).rejects.toThrow('Database not connected')\n    })\n  })\n\n  describe('统计信息', () => {\n    it('应该正确跟踪连接统计信息', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 获取统计信息\n      const stats = connection.getStats()\n      \n      expect(stats.state).toBe(ConnectionState.CONNECTED)\n      expect(stats.connectedAt).toBeInstanceOf(Date)\n      expect(stats.reconnectAttempts).toBe(0)\n      expect(stats.uptime).toBeGreaterThanOrEqual(0)\n    })\n\n    it('应该正确计算运行时间', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 等待一段时间\n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      // 检查运行时间\n      const stats = connection.getStats()\n      expect(stats.uptime).toBeGreaterThan(90) // 至少90ms\n    })\n  })\n\n  describe('配置更新', () => {\n    it('应该允许动态更新连接池配置', () => {\n      const newPoolConfig = {\n        maxConnections: 20,\n        minConnections: 5\n      }\n      \n      connection.updateConfig(newPoolConfig)\n      \n      // 配置应该已更新（无法直接验证私有属性，但不应抛出错误）\n      expect(() => connection.updateConfig(newPoolConfig)).not.toThrow()\n    })\n\n    it('应该允许动态更新重连配置', () => {\n      const newReconnectionConfig = {\n        enabled: false,\n        maxRetries: 5\n      }\n      \n      connection.updateConfig(undefined, newReconnectionConfig)\n      \n      // 配置应该已更新\n      expect(() => connection.updateConfig(undefined, newReconnectionConfig)).not.toThrow()\n    })\n\n    it('应该允许动态更新健康检查配置', async () => {\n      // 先连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      const newHealthCheckConfig = {\n        enabled: true,\n        intervalMs: 1000\n      }\n      \n      connection.updateConfig(undefined, undefined, newHealthCheckConfig)\n      \n      // 配置应该已更新\n      expect(() => connection.updateConfig(undefined, undefined, newHealthCheckConfig)).not.toThrow()\n    })\n  })\n\n  describe('全局实例测试', () => {\n    it('应该提供全局数据库连接实例', () => {\n      expect(enhancedDb).toBeInstanceOf(EnhancedDatabaseConnection)\n    })\n\n    it('应该提供便捷的连接函数', async () => {\n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      await connectDatabase()\n      \n      expect(isDatabaseConnected()).toBe(true)\n      \n      const stats = getDatabaseStats()\n      expect(stats.state).toBe(ConnectionState.CONNECTED)\n      \n      await disconnectDatabase()\n      expect(isDatabaseConnected()).toBe(false)\n    })\n\n    it('应该提供便捷的查询执行函数', async () => {\n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ result: 'success' }])\n      \n      await connectDatabase()\n      \n      const result = await executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT 'success' as result`\n      })\n      \n      expect(result).toEqual([{ result: 'success' }])\n      \n      await disconnectDatabase()\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该正确识别连接相关错误', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // 连接验证\n        .mockRejectedValueOnce(new Error('ECONNREFUSED: Connection refused')) // 连接错误\n      \n      await connection.connect()\n      \n      // 监听错误事件\n      const errorPromise = new Promise(resolve => {\n        connection.once('error', resolve)\n      })\n      \n      // 执行会导致连接错误的查询\n      await expect(connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT 1`\n      })).rejects.toThrow('ECONNREFUSED')\n      \n      // 等待错误事件\n      await errorPromise\n    })\n\n    it('应该处理优雅关闭', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined)\n      \n      await connection.connect()\n      \n      // 执行优雅关闭\n      await expect(connection.gracefulShutdown()).resolves.not.toThrow()\n    })\n  })\n\n  describe('事件系统', () => {\n    it('应该正确触发连接事件', async () => {\n      // 监听连接事件\n      const connectedPromise = new Promise(resolve => {\n        connection.once('connected', resolve)\n      })\n      \n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      await connection.connect()\n      \n      // 等待连接事件\n      await connectedPromise\n    })\n\n    it('应该正确触发断开连接事件', async () => {\n      // 先连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 监听断开连接事件\n      const disconnectedPromise = new Promise(resolve => {\n        connection.once('disconnected', resolve)\n      })\n      \n      // 模拟断开连接\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined)\n      \n      await connection.disconnect()\n      \n      // 等待断开连接事件\n      await disconnectedPromise\n    })\n\n    it('应该正确触发错误事件', async () => {\n      // 监听错误事件\n      const errorPromise = new Promise(resolve => {\n        connection.once('error', resolve)\n      })\n      \n      // 模拟连接失败\n      const connectionError = new Error('Connection failed')\n      mockPrismaClient.$connect.mockRejectedValue(connectionError)\n      \n      await expect(connection.connect()).rejects.toThrow('Connection failed')\n      \n      // 等待错误事件\n      const error = await errorPromise\n      expect(error).toBe(connectionError)\n    })\n  })\n})"],"version":3}