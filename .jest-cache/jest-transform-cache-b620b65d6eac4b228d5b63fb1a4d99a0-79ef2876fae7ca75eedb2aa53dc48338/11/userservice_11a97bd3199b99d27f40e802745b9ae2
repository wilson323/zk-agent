4c3b86b0ddbee8d227da1127d1de7b55
"use strict";

/**
 * @file lib/services/user-service.ts
 * @description User service for handling business logic related to users.
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_55p7i6tuw() {
  var path = "E:\\zk-agent\\lib\\services\\user-service.ts";
  var hash = "c2d89ec547feb40aa4d5b4c304675003769660c6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\services\\user-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 133
        }
      },
      "2": {
        start: {
          line: 10,
          column: 36
        },
        end: {
          line: 10,
          column: 84
        }
      },
      "3": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "5": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 25,
          column: 2
        }
      },
      "6": {
        start: {
          line: 35,
          column: 17
        },
        end: {
          line: 56,
          column: 1
        }
      },
      "7": {
        start: {
          line: 36,
          column: 27
        },
        end: {
          line: 54,
          column: 6
        }
      },
      "8": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 86
        }
      },
      "9": {
        start: {
          line: 57,
          column: 0
        },
        end: {
          line: 57,
          column: 28
        }
      },
      "10": {
        start: {
          line: 64,
          column: 19
        },
        end: {
          line: 80,
          column: 1
        }
      },
      "11": {
        start: {
          line: 65,
          column: 22
        },
        end: {
          line: 65,
          column: 26
        }
      },
      "12": {
        start: {
          line: 66,
          column: 25
        },
        end: {
          line: 68,
          column: 6
        }
      },
      "13": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "14": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 64
        }
      },
      "15": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 78,
          column: 6
        }
      },
      "16": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 19
        }
      },
      "17": {
        start: {
          line: 81,
          column: 0
        },
        end: {
          line: 81,
          column: 32
        }
      },
      "18": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 115,
          column: 1
        }
      },
      "19": {
        start: {
          line: 89,
          column: 17
        },
        end: {
          line: 105,
          column: 6
        }
      },
      "20": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "21": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 20
        }
      },
      "22": {
        start: {
          line: 109,
          column: 18
        },
        end: {
          line: 113,
          column: 6
        }
      },
      "23": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 27
        }
      },
      "24": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 34
        }
      },
      "25": {
        start: {
          line: 124,
          column: 19
        },
        end: {
          line: 149,
          column: 1
        }
      },
      "26": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 148,
          column: 7
        }
      },
      "27": {
        start: {
          line: 126,
          column: 28
        },
        end: {
          line: 146,
          column: 10
        }
      },
      "28": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 27
        }
      },
      "29": {
        start: {
          line: 150,
          column: 0
        },
        end: {
          line: 150,
          column: 32
        }
      },
      "30": {
        start: {
          line: 157,
          column: 19
        },
        end: {
          line: 167,
          column: 1
        }
      },
      "31": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 166,
          column: 7
        }
      },
      "32": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 165,
          column: 11
        }
      },
      "33": {
        start: {
          line: 168,
          column: 0
        },
        end: {
          line: 168,
          column: 32
        }
      },
      "34": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 186,
          column: 1
        }
      },
      "35": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "36": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 81
        }
      },
      "37": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 176,
          column: 10
        }
      },
      "38": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 184,
          column: 10
        }
      },
      "39": {
        start: {
          line: 187,
          column: 0
        },
        end: {
          line: 187,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 35,
            column: 17
          },
          end: {
            line: 35,
            column: 18
          }
        },
        loc: {
          start: {
            line: 35,
            column: 51
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 35
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 64,
            column: 19
          },
          end: {
            line: 64,
            column: 20
          }
        },
        loc: {
          start: {
            line: 64,
            column: 35
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 64
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 88,
            column: 20
          },
          end: {
            line: 88,
            column: 21
          }
        },
        loc: {
          start: {
            line: 88,
            column: 34
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 88
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 124,
            column: 19
          },
          end: {
            line: 124,
            column: 20
          }
        },
        loc: {
          start: {
            line: 124,
            column: 39
          },
          end: {
            line: 149,
            column: 1
          }
        },
        line: 124
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 125,
            column: 58
          },
          end: {
            line: 125,
            column: 59
          }
        },
        loc: {
          start: {
            line: 125,
            column: 76
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 125
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 157,
            column: 19
          },
          end: {
            line: 157,
            column: 20
          }
        },
        loc: {
          start: {
            line: 157,
            column: 33
          },
          end: {
            line: 167,
            column: 1
          }
        },
        line: 157
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 158,
            column: 58
          },
          end: {
            line: 158,
            column: 59
          }
        },
        loc: {
          start: {
            line: 158,
            column: 76
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 158
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 169,
            column: 20
          },
          end: {
            line: 169,
            column: 21
          }
        },
        loc: {
          start: {
            line: 169,
            column: 32
          },
          end: {
            line: 186,
            column: 1
          }
        },
        line: 169
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 71,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "1": {
        loc: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\services\\user-service.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\lib\\services\\user-service.ts"],
      sourcesContent: ["/**\n * @file lib/services/user-service.ts\n * @description User service for handling business logic related to users.\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { db, enhancedDb, dbTransaction } from '../database/enhanced-database-manager';\nimport { z } from 'zod';\nimport type { HealthCheckResult } from '../types/health';\n\n// Zod a validation schema for creating a user\nconst createUserSchema = z.object({\n  email: z.string().email(),\n  name: z.string().optional(),\n  avatar: z.string().optional(),\n  role: z.enum(['USER', 'ADMIN']).optional(),\n});\n\n// Zod a validation schema for updating a user\nconst updateUserSchema = z.object({\n  name: z.string().optional(),\n  avatar: z.string().optional(),\n  role: z.enum(['USER', 'ADMIN']).optional(),\n  status: z.enum(['ACTIVE', 'INACTIVE', 'DELETED']).optional(),\n});\n\n/**\n * Fetches a list of users with pagination and filtering.\n *\n * @param {object} options - The options for fetching users.\n * @param {object} options.where - The where clause for filtering.\n * @param {number} options.skip - The number of records to skip.\n * @param {number} options.limit - The maximum number of records to return.\n * @returns {Promise<[object[], number]>} A tuple containing the list of users and the total count.\n */\nexport const getUsers = async ({ where, skip, limit }: { where: object; skip: number; limit: number }) => {\n  const [users, total] = await Promise.all([\n    db?.user.findMany({\n      where,\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        role: true,\n        status: true,\n        lastLoginAt: true,\n        loginCount: true,\n        createdAt: true,\n      },\n      skip,\n      take: limit,\n    }),\n    db?.user.count({ where }),\n  ]);\n  return { users, pagination: { total, page: Math.ceil(skip / limit) + 1, limit } };\n};\n\n/**\n * Creates a new user.\n *\n * @param {object} data - The user data.\n * @returns {Promise<object>} The created user.\n */\nexport const createUser = async (data: z.infer<typeof createUserSchema>) => {\n  const { email } = data;\n  const existingUser = await db?.user.findUnique({\n    where: { email: email.toLowerCase() },\n  });\n\n  if (existingUser) {\n    throw new Error('User with this email already exists.');\n  }\n\n  const newUser = await db?.user.create({\n    data: {\n      ...data,\n      email: email.toLowerCase(),\n      password: 'placeholder', // Add a placeholder password\n    },\n  });\n\n  return newUser;\n};\n\n/**\n * Fetches a single user by their ID.\n *\n * @param {string} id - The user ID.\n * @returns {Promise<object | null>} The user object or null if not found.\n */\nexport const getUserById = async (id: string) => {\n  const user = await db?.user.findUnique({\n    where: { id },\n    select: {\n      id: true,\n      email: true,\n      name: true,\n      avatar: true,\n      role: true,\n      status: true,\n      emailVerified: true,\n      emailVerifiedAt: true,\n      lastLoginAt: true,\n      loginCount: true,\n      createdAt: true,\n      updatedAt: true,\n    },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  const stats = await db?.usageStats.groupBy({\n    by: ['agentType'],\n    where: { userId: id },\n    _count: { id: true },\n  });\n\n  return { user, stats };\n};\n\n/**\n * Updates a user's information.\n *\n * @param {string} id - The user ID.\n * @param {object} data - The data to update.\n * @returns {Promise<object>} The updated user.\n */\nexport const updateUser = async (id: string, data: z.infer<typeof updateUserSchema>) => {\n    return dbTransaction(async (prisma) => {\n      const updatedUser = await prisma.user.update({\n        where: { id },\n        data: {\n          ...data,\n          updatedAt: new Date(),\n        },\n        select: {\n          id: true,\n          email: true,\n          name: true,\n          avatar: true,\n          role: true,\n          status: true,\n          emailVerified: true,\n          emailVerifiedAt: true,\n          lastLoginAt: true,\n          loginCount: true,\n          createdAt: true,\n          updatedAt: true,\n        },\n      });\n      return updatedUser;\n    });\n  };\n\n/**\n * Deletes a user by their ID (soft delete).\n *\n * @param {string} id - The user ID.\n * @returns {Promise<void>}\n */\nexport const deleteUser = async (id: string) => {\n  return dbTransaction(async (prisma) => {\n    await prisma.user.update({\n      where: { id },\n      data: {\n        status: 'DELETED',\n        updatedAt: new Date(),\n      },\n    });\n  });\n};\n\nexport const checkHealth = async (): Promise<HealthCheckResult> => {\n    try {\n      await enhancedDb.prisma.$queryRaw`SELECT 1`;\n      return {\n        status: 'UP',\n        timestamp: new Date(),\n        details: { database: 'Connected' },\n      };\n    } catch (error: any) {\n      return {\n        status: 'DOWN',\n        timestamp: new Date(),\n        details: { database: 'Disconnected' },\n        error: error.message,\n      };\n    }\n  };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c2d89ec547feb40aa4d5b4c304675003769660c6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_55p7i6tuw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_55p7i6tuw();
cov_55p7i6tuw().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_55p7i6tuw().s[1]++;
exports.checkHealth = exports.deleteUser = exports.updateUser = exports.getUserById = exports.createUser = exports.getUsers = void 0;
const enhanced_database_manager_1 =
/* istanbul ignore next */
(cov_55p7i6tuw().s[2]++, require("../database/enhanced-database-manager"));
const zod_1 =
/* istanbul ignore next */
(cov_55p7i6tuw().s[3]++, require("zod"));
// Zod a validation schema for creating a user
const createUserSchema =
/* istanbul ignore next */
(cov_55p7i6tuw().s[4]++, zod_1.z.object({
  email: zod_1.z.string().email(),
  name: zod_1.z.string().optional(),
  avatar: zod_1.z.string().optional(),
  role: zod_1.z.enum(['USER', 'ADMIN']).optional()
}));
// Zod a validation schema for updating a user
const updateUserSchema =
/* istanbul ignore next */
(cov_55p7i6tuw().s[5]++, zod_1.z.object({
  name: zod_1.z.string().optional(),
  avatar: zod_1.z.string().optional(),
  role: zod_1.z.enum(['USER', 'ADMIN']).optional(),
  status: zod_1.z.enum(['ACTIVE', 'INACTIVE', 'DELETED']).optional()
}));
/**
 * Fetches a list of users with pagination and filtering.
 *
 * @param {object} options - The options for fetching users.
 * @param {object} options.where - The where clause for filtering.
 * @param {number} options.skip - The number of records to skip.
 * @param {number} options.limit - The maximum number of records to return.
 * @returns {Promise<[object[], number]>} A tuple containing the list of users and the total count.
 */
/* istanbul ignore next */
cov_55p7i6tuw().s[6]++;
const getUsers = async ({
  where,
  skip,
  limit
}) => {
  /* istanbul ignore next */
  cov_55p7i6tuw().f[0]++;
  const [users, total] =
  /* istanbul ignore next */
  (cov_55p7i6tuw().s[7]++, await Promise.all([enhanced_database_manager_1.db?.user.findMany({
    where,
    select: {
      id: true,
      email: true,
      name: true,
      avatar: true,
      role: true,
      status: true,
      lastLoginAt: true,
      loginCount: true,
      createdAt: true
    },
    skip,
    take: limit
  }), enhanced_database_manager_1.db?.user.count({
    where
  })]));
  /* istanbul ignore next */
  cov_55p7i6tuw().s[8]++;
  return {
    users,
    pagination: {
      total,
      page: Math.ceil(skip / limit) + 1,
      limit
    }
  };
};
/* istanbul ignore next */
cov_55p7i6tuw().s[9]++;
exports.getUsers = getUsers;
/**
 * Creates a new user.
 *
 * @param {object} data - The user data.
 * @returns {Promise<object>} The created user.
 */
/* istanbul ignore next */
cov_55p7i6tuw().s[10]++;
const createUser = async data => {
  /* istanbul ignore next */
  cov_55p7i6tuw().f[1]++;
  const {
    email
  } =
  /* istanbul ignore next */
  (cov_55p7i6tuw().s[11]++, data);
  const existingUser =
  /* istanbul ignore next */
  (cov_55p7i6tuw().s[12]++, await enhanced_database_manager_1.db?.user.findUnique({
    where: {
      email: email.toLowerCase()
    }
  }));
  /* istanbul ignore next */
  cov_55p7i6tuw().s[13]++;
  if (existingUser) {
    /* istanbul ignore next */
    cov_55p7i6tuw().b[0][0]++;
    cov_55p7i6tuw().s[14]++;
    throw new Error('User with this email already exists.');
  } else
  /* istanbul ignore next */
  {
    cov_55p7i6tuw().b[0][1]++;
  }
  const newUser =
  /* istanbul ignore next */
  (cov_55p7i6tuw().s[15]++, await enhanced_database_manager_1.db?.user.create({
    data: {
      ...data,
      email: email.toLowerCase(),
      password: 'placeholder' // Add a placeholder password
    }
  }));
  /* istanbul ignore next */
  cov_55p7i6tuw().s[16]++;
  return newUser;
};
/* istanbul ignore next */
cov_55p7i6tuw().s[17]++;
exports.createUser = createUser;
/**
 * Fetches a single user by their ID.
 *
 * @param {string} id - The user ID.
 * @returns {Promise<object | null>} The user object or null if not found.
 */
/* istanbul ignore next */
cov_55p7i6tuw().s[18]++;
const getUserById = async id => {
  /* istanbul ignore next */
  cov_55p7i6tuw().f[2]++;
  const user =
  /* istanbul ignore next */
  (cov_55p7i6tuw().s[19]++, await enhanced_database_manager_1.db?.user.findUnique({
    where: {
      id
    },
    select: {
      id: true,
      email: true,
      name: true,
      avatar: true,
      role: true,
      status: true,
      emailVerified: true,
      emailVerifiedAt: true,
      lastLoginAt: true,
      loginCount: true,
      createdAt: true,
      updatedAt: true
    }
  }));
  /* istanbul ignore next */
  cov_55p7i6tuw().s[20]++;
  if (!user) {
    /* istanbul ignore next */
    cov_55p7i6tuw().b[1][0]++;
    cov_55p7i6tuw().s[21]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_55p7i6tuw().b[1][1]++;
  }
  const stats =
  /* istanbul ignore next */
  (cov_55p7i6tuw().s[22]++, await enhanced_database_manager_1.db?.usageStats.groupBy({
    by: ['agentType'],
    where: {
      userId: id
    },
    _count: {
      id: true
    }
  }));
  /* istanbul ignore next */
  cov_55p7i6tuw().s[23]++;
  return {
    user,
    stats
  };
};
/* istanbul ignore next */
cov_55p7i6tuw().s[24]++;
exports.getUserById = getUserById;
/**
 * Updates a user's information.
 *
 * @param {string} id - The user ID.
 * @param {object} data - The data to update.
 * @returns {Promise<object>} The updated user.
 */
/* istanbul ignore next */
cov_55p7i6tuw().s[25]++;
const updateUser = async (id, data) => {
  /* istanbul ignore next */
  cov_55p7i6tuw().f[3]++;
  cov_55p7i6tuw().s[26]++;
  return (0, enhanced_database_manager_1.dbTransaction)(async prisma => {
    /* istanbul ignore next */
    cov_55p7i6tuw().f[4]++;
    const updatedUser =
    /* istanbul ignore next */
    (cov_55p7i6tuw().s[27]++, await prisma.user.update({
      where: {
        id
      },
      data: {
        ...data,
        updatedAt: new Date()
      },
      select: {
        id: true,
        email: true,
        name: true,
        avatar: true,
        role: true,
        status: true,
        emailVerified: true,
        emailVerifiedAt: true,
        lastLoginAt: true,
        loginCount: true,
        createdAt: true,
        updatedAt: true
      }
    }));
    /* istanbul ignore next */
    cov_55p7i6tuw().s[28]++;
    return updatedUser;
  });
};
/* istanbul ignore next */
cov_55p7i6tuw().s[29]++;
exports.updateUser = updateUser;
/**
 * Deletes a user by their ID (soft delete).
 *
 * @param {string} id - The user ID.
 * @returns {Promise<void>}
 */
/* istanbul ignore next */
cov_55p7i6tuw().s[30]++;
const deleteUser = async id => {
  /* istanbul ignore next */
  cov_55p7i6tuw().f[5]++;
  cov_55p7i6tuw().s[31]++;
  return (0, enhanced_database_manager_1.dbTransaction)(async prisma => {
    /* istanbul ignore next */
    cov_55p7i6tuw().f[6]++;
    cov_55p7i6tuw().s[32]++;
    await prisma.user.update({
      where: {
        id
      },
      data: {
        status: 'DELETED',
        updatedAt: new Date()
      }
    });
  });
};
/* istanbul ignore next */
cov_55p7i6tuw().s[33]++;
exports.deleteUser = deleteUser;
/* istanbul ignore next */
cov_55p7i6tuw().s[34]++;
const checkHealth = async () => {
  /* istanbul ignore next */
  cov_55p7i6tuw().f[7]++;
  cov_55p7i6tuw().s[35]++;
  try {
    /* istanbul ignore next */
    cov_55p7i6tuw().s[36]++;
    await enhanced_database_manager_1.enhancedDb.prisma.$queryRaw`SELECT 1`;
    /* istanbul ignore next */
    cov_55p7i6tuw().s[37]++;
    return {
      status: 'UP',
      timestamp: new Date(),
      details: {
        database: 'Connected'
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_55p7i6tuw().s[38]++;
    return {
      status: 'DOWN',
      timestamp: new Date(),
      details: {
        database: 'Disconnected'
      },
      error: error.message
    };
  }
};
/* istanbul ignore next */
cov_55p7i6tuw().s[39]++;
exports.checkHealth = checkHealth;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,