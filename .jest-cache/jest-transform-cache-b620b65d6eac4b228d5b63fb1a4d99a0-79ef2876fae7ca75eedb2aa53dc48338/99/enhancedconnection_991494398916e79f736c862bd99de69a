15e61e2a97bcfe1bbdfd73fd401b85d6
"use strict";
/**
 * @file Enhanced Database Connection Manager
 * @description 增强的数据库连接管理器，支持连接池优化、自动重连和错误恢复
 * @author ZK-Agent Team A
 * @date 2024-12-19
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeQuery = exports.isDatabaseConnected = exports.getDatabaseStats = exports.disconnectDatabase = exports.connectDatabase = exports.enhancedDb = exports.EnhancedDatabaseConnection = exports.ConnectionState = void 0;
const client_1 = require("@prisma/client");
const events_1 = require("events");
// 连接状态枚举
var ConnectionState;
(function (ConnectionState) {
    ConnectionState["DISCONNECTED"] = "disconnected";
    ConnectionState["CONNECTING"] = "connecting";
    ConnectionState["CONNECTED"] = "connected";
    ConnectionState["RECONNECTING"] = "reconnecting";
    ConnectionState["FAILED"] = "failed";
})(ConnectionState || (exports.ConnectionState = ConnectionState = {}));
/**
 * 增强的数据库连接管理器
 */
class EnhancedDatabaseConnection extends events_1.EventEmitter {
    constructor(poolConfig, reconnectionConfig, healthCheckConfig) {
        super();
        this.prisma = null;
        this.state = ConnectionState.DISCONNECTED;
        this.reconnectTimer = null;
        this.healthCheckTimer = null;
        // 默认配置
        this.config = {
            pool: {
                maxConnections: parseInt(process.env.DB_POOL_MAX || '50'),
                minConnections: parseInt(process.env.DB_POOL_MIN || '10'),
                acquireTimeoutMillis: parseInt(process.env.DB_POOL_ACQUIRE || '60000'),
                idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE || '20000'),
                evictionRunIntervalMillis: parseInt(process.env.DB_POOL_EVICT || '1000'),
                connectTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT || '20000'),
                requestTimeoutMillis: parseInt(process.env.DB_REQUEST_TIMEOUT || '15000'),
                cancelTimeoutMillis: parseInt(process.env.DB_CANCEL_TIMEOUT || '5000'),
                ...poolConfig
            },
            reconnection: {
                enabled: true,
                maxRetries: 10,
                retryDelayMs: 1000,
                backoffMultiplier: 2,
                maxRetryDelayMs: 30000,
                jitterMs: 100,
                ...reconnectionConfig
            },
            healthCheck: {
                enabled: process.env.DB_HEALTH_CHECK === 'true',
                intervalMs: parseInt(process.env.DB_HEALTH_CHECK_INTERVAL || '30000'),
                timeoutMs: parseInt(process.env.DB_HEALTH_CHECK_TIMEOUT || '5000'),
                failureThreshold: 3,
                recoveryThreshold: 2,
                ...healthCheckConfig
            }
        };
        // 初始化统计信息
        this.stats = {
            state: ConnectionState.DISCONNECTED,
            reconnectAttempts: 0,
            totalQueries: 0,
            failedQueries: 0,
            avgLatency: 0,
            uptime: 0
        };
        // 绑定事件处理器
        this.setupEventHandlers();
    }
    /**
     * 设置事件处理器
     */
    setupEventHandlers() {
        // 进程退出时清理连接
        process.on('beforeExit', () => this.disconnect());
        process.on('SIGINT', () => this.gracefulShutdown());
        process.on('SIGTERM', () => this.gracefulShutdown());
        // 未捕获异常处理
        process.on('uncaughtException', (error) => {
            console.error('Uncaught exception in database connection:', error);
            this.handleConnectionError(error);
        });
        process.on('unhandledRejection', (reason) => {
            console.error('Unhandled rejection in database connection:', reason);
            if (reason instanceof Error) {
                this.handleConnectionError(reason);
            }
        });
    }
    /**
     * 连接到数据库
     */
    async connect() {
        if (this.state === ConnectionState.CONNECTED) {
            return;
        }
        this.setState(ConnectionState.CONNECTING);
        try {
            // 创建Prisma客户端
            this.prisma = new client_1.PrismaClient({
                log: process.env.NODE_ENV === 'development'
                    ? ['query', 'error', 'warn']
                    : ['error'],
                errorFormat: 'pretty',
                datasources: {
                    db: {
                        url: process.env.DATABASE_URL
                    }
                }
            });
            // 连接到数据库
            await this.prisma.$connect();
            // 验证连接
            await this.validateConnection();
            this.setState(ConnectionState.CONNECTED);
            this.stats.connectedAt = new Date();
            this.stats.reconnectAttempts = 0;
            this.stats.lastError = undefined;
            // 启动健康检查
            if (this.config.healthCheck.enabled) {
                this.startHealthCheck();
            }
            this.emit('connected');
            console.log('Database connected successfully');
        }
        catch (error) {
            this.setState(ConnectionState.FAILED);
            this.stats.lastError = error instanceof Error ? error : new Error(String(error));
            console.error('Database connection failed:', error);
            this.emit('error', this.stats.lastError);
            // 如果启用了重连，则尝试重连
            if (this.config.reconnection.enabled) {
                this.scheduleReconnect();
            }
            throw error;
        }
    }
    /**
     * 验证数据库连接
     */
    async validateConnection() {
        if (!this.prisma) {
            throw new Error('Prisma client not initialized');
        }
        const startTime = Date.now();
        try {
            // 执行简单查询验证连接
            await this.prisma.$queryRaw `SELECT 1 as test`;
            const latency = Date.now() - startTime;
            this.updateLatencyStats(latency);
        }
        catch (error) {
            throw new Error(`Connection validation failed: ${error}`);
        }
    }
    /**
     * 断开数据库连接
     */
    async disconnect() {
        this.stopHealthCheck();
        this.stopReconnectTimer();
        if (this.prisma) {
            try {
                await this.prisma.$disconnect();
                console.log('Database disconnected successfully');
            }
            catch (error) {
                console.error('Error disconnecting from database:', error);
            }
            finally {
                this.prisma = null;
            }
        }
        this.setState(ConnectionState.DISCONNECTED);
        this.emit('disconnected');
    }
    /**
     * 优雅关闭
     */
    async gracefulShutdown() {
        console.log('Initiating graceful database shutdown...');
        try {
            await this.disconnect();
            console.log('Database shutdown completed');
        }
        catch (error) {
            console.error('Error during graceful shutdown:', error);
        }
        finally {
            process.exit(0);
        }
    }
    /**
     * 重新连接数据库
     */
    async reconnect() {
        console.log('Attempting to reconnect to database...');
        this.setState(ConnectionState.RECONNECTING);
        this.stats.reconnectAttempts++;
        this.emit('reconnecting', this.stats.reconnectAttempts);
        try {
            // 先断开现有连接
            if (this.prisma) {
                await this.prisma.$disconnect();
                this.prisma = null;
            }
            // 重新连接
            await this.connect();
            console.log('Database reconnected successfully');
            this.emit('reconnected');
        }
        catch (error) {
            console.error(`Reconnection attempt ${this.stats.reconnectAttempts} failed:`, error);
            // 如果还有重试次数，则继续尝试
            if (this.stats.reconnectAttempts < this.config.reconnection.maxRetries) {
                this.scheduleReconnect();
            }
            else {
                console.error('Max reconnection attempts reached. Giving up.');
                this.setState(ConnectionState.FAILED);
                this.emit('error', new Error('Max reconnection attempts reached'));
            }
        }
    }
    /**
     * 安排重连
     */
    scheduleReconnect() {
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
        }
        const delay = this.calculateReconnectDelay();
        console.log(`Scheduling reconnection in ${delay}ms (attempt ${this.stats.reconnectAttempts + 1})`);
        this.reconnectTimer = setTimeout(() => {
            this.reconnect().catch(error => {
                console.error('Scheduled reconnection failed:', error);
            });
        }, delay);
    }
    /**
     * 计算重连延迟时间
     */
    calculateReconnectDelay() {
        const { retryDelayMs, backoffMultiplier, maxRetryDelayMs, jitterMs } = this.config.reconnection;
        // 指数退避算法
        const baseDelay = Math.min(retryDelayMs * Math.pow(backoffMultiplier, this.stats.reconnectAttempts), maxRetryDelayMs);
        // 添加随机抖动避免雷群效应
        const jitter = Math.random() * jitterMs;
        return baseDelay + jitter;
    }
    /**
     * 停止重连定时器
     */
    stopReconnectTimer() {
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            this.reconnectTimer = null;
        }
    }
    /**
     * 启动健康检查
     */
    startHealthCheck() {
        if (this.healthCheckTimer) {
            return;
        }
        this.healthCheckTimer = setInterval(() => {
            this.performHealthCheck().catch(error => {
                console.error('Health check failed:', error);
            });
        }, this.config.healthCheck.intervalMs);
    }
    /**
     * 停止健康检查
     */
    stopHealthCheck() {
        if (this.healthCheckTimer) {
            clearInterval(this.healthCheckTimer);
            this.healthCheckTimer = null;
        }
    }
    /**
     * 执行健康检查
     */
    async performHealthCheck() {
        if (!this.prisma || this.state !== ConnectionState.CONNECTED) {
            return false;
        }
        const startTime = Date.now();
        try {
            // 设置健康检查超时
            const timeoutPromise = new Promise((_, reject) => {
                setTimeout(() => reject(new Error('Health check timeout')), this.config.healthCheck.timeoutMs);
            });
            // 执行健康检查查询
            const healthCheckPromise = this.prisma.$queryRaw `SELECT 1 as health_check`;
            await Promise.race([healthCheckPromise, timeoutPromise]);
            const latency = Date.now() - startTime;
            this.updateLatencyStats(latency);
            this.emit('healthCheck', true);
            return true;
        }
        catch (error) {
            console.error('Health check failed:', error);
            this.emit('healthCheck', false);
            // 健康检查失败，可能需要重连
            this.handleConnectionError(error instanceof Error ? error : new Error(String(error)));
            return false;
        }
    }
    /**
     * 处理连接错误
     */
    handleConnectionError(error) {
        console.error('Database connection error:', error);
        this.stats.lastError = error;
        this.emit('error', error);
        // 如果当前是连接状态且启用了重连，则尝试重连
        if (this.state === ConnectionState.CONNECTED && this.config.reconnection.enabled) {
            this.setState(ConnectionState.DISCONNECTED);
            this.scheduleReconnect();
        }
    }
    /**
     * 设置连接状态
     */
    setState(state) {
        const previousState = this.state;
        this.state = state;
        this.stats.state = state;
        if (previousState !== state) {
            console.log(`Database connection state changed: ${previousState} -> ${state}`);
        }
    }
    /**
     * 更新延迟统计
     */
    updateLatencyStats(latency) {
        this.stats.totalQueries++;
        // 计算平均延迟（简单移动平均）
        if (this.stats.avgLatency === 0) {
            this.stats.avgLatency = latency;
        }
        else {
            this.stats.avgLatency = (this.stats.avgLatency * 0.9) + (latency * 0.1);
        }
    }
    /**
     * 执行数据库查询（带错误处理和统计）
     */
    async executeQuery(queryFn) {
        if (!this.prisma || this.state !== ConnectionState.CONNECTED) {
            throw new Error('Database not connected');
        }
        const startTime = Date.now();
        try {
            const result = await queryFn(this.prisma);
            const latency = Date.now() - startTime;
            this.updateLatencyStats(latency);
            return result;
        }
        catch (error) {
            this.stats.failedQueries++;
            console.error('Query execution failed:', error);
            // 发出详细的错误事件
            this.emit('error', error);
            this.emit('queryFailed', {
                error,
                query: queryFn.toString(),
                timestamp: new Date(),
                totalFailures: this.stats.failedQueries
            });
            // 检查是否是连接相关错误
            if (this.isConnectionError(error)) {
                this.handleConnectionError(error instanceof Error ? error : new Error(String(error)));
            }
            throw error;
        }
    }
    /**
     * 检查是否是连接相关错误
     */
    isConnectionError(error) {
        if (!error) {
            return false;
        }
        const errorMessage = error.message || error.toString();
        const connectionErrorPatterns = [
            'connection',
            'timeout',
            'network',
            'ECONNREFUSED',
            'ENOTFOUND',
            'ETIMEDOUT',
            'socket',
            'server closed'
        ];
        return connectionErrorPatterns.some(pattern => errorMessage.toLowerCase().includes(pattern.toLowerCase()));
    }
    /**
     * 获取连接统计信息
     */
    getStats() {
        const uptime = this.stats.connectedAt
            ? Date.now() - this.stats.connectedAt.getTime()
            : 0;
        return {
            ...this.stats,
            uptime
        };
    }
    /**
     * 更新连接池配置
     */
    async updateConfiguration(config) {
        try {
            console.log('Updating database configuration:', config);
            this.config.pool = { ...this.config.pool, ...config };
            // 在实际实现中，这里应该重新初始化连接池
            // 由于Prisma的限制，我们只能记录配置变更
            this.emit('configurationUpdated', { config, timestamp: new Date() });
        }
        catch (error) {
            console.error('Failed to update database configuration:', error);
            throw error;
        }
    }
    /**
     * 更新恢复配置
     */
    updateRecoveryConfiguration(config) {
        this.config.reconnection = { ...this.config.reconnection, ...config };
        console.log('Recovery configuration updated:', config);
        this.emit('recoveryConfigurationUpdated', { config, timestamp: new Date() });
    }
    /**
     * 获取当前配置
     */
    getConfiguration() {
        return {
            pool: { ...this.config.pool },
            recovery: { ...this.config.reconnection }
        };
    }
    /**
     * 强制健康检查
     */
    async forceHealthCheck() {
        return await this.performHealthCheck();
    }
    /**
     * 获取详细的连接信息
     */
    getDetailedStats() {
        const basicStats = this.getStats();
        const successRate = this.stats.totalQueries > 0
            ? ((this.stats.totalQueries - this.stats.failedQueries) / this.stats.totalQueries) * 100
            : 100;
        const uptimeSeconds = basicStats.uptime / 1000;
        const queriesPerSecond = uptimeSeconds > 0 ? this.stats.totalQueries / uptimeSeconds : 0;
        return {
            ...basicStats,
            configuration: this.getConfiguration(),
            performance: {
                successRate,
                queriesPerSecond,
                avgResponseTime: basicStats.avgLatency
            }
        };
    }
    /**
     * 获取Prisma客户端实例
     */
    getClient() {
        return this.prisma;
    }
    /**
     * 检查连接状态
     */
    isConnected() {
        return this.state === ConnectionState.CONNECTED && this.prisma !== null;
    }
    /**
     * 获取当前连接状态
     */
    getState() {
        return this.state;
    }
    /**
     * 更新配置
     */
    updateConfig(poolConfig, reconnectionConfig, healthCheckConfig) {
        if (poolConfig) {
            this.config.pool = { ...this.config.pool, ...poolConfig };
        }
        if (reconnectionConfig) {
            this.config.reconnection = { ...this.config.reconnection, ...reconnectionConfig };
        }
        if (healthCheckConfig) {
            this.config.healthCheck = { ...this.config.healthCheck, ...healthCheckConfig };
            // 如果健康检查配置改变，重启健康检查
            if (this.state === ConnectionState.CONNECTED) {
                this.stopHealthCheck();
                if (this.config.healthCheck.enabled) {
                    this.startHealthCheck();
                }
            }
        }
    }
}
exports.EnhancedDatabaseConnection = EnhancedDatabaseConnection;
// 初始化监控和优化模块
if (process.env.DB_MONITORING_ENABLED === 'true') {
    // 延迟导入以避免循环依赖
    Promise.resolve().then(() => __importStar(require('./monitoring'))).then(({ databaseMonitor }) => {
        databaseMonitor.startMonitoring();
        console.log('Database monitoring started');
    }).catch(console.error);
}
if (process.env.DB_POOL_OPTIMIZATION_ENABLED === 'true') {
    Promise.resolve().then(() => __importStar(require('./pool-optimizer'))).then(({ poolOptimizer }) => {
        poolOptimizer.startOptimization();
        console.log('Database pool optimization started');
    }).catch(console.error);
}
if (process.env.DB_ERROR_RECOVERY_ENABLED === 'true') {
    Promise.resolve().then(() => __importStar(require('./error-recovery'))).then(({ errorRecovery }) => {
        errorRecovery.start();
        console.log('Database error recovery started');
    }).catch(console.error);
}
// 全局增强数据库连接实例
exports.enhancedDb = new EnhancedDatabaseConnection();
// 导出便捷方法
const connectDatabase = () => exports.enhancedDb.connect();
exports.connectDatabase = connectDatabase;
const disconnectDatabase = () => exports.enhancedDb.disconnect();
exports.disconnectDatabase = disconnectDatabase;
const getDatabaseStats = () => exports.enhancedDb.getStats();
exports.getDatabaseStats = getDatabaseStats;
const isDatabaseConnected = () => exports.enhancedDb.isConnected();
exports.isDatabaseConnected = isDatabaseConnected;
const executeQuery = (queryFn) => exports.enhancedDb.executeQuery(queryFn);
exports.executeQuery = executeQuery;
// 默认导出增强的数据库连接
exports.default = exports.enhancedDb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,