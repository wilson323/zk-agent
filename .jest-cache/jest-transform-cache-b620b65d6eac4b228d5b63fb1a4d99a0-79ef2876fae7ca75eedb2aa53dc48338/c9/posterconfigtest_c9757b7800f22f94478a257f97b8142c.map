{"file":"E:\\zk-agent\\__tests__\\lib\\database\\poster-config.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\database\\poster-config.test.ts"],"sourcesContent":["/**\n * 海报配置数据库操作测试\n */\n\nimport { PrismaClient } from '@prisma/client'\n\n// Mock Prisma Client\nconst mockPrismaInstance = {\n  posterStyle: {\n    findMany: jest.fn(),\n  },\n  posterTemplate: {\n    findMany: jest.fn(),\n    update: jest.fn(),\n  },\n  colorPalette: {\n    findMany: jest.fn(),\n  },\n  posterSize: {\n    findMany: jest.fn(),\n  },\n  posterGeneration: {\n    create: jest.fn(),\n    findMany: jest.fn(),\n  },\n  industryConfig: {\n    findUnique: jest.fn(),\n  },\n}\n\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => mockPrismaInstance),\n}))\n\n// Mock the poster-config module to use our mocked prisma\njest.mock('../../../lib/database/poster-config', () => {\n  const originalModule = jest.requireActual('../../../lib/database/poster-config')\n  return {\n    ...originalModule,\n    PosterConfigDB: {\n      getStyles: jest.fn(),\n      getSecurityTemplates: jest.fn(),\n      getColorPalettes: jest.fn(),\n      getPosterSizes: jest.fn(),\n      saveGenerationHistory: jest.fn(),\n      getUserHistory: jest.fn(),\n      updateTemplateUsage: jest.fn(),\n      getIndustryConfig: jest.fn(),\n    }\n  }\n})\n\nimport { PosterConfigDB } from '../../../lib/database/poster-config'\n\n// Mock console.error\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => {})\n\ndescribe('PosterConfigDB', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    mockConsoleError.mockClear()\n  })\n\n  describe('getStyles', () => {\n    it('应该成功获取海报风格', async () => {\n      const mockResult = [\n        {\n          id: '1',\n          name: 'Modern',\n          description: 'Modern style',\n          preview: 'preview.jpg',\n          category: 'business',\n          tags: ['modern', 'clean'],\n          industrySpecific: false,\n          parameters: { color: 'blue' },\n        },\n      ]\n\n      ;(PosterConfigDB.getStyles as jest.Mock).mockResolvedValue(mockResult)\n\n      const result = await PosterConfigDB.getStyles()\n\n      expect(PosterConfigDB.getStyles).toHaveBeenCalled()\n      expect(result).toEqual(mockResult)\n    })\n\n    it('应该处理获取风格失败的情况', async () => {\n      ;(PosterConfigDB.getStyles as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getStyles()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('getSecurityTemplates', () => {\n    it('应该成功获取安全模板', async () => {\n      const mockResult = [\n        {\n          id: '1',\n          name: 'Corporate',\n          description: 'Corporate template',\n          preview: 'preview.jpg',\n          category: 'business',\n          securityLevel: 'high',\n          complianceStandards: ['ISO27001'],\n          parameters: { encryption: true },\n        },\n      ]\n\n      ;(PosterConfigDB.getSecurityTemplates as jest.Mock).mockResolvedValue(mockResult)\n\n      const result = await PosterConfigDB.getSecurityTemplates()\n\n      expect(PosterConfigDB.getSecurityTemplates).toHaveBeenCalled()\n      expect(result).toEqual(mockResult)\n    })\n\n    it('应该处理获取安全模板失败的情况', async () => {\n      ;(PosterConfigDB.getSecurityTemplates as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getSecurityTemplates()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('getColorPalettes', () => {\n    it('应该成功获取配色方案', async () => {\n      const mockPalettes = [\n        {\n          id: '1',\n          name: 'Blue Palette',\n          colors: ['#0000FF', '#FFFFFF'],\n          description: 'Blue color scheme',\n          category: 'business',\n          industryRecommended: ['tech'],\n        },\n      ]\n\n      ;(PosterConfigDB.getColorPalettes as jest.Mock).mockResolvedValue(mockPalettes)\n\n      const result = await PosterConfigDB.getColorPalettes()\n\n      expect(PosterConfigDB.getColorPalettes).toHaveBeenCalled()\n      expect(result).toEqual(mockPalettes)\n    })\n\n    it('应该处理获取配色方案失败的情况', async () => {\n      ;(PosterConfigDB.getColorPalettes as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getColorPalettes()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('getPosterSizes', () => {\n    it('应该成功获取海报尺寸', async () => {\n      const mockSizes = [\n        {\n          id: '1',\n          name: 'A4',\n          dimensions: '210x297mm',\n          ratio: '1:1.414',\n          width: 210,\n          height: 297,\n          dpi: 300,\n          category: 'standard',\n          recommended: true,\n        },\n      ]\n\n      ;(PosterConfigDB.getPosterSizes as jest.Mock).mockResolvedValue(mockSizes)\n\n      const result = await PosterConfigDB.getPosterSizes()\n\n      expect(PosterConfigDB.getPosterSizes).toHaveBeenCalled()\n      expect(result).toEqual(mockSizes)\n    })\n\n    it('应该处理获取海报尺寸失败的情况', async () => {\n      ;(PosterConfigDB.getPosterSizes as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getPosterSizes()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('saveGenerationHistory', () => {\n    it('应该成功保存生成历史', async () => {\n      const mockData = {\n        userId: 'user1',\n        prompt: 'Create a poster',\n        style: 'modern',\n        template: 'template1',\n        settings: { color: 'blue' },\n        imageUrl: 'image.jpg',\n        industry: 'tech',\n      }\n\n      const mockResult = { id: '1', ...mockData }\n      ;(PosterConfigDB.saveGenerationHistory as jest.Mock).mockResolvedValue(mockResult)\n\n      const result = await PosterConfigDB.saveGenerationHistory(mockData)\n\n      expect(PosterConfigDB.saveGenerationHistory).toHaveBeenCalledWith(mockData)\n      expect(result).toEqual(mockResult)\n    })\n\n    it('应该处理保存生成历史失败的情况', async () => {\n      const mockData = {\n        userId: 'user1',\n        prompt: 'Create a poster',\n        style: 'modern',\n        settings: { color: 'blue' },\n        imageUrl: 'image.jpg',\n      }\n\n      ;(PosterConfigDB.saveGenerationHistory as jest.Mock).mockResolvedValue(undefined)\n\n      const result = await PosterConfigDB.saveGenerationHistory(mockData)\n\n      expect(result).toBeUndefined()\n    })\n  })\n\n  describe('getUserHistory', () => {\n    it('应该成功获取用户历史', async () => {\n      const mockHistory = [\n        {\n          id: '1',\n          userId: 'user1',\n          prompt: 'Create a poster',\n          template: { name: 'Template 1' },\n        },\n      ]\n\n      ;(PosterConfigDB.getUserHistory as jest.Mock).mockResolvedValue(mockHistory)\n\n      const result = await PosterConfigDB.getUserHistory('user1', 10)\n\n      expect(PosterConfigDB.getUserHistory).toHaveBeenCalledWith('user1', 10)\n      expect(result).toEqual(mockHistory)\n    })\n\n    it('应该使用默认限制', async () => {\n      ;(PosterConfigDB.getUserHistory as jest.Mock).mockResolvedValue([])\n\n      await PosterConfigDB.getUserHistory('user1')\n\n      expect(PosterConfigDB.getUserHistory).toHaveBeenCalledWith('user1')\n    })\n\n    it('应该处理获取用户历史失败的情况', async () => {\n      ;(PosterConfigDB.getUserHistory as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getUserHistory('user1')\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('updateTemplateUsage', () => {\n    it('应该成功更新模板使用次数', async () => {\n      ;(PosterConfigDB.updateTemplateUsage as jest.Mock).mockResolvedValue(undefined)\n\n      await PosterConfigDB.updateTemplateUsage('template1')\n\n      expect(PosterConfigDB.updateTemplateUsage).toHaveBeenCalledWith('template1')\n    })\n\n    it('应该处理更新模板使用次数失败的情况', async () => {\n      ;(PosterConfigDB.updateTemplateUsage as jest.Mock).mockResolvedValue(undefined)\n\n      await PosterConfigDB.updateTemplateUsage('template1')\n\n      expect(PosterConfigDB.updateTemplateUsage).toHaveBeenCalledWith('template1')\n    })\n  })\n\n  describe('getIndustryConfig', () => {\n    it('应该成功获取行业配置', async () => {\n      const mockConfig = {\n        id: '1',\n        industry: 'tech',\n        name: 'Technology',\n        description: 'Tech industry config',\n        recommendedStyles: [],\n        recommendedPalettes: [],\n        brandGuidelines: [],\n      }\n\n      ;(PosterConfigDB.getIndustryConfig as jest.Mock).mockResolvedValue(mockConfig)\n\n      const result = await PosterConfigDB.getIndustryConfig('tech')\n\n      expect(PosterConfigDB.getIndustryConfig).toHaveBeenCalledWith('tech')\n      expect(result).toEqual(mockConfig)\n    })\n\n    it('应该处理获取行业配置失败的情况', async () => {\n      ;(PosterConfigDB.getIndustryConfig as jest.Mock).mockResolvedValue(null)\n\n      const result = await PosterConfigDB.getIndustryConfig('tech')\n\n      expect(result).toBeNull()\n    })\n  })\n})"],"version":3}