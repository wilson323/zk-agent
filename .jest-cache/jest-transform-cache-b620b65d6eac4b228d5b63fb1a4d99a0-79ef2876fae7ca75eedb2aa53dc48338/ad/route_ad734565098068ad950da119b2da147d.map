{"version":3,"names":["cov_2hjvl273c9","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","connection_1","exports","GET","createApiRoute","RouteConfigs","publicGet","req","params","validatedBody","validatedQuery","user","requestId","healthCheck","checkDatabaseConnection","success","ApiResponseWrapper","message","latency","timestamp","Date","toISOString","error","status"],"sources":["E:\\zk-agent\\app\\api\\db\\health\\route.ts"],"sourcesContent":["/**\n * @file db\\health\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { checkDatabaseConnection } from \"@/lib/database/connection\"\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const healthCheck = await checkDatabaseConnection()\n      \n      if (healthCheck.success) {\n        return ApiResponseWrapper.success({\n          success: true,\n          message: healthCheck.message,\n          latency: healthCheck.latency,\n          timestamp: new Date().toISOString(),\n        })\n      } else {\n        return ApiResponseWrapper.error(\n          {\n            success: false,\n            message: healthCheck.message,\n            timestamp: new Date().toISOString(),\n          },\n          { status: 503 }\n        )\n      }\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        {\n          success: false,\n          message: 'Database health check failed',\n          timestamp: new Date().toISOString(),\n        },\n        { status: 500 }\n      )\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}