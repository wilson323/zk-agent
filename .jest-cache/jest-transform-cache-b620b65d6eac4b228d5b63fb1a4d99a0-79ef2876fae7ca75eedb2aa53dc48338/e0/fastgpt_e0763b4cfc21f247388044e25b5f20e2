6dae7d8827f0b19d1bab17da1a4e65aa
"use strict";

/* istanbul ignore next */
function cov_2le3ngdd9p() {
  var path = "E:\\zk-agent\\lib\\api\\fastgpt.ts";
  var hash = "06d1b373f4a759db6ca2d776b3641d9659fa48e9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\api\\fastgpt.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 105
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 42
        }
      },
      "5": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "7": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 40
        }
      },
      "8": {
        start: {
          line: 12,
          column: 16
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "9": {
        start: {
          line: 13,
          column: 18
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "10": {
        start: {
          line: 15,
          column: 15
        },
        end: {
          line: 15,
          column: 30
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 23,
          column: 10
        }
      },
      "12": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 29
        }
      },
      "13": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 37
        }
      },
      "14": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "15": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "16": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 43
        }
      },
      "17": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 44
        }
      },
      "18": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "19": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "20": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "21": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "22": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 34
        }
      },
      "23": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 47,
          column: 17
        }
      },
      "24": {
        start: {
          line: 44,
          column: 34
        },
        end: {
          line: 44,
          column: 117
        }
      },
      "25": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 79
        }
      },
      "26": {
        start: {
          line: 45,
          column: 51
        },
        end: {
          line: 45,
          column: 77
        }
      },
      "27": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 107
        }
      },
      "28": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 24
        }
      },
      "29": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 39
        }
      },
      "30": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "31": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "32": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 62,
          column: 19
        }
      },
      "33": {
        start: {
          line: 63,
          column: 33
        },
        end: {
          line: 73,
          column: 18
        }
      },
      "34": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 85,
          column: 17
        }
      },
      "35": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "36": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 77,
          column: 58
        }
      },
      "37": {
        start: {
          line: 81,
          column: 37
        },
        end: {
          line: 81,
          column: 58
        }
      },
      "38": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 114
        }
      },
      "39": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 155
        }
      },
      "40": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 88,
          column: 17
        }
      },
      "41": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 87,
          column: 41
        }
      },
      "42": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 47
        }
      },
      "43": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 68
        }
      },
      "44": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 28
        }
      },
      "45": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 44
        }
      },
      "46": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "47": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 105,
          column: 15
        }
      },
      "48": {
        start: {
          line: 106,
          column: 29
        },
        end: {
          line: 116,
          column: 14
        }
      },
      "49": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "50": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 126,
          column: 17
        }
      },
      "51": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 54
        }
      },
      "52": {
        start: {
          line: 124,
          column: 33
        },
        end: {
          line: 124,
          column: 54
        }
      },
      "53": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 110
        }
      },
      "54": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 151
        }
      },
      "55": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 41
        }
      },
      "56": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 70
        }
      },
      "57": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 24
        }
      },
      "58": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 65
        }
      },
      "59": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "60": {
        start: {
          line: 140,
          column: 29
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "61": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "62": {
        start: {
          line: 149,
          column: 34
        },
        end: {
          line: 149,
          column: 55
        }
      },
      "63": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 151
        }
      },
      "64": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 41
        }
      },
      "65": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 155,
          column: 74
        }
      },
      "66": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 156,
          column: 24
        }
      },
      "67": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 73
        }
      },
      "68": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "69": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "70": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "71": {
        start: {
          line: 172,
          column: 34
        },
        end: {
          line: 172,
          column: 55
        }
      },
      "72": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 151
        }
      },
      "73": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 41
        }
      },
      "74": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 77
        }
      },
      "75": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "76": {
        start: {
          line: 183,
          column: 0
        },
        end: {
          line: 183,
          column: 38
        }
      },
      "77": {
        start: {
          line: 185,
          column: 0
        },
        end: {
          line: 186,
          column: 76
        }
      },
      "78": {
        start: {
          line: 188,
          column: 18
        },
        end: {
          line: 193,
          column: 2
        }
      },
      "79": {
        start: {
          line: 195,
          column: 0
        },
        end: {
          line: 200,
          column: 3
        }
      },
      "80": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 196,
          column: 71
        }
      },
      "81": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 197,
          column: 18
        }
      },
      "82": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 199,
          column: 33
        }
      },
      "83": {
        start: {
          line: 202,
          column: 0
        },
        end: {
          line: 218,
          column: 3
        }
      },
      "84": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 203,
          column: 77
        }
      },
      "85": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 204,
          column: 20
        }
      },
      "86": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 206,
          column: 58
        }
      },
      "87": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "88": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 101
        }
      },
      "89": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "90": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 68
        }
      },
      "91": {
        start: {
          line: 214,
          column: 9
        },
        end: {
          line: 216,
          column: 5
        }
      },
      "92": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 52
        }
      },
      "93": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 217,
          column: 33
        }
      },
      "94": {
        start: {
          line: 220,
          column: 19
        },
        end: {
          line: 242,
          column: 1
        }
      },
      "95": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 222,
          column: 52
        }
      },
      "96": {
        start: {
          line: 223,
          column: 25
        },
        end: {
          line: 223,
          column: 91
        }
      },
      "97": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 240,
          column: 5
        }
      },
      "98": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "99": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 36
        }
      },
      "100": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "101": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 38
        }
      },
      "102": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "103": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 58
        }
      },
      "104": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "105": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 72
        }
      },
      "106": {
        start: {
          line: 241,
          column: 4
        },
        end: {
          line: 241,
          column: 16
        }
      },
      "107": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 33
        }
      },
      "108": {
        start: {
          line: 245,
          column: 0
        },
        end: {
          line: 249,
          column: 2
        }
      },
      "109": {
        start: {
          line: 246,
          column: 23
        },
        end: {
          line: 246,
          column: 38
        }
      },
      "110": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 247,
          column: 81
        }
      },
      "111": {
        start: {
          line: 248,
          column: 4
        },
        end: {
          line: 248,
          column: 54
        }
      },
      "112": {
        start: {
          line: 250,
          column: 21
        },
        end: {
          line: 250,
          column: 35
        }
      },
      "113": {
        start: {
          line: 251,
          column: 0
        },
        end: {
          line: 255,
          column: 2
        }
      },
      "114": {
        start: {
          line: 252,
          column: 23
        },
        end: {
          line: 252,
          column: 38
        }
      },
      "115": {
        start: {
          line: 253,
          column: 4
        },
        end: {
          line: 253,
          column: 82
        }
      },
      "116": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 254,
          column: 61
        }
      },
      "117": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 33
        }
      },
      "118": {
        start: {
          line: 257,
          column: 0
        },
        end: {
          line: 261,
          column: 2
        }
      },
      "119": {
        start: {
          line: 258,
          column: 23
        },
        end: {
          line: 258,
          column: 38
        }
      },
      "120": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 259,
          column: 81
        }
      },
      "121": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 260,
          column: 60
        }
      },
      "122": {
        start: {
          line: 262,
          column: 23
        },
        end: {
          line: 262,
          column: 39
        }
      },
      "123": {
        start: {
          line: 263,
          column: 0
        },
        end: {
          line: 267,
          column: 2
        }
      },
      "124": {
        start: {
          line: 264,
          column: 23
        },
        end: {
          line: 264,
          column: 38
        }
      },
      "125": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 265,
          column: 84
        }
      },
      "126": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 266,
          column: 57
        }
      },
      "127": {
        start: {
          line: 269,
          column: 24
        },
        end: {
          line: 271,
          column: 1
        }
      },
      "128": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 270,
          column: 96
        }
      },
      "129": {
        start: {
          line: 272,
          column: 0
        },
        end: {
          line: 272,
          column: 42
        }
      },
      "130": {
        start: {
          line: 274,
          column: 22
        },
        end: {
          line: 297,
          column: 1
        }
      },
      "131": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 296,
          column: 5
        }
      },
      "132": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 277,
          column: 82
        }
      },
      "133": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "134": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "135": {
        start: {
          line: 280,
          column: 31
        },
        end: {
          line: 280,
          column: 53
        }
      },
      "136": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 285,
          column: 17
        }
      },
      "137": {
        start: {
          line: 283,
          column: 20
        },
        end: {
          line: 283,
          column: 131
        }
      },
      "138": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 284,
          column: 32
        }
      },
      "139": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 68
        }
      },
      "140": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 21
        }
      },
      "141": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 65
        }
      },
      "142": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 21
        }
      },
      "143": {
        start: {
          line: 298,
          column: 0
        },
        end: {
          line: 298,
          column: 38
        }
      },
      "144": {
        start: {
          line: 300,
          column: 21
        },
        end: {
          line: 366,
          column: 1
        }
      },
      "145": {
        start: {
          line: 302,
          column: 21
        },
        end: {
          line: 302,
          column: 22
        }
      },
      "146": {
        start: {
          line: 304,
          column: 4
        },
        end: {
          line: 329,
          column: 5
        }
      },
      "147": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "148": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 65
        }
      },
      "149": {
        start: {
          line: 308,
          column: 35
        },
        end: {
          line: 308,
          column: 61
        }
      },
      "150": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "151": {
        start: {
          line: 311,
          column: 36
        },
        end: {
          line: 311,
          column: 94
        }
      },
      "152": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 93
        }
      },
      "153": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "154": {
        start: {
          line: 315,
          column: 31
        },
        end: {
          line: 315,
          column: 48
        }
      },
      "155": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 317,
          column: 79
        }
      },
      "156": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 318,
          column: 30
        }
      },
      "157": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 60
        }
      },
      "158": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 72
        }
      },
      "159": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 327,
          column: 35
        }
      },
      "160": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 337,
          column: 5
        }
      },
      "161": {
        start: {
          line: 332,
          column: 8
        },
        end: {
          line: 332,
          column: 33
        }
      },
      "162": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 335,
          column: 26
        }
      },
      "163": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 67
        }
      },
      "164": {
        start: {
          line: 339,
          column: 4
        },
        end: {
          line: 364,
          column: 5
        }
      },
      "165": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "166": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 74
        }
      },
      "167": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 89
        }
      },
      "168": {
        start: {
          line: 343,
          column: 43
        },
        end: {
          line: 343,
          column: 87
        }
      },
      "169": {
        start: {
          line: 345,
          column: 35
        },
        end: {
          line: 345,
          column: 61
        }
      },
      "170": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 350,
          column: 13
        }
      },
      "171": {
        start: {
          line: 348,
          column: 36
        },
        end: {
          line: 348,
          column: 94
        }
      },
      "172": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 349,
          column: 93
        }
      },
      "173": {
        start: {
          line: 351,
          column: 12
        },
        end: {
          line: 357,
          column: 13
        }
      },
      "174": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 41
        }
      },
      "175": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 60
        }
      },
      "176": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 360,
          column: 30
        }
      },
      "177": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 25
        }
      },
      "178": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 90
        }
      },
      "179": {
        start: {
          line: 365,
          column: 4
        },
        end: {
          line: 365,
          column: 20
        }
      },
      "180": {
        start: {
          line: 368,
          column: 18
        },
        end: {
          line: 394,
          column: 1
        }
      },
      "181": {
        start: {
          line: 369,
          column: 4
        },
        end: {
          line: 393,
          column: 5
        }
      },
      "182": {
        start: {
          line: 370,
          column: 25
        },
        end: {
          line: 370,
          column: 50
        }
      },
      "183": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 376,
          column: 9
        }
      },
      "184": {
        start: {
          line: 373,
          column: 30
        },
        end: {
          line: 373,
          column: 51
        }
      },
      "185": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 105
        }
      },
      "186": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 106
        }
      },
      "187": {
        start: {
          line: 378,
          column: 28
        },
        end: {
          line: 378,
          column: 64
        }
      },
      "188": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 388,
          column: 9
        }
      },
      "189": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 66
        }
      },
      "190": {
        start: {
          line: 385,
          column: 25
        },
        end: {
          line: 385,
          column: 46
        }
      },
      "191": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 386,
          column: 117
        }
      },
      "192": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 387,
          column: 82
        }
      },
      "193": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 391,
          column: 54
        }
      },
      "194": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 392,
          column: 99
        }
      },
      "195": {
        start: {
          line: 396,
          column: 19
        },
        end: {
          line: 813,
          column: 1
        }
      },
      "196": {
        start: {
          line: 401,
          column: 34
        },
        end: {
          line: 401,
          column: 81
        }
      },
      "197": {
        start: {
          line: 403,
          column: 33
        },
        end: {
          line: 403,
          column: 117
        }
      },
      "198": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 54
        }
      },
      "199": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 80
        }
      },
      "200": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 69
        }
      },
      "201": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 84
        }
      },
      "202": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 433,
          column: 11
        }
      },
      "203": {
        start: {
          line: 422,
          column: 32
        },
        end: {
          line: 422,
          column: 47
        }
      },
      "204": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "205": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 425,
          column: 76
        }
      },
      "206": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 101
        }
      },
      "207": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 91
        }
      },
      "208": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 585,
          column: 9
        }
      },
      "209": {
        start: {
          line: 439,
          column: 28
        },
        end: {
          line: 439,
          column: 54
        }
      },
      "210": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "211": {
        start: {
          line: 441,
          column: 16
        },
        end: {
          line: 445,
          column: 18
        }
      },
      "212": {
        start: {
          line: 448,
          column: 31
        },
        end: {
          line: 448,
          column: 52
        }
      },
      "213": {
        start: {
          line: 449,
          column: 30
        },
        end: {
          line: 449,
          column: 108
        }
      },
      "214": {
        start: {
          line: 449,
          column: 47
        },
        end: {
          line: 449,
          column: 65
        }
      },
      "215": {
        start: {
          line: 451,
          column: 31
        },
        end: {
          line: 451,
          column: 57
        }
      },
      "216": {
        start: {
          line: 452,
          column: 32
        },
        end: {
          line: 452,
          column: 90
        }
      },
      "217": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 456,
          column: 13
        }
      },
      "218": {
        start: {
          line: 455,
          column: 16
        },
        end: {
          line: 455,
          column: 93
        }
      },
      "219": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 505,
          column: 13
        }
      },
      "220": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 100
        }
      },
      "221": {
        start: {
          line: 460,
          column: 33
        },
        end: {
          line: 463,
          column: 18
        }
      },
      "222": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 40
        }
      },
      "223": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 468,
          column: 17
        }
      },
      "224": {
        start: {
          line: 467,
          column: 20
        },
        end: {
          line: 467,
          column: 60
        }
      },
      "225": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 72
        }
      },
      "226": {
        start: {
          line: 473,
          column: 16
        },
        end: {
          line: 473,
          column: 97
        }
      },
      "227": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 504,
          column: 17
        }
      },
      "228": {
        start: {
          line: 475,
          column: 41
        },
        end: {
          line: 478,
          column: 22
        }
      },
      "229": {
        start: {
          line: 479,
          column: 20
        },
        end: {
          line: 479,
          column: 44
        }
      },
      "230": {
        start: {
          line: 481,
          column: 20
        },
        end: {
          line: 483,
          column: 21
        }
      },
      "231": {
        start: {
          line: 482,
          column: 24
        },
        end: {
          line: 482,
          column: 64
        }
      },
      "232": {
        start: {
          line: 484,
          column: 20
        },
        end: {
          line: 484,
          column: 80
        }
      },
      "233": {
        start: {
          line: 487,
          column: 20
        },
        end: {
          line: 487,
          column: 44
        }
      },
      "234": {
        start: {
          line: 489,
          column: 20
        },
        end: {
          line: 491,
          column: 21
        }
      },
      "235": {
        start: {
          line: 490,
          column: 24
        },
        end: {
          line: 490,
          column: 64
        }
      },
      "236": {
        start: {
          line: 493,
          column: 20
        },
        end: {
          line: 502,
          column: 21
        }
      },
      "237": {
        start: {
          line: 494,
          column: 24
        },
        end: {
          line: 494,
          column: 92
        }
      },
      "238": {
        start: {
          line: 495,
          column: 24
        },
        end: {
          line: 501,
          column: 25
        }
      },
      "239": {
        start: {
          line: 496,
          column: 28
        },
        end: {
          line: 496,
          column: 73
        }
      },
      "240": {
        start: {
          line: 499,
          column: 28
        },
        end: {
          line: 499,
          column: 93
        }
      },
      "241": {
        start: {
          line: 500,
          column: 28
        },
        end: {
          line: 500,
          column: 44
        }
      },
      "242": {
        start: {
          line: 503,
          column: 20
        },
        end: {
          line: 503,
          column: 36
        }
      },
      "243": {
        start: {
          line: 508,
          column: 12
        },
        end: {
          line: 508,
          column: 70
        }
      },
      "244": {
        start: {
          line: 510,
          column: 31
        },
        end: {
          line: 510,
          column: 63
        }
      },
      "245": {
        start: {
          line: 511,
          column: 30
        },
        end: {
          line: 511,
          column: 31
        }
      },
      "246": {
        start: {
          line: 512,
          column: 34
        },
        end: {
          line: 512,
          column: 36
        }
      },
      "247": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "248": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 64
        }
      },
      "249": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 34
        }
      },
      "250": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 81
        }
      },
      "251": {
        start: {
          line: 520,
          column: 17
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "252": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 521,
          column: 70
        }
      },
      "253": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 522,
          column: 32
        }
      },
      "254": {
        start: {
          line: 523,
          column: 16
        },
        end: {
          line: 523,
          column: 84
        }
      },
      "255": {
        start: {
          line: 526,
          column: 17
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "256": {
        start: {
          line: 527,
          column: 16
        },
        end: {
          line: 527,
          column: 52
        }
      },
      "257": {
        start: {
          line: 528,
          column: 16
        },
        end: {
          line: 528,
          column: 112
        }
      },
      "258": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 536,
          column: 17
        }
      },
      "259": {
        start: {
          line: 530,
          column: 20
        },
        end: {
          line: 535,
          column: 21
        }
      },
      "260": {
        start: {
          line: 531,
          column: 24
        },
        end: {
          line: 531,
          column: 67
        }
      },
      "261": {
        start: {
          line: 534,
          column: 24
        },
        end: {
          line: 534,
          column: 83
        }
      },
      "262": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 549,
          column: 17
        }
      },
      "263": {
        start: {
          line: 539,
          column: 20
        },
        end: {
          line: 539,
          column: 97
        }
      },
      "264": {
        start: {
          line: 540,
          column: 20
        },
        end: {
          line: 540,
          column: 89
        }
      },
      "265": {
        start: {
          line: 542,
          column: 21
        },
        end: {
          line: 549,
          column: 17
        }
      },
      "266": {
        start: {
          line: 543,
          column: 20
        },
        end: {
          line: 543,
          column: 124
        }
      },
      "267": {
        start: {
          line: 544,
          column: 20
        },
        end: {
          line: 544,
          column: 93
        }
      },
      "268": {
        start: {
          line: 546,
          column: 21
        },
        end: {
          line: 549,
          column: 17
        }
      },
      "269": {
        start: {
          line: 547,
          column: 20
        },
        end: {
          line: 547,
          column: 102
        }
      },
      "270": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 548,
          column: 85
        }
      },
      "271": {
        start: {
          line: 552,
          column: 17
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "272": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 557,
          column: 80
        }
      },
      "273": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 558,
          column: 81
        }
      },
      "274": {
        start: {
          line: 561,
          column: 17
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "275": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 45
        }
      },
      "276": {
        start: {
          line: 564,
          column: 17
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "277": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 565,
          column: 45
        }
      },
      "278": {
        start: {
          line: 568,
          column: 12
        },
        end: {
          line: 577,
          column: 13
        }
      },
      "279": {
        start: {
          line: 569,
          column: 28
        },
        end: {
          line: 569,
          column: 54
        }
      },
      "280": {
        start: {
          line: 570,
          column: 16
        },
        end: {
          line: 573,
          column: 17
        }
      },
      "281": {
        start: {
          line: 571,
          column: 20
        },
        end: {
          line: 571,
          column: 131
        }
      },
      "282": {
        start: {
          line: 572,
          column: 20
        },
        end: {
          line: 572,
          column: 85
        }
      },
      "283": {
        start: {
          line: 578,
          column: 12
        },
        end: {
          line: 584,
          column: 14
        }
      },
      "284": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 638,
          column: 9
        }
      },
      "285": {
        start: {
          line: 591,
          column: 27
        },
        end: {
          line: 591,
          column: 60
        }
      },
      "286": {
        start: {
          line: 592,
          column: 12
        },
        end: {
          line: 594,
          column: 13
        }
      },
      "287": {
        start: {
          line: 593,
          column: 16
        },
        end: {
          line: 593,
          column: 84
        }
      },
      "288": {
        start: {
          line: 595,
          column: 12
        },
        end: {
          line: 595,
          column: 31
        }
      },
      "289": {
        start: {
          line: 598,
          column: 12
        },
        end: {
          line: 598,
          column: 101
        }
      },
      "290": {
        start: {
          line: 600,
          column: 31
        },
        end: {
          line: 600,
          column: 64
        }
      },
      "291": {
        start: {
          line: 601,
          column: 31
        },
        end: {
          line: 601,
          column: 33
        }
      },
      "292": {
        start: {
          line: 602,
          column: 12
        },
        end: {
          line: 633,
          column: 13
        }
      },
      "293": {
        start: {
          line: 603,
          column: 16
        },
        end: {
          line: 603,
          column: 76
        }
      },
      "294": {
        start: {
          line: 604,
          column: 16
        },
        end: {
          line: 614,
          column: 59
        }
      },
      "295": {
        start: {
          line: 616,
          column: 17
        },
        end: {
          line: 633,
          column: 13
        }
      },
      "296": {
        start: {
          line: 617,
          column: 16
        },
        end: {
          line: 617,
          column: 83
        }
      },
      "297": {
        start: {
          line: 618,
          column: 16
        },
        end: {
          line: 621,
          column: 17
        }
      },
      "298": {
        start: {
          line: 619,
          column: 20
        },
        end: {
          line: 620,
          column: 124
        }
      },
      "299": {
        start: {
          line: 623,
          column: 17
        },
        end: {
          line: 633,
          column: 13
        }
      },
      "300": {
        start: {
          line: 624,
          column: 16
        },
        end: {
          line: 624,
          column: 83
        }
      },
      "301": {
        start: {
          line: 625,
          column: 16
        },
        end: {
          line: 629,
          column: 44
        }
      },
      "302": {
        start: {
          line: 632,
          column: 16
        },
        end: {
          line: 632,
          column: 72
        }
      },
      "303": {
        start: {
          line: 634,
          column: 34
        },
        end: {
          line: 634,
          column: 57
        }
      },
      "304": {
        start: {
          line: 636,
          column: 12
        },
        end: {
          line: 636,
          column: 49
        }
      },
      "305": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 637,
          column: 32
        }
      },
      "306": {
        start: {
          line: 642,
          column: 8
        },
        end: {
          line: 652,
          column: 9
        }
      },
      "307": {
        start: {
          line: 643,
          column: 27
        },
        end: {
          line: 643,
          column: 68
        }
      },
      "308": {
        start: {
          line: 644,
          column: 12
        },
        end: {
          line: 646,
          column: 13
        }
      },
      "309": {
        start: {
          line: 645,
          column: 16
        },
        end: {
          line: 645,
          column: 85
        }
      },
      "310": {
        start: {
          line: 647,
          column: 12
        },
        end: {
          line: 647,
          column: 31
        }
      },
      "311": {
        start: {
          line: 650,
          column: 12
        },
        end: {
          line: 650,
          column: 70
        }
      },
      "312": {
        start: {
          line: 651,
          column: 12
        },
        end: {
          line: 651,
          column: 24
        }
      },
      "313": {
        start: {
          line: 656,
          column: 8
        },
        end: {
          line: 685,
          column: 9
        }
      },
      "314": {
        start: {
          line: 658,
          column: 34
        },
        end: {
          line: 658,
          column: 48
        }
      },
      "315": {
        start: {
          line: 659,
          column: 12
        },
        end: {
          line: 665,
          column: 13
        }
      },
      "316": {
        start: {
          line: 660,
          column: 16
        },
        end: {
          line: 663,
          column: 17
        }
      },
      "317": {
        start: {
          line: 661,
          column: 84
        },
        end: {
          line: 661,
          column: 104
        }
      },
      "318": {
        start: {
          line: 662,
          column: 20
        },
        end: {
          line: 662,
          column: 54
        }
      },
      "319": {
        start: {
          line: 664,
          column: 16
        },
        end: {
          line: 664,
          column: 45
        }
      },
      "320": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 669,
          column: 13
        }
      },
      "321": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 668,
          column: 53
        }
      },
      "322": {
        start: {
          line: 670,
          column: 27
        },
        end: {
          line: 676,
          column: 14
        }
      },
      "323": {
        start: {
          line: 677,
          column: 12
        },
        end: {
          line: 679,
          column: 13
        }
      },
      "324": {
        start: {
          line: 678,
          column: 16
        },
        end: {
          line: 678,
          column: 81
        }
      },
      "325": {
        start: {
          line: 680,
          column: 12
        },
        end: {
          line: 680,
          column: 31
        }
      },
      "326": {
        start: {
          line: 683,
          column: 12
        },
        end: {
          line: 683,
          column: 66
        }
      },
      "327": {
        start: {
          line: 684,
          column: 12
        },
        end: {
          line: 684,
          column: 24
        }
      },
      "328": {
        start: {
          line: 689,
          column: 8
        },
        end: {
          line: 718,
          column: 9
        }
      },
      "329": {
        start: {
          line: 691,
          column: 34
        },
        end: {
          line: 691,
          column: 48
        }
      },
      "330": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 698,
          column: 13
        }
      },
      "331": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 696,
          column: 17
        }
      },
      "332": {
        start: {
          line: 694,
          column: 84
        },
        end: {
          line: 694,
          column: 104
        }
      },
      "333": {
        start: {
          line: 695,
          column: 20
        },
        end: {
          line: 695,
          column: 54
        }
      },
      "334": {
        start: {
          line: 697,
          column: 16
        },
        end: {
          line: 697,
          column: 45
        }
      },
      "335": {
        start: {
          line: 700,
          column: 12
        },
        end: {
          line: 702,
          column: 13
        }
      },
      "336": {
        start: {
          line: 701,
          column: 16
        },
        end: {
          line: 701,
          column: 53
        }
      },
      "337": {
        start: {
          line: 703,
          column: 27
        },
        end: {
          line: 709,
          column: 14
        }
      },
      "338": {
        start: {
          line: 710,
          column: 12
        },
        end: {
          line: 712,
          column: 13
        }
      },
      "339": {
        start: {
          line: 711,
          column: 16
        },
        end: {
          line: 711,
          column: 81
        }
      },
      "340": {
        start: {
          line: 713,
          column: 12
        },
        end: {
          line: 713,
          column: 31
        }
      },
      "341": {
        start: {
          line: 716,
          column: 12
        },
        end: {
          line: 716,
          column: 66
        }
      },
      "342": {
        start: {
          line: 717,
          column: 12
        },
        end: {
          line: 717,
          column: 24
        }
      },
      "343": {
        start: {
          line: 722,
          column: 8
        },
        end: {
          line: 734,
          column: 9
        }
      },
      "344": {
        start: {
          line: 723,
          column: 27
        },
        end: {
          line: 725,
          column: 14
        }
      },
      "345": {
        start: {
          line: 726,
          column: 12
        },
        end: {
          line: 728,
          column: 13
        }
      },
      "346": {
        start: {
          line: 727,
          column: 16
        },
        end: {
          line: 727,
          column: 81
        }
      },
      "347": {
        start: {
          line: 729,
          column: 12
        },
        end: {
          line: 729,
          column: 31
        }
      },
      "348": {
        start: {
          line: 732,
          column: 12
        },
        end: {
          line: 732,
          column: 66
        }
      },
      "349": {
        start: {
          line: 733,
          column: 12
        },
        end: {
          line: 733,
          column: 24
        }
      },
      "350": {
        start: {
          line: 738,
          column: 8
        },
        end: {
          line: 748,
          column: 9
        }
      },
      "351": {
        start: {
          line: 739,
          column: 29
        },
        end: {
          line: 739,
          column: 110
        }
      },
      "352": {
        start: {
          line: 740,
          column: 12
        },
        end: {
          line: 743,
          column: 66
        }
      },
      "353": {
        start: {
          line: 741,
          column: 33
        },
        end: {
          line: 741,
          column: 63
        }
      },
      "354": {
        start: {
          line: 742,
          column: 16
        },
        end: {
          line: 742,
          column: 73
        }
      },
      "355": {
        start: {
          line: 746,
          column: 12
        },
        end: {
          line: 746,
          column: 63
        }
      },
      "356": {
        start: {
          line: 747,
          column: 12
        },
        end: {
          line: 747,
          column: 22
        }
      },
      "357": {
        start: {
          line: 752,
          column: 8
        },
        end: {
          line: 762,
          column: 9
        }
      },
      "358": {
        start: {
          line: 753,
          column: 29
        },
        end: {
          line: 753,
          column: 110
        }
      },
      "359": {
        start: {
          line: 754,
          column: 12
        },
        end: {
          line: 757,
          column: 66
        }
      },
      "360": {
        start: {
          line: 755,
          column: 33
        },
        end: {
          line: 755,
          column: 69
        }
      },
      "361": {
        start: {
          line: 756,
          column: 16
        },
        end: {
          line: 756,
          column: 73
        }
      },
      "362": {
        start: {
          line: 760,
          column: 12
        },
        end: {
          line: 760,
          column: 69
        }
      },
      "363": {
        start: {
          line: 761,
          column: 12
        },
        end: {
          line: 761,
          column: 22
        }
      },
      "364": {
        start: {
          line: 766,
          column: 8
        },
        end: {
          line: 776,
          column: 9
        }
      },
      "365": {
        start: {
          line: 767,
          column: 27
        },
        end: {
          line: 767,
          column: 71
        }
      },
      "366": {
        start: {
          line: 768,
          column: 12
        },
        end: {
          line: 770,
          column: 13
        }
      },
      "367": {
        start: {
          line: 769,
          column: 16
        },
        end: {
          line: 769,
          column: 85
        }
      },
      "368": {
        start: {
          line: 771,
          column: 12
        },
        end: {
          line: 771,
          column: 31
        }
      },
      "369": {
        start: {
          line: 774,
          column: 12
        },
        end: {
          line: 774,
          column: 70
        }
      },
      "370": {
        start: {
          line: 775,
          column: 12
        },
        end: {
          line: 775,
          column: 22
        }
      },
      "371": {
        start: {
          line: 780,
          column: 8
        },
        end: {
          line: 796,
          column: 9
        }
      },
      "372": {
        start: {
          line: 781,
          column: 27
        },
        end: {
          line: 787,
          column: 14
        }
      },
      "373": {
        start: {
          line: 788,
          column: 12
        },
        end: {
          line: 790,
          column: 13
        }
      },
      "374": {
        start: {
          line: 789,
          column: 16
        },
        end: {
          line: 789,
          column: 82
        }
      },
      "375": {
        start: {
          line: 791,
          column: 12
        },
        end: {
          line: 791,
          column: 31
        }
      },
      "376": {
        start: {
          line: 794,
          column: 12
        },
        end: {
          line: 794,
          column: 67
        }
      },
      "377": {
        start: {
          line: 795,
          column: 12
        },
        end: {
          line: 795,
          column: 24
        }
      },
      "378": {
        start: {
          line: 800,
          column: 8
        },
        end: {
          line: 811,
          column: 9
        }
      },
      "379": {
        start: {
          line: 802,
          column: 33
        },
        end: {
          line: 802,
          column: 103
        }
      },
      "380": {
        start: {
          line: 804,
          column: 31
        },
        end: {
          line: 804,
          column: 49
        }
      },
      "381": {
        start: {
          line: 805,
          column: 29
        },
        end: {
          line: 805,
          column: 47
        }
      },
      "382": {
        start: {
          line: 806,
          column: 12
        },
        end: {
          line: 806,
          column: 60
        }
      },
      "383": {
        start: {
          line: 809,
          column: 12
        },
        end: {
          line: 809,
          column: 69
        }
      },
      "384": {
        start: {
          line: 810,
          column: 12
        },
        end: {
          line: 810,
          column: 24
        }
      },
      "385": {
        start: {
          line: 816,
          column: 4
        },
        end: {
          line: 833,
          column: 5
        }
      },
      "386": {
        start: {
          line: 817,
          column: 25
        },
        end: {
          line: 823,
          column: 10
        }
      },
      "387": {
        start: {
          line: 824,
          column: 8
        },
        end: {
          line: 827,
          column: 9
        }
      },
      "388": {
        start: {
          line: 825,
          column: 30
        },
        end: {
          line: 825,
          column: 51
        }
      },
      "389": {
        start: {
          line: 826,
          column: 12
        },
        end: {
          line: 826,
          column: 84
        }
      },
      "390": {
        start: {
          line: 828,
          column: 8
        },
        end: {
          line: 828,
          column: 37
        }
      },
      "391": {
        start: {
          line: 831,
          column: 8
        },
        end: {
          line: 831,
          column: 59
        }
      },
      "392": {
        start: {
          line: 832,
          column: 8
        },
        end: {
          line: 832,
          column: 20
        }
      },
      "393": {
        start: {
          line: 837,
          column: 4
        },
        end: {
          line: 850,
          column: 5
        }
      },
      "394": {
        start: {
          line: 838,
          column: 25
        },
        end: {
          line: 844,
          column: 10
        }
      },
      "395": {
        start: {
          line: 845,
          column: 8
        },
        end: {
          line: 845,
          column: 37
        }
      },
      "396": {
        start: {
          line: 848,
          column: 8
        },
        end: {
          line: 848,
          column: 66
        }
      },
      "397": {
        start: {
          line: 849,
          column: 8
        },
        end: {
          line: 849,
          column: 20
        }
      },
      "398": {
        start: {
          line: 854,
          column: 4
        },
        end: {
          line: 867,
          column: 5
        }
      },
      "399": {
        start: {
          line: 855,
          column: 25
        },
        end: {
          line: 861,
          column: 10
        }
      },
      "400": {
        start: {
          line: 862,
          column: 8
        },
        end: {
          line: 862,
          column: 37
        }
      },
      "401": {
        start: {
          line: 865,
          column: 8
        },
        end: {
          line: 865,
          column: 65
        }
      },
      "402": {
        start: {
          line: 866,
          column: 8
        },
        end: {
          line: 866,
          column: 20
        }
      },
      "403": {
        start: {
          line: 871,
          column: 4
        },
        end: {
          line: 871,
          column: 28
        }
      },
      "404": {
        start: {
          line: 874,
          column: 0
        },
        end: {
          line: 874,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 38
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 38
          },
          end: {
            line: 45,
            column: 39
          }
        },
        loc: {
          start: {
            line: 45,
            column: 51
          },
          end: {
            line: 45,
            column: 77
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 23
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 53
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 56,
            column: 37
          },
          end: {
            line: 56,
            column: 38
          }
        },
        loc: {
          start: {
            line: 56,
            column: 49
          },
          end: {
            line: 95,
            column: 9
          }
        },
        line: 56
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 27
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 98
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 31
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 137
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 33
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 160
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 195,
            column: 35
          },
          end: {
            line: 195,
            column: 36
          }
        },
        loc: {
          start: {
            line: 195,
            column: 47
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 195
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 198,
            column: 3
          },
          end: {
            line: 198,
            column: 4
          }
        },
        loc: {
          start: {
            line: 198,
            column: 14
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 198
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 202,
            column: 36
          },
          end: {
            line: 202,
            column: 37
          }
        },
        loc: {
          start: {
            line: 202,
            column: 50
          },
          end: {
            line: 205,
            column: 1
          }
        },
        line: 202
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 205,
            column: 3
          },
          end: {
            line: 205,
            column: 4
          }
        },
        loc: {
          start: {
            line: 205,
            column: 14
          },
          end: {
            line: 218,
            column: 1
          }
        },
        line: 205
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 220,
            column: 19
          },
          end: {
            line: 220,
            column: 20
          }
        },
        loc: {
          start: {
            line: 220,
            column: 29
          },
          end: {
            line: 242,
            column: 1
          }
        },
        line: 220
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 245,
            column: 17
          }
        },
        loc: {
          start: {
            line: 245,
            column: 39
          },
          end: {
            line: 249,
            column: 1
          }
        },
        line: 245
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 251,
            column: 17
          },
          end: {
            line: 251,
            column: 18
          }
        },
        loc: {
          start: {
            line: 251,
            column: 46
          },
          end: {
            line: 255,
            column: 1
          }
        },
        line: 251
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        },
        loc: {
          start: {
            line: 257,
            column: 45
          },
          end: {
            line: 261,
            column: 1
          }
        },
        line: 257
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 263,
            column: 19
          },
          end: {
            line: 263,
            column: 20
          }
        },
        loc: {
          start: {
            line: 263,
            column: 42
          },
          end: {
            line: 267,
            column: 1
          }
        },
        line: 263
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 269,
            column: 24
          },
          end: {
            line: 269,
            column: 25
          }
        },
        loc: {
          start: {
            line: 269,
            column: 30
          },
          end: {
            line: 271,
            column: 1
          }
        },
        line: 269
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 274,
            column: 22
          },
          end: {
            line: 274,
            column: 23
          }
        },
        loc: {
          start: {
            line: 274,
            column: 34
          },
          end: {
            line: 297,
            column: 1
          }
        },
        line: 274
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 300,
            column: 21
          },
          end: {
            line: 300,
            column: 22
          }
        },
        loc: {
          start: {
            line: 300,
            column: 113
          },
          end: {
            line: 366,
            column: 1
          }
        },
        line: 300
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 343,
            column: 30
          },
          end: {
            line: 343,
            column: 31
          }
        },
        loc: {
          start: {
            line: 343,
            column: 43
          },
          end: {
            line: 343,
            column: 87
          }
        },
        line: 343
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 368,
            column: 18
          },
          end: {
            line: 368,
            column: 19
          }
        },
        loc: {
          start: {
            line: 368,
            column: 47
          },
          end: {
            line: 394,
            column: 1
          }
        },
        line: 368
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 398,
            column: 18
          },
          end: {
            line: 398,
            column: 19
          }
        },
        loc: {
          start: {
            line: 398,
            column: 56
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 398
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 422,
            column: 18
          },
          end: {
            line: 422,
            column: 19
          }
        },
        loc: {
          start: {
            line: 422,
            column: 32
          },
          end: {
            line: 422,
            column: 47
          }
        },
        line: 422
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 423,
            column: 18
          },
          end: {
            line: 423,
            column: 19
          }
        },
        loc: {
          start: {
            line: 423,
            column: 30
          },
          end: {
            line: 430,
            column: 9
          }
        },
        line: 423
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 431,
            column: 19
          },
          end: {
            line: 431,
            column: 20
          }
        },
        loc: {
          start: {
            line: 431,
            column: 30
          },
          end: {
            line: 433,
            column: 9
          }
        },
        line: 431
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 436,
            column: 20
          },
          end: {
            line: 436,
            column: 21
          }
        },
        loc: {
          start: {
            line: 436,
            column: 47
          },
          end: {
            line: 586,
            column: 5
          }
        },
        line: 436
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 449,
            column: 41
          },
          end: {
            line: 449,
            column: 42
          }
        },
        loc: {
          start: {
            line: 449,
            column: 47
          },
          end: {
            line: 449,
            column: 65
          }
        },
        line: 449
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 588,
            column: 21
          },
          end: {
            line: 588,
            column: 22
          }
        },
        loc: {
          start: {
            line: 588,
            column: 33
          },
          end: {
            line: 639,
            column: 5
          }
        },
        line: 588
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 641,
            column: 26
          },
          end: {
            line: 641,
            column: 27
          }
        },
        loc: {
          start: {
            line: 641,
            column: 43
          },
          end: {
            line: 653,
            column: 5
          }
        },
        line: 641
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 655,
            column: 23
          },
          end: {
            line: 655,
            column: 24
          }
        },
        loc: {
          start: {
            line: 655,
            column: 42
          },
          end: {
            line: 686,
            column: 5
          }
        },
        line: 655
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 688,
            column: 23
          },
          end: {
            line: 688,
            column: 24
          }
        },
        loc: {
          start: {
            line: 688,
            column: 49
          },
          end: {
            line: 719,
            column: 5
          }
        },
        line: 688
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 721,
            column: 23
          },
          end: {
            line: 721,
            column: 24
          }
        },
        loc: {
          start: {
            line: 721,
            column: 40
          },
          end: {
            line: 735,
            column: 5
          }
        },
        line: 721
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 737,
            column: 15
          },
          end: {
            line: 737,
            column: 16
          }
        },
        loc: {
          start: {
            line: 737,
            column: 27
          },
          end: {
            line: 749,
            column: 5
          }
        },
        line: 737
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 740,
            column: 38
          },
          end: {
            line: 740,
            column: 39
          }
        },
        loc: {
          start: {
            line: 740,
            column: 50
          },
          end: {
            line: 743,
            column: 13
          }
        },
        line: 740
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 751,
            column: 20
          },
          end: {
            line: 751,
            column: 21
          }
        },
        loc: {
          start: {
            line: 751,
            column: 32
          },
          end: {
            line: 763,
            column: 5
          }
        },
        line: 751
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 754,
            column: 38
          },
          end: {
            line: 754,
            column: 39
          }
        },
        loc: {
          start: {
            line: 754,
            column: 50
          },
          end: {
            line: 757,
            column: 13
          }
        },
        line: 754
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 765,
            column: 21
          },
          end: {
            line: 765,
            column: 22
          }
        },
        loc: {
          start: {
            line: 765,
            column: 38
          },
          end: {
            line: 777,
            column: 5
          }
        },
        line: 765
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 779,
            column: 23
          },
          end: {
            line: 779,
            column: 24
          }
        },
        loc: {
          start: {
            line: 779,
            column: 47
          },
          end: {
            line: 797,
            column: 5
          }
        },
        line: 779
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 799,
            column: 25
          },
          end: {
            line: 799,
            column: 26
          }
        },
        loc: {
          start: {
            line: 799,
            column: 64
          },
          end: {
            line: 812,
            column: 5
          }
        },
        line: 799
      },
      "42": {
        name: "chatWithFastGPT",
        decl: {
          start: {
            line: 815,
            column: 15
          },
          end: {
            line: 815,
            column: 30
          }
        },
        loc: {
          start: {
            line: 815,
            column: 39
          },
          end: {
            line: 834,
            column: 1
          }
        },
        line: 815
      },
      "43": {
        name: "testFastGPTConnection",
        decl: {
          start: {
            line: 836,
            column: 15
          },
          end: {
            line: 836,
            column: 36
          }
        },
        loc: {
          start: {
            line: 836,
            column: 56
          },
          end: {
            line: 851,
            column: 1
          }
        },
        line: 836
      },
      "44": {
        name: "initFastGPTChat",
        decl: {
          start: {
            line: 853,
            column: 15
          },
          end: {
            line: 853,
            column: 30
          }
        },
        loc: {
          start: {
            line: 853,
            column: 39
          },
          end: {
            line: 868,
            column: 1
          }
        },
        line: 853
      },
      "45": {
        name: "generateChatId",
        decl: {
          start: {
            line: 870,
            column: 9
          },
          end: {
            line: 870,
            column: 23
          }
        },
        loc: {
          start: {
            line: 870,
            column: 26
          },
          end: {
            line: 872,
            column: 1
          }
        },
        line: 870
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 33
          },
          end: {
            line: 18,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 44
          },
          end: {
            line: 18,
            column: 48
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 25,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 23
          },
          end: {
            line: 25,
            column: 30
          }
        }, {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 25,
            column: 36
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "7": {
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "8": {
        loc: {
          start: {
            line: 84,
            column: 58
          },
          end: {
            line: 84,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 58
          },
          end: {
            line: 84,
            column: 82
          }
        }, {
          start: {
            line: 84,
            column: 86
          },
          end: {
            line: 84,
            column: 105
          }
        }],
        line: 84
      },
      "9": {
        loc: {
          start: {
            line: 84,
            column: 110
          },
          end: {
            line: 84,
            column: 150
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 110
          },
          end: {
            line: 84,
            column: 131
          }
        }, {
          start: {
            line: 84,
            column: 135
          },
          end: {
            line: 84,
            column: 150
          }
        }],
        line: 84
      },
      "10": {
        loc: {
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 88,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 88,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "11": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "12": {
        loc: {
          start: {
            line: 127,
            column: 54
          },
          end: {
            line: 127,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 54
          },
          end: {
            line: 127,
            column: 78
          }
        }, {
          start: {
            line: 127,
            column: 82
          },
          end: {
            line: 127,
            column: 101
          }
        }],
        line: 127
      },
      "13": {
        loc: {
          start: {
            line: 127,
            column: 106
          },
          end: {
            line: 127,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 106
          },
          end: {
            line: 127,
            column: 127
          }
        }, {
          start: {
            line: 127,
            column: 131
          },
          end: {
            line: 127,
            column: 146
          }
        }],
        line: 127
      },
      "14": {
        loc: {
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 54
          },
          end: {
            line: 150,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 54
          },
          end: {
            line: 150,
            column: 78
          }
        }, {
          start: {
            line: 150,
            column: 82
          },
          end: {
            line: 150,
            column: 101
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 150,
            column: 106
          },
          end: {
            line: 150,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 106
          },
          end: {
            line: 150,
            column: 127
          }
        }, {
          start: {
            line: 150,
            column: 131
          },
          end: {
            line: 150,
            column: 146
          }
        }],
        line: 150
      },
      "17": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "18": {
        loc: {
          start: {
            line: 173,
            column: 54
          },
          end: {
            line: 173,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 54
          },
          end: {
            line: 173,
            column: 78
          }
        }, {
          start: {
            line: 173,
            column: 82
          },
          end: {
            line: 173,
            column: 101
          }
        }],
        line: 173
      },
      "19": {
        loc: {
          start: {
            line: 173,
            column: 106
          },
          end: {
            line: 173,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 173,
            column: 106
          },
          end: {
            line: 173,
            column: 127
          }
        }, {
          start: {
            line: 173,
            column: 131
          },
          end: {
            line: 173,
            column: 146
          }
        }],
        line: 173
      },
      "20": {
        loc: {
          start: {
            line: 186,
            column: 0
          },
          end: {
            line: 186,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 0
          },
          end: {
            line: 186,
            column: 39
          }
        }, {
          start: {
            line: 186,
            column: 43
          },
          end: {
            line: 186,
            column: 68
          }
        }],
        line: 186
      },
      "21": {
        loc: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        }, {
          start: {
            line: 214,
            column: 9
          },
          end: {
            line: 216,
            column: 5
          }
        }],
        line: 208
      },
      "22": {
        loc: {
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "23": {
        loc: {
          start: {
            line: 214,
            column: 9
          },
          end: {
            line: 216,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 9
          },
          end: {
            line: 216,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 214
      },
      "24": {
        loc: {
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 222,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 222,
            column: 46
          }
        }, {
          start: {
            line: 222,
            column: 50
          },
          end: {
            line: 222,
            column: 52
          }
        }],
        line: 222
      },
      "25": {
        loc: {
          start: {
            line: 223,
            column: 25
          },
          end: {
            line: 223,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 25
          },
          end: {
            line: 223,
            column: 52
          }
        }, {
          start: {
            line: 223,
            column: 56
          },
          end: {
            line: 223,
            column: 91
          }
        }],
        line: 223
      },
      "26": {
        loc: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "27": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "28": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "29": {
        loc: {
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 8
          },
          end: {
            line: 235,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "30": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 239,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "31": {
        loc: {
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 39
          }
        }, {
          start: {
            line: 237,
            column: 43
          },
          end: {
            line: 237,
            column: 72
          }
        }],
        line: 237
      },
      "32": {
        loc: {
          start: {
            line: 238,
            column: 29
          },
          end: {
            line: 238,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 52
          },
          end: {
            line: 238,
            column: 56
          }
        }, {
          start: {
            line: 238,
            column: 59
          },
          end: {
            line: 238,
            column: 69
          }
        }],
        line: 238
      },
      "33": {
        loc: {
          start: {
            line: 270,
            column: 11
          },
          end: {
            line: 270,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 11
          },
          end: {
            line: 270,
            column: 39
          }
        }, {
          start: {
            line: 270,
            column: 43
          },
          end: {
            line: 270,
            column: 95
          }
        }],
        line: 270
      },
      "34": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "35": {
        loc: {
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 285,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 285,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "36": {
        loc: {
          start: {
            line: 281,
            column: 20
          },
          end: {
            line: 281,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 20
          },
          end: {
            line: 281,
            column: 26
          }
        }, {
          start: {
            line: 281,
            column: 30
          },
          end: {
            line: 281,
            column: 44
          }
        }, {
          start: {
            line: 281,
            column: 48
          },
          end: {
            line: 281,
            column: 61
          }
        }],
        line: 281
      },
      "37": {
        loc: {
          start: {
            line: 283,
            column: 75
          },
          end: {
            line: 283,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 107
          },
          end: {
            line: 283,
            column: 111
          }
        }, {
          start: {
            line: 283,
            column: 114
          },
          end: {
            line: 283,
            column: 129
          }
        }],
        line: 283
      },
      "38": {
        loc: {
          start: {
            line: 300,
            column: 39
          },
          end: {
            line: 300,
            column: 91
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 300,
            column: 52
          },
          end: {
            line: 300,
            column: 91
          }
        }],
        line: 300
      },
      "39": {
        loc: {
          start: {
            line: 300,
            column: 93
          },
          end: {
            line: 300,
            column: 108
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 300,
            column: 104
          },
          end: {
            line: 300,
            column: 108
          }
        }],
        line: 300
      },
      "40": {
        loc: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "41": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 313,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "42": {
        loc: {
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 310,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 310,
            column: 30
          }
        }, {
          start: {
            line: 310,
            column: 34
          },
          end: {
            line: 310,
            column: 90
          }
        }],
        line: 310
      },
      "43": {
        loc: {
          start: {
            line: 311,
            column: 36
          },
          end: {
            line: 311,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 36
          },
          end: {
            line: 311,
            column: 88
          }
        }, {
          start: {
            line: 311,
            column: 92
          },
          end: {
            line: 311,
            column: 94
          }
        }],
        line: 311
      },
      "44": {
        loc: {
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 350,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "45": {
        loc: {
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 347,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 16
          },
          end: {
            line: 347,
            column: 30
          }
        }, {
          start: {
            line: 347,
            column: 34
          },
          end: {
            line: 347,
            column: 90
          }
        }],
        line: 347
      },
      "46": {
        loc: {
          start: {
            line: 348,
            column: 36
          },
          end: {
            line: 348,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 36
          },
          end: {
            line: 348,
            column: 88
          }
        }, {
          start: {
            line: 348,
            column: 92
          },
          end: {
            line: 348,
            column: 94
          }
        }],
        line: 348
      },
      "47": {
        loc: {
          start: {
            line: 368,
            column: 30
          },
          end: {
            line: 368,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 368,
            column: 40
          },
          end: {
            line: 368,
            column: 42
          }
        }],
        line: 368
      },
      "48": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 376,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "49": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 388,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 388,
            column: 9
          }
        }, {
          start: {
            line: 383,
            column: 13
          },
          end: {
            line: 388,
            column: 9
          }
        }],
        line: 379
      },
      "50": {
        loc: {
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 379,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 12
          },
          end: {
            line: 379,
            column: 23
          }
        }, {
          start: {
            line: 379,
            column: 27
          },
          end: {
            line: 379,
            column: 67
          }
        }],
        line: 379
      },
      "51": {
        loc: {
          start: {
            line: 392,
            column: 40
          },
          end: {
            line: 392,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 65
          },
          end: {
            line: 392,
            column: 78
          }
        }, {
          start: {
            line: 392,
            column: 81
          },
          end: {
            line: 392,
            column: 96
          }
        }],
        line: 392
      },
      "52": {
        loc: {
          start: {
            line: 398,
            column: 36
          },
          end: {
            line: 398,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 398,
            column: 47
          },
          end: {
            line: 398,
            column: 51
          }
        }],
        line: 398
      },
      "53": {
        loc: {
          start: {
            line: 401,
            column: 34
          },
          end: {
            line: 401,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 401,
            column: 58
          },
          end: {
            line: 401,
            column: 65
          }
        }, {
          start: {
            line: 401,
            column: 68
          },
          end: {
            line: 401,
            column: 81
          }
        }],
        line: 401
      },
      "54": {
        loc: {
          start: {
            line: 403,
            column: 33
          },
          end: {
            line: 403,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 403,
            column: 44
          },
          end: {
            line: 403,
            column: 97
          }
        }, {
          start: {
            line: 403,
            column: 100
          },
          end: {
            line: 403,
            column: 117
          }
        }],
        line: 403
      },
      "55": {
        loc: {
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        }, {
          start: {
            line: 427,
            column: 17
          },
          end: {
            line: 429,
            column: 13
          }
        }],
        line: 424
      },
      "56": {
        loc: {
          start: {
            line: 436,
            column: 27
          },
          end: {
            line: 436,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 436,
            column: 38
          },
          end: {
            line: 436,
            column: 42
          }
        }],
        line: 436
      },
      "57": {
        loc: {
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 440,
            column: 12
          },
          end: {
            line: 446,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 440
      },
      "58": {
        loc: {
          start: {
            line: 452,
            column: 32
          },
          end: {
            line: 452,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 452,
            column: 32
          },
          end: {
            line: 452,
            column: 84
          }
        }, {
          start: {
            line: 452,
            column: 88
          },
          end: {
            line: 452,
            column: 90
          }
        }],
        line: 452
      },
      "59": {
        loc: {
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 456,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 456,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "60": {
        loc: {
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 454,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 454,
            column: 24
          }
        }, {
          start: {
            line: 454,
            column: 28
          },
          end: {
            line: 454,
            column: 81
          }
        }],
        line: 454
      },
      "61": {
        loc: {
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 468,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 16
          },
          end: {
            line: 468,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "62": {
        loc: {
          start: {
            line: 466,
            column: 20
          },
          end: {
            line: 466,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 466,
            column: 20
          },
          end: {
            line: 466,
            column: 28
          }
        }, {
          start: {
            line: 466,
            column: 32
          },
          end: {
            line: 466,
            column: 85
          }
        }],
        line: 466
      },
      "63": {
        loc: {
          start: {
            line: 481,
            column: 20
          },
          end: {
            line: 483,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 20
          },
          end: {
            line: 483,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "64": {
        loc: {
          start: {
            line: 481,
            column: 24
          },
          end: {
            line: 481,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 481,
            column: 24
          },
          end: {
            line: 481,
            column: 32
          }
        }, {
          start: {
            line: 481,
            column: 36
          },
          end: {
            line: 481,
            column: 89
          }
        }],
        line: 481
      },
      "65": {
        loc: {
          start: {
            line: 489,
            column: 20
          },
          end: {
            line: 491,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 20
          },
          end: {
            line: 491,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "66": {
        loc: {
          start: {
            line: 489,
            column: 24
          },
          end: {
            line: 489,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 489,
            column: 24
          },
          end: {
            line: 489,
            column: 32
          }
        }, {
          start: {
            line: 489,
            column: 36
          },
          end: {
            line: 489,
            column: 89
          }
        }],
        line: 489
      },
      "67": {
        loc: {
          start: {
            line: 493,
            column: 20
          },
          end: {
            line: 502,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 20
          },
          end: {
            line: 502,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "68": {
        loc: {
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 566,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 12
          },
          end: {
            line: 566,
            column: 13
          }
        }, {
          start: {
            line: 520,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }],
        line: 514
      },
      "69": {
        loc: {
          start: {
            line: 514,
            column: 16
          },
          end: {
            line: 514,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 514,
            column: 16
          },
          end: {
            line: 514,
            column: 43
          }
        }, {
          start: {
            line: 514,
            column: 47
          },
          end: {
            line: 514,
            column: 76
          }
        }],
        line: 514
      },
      "70": {
        loc: {
          start: {
            line: 520,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 520,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }, {
          start: {
            line: 526,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }],
        line: 520
      },
      "71": {
        loc: {
          start: {
            line: 520,
            column: 21
          },
          end: {
            line: 520,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 520,
            column: 21
          },
          end: {
            line: 520,
            column: 34
          }
        }, {
          start: {
            line: 520,
            column: 38
          },
          end: {
            line: 520,
            column: 77
          }
        }],
        line: 520
      },
      "72": {
        loc: {
          start: {
            line: 526,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 526,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }, {
          start: {
            line: 552,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }],
        line: 526
      },
      "73": {
        loc: {
          start: {
            line: 529,
            column: 16
          },
          end: {
            line: 536,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 16
          },
          end: {
            line: 536,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 529
      },
      "74": {
        loc: {
          start: {
            line: 530,
            column: 20
          },
          end: {
            line: 535,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 530,
            column: 20
          },
          end: {
            line: 535,
            column: 21
          }
        }, {
          start: {
            line: 533,
            column: 25
          },
          end: {
            line: 535,
            column: 21
          }
        }],
        line: 530
      },
      "75": {
        loc: {
          start: {
            line: 538,
            column: 16
          },
          end: {
            line: 549,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 538,
            column: 16
          },
          end: {
            line: 549,
            column: 17
          }
        }, {
          start: {
            line: 542,
            column: 21
          },
          end: {
            line: 549,
            column: 17
          }
        }],
        line: 538
      },
      "76": {
        loc: {
          start: {
            line: 542,
            column: 21
          },
          end: {
            line: 549,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 542,
            column: 21
          },
          end: {
            line: 549,
            column: 17
          }
        }, {
          start: {
            line: 546,
            column: 21
          },
          end: {
            line: 549,
            column: 17
          }
        }],
        line: 542
      },
      "77": {
        loc: {
          start: {
            line: 546,
            column: 21
          },
          end: {
            line: 549,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 546,
            column: 21
          },
          end: {
            line: 549,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 546
      },
      "78": {
        loc: {
          start: {
            line: 552,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 552,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }, {
          start: {
            line: 561,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }],
        line: 552
      },
      "79": {
        loc: {
          start: {
            line: 561,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 561,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }, {
          start: {
            line: 564,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }],
        line: 561
      },
      "80": {
        loc: {
          start: {
            line: 564,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 564,
            column: 17
          },
          end: {
            line: 566,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 564
      },
      "81": {
        loc: {
          start: {
            line: 570,
            column: 16
          },
          end: {
            line: 573,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 570,
            column: 16
          },
          end: {
            line: 573,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 570
      },
      "82": {
        loc: {
          start: {
            line: 570,
            column: 20
          },
          end: {
            line: 570,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 570,
            column: 20
          },
          end: {
            line: 570,
            column: 23
          }
        }, {
          start: {
            line: 570,
            column: 27
          },
          end: {
            line: 570,
            column: 50
          }
        }, {
          start: {
            line: 570,
            column: 54
          },
          end: {
            line: 570,
            column: 99
          }
        }],
        line: 570
      },
      "83": {
        loc: {
          start: {
            line: 582,
            column: 31
          },
          end: {
            line: 582,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 582,
            column: 31
          },
          end: {
            line: 582,
            column: 44
          }
        }, {
          start: {
            line: 582,
            column: 48
          },
          end: {
            line: 582,
            column: 80
          }
        }],
        line: 582
      },
      "84": {
        loc: {
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 594,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 592,
            column: 12
          },
          end: {
            line: 594,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 592
      },
      "85": {
        loc: {
          start: {
            line: 598,
            column: 62
          },
          end: {
            line: 598,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 598,
            column: 62
          },
          end: {
            line: 598,
            column: 82
          }
        }, {
          start: {
            line: 598,
            column: 86
          },
          end: {
            line: 598,
            column: 99
          }
        }],
        line: 598
      },
      "86": {
        loc: {
          start: {
            line: 602,
            column: 12
          },
          end: {
            line: 633,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 602,
            column: 12
          },
          end: {
            line: 633,
            column: 13
          }
        }, {
          start: {
            line: 616,
            column: 17
          },
          end: {
            line: 633,
            column: 13
          }
        }],
        line: 602
      },
      "87": {
        loc: {
          start: {
            line: 602,
            column: 16
          },
          end: {
            line: 602,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 602,
            column: 16
          },
          end: {
            line: 602,
            column: 29
          }
        }, {
          start: {
            line: 602,
            column: 33
          },
          end: {
            line: 602,
            column: 72
          }
        }],
        line: 602
      },
      "88": {
        loc: {
          start: {
            line: 616,
            column: 17
          },
          end: {
            line: 633,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 17
          },
          end: {
            line: 633,
            column: 13
          }
        }, {
          start: {
            line: 623,
            column: 17
          },
          end: {
            line: 633,
            column: 13
          }
        }],
        line: 616
      },
      "89": {
        loc: {
          start: {
            line: 618,
            column: 16
          },
          end: {
            line: 621,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 618,
            column: 16
          },
          end: {
            line: 621,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 618
      },
      "90": {
        loc: {
          start: {
            line: 620,
            column: 24
          },
          end: {
            line: 620,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 620,
            column: 66
          },
          end: {
            line: 620,
            column: 85
          }
        }, {
          start: {
            line: 620,
            column: 88
          },
          end: {
            line: 620,
            column: 123
          }
        }],
        line: 620
      },
      "91": {
        loc: {
          start: {
            line: 623,
            column: 17
          },
          end: {
            line: 633,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 623,
            column: 17
          },
          end: {
            line: 633,
            column: 13
          }
        }, {
          start: {
            line: 631,
            column: 17
          },
          end: {
            line: 633,
            column: 13
          }
        }],
        line: 623
      },
      "92": {
        loc: {
          start: {
            line: 632,
            column: 37
          },
          end: {
            line: 632,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 632,
            column: 37
          },
          end: {
            line: 632,
            column: 50
          }
        }, {
          start: {
            line: 632,
            column: 54
          },
          end: {
            line: 632,
            column: 69
          }
        }],
        line: 632
      },
      "93": {
        loc: {
          start: {
            line: 644,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 644,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 644
      },
      "94": {
        loc: {
          start: {
            line: 659,
            column: 12
          },
          end: {
            line: 665,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 659,
            column: 12
          },
          end: {
            line: 665,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 659
      },
      "95": {
        loc: {
          start: {
            line: 660,
            column: 16
          },
          end: {
            line: 663,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 660,
            column: 16
          },
          end: {
            line: 663,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 660
      },
      "96": {
        loc: {
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 669,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 669,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 667
      },
      "97": {
        loc: {
          start: {
            line: 667,
            column: 16
          },
          end: {
            line: 667,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 667,
            column: 16
          },
          end: {
            line: 667,
            column: 36
          }
        }, {
          start: {
            line: 667,
            column: 40
          },
          end: {
            line: 667,
            column: 83
          }
        }],
        line: 667
      },
      "98": {
        loc: {
          start: {
            line: 677,
            column: 12
          },
          end: {
            line: 679,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 677,
            column: 12
          },
          end: {
            line: 679,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 677
      },
      "99": {
        loc: {
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 698,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 698,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "100": {
        loc: {
          start: {
            line: 693,
            column: 16
          },
          end: {
            line: 696,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 693,
            column: 16
          },
          end: {
            line: 696,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 693
      },
      "101": {
        loc: {
          start: {
            line: 700,
            column: 12
          },
          end: {
            line: 702,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 700,
            column: 12
          },
          end: {
            line: 702,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 700
      },
      "102": {
        loc: {
          start: {
            line: 700,
            column: 16
          },
          end: {
            line: 700,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 700,
            column: 16
          },
          end: {
            line: 700,
            column: 36
          }
        }, {
          start: {
            line: 700,
            column: 40
          },
          end: {
            line: 700,
            column: 83
          }
        }],
        line: 700
      },
      "103": {
        loc: {
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 712,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 710,
            column: 12
          },
          end: {
            line: 712,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 710
      },
      "104": {
        loc: {
          start: {
            line: 726,
            column: 12
          },
          end: {
            line: 728,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 726,
            column: 12
          },
          end: {
            line: 728,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 726
      },
      "105": {
        loc: {
          start: {
            line: 739,
            column: 29
          },
          end: {
            line: 739,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 739,
            column: 98
          },
          end: {
            line: 739,
            column: 103
          }
        }, {
          start: {
            line: 739,
            column: 106
          },
          end: {
            line: 739,
            column: 110
          }
        }],
        line: 739
      },
      "106": {
        loc: {
          start: {
            line: 742,
            column: 23
          },
          end: {
            line: 742,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 742,
            column: 54
          },
          end: {
            line: 742,
            column: 67
          }
        }, {
          start: {
            line: 742,
            column: 70
          },
          end: {
            line: 742,
            column: 72
          }
        }],
        line: 742
      },
      "107": {
        loc: {
          start: {
            line: 753,
            column: 29
          },
          end: {
            line: 753,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 753,
            column: 98
          },
          end: {
            line: 753,
            column: 103
          }
        }, {
          start: {
            line: 753,
            column: 106
          },
          end: {
            line: 753,
            column: 110
          }
        }],
        line: 753
      },
      "108": {
        loc: {
          start: {
            line: 756,
            column: 23
          },
          end: {
            line: 756,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 756,
            column: 54
          },
          end: {
            line: 756,
            column: 67
          }
        }, {
          start: {
            line: 756,
            column: 70
          },
          end: {
            line: 756,
            column: 72
          }
        }],
        line: 756
      },
      "109": {
        loc: {
          start: {
            line: 768,
            column: 12
          },
          end: {
            line: 770,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 768,
            column: 12
          },
          end: {
            line: 770,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 768
      },
      "110": {
        loc: {
          start: {
            line: 788,
            column: 12
          },
          end: {
            line: 790,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 788,
            column: 12
          },
          end: {
            line: 790,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 788
      },
      "111": {
        loc: {
          start: {
            line: 799,
            column: 39
          },
          end: {
            line: 799,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 799,
            column: 46
          },
          end: {
            line: 799,
            column: 47
          }
        }],
        line: 799
      },
      "112": {
        loc: {
          start: {
            line: 799,
            column: 49
          },
          end: {
            line: 799,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 799,
            column: 57
          },
          end: {
            line: 799,
            column: 59
          }
        }],
        line: 799
      },
      "113": {
        loc: {
          start: {
            line: 802,
            column: 44
          },
          end: {
            line: 802,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 802,
            column: 44
          },
          end: {
            line: 802,
            column: 94
          }
        }, {
          start: {
            line: 802,
            column: 98
          },
          end: {
            line: 802,
            column: 102
          }
        }],
        line: 802
      },
      "114": {
        loc: {
          start: {
            line: 824,
            column: 8
          },
          end: {
            line: 827,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 824,
            column: 8
          },
          end: {
            line: 827,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 824
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0, 0],
      "37": [0, 0],
      "38": [0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0, 0],
      "108": [0, 0],
      "109": [0, 0],
      "110": [0, 0],
      "111": [0],
      "112": [0],
      "113": [0, 0],
      "114": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\api\\fastgpt.ts",
      mappings: ";;;;;;AAs+BA,0CAoBC;AAGD,sDAeC;AAGD,0CAeC;AAGD,wCAEC;AAniCD,cAAc;AACd,kDAAyB;AACzB,8CAA8G;AAC9G,uFAAuF;AACvF,+BAAmC;AA6CnC,mBAAmB;AACnB,MAAa,aAAa;IAUxB,YAAY,MAAc,EAAE,OAAgB,EAAE,QAAQ,GAAG,IAAI;QANrD,gBAAW,GAAG;YACpB,UAAU,EAAE,CAAC;YACb,UAAU,EAAE,IAAI;YAChB,iBAAiB,EAAE,CAAC;SACrB,CAAA;QAGC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;IAED,YAAY;IACJ,SAAS,CAAC,QAAgB;QAChC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO,aAAa,QAAQ,EAAE,CAAA;QAChC,CAAC;QACD,OAAO,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ,EAAE,CAAA;IACrC,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAI,SAA2B;QAC3D,IAAI,SAAgB,CAAA;QAEpB,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC;YACxE,IAAI,CAAC;gBACH,OAAO,MAAM,SAAS,EAAE,CAAA;YAC1B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,SAAS,GAAG,KAAc,CAAA;gBAE1B,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;oBAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAA;oBACjG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAA;oBAC1D,OAAO,CAAC,GAAG,CAAC,6BAA6B,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAA;gBACxF,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,SAAU,CAAA;IAClB,CAAC;IAED,SAAS;IACT,KAAK,CAAC,IAAI,CAAC,MA2BV;QACC,uDAAuD;QACvD,MAAM,GAAG,GAAG,mBAAmB,CAAA;QAE/B,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,IAAI,EAAE;YACtC,yBAAyB;YACzB,IAAI,CAAC;gBACH,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE;oBAClC,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,EAAE,GAAG,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,uBAAuB;iBAC5D,CAAC,CAAA;gBAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;oBAChC,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,cAAc,EAAE,kBAAkB;qBACnC;oBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,GAAG,MAAM;wBACT,OAAO,EAAE,IAAI,CAAC,OAAO;wBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;qBACxB,CAAC;iBACH,CAAC,CAAA;gBAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;oBACjB,IAAI,SAA+B,CAAA;oBACnC,IAAI,CAAC;wBACH,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;oBACnC,CAAC;oBAAC,OAAO,CAAC,EAAE,CAAC;wBACX,iCAAiC;wBACjC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;wBAClC,MAAM,IAAI,KAAK,CAAC,sBAAsB,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,MAAM,IAAI,EAAE,CAAC,CAAA;oBAC3F,CAAC;oBACD,MAAM,IAAI,KAAK,CACb,sBAAsB,SAAS,CAAC,KAAK,EAAE,OAAO,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,CACtH,CAAA;gBACH,CAAC;gBAED,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;oBAClB,OAAO,QAAQ,CAAC,IAAsB,CAAA;gBACxC,CAAC;gBAED,OAAO,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAoB,CAAA;YACnD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAA;gBACnD,MAAM,KAAK,CAAA;YACb,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,QAAQ;IACR,KAAK,CAAC,QAAQ,CAAC,MAKd;QACC,4BAA4B;QAC5B,MAAM,GAAG,GAAG,wBAAwB,CAAA;QAEpC,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE;gBACxC,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,MAAM;aACb,CAAC,CAAA;YAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;gBAChC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,GAAG,MAAM;oBACT,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;iBACxB,CAAC;aACH,CAAC,CAAA;YAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,IAAI,SAAS,CAAA;gBACb,IAAI,CAAC;oBACH,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;gBACnC,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACX,iCAAiC;oBACjC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;oBAClC,MAAM,IAAI,KAAK,CAAC,sBAAsB,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,MAAM,IAAI,EAAE,CAAC,CAAA;gBAC3F,CAAC;gBACD,MAAM,IAAI,KAAK,CACb,sBAAsB,SAAS,CAAC,KAAK,EAAE,OAAO,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,CACtH,CAAA;YACH,CAAC;YAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAC9B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;YACzD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,SAAS;IACT,KAAK,CAAC,YAAY,CAAC,MAKlB;QACC,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAA;QAEzD,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;gBAChC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;oBAClC,aAAa,EAAE,UAAU,IAAI,CAAC,MAAM,EAAE;iBACvC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;aAC7B,CAAC,CAAA;YAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;gBACvC,MAAM,IAAI,KAAK,CACb,sBAAsB,SAAS,CAAC,KAAK,EAAE,OAAO,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,CACtH,CAAA;YACH,CAAC;YAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAC9B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,uCAAuC,EAAE,KAAK,CAAC,CAAA;YAC7D,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,SAAS;IACT,KAAK,CAAC,cAAc,CAAC,MAMpB;QACC,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,qCAAqC,CAAC,CAAA;QAEjE,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;gBAChC,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;oBAClC,aAAa,EAAE,UAAU,IAAI,CAAC,MAAM,EAAE;iBACvC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;aAC7B,CAAC,CAAA;YAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;gBACvC,MAAM,IAAI,KAAK,CACb,sBAAsB,SAAS,CAAC,KAAK,EAAE,OAAO,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,QAAQ,CAAC,MAAM,GAAG,CACtH,CAAA;YACH,CAAC;YAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAC9B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,0CAA0C,EAAE,KAAK,CAAC,CAAA;YAChE,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;CACF;AA7OD,sCA6OC;AAED,iDAAiD;AACpC,QAAA,aAAa,GAAG,IAAI,aAAa,CAC5C,EAAE,EAAE,kDAAkD;AACtD,OAAO,CAAC,GAAG,CAAC,2BAA2B,IAAI,yBAAyB,EACpE,IAAI,CACL,CAAA;AAED,6BAA6B;AAC7B,MAAM,SAAS,GAAG,eAAK,CAAC,MAAM,CAAC;IAC7B,OAAO,EAAE,4BAAkB,CAAC,OAAO;IACnC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;KACnC;CACF,CAAC,CAAA;AAEF,8CAA8C;AAC9C,SAAS,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAChC,CAAC,MAAM,EAAE,EAAE;IACT,OAAO,CAAC,GAAG,CAAC,SAAS,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC,CAAA;IAClE,OAAO,MAAM,CAAA;AACf,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;IACR,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AAC9B,CAAC,CACF,CAAA;AAED,qDAAqD;AACrD,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CACjC,CAAC,QAAQ,EAAE,EAAE;IACX,OAAO,CAAC,GAAG,CAAC,mBAAmB,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAA;IACxE,OAAO,QAAQ,CAAA;AACjB,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;IACR,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,OAAO,CAAC,CAAA;IAErD,kCAAkC;IAClC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;QACnB,OAAO,CAAC,KAAK,CAAC,yBAAyB,KAAK,CAAC,QAAQ,CAAC,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAA;QAC5F,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxB,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;QACzD,CAAC;IACH,CAAC;SAAM,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;QACzB,OAAO,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAA;IAC7C,CAAC;IAED,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;AAC9B,CAAC,CACF,CAAA;AAED,+BAA+B;AAC/B,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;IAClC,sCAAsC;IACtC,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAA;IAChD,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAA;IAEvF,qCAAqC;IACrC,IAAI,YAAY,EAAE,CAAC;QACjB,2BAA2B;QAC3B,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;YACvB,OAAO,gBAAgB,CAAA;QACzB,CAAC;QAED,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;YACrB,OAAO,kBAAkB,CAAA;QAC3B,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QAC/C,CAAC;QAED,4CAA4C;QAC5C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;YACjE,OAAO,UAAU,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,EAAE,CAAA;QAC7D,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAA;AACb,CAAC,CAAA;AAED,6CAA6C;AAC7C,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAA;AACjC,SAAS,CAAC,GAAG,GAAG,UAAU,GAAW,EAAE,MAAY;IACjD,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;IAClC,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,oBAAoB,UAAU,EAAE,CAAC,CAAA;IAC5E,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAA;AACnD,CAAC,CAAA;AAED,MAAM,YAAY,GAAG,SAAS,CAAC,IAAI,CAAA;AACnC,SAAS,CAAC,IAAI,GAAG,UAAU,GAAW,EAAE,IAAU,EAAE,MAAY;IAC9D,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;IAClC,OAAO,CAAC,GAAG,CAAC,6BAA6B,GAAG,oBAAoB,UAAU,EAAE,CAAC,CAAA;IAC7E,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;AAC1D,CAAC,CAAA;AAED,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,CAAA;AACjC,SAAS,CAAC,GAAG,GAAG,UAAU,GAAW,EAAE,IAAU,EAAE,MAAY;IAC7D,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;IAClC,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,oBAAoB,UAAU,EAAE,CAAC,CAAA;IAC5E,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;AACzD,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAA;AACvC,SAAS,CAAC,MAAM,GAAG,UAAU,GAAW,EAAE,MAAY;IACpD,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;IAClC,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,oBAAoB,UAAU,EAAE,CAAC,CAAA;IAC/E,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAA;AACtD,CAAC,CAAA;AAED,6BAA6B;AACtB,MAAM,eAAe,GAAG,GAAG,EAAE;IAClC,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;AAC7F,CAAC,CAAA;AAFY,QAAA,eAAe,mBAE3B;AAED,wBAAwB;AACjB,MAAM,aAAa,GAAG,KAAK,IAAI,EAAE;IACtC,IAAI,CAAC;QACH,oCAAoC;QACpC,MAAM,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,UAAU,CAAC,CAAA;QAChE,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAA;gBACrC,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;oBAC9C,qCAAqC;oBACrC,UAAU,CAAC,YAAY,CACrB,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CACvD,CAAA;oBACD,OAAO,IAAI,CAAA;gBACb,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAA;YACrD,CAAC;QACH,CAAC;QACD,OAAO,KAAK,CAAA;IACd,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAA;QACxD,OAAO,KAAK,CAAA;IACd,CAAC;AACH,CAAC,CAAA;AAzBY,QAAA,aAAa,iBAyBzB;AAED,qDAAqD;AACrD,MAAM,YAAY,GAAG,KAAK,EACxB,SAA6B,EAC7B,UAAU,GAAG,4BAAkB,CAAC,UAAU,EAC1C,QAAQ,GAAG,IAAI,EACf,EAAE;IACF,IAAI,SAAS,CAAA;IACb,IAAI,UAAU,GAAG,CAAC,CAAA;IAElB,kCAAkC;IAClC,IAAI,QAAQ,EAAE,CAAC;QACb,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAA;YAEpD,uBAAuB;YACvB,MAAM,cAAc,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAA;YAEjD,qEAAqE;YACrE,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,sBAAY,CAAC,KAAK,CAAC,EAAE,CAAC;gBACrE,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA;gBACpE,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,sBAAY,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YACpE,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,SAAS,EAAE,CAAA;gBAChC,kCAAkC;gBAClC,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;gBACpD,OAAO,MAAM,CAAA;YACf,CAAC;oBAAS,CAAC;gBACT,2BAA2B;gBAC3B,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,cAAc,CAAA;YAC7C,CAAC;QACH,CAAC;QAAC,OAAO,UAAU,EAAE,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,UAAU,CAAC,OAAO,CAAC,CAAA;YAC3D,SAAS,GAAG,UAAU,CAAA;QACxB,CAAC;IACH,CAAC;IAED,oDAAoD;IACpD,IAAI,CAAC;QACH,OAAO,MAAM,SAAS,EAAE,CAAA;IAC1B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,SAAS,GAAG,KAAK,CAAA;QACjB,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAA;IAC5D,CAAC;IAED,sBAAsB;IACtB,OAAO,UAAU,GAAG,UAAU,EAAE,CAAC;QAC/B,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,eAAe,UAAU,GAAG,CAAC,IAAI,UAAU,KAAK,CAAC,CAAA;YAE7D,uCAAuC;YACvC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAE5E,mDAAmD;YACnD,MAAM,cAAc,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAA;YAEjD,sBAAsB;YACtB,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,sBAAY,CAAC,KAAK,CAAC,EAAE,CAAC;gBACrE,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA;gBACpE,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,sBAAY,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YACpE,CAAC;YAED,IAAI,CAAC;gBACH,OAAO,MAAM,SAAS,EAAE,CAAA;YAC1B,CAAC;oBAAS,CAAC;gBACT,2BAA2B;gBAC3B,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,cAAc,CAAA;YAC7C,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,SAAS,GAAG,KAAK,CAAA;YACjB,UAAU,EAAE,CAAA;YACZ,OAAO,CAAC,GAAG,CAAC,eAAe,UAAU,IAAI,UAAU,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,CAAA;QAC/E,CAAC;IACH,CAAC;IAED,MAAM,SAAS,CAAA;AACjB,CAAC,CAAA;AAED,sDAAsD;AACtD,MAAM,SAAS,GAAG,KAAK,EAAE,GAAW,EAAE,UAAuB,EAAE,EAAE,EAAE;IACjE,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;QAE1C,wBAAwB;QACxB,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YACvC,OAAO,CAAC,IAAI,CAAC,yBAAyB,QAAQ,CAAC,MAAM,MAAM,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAA;YAC5F,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,mBAAmB,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAA;QAC/F,CAAC;QAED,qBAAqB;QACrB,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;QACxD,IAAI,WAAW,IAAI,WAAW,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAC5D,4BAA4B;YAC5B,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAA;QACvD,CAAC;aAAM,CAAC;YACN,2BAA2B;YAC3B,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YAClC,OAAO,CAAC,IAAI,CAAC,sCAAsC,WAAW,cAAc,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAA;YACxG,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,6BAA6B,EAAE,IAAI,EAAE,CAAA;QACvE,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAA;QAC7C,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAAA;IAC5F,CAAC;AACH,CAAC,CAAA;AAED,wBAAwB;AACxB,MAAM,UAAU,GAAG;IACjB,wBAAwB;IACxB,YAAY,EAAE,CAAC,OAAe,EAAE,MAAc,EAAE,QAAQ,GAAG,IAAI,EAAE,EAAE;QACjE,2BAA2B;QAC3B,6BAA6B;QAC7B,MAAM,iBAAiB,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,CAAA;QAEzE,oCAAoC;QACpC,MAAM,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,sBAAY,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAA;QAEnG,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,gBAAgB,CAAA;QAE7C,+DAA+D;QAC/D,0DAA0D;QAC1D,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAA;QAC7D,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;QAClD,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,SAAS,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAA;QAEjE,sBAAsB;QACtB,KAAK,CAAC,oBAAoB,EAAE;YAC1B,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gBACnB,OAAO,EAAE,iBAAiB;gBAC1B,MAAM;gBACN,QAAQ;aACT,CAAC;SACH,CAAC;aACC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACnC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACf,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;gBACnB,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAA;YAC7D,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,IAAI,CAAC,wDAAwD,EAAE,MAAM,CAAC,KAAK,CAAC,CAAA;YACtF,CAAC;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,OAAO,CAAC,KAAK,CAAC,wDAAwD,EAAE,KAAK,CAAC,CAAA;QAChF,CAAC,CAAC,CAAA;IACN,CAAC;IAED,sBAAsB;IACtB,cAAc,EAAE,KAAK,EAAE,QAAQ,GAAG,IAAI,EAAE,EAAE;QACxC,IAAI,CAAC;YACH,sBAAsB;YACtB,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAA;YAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM;oBACJ,OAAO,EAAE,wBAAc,CAAC,iBAAiB;oBACzC,OAAO,EAAE,0BAA0B;oBACnC,MAAM,EAAE,CAAC;iBACV,CAAA;YACH,CAAC;YAED,kCAAkC;YAClC,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAA;YACxC,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,4BAAkB,CAAC,WAAW,CAAC,CAAA;YAEtF,4DAA4D;YAC5D,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAA;YAC7C,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAA;YAEpE,yCAAyC;YACzC,IAAI,QAAQ,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,sBAAY,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5D,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,sBAAY,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;YACpE,CAAC;YAED,IAAI,CAAC;gBACH,kCAAkC;gBAClC,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;gBACnF,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE;oBAC9C,OAAO,EAAE,4BAAkB,CAAC,WAAW;oBACvC,MAAM,EAAE,UAAU,CAAC,MAAM;iBAC1B,CAAC,CAAA;gBACF,YAAY,CAAC,SAAS,CAAC,CAAA;gBAEvB,2BAA2B;gBAC3B,IAAI,QAAQ,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,sBAAY,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC5D,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAA;gBACzC,CAAC;gBAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAA;YACzD,CAAC;YAAC,OAAO,UAAU,EAAE,CAAC;gBACpB,oDAAoD;gBACpD,OAAO,CAAC,GAAG,CAAC,uDAAuD,EAAE,UAAU,CAAC,CAAA;gBAEhF,IAAI,CAAC;oBACH,MAAM,YAAY,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE;wBAC5C,OAAO,EAAE,4BAAkB,CAAC,WAAW;wBACvC,MAAM,EAAE,UAAU,CAAC,MAAM;qBAC1B,CAAC,CAAA;oBACF,YAAY,CAAC,SAAS,CAAC,CAAA;oBAEvB,2BAA2B;oBAC3B,IAAI,QAAQ,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,sBAAY,CAAC,KAAK,CAAC,EAAE,CAAC;wBAC5D,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAA;oBACzC,CAAC;oBAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAA;gBAC7D,CAAC;gBAAC,OAAO,SAAS,EAAE,CAAC;oBACnB,YAAY,CAAC,SAAS,CAAC,CAAA;oBAEvB,2BAA2B;oBAC3B,IAAI,QAAQ,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,sBAAY,CAAC,KAAK,CAAC,EAAE,CAAC;wBAC5D,SAAS,CAAC,QAAQ,CAAC,OAAO,GAAG,UAAU,CAAA;oBACzC,CAAC;oBAED,+CAA+C;oBAC/C,IAAI,CAAC,QAAQ,EAAE,CAAC;wBACd,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAA;wBACnE,IAAI,CAAC;4BACH,OAAO,MAAM,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;wBAC9C,CAAC;wBAAC,OAAO,UAAU,EAAE,CAAC;4BACpB,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,UAAU,CAAC,CAAA;4BAChE,MAAM,SAAS,CAAA,CAAC,4CAA4C;wBAC9D,CAAC;oBACH,CAAC;oBAED,MAAM,SAAS,CAAA,CAAC,2CAA2C;gBAC7D,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;YAEzD,mCAAmC;YACnC,IAAI,YAAY,GAAG,wBAAc,CAAC,OAAO,CAAA;YACzC,IAAI,WAAW,GAAG,CAAC,CAAA;YACnB,IAAI,eAAe,GAAG,EAAE,CAAA;YAExB,uBAAuB;YACvB,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;gBACjE,YAAY,GAAG,wBAAc,CAAC,OAAO,CAAA;gBACrC,WAAW,GAAG,GAAG,CAAA,CAAC,kBAAkB;gBACpC,eAAe,GAAG,wBAAc,CAAC,WAAW,CAAC,SAAS,CAAA;YACxD,CAAC;YACD,uBAAuB;iBAClB,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;gBAClE,YAAY,GAAG,wBAAc,CAAC,aAAa,CAAA;gBAC3C,WAAW,GAAG,CAAC,CAAA,CAAC,0CAA0C;gBAC1D,eAAe,GAAG,wBAAc,CAAC,WAAW,CAAC,YAAY,CAAA;YAC3D,CAAC;YACD,+BAA+B;iBAC1B,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACxB,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAA;gBACnC,YAAY,GAAG,0BAA0B,KAAK,CAAC,QAAQ,CAAC,MAAM,MAAM,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAA;gBAC/F,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACxB,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;wBAC5C,YAAY,IAAI,KAAK,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;oBAC5C,CAAC;yBAAM,CAAC;wBACN,YAAY,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAA;oBAC5D,CAAC;gBACH,CAAC;gBAED,0CAA0C;gBAC1C,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;oBAClC,YAAY,IAAI,4DAA4D,CAAA;oBAC5E,eAAe,GAAG,wBAAc,CAAC,WAAW,CAAC,aAAa,CAAA;gBAC5D,CAAC;qBAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;oBACzC,YAAY,IAAI,uFAAuF,CAAA;oBACvG,eAAe,GAAG,wBAAc,CAAC,WAAW,CAAC,iBAAiB,CAAA;gBAChE,CAAC;qBAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;oBACzC,YAAY,IAAI,iEAAiE,CAAA;oBACjF,eAAe,GAAG,wBAAc,CAAC,WAAW,CAAC,SAAS,CAAA;gBACxD,CAAC;YACH,CAAC;YACD,uBAAuB;iBAClB,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;gBACvB,YAAY;oBACV,4DAA4D;wBAC5D,4BAA4B;wBAC5B,gCAAgC;wBAChC,uDAAuD,CAAA;gBACzD,eAAe,GAAG,wBAAc,CAAC,WAAW,CAAC,SAAS,CAAA;YACxD,CAAC;YACD,sBAAsB;iBACjB,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;gBACvB,YAAY,GAAG,KAAK,CAAC,OAAO,CAAA;YAC9B,CAAC;iBAAM,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;gBACzB,YAAY,GAAG,KAAK,CAAC,OAAO,CAAA;YAC9B,CAAC;YAED,mBAAmB;YACnB,IAAI,CAAC;gBACH,MAAM,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAA;gBACtC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,sBAAY,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC1E,YAAY,IAAI,8FAA8F,CAAA;oBAC9G,eAAe,GAAG,wBAAc,CAAC,WAAW,CAAC,SAAS,CAAA;gBACxD,CAAC;YACH,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,oBAAoB;YACtB,CAAC;YAED,MAAM;gBACJ,OAAO,EAAE,wBAAc,CAAC,iBAAiB;gBACzC,OAAO,EAAE,YAAY;gBACrB,MAAM,EAAE,WAAW;gBACnB,aAAa,EAAE,KAAK,CAAC,OAAO,IAAI,wBAAc,CAAC,OAAO;gBACtD,eAAe;aAChB,CAAA;QACH,CAAC;IACH,CAAC;IAED,wBAAwB;IACxB,eAAe,EAAE,KAAK,IAAI,EAAE;QAC1B,IAAI,CAAC;YACH,0CAA0C;YAC1C,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,gBAAgB,CAAC,CAAA;YAEhD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,oCAAoC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;YACrE,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,QAAQ,EAAE,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,CAAA;YAExF,oCAAoC;YACpC,IAAI,YAAY,GAAG,iCAAiC,CAAA;YACpD,IAAI,YAAY,GAAG,EAAE,CAAA;YAErB,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;gBAC7D,YAAY,IAAI,2CAA2C,CAAA;gBAC3D,YAAY;oBACV,qBAAqB;wBACrB,oCAAoC;wBACpC,gCAAgC;wBAChC,uCAAuC;wBACvC,gDAAgD;wBAChD,wBAAwB;wBACxB,mDAAmD;wBACnD,0CAA0C;wBAC1C,0CAA0C;wBAC1C,kCAAkC,CAAA;YACtC,CAAC;iBAAM,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBAC1B,YAAY,IAAI,2BAA2B,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAA;gBAClE,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACxB,YAAY;wBACV,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;gBACvG,CAAC;YACH,CAAC;iBAAM,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;gBACzC,YAAY,IAAI,kDAAkD,CAAA;gBAClE,YAAY;oBACV,wBAAwB;wBACxB,oCAAoC;wBACpC,uCAAuC;wBACvC,mBAAmB,CAAA;YACvB,CAAC;iBAAM,CAAC;gBACN,YAAY,IAAI,KAAK,KAAK,CAAC,OAAO,IAAI,eAAe,EAAE,CAAA;YACzD,CAAC;YAED,MAAM,aAAa,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAA;YAC7C,aAAa;YACb,aAAa,CAAC,OAAO,GAAG,YAAY,CAAA;YACpC,MAAM,aAAa,CAAA;QACrB,CAAC;IACH,CAAC;IAED,yBAAyB;IACzB,oBAAoB,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;QAC5C,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,KAAK,EAAE,CAAC,CAAA;YAExD,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,qCAAqC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;YACtE,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;YACzD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,qBAAqB;IACrB,iBAAiB,EAAE,KAAK,EAAE,OAAY,EAAE,EAAE;QACxC,IAAI,CAAC;YACH,iDAAiD;YACjD,MAAM,aAAa,GAAG,EAAE,GAAG,OAAO,EAAE,CAAA;YACpC,IAAI,aAAa,CAAC,IAAI,KAAK,qBAAW,CAAC,OAAO,EAAE,CAAC;gBAC/C,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC;oBACzB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,UAAU,EAAE,GAAG,aAAa,CAAC,MAAM,CAAA;oBACpF,aAAa,CAAC,MAAM,GAAG,UAAU,CAAA;gBACnC,CAAC;gBACD,OAAO,aAAa,CAAC,OAAO,CAAA;YAC9B,CAAC;YAED,0CAA0C;YAC1C,IAAI,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBACxE,aAAa,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAA;YACtC,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,eAAe,EAAE;gBAC9C,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;aACpC,CAAC,CAAA;YAEF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,iCAAiC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;YAClE,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAA;YACrD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,qBAAqB;IACrB,iBAAiB,EAAE,KAAK,EAAE,KAAa,EAAE,OAAY,EAAE,EAAE;QACvD,IAAI,CAAC;YACH,iDAAiD;YACjD,MAAM,aAAa,GAAG,EAAE,GAAG,OAAO,EAAE,CAAA;YACpC,IAAI,aAAa,CAAC,IAAI,KAAK,qBAAW,CAAC,OAAO,EAAE,CAAC;gBAC/C,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC;oBACzB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,UAAU,EAAE,GAAG,aAAa,CAAC,MAAM,CAAA;oBACpF,aAAa,CAAC,MAAM,GAAG,UAAU,CAAA;gBACnC,CAAC;gBACD,OAAO,aAAa,CAAC,OAAO,CAAA;YAC9B,CAAC;YAED,0CAA0C;YAC1C,IAAI,aAAa,CAAC,MAAM,IAAI,aAAa,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBACxE,aAAa,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAA;YACtC,CAAC;YAED,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,KAAK,EAAE,EAAE;gBACvD,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;aACpC,CAAC,CAAA;YAEF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,iCAAiC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;YAClE,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAA;YACrD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,qBAAqB;IACrB,iBAAiB,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;QACzC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,iBAAiB,KAAK,EAAE,EAAE;gBACvD,MAAM,EAAE,QAAQ;aACjB,CAAC,CAAA;YAEF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,iCAAiC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;YAClE,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAA;YACrD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,kBAAkB;IAClB,SAAS,EAAE,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,SAAS,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAA,CAAC,yBAAyB;YAClH,OAAO,MAAM,YAAY,CACvB,KAAK,IAAI,EAAE;gBACT,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;gBAC/C,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;YAC1D,CAAC,EACD,4BAAkB,CAAC,UAAU,EAC7B,QAAQ,CACT,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAA;YAClD,OAAO,EAAE,CAAA;QACX,CAAC;IACH,CAAC;IAED,wBAAwB;IACxB,cAAc,EAAE,KAAK,IAAI,EAAE;QACzB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,sBAAY,CAAC,SAAS,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAA,CAAC,yBAAyB;YAClH,OAAO,MAAM,YAAY,CACvB,KAAK,IAAI,EAAE;gBACT,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;gBACrD,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;YAC1D,CAAC,EACD,4BAAkB,CAAC,UAAU,EAC7B,QAAQ,CACT,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAA;YACxD,OAAO,EAAE,CAAA;QACX,CAAC;IACH,CAAC;IAED,yBAAyB;IACzB,eAAe,EAAE,KAAK,EAAE,KAAa,EAAE,EAAE;QACvC,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,oBAAoB,KAAK,EAAE,CAAC,CAAA;YAE3D,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,qCAAqC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;YACtE,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;YACzD,OAAO,EAAE,CAAA;QACX,CAAC;IACH,CAAC;IAED,sBAAsB;IACtB,iBAAiB,EAAE,KAAK,EAAE,KAAa,EAAE,KAAc,EAAE,EAAE;QACzD,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,mBAAmB,KAAK,EAAE,EAAE;gBACzD,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;iBACnC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC;aAChC,CAAC,CAAA;YAEF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,kCAAkC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;YACnE,CAAC;YAED,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAA;YACtD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;IAED,0DAA0D;IAC1D,mBAAmB,EAAE,KAAK,EAAE,KAAa,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAkB,EAAE;QACjF,IAAI,CAAC;YACH,wDAAwD;YACxD,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,qBAAqB,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,CAAA;YAE3F,sBAAsB;YACtB,MAAM,UAAU,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAA;YACrC,MAAM,QAAQ,GAAG,UAAU,GAAG,KAAK,CAAA;YACnC,OAAO,YAAY,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;QACjD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAA;YACxD,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;CACF,CAAA;AAED,sDAAsD;AAC/C,KAAK,UAAU,eAAe,CAAC,MAAW;IAC/C,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,mBAAmB,EAAE;YAChD,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;SAC7B,CAAC,CAAA;QAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YACvC,MAAM,IAAI,KAAK,CAAC,sBAAsB,QAAQ,CAAC,MAAM,MAAM,SAAS,EAAE,CAAC,CAAA;QACzE,CAAC;QAED,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;IAC9B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAA;QAClD,MAAM,KAAK,CAAA;IACb,CAAC;AACH,CAAC;AAED,0CAA0C;AACnC,KAAK,UAAU,qBAAqB,CAAC,OAAgB,EAAE,QAAkB;IAC9E,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,8BAA8B,EAAE;YAC3D,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;SAC5C,CAAC,CAAA;QAEF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;IAC9B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;QACzD,MAAM,KAAK,CAAA;IACb,CAAC;AACH,CAAC;AAED,gCAAgC;AACzB,KAAK,UAAU,eAAe,CAAC,MAAW;IAC/C,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,wBAAwB,EAAE;YACrD,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;SAC7B,CAAC,CAAA;QAEF,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;IAC9B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,KAAK,CAAC,CAAA;QACxD,MAAM,KAAK,CAAA;IACb,CAAC;AACH,CAAC;AAED,4BAA4B;AAC5B,SAAgB,cAAc;IAC5B,OAAO,IAAA,SAAM,GAAE,CAAA;AACjB,CAAC;AAED,oCAAoC;AAEpC,kBAAe,UAAU,CAAA",
      names: [],
      sources: ["E:\\zk-agent\\lib\\api\\fastgpt.ts"],
      sourcesContent: ["// @ts-nocheck\nimport axios from \"axios\"\nimport { DEFAULT_API_CONFIG, STORAGE_KEYS, PROXY_CONFIG, ERROR_MESSAGES, MODEL_TYPES } from \"@/config/fastgpt\"\n// This is a client-side file, so we don't use any sensitive environment variables here\nimport { v4 as uuidv4 } from \"uuid\"\n\n// FastGPT API \u54CD\u5E94\u7C7B\u578B\nexport interface FastGPTResponse {\n  id: string\n  object: string\n  created: number\n  model: string\n  choices: {\n    index: number\n    message: {\n      role: string\n      content: string\n    }\n    finish_reason: string\n  }[]\n  usage: {\n    prompt_tokens: number\n    completion_tokens: number\n    total_tokens: number\n  }\n  detail?: any\n  responseData?: any[]\n}\n\n// FastGPT API \u9519\u8BEF\u54CD\u5E94\u7C7B\u578B\nexport interface FastGPTErrorResponse {\n  error: {\n    code: number\n    message: string\n  }\n}\n\n// Define types for the API responses\ninterface ChatResponse {\n  id: string\n  choices: Array<{\n    message: {\n      role: string\n      content: string\n    }\n  }>\n  // Add other fields as needed\n}\n\n// FastGPT API \u5BA2\u6237\u7AEF\u7C7B\nexport class FastGPTClient {\n  private apiKey: string\n  private baseUrl: string\n  private useProxy: boolean\n  private retryConfig = {\n    maxRetries: 3,\n    retryDelay: 1000,\n    backoffMultiplier: 2,\n  }\n\n  constructor(apiKey: string, baseUrl?: string, useProxy = true) {\n    this.apiKey = apiKey\n    this.baseUrl = baseUrl || \"\"\n    this.useProxy = useProxy\n  }\n\n  // \u83B7\u53D6API URL\n  private getApiUrl(endpoint: string): string {\n    if (this.useProxy) {\n      return `/api/proxy${endpoint}`\n    }\n    return `${this.baseUrl}${endpoint}`\n  }\n\n  private async executeWithRetry<T>(operation: () => Promise<T>): Promise<T> {\n    let lastError: Error\n\n    for (let attempt = 0; attempt <= this.retryConfig.maxRetries; attempt++) {\n      try {\n        return await operation()\n      } catch (error) {\n        lastError = error as Error\n\n        if (attempt < this.retryConfig.maxRetries) {\n          const delay = this.retryConfig.retryDelay * Math.pow(this.retryConfig.backoffMultiplier, attempt)\n          await new Promise((resolve) => setTimeout(resolve, delay))\n          console.log(`FastGPT API retry attempt ${attempt + 1}/${this.retryConfig.maxRetries}`)\n        }\n      }\n    }\n\n    throw lastError!\n  }\n\n  // \u53D1\u9001\u804A\u5929\u8BF7\u6C42\n  async chat(params: {\n    model: string\n    messages: {\n      role: string\n      content:\n        | string\n        | Array<{\n            type: string\n            text?: string\n            image_url?: { url: string }\n            file_url?: string\n            name?: string\n            url?: string\n          }>\n    }[]\n    stream?: boolean\n    temperature?: number\n    max_tokens?: number\n    tools?: any[]\n    tool_choice?: string | object\n    files?: any[]\n    detail?: boolean\n    system?: string\n    user?: string\n    chatId?: string\n    responseChatItemId?: string\n    variables?: Record<string, any>\n  }): Promise<FastGPTResponse | ReadableStream> {\n    // Use server-side API route instead of direct API call\n    const url = \"/api/fastgpt/chat\"\n\n    return this.executeWithRetry(async () => {\n      // \u4FDD\u6301\u73B0\u6709chat\u65B9\u6CD5\u903B\u8F91\uFF0C\u4F46\u5305\u88C5\u5728\u91CD\u8BD5\u673A\u5236\u4E2D\n      try {\n        console.log(\"FastGPT API Request:\", {\n          method: \"POST\",\n          body: { ...params, apiKey: \"***\" }, // Hide API key in logs\n        })\n\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            ...params,\n            baseUrl: this.baseUrl,\n            useProxy: this.useProxy,\n          }),\n        })\n\n        if (!response.ok) {\n          let errorData: FastGPTErrorResponse\n          try {\n            errorData = await response.json()\n          } catch (e) {\n            // If response is not JSON format\n            const text = await response.text()\n            throw new Error(`FastGPT API Error: ${response.status} ${response.statusText} - ${text}`)\n          }\n          throw new Error(\n            `FastGPT API Error: ${errorData.error?.message || response.statusText} (${errorData.error?.code || response.status})`,\n          )\n        }\n\n        if (params.stream) {\n          return response.body as ReadableStream\n        }\n\n        return (await response.json()) as FastGPTResponse\n      } catch (error) {\n        console.error(\"FastGPT API request failed:\", error)\n        throw error\n      }\n    })\n  }\n\n  // \u521D\u59CB\u5316\u804A\u5929\n  async initChat(params: {\n    model?: string\n    agent_id?: string\n    knowledge_id?: string\n    user?: string\n  }): Promise<any> {\n    // Use server-side API route\n    const url = \"/api/fastgpt/init-chat\"\n\n    try {\n      console.log(\"FastGPT Init Chat Request:\", {\n        method: \"POST\",\n        body: params,\n      })\n\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...params,\n          baseUrl: this.baseUrl,\n          useProxy: this.useProxy,\n        }),\n      })\n\n      if (!response.ok) {\n        let errorData\n        try {\n          errorData = await response.json()\n        } catch (e) {\n          // If response is not JSON format\n          const text = await response.text()\n          throw new Error(`FastGPT API Error: ${response.status} ${response.statusText} - ${text}`)\n        }\n        throw new Error(\n          `FastGPT API Error: ${errorData.error?.message || response.statusText} (${errorData.error?.code || response.status})`,\n        )\n      }\n\n      return await response.json()\n    } catch (error) {\n      console.error(\"FastGPT init chat request failed:\", error)\n      throw error\n    }\n  }\n\n  // \u83B7\u53D6\u5386\u53F2\u5BF9\u8BDD\n  async getHistories(params: {\n    appId: string\n    offset?: number\n    pageSize?: number\n    source?: string\n  }): Promise<any> {\n    const url = this.getApiUrl(\"/api/core/chat/getHistories\")\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(params),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(\n          `FastGPT API Error: ${errorData.error?.message || response.statusText} (${errorData.error?.code || response.status})`,\n        )\n      }\n\n      return await response.json()\n    } catch (error) {\n      console.error(\"FastGPT get histories request failed:\", error)\n      throw error\n    }\n  }\n\n  // \u83B7\u53D6\u5BF9\u8BDD\u8BB0\u5F55\n  async getChatRecords(params: {\n    appId: string\n    chatId: string\n    offset?: number\n    pageSize?: number\n    loadCustomFeedbacks?: boolean\n  }): Promise<any> {\n    const url = this.getApiUrl(\"/api/core/chat/getPaginationRecords\")\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify(params),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(\n          `FastGPT API Error: ${errorData.error?.message || response.statusText} (${errorData.error?.code || response.status})`,\n        )\n      }\n\n      return await response.json()\n    } catch (error) {\n      console.error(\"FastGPT get chat records request failed:\", error)\n      throw error\n    }\n  }\n}\n\n// Create default client instance without API key\nexport const fastgptClient = new FastGPTClient(\n  \"\", // Empty API key - will be provided by server-side\n  process.env.NEXT_PUBLIC_FASTGPT_API_URL || \"https://zktecoaihub.com\",\n  true,\n)\n\n// Create API client instance\nconst apiClient = axios.create({\n  timeout: DEFAULT_API_CONFIG.timeout,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// Add request interceptor to log all requests\napiClient.interceptors.request.use(\n  (config) => {\n    console.log(`[API] ${config.method?.toUpperCase()} ${config.url}`)\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  },\n)\n\n// Add response interceptor for better error handling\napiClient.interceptors.response.use(\n  (response) => {\n    console.log(`[API] Response: ${response.status} ${response.statusText}`)\n    return response\n  },\n  (error) => {\n    console.error(\"[API] Request failed:\", error.message)\n\n    // Enhance error with more details\n    if (error.response) {\n      console.error(`[API] Response error: ${error.response.status} ${error.response.statusText}`)\n      if (error.response.data) {\n        console.error(\"[API] Error data:\", error.response.data)\n      }\n    } else if (error.request) {\n      console.error(\"[API] No response received\")\n    }\n\n    return Promise.reject(error)\n  },\n)\n\n// Path adapter for FastGPT API\nconst getApiPath = (path: string) => {\n  // Check if current API is FastGPT API\n  const baseUrl = apiClient.defaults.baseURL || \"\"\n  const isFastGPTAPI = baseUrl.includes(\"fastgpt\") || baseUrl.includes(\"zktecoaihub.com\")\n\n  // Adjust paths based on API provider\n  if (isFastGPTAPI) {\n    // Handle FastGPT API paths\n    if (path === \"/models\") {\n      return \"/api/v1/models\"\n    }\n\n    if (path === \"/apps\") {\n      return \"/api/v1/app/list\"\n    }\n\n    if (path.includes(\"/apps/\")) {\n      return path.replace(\"/apps/\", \"/api/v1/app/\")\n    }\n\n    // Add /api/v1 prefix if not already present\n    if (!path.startsWith(\"/api/v1\") && !path.startsWith(\"/api/core\")) {\n      return `/api/v1${path.startsWith(\"/\") ? path : `/${path}`}`\n    }\n  }\n\n  return path\n}\n\n// Override axios methods to use path adapter\nconst originalGet = apiClient.get\napiClient.get = function (url: string, config?: any) {\n  const adaptedUrl = getApiPath(url)\n  console.log(`[API] GET: Original path ${url} -> Adapted path ${adaptedUrl}`)\n  return originalGet.call(this, adaptedUrl, config)\n}\n\nconst originalPost = apiClient.post\napiClient.post = function (url: string, data?: any, config?: any) {\n  const adaptedUrl = getApiPath(url)\n  console.log(`[API] POST: Original path ${url} -> Adapted path ${adaptedUrl}`)\n  return originalPost.call(this, adaptedUrl, data, config)\n}\n\nconst originalPut = apiClient.put\napiClient.put = function (url: string, data?: any, config?: any) {\n  const adaptedUrl = getApiPath(url)\n  console.log(`[API] PUT: Original path ${url} -> Adapted path ${adaptedUrl}`)\n  return originalPut.call(this, adaptedUrl, data, config)\n}\n\nconst originalDelete = apiClient.delete\napiClient.delete = function (url: string, config?: any) {\n  const adaptedUrl = getApiPath(url)\n  console.log(`[API] DELETE: Original path ${url} -> Adapted path ${adaptedUrl}`)\n  return originalDelete.call(this, adaptedUrl, config)\n}\n\n// Check if API is configured\nexport const isApiConfigured = () => {\n  return !!apiClient.defaults.baseURL && !!apiClient.defaults.headers.common[\"Authorization\"]\n}\n\n// Initialize API config\nexport const initApiConfig = async () => {\n  try {\n    // Get API config from local storage\n    const configJson = localStorage.getItem(STORAGE_KEYS.API_CONFIG)\n    if (configJson) {\n      try {\n        const config = JSON.parse(configJson)\n        if (config && config.baseUrl && config.apiKey) {\n          // Use FastGPTApi.setApiConfig method\n          FastGPTApi.setApiConfig(\n            config.baseUrl,\n            config.apiKey,\n            config.useProxy === undefined ? true : config.useProxy, // Default to proxy enabled\n          )\n          return true\n        }\n      } catch (error) {\n        console.error(\"Failed to parse API config:\", error)\n      }\n    }\n    return false\n  } catch (error) {\n    console.error(\"Failed to initialize API config:\", error)\n    return false\n  }\n}\n\n// Enhanced retry function with better proxy handling\nconst retryRequest = async (\n  requestFn: () => Promise<any>,\n  maxRetries = DEFAULT_API_CONFIG.maxRetries,\n  useProxy = true, // Default to using proxy\n) => {\n  let lastError\n  let retryCount = 0\n\n  // First try with proxy if enabled\n  if (useProxy) {\n    try {\n      console.log(\"[API] Using proxy mode for request...\")\n\n      // Save current baseURL\n      const currentBaseUrl = apiClient.defaults.baseURL\n\n      // If current URL is not a proxy URL, temporarily switch to proxy URL\n      if (currentBaseUrl && !currentBaseUrl.startsWith(PROXY_CONFIG.route)) {\n        const originalUrl = localStorage.getItem(STORAGE_KEYS.API_URL) || \"\"\n        apiClient.defaults.baseURL = PROXY_CONFIG.getProxyUrl(originalUrl)\n      }\n\n      try {\n        const result = await requestFn()\n        // If successful, keep using proxy\n        localStorage.setItem(STORAGE_KEYS.USE_PROXY, \"true\")\n        return result\n      } finally {\n        // Restore original baseURL\n        apiClient.defaults.baseURL = currentBaseUrl\n      }\n    } catch (proxyError) {\n      console.log(\"[API] Proxy mode failed:\", proxyError.message)\n      lastError = proxyError\n    }\n  }\n\n  // Try direct request if proxy failed or not enabled\n  try {\n    return await requestFn()\n  } catch (error) {\n    lastError = error\n    console.log(\"[API] Direct request failed:\", error.message)\n  }\n\n  // Start retry process\n  while (retryCount < maxRetries) {\n    try {\n      console.log(`[API] Retry ${retryCount + 1}/${maxRetries}...`)\n\n      // Add delay to avoid frequent requests\n      await new Promise((resolve) => setTimeout(resolve, 1000 * (retryCount + 1)))\n\n      // Always try with proxy on retries (more reliable)\n      const currentBaseUrl = apiClient.defaults.baseURL\n\n      // Switch to proxy URL\n      if (currentBaseUrl && !currentBaseUrl.startsWith(PROXY_CONFIG.route)) {\n        const originalUrl = localStorage.getItem(STORAGE_KEYS.API_URL) || \"\"\n        apiClient.defaults.baseURL = PROXY_CONFIG.getProxyUrl(originalUrl)\n      }\n\n      try {\n        return await requestFn()\n      } finally {\n        // Restore original baseURL\n        apiClient.defaults.baseURL = currentBaseUrl\n      }\n    } catch (error) {\n      lastError = error\n      retryCount++\n      console.log(`[API] Retry ${retryCount}/${maxRetries} failed:`, error.message)\n    }\n  }\n\n  throw lastError\n}\n\n// Safe fetch function for handling non-JSON responses\nconst safeFetch = async (url: string, options: RequestInit = {}) => {\n  try {\n    const response = await fetch(url, options)\n\n    // Check response status\n    if (!response.ok) {\n      const errorText = await response.text()\n      console.warn(`[API] Request failed (${response.status}): ${errorText.substring(0, 100)}...`)\n      return { success: false, error: `Request failed: ${response.status} ${response.statusText}` }\n    }\n\n    // Check content type\n    const contentType = response.headers.get(\"content-type\")\n    if (contentType && contentType.includes(\"application/json\")) {\n      // If JSON, parse and return\n      return { success: true, data: await response.json() }\n    } else {\n      // If not JSON, return text\n      const text = await response.text()\n      console.warn(`[API] Response is not JSON format: ${contentType}, content: ${text.substring(0, 100)}...`)\n      return { success: false, error: \"Response is not JSON format\", text }\n    }\n  } catch (error) {\n    console.error(\"[API] Request failed:\", error)\n    return { success: false, error: error instanceof Error ? error.message : \"Unknown error\" }\n  }\n}\n\n// FastGPT API interface\nconst FastGPTApi = {\n  // Set API configuration\n  setApiConfig: (baseUrl: string, apiKey: string, useProxy = true) => {\n    // Default to proxy enabled\n    // Ensure baseUrl ends with /\n    const normalizedBaseUrl = baseUrl.endsWith(\"/\") ? baseUrl : `${baseUrl}/`\n\n    // If using proxy, transform baseUrl\n    const effectiveBaseUrl = useProxy ? PROXY_CONFIG.getProxyUrl(normalizedBaseUrl) : normalizedBaseUrl\n\n    apiClient.defaults.baseURL = effectiveBaseUrl\n\n    // Store API key in localStorage (only for UI state management)\n    // The actual API key will be used only on the server side\n    localStorage.setItem(STORAGE_KEYS.API_URL, normalizedBaseUrl)\n    localStorage.setItem(STORAGE_KEYS.API_KEY, apiKey)\n    localStorage.setItem(STORAGE_KEYS.USE_PROXY, useProxy.toString())\n\n    // Save to server file\n    fetch(\"/api/db/api-config\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        baseUrl: normalizedBaseUrl,\n        apiKey,\n        useProxy,\n      }),\n    })\n      .then((response) => response.json())\n      .then((result) => {\n        if (result.success) {\n          console.log(\"[API] API configuration saved to server file\")\n        } else {\n          console.warn(\"[API] Failed to save API configuration to server file:\", result.error)\n        }\n      })\n      .catch((error) => {\n        console.error(\"[API] Failed to save API configuration to server file:\", error)\n      })\n  },\n\n  // Test API connection\n  testConnection: async (useProxy = true) => {\n    try {\n      // Validate URL format\n      const baseUrl = apiClient.defaults.baseURL\n      if (!baseUrl) {\n        throw {\n          message: ERROR_MESSAGES.CONNECTION_FAILED,\n          details: \"API endpoint URL not set\",\n          status: 0,\n        }\n      }\n\n      // Set shorter timeout for testing\n      const controller = new AbortController()\n      const timeoutId = setTimeout(() => controller.abort(), DEFAULT_API_CONFIG.testTimeout)\n\n      // If current is not using proxy but need to test with proxy\n      const currentUrl = apiClient.defaults.baseURL\n      const originalUrl = localStorage.getItem(STORAGE_KEYS.API_URL) || \"\"\n\n      // Temporarily modify baseURL for testing\n      if (useProxy && !currentUrl?.startsWith(PROXY_CONFIG.route)) {\n        apiClient.defaults.baseURL = PROXY_CONFIG.getProxyUrl(originalUrl)\n      }\n\n      try {\n        // First try with /models endpoint\n        console.log(\"[API] Trying to connect to API endpoint:\", apiClient.defaults.baseURL)\n        const response = await apiClient.get(\"/models\", {\n          timeout: DEFAULT_API_CONFIG.testTimeout,\n          signal: controller.signal,\n        })\n        clearTimeout(timeoutId)\n\n        // Restore original baseURL\n        if (useProxy && !currentUrl?.startsWith(PROXY_CONFIG.route)) {\n          apiClient.defaults.baseURL = currentUrl\n        }\n\n        return { success: true, data: response.data, useProxy }\n      } catch (modelError) {\n        // If /models endpoint fails, try with root endpoint\n        console.log(\"[API] Trying to test connection with root endpoint...\", modelError)\n\n        try {\n          const rootResponse = await apiClient.get(\"/\", {\n            timeout: DEFAULT_API_CONFIG.testTimeout,\n            signal: controller.signal,\n          })\n          clearTimeout(timeoutId)\n\n          // Restore original baseURL\n          if (useProxy && !currentUrl?.startsWith(PROXY_CONFIG.route)) {\n            apiClient.defaults.baseURL = currentUrl\n          }\n\n          return { success: true, data: rootResponse.data, useProxy }\n        } catch (rootError) {\n          clearTimeout(timeoutId)\n\n          // Restore original baseURL\n          if (useProxy && !currentUrl?.startsWith(PROXY_CONFIG.route)) {\n            apiClient.defaults.baseURL = currentUrl\n          }\n\n          // If currently not using proxy, try with proxy\n          if (!useProxy) {\n            console.log(\"[API] Direct connection failed, trying with proxy...\")\n            try {\n              return await FastGPTApi.testConnection(true)\n            } catch (proxyError) {\n              console.error(\"[API] Proxy connection also failed:\", proxyError)\n              throw rootError // If proxy also fails, throw original error\n            }\n          }\n\n          throw rootError // If root endpoint also fails, throw error\n        }\n      }\n    } catch (error) {\n      console.error(\"[API] Test API connection failed:\", error)\n\n      // Build detailed error information\n      let errorDetails = ERROR_MESSAGES.UNKNOWN\n      let errorStatus = 0\n      let suggestedAction = \"\"\n\n      // Handle timeout error\n      if (error.name === \"AbortError\" || error.code === \"ECONNABORTED\") {\n        errorDetails = ERROR_MESSAGES.TIMEOUT\n        errorStatus = 408 // Request Timeout\n        suggestedAction = ERROR_MESSAGES.SUGGESTIONS.TRY_PROXY\n      }\n      // Handle network error\n      else if (error.message && error.message.includes(\"Network Error\")) {\n        errorDetails = ERROR_MESSAGES.NETWORK_ERROR\n        errorStatus = 0 // Network errors have no HTTP status code\n        suggestedAction = ERROR_MESSAGES.SUGGESTIONS.ENABLE_PROXY\n      }\n      // Handle server returned error\n      else if (error.response) {\n        errorStatus = error.response.status\n        errorDetails = `Server returned error: ${error.response.status} - ${error.response.statusText}`\n        if (error.response.data) {\n          if (typeof error.response.data === \"string\") {\n            errorDetails += `\\n${error.response.data}`\n          } else {\n            errorDetails += `\\n${JSON.stringify(error.response.data)}`\n          }\n        }\n\n        // Friendly tips for specific status codes\n        if (error.response.status === 401) {\n          errorDetails += \"\\nAPI key is invalid or expired, please check your API key\"\n          suggestedAction = ERROR_MESSAGES.SUGGESTIONS.CHECK_API_KEY\n        } else if (error.response.status === 403) {\n          errorDetails += \"\\nYou don't have permission to access this resource, please check API key permissions\"\n          suggestedAction = ERROR_MESSAGES.SUGGESTIONS.CHECK_PERMISSIONS\n        } else if (error.response.status === 404) {\n          errorDetails += \"\\nAPI endpoint does not exist, please check URL path is correct\"\n          suggestedAction = ERROR_MESSAGES.SUGGESTIONS.CHECK_URL\n        }\n      }\n      // Handle request error\n      else if (error.request) {\n        errorDetails =\n          \"Request sent but no response received. Possible reasons:\\n\" +\n          \"1. Server is not running\\n\" +\n          \"2. Network connection issues\\n\" +\n          \"3. Firewall or security settings blocking the request\"\n        suggestedAction = ERROR_MESSAGES.SUGGESTIONS.TRY_PROXY\n      }\n      // Handle other errors\n      else if (error.details) {\n        errorDetails = error.details\n      } else if (error.message) {\n        errorDetails = error.message\n      }\n\n      // Check URL format\n      try {\n        const url = apiClient.defaults.baseURL\n        if (url && !url.startsWith(\"http\") && !url.startsWith(PROXY_CONFIG.route)) {\n          errorDetails += \"\\nAPI endpoint URL format is incorrect, please ensure it includes http:// or https:// prefix\"\n          suggestedAction = ERROR_MESSAGES.SUGGESTIONS.CHECK_URL\n        }\n      } catch (e) {\n        // URL parsing error\n      }\n\n      throw {\n        message: ERROR_MESSAGES.CONNECTION_FAILED,\n        details: errorDetails,\n        status: errorStatus,\n        originalError: error.message || ERROR_MESSAGES.UNKNOWN,\n        suggestedAction,\n      }\n    }\n  },\n\n  // Get applications list\n  getApplications: async () => {\n    try {\n      // Use safe fetch to get applications list\n      const result = await safeFetch(\"/api/db/agents\")\n\n      if (!result.success) {\n        throw new Error(`Failed to get applications list: ${result.error}`)\n      }\n\n      return result.data\n    } catch (error) {\n      console.error(\"Failed to get applications list:\", error.response?.data || error.message)\n\n      // Build more detailed error message\n      let errorMessage = \"Failed to get applications list\"\n      let errorDetails = \"\"\n\n      if (error.message && error.message.includes(\"Network Error\")) {\n        errorMessage += \": Network error, cannot connect to server\"\n        errorDetails =\n          \"Possible reasons:\\n\" +\n          \"1. API endpoint URL is incorrect\\n\" +\n          \"2. Network connection issues\\n\" +\n          \"3. Cross-origin (CORS) restrictions\\n\" +\n          \"4. Server is not running or not accessible\\n\\n\" +\n          \"Suggested solutions:\\n\" +\n          \"- Enable proxy mode (in API configuration page)\\n\" +\n          \"- Check if API endpoint URL is correct\\n\" +\n          \"- Confirm network connection is normal\\n\" +\n          \"- Check if API server is running\"\n      } else if (error.response) {\n        errorMessage += `: Server returned error ${error.response.status}`\n        if (error.response.data) {\n          errorDetails =\n            typeof error.response.data === \"string\" ? error.response.data : JSON.stringify(error.response.data)\n        }\n      } else if (error.code === \"ECONNABORTED\") {\n        errorMessage += \": Request timeout, server response time too long\"\n        errorDetails =\n          \"Suggested solutions:\\n\" +\n          \"- Check network connection speed\\n\" +\n          \"- Confirm API server load is normal\\n\" +\n          \"- Try again later\"\n      } else {\n        errorMessage += `: ${error.message || \"Unknown error\"}`\n      }\n\n      const enhancedError = new Error(errorMessage)\n      // @ts-ignore\n      enhancedError.details = errorDetails\n      throw enhancedError\n    }\n  },\n\n  // Get application detail\n  getApplicationDetail: async (appId: string) => {\n    try {\n      const result = await safeFetch(`/api/db/agent/${appId}`)\n\n      if (!result.success) {\n        throw new Error(`Failed to get application detail: ${result.error}`)\n      }\n\n      return result.data\n    } catch (error) {\n      console.error(\"Failed to get application detail:\", error)\n      throw error\n    }\n  },\n\n  // Create application\n  createApplication: async (appData: any) => {\n    try {\n      // If FastGPT type, remove unnecessary parameters\n      const processedData = { ...appData }\n      if (processedData.type === MODEL_TYPES.FASTGPT) {\n        if (processedData.config) {\n          const { systemPrompt, temperature, maxTokens, ...restConfig } = processedData.config\n          processedData.config = restConfig\n        }\n        delete processedData.modelId\n      }\n\n      // Ensure proxy mode is enabled by default\n      if (processedData.config && processedData.config.useProxy === undefined) {\n        processedData.config.useProxy = true\n      }\n\n      const result = await safeFetch(\"/api/db/agent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(processedData),\n      })\n\n      if (!result.success) {\n        throw new Error(`Failed to create application: ${result.error}`)\n      }\n\n      return result.data\n    } catch (error) {\n      console.error(\"Failed to create application:\", error)\n      throw error\n    }\n  },\n\n  // Update application\n  updateApplication: async (appId: string, appData: any) => {\n    try {\n      // If FastGPT type, remove unnecessary parameters\n      const processedData = { ...appData }\n      if (processedData.type === MODEL_TYPES.FASTGPT) {\n        if (processedData.config) {\n          const { systemPrompt, temperature, maxTokens, ...restConfig } = processedData.config\n          processedData.config = restConfig\n        }\n        delete processedData.modelId\n      }\n\n      // Ensure proxy mode is enabled by default\n      if (processedData.config && processedData.config.useProxy === undefined) {\n        processedData.config.useProxy = true\n      }\n\n      const result = await safeFetch(`/api/db/agent/${appId}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(processedData),\n      })\n\n      if (!result.success) {\n        throw new Error(`Failed to update application: ${result.error}`)\n      }\n\n      return result.data\n    } catch (error) {\n      console.error(\"Failed to update application:\", error)\n      throw error\n    }\n  },\n\n  // Delete application\n  deleteApplication: async (appId: string) => {\n    try {\n      const result = await safeFetch(`/api/db/agent/${appId}`, {\n        method: \"DELETE\",\n      })\n\n      if (!result.success) {\n        throw new Error(`Failed to delete application: ${result.error}`)\n      }\n\n      return result.data\n    } catch (error) {\n      console.error(\"Failed to delete application:\", error)\n      throw error\n    }\n  },\n\n  // Get models list\n  getModels: async () => {\n    try {\n      const useProxy = localStorage.getItem(STORAGE_KEYS.USE_PROXY) === \"false\" ? false : true // Default to using proxy\n      return await retryRequest(\n        async () => {\n          const response = await apiClient.get(\"/models\")\n          return Array.isArray(response.data) ? response.data : []\n        },\n        DEFAULT_API_CONFIG.maxRetries,\n        useProxy,\n      )\n    } catch (error) {\n      console.error(\"Failed to get models list:\", error)\n      return []\n    }\n  },\n\n  // Get voice models list\n  getVoiceModels: async () => {\n    try {\n      const useProxy = localStorage.getItem(STORAGE_KEYS.USE_PROXY) === \"false\" ? false : true // Default to using proxy\n      return await retryRequest(\n        async () => {\n          const response = await apiClient.get(\"/voice/models\")\n          return Array.isArray(response.data) ? response.data : []\n        },\n        DEFAULT_API_CONFIG.maxRetries,\n        useProxy,\n      )\n    } catch (error) {\n      console.error(\"Failed to get voice models list:\", error)\n      return []\n    }\n  },\n\n  // Get chat sessions list\n  getChatSessions: async (appId: string) => {\n    try {\n      const result = await safeFetch(`/api/db/sessions/${appId}`)\n\n      if (!result.success) {\n        throw new Error(`Failed to get chat sessions list: ${result.error}`)\n      }\n\n      return result.data\n    } catch (error) {\n      console.error(\"Failed to get chat sessions list:\", error)\n      return []\n    }\n  },\n\n  // Create chat session\n  createChatSession: async (appId: string, title?: string) => {\n    try {\n      const result = await safeFetch(`/api/db/session/${appId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ title }),\n      })\n\n      if (!result.success) {\n        throw new Error(`Failed to create chat session: ${result.error}`)\n      }\n\n      return result.data\n    } catch (error) {\n      console.error(\"Failed to create chat session:\", error)\n      throw error\n    }\n  },\n\n  // Add pagination parameters to getFavoriteMessages method\n  getFavoriteMessages: async (appId: string, page = 1, limit = 20): Promise<any[]> => {\n    try {\n      // Simulate getting favorite messages from local storage\n      const allFavorites = JSON.parse(localStorage.getItem(`favorite_messages_${appId}`) || \"[]\")\n\n      // Simulate pagination\n      const startIndex = (page - 1) * limit\n      const endIndex = startIndex + limit\n      return allFavorites.slice(startIndex, endIndex)\n    } catch (error) {\n      console.error(\"Failed to get favorite messages:\", error)\n      throw error\n    }\n  },\n}\n\n// Function to call the server-side API route for chat\nexport async function chatWithFastGPT(params: any): Promise<ChatResponse> {\n  try {\n    const response = await fetch(\"/api/fastgpt/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(params),\n    })\n\n    if (!response.ok) {\n      const errorText = await response.text()\n      throw new Error(`FastGPT API error: ${response.status} - ${errorText}`)\n    }\n\n    return await response.json()\n  } catch (error) {\n    console.error(\"Error calling FastGPT API:\", error)\n    throw error\n  }\n}\n\n// Function to test the FastGPT connection\nexport async function testFastGPTConnection(baseUrl?: string, useProxy?: boolean): Promise<any> {\n  try {\n    const response = await fetch(\"/api/fastgpt/test-connection\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ baseUrl, useProxy }),\n    })\n\n    return await response.json()\n  } catch (error) {\n    console.error(\"Error testing FastGPT connection:\", error)\n    throw error\n  }\n}\n\n// Function to initialize a chat\nexport async function initFastGPTChat(params: any): Promise<any> {\n  try {\n    const response = await fetch(\"/api/fastgpt/init-chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(params),\n    })\n\n    return await response.json()\n  } catch (error) {\n    console.error(\"Error initializing FastGPT chat:\", error)\n    throw error\n  }\n}\n\n// Generate a unique chat ID\nexport function generateChatId(): string {\n  return uuidv4()\n}\n\n// Other utility functions as needed\n\nexport default FastGPTApi\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "06d1b373f4a759db6ca2d776b3641d9659fa48e9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2le3ngdd9p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2le3ngdd9p();
var __importDefault =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[0]++,
/* istanbul ignore next */
(cov_2le3ngdd9p().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2le3ngdd9p().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2le3ngdd9p().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[0]++;
  cov_2le3ngdd9p().s[1]++;
  return /* istanbul ignore next */(cov_2le3ngdd9p().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2le3ngdd9p().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2le3ngdd9p().s[3]++;
exports.initApiConfig = exports.isApiConfigured = exports.fastgptClient = exports.FastGPTClient = void 0;
/* istanbul ignore next */
cov_2le3ngdd9p().s[4]++;
exports.chatWithFastGPT = chatWithFastGPT;
/* istanbul ignore next */
cov_2le3ngdd9p().s[5]++;
exports.testFastGPTConnection = testFastGPTConnection;
/* istanbul ignore next */
cov_2le3ngdd9p().s[6]++;
exports.initFastGPTChat = initFastGPTChat;
/* istanbul ignore next */
cov_2le3ngdd9p().s[7]++;
exports.generateChatId = generateChatId;
// @ts-nocheck
const axios_1 =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[8]++, __importDefault(require("axios")));
const fastgpt_1 =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[9]++, require("@/config/fastgpt"));
// This is a client-side file, so we don't use any sensitive environment variables here
const uuid_1 =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[10]++, require("uuid"));
// FastGPT API 客户端类
class FastGPTClient {
  constructor(apiKey, baseUrl, useProxy =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[3][0]++, true)) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[1]++;
    cov_2le3ngdd9p().s[11]++;
    this.retryConfig = {
      maxRetries: 3,
      retryDelay: 1000,
      backoffMultiplier: 2
    };
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[12]++;
    this.apiKey = apiKey;
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[13]++;
    this.baseUrl =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[4][0]++, baseUrl) ||
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[4][1]++, "");
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[14]++;
    this.useProxy = useProxy;
  }
  // 获取API URL
  getApiUrl(endpoint) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[2]++;
    cov_2le3ngdd9p().s[15]++;
    if (this.useProxy) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[5][0]++;
      cov_2le3ngdd9p().s[16]++;
      return `/api/proxy${endpoint}`;
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[5][1]++;
    }
    cov_2le3ngdd9p().s[17]++;
    return `${this.baseUrl}${endpoint}`;
  }
  async executeWithRetry(operation) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[3]++;
    let lastError;
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[18]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[19]++, 0); attempt <= this.retryConfig.maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[20]++;
      try {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[21]++;
        return await operation();
      } catch (error) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[22]++;
        lastError = error;
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[23]++;
        if (attempt < this.retryConfig.maxRetries) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[6][0]++;
          const delay =
          /* istanbul ignore next */
          (cov_2le3ngdd9p().s[24]++, this.retryConfig.retryDelay * Math.pow(this.retryConfig.backoffMultiplier, attempt));
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[25]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_2le3ngdd9p().f[4]++;
            cov_2le3ngdd9p().s[26]++;
            return setTimeout(resolve, delay);
          });
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[27]++;
          console.log(`FastGPT API retry attempt ${attempt + 1}/${this.retryConfig.maxRetries}`);
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[6][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[28]++;
    throw lastError;
  }
  // 发送聊天请求
  async chat(params) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[5]++;
    // Use server-side API route instead of direct API call
    const url =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[29]++, "/api/fastgpt/chat");
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[30]++;
    return this.executeWithRetry(async () => {
      /* istanbul ignore next */
      cov_2le3ngdd9p().f[6]++;
      cov_2le3ngdd9p().s[31]++;
      // 保持现有chat方法逻辑，但包装在重试机制中
      try {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[32]++;
        console.log("FastGPT API Request:", {
          method: "POST",
          body: {
            ...params,
            apiKey: "***"
          } // Hide API key in logs
        });
        const response =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[33]++, await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            ...params,
            baseUrl: this.baseUrl,
            useProxy: this.useProxy
          })
        }));
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[34]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[7][0]++;
          let errorData;
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[35]++;
          try {
            /* istanbul ignore next */
            cov_2le3ngdd9p().s[36]++;
            errorData = await response.json();
          } catch (e) {
            // If response is not JSON format
            const text =
            /* istanbul ignore next */
            (cov_2le3ngdd9p().s[37]++, await response.text());
            /* istanbul ignore next */
            cov_2le3ngdd9p().s[38]++;
            throw new Error(`FastGPT API Error: ${response.status} ${response.statusText} - ${text}`);
          }
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[39]++;
          throw new Error(`FastGPT API Error: ${
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[8][0]++, errorData.error?.message) ||
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[8][1]++, response.statusText)} (${
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[9][0]++, errorData.error?.code) ||
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[9][1]++, response.status)})`);
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[7][1]++;
        }
        cov_2le3ngdd9p().s[40]++;
        if (params.stream) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[10][0]++;
          cov_2le3ngdd9p().s[41]++;
          return response.body;
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[10][1]++;
        }
        cov_2le3ngdd9p().s[42]++;
        return await response.json();
      } catch (error) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[43]++;
        console.error("FastGPT API request failed:", error);
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[44]++;
        throw error;
      }
    });
  }
  // 初始化聊天
  async initChat(params) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[7]++;
    // Use server-side API route
    const url =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[45]++, "/api/fastgpt/init-chat");
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[46]++;
    try {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[47]++;
      console.log("FastGPT Init Chat Request:", {
        method: "POST",
        body: params
      });
      const response =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[48]++, await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          ...params,
          baseUrl: this.baseUrl,
          useProxy: this.useProxy
        })
      }));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[49]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[11][0]++;
        let errorData;
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[50]++;
        try {
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[51]++;
          errorData = await response.json();
        } catch (e) {
          // If response is not JSON format
          const text =
          /* istanbul ignore next */
          (cov_2le3ngdd9p().s[52]++, await response.text());
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[53]++;
          throw new Error(`FastGPT API Error: ${response.status} ${response.statusText} - ${text}`);
        }
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[54]++;
        throw new Error(`FastGPT API Error: ${
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[12][0]++, errorData.error?.message) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[12][1]++, response.statusText)} (${
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[13][0]++, errorData.error?.code) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[13][1]++, response.status)})`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[11][1]++;
      }
      cov_2le3ngdd9p().s[55]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[56]++;
      console.error("FastGPT init chat request failed:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[57]++;
      throw error;
    }
  }
  // 获取历史对话
  async getHistories(params) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[8]++;
    const url =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[58]++, this.getApiUrl("/api/core/chat/getHistories"));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[59]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[60]++, await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.apiKey}`
        },
        body: JSON.stringify(params)
      }));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[61]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[14][0]++;
        const errorData =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[62]++, await response.json());
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[63]++;
        throw new Error(`FastGPT API Error: ${
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[15][0]++, errorData.error?.message) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[15][1]++, response.statusText)} (${
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[16][0]++, errorData.error?.code) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[16][1]++, response.status)})`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[14][1]++;
      }
      cov_2le3ngdd9p().s[64]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[65]++;
      console.error("FastGPT get histories request failed:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[66]++;
      throw error;
    }
  }
  // 获取对话记录
  async getChatRecords(params) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[9]++;
    const url =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[67]++, this.getApiUrl("/api/core/chat/getPaginationRecords"));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[68]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[69]++, await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.apiKey}`
        },
        body: JSON.stringify(params)
      }));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[70]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[17][0]++;
        const errorData =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[71]++, await response.json());
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[72]++;
        throw new Error(`FastGPT API Error: ${
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[18][0]++, errorData.error?.message) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[18][1]++, response.statusText)} (${
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[19][0]++, errorData.error?.code) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[19][1]++, response.status)})`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[17][1]++;
      }
      cov_2le3ngdd9p().s[73]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[74]++;
      console.error("FastGPT get chat records request failed:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[75]++;
      throw error;
    }
  }
}
/* istanbul ignore next */
cov_2le3ngdd9p().s[76]++;
exports.FastGPTClient = FastGPTClient;
// Create default client instance without API key
/* istanbul ignore next */
cov_2le3ngdd9p().s[77]++;
exports.fastgptClient = new FastGPTClient("",
// Empty API key - will be provided by server-side
/* istanbul ignore next */
(cov_2le3ngdd9p().b[20][0]++, process.env.NEXT_PUBLIC_FASTGPT_API_URL) ||
/* istanbul ignore next */
(cov_2le3ngdd9p().b[20][1]++, "https://zktecoaihub.com"), true);
// Create API client instance
const apiClient =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[78]++, axios_1.default.create({
  timeout: fastgpt_1.DEFAULT_API_CONFIG.timeout,
  headers: {
    "Content-Type": "application/json"
  }
}));
// Add request interceptor to log all requests
/* istanbul ignore next */
cov_2le3ngdd9p().s[79]++;
apiClient.interceptors.request.use(config => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[10]++;
  cov_2le3ngdd9p().s[80]++;
  console.log(`[API] ${config.method?.toUpperCase()} ${config.url}`);
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[81]++;
  return config;
}, error => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[11]++;
  cov_2le3ngdd9p().s[82]++;
  return Promise.reject(error);
});
// Add response interceptor for better error handling
/* istanbul ignore next */
cov_2le3ngdd9p().s[83]++;
apiClient.interceptors.response.use(response => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[12]++;
  cov_2le3ngdd9p().s[84]++;
  console.log(`[API] Response: ${response.status} ${response.statusText}`);
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[85]++;
  return response;
}, error => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[13]++;
  cov_2le3ngdd9p().s[86]++;
  console.error("[API] Request failed:", error.message);
  // Enhance error with more details
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[87]++;
  if (error.response) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().b[21][0]++;
    cov_2le3ngdd9p().s[88]++;
    console.error(`[API] Response error: ${error.response.status} ${error.response.statusText}`);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[89]++;
    if (error.response.data) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[22][0]++;
      cov_2le3ngdd9p().s[90]++;
      console.error("[API] Error data:", error.response.data);
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[22][1]++;
    }
  } else {
    /* istanbul ignore next */
    cov_2le3ngdd9p().b[21][1]++;
    cov_2le3ngdd9p().s[91]++;
    if (error.request) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[23][0]++;
      cov_2le3ngdd9p().s[92]++;
      console.error("[API] No response received");
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[23][1]++;
    }
  }
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[93]++;
  return Promise.reject(error);
});
// Path adapter for FastGPT API
/* istanbul ignore next */
cov_2le3ngdd9p().s[94]++;
const getApiPath = path => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[14]++;
  // Check if current API is FastGPT API
  const baseUrl =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().s[95]++,
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[24][0]++, apiClient.defaults.baseURL) ||
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[24][1]++, ""));
  const isFastGPTAPI =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().s[96]++,
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[25][0]++, baseUrl.includes("fastgpt")) ||
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[25][1]++, baseUrl.includes("zktecoaihub.com")));
  // Adjust paths based on API provider
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[97]++;
  if (isFastGPTAPI) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().b[26][0]++;
    cov_2le3ngdd9p().s[98]++;
    // Handle FastGPT API paths
    if (path === "/models") {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[27][0]++;
      cov_2le3ngdd9p().s[99]++;
      return "/api/v1/models";
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[27][1]++;
    }
    cov_2le3ngdd9p().s[100]++;
    if (path === "/apps") {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[28][0]++;
      cov_2le3ngdd9p().s[101]++;
      return "/api/v1/app/list";
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[28][1]++;
    }
    cov_2le3ngdd9p().s[102]++;
    if (path.includes("/apps/")) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[29][0]++;
      cov_2le3ngdd9p().s[103]++;
      return path.replace("/apps/", "/api/v1/app/");
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[29][1]++;
    }
    // Add /api/v1 prefix if not already present
    cov_2le3ngdd9p().s[104]++;
    if (
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[31][0]++, !path.startsWith("/api/v1")) &&
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[31][1]++, !path.startsWith("/api/core"))) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[30][0]++;
      cov_2le3ngdd9p().s[105]++;
      return `/api/v1${path.startsWith("/") ?
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[32][0]++, path) :
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[32][1]++, `/${path}`)}`;
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[30][1]++;
    }
  } else
  /* istanbul ignore next */
  {
    cov_2le3ngdd9p().b[26][1]++;
  }
  cov_2le3ngdd9p().s[106]++;
  return path;
};
// Override axios methods to use path adapter
const originalGet =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[107]++, apiClient.get);
/* istanbul ignore next */
cov_2le3ngdd9p().s[108]++;
apiClient.get = function (url, config) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[15]++;
  const adaptedUrl =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().s[109]++, getApiPath(url));
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[110]++;
  console.log(`[API] GET: Original path ${url} -> Adapted path ${adaptedUrl}`);
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[111]++;
  return originalGet.call(this, adaptedUrl, config);
};
const originalPost =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[112]++, apiClient.post);
/* istanbul ignore next */
cov_2le3ngdd9p().s[113]++;
apiClient.post = function (url, data, config) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[16]++;
  const adaptedUrl =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().s[114]++, getApiPath(url));
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[115]++;
  console.log(`[API] POST: Original path ${url} -> Adapted path ${adaptedUrl}`);
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[116]++;
  return originalPost.call(this, adaptedUrl, data, config);
};
const originalPut =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[117]++, apiClient.put);
/* istanbul ignore next */
cov_2le3ngdd9p().s[118]++;
apiClient.put = function (url, data, config) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[17]++;
  const adaptedUrl =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().s[119]++, getApiPath(url));
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[120]++;
  console.log(`[API] PUT: Original path ${url} -> Adapted path ${adaptedUrl}`);
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[121]++;
  return originalPut.call(this, adaptedUrl, data, config);
};
const originalDelete =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[122]++, apiClient.delete);
/* istanbul ignore next */
cov_2le3ngdd9p().s[123]++;
apiClient.delete = function (url, config) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[18]++;
  const adaptedUrl =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().s[124]++, getApiPath(url));
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[125]++;
  console.log(`[API] DELETE: Original path ${url} -> Adapted path ${adaptedUrl}`);
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[126]++;
  return originalDelete.call(this, adaptedUrl, config);
};
// Check if API is configured
/* istanbul ignore next */
cov_2le3ngdd9p().s[127]++;
const isApiConfigured = () => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[19]++;
  cov_2le3ngdd9p().s[128]++;
  return /* istanbul ignore next */(cov_2le3ngdd9p().b[33][0]++, !!apiClient.defaults.baseURL) &&
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[33][1]++, !!apiClient.defaults.headers.common["Authorization"]);
};
/* istanbul ignore next */
cov_2le3ngdd9p().s[129]++;
exports.isApiConfigured = isApiConfigured;
// Initialize API config
/* istanbul ignore next */
cov_2le3ngdd9p().s[130]++;
const initApiConfig = async () => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[20]++;
  cov_2le3ngdd9p().s[131]++;
  try {
    // Get API config from local storage
    const configJson =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[132]++, localStorage.getItem(fastgpt_1.STORAGE_KEYS.API_CONFIG));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[133]++;
    if (configJson) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[34][0]++;
      cov_2le3ngdd9p().s[134]++;
      try {
        const config =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[135]++, JSON.parse(configJson));
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[136]++;
        if (
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[36][0]++, config) &&
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[36][1]++, config.baseUrl) &&
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[36][2]++, config.apiKey)) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[35][0]++;
          cov_2le3ngdd9p().s[137]++;
          // Use FastGPTApi.setApiConfig method
          FastGPTApi.setApiConfig(config.baseUrl, config.apiKey, config.useProxy === undefined ?
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[37][0]++, true) :
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[37][1]++, config.useProxy));
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[138]++;
          return true;
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[35][1]++;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[139]++;
        console.error("Failed to parse API config:", error);
      }
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[34][1]++;
    }
    cov_2le3ngdd9p().s[140]++;
    return false;
  } catch (error) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[141]++;
    console.error("Failed to initialize API config:", error);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[142]++;
    return false;
  }
};
/* istanbul ignore next */
cov_2le3ngdd9p().s[143]++;
exports.initApiConfig = initApiConfig;
// Enhanced retry function with better proxy handling
/* istanbul ignore next */
cov_2le3ngdd9p().s[144]++;
const retryRequest = async (requestFn, maxRetries =
/* istanbul ignore next */
(cov_2le3ngdd9p().b[38][0]++, fastgpt_1.DEFAULT_API_CONFIG.maxRetries), useProxy =
/* istanbul ignore next */
(cov_2le3ngdd9p().b[39][0]++, true)) => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[21]++;
  let lastError;
  let retryCount =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().s[145]++, 0);
  // First try with proxy if enabled
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[146]++;
  if (useProxy) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().b[40][0]++;
    cov_2le3ngdd9p().s[147]++;
    try {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[148]++;
      console.log("[API] Using proxy mode for request...");
      // Save current baseURL
      const currentBaseUrl =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[149]++, apiClient.defaults.baseURL);
      // If current URL is not a proxy URL, temporarily switch to proxy URL
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[150]++;
      if (
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[42][0]++, currentBaseUrl) &&
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[42][1]++, !currentBaseUrl.startsWith(fastgpt_1.PROXY_CONFIG.route))) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[41][0]++;
        const originalUrl =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[151]++,
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[43][0]++, localStorage.getItem(fastgpt_1.STORAGE_KEYS.API_URL)) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[43][1]++, ""));
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[152]++;
        apiClient.defaults.baseURL = fastgpt_1.PROXY_CONFIG.getProxyUrl(originalUrl);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[41][1]++;
      }
      cov_2le3ngdd9p().s[153]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[154]++, await requestFn());
        // If successful, keep using proxy
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[155]++;
        localStorage.setItem(fastgpt_1.STORAGE_KEYS.USE_PROXY, "true");
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[156]++;
        return result;
      } finally {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[157]++;
        // Restore original baseURL
        apiClient.defaults.baseURL = currentBaseUrl;
      }
    } catch (proxyError) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[158]++;
      console.log("[API] Proxy mode failed:", proxyError.message);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[159]++;
      lastError = proxyError;
    }
  } else
  /* istanbul ignore next */
  {
    cov_2le3ngdd9p().b[40][1]++;
  }
  // Try direct request if proxy failed or not enabled
  cov_2le3ngdd9p().s[160]++;
  try {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[161]++;
    return await requestFn();
  } catch (error) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[162]++;
    lastError = error;
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[163]++;
    console.log("[API] Direct request failed:", error.message);
  }
  // Start retry process
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[164]++;
  while (retryCount < maxRetries) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[165]++;
    try {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[166]++;
      console.log(`[API] Retry ${retryCount + 1}/${maxRetries}...`);
      // Add delay to avoid frequent requests
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[167]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2le3ngdd9p().f[22]++;
        cov_2le3ngdd9p().s[168]++;
        return setTimeout(resolve, 1000 * (retryCount + 1));
      });
      // Always try with proxy on retries (more reliable)
      const currentBaseUrl =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[169]++, apiClient.defaults.baseURL);
      // Switch to proxy URL
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[170]++;
      if (
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[45][0]++, currentBaseUrl) &&
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[45][1]++, !currentBaseUrl.startsWith(fastgpt_1.PROXY_CONFIG.route))) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[44][0]++;
        const originalUrl =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[171]++,
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[46][0]++, localStorage.getItem(fastgpt_1.STORAGE_KEYS.API_URL)) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[46][1]++, ""));
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[172]++;
        apiClient.defaults.baseURL = fastgpt_1.PROXY_CONFIG.getProxyUrl(originalUrl);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[44][1]++;
      }
      cov_2le3ngdd9p().s[173]++;
      try {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[174]++;
        return await requestFn();
      } finally {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[175]++;
        // Restore original baseURL
        apiClient.defaults.baseURL = currentBaseUrl;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[176]++;
      lastError = error;
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[177]++;
      retryCount++;
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[178]++;
      console.log(`[API] Retry ${retryCount}/${maxRetries} failed:`, error.message);
    }
  }
  /* istanbul ignore next */
  cov_2le3ngdd9p().s[179]++;
  throw lastError;
};
// Safe fetch function for handling non-JSON responses
/* istanbul ignore next */
cov_2le3ngdd9p().s[180]++;
const safeFetch = async (url, options =
/* istanbul ignore next */
(cov_2le3ngdd9p().b[47][0]++, {})) => {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[23]++;
  cov_2le3ngdd9p().s[181]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[182]++, await fetch(url, options));
    // Check response status
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[183]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[48][0]++;
      const errorText =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[184]++, await response.text());
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[185]++;
      console.warn(`[API] Request failed (${response.status}): ${errorText.substring(0, 100)}...`);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[186]++;
      return {
        success: false,
        error: `Request failed: ${response.status} ${response.statusText}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[48][1]++;
    }
    // Check content type
    const contentType =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[187]++, response.headers.get("content-type"));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[188]++;
    if (
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[50][0]++, contentType) &&
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[50][1]++, contentType.includes("application/json"))) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[49][0]++;
      cov_2le3ngdd9p().s[189]++;
      // If JSON, parse and return
      return {
        success: true,
        data: await response.json()
      };
    } else {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[49][1]++;
      // If not JSON, return text
      const text =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[190]++, await response.text());
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[191]++;
      console.warn(`[API] Response is not JSON format: ${contentType}, content: ${text.substring(0, 100)}...`);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[192]++;
      return {
        success: false,
        error: "Response is not JSON format",
        text
      };
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[193]++;
    console.error("[API] Request failed:", error);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[194]++;
    return {
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[51][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[51][1]++, "Unknown error")
    };
  }
};
// FastGPT API interface
const FastGPTApi =
/* istanbul ignore next */
(cov_2le3ngdd9p().s[195]++, {
  // Set API configuration
  setApiConfig: (baseUrl, apiKey, useProxy =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[52][0]++, true)) => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[24]++;
    // Default to proxy enabled
    // Ensure baseUrl ends with /
    const normalizedBaseUrl =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[196]++, baseUrl.endsWith("/") ?
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[53][0]++, baseUrl) :
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[53][1]++, `${baseUrl}/`));
    // If using proxy, transform baseUrl
    const effectiveBaseUrl =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[197]++, useProxy ?
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[54][0]++, fastgpt_1.PROXY_CONFIG.getProxyUrl(normalizedBaseUrl)) :
    /* istanbul ignore next */
    (cov_2le3ngdd9p().b[54][1]++, normalizedBaseUrl));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[198]++;
    apiClient.defaults.baseURL = effectiveBaseUrl;
    // Store API key in localStorage (only for UI state management)
    // The actual API key will be used only on the server side
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[199]++;
    localStorage.setItem(fastgpt_1.STORAGE_KEYS.API_URL, normalizedBaseUrl);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[200]++;
    localStorage.setItem(fastgpt_1.STORAGE_KEYS.API_KEY, apiKey);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[201]++;
    localStorage.setItem(fastgpt_1.STORAGE_KEYS.USE_PROXY, useProxy.toString());
    // Save to server file
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[202]++;
    fetch("/api/db/api-config", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        baseUrl: normalizedBaseUrl,
        apiKey,
        useProxy
      })
    }).then(response => {
      /* istanbul ignore next */
      cov_2le3ngdd9p().f[25]++;
      cov_2le3ngdd9p().s[203]++;
      return response.json();
    }).then(result => {
      /* istanbul ignore next */
      cov_2le3ngdd9p().f[26]++;
      cov_2le3ngdd9p().s[204]++;
      if (result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[55][0]++;
        cov_2le3ngdd9p().s[205]++;
        console.log("[API] API configuration saved to server file");
      } else {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[55][1]++;
        cov_2le3ngdd9p().s[206]++;
        console.warn("[API] Failed to save API configuration to server file:", result.error);
      }
    }).catch(error => {
      /* istanbul ignore next */
      cov_2le3ngdd9p().f[27]++;
      cov_2le3ngdd9p().s[207]++;
      console.error("[API] Failed to save API configuration to server file:", error);
    });
  },
  // Test API connection
  testConnection: async (useProxy =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[56][0]++, true)) => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[28]++;
    cov_2le3ngdd9p().s[208]++;
    try {
      // Validate URL format
      const baseUrl =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[209]++, apiClient.defaults.baseURL);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[210]++;
      if (!baseUrl) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[57][0]++;
        cov_2le3ngdd9p().s[211]++;
        throw {
          message: fastgpt_1.ERROR_MESSAGES.CONNECTION_FAILED,
          details: "API endpoint URL not set",
          status: 0
        };
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[57][1]++;
      }
      // Set shorter timeout for testing
      const controller =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[212]++, new AbortController());
      const timeoutId =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[213]++, setTimeout(() => {
        /* istanbul ignore next */
        cov_2le3ngdd9p().f[29]++;
        cov_2le3ngdd9p().s[214]++;
        return controller.abort();
      }, fastgpt_1.DEFAULT_API_CONFIG.testTimeout));
      // If current is not using proxy but need to test with proxy
      const currentUrl =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[215]++, apiClient.defaults.baseURL);
      const originalUrl =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[216]++,
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[58][0]++, localStorage.getItem(fastgpt_1.STORAGE_KEYS.API_URL)) ||
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[58][1]++, ""));
      // Temporarily modify baseURL for testing
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[217]++;
      if (
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[60][0]++, useProxy) &&
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[60][1]++, !currentUrl?.startsWith(fastgpt_1.PROXY_CONFIG.route))) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[59][0]++;
        cov_2le3ngdd9p().s[218]++;
        apiClient.defaults.baseURL = fastgpt_1.PROXY_CONFIG.getProxyUrl(originalUrl);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[59][1]++;
      }
      cov_2le3ngdd9p().s[219]++;
      try {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[220]++;
        // First try with /models endpoint
        console.log("[API] Trying to connect to API endpoint:", apiClient.defaults.baseURL);
        const response =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[221]++, await apiClient.get("/models", {
          timeout: fastgpt_1.DEFAULT_API_CONFIG.testTimeout,
          signal: controller.signal
        }));
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[222]++;
        clearTimeout(timeoutId);
        // Restore original baseURL
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[223]++;
        if (
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[62][0]++, useProxy) &&
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[62][1]++, !currentUrl?.startsWith(fastgpt_1.PROXY_CONFIG.route))) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[61][0]++;
          cov_2le3ngdd9p().s[224]++;
          apiClient.defaults.baseURL = currentUrl;
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[61][1]++;
        }
        cov_2le3ngdd9p().s[225]++;
        return {
          success: true,
          data: response.data,
          useProxy
        };
      } catch (modelError) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[226]++;
        // If /models endpoint fails, try with root endpoint
        console.log("[API] Trying to test connection with root endpoint...", modelError);
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[227]++;
        try {
          const rootResponse =
          /* istanbul ignore next */
          (cov_2le3ngdd9p().s[228]++, await apiClient.get("/", {
            timeout: fastgpt_1.DEFAULT_API_CONFIG.testTimeout,
            signal: controller.signal
          }));
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[229]++;
          clearTimeout(timeoutId);
          // Restore original baseURL
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[230]++;
          if (
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[64][0]++, useProxy) &&
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[64][1]++, !currentUrl?.startsWith(fastgpt_1.PROXY_CONFIG.route))) {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[63][0]++;
            cov_2le3ngdd9p().s[231]++;
            apiClient.defaults.baseURL = currentUrl;
          } else
          /* istanbul ignore next */
          {
            cov_2le3ngdd9p().b[63][1]++;
          }
          cov_2le3ngdd9p().s[232]++;
          return {
            success: true,
            data: rootResponse.data,
            useProxy
          };
        } catch (rootError) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[233]++;
          clearTimeout(timeoutId);
          // Restore original baseURL
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[234]++;
          if (
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[66][0]++, useProxy) &&
          /* istanbul ignore next */
          (cov_2le3ngdd9p().b[66][1]++, !currentUrl?.startsWith(fastgpt_1.PROXY_CONFIG.route))) {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[65][0]++;
            cov_2le3ngdd9p().s[235]++;
            apiClient.defaults.baseURL = currentUrl;
          } else
          /* istanbul ignore next */
          {
            cov_2le3ngdd9p().b[65][1]++;
          }
          // If currently not using proxy, try with proxy
          cov_2le3ngdd9p().s[236]++;
          if (!useProxy) {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[67][0]++;
            cov_2le3ngdd9p().s[237]++;
            console.log("[API] Direct connection failed, trying with proxy...");
            /* istanbul ignore next */
            cov_2le3ngdd9p().s[238]++;
            try {
              /* istanbul ignore next */
              cov_2le3ngdd9p().s[239]++;
              return await FastGPTApi.testConnection(true);
            } catch (proxyError) {
              /* istanbul ignore next */
              cov_2le3ngdd9p().s[240]++;
              console.error("[API] Proxy connection also failed:", proxyError);
              /* istanbul ignore next */
              cov_2le3ngdd9p().s[241]++;
              throw rootError; // If proxy also fails, throw original error
            }
          } else
          /* istanbul ignore next */
          {
            cov_2le3ngdd9p().b[67][1]++;
          }
          cov_2le3ngdd9p().s[242]++;
          throw rootError; // If root endpoint also fails, throw error
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[243]++;
      console.error("[API] Test API connection failed:", error);
      // Build detailed error information
      let errorDetails =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[244]++, fastgpt_1.ERROR_MESSAGES.UNKNOWN);
      let errorStatus =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[245]++, 0);
      let suggestedAction =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[246]++, "");
      // Handle timeout error
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[247]++;
      if (
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[69][0]++, error.name === "AbortError") ||
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[69][1]++, error.code === "ECONNABORTED")) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[68][0]++;
        cov_2le3ngdd9p().s[248]++;
        errorDetails = fastgpt_1.ERROR_MESSAGES.TIMEOUT;
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[249]++;
        errorStatus = 408; // Request Timeout
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[250]++;
        suggestedAction = fastgpt_1.ERROR_MESSAGES.SUGGESTIONS.TRY_PROXY;
      }
      // Handle network error
      else {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[68][1]++;
        cov_2le3ngdd9p().s[251]++;
        if (
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[71][0]++, error.message) &&
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[71][1]++, error.message.includes("Network Error"))) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[70][0]++;
          cov_2le3ngdd9p().s[252]++;
          errorDetails = fastgpt_1.ERROR_MESSAGES.NETWORK_ERROR;
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[253]++;
          errorStatus = 0; // Network errors have no HTTP status code
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[254]++;
          suggestedAction = fastgpt_1.ERROR_MESSAGES.SUGGESTIONS.ENABLE_PROXY;
        }
        // Handle server returned error
        else {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[70][1]++;
          cov_2le3ngdd9p().s[255]++;
          if (error.response) {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[72][0]++;
            cov_2le3ngdd9p().s[256]++;
            errorStatus = error.response.status;
            /* istanbul ignore next */
            cov_2le3ngdd9p().s[257]++;
            errorDetails = `Server returned error: ${error.response.status} - ${error.response.statusText}`;
            /* istanbul ignore next */
            cov_2le3ngdd9p().s[258]++;
            if (error.response.data) {
              /* istanbul ignore next */
              cov_2le3ngdd9p().b[73][0]++;
              cov_2le3ngdd9p().s[259]++;
              if (typeof error.response.data === "string") {
                /* istanbul ignore next */
                cov_2le3ngdd9p().b[74][0]++;
                cov_2le3ngdd9p().s[260]++;
                errorDetails += `\n${error.response.data}`;
              } else {
                /* istanbul ignore next */
                cov_2le3ngdd9p().b[74][1]++;
                cov_2le3ngdd9p().s[261]++;
                errorDetails += `\n${JSON.stringify(error.response.data)}`;
              }
            } else
            /* istanbul ignore next */
            {
              cov_2le3ngdd9p().b[73][1]++;
            }
            // Friendly tips for specific status codes
            cov_2le3ngdd9p().s[262]++;
            if (error.response.status === 401) {
              /* istanbul ignore next */
              cov_2le3ngdd9p().b[75][0]++;
              cov_2le3ngdd9p().s[263]++;
              errorDetails += "\nAPI key is invalid or expired, please check your API key";
              /* istanbul ignore next */
              cov_2le3ngdd9p().s[264]++;
              suggestedAction = fastgpt_1.ERROR_MESSAGES.SUGGESTIONS.CHECK_API_KEY;
            } else {
              /* istanbul ignore next */
              cov_2le3ngdd9p().b[75][1]++;
              cov_2le3ngdd9p().s[265]++;
              if (error.response.status === 403) {
                /* istanbul ignore next */
                cov_2le3ngdd9p().b[76][0]++;
                cov_2le3ngdd9p().s[266]++;
                errorDetails += "\nYou don't have permission to access this resource, please check API key permissions";
                /* istanbul ignore next */
                cov_2le3ngdd9p().s[267]++;
                suggestedAction = fastgpt_1.ERROR_MESSAGES.SUGGESTIONS.CHECK_PERMISSIONS;
              } else {
                /* istanbul ignore next */
                cov_2le3ngdd9p().b[76][1]++;
                cov_2le3ngdd9p().s[268]++;
                if (error.response.status === 404) {
                  /* istanbul ignore next */
                  cov_2le3ngdd9p().b[77][0]++;
                  cov_2le3ngdd9p().s[269]++;
                  errorDetails += "\nAPI endpoint does not exist, please check URL path is correct";
                  /* istanbul ignore next */
                  cov_2le3ngdd9p().s[270]++;
                  suggestedAction = fastgpt_1.ERROR_MESSAGES.SUGGESTIONS.CHECK_URL;
                } else
                /* istanbul ignore next */
                {
                  cov_2le3ngdd9p().b[77][1]++;
                }
              }
            }
          }
          // Handle request error
          else {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[72][1]++;
            cov_2le3ngdd9p().s[271]++;
            if (error.request) {
              /* istanbul ignore next */
              cov_2le3ngdd9p().b[78][0]++;
              cov_2le3ngdd9p().s[272]++;
              errorDetails = "Request sent but no response received. Possible reasons:\n" + "1. Server is not running\n" + "2. Network connection issues\n" + "3. Firewall or security settings blocking the request";
              /* istanbul ignore next */
              cov_2le3ngdd9p().s[273]++;
              suggestedAction = fastgpt_1.ERROR_MESSAGES.SUGGESTIONS.TRY_PROXY;
            }
            // Handle other errors
            else {
              /* istanbul ignore next */
              cov_2le3ngdd9p().b[78][1]++;
              cov_2le3ngdd9p().s[274]++;
              if (error.details) {
                /* istanbul ignore next */
                cov_2le3ngdd9p().b[79][0]++;
                cov_2le3ngdd9p().s[275]++;
                errorDetails = error.details;
              } else {
                /* istanbul ignore next */
                cov_2le3ngdd9p().b[79][1]++;
                cov_2le3ngdd9p().s[276]++;
                if (error.message) {
                  /* istanbul ignore next */
                  cov_2le3ngdd9p().b[80][0]++;
                  cov_2le3ngdd9p().s[277]++;
                  errorDetails = error.message;
                } else
                /* istanbul ignore next */
                {
                  cov_2le3ngdd9p().b[80][1]++;
                }
              }
            }
          }
        }
      }
      // Check URL format
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[278]++;
      try {
        const url =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[279]++, apiClient.defaults.baseURL);
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[280]++;
        if (
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[82][0]++, url) &&
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[82][1]++, !url.startsWith("http")) &&
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[82][2]++, !url.startsWith(fastgpt_1.PROXY_CONFIG.route))) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[81][0]++;
          cov_2le3ngdd9p().s[281]++;
          errorDetails += "\nAPI endpoint URL format is incorrect, please ensure it includes http:// or https:// prefix";
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[282]++;
          suggestedAction = fastgpt_1.ERROR_MESSAGES.SUGGESTIONS.CHECK_URL;
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[81][1]++;
        }
      } catch (e) {
        // URL parsing error
      }
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[283]++;
      throw {
        message: fastgpt_1.ERROR_MESSAGES.CONNECTION_FAILED,
        details: errorDetails,
        status: errorStatus,
        originalError:
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[83][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[83][1]++, fastgpt_1.ERROR_MESSAGES.UNKNOWN),
        suggestedAction
      };
    }
  },
  // Get applications list
  getApplications: async () => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[30]++;
    cov_2le3ngdd9p().s[284]++;
    try {
      // Use safe fetch to get applications list
      const result =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[285]++, await safeFetch("/api/db/agents"));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[286]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[84][0]++;
        cov_2le3ngdd9p().s[287]++;
        throw new Error(`Failed to get applications list: ${result.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[84][1]++;
      }
      cov_2le3ngdd9p().s[288]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[289]++;
      console.error("Failed to get applications list:",
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[85][0]++, error.response?.data) ||
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[85][1]++, error.message));
      // Build more detailed error message
      let errorMessage =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[290]++, "Failed to get applications list");
      let errorDetails =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[291]++, "");
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[292]++;
      if (
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[87][0]++, error.message) &&
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[87][1]++, error.message.includes("Network Error"))) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[86][0]++;
        cov_2le3ngdd9p().s[293]++;
        errorMessage += ": Network error, cannot connect to server";
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[294]++;
        errorDetails = "Possible reasons:\n" + "1. API endpoint URL is incorrect\n" + "2. Network connection issues\n" + "3. Cross-origin (CORS) restrictions\n" + "4. Server is not running or not accessible\n\n" + "Suggested solutions:\n" + "- Enable proxy mode (in API configuration page)\n" + "- Check if API endpoint URL is correct\n" + "- Confirm network connection is normal\n" + "- Check if API server is running";
      } else {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[86][1]++;
        cov_2le3ngdd9p().s[295]++;
        if (error.response) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[88][0]++;
          cov_2le3ngdd9p().s[296]++;
          errorMessage += `: Server returned error ${error.response.status}`;
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[297]++;
          if (error.response.data) {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[89][0]++;
            cov_2le3ngdd9p().s[298]++;
            errorDetails = typeof error.response.data === "string" ?
            /* istanbul ignore next */
            (cov_2le3ngdd9p().b[90][0]++, error.response.data) :
            /* istanbul ignore next */
            (cov_2le3ngdd9p().b[90][1]++, JSON.stringify(error.response.data));
          } else
          /* istanbul ignore next */
          {
            cov_2le3ngdd9p().b[89][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[88][1]++;
          cov_2le3ngdd9p().s[299]++;
          if (error.code === "ECONNABORTED") {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[91][0]++;
            cov_2le3ngdd9p().s[300]++;
            errorMessage += ": Request timeout, server response time too long";
            /* istanbul ignore next */
            cov_2le3ngdd9p().s[301]++;
            errorDetails = "Suggested solutions:\n" + "- Check network connection speed\n" + "- Confirm API server load is normal\n" + "- Try again later";
          } else {
            /* istanbul ignore next */
            cov_2le3ngdd9p().b[91][1]++;
            cov_2le3ngdd9p().s[302]++;
            errorMessage += `: ${
            /* istanbul ignore next */
            (cov_2le3ngdd9p().b[92][0]++, error.message) ||
            /* istanbul ignore next */
            (cov_2le3ngdd9p().b[92][1]++, "Unknown error")}`;
          }
        }
      }
      const enhancedError =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[303]++, new Error(errorMessage));
      // @ts-ignore
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[304]++;
      enhancedError.details = errorDetails;
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[305]++;
      throw enhancedError;
    }
  },
  // Get application detail
  getApplicationDetail: async appId => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[31]++;
    cov_2le3ngdd9p().s[306]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[307]++, await safeFetch(`/api/db/agent/${appId}`));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[308]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[93][0]++;
        cov_2le3ngdd9p().s[309]++;
        throw new Error(`Failed to get application detail: ${result.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[93][1]++;
      }
      cov_2le3ngdd9p().s[310]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[311]++;
      console.error("Failed to get application detail:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[312]++;
      throw error;
    }
  },
  // Create application
  createApplication: async appData => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[32]++;
    cov_2le3ngdd9p().s[313]++;
    try {
      // If FastGPT type, remove unnecessary parameters
      const processedData =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[314]++, {
        ...appData
      });
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[315]++;
      if (processedData.type === fastgpt_1.MODEL_TYPES.FASTGPT) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[94][0]++;
        cov_2le3ngdd9p().s[316]++;
        if (processedData.config) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[95][0]++;
          const {
            systemPrompt,
            temperature,
            maxTokens,
            ...restConfig
          } =
          /* istanbul ignore next */
          (cov_2le3ngdd9p().s[317]++, processedData.config);
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[318]++;
          processedData.config = restConfig;
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[95][1]++;
        }
        cov_2le3ngdd9p().s[319]++;
        delete processedData.modelId;
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[94][1]++;
      }
      // Ensure proxy mode is enabled by default
      cov_2le3ngdd9p().s[320]++;
      if (
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[97][0]++, processedData.config) &&
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[97][1]++, processedData.config.useProxy === undefined)) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[96][0]++;
        cov_2le3ngdd9p().s[321]++;
        processedData.config.useProxy = true;
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[96][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[322]++, await safeFetch("/api/db/agent", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(processedData)
      }));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[323]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[98][0]++;
        cov_2le3ngdd9p().s[324]++;
        throw new Error(`Failed to create application: ${result.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[98][1]++;
      }
      cov_2le3ngdd9p().s[325]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[326]++;
      console.error("Failed to create application:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[327]++;
      throw error;
    }
  },
  // Update application
  updateApplication: async (appId, appData) => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[33]++;
    cov_2le3ngdd9p().s[328]++;
    try {
      // If FastGPT type, remove unnecessary parameters
      const processedData =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[329]++, {
        ...appData
      });
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[330]++;
      if (processedData.type === fastgpt_1.MODEL_TYPES.FASTGPT) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[99][0]++;
        cov_2le3ngdd9p().s[331]++;
        if (processedData.config) {
          /* istanbul ignore next */
          cov_2le3ngdd9p().b[100][0]++;
          const {
            systemPrompt,
            temperature,
            maxTokens,
            ...restConfig
          } =
          /* istanbul ignore next */
          (cov_2le3ngdd9p().s[332]++, processedData.config);
          /* istanbul ignore next */
          cov_2le3ngdd9p().s[333]++;
          processedData.config = restConfig;
        } else
        /* istanbul ignore next */
        {
          cov_2le3ngdd9p().b[100][1]++;
        }
        cov_2le3ngdd9p().s[334]++;
        delete processedData.modelId;
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[99][1]++;
      }
      // Ensure proxy mode is enabled by default
      cov_2le3ngdd9p().s[335]++;
      if (
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[102][0]++, processedData.config) &&
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[102][1]++, processedData.config.useProxy === undefined)) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[101][0]++;
        cov_2le3ngdd9p().s[336]++;
        processedData.config.useProxy = true;
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[101][1]++;
      }
      const result =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[337]++, await safeFetch(`/api/db/agent/${appId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(processedData)
      }));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[338]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[103][0]++;
        cov_2le3ngdd9p().s[339]++;
        throw new Error(`Failed to update application: ${result.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[103][1]++;
      }
      cov_2le3ngdd9p().s[340]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[341]++;
      console.error("Failed to update application:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[342]++;
      throw error;
    }
  },
  // Delete application
  deleteApplication: async appId => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[34]++;
    cov_2le3ngdd9p().s[343]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[344]++, await safeFetch(`/api/db/agent/${appId}`, {
        method: "DELETE"
      }));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[345]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[104][0]++;
        cov_2le3ngdd9p().s[346]++;
        throw new Error(`Failed to delete application: ${result.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[104][1]++;
      }
      cov_2le3ngdd9p().s[347]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[348]++;
      console.error("Failed to delete application:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[349]++;
      throw error;
    }
  },
  // Get models list
  getModels: async () => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[35]++;
    cov_2le3ngdd9p().s[350]++;
    try {
      const useProxy =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[351]++, localStorage.getItem(fastgpt_1.STORAGE_KEYS.USE_PROXY) === "false" ?
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[105][0]++, false) :
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[105][1]++, true)); // Default to using proxy
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[352]++;
      return await retryRequest(async () => {
        /* istanbul ignore next */
        cov_2le3ngdd9p().f[36]++;
        const response =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[353]++, await apiClient.get("/models"));
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[354]++;
        return Array.isArray(response.data) ?
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[106][0]++, response.data) :
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[106][1]++, []);
      }, fastgpt_1.DEFAULT_API_CONFIG.maxRetries, useProxy);
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[355]++;
      console.error("Failed to get models list:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[356]++;
      return [];
    }
  },
  // Get voice models list
  getVoiceModels: async () => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[37]++;
    cov_2le3ngdd9p().s[357]++;
    try {
      const useProxy =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[358]++, localStorage.getItem(fastgpt_1.STORAGE_KEYS.USE_PROXY) === "false" ?
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[107][0]++, false) :
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[107][1]++, true)); // Default to using proxy
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[359]++;
      return await retryRequest(async () => {
        /* istanbul ignore next */
        cov_2le3ngdd9p().f[38]++;
        const response =
        /* istanbul ignore next */
        (cov_2le3ngdd9p().s[360]++, await apiClient.get("/voice/models"));
        /* istanbul ignore next */
        cov_2le3ngdd9p().s[361]++;
        return Array.isArray(response.data) ?
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[108][0]++, response.data) :
        /* istanbul ignore next */
        (cov_2le3ngdd9p().b[108][1]++, []);
      }, fastgpt_1.DEFAULT_API_CONFIG.maxRetries, useProxy);
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[362]++;
      console.error("Failed to get voice models list:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[363]++;
      return [];
    }
  },
  // Get chat sessions list
  getChatSessions: async appId => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[39]++;
    cov_2le3ngdd9p().s[364]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[365]++, await safeFetch(`/api/db/sessions/${appId}`));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[366]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[109][0]++;
        cov_2le3ngdd9p().s[367]++;
        throw new Error(`Failed to get chat sessions list: ${result.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[109][1]++;
      }
      cov_2le3ngdd9p().s[368]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[369]++;
      console.error("Failed to get chat sessions list:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[370]++;
      return [];
    }
  },
  // Create chat session
  createChatSession: async (appId, title) => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[40]++;
    cov_2le3ngdd9p().s[371]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[372]++, await safeFetch(`/api/db/session/${appId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          title
        })
      }));
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[373]++;
      if (!result.success) {
        /* istanbul ignore next */
        cov_2le3ngdd9p().b[110][0]++;
        cov_2le3ngdd9p().s[374]++;
        throw new Error(`Failed to create chat session: ${result.error}`);
      } else
      /* istanbul ignore next */
      {
        cov_2le3ngdd9p().b[110][1]++;
      }
      cov_2le3ngdd9p().s[375]++;
      return result.data;
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[376]++;
      console.error("Failed to create chat session:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[377]++;
      throw error;
    }
  },
  // Add pagination parameters to getFavoriteMessages method
  getFavoriteMessages: async (appId, page =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[111][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_2le3ngdd9p().b[112][0]++, 20)) => {
    /* istanbul ignore next */
    cov_2le3ngdd9p().f[41]++;
    cov_2le3ngdd9p().s[378]++;
    try {
      // Simulate getting favorite messages from local storage
      const allFavorites =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[379]++, JSON.parse(
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[113][0]++, localStorage.getItem(`favorite_messages_${appId}`)) ||
      /* istanbul ignore next */
      (cov_2le3ngdd9p().b[113][1]++, "[]")));
      // Simulate pagination
      const startIndex =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[380]++, (page - 1) * limit);
      const endIndex =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[381]++, startIndex + limit);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[382]++;
      return allFavorites.slice(startIndex, endIndex);
    } catch (error) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[383]++;
      console.error("Failed to get favorite messages:", error);
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[384]++;
      throw error;
    }
  }
});
// Function to call the server-side API route for chat
async function chatWithFastGPT(params) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[42]++;
  cov_2le3ngdd9p().s[385]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[386]++, await fetch("/api/fastgpt/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(params)
    }));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[387]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_2le3ngdd9p().b[114][0]++;
      const errorText =
      /* istanbul ignore next */
      (cov_2le3ngdd9p().s[388]++, await response.text());
      /* istanbul ignore next */
      cov_2le3ngdd9p().s[389]++;
      throw new Error(`FastGPT API error: ${response.status} - ${errorText}`);
    } else
    /* istanbul ignore next */
    {
      cov_2le3ngdd9p().b[114][1]++;
    }
    cov_2le3ngdd9p().s[390]++;
    return await response.json();
  } catch (error) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[391]++;
    console.error("Error calling FastGPT API:", error);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[392]++;
    throw error;
  }
}
// Function to test the FastGPT connection
async function testFastGPTConnection(baseUrl, useProxy) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[43]++;
  cov_2le3ngdd9p().s[393]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[394]++, await fetch("/api/fastgpt/test-connection", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        baseUrl,
        useProxy
      })
    }));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[395]++;
    return await response.json();
  } catch (error) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[396]++;
    console.error("Error testing FastGPT connection:", error);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[397]++;
    throw error;
  }
}
// Function to initialize a chat
async function initFastGPTChat(params) {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[44]++;
  cov_2le3ngdd9p().s[398]++;
  try {
    const response =
    /* istanbul ignore next */
    (cov_2le3ngdd9p().s[399]++, await fetch("/api/fastgpt/init-chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(params)
    }));
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[400]++;
    return await response.json();
  } catch (error) {
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[401]++;
    console.error("Error initializing FastGPT chat:", error);
    /* istanbul ignore next */
    cov_2le3ngdd9p().s[402]++;
    throw error;
  }
}
// Generate a unique chat ID
function generateChatId() {
  /* istanbul ignore next */
  cov_2le3ngdd9p().f[45]++;
  cov_2le3ngdd9p().s[403]++;
  return (0, uuid_1.v4)();
}
// Other utility functions as needed
/* istanbul ignore next */
cov_2le3ngdd9p().s[404]++;
exports.default = FastGPTApi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,