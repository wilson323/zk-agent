{"version":3,"names":["fs","require","path","crypto","SSL_CERT_PATH","join","process","cwd","SSL_KEY_PATH","SSL_CA_PATH","securityConfig","ssl","development","enabled","env","DATABASE_SSL_DEV","rejectUnauthorized","cert","existsSync","readFileSync","key","ca","checkServerIdentity","undefined","test","production","DATABASE_SSL","NODE_ENV","DATABASE_SSL_CERT","DATABASE_SSL_KEY","DATABASE_SSL_CA","servername","DATABASE_SSL_SERVERNAME","DB_HOST","password","minLength","requireUppercase","requireLowercase","requireNumbers","requireSpecialChars","blacklist","rotation","intervalDays","historyCount","connection","timeouts","parseInt","DATABASE_CONNECTION_TIMEOUT","idle","DATABASE_IDLE_TIMEOUT","query","DATABASE_QUERY_TIMEOUT","pool","max","DATABASE_POOL_MAX","min","DATABASE_POOL_MIN","acquire","DATABASE_POOL_ACQUIRE","DATABASE_POOL_IDLE","evict","DATABASE_POOL_EVICT","allowedIPs","DATABASE_ALLOWED_IPS","split","map","ip","trim","retry","delay","backoff","audit","DATABASE_AUDIT","events","connections","queries","DATABASE_AUDIT_QUERIES","errors","slowQueries","failedLogins","slowQueryThreshold","DATABASE_SLOW_QUERY_THRESHOLD","retentionDays","DATABASE_AUDIT_RETENTION","encryption","atRest","DATABASE_ENCRYPTION_AT_REST","algorithm","keyRotationDays","inTransit","DATABASE_ENCRYPTION_IN_TRANSIT","minTlsVersion","cipherSuites","backup","keyDerivation","access","requireMFA","allowedUsers","DATABASE_BACKUP_USERS","user","getSSLConfig","config","sslConfig","validatePassword","length","push","includes","toLowerCase","valid","strength","calculatePasswordStrength","score","Math","uniqueChars","Set","size","generateStrongPassword","lowercase","uppercase","numbers","symbols","allChars","floor","random","i","sort","getPoolConfig","poolConfig","validateSecurityConfig","issues","warnings","DB_PASSWORD","calculateSecurityScore","passwordValidation","module","exports"],"sources":["security-config.js"],"sourcesContent":["/**\n * @file 数据库安全配置\n * @description 生产级数据库安全配置和策略\n * @author ZK-Agent Team\n * @date 2024-06-25\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\n\n// SSL证书路径\nconst SSL_CERT_PATH = path.join(process.cwd(), 'ssl', 'certs', 'server.crt');\nconst SSL_KEY_PATH = path.join(process.cwd(), 'ssl', 'certs', 'server.key');\nconst SSL_CA_PATH = path.join(process.cwd(), 'ssl', 'certs', 'ca.crt');\n\n/**\n * 生产级数据库安全配置\n */\nconst securityConfig = {\n  // SSL/TLS配置\n  ssl: {\n    // 开发环境配置\n    development: {\n      enabled: process.env.DATABASE_SSL_DEV === 'true',\n      rejectUnauthorized: false, // 开发环境允许自签名证书\n      cert: fs.existsSync(SSL_CERT_PATH) ? fs.readFileSync(SSL_CERT_PATH) : null,\n      key: fs.existsSync(SSL_KEY_PATH) ? fs.readFileSync(SSL_KEY_PATH) : null,\n      ca: fs.existsSync(SSL_CA_PATH) ? fs.readFileSync(SSL_CA_PATH) : null,\n      checkServerIdentity: () => undefined // 开发环境跳过服务器身份验证\n    },\n    \n    // 测试环境配置\n    test: {\n      enabled: false, // 测试环境通常不需要SSL\n      rejectUnauthorized: false\n    },\n    \n    // 生产环境配置\n    production: {\n      enabled: process.env.DATABASE_SSL === 'true' || process.env.NODE_ENV === 'production',\n      rejectUnauthorized: true, // 生产环境必须验证证书\n      cert: process.env.DATABASE_SSL_CERT ? fs.readFileSync(process.env.DATABASE_SSL_CERT) : null,\n      key: process.env.DATABASE_SSL_KEY ? fs.readFileSync(process.env.DATABASE_SSL_KEY) : null,\n      ca: process.env.DATABASE_SSL_CA ? fs.readFileSync(process.env.DATABASE_SSL_CA) : null,\n      servername: process.env.DATABASE_SSL_SERVERNAME || process.env.DB_HOST || 'localhost'\n    }\n  },\n  \n  // 密码安全策略\n  password: {\n    // 最小密码强度要求\n    minLength: 12,\n    requireUppercase: true,\n    requireLowercase: true,\n    requireNumbers: true,\n    requireSpecialChars: true,\n    \n    // 禁用的弱密码\n    blacklist: [\n      'password', '123456', 'admin', 'root', 'postgres',\n      'password123', 'admin123', 'qwerty', '12345678'\n    ],\n    \n    // 密码轮换策略\n    rotation: {\n      enabled: process.env.NODE_ENV === 'production',\n      intervalDays: 90, // 90天轮换一次\n      historyCount: 5   // 记住最近5个密码\n    }\n  },\n  \n  // 连接安全配置\n  connection: {\n    // 连接超时配置\n    timeouts: {\n      connection: parseInt(process.env.DATABASE_CONNECTION_TIMEOUT) || 5000,\n      idle: parseInt(process.env.DATABASE_IDLE_TIMEOUT) || 30000,\n      query: parseInt(process.env.DATABASE_QUERY_TIMEOUT) || 10000\n    },\n    \n    // 连接池安全配置\n    pool: {\n      // 最大连接数限制\n      max: {\n        development: 10,\n        test: 5,\n        production: parseInt(process.env.DATABASE_POOL_MAX) || 20\n      },\n      \n      // 最小连接数\n      min: {\n        development: 2,\n        test: 1,\n        production: parseInt(process.env.DATABASE_POOL_MIN) || 5\n      },\n      \n      // 连接获取超时\n      acquire: {\n        development: 30000,\n        test: 30000,\n        production: parseInt(process.env.DATABASE_POOL_ACQUIRE) || 60000\n      },\n      \n      // 空闲连接超时\n      idle: {\n        development: 10000,\n        test: 10000,\n        production: parseInt(process.env.DATABASE_POOL_IDLE) || 300000 // 5分钟\n      },\n      \n      // 连接驱逐间隔\n      evict: {\n        development: 1000,\n        test: 1000,\n        production: parseInt(process.env.DATABASE_POOL_EVICT) || 5000\n      }\n    },\n    \n    // IP白名单（生产环境）\n    allowedIPs: process.env.DATABASE_ALLOWED_IPS ? \n      process.env.DATABASE_ALLOWED_IPS.split(',').map(ip => ip.trim()) : \n      ['127.0.0.1', '::1', 'localhost'],\n    \n    // 连接重试配置\n    retry: {\n      max: 3,\n      delay: 1000,\n      backoff: 'exponential'\n    }\n  },\n  \n  // 审计和监控配置\n  audit: {\n    enabled: process.env.DATABASE_AUDIT === 'true' || process.env.NODE_ENV === 'production',\n    \n    // 记录的事件类型\n    events: {\n      connections: true,\n      queries: process.env.DATABASE_AUDIT_QUERIES === 'true',\n      errors: true,\n      slowQueries: true,\n      failedLogins: true\n    },\n    \n    // 慢查询阈值（毫秒）\n    slowQueryThreshold: parseInt(process.env.DATABASE_SLOW_QUERY_THRESHOLD) || 1000,\n    \n    // 审计日志保留期（天）\n    retentionDays: parseInt(process.env.DATABASE_AUDIT_RETENTION) || 90\n  },\n  \n  // 数据加密配置\n  encryption: {\n    // 静态数据加密\n    atRest: {\n      enabled: process.env.DATABASE_ENCRYPTION_AT_REST === 'true',\n      algorithm: 'aes-256-gcm',\n      keyRotationDays: 365\n    },\n    \n    // 传输中数据加密\n    inTransit: {\n      enabled: process.env.DATABASE_ENCRYPTION_IN_TRANSIT === 'true' || process.env.NODE_ENV === 'production',\n      minTlsVersion: '1.2',\n      cipherSuites: [\n        'ECDHE-RSA-AES256-GCM-SHA384',\n        'ECDHE-RSA-AES128-GCM-SHA256',\n        'ECDHE-RSA-AES256-SHA384',\n        'ECDHE-RSA-AES128-SHA256'\n      ]\n    }\n  },\n  \n  // 备份安全配置\n  backup: {\n    encryption: {\n      enabled: true,\n      algorithm: 'aes-256-cbc',\n      keyDerivation: 'pbkdf2'\n    },\n    \n    // 备份访问控制\n    access: {\n      requireMFA: process.env.NODE_ENV === 'production',\n      allowedUsers: process.env.DATABASE_BACKUP_USERS ? \n        process.env.DATABASE_BACKUP_USERS.split(',').map(user => user.trim()) : \n        ['admin']\n    }\n  }\n};\n\n/**\n * 获取当前环境的SSL配置\n * @param {string} env - 环境名称\n * @returns {object} SSL配置\n */\nfunction getSSLConfig(env = process.env.NODE_ENV || 'development') {\n  const config = securityConfig.ssl[env] || securityConfig.ssl.development;\n  \n  if (!config.enabled) {\n    return false;\n  }\n  \n  // 构建SSL配置对象\n  const sslConfig = {\n    require: true,\n    rejectUnauthorized: config.rejectUnauthorized\n  };\n  \n  // 添加证书文件（如果存在）\n  if (config.cert) {sslConfig.cert = config.cert;}\n  if (config.key) {sslConfig.key = config.key;}\n  if (config.ca) {sslConfig.ca = config.ca;}\n  if (config.servername) {sslConfig.servername = config.servername;}\n  if (config.checkServerIdentity) {sslConfig.checkServerIdentity = config.checkServerIdentity;}\n  \n  return sslConfig;\n}\n\n/**\n * 验证密码强度\n * @param {string} password - 密码\n * @returns {object} 验证结果\n */\nfunction validatePassword(password) {\n  const config = securityConfig.password;\n  const errors = [];\n  \n  // 检查长度\n  if (password.length < config.minLength) {\n    errors.push(`密码长度至少需要${config.minLength}个字符`);\n  }\n  \n  // 检查大写字母\n  if (config.requireUppercase && !/[A-Z]/.test(password)) {\n    errors.push('密码必须包含至少一个大写字母');\n  }\n  \n  // 检查小写字母\n  if (config.requireLowercase && !/[a-z]/.test(password)) {\n    errors.push('密码必须包含至少一个小写字母');\n  }\n  \n  // 检查数字\n  if (config.requireNumbers && !/\\d/.test(password)) {\n    errors.push('密码必须包含至少一个数字');\n  }\n  \n  // 检查特殊字符\n  if (config.requireSpecialChars && !/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n    errors.push('密码必须包含至少一个特殊字符');\n  }\n  \n  // 检查黑名单\n  if (config.blacklist.includes(password.toLowerCase())) {\n    errors.push('密码过于简单，请选择更强的密码');\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors,\n    strength: calculatePasswordStrength(password)\n  };\n}\n\n/**\n * 计算密码强度\n * @param {string} password - 密码\n * @returns {number} 强度分数 (0-100)\n */\nfunction calculatePasswordStrength(password) {\n  let score = 0;\n  \n  // 长度分数\n  score += Math.min(password.length * 4, 25);\n  \n  // 字符类型分数\n  if (/[a-z]/.test(password)) {score += 5;}\n  if (/[A-Z]/.test(password)) {score += 5;}\n  if (/\\d/.test(password)) {score += 5;}\n  if (/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {score += 10;}\n  \n  // 复杂度分数\n  const uniqueChars = new Set(password).size;\n  score += Math.min(uniqueChars * 2, 20);\n  \n  // 模式检查（减分）\n  if (/123|abc|qwe/i.test(password)) {score -= 10;}\n  if (/(..).*\\1/.test(password)) {score -= 10;} // 重复模式\n  \n  return Math.max(0, Math.min(100, score));\n}\n\n/**\n * 生成强密码\n * @param {number} length - 密码长度\n * @returns {string} 生成的密码\n */\nfunction generateStrongPassword(length = 16) {\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const numbers = '0123456789';\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n  \n  const allChars = lowercase + uppercase + numbers + symbols;\n  let password = '';\n  \n  // 确保至少包含每种类型的字符\n  password += lowercase[Math.floor(Math.random() * lowercase.length)];\n  password += uppercase[Math.floor(Math.random() * uppercase.length)];\n  password += numbers[Math.floor(Math.random() * numbers.length)];\n  password += symbols[Math.floor(Math.random() * symbols.length)];\n  \n  // 填充剩余长度\n  for (let i = password.length; i < length; i++) {\n    password += allChars[Math.floor(Math.random() * allChars.length)];\n  }\n  \n  // 打乱字符顺序\n  return password.split('').sort(() => Math.random() - 0.5).join('');\n}\n\n/**\n * 获取当前环境的连接池配置\n * @param {string} env - 环境名称\n * @returns {object} 连接池配置\n */\nfunction getPoolConfig(env = process.env.NODE_ENV || 'development') {\n  const poolConfig = securityConfig.connection.pool;\n  \n  return {\n    max: poolConfig.max[env] || poolConfig.max.development,\n    min: poolConfig.min[env] || poolConfig.min.development,\n    acquire: poolConfig.acquire[env] || poolConfig.acquire.development,\n    idle: poolConfig.idle[env] || poolConfig.idle.development,\n    evict: poolConfig.evict[env] || poolConfig.evict.development\n  };\n}\n\n/**\n * 验证数据库安全配置\n * @param {string} env - 环境名称\n * @returns {object} 验证结果\n */\nfunction validateSecurityConfig(env = process.env.NODE_ENV || 'development') {\n  const issues = [];\n  const warnings = [];\n  \n  // 检查SSL配置\n  if (env === 'production' && !securityConfig.ssl.production.enabled) {\n    issues.push('生产环境必须启用SSL加密');\n  }\n  \n  // 检查密码配置\n  if (!process.env.DB_PASSWORD || process.env.DB_PASSWORD.length < securityConfig.password.minLength) {\n    issues.push(`数据库密码长度至少需要${securityConfig.password.minLength}个字符`);\n  }\n  \n  // 检查审计配置\n  if (env === 'production' && !securityConfig.audit.enabled) {\n    warnings.push('建议在生产环境启用数据库审计');\n  }\n  \n  // 检查连接超时配置\n  const timeouts = securityConfig.connection.timeouts;\n  if (timeouts.connection > 10000) {\n    warnings.push('连接超时时间过长，可能影响安全性');\n  }\n  \n  return {\n    valid: issues.length === 0,\n    issues,\n    warnings,\n    score: calculateSecurityScore(env)\n  };\n}\n\n/**\n * 计算安全配置分数\n * @param {string} env - 环境名称\n * @returns {number} 安全分数 (0-100)\n */\nfunction calculateSecurityScore(env = process.env.NODE_ENV || 'development') {\n  let score = 0;\n  \n  // SSL配置 (30分)\n  if (securityConfig.ssl[env]?.enabled) {\n    score += 30;\n    if (securityConfig.ssl[env]?.rejectUnauthorized) {score += 10;}\n  }\n  \n  // 密码强度 (25分)\n  if (process.env.DB_PASSWORD) {\n    const passwordValidation = validatePassword(process.env.DB_PASSWORD);\n    score += Math.floor(passwordValidation.strength * 0.25);\n  }\n  \n  // 审计配置 (20分)\n  if (securityConfig.audit.enabled) {\n    score += 20;\n  }\n  \n  // 连接安全 (15分)\n  const timeouts = securityConfig.connection.timeouts;\n  if (timeouts.connection <= 5000) {score += 5;}\n  if (timeouts.idle <= 30000) {score += 5;}\n  if (timeouts.query <= 10000) {score += 5;}\n  \n  // 加密配置 (10分)\n  if (securityConfig.encryption.inTransit.enabled) {score += 5;}\n  if (securityConfig.encryption.atRest.enabled) {score += 5;}\n  \n  return Math.min(100, score);\n}\n\nmodule.exports = {\n  securityConfig,\n  getSSLConfig,\n  validatePassword,\n  calculatePasswordStrength,\n  generateStrongPassword,\n  getPoolConfig,\n  validateSecurityConfig,\n  calculateSecurityScore\n};"],"mappings":"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","ignoreList":[]}