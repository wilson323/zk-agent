c17f8796931454a307e9251241f5a625
"use strict";

/**
 * @file lib/services/auth-service.ts
 * @description Authentication service for handling user authentication and authorization.
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_4ers7xjov() {
  var path = "E:\\zk-agent\\lib\\services\\auth-service.ts";
  var hash = "35876aa5574c21eca6d22de0003e27d921d4f016";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\services\\auth-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 90
        }
      },
      "2": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 44
        }
      },
      "3": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 11,
          column: 28
        }
      },
      "4": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 14
        },
        end: {
          line: 13,
          column: 39
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "7": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 25,
          column: 2
        }
      },
      "8": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "9": {
        start: {
          line: 37,
          column: 14
        },
        end: {
          line: 80,
          column: 1
        }
      },
      "10": {
        start: {
          line: 38,
          column: 32
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "11": {
        start: {
          line: 39,
          column: 17
        },
        end: {
          line: 50,
          column: 6
        }
      },
      "12": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "13": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 54
        }
      },
      "14": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 54,
          column: 89
        }
      },
      "15": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 57,
          column: 5
        }
      },
      "16": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 54
        }
      },
      "17": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "18": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 50
        }
      },
      "19": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 68,
          column: 7
        }
      },
      "20": {
        start: {
          line: 69,
          column: 42
        },
        end: {
          line: 69,
          column: 78
        }
      },
      "21": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 79,
          column: 6
        }
      },
      "22": {
        start: {
          line: 81,
          column: 0
        },
        end: {
          line: 81,
          column: 22
        }
      },
      "23": {
        start: {
          line: 88,
          column: 17
        },
        end: {
          line: 121,
          column: 1
        }
      },
      "24": {
        start: {
          line: 89,
          column: 46
        },
        end: {
          line: 89,
          column: 50
        }
      },
      "25": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 120,
          column: 7
        }
      },
      "26": {
        start: {
          line: 91,
          column: 29
        },
        end: {
          line: 93,
          column: 10
        }
      },
      "27": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "28": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 68
        }
      },
      "29": {
        start: {
          line: 97,
          column: 31
        },
        end: {
          line: 97,
          column: 75
        }
      },
      "30": {
        start: {
          line: 98,
          column: 24
        },
        end: {
          line: 114,
          column: 10
        }
      },
      "31": {
        start: {
          line: 115,
          column: 46
        },
        end: {
          line: 115,
          column: 85
        }
      },
      "32": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 119,
          column: 10
        }
      },
      "33": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 122,
          column: 28
        }
      },
      "34": {
        start: {
          line: 129,
          column: 21
        },
        end: {
          line: 150,
          column: 1
        }
      },
      "35": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 130,
          column: 66
        }
      },
      "36": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "37": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 50
        }
      },
      "38": {
        start: {
          line: 134,
          column: 17
        },
        end: {
          line: 144,
          column: 6
        }
      },
      "39": {
        start: {
          line: 145,
          column: 4
        },
        end: {
          line: 147,
          column: 5
        }
      },
      "40": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 55
        }
      },
      "41": {
        start: {
          line: 148,
          column: 59
        },
        end: {
          line: 148,
          column: 95
        }
      },
      "42": {
        start: {
          line: 149,
          column: 4
        },
        end: {
          line: 149,
          column: 58
        }
      },
      "43": {
        start: {
          line: 151,
          column: 0
        },
        end: {
          line: 151,
          column: 36
        }
      },
      "44": {
        start: {
          line: 159,
          column: 23
        },
        end: {
          line: 185,
          column: 1
        }
      },
      "45": {
        start: {
          line: 160,
          column: 41
        },
        end: {
          line: 160,
          column: 45
        }
      },
      "46": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 184,
          column: 7
        }
      },
      "47": {
        start: {
          line: 162,
          column: 21
        },
        end: {
          line: 168,
          column: 10
        }
      },
      "48": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "49": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 47
        }
      },
      "50": {
        start: {
          line: 172,
          column: 32
        },
        end: {
          line: 172,
          column: 96
        }
      },
      "51": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "52": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 57
        }
      },
      "53": {
        start: {
          line: 176,
          column: 31
        },
        end: {
          line: 176,
          column: 78
        }
      },
      "54": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "55": {
        start: {
          line: 186,
          column: 0
        },
        end: {
          line: 186,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 37,
            column: 14
          },
          end: {
            line: 37,
            column: 15
          }
        },
        loc: {
          start: {
            line: 37,
            column: 30
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 37
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 88,
            column: 17
          },
          end: {
            line: 88,
            column: 18
          }
        },
        loc: {
          start: {
            line: 88,
            column: 33
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 88
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 90,
            column: 41
          },
          end: {
            line: 90,
            column: 42
          }
        },
        loc: {
          start: {
            line: 90,
            column: 59
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 90
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 129,
            column: 22
          }
        },
        loc: {
          start: {
            line: 129,
            column: 38
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 129
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 159,
            column: 23
          },
          end: {
            line: 159,
            column: 24
          }
        },
        loc: {
          start: {
            line: 159,
            column: 47
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 159
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 161,
            column: 41
          },
          end: {
            line: 161,
            column: 42
          }
        },
        loc: {
          start: {
            line: 161,
            column: 59
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 161
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "4": {
        loc: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "5": {
        loc: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "6": {
        loc: {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: 145,
            column: 17
          },
          end: {
            line: 145,
            column: 41
          }
        }],
        line: 145
      },
      "7": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "8": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\services\\auth-service.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAEH,6CAA2D;AAC3D,6BAAwB;AACxB,kDAAmE;AACnE,wCAA4D;AAI5D,kCAAkC;AAClC,MAAM,WAAW,GAAG,OAAC,CAAC,MAAM,CAAC;IAC3B,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;CAC5B,CAAC,CAAC;AAEH,yCAAyC;AACzC,MAAM,cAAc,GAAG,OAAC,CAAC,MAAM,CAAC;IAC9B,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE;IACzB,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,MAAM,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC9B,CAAC,CAAC;AAEH,4CAA4C;AAC5C,MAAM,oBAAoB,GAAG,OAAC,CAAC,MAAM,CAAC;IACpC,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE;IACvB,WAAW,EAAE,OAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;CAC/B,CAAC,CAAC;AAEH;;;;;GAKG;AACI,MAAM,KAAK,GAAG,KAAK,EAAE,IAAiC,EAAE,EAAE;IAC/D,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IAEjC,MAAM,IAAI,GAAG,MAAM,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACnD,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE,EAAE;QACrC,MAAM,EAAE;YACN,EAAE,EAAE,IAAI;YACR,KAAK,EAAE,IAAI;YACX,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,IAAI;SACb;KACF,CAAC,CAAC;IAEH,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,eAAe,GAAG,MAAM,IAAA,yBAAc,EAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtE,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;IAED,qBAAqB;IACrB,MAAM,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAClC,KAAK,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;QACtB,IAAI,EAAE;YACJ,WAAW,EAAE,IAAI,IAAI,EAAE;YACvB,UAAU,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;SAC7B;KACF,CAAC,CAAC;IAEH,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,MAAM,IAAA,mBAAa,EAAC,IAAI,CAAC,CAAC;IAEhE,OAAO;QACL,IAAI,EAAE;YACJ,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB;QACD,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE;KACtC,CAAC;AACJ,CAAC,CAAC;AAlDW,QAAA,KAAK,SAkDhB;AAEF;;;;;GAKG;AACI,MAAM,QAAQ,GAAG,KAAK,EAAE,IAAoC,EAAE,EAAE;IACrE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IAE/C,OAAO,IAAA,wBAAa,EAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QACpC,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE,EAAE;SACtC,CAAC,CAAC;QAEH,IAAI,YAAY,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,cAAc,GAAG,MAAM,IAAA,uBAAY,EAAC,QAAQ,CAAC,CAAC;QAEpD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,IAAI,EAAE;gBACJ,KAAK,EAAE,KAAK,CAAC,WAAW,EAAE;gBAC1B,QAAQ,EAAE,cAAc;gBACxB,IAAI;gBACJ,MAAM;gBACN,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,QAAQ;aACjB;YACD,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE,IAAI;aACX;SACF,CAAC,CAAC;QAEH,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,MAAM,IAAA,mBAAa,EAAC,OAAO,CAAC,CAAC;QAEnE,OAAO;YACL,IAAI,EAAE,OAAO;YACb,MAAM,EAAE,EAAE,WAAW,EAAE,YAAY,EAAE;SACtC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAvCW,QAAA,QAAQ,YAuCnB;AAEF;;;;;GAKG;AACI,MAAM,YAAY,GAAG,KAAK,EAAE,KAAa,EAAE,EAAE;IAClD,MAAM,OAAO,GAAG,MAAM,IAAA,iBAAW,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACpD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,qBAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACnD,KAAK,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,MAAM,EAAE;QAC7B,MAAM,EAAE;YACN,EAAE,EAAE,IAAI;YACR,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,IAAI;SACb;KACF,CAAC,CAAC;IAEH,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;QACtC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,eAAe,EAAE,GAAG,MAAM,IAAA,mBAAa,EAAC,IAAI,CAAC,CAAC;IAEjF,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,eAAe,EAAE,CAAC;AACxD,CAAC,CAAC;AAzBW,QAAA,YAAY,gBAyBvB;AAEF;;;;;;GAMG;AACI,MAAM,cAAc,GAAG,KAAK,EAAE,MAAc,EAAE,IAA0C,EAAE,EAAE;IACjG,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;IAE1C,OAAO,IAAA,wBAAa,EAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QACpC,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;YACrB,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,QAAQ,EAAE,IAAI;aACf;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC;QAED,MAAM,eAAe,GAAG,MAAM,IAAA,yBAAc,EAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzE,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,cAAc,GAAG,MAAM,IAAA,uBAAY,EAAC,WAAW,CAAC,CAAC;QAEvD,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;YACrB,IAAI,EAAE;gBACJ,QAAQ,EAAE,cAAc;gBACxB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AA/BW,QAAA,cAAc,kBA+BzB",
      names: [],
      sources: ["E:\\zk-agent\\lib\\services\\auth-service.ts"],
      sourcesContent: ["/**\n * @file lib/services/auth-service.ts\n * @description Authentication service for handling user authentication and authorization.\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { enhancedDb, dbTransaction } from '@/lib/database';\nimport { z } from 'zod';\nimport { hashPassword, verifyPassword } from '@/lib/auth/password';\nimport { generateToken, verifyToken } from '@/lib/auth/jwt';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { ErrorCode } from '@/types/core';\n\n// Zod validation schema for login\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n});\n\n// Zod validation schema for registration\nconst registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  name: z.string().optional(),\n  avatar: z.string().optional(),\n});\n\n// Zod validation schema for password change\nconst changePasswordSchema = z.object({\n  oldPassword: z.string(),\n  newPassword: z.string().min(8),\n});\n\n/**\n * Handles user login.\n *\n * @param {object} data - The login data.\n * @returns {Promise<object>} The login result with tokens.\n */\nexport const login = async (data: z.infer<typeof loginSchema>) => {\n  const { email, password } = data;\n\n  const user = await enhancedDb.prisma.user.findUnique({\n    where: { email: email.toLowerCase() },\n    select: {\n      id: true,\n      email: true,\n      password: true,\n      name: true,\n      avatar: true,\n      role: true,\n      status: true,\n    },\n  });\n\n  if (!user) {\n    throw new Error('Invalid email or password.');\n  }\n\n  const isValidPassword = await verifyPassword(password, user.password);\n  if (!isValidPassword) {\n    throw new Error('Invalid email or password.');\n  }\n\n  if (user.status !== 'ACTIVE') {\n    throw new Error('Account is not active.');\n  }\n\n  // Update login stats\n  await enhancedDb.prisma.user.update({\n    where: { id: user.id },\n    data: {\n      lastLoginAt: new Date(),\n      loginCount: { increment: 1 },\n    },\n  });\n\n  const { accessToken, refreshToken } = await generateToken(user);\n\n  return {\n    user: {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      avatar: user.avatar,\n      role: user.role,\n    },\n    tokens: { accessToken, refreshToken },\n  };\n};\n\n/**\n * Handles user registration.\n *\n * @param {object} data - The registration data.\n * @returns {Promise<object>} The registration result with tokens.\n */\nexport const register = async (data: z.infer<typeof registerSchema>) => {\n  const { email, password, name, avatar } = data;\n\n  return dbTransaction(async (prisma) => {\n    const existingUser = await prisma.user.findUnique({\n      where: { email: email.toLowerCase() },\n    });\n\n    if (existingUser) {\n      throw new Error('User with this email already exists.');\n    }\n\n    const hashedPassword = await hashPassword(password);\n\n    const newUser = await prisma.user.create({\n      data: {\n        email: email.toLowerCase(),\n        password: hashedPassword,\n        name,\n        avatar,\n        role: 'USER',\n        status: 'ACTIVE',\n      },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        role: true,\n      },\n    });\n\n    const { accessToken, refreshToken } = await generateToken(newUser);\n\n    return {\n      user: newUser,\n      tokens: { accessToken, refreshToken },\n    };\n  });\n};\n\n/**\n * Refreshes the access token using a refresh token.\n *\n * @param {string} refreshToken - The refresh token.\n * @returns {Promise<object>} The new tokens.\n */\nexport const refreshToken = async (token: string) => {\n  const payload = await verifyToken(token, 'refresh');\n  if (!payload) {\n    throw new Error('Invalid refresh token.');\n  }\n\n  const user = await enhancedDb.prisma.user.findUnique({\n    where: { id: payload.userId },\n    select: {\n      id: true,\n      email: true,\n      name: true,\n      avatar: true,\n      role: true,\n      status: true,\n    },\n  });\n\n  if (!user || user.status !== 'ACTIVE') {\n    throw new Error('User not found or inactive.');\n  }\n\n  const { accessToken, refreshToken: newRefreshToken } = await generateToken(user);\n\n  return { accessToken, refreshToken: newRefreshToken };\n};\n\n/**\n * Changes a user's password.\n *\n * @param {string} userId - The user ID.\n * @param {object} data - The password change data.\n * @returns {Promise<void>}\n */\nexport const changePassword = async (userId: string, data: z.infer<typeof changePasswordSchema>) => {\n  const { oldPassword, newPassword } = data;\n\n  return dbTransaction(async (prisma) => {\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        password: true,\n      },\n    });\n\n    if (!user) {\n      throw new Error('User not found.');\n    }\n\n    const isValidPassword = await verifyPassword(oldPassword, user.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid current password.');\n    }\n\n    const hashedPassword = await hashPassword(newPassword);\n\n    await prisma.user.update({\n      where: { id: userId },\n      data: {\n        password: hashedPassword,\n        updatedAt: new Date(),\n      },\n    });\n  });\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "35876aa5574c21eca6d22de0003e27d921d4f016"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_4ers7xjov = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_4ers7xjov();
cov_4ers7xjov().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_4ers7xjov().s[1]++;
exports.changePassword = exports.refreshToken = exports.register = exports.login = void 0;
const database_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[2]++, require("@/lib/database"));
const zod_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[3]++, require("zod"));
const password_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[4]++, require("@/lib/auth/password"));
const jwt_1 =
/* istanbul ignore next */
(cov_4ers7xjov().s[5]++, require("@/lib/auth/jwt"));
// Zod validation schema for login
const loginSchema =
/* istanbul ignore next */
(cov_4ers7xjov().s[6]++, zod_1.z.object({
  email: zod_1.z.string().email(),
  password: zod_1.z.string().min(8)
}));
// Zod validation schema for registration
const registerSchema =
/* istanbul ignore next */
(cov_4ers7xjov().s[7]++, zod_1.z.object({
  email: zod_1.z.string().email(),
  password: zod_1.z.string().min(8),
  name: zod_1.z.string().optional(),
  avatar: zod_1.z.string().optional()
}));
// Zod validation schema for password change
const changePasswordSchema =
/* istanbul ignore next */
(cov_4ers7xjov().s[8]++, zod_1.z.object({
  oldPassword: zod_1.z.string(),
  newPassword: zod_1.z.string().min(8)
}));
/**
 * Handles user login.
 *
 * @param {object} data - The login data.
 * @returns {Promise<object>} The login result with tokens.
 */
/* istanbul ignore next */
cov_4ers7xjov().s[9]++;
const login = async data => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[0]++;
  const {
    email,
    password
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[10]++, data);
  const user =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[11]++, await database_1.enhancedDb.prisma.user.findUnique({
    where: {
      email: email.toLowerCase()
    },
    select: {
      id: true,
      email: true,
      password: true,
      name: true,
      avatar: true,
      role: true,
      status: true
    }
  }));
  /* istanbul ignore next */
  cov_4ers7xjov().s[12]++;
  if (!user) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[0][0]++;
    cov_4ers7xjov().s[13]++;
    throw new Error('Invalid email or password.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[0][1]++;
  }
  const isValidPassword =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[14]++, await (0, password_1.verifyPassword)(password, user.password));
  /* istanbul ignore next */
  cov_4ers7xjov().s[15]++;
  if (!isValidPassword) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[1][0]++;
    cov_4ers7xjov().s[16]++;
    throw new Error('Invalid email or password.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[1][1]++;
  }
  cov_4ers7xjov().s[17]++;
  if (user.status !== 'ACTIVE') {
    /* istanbul ignore next */
    cov_4ers7xjov().b[2][0]++;
    cov_4ers7xjov().s[18]++;
    throw new Error('Account is not active.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[2][1]++;
  }
  // Update login stats
  cov_4ers7xjov().s[19]++;
  await database_1.enhancedDb.prisma.user.update({
    where: {
      id: user.id
    },
    data: {
      lastLoginAt: new Date(),
      loginCount: {
        increment: 1
      }
    }
  });
  const {
    accessToken,
    refreshToken
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[20]++, await (0, jwt_1.generateToken)(user));
  /* istanbul ignore next */
  cov_4ers7xjov().s[21]++;
  return {
    user: {
      id: user.id,
      email: user.email,
      name: user.name,
      avatar: user.avatar,
      role: user.role
    },
    tokens: {
      accessToken,
      refreshToken
    }
  };
};
/* istanbul ignore next */
cov_4ers7xjov().s[22]++;
exports.login = login;
/**
 * Handles user registration.
 *
 * @param {object} data - The registration data.
 * @returns {Promise<object>} The registration result with tokens.
 */
/* istanbul ignore next */
cov_4ers7xjov().s[23]++;
const register = async data => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[1]++;
  const {
    email,
    password,
    name,
    avatar
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[24]++, data);
  /* istanbul ignore next */
  cov_4ers7xjov().s[25]++;
  return (0, database_1.dbTransaction)(async prisma => {
    /* istanbul ignore next */
    cov_4ers7xjov().f[2]++;
    const existingUser =
    /* istanbul ignore next */
    (cov_4ers7xjov().s[26]++, await prisma.user.findUnique({
      where: {
        email: email.toLowerCase()
      }
    }));
    /* istanbul ignore next */
    cov_4ers7xjov().s[27]++;
    if (existingUser) {
      /* istanbul ignore next */
      cov_4ers7xjov().b[3][0]++;
      cov_4ers7xjov().s[28]++;
      throw new Error('User with this email already exists.');
    } else
    /* istanbul ignore next */
    {
      cov_4ers7xjov().b[3][1]++;
    }
    const hashedPassword =
    /* istanbul ignore next */
    (cov_4ers7xjov().s[29]++, await (0, password_1.hashPassword)(password));
    const newUser =
    /* istanbul ignore next */
    (cov_4ers7xjov().s[30]++, await prisma.user.create({
      data: {
        email: email.toLowerCase(),
        password: hashedPassword,
        name,
        avatar,
        role: 'USER',
        status: 'ACTIVE'
      },
      select: {
        id: true,
        email: true,
        name: true,
        avatar: true,
        role: true
      }
    }));
    const {
      accessToken,
      refreshToken
    } =
    /* istanbul ignore next */
    (cov_4ers7xjov().s[31]++, await (0, jwt_1.generateToken)(newUser));
    /* istanbul ignore next */
    cov_4ers7xjov().s[32]++;
    return {
      user: newUser,
      tokens: {
        accessToken,
        refreshToken
      }
    };
  });
};
/* istanbul ignore next */
cov_4ers7xjov().s[33]++;
exports.register = register;
/**
 * Refreshes the access token using a refresh token.
 *
 * @param {string} refreshToken - The refresh token.
 * @returns {Promise<object>} The new tokens.
 */
/* istanbul ignore next */
cov_4ers7xjov().s[34]++;
const refreshToken = async token => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[3]++;
  const payload =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[35]++, await (0, jwt_1.verifyToken)(token, 'refresh'));
  /* istanbul ignore next */
  cov_4ers7xjov().s[36]++;
  if (!payload) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[4][0]++;
    cov_4ers7xjov().s[37]++;
    throw new Error('Invalid refresh token.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[4][1]++;
  }
  const user =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[38]++, await database_1.enhancedDb.prisma.user.findUnique({
    where: {
      id: payload.userId
    },
    select: {
      id: true,
      email: true,
      name: true,
      avatar: true,
      role: true,
      status: true
    }
  }));
  /* istanbul ignore next */
  cov_4ers7xjov().s[39]++;
  if (
  /* istanbul ignore next */
  (cov_4ers7xjov().b[6][0]++, !user) ||
  /* istanbul ignore next */
  (cov_4ers7xjov().b[6][1]++, user.status !== 'ACTIVE')) {
    /* istanbul ignore next */
    cov_4ers7xjov().b[5][0]++;
    cov_4ers7xjov().s[40]++;
    throw new Error('User not found or inactive.');
  } else
  /* istanbul ignore next */
  {
    cov_4ers7xjov().b[5][1]++;
  }
  const {
    accessToken,
    refreshToken: newRefreshToken
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[41]++, await (0, jwt_1.generateToken)(user));
  /* istanbul ignore next */
  cov_4ers7xjov().s[42]++;
  return {
    accessToken,
    refreshToken: newRefreshToken
  };
};
/* istanbul ignore next */
cov_4ers7xjov().s[43]++;
exports.refreshToken = refreshToken;
/**
 * Changes a user's password.
 *
 * @param {string} userId - The user ID.
 * @param {object} data - The password change data.
 * @returns {Promise<void>}
 */
/* istanbul ignore next */
cov_4ers7xjov().s[44]++;
const changePassword = async (userId, data) => {
  /* istanbul ignore next */
  cov_4ers7xjov().f[4]++;
  const {
    oldPassword,
    newPassword
  } =
  /* istanbul ignore next */
  (cov_4ers7xjov().s[45]++, data);
  /* istanbul ignore next */
  cov_4ers7xjov().s[46]++;
  return (0, database_1.dbTransaction)(async prisma => {
    /* istanbul ignore next */
    cov_4ers7xjov().f[5]++;
    const user =
    /* istanbul ignore next */
    (cov_4ers7xjov().s[47]++, await prisma.user.findUnique({
      where: {
        id: userId
      },
      select: {
        id: true,
        password: true
      }
    }));
    /* istanbul ignore next */
    cov_4ers7xjov().s[48]++;
    if (!user) {
      /* istanbul ignore next */
      cov_4ers7xjov().b[7][0]++;
      cov_4ers7xjov().s[49]++;
      throw new Error('User not found.');
    } else
    /* istanbul ignore next */
    {
      cov_4ers7xjov().b[7][1]++;
    }
    const isValidPassword =
    /* istanbul ignore next */
    (cov_4ers7xjov().s[50]++, await (0, password_1.verifyPassword)(oldPassword, user.password));
    /* istanbul ignore next */
    cov_4ers7xjov().s[51]++;
    if (!isValidPassword) {
      /* istanbul ignore next */
      cov_4ers7xjov().b[8][0]++;
      cov_4ers7xjov().s[52]++;
      throw new Error('Invalid current password.');
    } else
    /* istanbul ignore next */
    {
      cov_4ers7xjov().b[8][1]++;
    }
    const hashedPassword =
    /* istanbul ignore next */
    (cov_4ers7xjov().s[53]++, await (0, password_1.hashPassword)(newPassword));
    /* istanbul ignore next */
    cov_4ers7xjov().s[54]++;
    await prisma.user.update({
      where: {
        id: userId
      },
      data: {
        password: hashedPassword,
        updatedAt: new Date()
      }
    });
  });
};
/* istanbul ignore next */
cov_4ers7xjov().s[55]++;
exports.changePassword = changePassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNGVyczd4am92IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwidW5kZWZpbmVkIiwicyIsImYiLCJiIiwiaW5wdXRTb3VyY2VNYXAiLCJmaWxlIiwibWFwcGluZ3MiLCJuYW1lcyIsInNvdXJjZXMiLCJzb3VyY2VzQ29udGVudCIsInZlcnNpb24iLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiZGF0YWJhc2VfMSIsInJlcXVpcmUiLCJ6b2RfMSIsInBhc3N3b3JkXzEiLCJqd3RfMSIsImxvZ2luU2NoZW1hIiwieiIsIm9iamVjdCIsImVtYWlsIiwic3RyaW5nIiwicGFzc3dvcmQiLCJtaW4iLCJyZWdpc3RlclNjaGVtYSIsIm9wdGlvbmFsIiwiYXZhdGFyIiwiY2hhbmdlUGFzc3dvcmRTY2hlbWEiLCJvbGRQYXNzd29yZCIsIm5ld1Bhc3N3b3JkIiwibG9naW4iLCJkYXRhIiwidXNlciIsImVuaGFuY2VkRGIiLCJwcmlzbWEiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJ0b0xvd2VyQ2FzZSIsInNlbGVjdCIsImlkIiwicm9sZSIsInN0YXR1cyIsIkVycm9yIiwiaXNWYWxpZFBhc3N3b3JkIiwidmVyaWZ5UGFzc3dvcmQiLCJ1cGRhdGUiLCJsYXN0TG9naW5BdCIsIkRhdGUiLCJsb2dpbkNvdW50IiwiaW5jcmVtZW50IiwiYWNjZXNzVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJnZW5lcmF0ZVRva2VuIiwidG9rZW5zIiwiZXhwb3J0cyIsInJlZ2lzdGVyIiwiZGJUcmFuc2FjdGlvbiIsImV4aXN0aW5nVXNlciIsImhhc2hlZFBhc3N3b3JkIiwiaGFzaFBhc3N3b3JkIiwibmV3VXNlciIsImNyZWF0ZSIsInRva2VuIiwicGF5bG9hZCIsInZlcmlmeVRva2VuIiwidXNlcklkIiwibmV3UmVmcmVzaFRva2VuIiwiY2hhbmdlUGFzc3dvcmQiLCJ1cGRhdGVkQXQiXSwic291cmNlcyI6WyJFOlxcemstYWdlbnRcXGxpYlxcc2VydmljZXNcXGF1dGgtc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGxpYi9zZXJ2aWNlcy9hdXRoLXNlcnZpY2UudHNcbiAqIEBkZXNjcmlwdGlvbiBBdXRoZW50aWNhdGlvbiBzZXJ2aWNlIGZvciBoYW5kbGluZyB1c2VyIGF1dGhlbnRpY2F0aW9uIGFuZCBhdXRob3JpemF0aW9uLlxuICogQGF1dGhvciBaSy1BZ2VudCBUZWFtXG4gKiBAZGF0ZSAyMDI1LTA2LTI1XG4gKi9cblxuaW1wb3J0IHsgZW5oYW5jZWREYiwgZGJUcmFuc2FjdGlvbiB9IGZyb20gJ0AvbGliL2RhdGFiYXNlJztcbmltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgaGFzaFBhc3N3b3JkLCB2ZXJpZnlQYXNzd29yZCB9IGZyb20gJ0AvbGliL2F1dGgvcGFzc3dvcmQnO1xuaW1wb3J0IHsgZ2VuZXJhdGVUb2tlbiwgdmVyaWZ5VG9rZW4gfSBmcm9tICdAL2xpYi9hdXRoL2p3dCc7XG5pbXBvcnQgeyBBcGlSZXNwb25zZVdyYXBwZXIgfSBmcm9tICdAL2xpYi91dGlscy9hcGktaGVscGVyJztcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gJ0AvdHlwZXMvY29yZSc7XG5cbi8vIFpvZCB2YWxpZGF0aW9uIHNjaGVtYSBmb3IgbG9naW5cbmNvbnN0IGxvZ2luU2NoZW1hID0gei5vYmplY3Qoe1xuICBlbWFpbDogei5zdHJpbmcoKS5lbWFpbCgpLFxuICBwYXNzd29yZDogei5zdHJpbmcoKS5taW4oOCksXG59KTtcblxuLy8gWm9kIHZhbGlkYXRpb24gc2NoZW1hIGZvciByZWdpc3RyYXRpb25cbmNvbnN0IHJlZ2lzdGVyU2NoZW1hID0gei5vYmplY3Qoe1xuICBlbWFpbDogei5zdHJpbmcoKS5lbWFpbCgpLFxuICBwYXNzd29yZDogei5zdHJpbmcoKS5taW4oOCksXG4gIG5hbWU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgYXZhdGFyOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuLy8gWm9kIHZhbGlkYXRpb24gc2NoZW1hIGZvciBwYXNzd29yZCBjaGFuZ2VcbmNvbnN0IGNoYW5nZVBhc3N3b3JkU2NoZW1hID0gei5vYmplY3Qoe1xuICBvbGRQYXNzd29yZDogei5zdHJpbmcoKSxcbiAgbmV3UGFzc3dvcmQ6IHouc3RyaW5nKCkubWluKDgpLFxufSk7XG5cbi8qKlxuICogSGFuZGxlcyB1c2VyIGxvZ2luLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gVGhlIGxvZ2luIGRhdGEuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBUaGUgbG9naW4gcmVzdWx0IHdpdGggdG9rZW5zLlxuICovXG5leHBvcnQgY29uc3QgbG9naW4gPSBhc3luYyAoZGF0YTogei5pbmZlcjx0eXBlb2YgbG9naW5TY2hlbWE+KSA9PiB7XG4gIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSBkYXRhO1xuXG4gIGNvbnN0IHVzZXIgPSBhd2FpdCBlbmhhbmNlZERiLnByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgIHdoZXJlOiB7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICBpZDogdHJ1ZSxcbiAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgcGFzc3dvcmQ6IHRydWUsXG4gICAgICBuYW1lOiB0cnVlLFxuICAgICAgYXZhdGFyOiB0cnVlLFxuICAgICAgcm9sZTogdHJ1ZSxcbiAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICB9LFxuICB9KTtcblxuICBpZiAoIXVzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZW1haWwgb3IgcGFzc3dvcmQuJyk7XG4gIH1cblxuICBjb25zdCBpc1ZhbGlkUGFzc3dvcmQgPSBhd2FpdCB2ZXJpZnlQYXNzd29yZChwYXNzd29yZCwgdXNlci5wYXNzd29yZCk7XG4gIGlmICghaXNWYWxpZFBhc3N3b3JkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGVtYWlsIG9yIHBhc3N3b3JkLicpO1xuICB9XG5cbiAgaWYgKHVzZXIuc3RhdHVzICE9PSAnQUNUSVZFJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQWNjb3VudCBpcyBub3QgYWN0aXZlLicpO1xuICB9XG5cbiAgLy8gVXBkYXRlIGxvZ2luIHN0YXRzXG4gIGF3YWl0IGVuaGFuY2VkRGIucHJpc21hLnVzZXIudXBkYXRlKHtcbiAgICB3aGVyZTogeyBpZDogdXNlci5pZCB9LFxuICAgIGRhdGE6IHtcbiAgICAgIGxhc3RMb2dpbkF0OiBuZXcgRGF0ZSgpLFxuICAgICAgbG9naW5Db3VudDogeyBpbmNyZW1lbnQ6IDEgfSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB7IGFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW4gfSA9IGF3YWl0IGdlbmVyYXRlVG9rZW4odXNlcik7XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyOiB7XG4gICAgICBpZDogdXNlci5pZCxcbiAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgbmFtZTogdXNlci5uYW1lLFxuICAgICAgYXZhdGFyOiB1c2VyLmF2YXRhcixcbiAgICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICB9LFxuICAgIHRva2VuczogeyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuIH0sXG4gIH07XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgdXNlciByZWdpc3RyYXRpb24uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBUaGUgcmVnaXN0cmF0aW9uIGRhdGEuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxvYmplY3Q+fSBUaGUgcmVnaXN0cmF0aW9uIHJlc3VsdCB3aXRoIHRva2Vucy5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gYXN5bmMgKGRhdGE6IHouaW5mZXI8dHlwZW9mIHJlZ2lzdGVyU2NoZW1hPikgPT4ge1xuICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCwgbmFtZSwgYXZhdGFyIH0gPSBkYXRhO1xuXG4gIHJldHVybiBkYlRyYW5zYWN0aW9uKGFzeW5jIChwcmlzbWEpID0+IHtcbiAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgIHdoZXJlOiB7IGVtYWlsOiBlbWFpbC50b0xvd2VyQ2FzZSgpIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgd2l0aCB0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3RzLicpO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkKTtcblxuICAgIGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBlbWFpbDogZW1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgICAgICBuYW1lLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIHJvbGU6ICdVU0VSJyxcbiAgICAgICAgc3RhdHVzOiAnQUNUSVZFJyxcbiAgICAgIH0sXG4gICAgICBzZWxlY3Q6IHtcbiAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICBhdmF0YXI6IHRydWUsXG4gICAgICAgIHJvbGU6IHRydWUsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgeyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuIH0gPSBhd2FpdCBnZW5lcmF0ZVRva2VuKG5ld1VzZXIpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXI6IG5ld1VzZXIsXG4gICAgICB0b2tlbnM6IHsgYWNjZXNzVG9rZW4sIHJlZnJlc2hUb2tlbiB9LFxuICAgIH07XG4gIH0pO1xufTtcblxuLyoqXG4gKiBSZWZyZXNoZXMgdGhlIGFjY2VzcyB0b2tlbiB1c2luZyBhIHJlZnJlc2ggdG9rZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZnJlc2hUb2tlbiAtIFRoZSByZWZyZXNoIHRva2VuLlxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gVGhlIG5ldyB0b2tlbnMuXG4gKi9cbmV4cG9ydCBjb25zdCByZWZyZXNoVG9rZW4gPSBhc3luYyAodG9rZW46IHN0cmluZykgPT4ge1xuICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdmVyaWZ5VG9rZW4odG9rZW4sICdyZWZyZXNoJyk7XG4gIGlmICghcGF5bG9hZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZWZyZXNoIHRva2VuLicpO1xuICB9XG5cbiAgY29uc3QgdXNlciA9IGF3YWl0IGVuaGFuY2VkRGIucHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgd2hlcmU6IHsgaWQ6IHBheWxvYWQudXNlcklkIH0sXG4gICAgc2VsZWN0OiB7XG4gICAgICBpZDogdHJ1ZSxcbiAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgIGF2YXRhcjogdHJ1ZSxcbiAgICAgIHJvbGU6IHRydWUsXG4gICAgICBzdGF0dXM6IHRydWUsXG4gICAgfSxcbiAgfSk7XG5cbiAgaWYgKCF1c2VyIHx8IHVzZXIuc3RhdHVzICE9PSAnQUNUSVZFJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgb3IgaW5hY3RpdmUuJyk7XG4gIH1cblxuICBjb25zdCB7IGFjY2Vzc1Rva2VuLCByZWZyZXNoVG9rZW46IG5ld1JlZnJlc2hUb2tlbiB9ID0gYXdhaXQgZ2VuZXJhdGVUb2tlbih1c2VyKTtcblxuICByZXR1cm4geyBhY2Nlc3NUb2tlbiwgcmVmcmVzaFRva2VuOiBuZXdSZWZyZXNoVG9rZW4gfTtcbn07XG5cbi8qKlxuICogQ2hhbmdlcyBhIHVzZXIncyBwYXNzd29yZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIC0gVGhlIHVzZXIgSUQuXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIFRoZSBwYXNzd29yZCBjaGFuZ2UgZGF0YS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgY29uc3QgY2hhbmdlUGFzc3dvcmQgPSBhc3luYyAodXNlcklkOiBzdHJpbmcsIGRhdGE6IHouaW5mZXI8dHlwZW9mIGNoYW5nZVBhc3N3b3JkU2NoZW1hPikgPT4ge1xuICBjb25zdCB7IG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZCB9ID0gZGF0YTtcblxuICByZXR1cm4gZGJUcmFuc2FjdGlvbihhc3luYyAocHJpc21hKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9LFxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIGlkOiB0cnVlLFxuICAgICAgICBwYXNzd29yZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQuJyk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNWYWxpZFBhc3N3b3JkID0gYXdhaXQgdmVyaWZ5UGFzc3dvcmQob2xkUGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICAgIGlmICghaXNWYWxpZFBhc3N3b3JkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY3VycmVudCBwYXNzd29yZC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChuZXdQYXNzd29yZCk7XG5cbiAgICBhd2FpdCBwcmlzbWEudXNlci51cGRhdGUoe1xuICAgICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9LFxuICAgICAgZGF0YToge1xuICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUFBO0FBQUEsU0FBQUEsY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7SUFBQTtJQUFBVyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsY0FBQTtNQUFBQyxJQUFBO01BQUFDLFFBQUE7TUFBQUMsS0FBQTtNQUFBQyxPQUFBO01BQUFDLGNBQUE7TUFBQUMsT0FBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQTVCLElBQUE7RUFB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