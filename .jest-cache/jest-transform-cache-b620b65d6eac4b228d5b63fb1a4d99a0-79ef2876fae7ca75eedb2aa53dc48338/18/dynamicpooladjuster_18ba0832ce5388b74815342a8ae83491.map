{"version":3,"names":["cov_xet7d9ucc","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","monitoring_1","connection_pool_analyzer_1","DynamicPoolAdjuster","EventEmitter","constructor","intervalMs","maxHistorySize","smoothingFactor","isActive","adjustmentInterval","loadMetricsHistory","adjustmentHistory","lastAdjustmentTime","strategies","initializeStrategies","predictionModel","initializePredictionModel","setupEventListeners","description","triggers","cpuThreshold","memoryThreshold","responseTimeThreshold","poolUtilizationThreshold","actions","connectionAdjustment","amount","maxLimit","timeoutAdjustment","acquireTimeout","createTimeout","priority","cooldownMs","minLimit","idleTimeout","errorRateThreshold","configAdjustment","createRetryInterval","reapInterval","predictOptimalConnections","metrics","currentConfig","length","max","recentMetrics","slice","avgCpu","reduce","sum","m","cpuUsage","avgMemory","memoryUsage","avgConcurrent","concurrentRequests","optimalConnections","Math","ceil","min","predictLoadTrend","recent","throughputTrend","throughput","cpuTrend","calculateConfidence","cpuVariance","calculateVariance","map","memoryVariance","confidence","values","mean","val","variance","pow","databaseMonitor","on","collectLoadMetrics","connectionPoolAnalyzer","data","handleAnalysisComplete","dbMetrics","loadMetrics","timestamp","Date","user","system","heapUsed","heapTotal","activeConnections","avgResponseTime","avgLatency","errorRate","totalQueries","successfulQueries","now","getTime","push","shift","emit","recommendations","highPriorityRecommendations","filter","rec","triggerAdjustment","console","log","startAnalysis","setInterval","performAdjustment","stop","clearInterval","stopAnalysis","reason","currentMetrics","triggeredStrategies","findTriggeredStrategies","strategy","sort","a","isInCooldown","getCurrentPoolConfig","toFixed","adjustmentResult","applyAdjustment","recordAdjustment","error","currentStats","getCurrentStats","utilizationRate","timeSinceLastAdjustment","parseInt","process","env","DB_MIN_CONNECTIONS","DB_MAX_CONNECTIONS","DB_ACQUIRE_TIMEOUT","DB_CREATE_TIMEOUT","DB_IDLE_TIMEOUT","newConfig","hasChanges","adjustment","timeouts","smoothedConfig","applySmoothingFactor","before","after","beforeConfig","afterConfig","result","numericFields","forEach","field","delta","round","getAdjustmentHistory","limit","getLoadMetricsHistory","getStatus","lastAdjustment","totalAdjustments","currentLoadMetrics","updateStrategies","generatePerformanceReport","recentAdjustments","successfulAdjustments","adj","avgCpuUsage","avgMemoryUsage","summary","toISOString","trim","adjustmentStats","total","successful","successRate","loadTrends","trend","exports","dynamicPoolAdjuster"],"sources":["E:\\zk-agent\\lib\\database\\dynamic-pool-adjuster.ts"],"sourcesContent":["/**\r\n * 负载感知的动态连接池调整器\r\n * 基于实时负载和使用模式动态调整连接池参数\r\n * \r\n * 功能:\r\n * - 实时监控系统负载和连接池使用情况\r\n * - 基于机器学习算法预测最优连接池配置\r\n * - 自动调整连接池参数以适应负载变化\r\n * - 提供平滑的扩缩容策略避免系统震荡\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { DatabaseMetrics } from './monitoring'\r\nimport { databaseMonitor } from './monitoring'\r\nimport { connectionPoolAnalyzer, PoolUsageStats, UsagePatternAnalysis } from './connection-pool-analyzer'\r\nimport { enhancedDatabaseManager } from './enhanced-database-manager'\r\n\r\n/**\r\n * 负载指标接口\r\n */\r\ninterface LoadMetrics {\r\n  /** 时间戳 */\r\n  timestamp: Date\r\n  /** CPU使用率 */\r\n  cpuUsage: number\r\n  /** 内存使用率 */\r\n  memoryUsage: number\r\n  /** 并发请求数 */\r\n  concurrentRequests: number\r\n  /** 平均响应时间 */\r\n  avgResponseTime: number\r\n  /** 错误率 */\r\n  errorRate: number\r\n  /** 吞吐量(请求/秒) */\r\n  throughput: number\r\n}\r\n\r\n/**\r\n * 调整策略接口\r\n */\r\ninterface AdjustmentStrategy {\r\n  /** 策略名称 */\r\n  name: string\r\n  /** 策略描述 */\r\n  description: string\r\n  /** 触发条件 */\r\n  triggers: {\r\n    /** CPU使用率阈值 */\r\n    cpuThreshold?: number\r\n    /** 内存使用率阈值 */\r\n    memoryThreshold?: number\r\n    /** 响应时间阈值 */\r\n    responseTimeThreshold?: number\r\n    /** 错误率阈值 */\r\n    errorRateThreshold?: number\r\n    /** 连接池使用率阈值 */\r\n    poolUtilizationThreshold?: number\r\n  }\r\n  /** 调整动作 */\r\n  actions: {\r\n    /** 连接数调整 */\r\n    connectionAdjustment?: {\r\n      type: 'increase' | 'decrease'\r\n      amount: number\r\n      maxLimit?: number\r\n      minLimit?: number\r\n    }\r\n    /** 超时调整 */\r\n    timeoutAdjustment?: {\r\n      acquireTimeout?: number\r\n      idleTimeout?: number\r\n      createTimeout?: number\r\n    }\r\n    /** 其他配置调整 */\r\n    configAdjustment?: {\r\n      reapInterval?: number\r\n      createRetryInterval?: number\r\n    }\r\n  }\r\n  /** 策略优先级 */\r\n  priority: number\r\n  /** 冷却时间(ms) */\r\n  cooldownMs: number\r\n}\r\n\r\n/**\r\n * 调整历史记录接口\r\n */\r\ninterface AdjustmentHistory {\r\n  /** 时间戳 */\r\n  timestamp: Date\r\n  /** 调整前配置 */\r\n  beforeConfig: any\r\n  /** 调整后配置 */\r\n  afterConfig: any\r\n  /** 使用的策略 */\r\n  strategy: string\r\n  /** 触发原因 */\r\n  reason: string\r\n  /** 负载指标 */\r\n  loadMetrics: LoadMetrics\r\n  /** 调整结果 */\r\n  result: 'success' | 'failed' | 'partial'\r\n  /** 性能影响 */\r\n  performanceImpact?: {\r\n    responseTimeDelta: number\r\n    throughputDelta: number\r\n    errorRateDelta: number\r\n  }\r\n}\r\n\r\n/**\r\n * 预测模型接口\r\n */\r\ninterface PredictionModel {\r\n  /** 预测最优连接数 */\r\n  predictOptimalConnections(metrics: LoadMetrics[], currentConfig: any): number\r\n  /** 预测负载趋势 */\r\n  predictLoadTrend(metrics: LoadMetrics[]): 'increasing' | 'decreasing' | 'stable'\r\n  /** 计算调整置信度 */\r\n  calculateConfidence(metrics: LoadMetrics[]): number\r\n}\r\n\r\n/**\r\n * 动态连接池调整器类\r\n */\r\nexport class DynamicPoolAdjuster extends EventEmitter {\r\n  private isActive: boolean = false\r\n  private adjustmentInterval: NodeJS.Timeout | null = null\r\n  private loadMetricsHistory: LoadMetrics[] = []\r\n  private adjustmentHistory: AdjustmentHistory[] = []\r\n  private strategies: AdjustmentStrategy[]\r\n  private predictionModel: PredictionModel\r\n  private lastAdjustmentTime: Date | null = null\r\n  private intervalMs: number\r\n  private maxHistorySize: number\r\n  private smoothingFactor: number\r\n\r\n  constructor(\r\n    intervalMs: number = 30000, // 30秒检查一次\r\n    maxHistorySize: number = 500,\r\n    smoothingFactor: number = 0.3 // 平滑因子，用于避免频繁调整\r\n  ) {\r\n    super()\r\n    this.intervalMs = intervalMs\r\n    this.maxHistorySize = maxHistorySize\r\n    this.smoothingFactor = smoothingFactor\r\n    \r\n    // 初始化策略\r\n    this.strategies = this.initializeStrategies()\r\n    \r\n    // 初始化预测模型\r\n    this.predictionModel = this.initializePredictionModel()\r\n    \r\n    // 设置监听器\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * 初始化调整策略\r\n   * \r\n   * @returns 策略数组\r\n   */\r\n  private initializeStrategies(): AdjustmentStrategy[] {\r\n    return [\r\n      {\r\n        name: 'high_load_scale_up',\r\n        description: '高负载时扩容连接池',\r\n        triggers: {\r\n          cpuThreshold: 80,\r\n          memoryThreshold: 85,\r\n          responseTimeThreshold: 2000,\r\n          poolUtilizationThreshold: 90\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'increase',\r\n            amount: 3,\r\n            maxLimit: 50\r\n          },\r\n          timeoutAdjustment: {\r\n            acquireTimeout: 90000,\r\n            createTimeout: 45000\r\n          }\r\n        },\r\n        priority: 1,\r\n        cooldownMs: 120000 // 2分钟冷却\r\n      },\r\n      {\r\n        name: 'low_load_scale_down',\r\n        description: '低负载时缩容连接池',\r\n        triggers: {\r\n          cpuThreshold: 20,\r\n          memoryThreshold: 30,\r\n          poolUtilizationThreshold: 25\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'decrease',\r\n            amount: 2,\r\n            minLimit: 3\r\n          },\r\n          timeoutAdjustment: {\r\n            idleTimeout: 180000 // 3分钟空闲超时\r\n          }\r\n        },\r\n        priority: 3,\r\n        cooldownMs: 300000 // 5分钟冷却\r\n      },\r\n      {\r\n        name: 'high_error_rate_recovery',\r\n        description: '高错误率时的恢复策略',\r\n        triggers: {\r\n          errorRateThreshold: 5\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'decrease',\r\n            amount: 1,\r\n            minLimit: 2\r\n          },\r\n          timeoutAdjustment: {\r\n            createTimeout: 60000,\r\n            acquireTimeout: 120000\r\n          },\r\n          configAdjustment: {\r\n            createRetryInterval: 1000\r\n          }\r\n        },\r\n        priority: 2,\r\n        cooldownMs: 180000 // 3分钟冷却\r\n      },\r\n      {\r\n        name: 'burst_traffic_handling',\r\n        description: '突发流量处理',\r\n        triggers: {\r\n          responseTimeThreshold: 1500,\r\n          poolUtilizationThreshold: 85\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'increase',\r\n            amount: 5,\r\n            maxLimit: 40\r\n          },\r\n          timeoutAdjustment: {\r\n            acquireTimeout: 60000\r\n          }\r\n        },\r\n        priority: 1,\r\n        cooldownMs: 90000 // 1.5分钟冷却\r\n      },\r\n      {\r\n        name: 'memory_pressure_optimization',\r\n        description: '内存压力优化',\r\n        triggers: {\r\n          memoryThreshold: 90\r\n        },\r\n        actions: {\r\n          connectionAdjustment: {\r\n            type: 'decrease',\r\n            amount: 3,\r\n            minLimit: 2\r\n          },\r\n          timeoutAdjustment: {\r\n            idleTimeout: 120000 // 2分钟空闲超时\r\n          },\r\n          configAdjustment: {\r\n            reapInterval: 500 // 更频繁的连接回收\r\n          }\r\n        },\r\n        priority: 2,\r\n        cooldownMs: 240000 // 4分钟冷却\r\n      }\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * 初始化预测模型\r\n   * \r\n   * @returns 预测模型实例\r\n   */\r\n  private initializePredictionModel(): PredictionModel {\r\n    return {\r\n      predictOptimalConnections: (metrics: LoadMetrics[], currentConfig: any): number => {\r\n        if (metrics.length < 5) {\r\n          return currentConfig.max || 10\r\n        }\r\n\r\n        // 简单的线性回归预测\r\n        const recentMetrics = metrics.slice(-10)\r\n        const avgCpu = recentMetrics.reduce((sum, m) => sum + m.cpuUsage, 0) / recentMetrics.length\r\n        const avgMemory = recentMetrics.reduce((sum, m) => sum + m.memoryUsage, 0) / recentMetrics.length\r\n        const avgConcurrent = recentMetrics.reduce((sum, m) => sum + m.concurrentRequests, 0) / recentMetrics.length\r\n\r\n        // 基于负载计算最优连接数\r\n        let optimalConnections = Math.ceil(avgConcurrent * 1.2)\r\n        \r\n        // 根据CPU和内存使用率调整\r\n        if (avgCpu > 70 || avgMemory > 80) {\r\n          optimalConnections = Math.min(optimalConnections, currentConfig.max * 0.8)\r\n        } else if (avgCpu < 30 && avgMemory < 50) {\r\n          optimalConnections = Math.max(optimalConnections, currentConfig.min || 2)\r\n        }\r\n\r\n        return Math.max(2, Math.min(50, optimalConnections))\r\n      },\r\n\r\n      predictLoadTrend: (metrics: LoadMetrics[]): 'increasing' | 'decreasing' | 'stable' => {\r\n        if (metrics.length < 3) {\r\n          return 'stable'\r\n        }\r\n\r\n        const recent = metrics.slice(-3)\r\n        const throughputTrend = recent[2].throughput - recent[0].throughput\r\n        const cpuTrend = recent[2].cpuUsage - recent[0].cpuUsage\r\n\r\n        if (throughputTrend > 10 || cpuTrend > 15) {\r\n          return 'increasing'\r\n        } else if (throughputTrend < -10 || cpuTrend < -15) {\r\n          return 'decreasing'\r\n        } else {\r\n          return 'stable'\r\n        }\r\n      },\r\n\r\n      calculateConfidence: (metrics: LoadMetrics[]): number => {\r\n        if (metrics.length < 5) {\r\n          return 0.3\r\n        }\r\n\r\n        // 基于数据一致性计算置信度\r\n        const recent = metrics.slice(-5)\r\n        const cpuVariance = this.calculateVariance(recent.map(m => m.cpuUsage))\r\n        const memoryVariance = this.calculateVariance(recent.map(m => m.memoryUsage))\r\n        \r\n        // 方差越小，置信度越高\r\n        const confidence = Math.max(0.1, Math.min(1.0, 1 - (cpuVariance + memoryVariance) / 200))\r\n        return confidence\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算方差\r\n   * \r\n   * @param values - 数值数组\r\n   * @returns 方差\r\n   */\r\n  private calculateVariance(values: number[]): number {\r\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length\r\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length\r\n    return variance\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听数据库监控事件\r\n    databaseMonitor.on('metrics', (metrics: DatabaseMetrics) => {\r\n      this.collectLoadMetrics(metrics)\r\n    })\r\n\r\n    // 监听连接池分析器事件\r\n    connectionPoolAnalyzer.on('analysis-complete', (data) => {\r\n      this.handleAnalysisComplete(data)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 收集负载指标\r\n   * \r\n   * @param dbMetrics - 数据库监控指标\r\n   */\r\n  private collectLoadMetrics(dbMetrics: DatabaseMetrics): void {\r\n    const loadMetrics: LoadMetrics = {\r\n      timestamp: new Date(),\r\n      cpuUsage: dbMetrics.cpuUsage.user + dbMetrics.cpuUsage.system,\r\n      memoryUsage: (dbMetrics.memoryUsage.heapUsed / dbMetrics.memoryUsage.heapTotal) * 100,\r\n      concurrentRequests: dbMetrics.activeConnections || 0,\r\n      avgResponseTime: dbMetrics.avgLatency || 0,\r\n      errorRate: ((dbMetrics.totalQueries - dbMetrics.successfulQueries) / Math.max(1, dbMetrics.totalQueries)) * 100,\r\n      throughput: dbMetrics.totalQueries / Math.max(1, (Date.now() - dbMetrics.timestamp.getTime()) / 1000)\r\n    }\r\n\r\n    this.loadMetricsHistory.push(loadMetrics)\r\n\r\n    // 限制历史记录大小\r\n    if (this.loadMetricsHistory.length > this.maxHistorySize) {\r\n      this.loadMetricsHistory.shift()\r\n    }\r\n\r\n    this.emit('load-metrics', loadMetrics)\r\n  }\r\n\r\n  /**\r\n   * 处理分析完成事件\r\n   * \r\n   * @param data - 分析数据\r\n   */\r\n  private handleAnalysisComplete(data: any): void {\r\n    // 基于分析结果触发调整\r\n    if (data.recommendations && data.recommendations.length > 0) {\r\n      const highPriorityRecommendations = data.recommendations.filter(\r\n        (rec: any) => rec.priority === 'high'\r\n      )\r\n      \r\n      if (highPriorityRecommendations.length > 0) {\r\n        this.triggerAdjustment('analysis_recommendation')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始动态调整\r\n   */\r\n  start(): void {\r\n    if (this.isActive) {\r\n      console.log('Dynamic pool adjuster is already active')\r\n      return\r\n    }\r\n\r\n    console.log(`Starting dynamic pool adjustment (interval: ${this.intervalMs}ms)`)\r\n    this.isActive = true\r\n\r\n    // 启动连接池分析器\r\n    connectionPoolAnalyzer.startAnalysis()\r\n\r\n    this.adjustmentInterval = setInterval(() => {\r\n      this.performAdjustment()\r\n    }, this.intervalMs)\r\n\r\n    // 立即执行一次检查\r\n    this.performAdjustment()\r\n  }\r\n\r\n  /**\r\n   * 停止动态调整\r\n   */\r\n  stop(): void {\r\n    if (!this.isActive) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping dynamic pool adjustment')\r\n    this.isActive = false\r\n\r\n    if (this.adjustmentInterval) {\r\n      clearInterval(this.adjustmentInterval)\r\n      this.adjustmentInterval = null\r\n    }\r\n\r\n    // 停止连接池分析器\r\n    connectionPoolAnalyzer.stopAnalysis()\r\n  }\r\n\r\n  /**\r\n   * 触发立即调整\r\n   * \r\n   * @param reason - 触发原因\r\n   */\r\n  triggerAdjustment(reason: string): void {\r\n    console.log(`Triggering immediate pool adjustment: ${reason}`)\r\n    this.performAdjustment()\r\n  }\r\n\r\n  /**\r\n   * 执行调整\r\n   */\r\n  private async performAdjustment(): Promise<void> {\r\n    if (this.loadMetricsHistory.length < 3) {\r\n      // 数据不足，无法进行调整\r\n      return\r\n    }\r\n\r\n    try {\r\n      const currentMetrics = this.loadMetricsHistory[this.loadMetricsHistory.length - 1]\r\n      const triggeredStrategies = this.findTriggeredStrategies(currentMetrics)\r\n\r\n      if (triggeredStrategies.length === 0) {\r\n        return\r\n      }\r\n\r\n      // 选择优先级最高的策略\r\n      const strategy = triggeredStrategies.sort((a, b) => a.priority - b.priority)[0]\r\n\r\n      // 检查冷却时间\r\n      if (this.isInCooldown(strategy)) {\r\n        return\r\n      }\r\n\r\n      // 获取当前配置\r\n      const currentConfig = await this.getCurrentPoolConfig()\r\n      \r\n      // 计算调整置信度\r\n      const confidence = this.predictionModel.calculateConfidence(this.loadMetricsHistory)\r\n      \r\n      if (confidence < 0.5) {\r\n        console.log(`Skipping adjustment due to low confidence: ${confidence.toFixed(2)}`)\r\n        return\r\n      }\r\n\r\n      // 应用调整\r\n      const adjustmentResult = await this.applyAdjustment(strategy, currentConfig, currentMetrics)\r\n      \r\n      if (adjustmentResult) {\r\n        this.recordAdjustment(adjustmentResult)\r\n        this.lastAdjustmentTime = new Date()\r\n        this.emit('adjustment-applied', adjustmentResult)\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error during dynamic pool adjustment:', error)\r\n      this.emit('adjustment-error', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 查找被触发的策略\r\n   * \r\n   * @param metrics - 当前负载指标\r\n   * @returns 被触发的策略数组\r\n   */\r\n  private findTriggeredStrategies(metrics: LoadMetrics): AdjustmentStrategy[] {\r\n    return this.strategies.filter(strategy => {\r\n      const triggers = strategy.triggers\r\n      \r\n      // 检查CPU阈值\r\n      if (triggers.cpuThreshold !== undefined && metrics.cpuUsage < triggers.cpuThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查内存阈值\r\n      if (triggers.memoryThreshold !== undefined && metrics.memoryUsage < triggers.memoryThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查响应时间阈值\r\n      if (triggers.responseTimeThreshold !== undefined && metrics.avgResponseTime < triggers.responseTimeThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查错误率阈值\r\n      if (triggers.errorRateThreshold !== undefined && metrics.errorRate < triggers.errorRateThreshold) {\r\n        return false\r\n      }\r\n      \r\n      // 检查连接池使用率阈值\r\n      if (triggers.poolUtilizationThreshold !== undefined) {\r\n        const currentStats = connectionPoolAnalyzer.getCurrentStats()\r\n        if (!currentStats || currentStats.utilizationRate < triggers.poolUtilizationThreshold) {\r\n          return false\r\n        }\r\n      }\r\n      \r\n      return true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 检查是否在冷却期内\r\n   * \r\n   * @param strategy - 策略\r\n   * @returns 是否在冷却期\r\n   */\r\n  private isInCooldown(strategy: AdjustmentStrategy): boolean {\r\n    if (!this.lastAdjustmentTime) {\r\n      return false\r\n    }\r\n    \r\n    const timeSinceLastAdjustment = Date.now() - this.lastAdjustmentTime.getTime()\r\n    return timeSinceLastAdjustment < strategy.cooldownMs\r\n  }\r\n\r\n  /**\r\n   * 获取当前连接池配置\r\n   * \r\n   * @returns 当前配置\r\n   */\r\n  private async getCurrentPoolConfig(): Promise<any> {\r\n    // 这里需要从实际的连接池获取配置\r\n    // 暂时返回默认配置\r\n    return {\r\n      min: parseInt(process.env.DB_MIN_CONNECTIONS || '2'),\r\n      max: parseInt(process.env.DB_MAX_CONNECTIONS || '20'),\r\n      acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000'),\r\n      createTimeout: parseInt(process.env.DB_CREATE_TIMEOUT || '30000'),\r\n      idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '300000')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用调整\r\n   * \r\n   * @param strategy - 调整策略\r\n   * @param currentConfig - 当前配置\r\n   * @param metrics - 负载指标\r\n   * @returns 调整结果\r\n   */\r\n  private async applyAdjustment(\r\n    strategy: AdjustmentStrategy,\r\n    currentConfig: any,\r\n    metrics: LoadMetrics\r\n  ): Promise<AdjustmentHistory | null> {\r\n    const newConfig = { ...currentConfig }\r\n    let hasChanges = false\r\n\r\n    // 应用连接数调整\r\n    if (strategy.actions.connectionAdjustment) {\r\n      const adjustment = strategy.actions.connectionAdjustment\r\n      \r\n      if (adjustment.type === 'increase') {\r\n        newConfig.max = Math.min(\r\n          newConfig.max + adjustment.amount,\r\n          adjustment.maxLimit || 50\r\n        )\r\n        hasChanges = true\r\n      } else if (adjustment.type === 'decrease') {\r\n        newConfig.max = Math.max(\r\n          newConfig.max - adjustment.amount,\r\n          adjustment.minLimit || 2\r\n        )\r\n        newConfig.min = Math.min(newConfig.min, newConfig.max - 1)\r\n        hasChanges = true\r\n      }\r\n    }\r\n\r\n    // 应用超时调整\r\n    if (strategy.actions.timeoutAdjustment) {\r\n      const timeouts = strategy.actions.timeoutAdjustment\r\n      \r\n      if (timeouts.acquireTimeout) {\r\n        newConfig.acquireTimeout = timeouts.acquireTimeout\r\n        hasChanges = true\r\n      }\r\n      \r\n      if (timeouts.createTimeout) {\r\n        newConfig.createTimeout = timeouts.createTimeout\r\n        hasChanges = true\r\n      }\r\n      \r\n      if (timeouts.idleTimeout) {\r\n        newConfig.idleTimeout = timeouts.idleTimeout\r\n        hasChanges = true\r\n      }\r\n    }\r\n\r\n    if (!hasChanges) {\r\n      return null\r\n    }\r\n\r\n    // 应用平滑因子\r\n    const smoothedConfig = this.applySmoothingFactor(currentConfig, newConfig)\r\n\r\n    try {\r\n      // 这里需要实际应用配置到连接池\r\n      // await enhancedDatabaseManager.updatePoolConfig(smoothedConfig)\r\n      \r\n      console.log(`Applied pool adjustment using strategy: ${strategy.name}`, {\r\n        before: currentConfig,\r\n        after: smoothedConfig\r\n      })\r\n\r\n      return {\r\n        timestamp: new Date(),\r\n        beforeConfig: currentConfig,\r\n        afterConfig: smoothedConfig,\r\n        strategy: strategy.name,\r\n        reason: strategy.description,\r\n        loadMetrics: metrics,\r\n        result: 'success'\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Failed to apply pool configuration:', error)\r\n      \r\n      return {\r\n        timestamp: new Date(),\r\n        beforeConfig: currentConfig,\r\n        afterConfig: smoothedConfig,\r\n        strategy: strategy.name,\r\n        reason: strategy.description,\r\n        loadMetrics: metrics,\r\n        result: 'failed'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用平滑因子\r\n   * \r\n   * @param currentConfig - 当前配置\r\n   * @param newConfig - 新配置\r\n   * @returns 平滑后的配置\r\n   */\r\n  private applySmoothingFactor(currentConfig: any, newConfig: any): any {\r\n    const smoothedConfig = { ...currentConfig }\r\n    \r\n    // 对数值型配置应用平滑因子\r\n    const numericFields = ['max', 'min', 'acquireTimeout', 'createTimeout', 'idleTimeout']\r\n    \r\n    numericFields.forEach(field => {\r\n      if (newConfig[field] !== undefined && currentConfig[field] !== undefined) {\r\n        const delta = newConfig[field] - currentConfig[field]\r\n        smoothedConfig[field] = Math.round(currentConfig[field] + delta * this.smoothingFactor)\r\n      }\r\n    })\r\n    \r\n    return smoothedConfig\r\n  }\r\n\r\n  /**\r\n   * 记录调整历史\r\n   * \r\n   * @param adjustment - 调整记录\r\n   */\r\n  private recordAdjustment(adjustment: AdjustmentHistory): void {\r\n    this.adjustmentHistory.push(adjustment)\r\n    \r\n    // 限制历史记录大小\r\n    if (this.adjustmentHistory.length > 100) {\r\n      this.adjustmentHistory.shift()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取调整历史\r\n   * \r\n   * @param limit - 限制返回数量\r\n   * @returns 调整历史\r\n   */\r\n  getAdjustmentHistory(limit?: number): AdjustmentHistory[] {\r\n    if (limit) {\r\n      return this.adjustmentHistory.slice(-limit)\r\n    }\r\n    return [...this.adjustmentHistory]\r\n  }\r\n\r\n  /**\r\n   * 获取负载指标历史\r\n   * \r\n   * @param limit - 限制返回数量\r\n   * @returns 负载指标历史\r\n   */\r\n  getLoadMetricsHistory(limit?: number): LoadMetrics[] {\r\n    if (limit) {\r\n      return this.loadMetricsHistory.slice(-limit)\r\n    }\r\n    return [...this.loadMetricsHistory]\r\n  }\r\n\r\n  /**\r\n   * 获取当前状态\r\n   * \r\n   * @returns 当前状态\r\n   */\r\n  getStatus(): {\r\n    isActive: boolean\r\n    lastAdjustment: Date | null\r\n    totalAdjustments: number\r\n    currentLoadMetrics: LoadMetrics | null\r\n    strategies: AdjustmentStrategy[]\r\n  } {\r\n    return {\r\n      isActive: this.isActive,\r\n      lastAdjustment: this.lastAdjustmentTime,\r\n      totalAdjustments: this.adjustmentHistory.length,\r\n      currentLoadMetrics: this.loadMetricsHistory.length > 0 \r\n        ? this.loadMetricsHistory[this.loadMetricsHistory.length - 1] \r\n        : null,\r\n      strategies: this.strategies\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新策略\r\n   * \r\n   * @param strategies - 新的策略数组\r\n   */\r\n  updateStrategies(strategies: AdjustmentStrategy[]): void {\r\n    this.strategies = strategies\r\n    console.log(`Updated adjustment strategies: ${strategies.length} strategies loaded`)\r\n    this.emit('strategies-updated', strategies)\r\n  }\r\n\r\n  /**\r\n   * 生成性能报告\r\n   * \r\n   * @returns 性能报告\r\n   */\r\n  generatePerformanceReport(): {\r\n    summary: string\r\n    adjustmentStats: any\r\n    loadTrends: any\r\n    recommendations: string[]\r\n  } {\r\n    const recentAdjustments = this.adjustmentHistory.slice(-10)\r\n    const recentMetrics = this.loadMetricsHistory.slice(-50)\r\n    \r\n    const successfulAdjustments = recentAdjustments.filter(adj => adj.result === 'success').length\r\n    const avgCpuUsage = recentMetrics.reduce((sum, m) => sum + m.cpuUsage, 0) / recentMetrics.length\r\n    const avgMemoryUsage = recentMetrics.reduce((sum, m) => sum + m.memoryUsage, 0) / recentMetrics.length\r\n    \r\n    const recommendations = []\r\n    \r\n    if (avgCpuUsage > 80) {\r\n      recommendations.push('考虑增加服务器资源或优化查询性能')\r\n    }\r\n    \r\n    if (avgMemoryUsage > 85) {\r\n      recommendations.push('内存使用率较高，建议优化内存使用或增加内存')\r\n    }\r\n    \r\n    if (successfulAdjustments < recentAdjustments.length * 0.8) {\r\n      recommendations.push('调整成功率较低，建议检查策略配置')\r\n    }\r\n    \r\n    return {\r\n      summary: `\r\n动态连接池调整性能报告\r\n========================\r\n分析时间: ${new Date().toISOString()}\r\n总调整次数: ${this.adjustmentHistory.length}\r\n成功调整次数: ${successfulAdjustments}\r\n平均CPU使用率: ${avgCpuUsage.toFixed(2)}%\r\n平均内存使用率: ${avgMemoryUsage.toFixed(2)}%\r\n      `.trim(),\r\n      adjustmentStats: {\r\n        total: this.adjustmentHistory.length,\r\n        successful: successfulAdjustments,\r\n        successRate: (successfulAdjustments / Math.max(1, recentAdjustments.length)) * 100\r\n      },\r\n      loadTrends: {\r\n        avgCpuUsage,\r\n        avgMemoryUsage,\r\n        trend: this.predictionModel.predictLoadTrend(recentMetrics)\r\n      },\r\n      recommendations\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const dynamicPoolAdjuster = new DynamicPoolAdjuster()\r\n\r\n// 导出类型\r\nexport type {\r\n  LoadMetrics,\r\n  AdjustmentStrategy,\r\n  AdjustmentHistory,\r\n  PredictionModel\r\n}\r\n"],"mappings":"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","ignoreList":[]}