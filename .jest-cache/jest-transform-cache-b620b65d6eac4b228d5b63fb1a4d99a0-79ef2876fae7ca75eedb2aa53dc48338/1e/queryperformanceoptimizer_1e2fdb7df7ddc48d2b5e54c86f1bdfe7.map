{"file":"E:\\zk-agent\\lib\\database\\query-performance-optimizer.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\query-performance-optimizer.ts"],"sourcesContent":["/**\r\n * 查询性能优化器\r\n * 智能分析和优化数据库查询性能\r\n * \r\n * 功能:\r\n * - 实时监控查询执行时间和资源使用\r\n * - 自动识别慢查询和性能瓶颈\r\n * - 提供查询优化建议和自动优化\r\n * - 支持查询缓存和预编译语句优化\r\n * - 生成查询性能分析报告\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { performance } from 'perf_hooks'\r\nimport { databaseMonitor } from './monitoring'\r\nimport { enhancedDatabaseManager } from './enhanced-database-manager'\r\n\r\n/**\r\n * 查询执行统计接口\r\n */\r\ninterface QueryExecutionStats {\r\n  /** 查询ID */\r\n  queryId: string\r\n  /** 查询SQL */\r\n  sql: string\r\n  /** 查询参数 */\r\n  params?: any[]\r\n  /** 执行时间(ms) */\r\n  executionTime: number\r\n  /** 开始时间 */\r\n  startTime: Date\r\n  /** 结束时间 */\r\n  endTime: Date\r\n  /** 影响行数 */\r\n  affectedRows?: number\r\n  /** 是否成功 */\r\n  success: boolean\r\n  /** 错误信息 */\r\n  error?: string\r\n  /** 查询类型 */\r\n  queryType: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE' | 'OTHER'\r\n  /** 表名 */\r\n  tables: string[]\r\n  /** 是否使用索引 */\r\n  usedIndex?: boolean\r\n  /** 扫描行数 */\r\n  scannedRows?: number\r\n  /** 返回行数 */\r\n  returnedRows?: number\r\n  /** 内存使用(bytes) */\r\n  memoryUsage?: number\r\n  /** CPU时间(ms) */\r\n  cpuTime?: number\r\n}\r\n\r\n/**\r\n * 查询模式接口\r\n */\r\ninterface QueryPattern {\r\n  /** 模式ID */\r\n  patternId: string\r\n  /** 查询模板 */\r\n  template: string\r\n  /** 执行次数 */\r\n  executionCount: number\r\n  /** 总执行时间 */\r\n  totalExecutionTime: number\r\n  /** 平均执行时间 */\r\n  avgExecutionTime: number\r\n  /** 最大执行时间 */\r\n  maxExecutionTime: number\r\n  /** 最小执行时间 */\r\n  minExecutionTime: number\r\n  /** 最后执行时间 */\r\n  lastExecutionTime: Date\r\n  /** 涉及的表 */\r\n  tables: Set<string>\r\n  /** 是否为慢查询 */\r\n  isSlowQuery: boolean\r\n  /** 优化建议 */\r\n  optimizationSuggestions: string[]\r\n}\r\n\r\n/**\r\n * 查询优化建议接口\r\n */\r\ninterface QueryOptimizationSuggestion {\r\n  /** 建议ID */\r\n  suggestionId: string\r\n  /** 查询模式ID */\r\n  patternId: string\r\n  /** 建议类型 */\r\n  type: 'index' | 'rewrite' | 'cache' | 'partition' | 'other'\r\n  /** 优先级 */\r\n  priority: 'high' | 'medium' | 'low'\r\n  /** 建议描述 */\r\n  description: string\r\n  /** 预期性能提升 */\r\n  expectedImprovement: number\r\n  /** 实施难度 */\r\n  implementationDifficulty: 'easy' | 'medium' | 'hard'\r\n  /** 具体建议 */\r\n  suggestion: string\r\n  /** 示例SQL */\r\n  exampleSql?: string\r\n  /** 创建时间 */\r\n  createdAt: Date\r\n  /** 是否已应用 */\r\n  applied: boolean\r\n}\r\n\r\n/**\r\n * 查询缓存配置接口\r\n */\r\ninterface QueryCacheConfig {\r\n  /** 是否启用缓存 */\r\n  enabled: boolean\r\n  /** 缓存大小限制 */\r\n  maxSize: number\r\n  /** 缓存TTL(ms) */\r\n  ttl: number\r\n  /** 缓存键前缀 */\r\n  keyPrefix: string\r\n  /** 缓存策略 */\r\n  strategy: 'lru' | 'lfu' | 'ttl'\r\n  /** 是否缓存慢查询 */\r\n  cacheSlowQueries: boolean\r\n  /** 慢查询阈值(ms) */\r\n  slowQueryThreshold: number\r\n}\r\n\r\n/**\r\n * 查询缓存项接口\r\n */\r\ninterface QueryCacheItem {\r\n  /** 缓存键 */\r\n  key: string\r\n  /** 查询结果 */\r\n  result: any\r\n  /** 创建时间 */\r\n  createdAt: Date\r\n  /** 过期时间 */\r\n  expiresAt: Date\r\n  /** 访问次数 */\r\n  accessCount: number\r\n  /** 最后访问时间 */\r\n  lastAccessedAt: Date\r\n  /** 数据大小(bytes) */\r\n  size: number\r\n}\r\n\r\n/**\r\n * 查询性能优化器类\r\n */\r\nexport class QueryPerformanceOptimizer extends EventEmitter {\r\n  private isActive: boolean = false\r\n  private queryStats: Map<string, QueryExecutionStats> = new Map()\r\n  private queryPatterns: Map<string, QueryPattern> = new Map()\r\n  private optimizationSuggestions: Map<string, QueryOptimizationSuggestion> = new Map()\r\n  private queryCache: Map<string, QueryCacheItem> = new Map()\r\n  private cacheConfig: QueryCacheConfig\r\n  private slowQueryThreshold: number\r\n  private maxStatsHistory: number\r\n  private analysisInterval: NodeJS.Timeout | null = null\r\n  private cacheCleanupInterval: NodeJS.Timeout | null = null\r\n\r\n  constructor(\r\n    slowQueryThreshold: number = 1000, // 1秒\r\n    maxStatsHistory: number = 10000,\r\n    cacheConfig?: Partial<QueryCacheConfig>\r\n  ) {\r\n    super()\r\n    this.slowQueryThreshold = slowQueryThreshold\r\n    this.maxStatsHistory = maxStatsHistory\r\n    \r\n    // 初始化缓存配置\r\n    this.cacheConfig = {\r\n      enabled: true,\r\n      maxSize: 1000,\r\n      ttl: 300000, // 5分钟\r\n      keyPrefix: 'query_cache:',\r\n      strategy: 'lru',\r\n      cacheSlowQueries: false,\r\n      slowQueryThreshold: this.slowQueryThreshold,\r\n      ...cacheConfig\r\n    }\r\n    \r\n    // 延迟设置事件监听器，避免循环依赖\r\n    process.nextTick(() => {\r\n      this.setupEventListeners()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听数据库查询事件\r\n    databaseMonitor.on('query-start', (queryInfo) => {\r\n      this.handleQueryStart(queryInfo)\r\n    })\r\n    \r\n    databaseMonitor.on('query-end', (queryInfo) => {\r\n      this.handleQueryEnd(queryInfo)\r\n    })\r\n    \r\n    databaseMonitor.on('query-error', (queryInfo) => {\r\n      this.handleQueryError(queryInfo)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 启动查询性能优化\r\n   */\r\n  start(): void {\r\n    if (this.isActive) {\r\n      console.log('Query performance optimizer is already active')\r\n      return\r\n    }\r\n\r\n    console.log('Starting query performance optimization')\r\n    this.isActive = true\r\n\r\n    // 启动定期分析\r\n    this.analysisInterval = setInterval(() => {\r\n      this.performAnalysis()\r\n    }, 60000) // 每分钟分析一次\r\n\r\n    // 启动缓存清理\r\n    if (this.cacheConfig.enabled) {\r\n      this.cacheCleanupInterval = setInterval(() => {\r\n        this.cleanupCache()\r\n      }, 30000) // 每30秒清理一次过期缓存\r\n    }\r\n\r\n    this.emit('optimizer-started')\r\n  }\r\n\r\n  /**\r\n   * 停止查询性能优化\r\n   */\r\n  stop(): void {\r\n    if (!this.isActive) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping query performance optimization')\r\n    this.isActive = false\r\n\r\n    if (this.analysisInterval) {\r\n      clearInterval(this.analysisInterval)\r\n      this.analysisInterval = null\r\n    }\r\n\r\n    if (this.cacheCleanupInterval) {\r\n      clearInterval(this.cacheCleanupInterval)\r\n      this.cacheCleanupInterval = null\r\n    }\r\n\r\n    this.emit('optimizer-stopped')\r\n  }\r\n\r\n  /**\r\n   * 处理查询开始事件\r\n   * \r\n   * @param queryInfo - 查询信息\r\n   */\r\n  private handleQueryStart(queryInfo: any): void {\r\n    const queryId = this.generateQueryId()\r\n    const startTime = new Date()\r\n    \r\n    // 检查缓存\r\n    if (this.cacheConfig.enabled && queryInfo.sql) {\r\n      const cacheKey = this.generateCacheKey(queryInfo.sql, queryInfo.params)\r\n      const cachedResult = this.getCachedResult(cacheKey)\r\n      \r\n      if (cachedResult) {\r\n        this.emit('cache-hit', { queryId, cacheKey, result: cachedResult })\r\n        return\r\n      }\r\n    }\r\n    \r\n    // 记录查询开始\r\n    const stats: Partial<QueryExecutionStats> = {\r\n      queryId,\r\n      sql: queryInfo.sql,\r\n      params: queryInfo.params,\r\n      startTime,\r\n      queryType: this.detectQueryType(queryInfo.sql),\r\n      tables: this.extractTables(queryInfo.sql)\r\n    }\r\n    \r\n    this.queryStats.set(queryId, stats as QueryExecutionStats)\r\n    this.emit('query-started', stats)\r\n  }\r\n\r\n  /**\r\n   * 处理查询结束事件\r\n   * \r\n   * @param queryInfo - 查询信息\r\n   */\r\n  private handleQueryEnd(queryInfo: any): void {\r\n    const stats = this.findQueryStats(queryInfo)\r\n    if (!stats) {\r\n      return\r\n    }\r\n\r\n    const endTime = new Date()\r\n    const executionTime = endTime.getTime() - stats.startTime.getTime()\r\n\r\n    // 更新统计信息\r\n    stats.endTime = endTime\r\n    stats.executionTime = executionTime\r\n    stats.success = true\r\n    stats.affectedRows = queryInfo.affectedRows\r\n    stats.returnedRows = queryInfo.returnedRows\r\n    stats.scannedRows = queryInfo.scannedRows\r\n    stats.usedIndex = queryInfo.usedIndex\r\n    stats.memoryUsage = queryInfo.memoryUsage\r\n    stats.cpuTime = queryInfo.cpuTime\r\n\r\n    // 缓存查询结果\r\n    if (this.shouldCacheQuery(stats, queryInfo.result)) {\r\n      this.cacheQueryResult(stats, queryInfo.result)\r\n    }\r\n\r\n    // 更新查询模式\r\n    this.updateQueryPattern(stats)\r\n\r\n    // 检查是否为慢查询\r\n    if (executionTime > this.slowQueryThreshold) {\r\n      this.handleSlowQuery(stats)\r\n    }\r\n\r\n    this.emit('query-completed', stats)\r\n    \r\n    // 清理历史记录\r\n    this.cleanupStatsHistory()\r\n  }\r\n\r\n  /**\r\n   * 处理查询错误事件\r\n   * \r\n   * @param queryInfo - 查询信息\r\n   */\r\n  private handleQueryError(queryInfo: any): void {\r\n    const stats = this.findQueryStats(queryInfo)\r\n    if (!stats) {\r\n      return\r\n    }\r\n\r\n    const endTime = new Date()\r\n    const executionTime = endTime.getTime() - stats.startTime.getTime()\r\n\r\n    stats.endTime = endTime\r\n    stats.executionTime = executionTime\r\n    stats.success = false\r\n    stats.error = queryInfo.error?.message || 'Unknown error'\r\n\r\n    this.emit('query-failed', stats)\r\n  }\r\n\r\n  /**\r\n   * 生成查询ID\r\n   * \r\n   * @returns 查询ID\r\n   */\r\n  private generateQueryId(): string {\r\n    return `query_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n  }\r\n\r\n  /**\r\n   * 查找查询统计信息\r\n   * \r\n   * @param queryInfo - 查询信息\r\n   * @returns 查询统计信息\r\n   */\r\n  private findQueryStats(queryInfo: any): QueryExecutionStats | undefined {\r\n    // 这里需要根据实际的查询信息匹配统计记录\r\n    // 暂时返回最近的一条记录\r\n    const allStats = Array.from(this.queryStats.values())\r\n    return allStats.find(stats => \r\n      stats.sql === queryInfo.sql && \r\n      !stats.endTime\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 检测查询类型\r\n   * \r\n   * @param sql - SQL语句\r\n   * @returns 查询类型\r\n   */\r\n  private detectQueryType(sql: string): QueryExecutionStats['queryType'] {\r\n    const upperSql = sql.trim().toUpperCase()\r\n    \r\n    if (upperSql.startsWith('SELECT')) {\r\n      return 'SELECT'\r\n    } else if (upperSql.startsWith('INSERT')) {\r\n      return 'INSERT'\r\n    } else if (upperSql.startsWith('UPDATE')) {\r\n      return 'UPDATE'\r\n    } else if (upperSql.startsWith('DELETE')) {\r\n      return 'DELETE'\r\n    } else {\r\n      return 'OTHER'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 提取SQL中的表名\r\n   * \r\n   * @param sql - SQL语句\r\n   * @returns 表名数组\r\n   */\r\n  private extractTables(sql: string): string[] {\r\n    const tables: string[] = []\r\n    const upperSql = sql.toUpperCase()\r\n    \r\n    // 简单的表名提取逻辑\r\n    const fromMatch = upperSql.match(/FROM\\s+([\\w\\s,]+)/)\r\n    if (fromMatch) {\r\n      const tableNames = fromMatch[1].split(',')\r\n      tableNames.forEach(name => {\r\n        const cleanName = name.trim().split(/\\s+/)[0]\r\n        if (cleanName && !tables.includes(cleanName)) {\r\n          tables.push(cleanName)\r\n        }\r\n      })\r\n    }\r\n    \r\n    const joinMatches = upperSql.matchAll(/JOIN\\s+(\\w+)/g)\r\n    for (const match of joinMatches) {\r\n      if (match[1] && !tables.includes(match[1])) {\r\n        tables.push(match[1])\r\n      }\r\n    }\r\n    \r\n    return tables\r\n  }\r\n\r\n  /**\r\n   * 更新查询模式\r\n   * \r\n   * @param stats - 查询统计信息\r\n   */\r\n  private updateQueryPattern(stats: QueryExecutionStats): void {\r\n    const template = this.generateQueryTemplate(stats.sql)\r\n    const patternId = this.generatePatternId(template)\r\n    \r\n    let pattern = this.queryPatterns.get(patternId)\r\n    \r\n    if (!pattern) {\r\n      pattern = {\r\n        patternId,\r\n        template,\r\n        executionCount: 0,\r\n        totalExecutionTime: 0,\r\n        avgExecutionTime: 0,\r\n        maxExecutionTime: 0,\r\n        minExecutionTime: Infinity,\r\n        lastExecutionTime: stats.endTime,\r\n        tables: new Set(stats.tables),\r\n        isSlowQuery: false,\r\n        optimizationSuggestions: []\r\n      }\r\n      this.queryPatterns.set(patternId, pattern)\r\n    }\r\n    \r\n    // 更新统计信息\r\n    pattern.executionCount++\r\n    pattern.totalExecutionTime += stats.executionTime\r\n    pattern.avgExecutionTime = pattern.totalExecutionTime / pattern.executionCount\r\n    pattern.maxExecutionTime = Math.max(pattern.maxExecutionTime, stats.executionTime)\r\n    pattern.minExecutionTime = Math.min(pattern.minExecutionTime, stats.executionTime)\r\n    pattern.lastExecutionTime = stats.endTime\r\n    \r\n    // 合并表名\r\n    stats.tables.forEach(table => pattern!.tables.add(table))\r\n    \r\n    // 检查是否为慢查询模式\r\n    if (pattern.avgExecutionTime > this.slowQueryThreshold) {\r\n      pattern.isSlowQuery = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成查询模板\r\n   * \r\n   * @param sql - SQL语句\r\n   * @returns 查询模板\r\n   */\r\n  private generateQueryTemplate(sql: string): string {\r\n    // 将参数替换为占位符\r\n    return sql\r\n      .replace(/\\$\\d+/g, '?') // PostgreSQL参数\r\n      .replace(/'[^']*'/g, '?') // 字符串字面量\r\n      .replace(/\\b\\d+\\b/g, '?') // 数字字面量\r\n      .replace(/\\s+/g, ' ') // 标准化空白字符\r\n      .trim()\r\n  }\r\n\r\n  /**\r\n   * 生成模式ID\r\n   * \r\n   * @param template - 查询模板\r\n   * @returns 模式ID\r\n   */\r\n  private generatePatternId(template: string): string {\r\n    // 使用简单的哈希算法\r\n    let hash = 0\r\n    for (let i = 0; i < template.length; i++) {\r\n      const char = template.charCodeAt(i)\r\n      hash = ((hash << 5) - hash) + char\r\n      hash = hash & hash // 转换为32位整数\r\n    }\r\n    return `pattern_${Math.abs(hash).toString(36)}`\r\n  }\r\n\r\n  /**\r\n   * 处理慢查询\r\n   * \r\n   * @param stats - 查询统计信息\r\n   */\r\n  private handleSlowQuery(stats: QueryExecutionStats): void {\r\n    console.log(`Slow query detected: ${stats.executionTime}ms`, {\r\n      sql: stats.sql,\r\n      tables: stats.tables,\r\n      params: stats.params\r\n    })\r\n    \r\n    // 生成优化建议\r\n    const suggestions = this.generateOptimizationSuggestions(stats)\r\n    suggestions.forEach(suggestion => {\r\n      this.optimizationSuggestions.set(suggestion.suggestionId, suggestion)\r\n    })\r\n    \r\n    this.emit('slow-query-detected', { stats, suggestions })\r\n  }\r\n\r\n  /**\r\n   * 生成优化建议\r\n   * \r\n   * @param stats - 查询统计信息\r\n   * @returns 优化建议数组\r\n   */\r\n  private generateOptimizationSuggestions(stats: QueryExecutionStats): QueryOptimizationSuggestion[] {\r\n    const suggestions: QueryOptimizationSuggestion[] = []\r\n    const sql = stats.sql.toUpperCase()\r\n    \r\n    // 检查是否缺少索引\r\n    if (stats.scannedRows && stats.returnedRows && stats.scannedRows > stats.returnedRows * 10) {\r\n      suggestions.push({\r\n        suggestionId: `idx_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\r\n        patternId: this.generatePatternId(this.generateQueryTemplate(stats.sql)),\r\n        type: 'index',\r\n        priority: 'high',\r\n        description: '查询扫描了大量行但返回较少结果，建议添加索引',\r\n        expectedImprovement: 70,\r\n        implementationDifficulty: 'easy',\r\n        suggestion: `考虑在 ${stats.tables.join(', ')} 表的查询条件字段上添加索引`,\r\n        createdAt: new Date(),\r\n        applied: false\r\n      })\r\n    }\r\n    \r\n    // 检查是否有全表扫描\r\n    if (!stats.usedIndex && stats.queryType === 'SELECT') {\r\n      suggestions.push({\r\n        suggestionId: `idx_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\r\n        patternId: this.generatePatternId(this.generateQueryTemplate(stats.sql)),\r\n        type: 'index',\r\n        priority: 'high',\r\n        description: '查询未使用索引，可能进行了全表扫描',\r\n        expectedImprovement: 80,\r\n        implementationDifficulty: 'easy',\r\n        suggestion: '在WHERE子句的条件字段上创建索引',\r\n        createdAt: new Date(),\r\n        applied: false\r\n      })\r\n    }\r\n    \r\n    // 检查是否可以使用缓存\r\n    if (stats.queryType === 'SELECT' && stats.executionTime > 500) {\r\n      suggestions.push({\r\n        suggestionId: `cache_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\r\n        patternId: this.generatePatternId(this.generateQueryTemplate(stats.sql)),\r\n        type: 'cache',\r\n        priority: 'medium',\r\n        description: '查询执行时间较长，建议启用查询缓存',\r\n        expectedImprovement: 90,\r\n        implementationDifficulty: 'easy',\r\n        suggestion: '为此查询启用结果缓存，特别是对于相对静态的数据',\r\n        createdAt: new Date(),\r\n        applied: false\r\n      })\r\n    }\r\n    \r\n    // 检查是否需要查询重写\r\n    if (sql.includes('SELECT *')) {\r\n      suggestions.push({\r\n        suggestionId: `rewrite_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\r\n        patternId: this.generatePatternId(this.generateQueryTemplate(stats.sql)),\r\n        type: 'rewrite',\r\n        priority: 'medium',\r\n        description: '使用SELECT *可能影响性能',\r\n        expectedImprovement: 30,\r\n        implementationDifficulty: 'medium',\r\n        suggestion: '明确指定需要的字段而不是使用SELECT *',\r\n        exampleSql: stats.sql.replace('SELECT *', 'SELECT field1, field2, ...'),\r\n        createdAt: new Date(),\r\n        applied: false\r\n      })\r\n    }\r\n    \r\n    return suggestions\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   * \r\n   * @param sql - SQL语句\r\n   * @param params - 查询参数\r\n   * @returns 缓存键\r\n   */\r\n  private generateCacheKey(sql: string, params?: any[]): string {\r\n    const template = this.generateQueryTemplate(sql)\r\n    const paramStr = params ? JSON.stringify(params) : ''\r\n    return `${this.cacheConfig.keyPrefix}${template}_${paramStr}`\r\n  }\r\n\r\n  /**\r\n   * 获取缓存结果\r\n   * \r\n   * @param cacheKey - 缓存键\r\n   * @returns 缓存结果\r\n   */\r\n  private getCachedResult(cacheKey: string): any | null {\r\n    const cacheItem = this.queryCache.get(cacheKey)\r\n    \r\n    if (!cacheItem) {\r\n      return null\r\n    }\r\n    \r\n    // 检查是否过期\r\n    if (cacheItem.expiresAt < new Date()) {\r\n      this.queryCache.delete(cacheKey)\r\n      return null\r\n    }\r\n    \r\n    // 更新访问信息\r\n    cacheItem.accessCount++\r\n    cacheItem.lastAccessedAt = new Date()\r\n    \r\n    return cacheItem.result\r\n  }\r\n\r\n  /**\r\n   * 判断是否应该缓存查询\r\n   * \r\n   * @param stats - 查询统计信息\r\n   * @param result - 查询结果\r\n   * @returns 是否应该缓存\r\n   */\r\n  private shouldCacheQuery(stats: QueryExecutionStats, result: any): boolean {\r\n    if (!this.cacheConfig.enabled || stats.queryType !== 'SELECT') {\r\n      return false\r\n    }\r\n    \r\n    // 不缓存失败的查询\r\n    if (!stats.success) {\r\n      return false\r\n    }\r\n    \r\n    // 根据配置决定是否缓存慢查询\r\n    if (stats.executionTime > this.cacheConfig.slowQueryThreshold) {\r\n      return this.cacheConfig.cacheSlowQueries\r\n    }\r\n    \r\n    // 缓存执行时间适中的查询\r\n    return stats.executionTime > 100 && stats.executionTime < 1000\r\n  }\r\n\r\n  /**\r\n   * 缓存查询结果\r\n   * \r\n   * @param stats - 查询统计信息\r\n   * @param result - 查询结果\r\n   */\r\n  private cacheQueryResult(stats: QueryExecutionStats, result: any): void {\r\n    const cacheKey = this.generateCacheKey(stats.sql, stats.params)\r\n    const now = new Date()\r\n    const expiresAt = new Date(now.getTime() + this.cacheConfig.ttl)\r\n    \r\n    const cacheItem: QueryCacheItem = {\r\n      key: cacheKey,\r\n      result,\r\n      createdAt: now,\r\n      expiresAt,\r\n      accessCount: 0,\r\n      lastAccessedAt: now,\r\n      size: JSON.stringify(result).length\r\n    }\r\n    \r\n    // 检查缓存大小限制\r\n    if (this.queryCache.size >= this.cacheConfig.maxSize) {\r\n      this.evictCacheItems()\r\n    }\r\n    \r\n    this.queryCache.set(cacheKey, cacheItem)\r\n    this.emit('query-cached', { cacheKey, stats })\r\n  }\r\n\r\n  /**\r\n   * 清理缓存\r\n   */\r\n  private cleanupCache(): void {\r\n    const now = new Date()\r\n    const expiredKeys: string[] = []\r\n    \r\n    for (const [key, item] of this.queryCache.entries()) {\r\n      if (item.expiresAt < now) {\r\n        expiredKeys.push(key)\r\n      }\r\n    }\r\n    \r\n    expiredKeys.forEach(key => this.queryCache.delete(key))\r\n    \r\n    if (expiredKeys.length > 0) {\r\n      console.log(`Cleaned up ${expiredKeys.length} expired cache items`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 驱逐缓存项\r\n   */\r\n  private evictCacheItems(): void {\r\n    const items = Array.from(this.queryCache.entries())\r\n    \r\n    if (this.cacheConfig.strategy === 'lru') {\r\n      // 最近最少使用\r\n      items.sort((a, b) => a[1].lastAccessedAt.getTime() - b[1].lastAccessedAt.getTime())\r\n    } else if (this.cacheConfig.strategy === 'lfu') {\r\n      // 最少使用频率\r\n      items.sort((a, b) => a[1].accessCount - b[1].accessCount)\r\n    } else {\r\n      // TTL策略，按创建时间排序\r\n      items.sort((a, b) => a[1].createdAt.getTime() - b[1].createdAt.getTime())\r\n    }\r\n    \r\n    // 删除最老的25%的缓存项\r\n    const itemsToRemove = Math.ceil(items.length * 0.25)\r\n    for (let i = 0; i < itemsToRemove; i++) {\r\n      this.queryCache.delete(items[i][0])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理统计历史\r\n   */\r\n  private cleanupStatsHistory(): void {\r\n    if (this.queryStats.size > this.maxStatsHistory) {\r\n      const entries = Array.from(this.queryStats.entries())\r\n      entries.sort((a, b) => a[1].startTime.getTime() - b[1].startTime.getTime())\r\n      \r\n      const itemsToRemove = this.queryStats.size - this.maxStatsHistory\r\n      for (let i = 0; i < itemsToRemove; i++) {\r\n        this.queryStats.delete(entries[i][0])\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行性能分析\r\n   */\r\n  private performAnalysis(): void {\r\n    console.log('Performing query performance analysis...')\r\n    \r\n    const analysis = this.generatePerformanceAnalysis()\r\n    this.emit('analysis-complete', analysis)\r\n    \r\n    // 自动应用一些简单的优化建议\r\n    this.autoApplyOptimizations()\r\n  }\r\n\r\n  /**\r\n   * 自动应用优化\r\n   */\r\n  private autoApplyOptimizations(): void {\r\n    const suggestions = Array.from(this.optimizationSuggestions.values())\r\n    const autoApplicable = suggestions.filter(s => \r\n      !s.applied && \r\n      s.type === 'cache' && \r\n      s.implementationDifficulty === 'easy'\r\n    )\r\n    \r\n    autoApplicable.forEach(suggestion => {\r\n      // 这里可以自动启用缓存等简单优化\r\n      suggestion.applied = true\r\n      console.log(`Auto-applied optimization: ${suggestion.description}`)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 生成性能分析报告\r\n   * \r\n   * @returns 性能分析报告\r\n   */\r\n  generatePerformanceAnalysis(): {\r\n    summary: string\r\n    slowQueries: QueryPattern[]\r\n    topQueries: QueryPattern[]\r\n    cacheStats: any\r\n    suggestions: QueryOptimizationSuggestion[]\r\n    recommendations: string[]\r\n  } {\r\n    const patterns = Array.from(this.queryPatterns.values())\r\n    const slowQueries = patterns.filter(p => p.isSlowQuery).slice(0, 10)\r\n    const topQueries = patterns\r\n      .sort((a, b) => b.executionCount - a.executionCount)\r\n      .slice(0, 10)\r\n    \r\n    const totalQueries = patterns.reduce((sum, p) => sum + p.executionCount, 0)\r\n    const avgExecutionTime = patterns.reduce((sum, p) => sum + p.avgExecutionTime, 0) / patterns.length\r\n    \r\n    const cacheHitRate = this.calculateCacheHitRate()\r\n    const suggestions = Array.from(this.optimizationSuggestions.values())\r\n      .filter(s => !s.applied)\r\n      .sort((a, b) => {\r\n        const priorityOrder = { high: 3, medium: 2, low: 1 }\r\n        return priorityOrder[b.priority] - priorityOrder[a.priority]\r\n      })\r\n      .slice(0, 20)\r\n    \r\n    const recommendations = this.generateRecommendations(patterns, suggestions)\r\n    \r\n    return {\r\n      summary: `\r\n查询性能分析报告\r\n================\r\n分析时间: ${new Date().toISOString()}\r\n查询模式总数: ${patterns.length}\r\n总查询次数: ${totalQueries}\r\n平均执行时间: ${avgExecutionTime.toFixed(2)}ms\r\n慢查询数量: ${slowQueries.length}\r\n缓存命中率: ${(cacheHitRate * 100).toFixed(2)}%\r\n待处理建议: ${suggestions.length}\r\n      `.trim(),\r\n      slowQueries,\r\n      topQueries,\r\n      cacheStats: {\r\n        size: this.queryCache.size,\r\n        hitRate: cacheHitRate,\r\n        totalSize: Array.from(this.queryCache.values()).reduce((sum, item) => sum + item.size, 0)\r\n      },\r\n      suggestions,\r\n      recommendations\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算缓存命中率\r\n   * \r\n   * @returns 缓存命中率\r\n   */\r\n  private calculateCacheHitRate(): number {\r\n    // 这里需要实际的缓存命中统计\r\n    // 暂时返回模拟值\r\n    return 0.75\r\n  }\r\n\r\n  /**\r\n   * 生成建议\r\n   * \r\n   * @param patterns - 查询模式\r\n   * @param suggestions - 优化建议\r\n   * @returns 建议数组\r\n   */\r\n  private generateRecommendations(patterns: QueryPattern[], suggestions: QueryOptimizationSuggestion[]): string[] {\r\n    const recommendations: string[] = []\r\n    \r\n    const slowQueryCount = patterns.filter(p => p.isSlowQuery).length\r\n    if (slowQueryCount > 5) {\r\n      recommendations.push(`发现 ${slowQueryCount} 个慢查询模式，建议优先处理高频慢查询`)\r\n    }\r\n    \r\n    const highPrioritySuggestions = suggestions.filter(s => s.priority === 'high').length\r\n    if (highPrioritySuggestions > 0) {\r\n      recommendations.push(`有 ${highPrioritySuggestions} 个高优先级优化建议待处理`)\r\n    }\r\n    \r\n    const cacheHitRate = this.calculateCacheHitRate()\r\n    if (cacheHitRate < 0.5) {\r\n      recommendations.push('缓存命中率较低，建议检查缓存策略和TTL设置')\r\n    }\r\n    \r\n    if (this.queryCache.size > this.cacheConfig.maxSize * 0.9) {\r\n      recommendations.push('查询缓存接近容量限制，建议增加缓存大小或调整驱逐策略')\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 获取查询统计信息\r\n   * \r\n   * @param limit - 限制返回数量\r\n   * @returns 查询统计信息\r\n   */\r\n  getQueryStats(limit?: number): QueryExecutionStats[] {\r\n    const stats = Array.from(this.queryStats.values())\r\n    if (limit) {\r\n      return stats.slice(-limit)\r\n    }\r\n    return stats\r\n  }\r\n\r\n  /**\r\n   * 获取查询模式\r\n   * \r\n   * @param limit - 限制返回数量\r\n   * @returns 查询模式\r\n   */\r\n  getQueryPatterns(limit?: number): QueryPattern[] {\r\n    const patterns = Array.from(this.queryPatterns.values())\r\n    if (limit) {\r\n      return patterns.slice(0, limit)\r\n    }\r\n    return patterns\r\n  }\r\n\r\n  /**\r\n   * 获取优化建议\r\n   * \r\n   * @param applied - 是否已应用\r\n   * @returns 优化建议\r\n   */\r\n  getOptimizationSuggestions(applied?: boolean): QueryOptimizationSuggestion[] {\r\n    const suggestions = Array.from(this.optimizationSuggestions.values())\r\n    if (applied !== undefined) {\r\n      return suggestions.filter(s => s.applied === applied)\r\n    }\r\n    return suggestions\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计\r\n   * \r\n   * @returns 缓存统计\r\n   */\r\n  getCacheStats(): {\r\n    size: number\r\n    maxSize: number\r\n    hitRate: number\r\n    totalSize: number\r\n    items: QueryCacheItem[]\r\n  } {\r\n    const items = Array.from(this.queryCache.values())\r\n    return {\r\n      size: this.queryCache.size,\r\n      maxSize: this.cacheConfig.maxSize,\r\n      hitRate: this.calculateCacheHitRate(),\r\n      totalSize: items.reduce((sum, item) => sum + item.size, 0),\r\n      items\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新缓存配置\r\n   * \r\n   * @param config - 新的缓存配置\r\n   */\r\n  updateCacheConfig(config: Partial<QueryCacheConfig>): void {\r\n    this.cacheConfig = { ...this.cacheConfig, ...config }\r\n    console.log('Cache configuration updated:', this.cacheConfig)\r\n    this.emit('cache-config-updated', this.cacheConfig)\r\n  }\r\n\r\n  /**\r\n   * 清空缓存\r\n   */\r\n  clearCache(): void {\r\n    this.queryCache.clear()\r\n    console.log('Query cache cleared')\r\n    this.emit('cache-cleared')\r\n  }\r\n\r\n  /**\r\n   * 获取当前状态\r\n   * \r\n   * @returns 当前状态\r\n   */\r\n  getStatus(): {\r\n    isActive: boolean\r\n    totalQueries: number\r\n    totalPatterns: number\r\n    slowQueries: number\r\n    cacheSize: number\r\n    pendingSuggestions: number\r\n  } {\r\n    const patterns = Array.from(this.queryPatterns.values())\r\n    const slowQueries = patterns.filter(p => p.isSlowQuery).length\r\n    const pendingSuggestions = Array.from(this.optimizationSuggestions.values())\r\n      .filter(s => !s.applied).length\r\n    \r\n    return {\r\n      isActive: this.isActive,\r\n      totalQueries: this.queryStats.size,\r\n      totalPatterns: patterns.length,\r\n      slowQueries,\r\n      cacheSize: this.queryCache.size,\r\n      pendingSuggestions\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const queryPerformanceOptimizer = new QueryPerformanceOptimizer()\r\n\r\n// 导出类型\r\nexport type {\r\n  QueryExecutionStats,\r\n  QueryPattern,\r\n  QueryOptimizationSuggestion,\r\n  QueryCacheConfig,\r\n  QueryCacheItem\r\n}\r\n"],"version":3}