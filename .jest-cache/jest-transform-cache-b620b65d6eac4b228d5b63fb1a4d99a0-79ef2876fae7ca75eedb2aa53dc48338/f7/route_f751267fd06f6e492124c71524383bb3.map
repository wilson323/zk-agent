{"version":3,"names":["cov_6hhktm7mv","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","checkDatabase","status","responseTime","error","message","checkRedis","checkFastGPT","checkFileSystem","exports","GET","createApiRoute","RouteConfigs","publicGet","req","params","validatedBody","validatedQuery","user","requestId","health","timestamp","Date","toISOString","services","database","redis","fastgpt","fileSystem","process","env","npm_package_version","environment","NODE_ENV","allHealthy","Object","values","every","service","ApiResponseWrapper","success"],"sources":["E:\\zk-agent\\app\\api\\health\\route.ts"],"sourcesContent":["/**\n * @file health\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\n// 健康检查函数\nasync function checkDatabase() {\n  try {\n    // TODO: 实际的数据库连接检查\n    return { status: \"healthy\", responseTime: \"<10ms\" };\n  } catch (error) {\n    return { status: \"unhealthy\", error: error.message };\n  }\n}\n\nasync function checkRedis() {\n  try {\n    // TODO: 实际的Redis连接检查\n    return { status: \"healthy\", responseTime: \"<5ms\" };\n  } catch (error) {\n    return { status: \"unhealthy\", error: error.message };\n  }\n}\n\nasync function checkFastGPT() {\n  try {\n    // TODO: 实际的FastGPT服务检查\n    return { status: \"healthy\", responseTime: \"<100ms\" };\n  } catch (error) {\n    return { status: \"unhealthy\", error: error.message };\n  }\n}\n\nasync function checkFileSystem() {\n  try {\n    // TODO: 实际的文件系统检查\n    return { status: \"healthy\", responseTime: \"<5ms\" };\n  } catch (error) {\n    return { status: \"unhealthy\", error: error.message };\n  }\n}\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    const health = {\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      services: {\n        database: await checkDatabase(),\n        redis: await checkRedis(),\n        fastgpt: await checkFastGPT(),\n        fileSystem: await checkFileSystem(),\n      },\n      version: process.env.npm_package_version || \"unknown\",\n      environment: process.env.NODE_ENV || \"unknown\",\n      requestId\n    };\n    \n    const allHealthy = Object.values(health.services).every(\n      (service: any) => service.status === \"healthy\"\n    );\n    \n    if (allHealthy) {\n      return ApiResponseWrapper.success(health);\n    } else {\n       return ApiResponseWrapper.error(\n         'SERVICE_UNHEALTHY',\n         'Some services are unhealthy',\n         { health },\n         503\n       );\n     }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}