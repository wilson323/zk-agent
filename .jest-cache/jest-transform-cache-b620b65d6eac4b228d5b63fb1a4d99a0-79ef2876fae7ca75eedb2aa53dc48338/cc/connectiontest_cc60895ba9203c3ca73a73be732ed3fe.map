{"version":3,"names":["_getJestObj","mock","PrismaClient","jest","fn","mockImplementation","$connect","mockResolvedValue","undefined","$disconnect","$queryRaw","version","user","findFirst","id","name","mockEnhancedDb","isConnected","mockReturnValue","connect","disconnect","getClient","getStats","state","uptime","totalQueries","failedQueries","avgLatency","reconnectAttempts","lastHealthCheck","Date","isHealthy","getDetailedStats","configuration","pool","maxConnections","minConnections","recovery","maxRetries","retryDelay","performance","successRate","queriesPerSecond","avgResponseTime","enhancedDb","require","checkDatabaseConnection","getDatabasePoolStatus","describe","beforeEach","clearAllMocks","process","env","ENHANCED_DB_CONNECTION","afterEach","it","result","expect","toHaveProperty","connected","stats","toBe","message","Error","toContain","connections","status","connectionResult","poolStatus","not","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toBeCloseTo"],"sources":["connection.test.js"],"sourcesContent":["const { checkDatabaseConnection, getDatabasePoolStatus } = require('../../lib/database/connection')\n\n// Mock Prisma Client for testing\njest.mock('@prisma/client', () => {\n  return {\n    PrismaClient: jest.fn().mockImplementation(() => ({\n      $connect: jest.fn().mockResolvedValue(undefined),\n      $disconnect: jest.fn().mockResolvedValue(undefined),\n      $queryRaw: jest.fn().mockResolvedValue([{ version: '14.0' }]),\n      user: {\n        findFirst: jest.fn().mockResolvedValue({ id: 1, name: 'test' })\n      }\n    }))\n  }\n})\n\n// Mock enhanced database connection\njest.mock('../../lib/database/enhanced-connection', () => {\n  const mockEnhancedDb = {\n    isConnected: jest.fn().mockReturnValue(true),\n    connect: jest.fn().mockResolvedValue(true),\n    disconnect: jest.fn().mockResolvedValue(true),\n    getClient: jest.fn().mockReturnValue({\n      $connect: jest.fn().mockResolvedValue(undefined),\n      $queryRaw: jest.fn().mockResolvedValue([{ version: '14.0' }]),\n      user: {\n        findFirst: jest.fn().mockResolvedValue({ id: 1, name: 'test' })\n      }\n    }),\n    getStats: jest.fn().mockReturnValue({\n      state: 'connected',\n      uptime: 10000,\n      totalQueries: 5,\n      failedQueries: 0,\n      avgLatency: 50,\n      reconnectAttempts: 0,\n      lastHealthCheck: new Date(),\n      isHealthy: true\n    }),\n    getDetailedStats: jest.fn().mockReturnValue({\n      state: 'connected',\n      uptime: 10000,\n      totalQueries: 5,\n      failedQueries: 0,\n      avgLatency: 50,\n      reconnectAttempts: 0,\n      lastHealthCheck: new Date(),\n      isHealthy: true,\n      configuration: {\n        pool: { maxConnections: 10, minConnections: 2 },\n        recovery: { maxRetries: 3, retryDelay: 1000 }\n      },\n      performance: {\n        successRate: 100,\n        queriesPerSecond: 0.5,\n        avgResponseTime: 50\n      }\n    })\n  }\n  \n  return {\n    enhancedDb: mockEnhancedDb\n  }\n})\n\ndescribe('Database Connection Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Set environment variable for enhanced connection\n    process.env.ENHANCED_DB_CONNECTION = 'true'\n  })\n\n  afterEach(() => {\n    delete process.env.ENHANCED_DB_CONNECTION\n  })\n\n  describe('checkDatabaseConnection', () => {\n    it('should successfully connect to database with enhanced connection', async () => {\n      const result = await checkDatabaseConnection()\n      \n      expect(result).toHaveProperty('connected')\n      expect(result).toHaveProperty('message')\n      expect(result).toHaveProperty('stats')\n      \n      if (result.connected) {\n        expect(result.stats).toHaveProperty('totalQueries')\n        expect(result.stats).toHaveProperty('failedQueries')\n        expect(result.stats).toHaveProperty('avgLatency')\n        expect(result.stats).toHaveProperty('reconnectAttempts')\n      }\n    })\n\n    it('should handle connection errors gracefully', async () => {\n      // Mock enhanced db to simulate connection failure\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.isConnected.mockReturnValue(false)\n      enhancedDb.getClient.mockReturnValue(null)\n      \n      const result = await checkDatabaseConnection()\n      \n      expect(result).toHaveProperty('connected')\n      expect(result).toHaveProperty('message')\n      expect(typeof result.connected).toBe('boolean')\n      expect(typeof result.message).toBe('string')\n    })\n\n    it('should provide detailed error information on failure', async () => {\n      // Mock enhanced db to throw error\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.getClient.mockImplementation(() => {\n        throw new Error('Connection timeout')\n      })\n      \n      const result = await checkDatabaseConnection()\n      \n      expect(result.connected).toBe(false)\n      expect(result.message).toContain('Connection timeout')\n    })\n  })\n\n  describe('getDatabasePoolStatus', () => {\n    it('should return comprehensive pool status with enhanced connection', async () => {\n      const result = await getDatabasePoolStatus()\n      \n      expect(result).toHaveProperty('status')\n      expect(result).toHaveProperty('connections')\n      expect(result).toHaveProperty('performance')\n      expect(result).toHaveProperty('configuration')\n      \n      // Check enhanced connection specific fields\n      if (result.connections) {\n        expect(result.connections).toHaveProperty('state')\n        expect(result.connections).toHaveProperty('uptime')\n        expect(result.connections).toHaveProperty('reconnectAttempts')\n      }\n      \n      if (result.performance) {\n        expect(result.performance).toHaveProperty('successRate')\n        expect(result.performance).toHaveProperty('avgLatency')\n      }\n    })\n\n    it('should handle enhanced connection unavailable scenario', async () => {\n      // Mock enhanced db as disconnected\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.isConnected.mockReturnValue(false)\n      \n      const result = await getDatabasePoolStatus()\n      \n      expect(result).toHaveProperty('status')\n      expect(result.status).toBe('disconnected')\n    })\n\n    it('should provide fallback status when enhanced connection fails', async () => {\n      // Mock enhanced db to throw error\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.getDetailedStats.mockImplementation(() => {\n        throw new Error('Stats unavailable')\n      })\n      \n      const result = await getDatabasePoolStatus()\n      \n      expect(result).toHaveProperty('status')\n      expect(typeof result.status).toBe('string')\n    })\n  })\n\n  describe('Database Connection Integration', () => {\n    it('should maintain connection state consistency', async () => {\n      const connectionResult = await checkDatabaseConnection()\n      const poolStatus = await getDatabasePoolStatus()\n      \n      // If connection is successful, pool should reflect that\n      if (connectionResult.connected) {\n        expect(poolStatus.status).not.toBe('error')\n      }\n    })\n\n    it('should provide performance metrics', async () => {\n      const poolStatus = await getDatabasePoolStatus()\n      \n      if (poolStatus.performance) {\n        expect(typeof poolStatus.performance.successRate).toBe('number')\n        expect(typeof poolStatus.performance.avgLatency).toBe('number')\n        expect(poolStatus.performance.successRate).toBeGreaterThanOrEqual(0)\n        expect(poolStatus.performance.successRate).toBeLessThanOrEqual(100)\n      }\n    })\n\n    it('should handle configuration information', async () => {\n      const poolStatus = await getDatabasePoolStatus()\n      \n      if (poolStatus.configuration) {\n        expect(poolStatus.configuration).toHaveProperty('pool')\n        if (poolStatus.configuration.pool) {\n          expect(typeof poolStatus.configuration.pool).toBe('object')\n        }\n      }\n    })\n  })\n\n  describe('Error Recovery and Resilience', () => {\n    it('should handle database reconnection scenarios', async () => {\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      \n      // Simulate reconnection scenario\n      enhancedDb.getStats.mockReturnValue({\n        state: 'connected',\n        uptime: 5000,\n        totalQueries: 10,\n        failedQueries: 2,\n        avgLatency: 75,\n        reconnectAttempts: 1,\n        lastHealthCheck: new Date(),\n        isHealthy: true\n      })\n      \n      const result = await checkDatabaseConnection()\n      \n      expect(result.connected).toBe(true)\n      expect(result.stats.reconnectAttempts).toBe(1)\n    })\n\n    it('should track query performance over time', async () => {\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      \n      // Simulate performance tracking\n      enhancedDb.getDetailedStats.mockReturnValue({\n        state: 'connected',\n        uptime: 60000,\n        totalQueries: 100,\n        failedQueries: 5,\n        avgLatency: 45,\n        reconnectAttempts: 0,\n        lastHealthCheck: new Date(),\n        isHealthy: true,\n        configuration: {\n          pool: { maxConnections: 20, minConnections: 5 },\n          recovery: { maxRetries: 5, retryDelay: 2000 }\n        },\n        performance: {\n          successRate: 95,\n          queriesPerSecond: 1.67,\n          avgResponseTime: 45\n        }\n      })\n      \n      const poolStatus = await getDatabasePoolStatus()\n      \n      expect(poolStatus.performance.successRate).toBe(95)\n      expect(poolStatus.performance.queriesPerSecond).toBeCloseTo(1.67, 1)\n      expect(poolStatus.connections.totalQueries).toBe(100)\n      expect(poolStatus.connections.failedQueries).toBe(5)\n    })\n  })\n})"],"mappings":"AAEA;AACAA,WAAA,GAAKC,IAAI,CAAC,gBAAgB,EAAE,MAAM;EAChC,OAAO;IACLC,YAAY,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO;MAChDC,QAAQ,EAAEH,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAACC,SAAS,CAAC;MAChDC,WAAW,EAAEN,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAACC,SAAS,CAAC;MACnDE,SAAS,EAAEP,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAAC,CAAC;QAAEI,OAAO,EAAE;MAAO,CAAC,CAAC,CAAC;MAC7DC,IAAI,EAAE;QACJC,SAAS,EAAEV,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAAC;UAAEO,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC;MAChE;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC,CAAC;;AAEF;AACAf,WAAA,GAAKC,IAAI,CAAC,wCAAwC,EAAE,MAAM;EACxD,MAAMe,cAAc,GAAG;IACrBC,WAAW,EAAEd,IAAI,CAACC,EAAE,CAAC,CAAC,CAACc,eAAe,CAAC,IAAI,CAAC;IAC5CC,OAAO,EAAEhB,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAAC,IAAI,CAAC;IAC1Ca,UAAU,EAAEjB,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAAC,IAAI,CAAC;IAC7Cc,SAAS,EAAElB,IAAI,CAACC,EAAE,CAAC,CAAC,CAACc,eAAe,CAAC;MACnCZ,QAAQ,EAAEH,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAACC,SAAS,CAAC;MAChDE,SAAS,EAAEP,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAAC,CAAC;QAAEI,OAAO,EAAE;MAAO,CAAC,CAAC,CAAC;MAC7DC,IAAI,EAAE;QACJC,SAAS,EAAEV,IAAI,CAACC,EAAE,CAAC,CAAC,CAACG,iBAAiB,CAAC;UAAEO,EAAE,EAAE,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC;MAChE;IACF,CAAC,CAAC;IACFO,QAAQ,EAAEnB,IAAI,CAACC,EAAE,CAAC,CAAC,CAACc,eAAe,CAAC;MAClCK,KAAK,EAAE,WAAW;MAClBC,MAAM,EAAE,KAAK;MACbC,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC;MAChBC,UAAU,EAAE,EAAE;MACdC,iBAAiB,EAAE,CAAC;MACpBC,eAAe,EAAE,IAAIC,IAAI,CAAC,CAAC;MAC3BC,SAAS,EAAE;IACb,CAAC,CAAC;IACFC,gBAAgB,EAAE7B,IAAI,CAACC,EAAE,CAAC,CAAC,CAACc,eAAe,CAAC;MAC1CK,KAAK,EAAE,WAAW;MAClBC,MAAM,EAAE,KAAK;MACbC,YAAY,EAAE,CAAC;MACfC,aAAa,EAAE,CAAC;MAChBC,UAAU,EAAE,EAAE;MACdC,iBAAiB,EAAE,CAAC;MACpBC,eAAe,EAAE,IAAIC,IAAI,CAAC,CAAC;MAC3BC,SAAS,EAAE,IAAI;MACfE,aAAa,EAAE;QACbC,IAAI,EAAE;UAAEC,cAAc,EAAE,EAAE;UAAEC,cAAc,EAAE;QAAE,CAAC;QAC/CC,QAAQ,EAAE;UAAEC,UAAU,EAAE,CAAC;UAAEC,UAAU,EAAE;QAAK;MAC9C,CAAC;MACDC,WAAW,EAAE;QACXC,WAAW,EAAE,GAAG;QAChBC,gBAAgB,EAAE,GAAG;QACrBC,eAAe,EAAE;MACnB;IACF,CAAC;EACH,CAAC;EAED,OAAO;IACLC,UAAU,EAAE5B;EACd,CAAC;AACH,CAAC,CAAC;AAAA,SAAAhB,YAAA;EAAA;IAAAG;EAAA,IAAA0C,OAAA;EAAA7C,WAAA,GAAAA,CAAA,KAAAG,IAAA;EAAA,OAAAA,IAAA;AAAA;AA/DF,MAAM;EAAE2C,uBAAuB;EAAEC;AAAsB,CAAC,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AAiEnGG,QAAQ,CAAC,2BAA2B,EAAE,MAAM;EAC1CC,UAAU,CAAC,MAAM;IACf9C,IAAI,CAAC+C,aAAa,CAAC,CAAC;IACpB;IACAC,OAAO,CAACC,GAAG,CAACC,sBAAsB,GAAG,MAAM;EAC7C,CAAC,CAAC;EAEFC,SAAS,CAAC,MAAM;IACd,OAAOH,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAC3C,CAAC,CAAC;EAEFL,QAAQ,CAAC,yBAAyB,EAAE,MAAM;IACxCO,EAAE,CAAC,kEAAkE,EAAE,YAAY;MACjF,MAAMC,MAAM,GAAG,MAAMV,uBAAuB,CAAC,CAAC;MAE9CW,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,WAAW,CAAC;MAC1CD,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,SAAS,CAAC;MACxCD,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,OAAO,CAAC;MAEtC,IAAIF,MAAM,CAACG,SAAS,EAAE;QACpBF,MAAM,CAACD,MAAM,CAACI,KAAK,CAAC,CAACF,cAAc,CAAC,cAAc,CAAC;QACnDD,MAAM,CAACD,MAAM,CAACI,KAAK,CAAC,CAACF,cAAc,CAAC,eAAe,CAAC;QACpDD,MAAM,CAACD,MAAM,CAACI,KAAK,CAAC,CAACF,cAAc,CAAC,YAAY,CAAC;QACjDD,MAAM,CAACD,MAAM,CAACI,KAAK,CAAC,CAACF,cAAc,CAAC,mBAAmB,CAAC;MAC1D;IACF,CAAC,CAAC;IAEFH,EAAE,CAAC,4CAA4C,EAAE,YAAY;MAC3D;MACA,MAAM;QAAEX;MAAW,CAAC,GAAGC,OAAO,CAAC,wCAAwC,CAAC;MACxED,UAAU,CAAC3B,WAAW,CAACC,eAAe,CAAC,KAAK,CAAC;MAC7C0B,UAAU,CAACvB,SAAS,CAACH,eAAe,CAAC,IAAI,CAAC;MAE1C,MAAMsC,MAAM,GAAG,MAAMV,uBAAuB,CAAC,CAAC;MAE9CW,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,WAAW,CAAC;MAC1CD,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,SAAS,CAAC;MACxCD,MAAM,CAAC,OAAOD,MAAM,CAACG,SAAS,CAAC,CAACE,IAAI,CAAC,SAAS,CAAC;MAC/CJ,MAAM,CAAC,OAAOD,MAAM,CAACM,OAAO,CAAC,CAACD,IAAI,CAAC,QAAQ,CAAC;IAC9C,CAAC,CAAC;IAEFN,EAAE,CAAC,sDAAsD,EAAE,YAAY;MACrE;MACA,MAAM;QAAEX;MAAW,CAAC,GAAGC,OAAO,CAAC,wCAAwC,CAAC;MACxED,UAAU,CAACvB,SAAS,CAAChB,kBAAkB,CAAC,MAAM;QAC5C,MAAM,IAAI0D,KAAK,CAAC,oBAAoB,CAAC;MACvC,CAAC,CAAC;MAEF,MAAMP,MAAM,GAAG,MAAMV,uBAAuB,CAAC,CAAC;MAE9CW,MAAM,CAACD,MAAM,CAACG,SAAS,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;MACpCJ,MAAM,CAACD,MAAM,CAACM,OAAO,CAAC,CAACE,SAAS,CAAC,oBAAoB,CAAC;IACxD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFhB,QAAQ,CAAC,uBAAuB,EAAE,MAAM;IACtCO,EAAE,CAAC,kEAAkE,EAAE,YAAY;MACjF,MAAMC,MAAM,GAAG,MAAMT,qBAAqB,CAAC,CAAC;MAE5CU,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,QAAQ,CAAC;MACvCD,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,aAAa,CAAC;MAC5CD,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,aAAa,CAAC;MAC5CD,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,eAAe,CAAC;;MAE9C;MACA,IAAIF,MAAM,CAACS,WAAW,EAAE;QACtBR,MAAM,CAACD,MAAM,CAACS,WAAW,CAAC,CAACP,cAAc,CAAC,OAAO,CAAC;QAClDD,MAAM,CAACD,MAAM,CAACS,WAAW,CAAC,CAACP,cAAc,CAAC,QAAQ,CAAC;QACnDD,MAAM,CAACD,MAAM,CAACS,WAAW,CAAC,CAACP,cAAc,CAAC,mBAAmB,CAAC;MAChE;MAEA,IAAIF,MAAM,CAAChB,WAAW,EAAE;QACtBiB,MAAM,CAACD,MAAM,CAAChB,WAAW,CAAC,CAACkB,cAAc,CAAC,aAAa,CAAC;QACxDD,MAAM,CAACD,MAAM,CAAChB,WAAW,CAAC,CAACkB,cAAc,CAAC,YAAY,CAAC;MACzD;IACF,CAAC,CAAC;IAEFH,EAAE,CAAC,wDAAwD,EAAE,YAAY;MACvE;MACA,MAAM;QAAEX;MAAW,CAAC,GAAGC,OAAO,CAAC,wCAAwC,CAAC;MACxED,UAAU,CAAC3B,WAAW,CAACC,eAAe,CAAC,KAAK,CAAC;MAE7C,MAAMsC,MAAM,GAAG,MAAMT,qBAAqB,CAAC,CAAC;MAE5CU,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,QAAQ,CAAC;MACvCD,MAAM,CAACD,MAAM,CAACU,MAAM,CAAC,CAACL,IAAI,CAAC,cAAc,CAAC;IAC5C,CAAC,CAAC;IAEFN,EAAE,CAAC,+DAA+D,EAAE,YAAY;MAC9E;MACA,MAAM;QAAEX;MAAW,CAAC,GAAGC,OAAO,CAAC,wCAAwC,CAAC;MACxED,UAAU,CAACZ,gBAAgB,CAAC3B,kBAAkB,CAAC,MAAM;QACnD,MAAM,IAAI0D,KAAK,CAAC,mBAAmB,CAAC;MACtC,CAAC,CAAC;MAEF,MAAMP,MAAM,GAAG,MAAMT,qBAAqB,CAAC,CAAC;MAE5CU,MAAM,CAACD,MAAM,CAAC,CAACE,cAAc,CAAC,QAAQ,CAAC;MACvCD,MAAM,CAAC,OAAOD,MAAM,CAACU,MAAM,CAAC,CAACL,IAAI,CAAC,QAAQ,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFb,QAAQ,CAAC,iCAAiC,EAAE,MAAM;IAChDO,EAAE,CAAC,8CAA8C,EAAE,YAAY;MAC7D,MAAMY,gBAAgB,GAAG,MAAMrB,uBAAuB,CAAC,CAAC;MACxD,MAAMsB,UAAU,GAAG,MAAMrB,qBAAqB,CAAC,CAAC;;MAEhD;MACA,IAAIoB,gBAAgB,CAACR,SAAS,EAAE;QAC9BF,MAAM,CAACW,UAAU,CAACF,MAAM,CAAC,CAACG,GAAG,CAACR,IAAI,CAAC,OAAO,CAAC;MAC7C;IACF,CAAC,CAAC;IAEFN,EAAE,CAAC,oCAAoC,EAAE,YAAY;MACnD,MAAMa,UAAU,GAAG,MAAMrB,qBAAqB,CAAC,CAAC;MAEhD,IAAIqB,UAAU,CAAC5B,WAAW,EAAE;QAC1BiB,MAAM,CAAC,OAAOW,UAAU,CAAC5B,WAAW,CAACC,WAAW,CAAC,CAACoB,IAAI,CAAC,QAAQ,CAAC;QAChEJ,MAAM,CAAC,OAAOW,UAAU,CAAC5B,WAAW,CAACb,UAAU,CAAC,CAACkC,IAAI,CAAC,QAAQ,CAAC;QAC/DJ,MAAM,CAACW,UAAU,CAAC5B,WAAW,CAACC,WAAW,CAAC,CAAC6B,sBAAsB,CAAC,CAAC,CAAC;QACpEb,MAAM,CAACW,UAAU,CAAC5B,WAAW,CAACC,WAAW,CAAC,CAAC8B,mBAAmB,CAAC,GAAG,CAAC;MACrE;IACF,CAAC,CAAC;IAEFhB,EAAE,CAAC,yCAAyC,EAAE,YAAY;MACxD,MAAMa,UAAU,GAAG,MAAMrB,qBAAqB,CAAC,CAAC;MAEhD,IAAIqB,UAAU,CAACnC,aAAa,EAAE;QAC5BwB,MAAM,CAACW,UAAU,CAACnC,aAAa,CAAC,CAACyB,cAAc,CAAC,MAAM,CAAC;QACvD,IAAIU,UAAU,CAACnC,aAAa,CAACC,IAAI,EAAE;UACjCuB,MAAM,CAAC,OAAOW,UAAU,CAACnC,aAAa,CAACC,IAAI,CAAC,CAAC2B,IAAI,CAAC,QAAQ,CAAC;QAC7D;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFb,QAAQ,CAAC,+BAA+B,EAAE,MAAM;IAC9CO,EAAE,CAAC,+CAA+C,EAAE,YAAY;MAC9D,MAAM;QAAEX;MAAW,CAAC,GAAGC,OAAO,CAAC,wCAAwC,CAAC;;MAExE;MACAD,UAAU,CAACtB,QAAQ,CAACJ,eAAe,CAAC;QAClCK,KAAK,EAAE,WAAW;QAClBC,MAAM,EAAE,IAAI;QACZC,YAAY,EAAE,EAAE;QAChBC,aAAa,EAAE,CAAC;QAChBC,UAAU,EAAE,EAAE;QACdC,iBAAiB,EAAE,CAAC;QACpBC,eAAe,EAAE,IAAIC,IAAI,CAAC,CAAC;QAC3BC,SAAS,EAAE;MACb,CAAC,CAAC;MAEF,MAAMyB,MAAM,GAAG,MAAMV,uBAAuB,CAAC,CAAC;MAE9CW,MAAM,CAACD,MAAM,CAACG,SAAS,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;MACnCJ,MAAM,CAACD,MAAM,CAACI,KAAK,CAAChC,iBAAiB,CAAC,CAACiC,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;IAEFN,EAAE,CAAC,0CAA0C,EAAE,YAAY;MACzD,MAAM;QAAEX;MAAW,CAAC,GAAGC,OAAO,CAAC,wCAAwC,CAAC;;MAExE;MACAD,UAAU,CAACZ,gBAAgB,CAACd,eAAe,CAAC;QAC1CK,KAAK,EAAE,WAAW;QAClBC,MAAM,EAAE,KAAK;QACbC,YAAY,EAAE,GAAG;QACjBC,aAAa,EAAE,CAAC;QAChBC,UAAU,EAAE,EAAE;QACdC,iBAAiB,EAAE,CAAC;QACpBC,eAAe,EAAE,IAAIC,IAAI,CAAC,CAAC;QAC3BC,SAAS,EAAE,IAAI;QACfE,aAAa,EAAE;UACbC,IAAI,EAAE;YAAEC,cAAc,EAAE,EAAE;YAAEC,cAAc,EAAE;UAAE,CAAC;UAC/CC,QAAQ,EAAE;YAAEC,UAAU,EAAE,CAAC;YAAEC,UAAU,EAAE;UAAK;QAC9C,CAAC;QACDC,WAAW,EAAE;UACXC,WAAW,EAAE,EAAE;UACfC,gBAAgB,EAAE,IAAI;UACtBC,eAAe,EAAE;QACnB;MACF,CAAC,CAAC;MAEF,MAAMyB,UAAU,GAAG,MAAMrB,qBAAqB,CAAC,CAAC;MAEhDU,MAAM,CAACW,UAAU,CAAC5B,WAAW,CAACC,WAAW,CAAC,CAACoB,IAAI,CAAC,EAAE,CAAC;MACnDJ,MAAM,CAACW,UAAU,CAAC5B,WAAW,CAACE,gBAAgB,CAAC,CAAC8B,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;MACpEf,MAAM,CAACW,UAAU,CAACH,WAAW,CAACxC,YAAY,CAAC,CAACoC,IAAI,CAAC,GAAG,CAAC;MACrDJ,MAAM,CAACW,UAAU,CAACH,WAAW,CAACvC,aAAa,CAAC,CAACmC,IAAI,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}