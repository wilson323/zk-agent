{"file":"E:\\zk-agent\\tests\\api\\routes\\health.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\health.test.ts"],"sourcesContent":["/**\n * 健康检查API路由错误处理测试\n * 测试健康检查端点的各种错误场景和恢复机制\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET } from '@/app/api/health/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\nimport { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/database/connection', () => ({\n  testConnection: jest.fn(),\n  getConnectionStatus: jest.fn()\n}));\n\njest.mock('../../../lib/cache/redis', () => ({\n  ping: jest.fn(),\n  isConnected: jest.fn()\n}));\n\njest.mock('../../../lib/api/fastgpt', () => ({\n  testConnection: jest.fn(),\n  getHealthStatus: jest.fn()\n}));\n\njest.mock('fs/promises', () => ({\n  access: jest.fn(),\n  stat: jest.fn()\n}));\n\ndescribe('Health Check API Error Handling', () => {\n  let mockRequest: NextRequest;\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    mockRequest = new NextRequest('http://localhost:3000/api/health');\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('Database Connection Errors', () => {\n    it('should handle database connection timeout', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Connection timeout'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('SERVICE_UNAVAILABLE');\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Connection timeout');\n    });\n\n    it('should handle database authentication failure', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Authentication failed'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Authentication failed');\n    });\n\n    it('should handle database connection pool exhaustion', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Connection pool exhausted'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Connection pool exhausted');\n    });\n  });\n\n  describe('Redis Connection Errors', () => {\n    it('should handle Redis connection refused', async () => {\n      const { ping } = require('../../../lib/cache/redis');\n      ping.mockRejectedValue(new Error('Connection refused'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.redis.error).toContain('Connection refused');\n    });\n\n    it('should handle Redis authentication error', async () => {\n      const { ping } = require('../../../lib/cache/redis');\n      ping.mockRejectedValue(new Error('NOAUTH Authentication required'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.redis.error).toContain('NOAUTH Authentication required');\n    });\n\n    it('should handle Redis memory limit exceeded', async () => {\n      const { ping } = require('../../../lib/cache/redis');\n      ping.mockRejectedValue(new Error('OOM command not allowed when used memory > maxmemory'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.redis.error).toContain('OOM command not allowed');\n    });\n  });\n\n  describe('FastGPT Service Errors', () => {\n    it('should handle FastGPT API key invalid', async () => {\n      const { testConnection } = require('../../../lib/api/fastgpt');\n      testConnection.mockRejectedValue(new Error('Invalid API key'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.fastgpt.status).toBe('down');\n      expect(data.services.fastgpt.error).toContain('Invalid API key');\n    });\n\n    it('should handle FastGPT service unavailable', async () => {\n      const { testConnection } = require('../../../lib/api/fastgpt');\n      testConnection.mockRejectedValue(new Error('Service temporarily unavailable'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.fastgpt.status).toBe('down');\n      expect(data.services.fastgpt.error).toContain('Service temporarily unavailable');\n    });\n\n    it('should handle FastGPT rate limit exceeded', async () => {\n      const { testConnection } = require('../../../lib/api/fastgpt');\n      testConnection.mockRejectedValue(new Error('Rate limit exceeded'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.fastgpt.status).toBe('down');\n      expect(data.services.fastgpt.error).toContain('Rate limit exceeded');\n    });\n  });\n\n  describe('File System Errors', () => {\n    it('should handle file system permission denied', async () => {\n      const fs = require('fs/promises');\n      fs.access.mockRejectedValue(new Error('EACCES: permission denied'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.filesystem.status).toBe('down');\n      expect(data.services.filesystem.error).toContain('EACCES: permission denied');\n    });\n\n    it('should handle file system disk full', async () => {\n      const fs = require('fs/promises');\n      fs.access.mockRejectedValue(new Error('ENOSPC: no space left on device'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.filesystem.status).toBe('down');\n      expect(data.services.filesystem.error).toContain('ENOSPC: no space left on device');\n    });\n\n    it('should handle file system path not found', async () => {\n      const fs = require('fs/promises');\n      fs.access.mockRejectedValue(new Error('ENOENT: no such file or directory'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.filesystem.status).toBe('down');\n      expect(data.services.filesystem.error).toContain('ENOENT: no such file or directory');\n    });\n  });\n\n  describe('Partial Service Failures', () => {\n    it('should handle mixed service status', async () => {\n      const { testConnection: dbTest } = require('../../../lib/database/connection');\n      const { ping } = require('../../../lib/cache/redis');\n      const { testConnection: fastgptTest } = require('../../../lib/api/fastgpt');\n      const fs = require('fs/promises');\n\n      // Database OK, Redis fails, FastGPT OK, FileSystem OK\n      dbTest.mockResolvedValue(true);\n      ping.mockRejectedValue(new Error('Connection refused'));\n      fastgptTest.mockResolvedValue(true);\n      fs.access.mockResolvedValue(undefined);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.services.database.status).toBe('up');\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.fastgpt.status).toBe('up');\n      expect(data.services.filesystem.status).toBe('up');\n    });\n\n    it('should return healthy when all services are up', async () => {\n      const { testConnection: dbTest } = require('../../../lib/database/connection');\n      const { ping } = require('../../../lib/cache/redis');\n      const { testConnection: fastgptTest } = require('../../../lib/api/fastgpt');\n      const fs = require('fs/promises');\n\n      dbTest.mockResolvedValue(true);\n      ping.mockResolvedValue('PONG');\n      fastgptTest.mockResolvedValue(true);\n      fs.access.mockResolvedValue(undefined);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.status).toBe('healthy');\n      expect(data.services.database.status).toBe('up');\n      expect(data.services.redis.status).toBe('up');\n      expect(data.services.fastgpt.status).toBe('up');\n      expect(data.services.filesystem.status).toBe('up');\n    });\n  });\n\n  describe('Error Recovery and Circuit Breaker', () => {\n    it('should trigger circuit breaker after multiple failures', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Connection timeout'));\n\n      // Simulate multiple failures to trigger circuit breaker\n      for (let i = 0; i < 5; i++) {\n        await GET(mockRequest);\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include response time metrics', async () => {\n      const { testConnection: dbTest } = require('../../../lib/database/connection');\n      const { ping } = require('../../../lib/cache/redis');\n      const { testConnection: fastgptTest } = require('../../../lib/api/fastgpt');\n      const fs = require('fs/promises');\n\n      dbTest.mockResolvedValue(true);\n      ping.mockResolvedValue('PONG');\n      fastgptTest.mockResolvedValue(true);\n      fs.access.mockResolvedValue(undefined);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(data.services.database.responseTime).toBeDefined();\n      expect(data.services.redis.responseTime).toBeDefined();\n      expect(data.services.fastgpt.responseTime).toBeDefined();\n      expect(data.services.filesystem.responseTime).toBeDefined();\n    });\n\n    it('should handle timeout scenarios gracefully', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      \n      // Simulate a long-running operation\n      testConnection.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Operation timeout')), 100)\n        )\n      );\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Operation timeout');\n    });\n  });\n\n  describe('Global Error Handler Integration', () => {\n    it('should properly classify health check errors', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      const agentError = new AgentError(\n        AgentErrorType.SERVICE_UNAVAILABLE,\n        'Database service unavailable',\n        ErrorSeverity.CRITICAL\n      );\n      testConnection.mockRejectedValue(agentError);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.code).toBe('SERVICE_UNAVAILABLE');\n      expect(data.error.severity).toBe('critical');\n    });\n\n    it('should include error correlation ID', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Database error'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(data.error.correlationId).toBeDefined();\n      expect(data.timestamp).toBeDefined();\n    });\n\n    it('should log errors for monitoring', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Critical database error'));\n\n      await GET(mockRequest);\n\n      expect(consoleSpy).toHaveBeenCalled();\n      consoleSpy.mockRestore();\n    });\n  });\n});"],"version":3}