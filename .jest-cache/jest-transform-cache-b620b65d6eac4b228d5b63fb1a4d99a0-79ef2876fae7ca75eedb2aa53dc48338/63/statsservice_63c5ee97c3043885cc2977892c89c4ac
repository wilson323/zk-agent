c30ba41cfbad9b66903d7823538860d0
"use strict";

/**
 * @file lib/services/stats-service.ts
 * @description Statistics service for handling usage stats and analytics.
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_12j8jrnubj() {
  var path = "E:\\zk-agent\\lib\\services\\stats-service.ts";
  var hash = "ad049097b7424a186b1ae1ad05e2335612048271";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\services\\stats-service.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 83
        }
      },
      "2": {
        start: {
          line: 10,
          column: 36
        },
        end: {
          line: 10,
          column: 84
        }
      },
      "3": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 36,
          column: 1
        }
      },
      "4": {
        start: {
          line: 18,
          column: 29
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "5": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 35,
          column: 7
        }
      },
      "6": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 57
        }
      },
      "7": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 20
        }
      },
      "8": {
        start: {
          line: 37,
          column: 0
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "9": {
        start: {
          line: 44,
          column: 21
        },
        end: {
          line: 51,
          column: 1
        }
      },
      "10": {
        start: {
          line: 45,
          column: 18
        },
        end: {
          line: 49,
          column: 6
        }
      },
      "11": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "12": {
        start: {
          line: 52,
          column: 0
        },
        end: {
          line: 52,
          column: 36
        }
      },
      "13": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 86,
          column: 1
        }
      },
      "14": {
        start: {
          line: 60,
          column: 18
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "15": {
        start: {
          line: 65,
          column: 57
        },
        end: {
          line: 80,
          column: 6
        }
      },
      "16": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 85,
          column: 6
        }
      },
      "17": {
        start: {
          line: 87,
          column: 0
        },
        end: {
          line: 87,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 25
          },
          end: {
            line: 17,
            column: 26
          }
        },
        loc: {
          start: {
            line: 17,
            column: 87
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 32,
            column: 15
          },
          end: {
            line: 32,
            column: 16
          }
        },
        loc: {
          start: {
            line: 32,
            column: 26
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 32
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 21
          },
          end: {
            line: 44,
            column: 22
          }
        },
        loc: {
          start: {
            line: 44,
            column: 39
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 25
          }
        },
        loc: {
          start: {
            line: 59,
            column: 70
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 59
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 61
          },
          end: {
            line: 17,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 17,
            column: 72
          },
          end: {
            line: 17,
            column: 74
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 21,
            column: 47
          }
        }, {
          start: {
            line: 21,
            column: 51
          },
          end: {
            line: 21,
            column: 80
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 21
          }
        }, {
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 61,
            column: 58
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 12
          },
          end: {
            line: 62,
            column: 19
          }
        }, {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 54
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 63,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 63,
            column: 21
          }
        }, {
          start: {
            line: 63,
            column: 25
          },
          end: {
            line: 63,
            column: 38
          }
        }],
        line: 63
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\services\\stats-service.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAEH,qFAA2D;AAG3D;;;;;GAKG;AACI,MAAM,gBAAgB,GAAG,KAAK,EAAE,EACrC,MAAM,EACN,SAAS,EACT,MAAM,EACN,QAAQ,GAAG,EAAE,EACb,GAAG,GAOJ,EAAE,EAAE;IACH,MAAM,gBAAgB,GAAG;QACvB,GAAG,QAAQ;QACX,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;QACzC,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,IAAI,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;KACzE,CAAC;IAEF,OAAO,8BAAE,EAAE,UAAU;SAClB,MAAM,CAAC;QACN,IAAI,EAAE;YACJ,MAAM;YACN,SAAS;YACT,MAAM;YACN,QAAQ,EAAE,gBAAgB;SAC3B;KACF,CAAC;SACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;QACf,OAAO,CAAC,KAAK,CAAC,iBAAiB,MAAM,GAAG,EAAE,KAAK,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAhCW,QAAA,gBAAgB,oBAgC3B;AAEF;;;;;GAKG;AACI,MAAM,YAAY,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;IACnD,MAAM,KAAK,GAAG,MAAM,8BAAE,EAAE,UAAU,CAAC,OAAO,CAAC;QACzC,EAAE,EAAE,CAAC,WAAW,CAAC;QACjB,KAAK,EAAE,EAAE,MAAM,EAAE;QACjB,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;KACrB,CAAC,CAAC;IAEH,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AARW,QAAA,YAAY,gBAQvB;AAEF;;;;;GAKG;AACI,MAAM,eAAe,GAAG,KAAK,EAAE,EACpC,SAAS,EACT,OAAO,EACP,SAAS,GAKV,EAAE,EAAE;IACH,MAAM,KAAK,GAAG;QACZ,GAAG,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC;QACnD,GAAG,CAAC,OAAO,IAAI,EAAE,SAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC;QAC/C,GAAG,CAAC,SAAS,IAAI,EAAE,SAAS,EAAE,CAAC;KAChC,CAAC;IAEF,MAAM,CAAC,UAAU,EAAE,eAAe,EAAE,aAAa,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACrE,8BAAE,EAAE,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;QAC/B,8BAAE,EAAE,UAAU,CAAC,OAAO,CAAC;YACrB,EAAE,EAAE,CAAC,QAAQ,CAAC;YACd,KAAK;YACL,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;YACpB,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE;SACpC,CAAC;QACF,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC;YACnC,EAAE,EAAE,CAAC,QAAQ,CAAC;YACd,KAAK;YACL,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;YACpB,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE;YACnC,IAAI,EAAE,EAAE;SACT,CAAC;KACH,CAAC,CAAC;IAEH,OAAO;QACL,UAAU;QACV,eAAe;QACf,QAAQ,EAAE,aAAa;KACxB,CAAC;AACJ,CAAC,CAAC;AArCW,QAAA,eAAe,mBAqC1B",
      names: [],
      sources: ["E:\\zk-agent\\lib\\services\\stats-service.ts"],
      sourcesContent: ["/**\n * @file lib/services/stats-service.ts\n * @description Statistics service for handling usage stats and analytics.\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { db } from '../database/enhanced-database-manager';\nimport { NextRequest } from 'next/server';\n\n/**\n * Creates a usage stats record.\n *\n * @param {object} data - The usage stats data.\n * @returns {Promise<object>} The created usage stats record.\n */\nexport const createUsageStats = async ({\n  userId,\n  agentType,\n  action,\n  metadata = {},\n  req,\n}: {\n  userId: string;\n  agentType: string;\n  action: string;\n  metadata?: Record<string, any>;\n  req?: NextRequest;\n}) => {\n  const enrichedMetadata = {\n    ...metadata,\n    userAgent: req?.headers.get('user-agent'),\n    ip: req?.headers.get('x-forwarded-for') || req?.headers.get('x-real-ip'),\n  };\n\n  return db?.usageStats\n    .create({\n      data: {\n        userId,\n        agentType,\n        action,\n        metadata: enrichedMetadata,\n      },\n    })\n    .catch((error) => {\n      console.error(`Failed to log ${action}:`, error);\n      return null;\n    });\n};\n\n/**\n * Gets usage stats for a user.\n *\n * @param {string} userId - The user ID.\n * @returns {Promise<object>} The usage stats.\n */\nexport const getUserStats = async (userId: string) => {\n  const stats = await db?.usageStats.groupBy({\n    by: ['agentType'],\n    where: { userId },\n    _count: { id: true },\n  });\n\n  return stats;\n};\n\n/**\n * Gets usage stats summary.\n *\n * @param {object} options - The options for fetching stats.\n * @returns {Promise<object>} The stats summary.\n */\nexport const getStatsSummary = async ({\n  startDate,\n  endDate,\n  agentType,\n}: {\n  startDate?: Date;\n  endDate?: Date;\n  agentType?: string;\n}) => {\n  const where = {\n    ...(startDate && { createdAt: { gte: startDate } }),\n    ...(endDate && { createdAt: { lte: endDate } }),\n    ...(agentType && { agentType }),\n  };\n\n  const [totalCount, actionBreakdown, userBreakdown] = await Promise.all([\n    db?.usageStats.count({ where }),\n    db?.usageStats.groupBy({\n      by: ['action'],\n      where,\n      _count: { id: true },\n      orderBy: { _count: { id: 'desc' } },\n    }),\n    enhancedDb.prisma.usageStats.groupBy({\n      by: ['userId'],\n      where,\n      _count: { id: true },\n      orderBy: { _count: { id: 'desc' } },\n      take: 10,\n    }),\n  ]);\n\n  return {\n    totalCount,\n    actionBreakdown,\n    topUsers: userBreakdown,\n  };\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ad049097b7424a186b1ae1ad05e2335612048271"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12j8jrnubj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12j8jrnubj();
cov_12j8jrnubj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_12j8jrnubj().s[1]++;
exports.getStatsSummary = exports.getUserStats = exports.createUsageStats = void 0;
const enhanced_database_manager_1 =
/* istanbul ignore next */
(cov_12j8jrnubj().s[2]++, require("../database/enhanced-database-manager"));
/**
 * Creates a usage stats record.
 *
 * @param {object} data - The usage stats data.
 * @returns {Promise<object>} The created usage stats record.
 */
/* istanbul ignore next */
cov_12j8jrnubj().s[3]++;
const createUsageStats = async ({
  userId,
  agentType,
  action,
  metadata =
  /* istanbul ignore next */
  (cov_12j8jrnubj().b[0][0]++, {}),
  req
}) => {
  /* istanbul ignore next */
  cov_12j8jrnubj().f[0]++;
  const enrichedMetadata =
  /* istanbul ignore next */
  (cov_12j8jrnubj().s[4]++, {
    ...metadata,
    userAgent: req?.headers.get('user-agent'),
    ip:
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[1][0]++, req?.headers.get('x-forwarded-for')) ||
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[1][1]++, req?.headers.get('x-real-ip'))
  });
  /* istanbul ignore next */
  cov_12j8jrnubj().s[5]++;
  return enhanced_database_manager_1.db?.usageStats.create({
    data: {
      userId,
      agentType,
      action,
      metadata: enrichedMetadata
    }
  }).catch(error => {
    /* istanbul ignore next */
    cov_12j8jrnubj().f[1]++;
    cov_12j8jrnubj().s[6]++;
    console.error(`Failed to log ${action}:`, error);
    /* istanbul ignore next */
    cov_12j8jrnubj().s[7]++;
    return null;
  });
};
/* istanbul ignore next */
cov_12j8jrnubj().s[8]++;
exports.createUsageStats = createUsageStats;
/**
 * Gets usage stats for a user.
 *
 * @param {string} userId - The user ID.
 * @returns {Promise<object>} The usage stats.
 */
/* istanbul ignore next */
cov_12j8jrnubj().s[9]++;
const getUserStats = async userId => {
  /* istanbul ignore next */
  cov_12j8jrnubj().f[2]++;
  const stats =
  /* istanbul ignore next */
  (cov_12j8jrnubj().s[10]++, await enhanced_database_manager_1.db?.usageStats.groupBy({
    by: ['agentType'],
    where: {
      userId
    },
    _count: {
      id: true
    }
  }));
  /* istanbul ignore next */
  cov_12j8jrnubj().s[11]++;
  return stats;
};
/* istanbul ignore next */
cov_12j8jrnubj().s[12]++;
exports.getUserStats = getUserStats;
/**
 * Gets usage stats summary.
 *
 * @param {object} options - The options for fetching stats.
 * @returns {Promise<object>} The stats summary.
 */
/* istanbul ignore next */
cov_12j8jrnubj().s[13]++;
const getStatsSummary = async ({
  startDate,
  endDate,
  agentType
}) => {
  /* istanbul ignore next */
  cov_12j8jrnubj().f[3]++;
  const where =
  /* istanbul ignore next */
  (cov_12j8jrnubj().s[14]++, {
    ...(
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[2][0]++, startDate) &&
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[2][1]++, {
      createdAt: {
        gte: startDate
      }
    })),
    ...(
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[3][0]++, endDate) &&
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[3][1]++, {
      createdAt: {
        lte: endDate
      }
    })),
    ...(
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[4][0]++, agentType) &&
    /* istanbul ignore next */
    (cov_12j8jrnubj().b[4][1]++, {
      agentType
    }))
  });
  const [totalCount, actionBreakdown, userBreakdown] =
  /* istanbul ignore next */
  (cov_12j8jrnubj().s[15]++, await Promise.all([enhanced_database_manager_1.db?.usageStats.count({
    where
  }), enhanced_database_manager_1.db?.usageStats.groupBy({
    by: ['action'],
    where,
    _count: {
      id: true
    },
    orderBy: {
      _count: {
        id: 'desc'
      }
    }
  }), enhancedDb.prisma.usageStats.groupBy({
    by: ['userId'],
    where,
    _count: {
      id: true
    },
    orderBy: {
      _count: {
        id: 'desc'
      }
    },
    take: 10
  })]));
  /* istanbul ignore next */
  cov_12j8jrnubj().s[16]++;
  return {
    totalCount,
    actionBreakdown,
    topUsers: userBreakdown
  };
};
/* istanbul ignore next */
cov_12j8jrnubj().s[17]++;
exports.getStatsSummary = getStatsSummary;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,