{"file":"E:\\zk-agent\\lib\\utils\\logger.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\utils\\logger.ts"],"sourcesContent":["/**\n * @file 日志管理工具\n * @description 统一的日志记录和管理\n * @author ZK-Agent Team\n * @date 2024-01-20\n */\n\nimport * as winston from 'winston';\nimport { monitoringConfig, isDevelopment, isProduction } from '../../config/env';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\n// 确保日志目录存在\nconst logDir = monitoringConfig.logFilePath;\nif (!fs.existsSync(logDir)) {\n  fs.mkdirSync(logDir, { recursive: true });\n}\n\n// 自定义日志格式\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({\n    format: 'YYYY-MM-DD HH:mm:ss',\n  }),\n  winston.format.errors({ stack: true }),\n  winston.format.json(),\n  winston.format.printf(({ timestamp, level, message, stack, ...meta }) => {\n    let log = `${timestamp} [${level.toUpperCase()}]: ${message}`;\n    \n    if (Object.keys(meta).length > 0) {\n      log += ` ${JSON.stringify(meta)}`;\n    }\n    \n    if (stack) {\n      log += `\\n${stack}`;\n    }\n    \n    return log;\n  })\n);\n\n// 控制台格式（开发环境）\nconst consoleFormat = winston.format.combine(\n  winston.format.colorize(),\n  winston.format.simple(),\n  winston.format.printf(({ timestamp, level, message, stack }) => {\n    let log = `${timestamp} ${level}: ${message}`;\n    if (stack) {\n      log += `\\n${stack}`;\n    }\n    return log;\n  })\n);\n\n// 创建传输器\nconst transports: winston.transport[] = [];\n\n// 控制台输出（开发环境）\nif (isDevelopment) {\n  transports.push(\n    new winston.transports.Console({\n      format: consoleFormat,\n      level: 'debug',\n    })\n  );\n}\n\n// 文件输出（生产环境）\nif (isProduction) {\n  // 错误日志\n  transports.push(\n    new winston.transports.File({\n      filename: path.join(logDir, 'error.log'),\n      level: 'error',\n      format: logFormat,\n      maxsize: 10 * 1024 * 1024, // 10MB\n      maxFiles: 5,\n    })\n  );\n\n  // 组合日志\n  transports.push(\n    new winston.transports.File({\n      filename: path.join(logDir, 'combined.log'),\n      format: logFormat,\n      maxsize: 10 * 1024 * 1024, // 10MB\n      maxFiles: 10,\n    })\n  );\n\n  // 访问日志\n  transports.push(\n    new winston.transports.File({\n      filename: path.join(logDir, 'access.log'),\n      level: 'info',\n      format: logFormat,\n      maxsize: 10 * 1024 * 1024, // 10MB\n      maxFiles: 10,\n    })\n  );\n}\n\n// 创建 logger 实例\nconst logger = winston.createLogger({\n  level: monitoringConfig.logLevel,\n  format: logFormat,\n  transports,\n  exitOnError: false,\n});\n\n// 日志级别枚举\nexport enum LogLevel {\n  ERROR = 'error',\n  _WARN = 'warn',\n  _INFO = 'info',\n  _DEBUG = 'debug',\n}\n\n// 日志上下文接口\nexport interface ILogContext {\n  userId?: string;\n  requestId?: string;\n  ip?: string;\n  userAgent?: string;\n  method?: string;\n  url?: string;\n  statusCode?: number;\n  duration?: number;\n  [key: string]: any;\n}\n\n/**\n * 日志管理类\n */\nexport class Logger {\n  private context: ILogContext;\n\n  constructor(context: ILogContext | string = {}) {\n    if (typeof context === 'string') {\n      this.context = { component: context };\n    } else {\n      this.context = context;\n    }\n  }\n\n  /**\n   * 创建带上下文的日志实例\n   */\n  static withContext(context: ILogContext): Logger {\n    return new Logger(context);\n  }\n\n  /**\n   * 记录错误日志\n   */\n  error(message: string, error?: Error | any, meta: ILogContext = {}): void {\n    const logMeta = { ...this.context, ...meta };\n    \n    if (error instanceof Error) {\n      logMeta.stack = error.stack;\n      logMeta.errorName = error.name;\n      logMeta.errorMessage = error.message;\n    } else if (error) {\n      logMeta.error = error;\n    }\n\n    logger.error(message, logMeta);\n  }\n\n  /**\n   * 记录警告日志\n   */\n  warn(message: string, meta: ILogContext = {}): void {\n    logger.warn(message, { ...this.context, ...meta });\n  }\n\n  /**\n   * 记录信息日志\n   */\n  info(message: string, meta: ILogContext = {}): void {\n    logger.info(message, { ...this.context, ...meta });\n  }\n\n  /**\n   * 记录调试日志\n   */\n  debug(message: string, meta: ILogContext = {}): void {\n    logger.debug(message, { ...this.context, ...meta });\n  }\n\n  /**\n   * 记录API访问日志\n   */\n  access(meta: ILogContext): void {\n    const { method, url, statusCode, duration, userId, ip } = meta;\n    const message = `${method} ${url} ${statusCode} ${duration}ms`;\n    \n    this.info(message, {\n      type: 'access',\n      userId,\n      ip,\n      ...meta,\n    });\n  }\n\n  /**\n   * 记录业务操作日志\n   */\n  business(action: string, meta: ILogContext = {}): void {\n    this.info(`业务操作: ${action}`, {\n      type: 'business',\n      action,\n      ...this.context,\n      ...meta,\n    });\n  }\n\n  /**\n   * 记录安全事件日志\n   */\n  security(event: string, meta: ILogContext = {}): void {\n    this.warn(`安全事件: ${event}`, {\n      type: 'security',\n      event,\n      ...this.context,\n      ...meta,\n    });\n  }\n\n  /**\n   * 记录性能日志\n   */\n  performance(operation: string, duration: number, meta: ILogContext = {}): void {\n    const level = duration > 1000 ? 'warn' : 'info';\n    const message = `性能监控: ${operation} 耗时 ${duration}ms`;\n    \n    logger.log(level, message, {\n      type: 'performance',\n      operation,\n      duration,\n      ...this.context,\n      ...meta,\n    });\n  }\n}\n\n// 默认日志实例\nexport const defaultLogger = new Logger();\n\n// 便捷方法\nexport const log = {\n  error: (message: string, error?: Error | any, meta?: ILogContext) => \n    defaultLogger.error(message, error, meta),\n  warn: (message: string, meta?: ILogContext) => \n    defaultLogger.warn(message, meta),\n  info: (message: string, meta?: ILogContext) => \n    defaultLogger.info(message, meta),\n  debug: (message: string, meta?: ILogContext) => \n    defaultLogger.debug(message, meta),\n  access: (meta: ILogContext) => \n    defaultLogger.access(meta),\n  business: (action: string, meta?: ILogContext) => \n    defaultLogger.business(action, meta),\n  security: (event: string, meta?: ILogContext) => \n    defaultLogger.security(event, meta),\n  performance: (operation: string, duration: number, meta?: ILogContext) => \n    defaultLogger.performance(operation, duration, meta),\n};\n\nexport default logger;"],"version":3}