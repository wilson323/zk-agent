f474e4fb66c4351cab3756803bc1c35e
"use strict";
/**
 * @file 日志管理工具
 * @description 统一的日志记录和管理
 * @author ZK-Agent Team
 * @date 2024-01-20
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = exports.defaultLogger = exports.Logger = exports.LogLevel = void 0;
const winston = __importStar(require("winston"));
const env_1 = require("../../config/env");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
// 确保日志目录存在
const logDir = env_1.monitoringConfig.logFilePath;
if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
}
// 自定义日志格式
const logFormat = winston.format.combine(winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss',
}), winston.format.errors({ stack: true }), winston.format.json(), winston.format.printf(({ timestamp, level, message, stack, ...meta }) => {
    let log = `${timestamp} [${level.toUpperCase()}]: ${message}`;
    if (Object.keys(meta).length > 0) {
        log += ` ${JSON.stringify(meta)}`;
    }
    if (stack) {
        log += `\n${stack}`;
    }
    return log;
}));
// 控制台格式（开发环境）
const consoleFormat = winston.format.combine(winston.format.colorize(), winston.format.simple(), winston.format.printf(({ timestamp, level, message, stack }) => {
    let log = `${timestamp} ${level}: ${message}`;
    if (stack) {
        log += `\n${stack}`;
    }
    return log;
}));
// 创建传输器
const transports = [];
// 控制台输出（开发环境）
if (env_1.isDevelopment) {
    transports.push(new winston.transports.Console({
        format: consoleFormat,
        level: 'debug',
    }));
}
// 文件输出（生产环境）
if (env_1.isProduction) {
    // 错误日志
    transports.push(new winston.transports.File({
        filename: path.join(logDir, 'error.log'),
        level: 'error',
        format: logFormat,
        maxsize: 10 * 1024 * 1024, // 10MB
        maxFiles: 5,
    }));
    // 组合日志
    transports.push(new winston.transports.File({
        filename: path.join(logDir, 'combined.log'),
        format: logFormat,
        maxsize: 10 * 1024 * 1024, // 10MB
        maxFiles: 10,
    }));
    // 访问日志
    transports.push(new winston.transports.File({
        filename: path.join(logDir, 'access.log'),
        level: 'info',
        format: logFormat,
        maxsize: 10 * 1024 * 1024, // 10MB
        maxFiles: 10,
    }));
}
// 创建 logger 实例
const logger = winston.createLogger({
    level: env_1.monitoringConfig.logLevel,
    format: logFormat,
    transports,
    exitOnError: false,
});
// 日志级别枚举
var LogLevel;
(function (LogLevel) {
    LogLevel["ERROR"] = "error";
    LogLevel["_WARN"] = "warn";
    LogLevel["_INFO"] = "info";
    LogLevel["_DEBUG"] = "debug";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * 日志管理类
 */
class Logger {
    constructor(context = {}) {
        if (typeof context === 'string') {
            this.context = { component: context };
        }
        else {
            this.context = context;
        }
    }
    /**
     * 创建带上下文的日志实例
     */
    static withContext(context) {
        return new Logger(context);
    }
    /**
     * 记录错误日志
     */
    error(message, error, meta = {}) {
        const logMeta = { ...this.context, ...meta };
        if (error instanceof Error) {
            logMeta.stack = error.stack;
            logMeta.errorName = error.name;
            logMeta.errorMessage = error.message;
        }
        else if (error) {
            logMeta.error = error;
        }
        logger.error(message, logMeta);
    }
    /**
     * 记录警告日志
     */
    warn(message, meta = {}) {
        logger.warn(message, { ...this.context, ...meta });
    }
    /**
     * 记录信息日志
     */
    info(message, meta = {}) {
        logger.info(message, { ...this.context, ...meta });
    }
    /**
     * 记录调试日志
     */
    debug(message, meta = {}) {
        logger.debug(message, { ...this.context, ...meta });
    }
    /**
     * 记录API访问日志
     */
    access(meta) {
        const { method, url, statusCode, duration, userId, ip } = meta;
        const message = `${method} ${url} ${statusCode} ${duration}ms`;
        this.info(message, {
            type: 'access',
            userId,
            ip,
            ...meta,
        });
    }
    /**
     * 记录业务操作日志
     */
    business(action, meta = {}) {
        this.info(`业务操作: ${action}`, {
            type: 'business',
            action,
            ...this.context,
            ...meta,
        });
    }
    /**
     * 记录安全事件日志
     */
    security(event, meta = {}) {
        this.warn(`安全事件: ${event}`, {
            type: 'security',
            event,
            ...this.context,
            ...meta,
        });
    }
    /**
     * 记录性能日志
     */
    performance(operation, duration, meta = {}) {
        const level = duration > 1000 ? 'warn' : 'info';
        const message = `性能监控: ${operation} 耗时 ${duration}ms`;
        logger.log(level, message, {
            type: 'performance',
            operation,
            duration,
            ...this.context,
            ...meta,
        });
    }
}
exports.Logger = Logger;
// 默认日志实例
exports.defaultLogger = new Logger();
// 便捷方法
exports.log = {
    error: (message, error, meta) => exports.defaultLogger.error(message, error, meta),
    warn: (message, meta) => exports.defaultLogger.warn(message, meta),
    info: (message, meta) => exports.defaultLogger.info(message, meta),
    debug: (message, meta) => exports.defaultLogger.debug(message, meta),
    access: (meta) => exports.defaultLogger.access(meta),
    business: (action, meta) => exports.defaultLogger.business(action, meta),
    security: (event, meta) => exports.defaultLogger.security(event, meta),
    performance: (operation, duration, meta) => exports.defaultLogger.performance(operation, duration, meta),
};
exports.default = logger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,