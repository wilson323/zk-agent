4e8dd63999a0b630be02fc6ab1e21a2f
"use strict";

/**
 * @file db\health\route.ts
 * @description Migrated API route with global error handling
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_2hjvl273c9() {
  var path = "E:\\zk-agent\\app\\api\\db\\health\\route.ts";
  var hash = "ca134a5b5829d0add267b5cf3e305099d3faa463";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\db\\health\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 21
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "6": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 36
        }
      },
      "8": {
        start: {
          line: 18,
          column: 26
        },
        end: {
          line: 18,
          column: 45
        }
      },
      "9": {
        start: {
          line: 19,
          column: 24
        },
        end: {
          line: 19,
          column: 46
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "11": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 26,
          column: 15
        }
      },
      "12": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 33,
          column: 15
        }
      },
      "13": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 42,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 100
          },
          end: {
            line: 13,
            column: 101
          }
        },
        loc: {
          start: {
            line: 13,
            column: 175
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: 28,
            column: 13
          },
          end: {
            line: 34,
            column: 9
          }
        }],
        line: 20
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\db\\health\\route.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAGH,0EAAkF;AAClF,uDAA4D;AAC5D,uCAAyC;AAE5B,QAAA,GAAG,GAAG,IAAA,kCAAc,EAC/B,gCAAY,CAAC,SAAS,EAAE,EACxB,KAAK,EAAE,GAAgB,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;IACrF,IAAI,CAAC;QACH,YAAY;QACZ,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,YAAY;QACZ,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,UAAU;QACjD,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QAEvC,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,+BAAkB,CAAC,OAAO,CAAC;gBAChC,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,qBAAqB;gBAC9B,OAAO,EAAE,OAAO;gBAChB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,OAAO,+BAAkB,CAAC,KAAK,CAC7B,gBAAS,CAAC,mBAAmB,EAC7B,8BAA8B,EAC9B;gBACE,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,4BAA4B;gBACrC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CACF,CAAC;QACJ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACnC,OAAO,+BAAkB,CAAC,KAAK,CAC7B,gBAAS,CAAC,qBAAqB,EAC/B,8BAA8B,EAC9B;YACE,OAAO,EAAE,KAAK;YACd,OAAO,EAAE,8BAA8B;YACvC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CACF,CAAC;IACJ,CAAC;AACH,CAAC,CACF,CAAC",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\db\\health\\route.ts"],
      sourcesContent: ["/**\n * @file db\\health\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest } from 'next/server';\nimport { createApiRoute, RouteConfigs } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { ErrorCode } from '@/types/core';\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // \u6A21\u62DF\u6570\u636E\u5E93\u5065\u5EB7\u68C0\u67E5\n      const startTime = Date.now();\n      \n      // \u6A21\u62DF\u6570\u636E\u5E93\u8FDE\u63A5\u68C0\u67E5\n      const isHealthy = Math.random() > 0.1; // 90% \u6210\u529F\u7387\n      const latency = Date.now() - startTime;\n      \n      if (isHealthy) {\n        return ApiResponseWrapper.success({\n          success: true,\n          message: \"Database is healthy\",\n          latency: latency,\n          timestamp: new Date().toISOString(),\n        });\n      } else {\n        return ApiResponseWrapper.error(\n          ErrorCode.SERVICE_UNAVAILABLE,\n          \"Database health check failed\",\n          {\n            success: false,\n            message: \"Database connection failed\",\n            timestamp: new Date().toISOString(),\n          }\n        );\n      }\n    } catch (error) {\n      console.error('\u6570\u636E\u5E93\u5065\u5EB7\u68C0\u67E5\u5931\u8D25:', error);\n      return ApiResponseWrapper.error(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        \"Database health check failed\",\n        {\n          success: false,\n          message: \"Database health check failed\",\n          timestamp: new Date().toISOString(),\n        }\n      );\n    }\n  }\n);\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ca134a5b5829d0add267b5cf3e305099d3faa463"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hjvl273c9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hjvl273c9();
cov_2hjvl273c9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2hjvl273c9().s[1]++;
exports.GET = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_2hjvl273c9().s[2]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_2hjvl273c9().s[3]++, require("@/lib/utils/api-helper"));
const core_1 =
/* istanbul ignore next */
(cov_2hjvl273c9().s[4]++, require("@/types/core"));
/* istanbul ignore next */
cov_2hjvl273c9().s[5]++;
exports.GET = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.publicGet(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_2hjvl273c9().f[0]++;
  cov_2hjvl273c9().s[6]++;
  try {
    // 模拟数据库健康检查
    const startTime =
    /* istanbul ignore next */
    (cov_2hjvl273c9().s[7]++, Date.now());
    // 模拟数据库连接检查
    const isHealthy =
    /* istanbul ignore next */
    (cov_2hjvl273c9().s[8]++, Math.random() > 0.1); // 90% 成功率
    const latency =
    /* istanbul ignore next */
    (cov_2hjvl273c9().s[9]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_2hjvl273c9().s[10]++;
    if (isHealthy) {
      /* istanbul ignore next */
      cov_2hjvl273c9().b[0][0]++;
      cov_2hjvl273c9().s[11]++;
      return api_helper_1.ApiResponseWrapper.success({
        success: true,
        message: "Database is healthy",
        latency: latency,
        timestamp: new Date().toISOString()
      });
    } else {
      /* istanbul ignore next */
      cov_2hjvl273c9().b[0][1]++;
      cov_2hjvl273c9().s[12]++;
      return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.SERVICE_UNAVAILABLE, "Database health check failed", {
        success: false,
        message: "Database connection failed",
        timestamp: new Date().toISOString()
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2hjvl273c9().s[13]++;
    console.error('数据库健康检查失败:', error);
    /* istanbul ignore next */
    cov_2hjvl273c9().s[14]++;
    return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.INTERNAL_SERVER_ERROR, "Database health check failed", {
      success: false,
      message: "Database health check failed",
      timestamp: new Date().toISOString()
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,