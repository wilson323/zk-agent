{"version":3,"names":["cov_2hjvl273c9","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","core_1","exports","GET","createApiRoute","RouteConfigs","publicGet","req","params","validatedBody","validatedQuery","user","requestId","startTime","Date","now","isHealthy","Math","random","latency","ApiResponseWrapper","success","message","timestamp","toISOString","error","ErrorCode","SERVICE_UNAVAILABLE","console","INTERNAL_SERVER_ERROR"],"sources":["E:\\zk-agent\\app\\api\\db\\health\\route.ts"],"sourcesContent":["/**\n * @file db\\health\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest } from 'next/server';\nimport { createApiRoute, RouteConfigs } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { ErrorCode } from '@/types/core';\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // 模拟数据库健康检查\n      const startTime = Date.now();\n      \n      // 模拟数据库连接检查\n      const isHealthy = Math.random() > 0.1; // 90% 成功率\n      const latency = Date.now() - startTime;\n      \n      if (isHealthy) {\n        return ApiResponseWrapper.success({\n          success: true,\n          message: \"Database is healthy\",\n          latency: latency,\n          timestamp: new Date().toISOString(),\n        });\n      } else {\n        return ApiResponseWrapper.error(\n          ErrorCode.SERVICE_UNAVAILABLE,\n          \"Database health check failed\",\n          {\n            success: false,\n            message: \"Database connection failed\",\n            timestamp: new Date().toISOString(),\n          }\n        );\n      }\n    } catch (error) {\n      console.error('数据库健康检查失败:', error);\n      return ApiResponseWrapper.error(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        \"Database health check failed\",\n        {\n          success: false,\n          message: \"Database health check failed\",\n          timestamp: new Date().toISOString(),\n        }\n      );\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}