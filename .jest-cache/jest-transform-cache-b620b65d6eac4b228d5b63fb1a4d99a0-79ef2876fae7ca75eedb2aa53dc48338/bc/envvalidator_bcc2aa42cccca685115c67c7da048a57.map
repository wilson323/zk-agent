{"version":3,"names":["fs","require","path","validateEnvVar","name","defaultValue","undefined","value","process","env","Error","PRODUCTION_RULES","sslCertExpiry","certPath","cert","readFileSync","Date","now","validTo","getTime","connectionPool","config","max","min","idle","EnvValidator","constructor","requiredVars","Map","optionalVars","validationRules","addRequired","description","validator","set","addOptional","addRule","rule","has","get","push","validateVariable","result","valid","errors","warnings","validatorResult","error","message","rules","forEach","ruleResult","type","validate","results","missing","variables","varResult","generateReport","validation","timestamp","toISOString","environment","NODE_ENV","summary","total","size","required","optional","length","Array","from","entries","map","validators","port","parseInt","isNaN","url","URL","email","emailRegex","test","number","Infinity","num","parseFloat","regex","enum","allowedValues","includes","join","filePath","mustExist","isAbsolute","startsWith","existsSync","password","minLength","hasUpper","hasLower","hasNumber","hasSpecial","requirements","databaseUrl","protocol","hostname","pathname","replace","productionConfig","createDatabaseValidator","createAppValidator","validateEnv","reports","dbValidator","dbReport","database","appValidator","appReport","app","validateProductionConfig","securityScore","ssl","pool","host","unsafeUsernames","username","healthCheck","enabled","security","auditLog","Math","recommendations","generateProductionRecommendations","encryptionAtRest","passwordRotation","loadEnvFile","console","warn","envContent","lines","split","line","index","trim","equalIndex","indexOf","key","substring","cleanValue","module","exports"],"sources":["env-validator.js"],"sourcesContent":["/**\n * @file 环境变量验证工具\n * @description 验证和管理环境变量的工具函数\n * @author ZK-Agent Team\n * @date 2024-06-25\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * 验证并获取单个环境变量\n * @param {string} name - 变量名\n * @param {*} defaultValue - 默认值\n * @returns {*} 环境变量值\n */\n/**\n * 验证并获取单个环境变量\n * @param {string} name - 变量名\n * @param {*} defaultValue - 默认值\n * @returns {*} 环境变量值\n */\nfunction validateEnvVar(name, defaultValue = undefined) {\n  const value = process.env[name];\n  if (value === undefined || value === null || value === '') {\n    if (defaultValue === undefined) {\n      throw new Error(`必需的环境变量 ${name} 未设置`);\n    }\n    return defaultValue;\n  }\n  return value;\n}\n\n// 生产环境专用验证规则\nconst PRODUCTION_RULES = {\n  sslCertExpiry: (certPath) => {\n    const cert = fs.readFileSync(certPath);\n    return Date.now() < new Date(cert.validTo).getTime();\n  },\n  connectionPool: (config) => {\n    return config.max <= 100 && config.min >= 5 && config.idle <= 30000;\n  }\n};\n\nclass EnvValidator {\n  constructor() {\n    this.requiredVars = new Map();\n    this.optionalVars = new Map();\n    this.validationRules = new Map();\n  }\n\n  /**\n   * 添加必需的环境变量\n   * @param {string} name - 变量名\n   * @param {string} description - 变量描述\n   * @param {Function} validator - 验证函数\n   */\n  addRequired(name, description, validator = null) {\n    this.requiredVars.set(name, { description, validator });\n    return this;\n  }\n\n  /**\n   * 添加可选的环境变量\n   * @param {string} name - 变量名\n   * @param {string} description - 变量描述\n   * @param {*} defaultValue - 默认值\n   * @param {Function} validator - 验证函数\n   */\n  addOptional(name, description, defaultValue = null, validator = null) {\n    this.optionalVars.set(name, { description, defaultValue, validator });\n    return this;\n  }\n\n  /**\n   * 添加验证规则\n   * @param {string} name - 变量名\n   * @param {Function} rule - 验证规则函数\n   */\n  addRule(name, rule) {\n    if (!this.validationRules.has(name)) {\n      this.validationRules.set(name, []);\n    }\n    this.validationRules.get(name).push(rule);\n    return this;\n  }\n\n  /**\n   * 验证单个环境变量\n   * @param {string} name - 变量名\n   * @param {*} value - 变量值\n   * @param {Function} validator - 验证函数\n   * @returns {Object} 验证结果\n   */\n  validateVariable(name, value, validator = null) {\n    const result = {\n      name,\n      value,\n      valid: true,\n      errors: [],\n      warnings: []\n    };\n\n    // 检查是否为空\n    if (value === undefined || value === null || value === '') {\n      result.valid = false;\n      result.errors.push(`${name} 不能为空`);\n      return result;\n    }\n\n    // 执行自定义验证器\n    if (validator && typeof validator === 'function') {\n      try {\n        const validatorResult = validator(value);\n        if (validatorResult !== true) {\n          result.valid = false;\n          result.errors.push(validatorResult || `${name} 验证失败`);\n        }\n      } catch (error) {\n        result.valid = false;\n        result.errors.push(`${name} 验证器执行错误: ${error.message}`);\n      }\n    }\n\n    // 执行验证规则\n    if (this.validationRules.has(name)) {\n      const rules = this.validationRules.get(name);\n      rules.forEach(rule => {\n        try {\n          const ruleResult = rule(value);\n          if (ruleResult !== true) {\n            if (ruleResult && ruleResult.type === 'warning') {\n              result.warnings.push(ruleResult.message);\n            } else {\n              result.valid = false;\n              result.errors.push(ruleResult || `${name} 规则验证失败`);\n            }\n          }\n        } catch (error) {\n          result.valid = false;\n          result.errors.push(`${name} 规则执行错误: ${error.message}`);\n        }\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * 验证所有环境变量\n   * @returns {Object} 验证结果\n   */\n  validate() {\n    const results = {\n      valid: true,\n      errors: [],\n      warnings: [],\n      missing: [],\n      variables: new Map()\n    };\n\n    // 验证必需变量\n    for (const [name, config] of this.requiredVars) {\n      const value = process.env[name];\n      \n      if (value === undefined || value === null || value === '') {\n        results.valid = false;\n        results.missing.push(name);\n        results.errors.push(`必需的环境变量 ${name} 未设置: ${config.description}`);\n      } else {\n        const varResult = this.validateVariable(name, value, config.validator);\n        results.variables.set(name, varResult);\n        \n        if (!varResult.valid) {\n          results.valid = false;\n          results.errors.push(...varResult.errors);\n        }\n        \n        results.warnings.push(...varResult.warnings);\n      }\n    }\n\n    // 验证可选变量\n    for (const [name, config] of this.optionalVars) {\n      const value = process.env[name] || config.defaultValue;\n      \n      if (value !== null && value !== undefined && value !== '') {\n        const varResult = this.validateVariable(name, value, config.validator);\n        results.variables.set(name, varResult);\n        \n        if (!varResult.valid) {\n          results.valid = false;\n          results.errors.push(...varResult.errors);\n        }\n        \n        results.warnings.push(...varResult.warnings);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * 生成环境变量报告\n   * @returns {Object} 报告对象\n   */\n  generateReport() {\n    const validation = this.validate();\n    \n    return {\n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development',\n      validation,\n      summary: {\n        total: this.requiredVars.size + this.optionalVars.size,\n        required: this.requiredVars.size,\n        optional: this.optionalVars.size,\n        missing: validation.missing.length,\n        errors: validation.errors.length,\n        warnings: validation.warnings.length,\n        valid: validation.valid\n      },\n      variables: {\n        required: Array.from(this.requiredVars.entries()).map(([name, config]) => ({\n          name,\n          description: config.description,\n          set: process.env[name] !== undefined,\n          value: process.env[name] ? '[HIDDEN]' : undefined\n        })),\n        optional: Array.from(this.optionalVars.entries()).map(([name, config]) => ({\n          name,\n          description: config.description,\n          defaultValue: config.defaultValue,\n          set: process.env[name] !== undefined,\n          value: process.env[name] ? '[HIDDEN]' : config.defaultValue\n        }))\n      }\n    };\n  }\n}\n\n/**\n * 常用验证器函数\n */\nconst validators = {\n  /**\n   * 验证端口号\n   * @param {string} value - 端口值\n   * @returns {boolean|string} 验证结果\n   */\n  port: (value) => {\n    const port = parseInt(value, 10);\n    if (isNaN(port) || port < 1 || port > 65535) {\n      return '端口号必须是1-65535之间的数字';\n    }\n    return true;\n  },\n\n  /**\n   * 验证URL\n   * @param {string} value - URL值\n   * @returns {boolean|string} 验证结果\n   */\n  url: (value) => {\n    try {\n      new URL(value);\n      return true;\n    } catch {\n      return '必须是有效的URL格式';\n    }\n  },\n\n  /**\n   * 验证邮箱\n   * @param {string} value - 邮箱值\n   * @returns {boolean|string} 验证结果\n   */\n  email: (value) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value)) {\n      return '必须是有效的邮箱格式';\n    }\n    return true;\n  },\n\n  /**\n   * 验证数字\n   * @param {number} min - 最小值\n   * @param {number} max - 最大值\n   * @returns {Function} 验证函数\n   */\n  number: (min = -Infinity, max = Infinity) => {\n    return (value) => {\n      const num = parseFloat(value);\n      if (isNaN(num)) {\n        return '必须是有效的数字';\n      }\n      if (num < min || num > max) {\n        return `数字必须在 ${min} 到 ${max} 之间`;\n      }\n      return true;\n    };\n  },\n\n  /**\n   * 验证字符串长度\n   * @param {number} min - 最小长度\n   * @param {number} max - 最大长度\n   * @returns {Function} 验证函数\n   */\n  length: (min = 0, max = Infinity) => {\n    return (value) => {\n      if (typeof value !== 'string') {\n        return '必须是字符串';\n      }\n      if (value.length < min || value.length > max) {\n        return `长度必须在 ${min} 到 ${max} 个字符之间`;\n      }\n      return true;\n    };\n  },\n\n  /**\n   * 验证正则表达式\n   * @param {RegExp} regex - 正则表达式\n   * @param {string} message - 错误消息\n   * @returns {Function} 验证函数\n   */\n  regex: (regex, message = '格式不正确') => {\n    return (value) => {\n      if (!regex.test(value)) {\n        return message;\n      }\n      return true;\n    };\n  },\n\n  /**\n   * 验证枚举值\n   * @param {Array} allowedValues - 允许的值\n   * @returns {Function} 验证函数\n   */\n  enum: (allowedValues) => {\n    return (value) => {\n      if (!allowedValues.includes(value)) {\n        return `必须是以下值之一: ${allowedValues.join(', ')}`;\n      }\n      return true;\n    };\n  },\n\n  /**\n   * 验证文件路径\n   * @param {boolean} mustExist - 文件是否必须存在\n   * @returns {Function} 验证函数\n   */\n  filePath: (mustExist = false) => {\n    return (value) => {\n      if (!path.isAbsolute(value) && !value.startsWith('./') && !value.startsWith('../')) {\n        return '必须是有效的文件路径';\n      }\n      \n      if (mustExist && !fs.existsSync(value)) {\n        return '文件路径不存在';\n      }\n      \n      return true;\n    };\n  },\n\n  /**\n   * 验证密码强度\n   * @param {number} minLength - 最小长度\n   * @returns {Function} 验证函数\n   */\n  password: (minLength = 8) => {\n    return (value) => {\n      if (value.length < minLength) {\n        return `密码长度至少需要 ${minLength} 个字符`;\n      }\n      \n      const hasUpper = /[A-Z]/.test(value);\n      const hasLower = /[a-z]/.test(value);\n      const hasNumber = /\\d/.test(value);\n      const hasSpecial = /[!@#$%^&*(),.?\":{}|<>]/.test(value);\n      \n      const requirements = [];\n      if (!hasUpper) requirements.push('大写字母');\n      if (!hasLower) requirements.push('小写字母');\n      if (!hasNumber) requirements.push('数字');\n      if (!hasSpecial) requirements.push('特殊字符');\n      \n      if (requirements.length > 0) {\n        return {\n          type: 'warning',\n          message: `密码建议包含: ${requirements.join(', ')}`\n        };\n      }\n      \n      return true;\n    };\n  },\n\n  /**\n   * 验证数据库连接URL\n   * @returns {Function} 验证函数\n   */\n  databaseUrl: () => {\n    return (value) => {\n      if (!value) return true; // 可选字段\n      \n      try {\n        const url = new URL(value);\n        \n        // 检查协议\n        if (!['postgres:', 'postgresql:', 'mysql:', 'sqlite:'].includes(url.protocol)) {\n          return '不支持的数据库协议';\n        }\n        \n        // 检查主机和端口\n        if (url.protocol !== 'sqlite:' && !url.hostname) {\n          return '数据库URL缺少主机名';\n        }\n        \n        // 检查数据库名\n        if (url.protocol !== 'sqlite:' && !url.pathname.replace('/', '')) {\n          return '数据库URL缺少数据库名';\n        }\n        \n        return true;\n      } catch {\n        return '无效的数据库连接URL格式';\n      }\n    };\n  },\n\n  /**\n   * 验证生产环境配置\n   * @returns {Function} 验证函数\n   */\n  productionConfig: () => {\n    return (value) => {\n      if (process.env.NODE_ENV !== 'production') {\n        return true;\n      }\n      \n      const warnings = [];\n      \n      // 检查是否使用默认值\n      if (value === 'localhost' || value === '127.0.0.1') {\n        warnings.push('生产环境不应使用localhost');\n      }\n      \n      if (value === 'postgres' || value === 'admin' || value === 'root') {\n        warnings.push('生产环境不应使用默认用户名');\n      }\n      \n      if (value === '123456' || value === 'password' || value === '') {\n        warnings.push('生产环境不应使用弱密码或空密码');\n      }\n      \n      if (warnings.length > 0) {\n        return {\n          type: 'warning',\n          message: warnings.join('; ')\n        };\n      }\n      \n      return true;\n    };\n  }\n};\n\n/**\n * 创建数据库环境变量验证器\n * @returns {EnvValidator} 验证器实例\n */\nfunction createDatabaseValidator() {\n  const validator = new EnvValidator();\n  \n  // 数据库连接相关\n  validator\n    .addRequired('DB_HOST', '数据库主机地址')\n    .addRequired('DB_PORT', '数据库端口', validators.port)\n    .addRequired('DB_NAME', '数据库名称', validators.length(1, 64))\n    .addRequired('DB_USER', '数据库用户名', validators.length(1, 64))\n    .addOptional('DB_PASSWORD', '数据库密码', '', validators.password(12))\n    .addOptional('DB_DIALECT', '数据库类型', 'postgres', validators.enum(['postgres', 'mysql', 'sqlite', 'mariadb']))\n    .addOptional('DB_SSL', '是否启用SSL', 'false', validators.enum(['true', 'false']))\n    .addOptional('DB_POOL_MAX', '连接池最大连接数', '10', validators.number(1, 100))\n    .addOptional('DB_POOL_MIN', '连接池最小连接数', '2', validators.number(0, 50))\n    .addOptional('DB_POOL_ACQUIRE', '获取连接超时时间(ms)', '60000', validators.number(1000, 300000))\n    .addOptional('DB_POOL_IDLE', '空闲连接超时时间(ms)', '300000', validators.number(10000, 3600000))\n    // 生产环境安全配置\n    .addOptional('DB_CONNECT_TIMEOUT', '数据库连接超时时间(ms)', '5000', validators.number(1000, 30000))\n    .addOptional('DB_REQUEST_TIMEOUT', '数据库请求超时时间(ms)', '10000', validators.number(5000, 60000))\n    .addOptional('DB_STATEMENT_TIMEOUT', '数据库语句超时时间(ms)', '30000', validators.number(10000, 300000))\n    .addOptional('DB_IDLE_TRANSACTION_TIMEOUT', '空闲事务超时时间(ms)', '60000', validators.number(30000, 600000))\n    .addOptional('DB_HEALTH_CHECK_INTERVAL', '健康检查间隔(ms)', '30000', validators.number(10000, 300000))\n    .addOptional('DB_HEALTH_CHECK_TIMEOUT', '健康检查超时(ms)', '5000', validators.number(1000, 30000))\n    .addOptional('DB_HEALTH_CHECK_RETRIES', '健康检查重试次数', '3', validators.number(1, 10))\n    .addOptional('DATABASE_ENCRYPTION_AT_REST', '数据库静态加密', 'false', validators.enum(['true', 'false']))\n    .addOptional('DATABASE_SECURITY_DEV', '开发环境安全模式', 'false', validators.enum(['true', 'false']))\n    .addOptional('DATABASE_SSL_DEV', '开发环境SSL', 'false', validators.enum(['true', 'false']))\n    .addOptional('DATABASE_URL', '数据库连接URL', '', validators.url)\n    .addOptional('DATABASE_URL_TEST', '测试数据库连接URL', '', validators.url);\n  \n  // 添加生产环境特殊验证规则\n  validator.addRule('DB_PASSWORD', (value) => {\n    if (process.env.NODE_ENV === 'production' && (!value || value.length < 12)) {\n      return '生产环境数据库密码长度至少需要12个字符';\n    }\n    return true;\n  });\n  \n  validator.addRule('DB_SSL', (value) => {\n    if (process.env.NODE_ENV === 'production' && value !== 'true') {\n      return {\n        type: 'warning',\n        message: '生产环境强烈建议启用SSL连接'\n      };\n    }\n    return true;\n  });\n  \n  validator.addRule('DATABASE_ENCRYPTION_AT_REST', (value) => {\n    if (process.env.NODE_ENV === 'production' && value !== 'true') {\n      return {\n        type: 'warning',\n        message: '生产环境建议启用数据库静态加密'\n      };\n    }\n    return true;\n  });\n  \n  return validator;\n}\n\n/**\n * 创建应用环境变量验证器\n * @returns {EnvValidator} 验证器实例\n */\nfunction createAppValidator() {\n  const validator = new EnvValidator();\n  \n  // 应用基础配置\n  validator\n    .addRequired('NODE_ENV', '运行环境', validators.enum(['development', 'test', 'production']))\n    .addOptional('PORT', '应用端口', '3000', validators.port)\n    .addOptional('HOST', '应用主机', '0.0.0.0')\n    .addOptional('APP_NAME', '应用名称', 'ZK-Agent', validators.length(1, 100))\n    .addOptional('APP_VERSION', '应用版本', '1.0.0')\n    .addOptional('LOG_LEVEL', '日志级别', 'info', validators.enum(['error', 'warn', 'info', 'debug']))\n    .addOptional('LOG_FILE', '日志文件路径', './logs/app.log')\n    .addOptional('JWT_SECRET', 'JWT密钥', '', validators.password(32))\n    .addOptional('ENCRYPTION_KEY', '加密密钥', '', validators.password(32))\n    .addOptional('SESSION_SECRET', '会话密钥', '', validators.password(16));\n  \n  return validator;\n}\n\n/**\n * 验证环境变量\n * @param {string} type - 验证类型 ('database', 'app', 'all')\n * @returns {Object} 验证结果\n */\nfunction validateEnv(type = 'all') {\n  const results = {\n    timestamp: new Date().toISOString(),\n    type,\n    valid: true,\n    errors: [],\n    warnings: [],\n    reports: {}\n  };\n  \n  try {\n    if (type === 'database' || type === 'all') {\n      const dbValidator = createDatabaseValidator();\n      const dbReport = dbValidator.generateReport();\n      results.reports.database = dbReport;\n      \n      if (!dbReport.validation.valid) {\n        results.valid = false;\n        results.errors.push(...dbReport.validation.errors);\n      }\n      results.warnings.push(...dbReport.validation.warnings);\n    }\n    \n    if (type === 'app' || type === 'all') {\n      const appValidator = createAppValidator();\n      const appReport = appValidator.generateReport();\n      results.reports.app = appReport;\n      \n      if (!appReport.validation.valid) {\n        results.valid = false;\n        results.errors.push(...appReport.validation.errors);\n      }\n      results.warnings.push(...appReport.validation.warnings);\n    }\n    \n  } catch (error) {\n    results.valid = false;\n    results.errors.push(`环境变量验证过程中发生错误: ${error.message}`);\n  }\n  \n  return results;\n}\n\n/**\n * 验证生产环境配置\n * @param {Object} config - 配置对象\n * @returns {Object} 验证结果\n */\nfunction validateProductionConfig(config) {\n  const errors = [];\n  const warnings = [];\n  let securityScore = 100;\n  \n  // SSL证书检查\n  if (config.ssl && config.ssl.cert) {\n    try {\n      if (!PRODUCTION_RULES.sslCertExpiry(config.ssl.cert)) {\n        errors.push('SSL证书已过期或即将过期');\n        securityScore -= 20;\n      }\n    } catch (error) {\n      warnings.push(`SSL证书检查失败: ${error.message}`);\n      securityScore -= 10;\n    }\n  } else if (process.env.NODE_ENV === 'production') {\n    warnings.push('生产环境未配置SSL证书');\n    securityScore -= 15;\n  }\n  \n  // 连接池配置检查\n  if (config.pool) {\n    if (!PRODUCTION_RULES.connectionPool(config.pool)) {\n      errors.push('连接池配置不符合生产环境要求');\n      securityScore -= 15;\n    }\n    \n    // 检查连接池安全配置\n    if (config.pool.max > 100) {\n      warnings.push('连接池最大连接数过高，可能影响性能');\n      securityScore -= 5;\n    }\n    \n    if (config.pool.idle > 300000) {\n      warnings.push('连接池空闲时间过长，可能造成资源浪费');\n      securityScore -= 5;\n    }\n  }\n  \n  // 密码强度检查\n  if (config.password) {\n    if (config.password.length < 12) {\n      errors.push('生产环境密码长度至少需要12个字符');\n      securityScore -= 20;\n    }\n    \n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*])/.test(config.password)) {\n      warnings.push('密码强度不足，建议包含大小写字母、数字和特殊字符');\n      securityScore -= 10;\n    }\n  }\n  \n  // 主机安全检查\n  if (config.host === 'localhost' || config.host === '127.0.0.1') {\n    warnings.push('生产环境不建议使用localhost');\n    securityScore -= 10;\n  }\n  \n  // 用户名安全检查\n  const unsafeUsernames = ['postgres', 'admin', 'root', 'sa', 'user'];\n  if (unsafeUsernames.includes(config.username)) {\n    warnings.push('使用默认用户名存在安全风险');\n    securityScore -= 10;\n  }\n  \n  // 审计和监控检查\n  if (!config.healthCheck || !config.healthCheck.enabled) {\n    warnings.push('未启用数据库健康检查');\n    securityScore -= 5;\n  }\n  \n  if (!config.security || !config.security.auditLog) {\n    warnings.push('未启用数据库审计日志');\n    securityScore -= 10;\n  }\n  \n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings,\n    securityScore: Math.max(0, securityScore),\n    recommendations: generateProductionRecommendations(config, securityScore)\n  };\n}\n\n/**\n * 生成生产环境建议\n * @param {Object} config - 配置对象\n * @param {number} securityScore - 安全分数\n * @returns {Array} 建议列表\n */\nfunction generateProductionRecommendations(config, securityScore) {\n  const recommendations = [];\n  \n  if (securityScore < 80) {\n    recommendations.push('安全分数偏低，建议立即优化安全配置');\n  }\n  \n  if (!config.ssl) {\n    recommendations.push('启用SSL/TLS加密连接');\n  }\n  \n  if (!config.security?.encryptionAtRest) {\n    recommendations.push('启用数据库静态加密');\n  }\n  \n  if (!config.security?.passwordRotation) {\n    recommendations.push('实施定期密码轮换策略');\n  }\n  \n  recommendations.push('定期备份数据库');\n  recommendations.push('配置数据库防火墙规则');\n  recommendations.push('监控数据库性能指标');\n  \n  return recommendations;\n}\n\n/**\n * 加载环境变量文件\n * @param {string} filePath - .env文件路径\n * @returns {boolean} 是否成功加载\n */\nfunction loadEnvFile(filePath = '.env') {\n  try {\n    if (!fs.existsSync(filePath)) {\n      console.warn(`环境变量文件 ${filePath} 不存在`);\n      return false;\n    }\n    \n    const envContent = fs.readFileSync(filePath, 'utf8');\n    const lines = envContent.split('\\n');\n    \n    lines.forEach((line, index) => {\n      line = line.trim();\n      \n      // 跳过空行和注释\n      if (!line || line.startsWith('#')) {\n        return;\n      }\n      \n      const equalIndex = line.indexOf('=');\n      if (equalIndex === -1) {\n        console.warn(`第 ${index + 1} 行格式错误: ${line}`);\n        return;\n      }\n      \n      const key = line.substring(0, equalIndex).trim();\n      const value = line.substring(equalIndex + 1).trim();\n      \n      // 移除引号\n      const cleanValue = value.replace(/^[\"']|[\"']$/g, '');\n      \n      // 只有在环境变量未设置时才设置\n      if (!process.env[key]) {\n        process.env[key] = cleanValue;\n      }\n    });\n    \n    return true;\n  } catch (error) {\n    console.error(`加载环境变量文件失败: ${error.message}`);\n    return false;\n  }\n}\n\nmodule.exports = {\n  validateEnvVar,\n  EnvValidator,\n  validators,\n  createDatabaseValidator,\n  createAppValidator,\n  validateEnv,\n  loadEnvFile,\n  validateProductionConfig,\n  generateProductionRecommendations,\n  PRODUCTION_RULES\n};"],"mappings":"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","ignoreList":[]}