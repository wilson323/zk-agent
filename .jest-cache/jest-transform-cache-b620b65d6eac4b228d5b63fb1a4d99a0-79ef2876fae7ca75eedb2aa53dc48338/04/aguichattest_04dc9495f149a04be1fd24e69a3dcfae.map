{"file":"E:\\zk-agent\\__tests__\\api\\chat\\ag-ui-chat.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\api\\chat\\ag-ui-chat.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * AG-UI智能对话API测试\r\n * 确保智能对话API接口100%可靠\r\n */\r\n\r\nimport { NextRequest } from 'next/server'\r\nimport { POST } from '@/app/api/ag-ui/chat/route'\r\n\r\n// 模拟依赖\r\njest.mock('@/lib/auth/session-manager', () => ({\r\n  validateSession: jest.fn()\r\n}))\r\n\r\njest.mock('@/lib/ai/unified-ai-adapter', () => ({\r\n  UnifiedAIAdapter: jest.fn().mockImplementation(() => ({\r\n    chatCompletion: jest.fn(),\r\n    streamChatCompletion: jest.fn()\r\n  }))\r\n}))\r\n\r\njest.mock('@/lib/chat/context-memory-manager', () => ({\r\n  ContextMemoryManager: jest.fn().mockImplementation(() => ({\r\n    addMessage: jest.fn(),\r\n    getMessages: jest.fn().mockReturnValue([]),\r\n    getRelevantContext: jest.fn().mockReturnValue([])\r\n  }))\r\n}))\r\n\r\njest.mock('@/lib/chat/error-retry-manager', () => ({\r\n  ErrorRetryManager: jest.fn().mockImplementation(() => ({\r\n    executeWithRetry: jest.fn()\r\n  }))\r\n}))\r\n\r\ndescribe('AG-UI Chat API - 智能对话接口测试', () => {\r\n  let mockValidateSession: jest.Mock\r\n  let mockAIAdapter: any\r\n  let mockContextManager: any\r\n  let mockErrorRetryManager: any\r\n\r\n  beforeEach(() => {\r\n    // 重置所有模拟\r\n    jest.clearAllMocks()\r\n    \r\n    // 设置模拟\r\n    const { validateSession } = require('@/lib/auth/session-manager')\r\n    mockValidateSession = validateSession as jest.Mock\r\n    \r\n    const { UnifiedAIAdapter } = require('@/lib/ai/unified-ai-adapter')\r\n    mockAIAdapter = new UnifiedAIAdapter()\r\n    \r\n    const { ContextMemoryManager } = require('@/lib/chat/context-memory-manager')\r\n    mockContextManager = new ContextMemoryManager()\r\n    \r\n    const { ErrorRetryManager } = require('@/lib/chat/error-retry-manager')\r\n    mockErrorRetryManager = new ErrorRetryManager()\r\n  })\r\n\r\n  describe('请求验证测试', () => {\r\n    test('应该拒绝无效的HTTP方法', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'GET'\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(405)\r\n    })\r\n\r\n    test('应该拒绝未认证的请求', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: false, error: 'Unauthorized' })\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(401)\r\n    })\r\n\r\n    test('应该验证请求体格式', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          // 缺少必需字段\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(400)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('validation')\r\n    })\r\n\r\n    test('应该验证消息内容长度', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n      \r\n      const longMessage = 'a'.repeat(10000) // 超长消息\r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: longMessage,\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(400)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('too long')\r\n    })\r\n  })\r\n\r\n  describe('消息处理测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该正确处理简单文本消息', async () => {\r\n      const mockResponse = {\r\n        content: '你好！我是AI助手，有什么可以帮助你的吗？',\r\n        usage: { prompt_tokens: 10, completion_tokens: 20, total_tokens: 30 }\r\n      }\r\n      \r\n      mockAIAdapter.chatCompletion.mockResolvedValue(mockResponse)\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      const data = await response.json()\r\n      expect(data.content).toBe(mockResponse.content)\r\n      expect(data.usage).toEqual(mockResponse.usage)\r\n    })\r\n\r\n    test('应该正确处理多轮对话', async () => {\r\n      const conversationHistory = [\r\n        { role: 'user', content: '你好' },\r\n        { role: 'assistant', content: '你好！有什么可以帮助你的吗？' },\r\n        { role: 'user', content: '请介绍一下你的功能' }\r\n      ]\r\n      \r\n      mockContextManager.getMessages.mockReturnValue(conversationHistory.slice(0, 2))\r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '我是一个AI助手，可以帮助你解答问题、提供信息和协助完成各种任务。',\r\n        usage: { prompt_tokens: 50, completion_tokens: 30, total_tokens: 80 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '请介绍一下你的功能',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      // 验证上下文管理器被正确调用\r\n      expect(mockContextManager.getMessages).toHaveBeenCalledWith('test-session')\r\n      expect(mockContextManager.addMessage).toHaveBeenCalledTimes(2) // 用户消息和AI回复\r\n    })\r\n\r\n    test('应该正确处理流式响应', async () => {\r\n      const mockStream = {\r\n        async *[Symbol.asyncIterator]() {\r\n          yield { content: '我是' }\r\n          yield { content: 'AI助手' }\r\n          yield { content: '，很高兴为你服务！' }\r\n        }\r\n      }\r\n      \r\n      mockAIAdapter.streamChatCompletion.mockResolvedValue(mockStream)\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session',\r\n          stream: true\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      expect(response.headers.get('content-type')).toContain('text/stream')\r\n    })\r\n  })\r\n\r\n  describe('错误处理测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该正确处理AI服务错误', async () => {\r\n      const aiError = new Error('AI service unavailable')\r\n      mockAIAdapter.chatCompletion.mockRejectedValue(aiError)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(aiError)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(500)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('AI service')\r\n    })\r\n\r\n    test('应该正确处理网络超时', async () => {\r\n      const timeoutError = new Error('Request timeout')\r\n      timeoutError.name = 'TimeoutError'\r\n      \r\n      mockAIAdapter.chatCompletion.mockRejectedValue(timeoutError)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(timeoutError)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(408)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('timeout')\r\n    })\r\n\r\n    test('应该正确处理速率限制', async () => {\r\n      const rateLimitError = new Error('Rate limit exceeded')\r\n      rateLimitError.name = 'RateLimitError'\r\n      \r\n      mockAIAdapter.chatCompletion.mockRejectedValue(rateLimitError)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(rateLimitError)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(429)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('rate limit')\r\n    })\r\n  })\r\n\r\n  describe('上下文管理测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该正确管理对话上下文', async () => {\r\n      const existingMessages = [\r\n        { role: 'user', content: '你好' },\r\n        { role: 'assistant', content: '你好！有什么可以帮助你的吗？' }\r\n      ]\r\n      \r\n      mockContextManager.getMessages.mockReturnValue(existingMessages)\r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '当然可以！',\r\n        usage: { prompt_tokens: 20, completion_tokens: 10, total_tokens: 30 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你能帮我写代码吗？',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      // 验证上下文被正确传递给AI\r\n      expect(mockAIAdapter.chatCompletion).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          messages: expect.arrayContaining([\r\n            ...existingMessages,\r\n            { role: 'user', content: '你能帮我写代码吗？' }\r\n          ])\r\n        })\r\n      )\r\n    })\r\n\r\n    test('应该正确限制上下文长度', async () => {\r\n      // 模拟大量历史消息\r\n      const longHistory = Array.from({ length: 100 }, (_, i) => ({\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        content: `消息 ${i}`\r\n      }))\r\n      \r\n      mockContextManager.getMessages.mockReturnValue(longHistory)\r\n      mockContextManager.getRelevantContext.mockReturnValue(longHistory.slice(-10)) // 返回最近10条\r\n      \r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '好的，我明白了。',\r\n        usage: { prompt_tokens: 100, completion_tokens: 15, total_tokens: 115 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '总结一下我们的对话',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      // 验证使用了相关上下文而不是全部历史\r\n      expect(mockContextManager.getRelevantContext).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe('性能测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该在合理时间内响应', async () => {\r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '快速响应',\r\n        usage: { prompt_tokens: 5, completion_tokens: 5, total_tokens: 10 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const startTime = Date.now()\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '快速测试',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      const endTime = Date.now()\r\n      \r\n      expect(response.status).toBe(200)\r\n      expect(endTime - startTime).toBeLessThan(5000) // 5秒内响应\r\n    })\r\n\r\n    test('应该正确处理并发请求', async () => {\r\n      mockAIAdapter.chatCompletion.mockImplementation(async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 100)) // 模拟处理时间\r\n        return {\r\n          content: '并发响应',\r\n          usage: { prompt_tokens: 10, completion_tokens: 10, total_tokens: 20 }\r\n        }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const requests = Array.from({ length: 5 }, (_, i) => \r\n        new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            message: `并发消息 ${i}`,\r\n            sessionId: `test-session-${i}`\r\n          })\r\n        })\r\n      )\r\n\r\n      const responses = await Promise.all(requests.map(req => POST(req)))\r\n      \r\n      responses.forEach(response => {\r\n        expect(response.status).toBe(200)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('安全性测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该过滤恶意输入', async () => {\r\n      const maliciousInput = '<script>alert(\"xss\")</script>'\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: maliciousInput,\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(400)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('invalid content')\r\n    })\r\n\r\n    test('应该限制请求频率', async () => {\r\n      // 模拟快速连续请求\r\n      const requests = Array.from({ length: 10 }, () => \r\n        new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            message: '频率测试',\r\n            sessionId: 'test-session'\r\n          })\r\n        })\r\n      )\r\n\r\n      const responses = await Promise.all(requests.map(req => POST(req)))\r\n      \r\n      // 应该有一些请求被限制\r\n      const rateLimitedResponses = responses.filter(res => res.status === 429)\r\n      expect(rateLimitedResponses.length).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该验证会话所有权', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'other-user-session' // 其他用户的会话\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(403)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('access denied')\r\n    })\r\n  })\r\n\r\n  describe('监控和日志测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该记录请求日志', async () => {\r\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation()\r\n      \r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '测试响应',\r\n        usage: { prompt_tokens: 10, completion_tokens: 10, total_tokens: 20 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '日志测试',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      await POST(request)\r\n      \r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        expect.stringContaining('Chat request processed')\r\n      )\r\n      \r\n      consoleSpy.mockRestore()\r\n    })\r\n\r\n    test('应该记录错误日志', async () => {\r\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation()\r\n      \r\n      const error = new Error('测试错误')\r\n      mockAIAdapter.chatCompletion.mockRejectedValue(error)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(error)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '错误测试',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      await POST(request)\r\n      \r\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\r\n        expect.stringContaining('Chat API error'),\r\n        expect.any(Error)\r\n      )\r\n      \r\n      consoleErrorSpy.mockRestore()\r\n    })\r\n  })\r\n}) "],"version":3}