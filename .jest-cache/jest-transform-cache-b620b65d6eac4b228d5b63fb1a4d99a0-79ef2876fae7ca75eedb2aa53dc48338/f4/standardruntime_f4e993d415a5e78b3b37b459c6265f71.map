{"version":3,"names":["cov_1vrxqwm4tx","actualCoverage","s","rxjs_1","require","StandardAgUIRuntime","constructor","options","f","eventSubject","Subject","state","messages","tools","agent","executeAgent","input","threadId","runId","context","forwardedProps","emitEvent","type","timestamp","Date","now","message","role","b","processUserMessage","error","Error","code","messageId","response","callFastGPT","content","handleStreamResponse","console","delta","fetch","method","headers","body","JSON","stringify","appId","chatId","map","msg","stream","variables","ok","statusText","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","data","substring","parsed","parse","choices","tool_calls","handleToolCalls","e","releaseLock","toolCalls","parentMessageId","toolCall","toolCallId","Math","random","toolCallName","function","name","arguments","result","executeTool","toolName","args","tool","find","t","parsedArgs","success","getEventStream","asObservable","updateState","newState","snapshot","getState","event","debug","next","exports"],"sources":["E:\\zk-agent\\lib\\ag-ui\\standard-runtime.ts"],"sourcesContent":["// @ts-nocheck\nimport { type Observable, Subject } from \"rxjs\"\nimport type { BaseEvent, RunAgentInput, Tool, Message, AgentDefinition } from \"./types\"\n\n/**\n * 标准AG-UI运行时实现\n * 完全符合AG-UI协议规范\n */\nexport class StandardAgUIRuntime {\n  private eventSubject = new Subject<BaseEvent>()\n  private state: Record<string, any> = {}\n  private messages: Message[] = []\n  private tools: Tool[] = []\n  private agent: AgentDefinition | null = null\n\n  constructor(\n    private options: {\n      threadId: string\n      runId: string\n      debug?: boolean\n    },\n  ) {}\n\n  /**\n   * 执行Agent - AG-UI标准接口\n   */\n  async executeAgent(input: RunAgentInput): Promise<void> {\n    const { threadId, runId, state, messages, tools, context, forwardedProps } = input\n\n    // 发送运行开始事件\n    this.emitEvent({\n      type: \"RUN_STARTED\",\n      threadId,\n      runId,\n      timestamp: Date.now(),\n    })\n\n    try {\n      // 更新状态\n      this.state = { ...this.state, ...state }\n      this.messages = messages\n      this.tools = tools\n\n      // 处理消息\n      for (const message of messages) {\n        if (message.role === \"user\") {\n          await this.processUserMessage(message)\n        }\n      }\n\n      // 发送运行完成事件\n      this.emitEvent({\n        type: \"RUN_FINISHED\",\n        threadId,\n        runId,\n        timestamp: Date.now(),\n      })\n    } catch (error) {\n      // 发送错误事件\n      this.emitEvent({\n        type: \"RUN_ERROR\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        code: 500,\n        timestamp: Date.now(),\n      })\n    }\n  }\n\n  /**\n   * 处理用户消息\n   */\n  private async processUserMessage(message: Message): Promise<void> {\n    const messageId = `msg-${Date.now()}`\n\n    // 发送消息开始事件\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_START\",\n      messageId,\n      role: \"assistant\",\n      timestamp: Date.now(),\n    })\n\n    // 调用FastGPT API\n    try {\n      const response = await this.callFastGPT(message.content)\n\n      // 处理流式响应\n      await this.handleStreamResponse(response, messageId)\n    } catch (error) {\n      console.error(\"Error calling FastGPT:\", error)\n\n      // 发送错误消息\n      this.emitEvent({\n        type: \"TEXT_MESSAGE_CONTENT\",\n        messageId,\n        delta: \"Sorry, I encountered an error processing your request.\",\n        timestamp: Date.now(),\n      })\n    }\n\n    // 发送消息结束事件\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_END\",\n      messageId,\n      timestamp: Date.now(),\n    })\n  }\n\n  /**\n   * 调用FastGPT API\n   */\n  private async callFastGPT(content: string): Promise<ReadableStream> {\n    const response = await fetch(\"/api/fastgpt/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        appId: this.state.appId,\n        chatId: this.state.chatId,\n        messages: [\n          ...this.messages.map((msg) => ({\n            role: msg.role,\n            content: msg.content,\n          })),\n          { role: \"user\", content },\n        ],\n        stream: true,\n        variables: this.state.variables,\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`FastGPT API error: ${response.statusText}`)\n    }\n\n    return response.body!\n  }\n\n  /**\n   * 处理流式响应\n   */\n  private async handleStreamResponse(stream: ReadableStream, messageId: string): Promise<void> {\n    const reader = stream.getReader()\n    const decoder = new TextDecoder()\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read()\n\n        if (done) break\n\n        const chunk = decoder.decode(value, { stream: true })\n        const lines = chunk.split(\"\\n\")\n\n        for (const line of lines) {\n          if (line.startsWith(\"data: \")) {\n            const data = line.substring(6)\n\n            if (data === \"[DONE]\") continue\n\n            try {\n              const parsed = JSON.parse(data)\n\n              if (parsed.choices?.[0]?.delta?.content) {\n                // 发送文本内容事件\n                this.emitEvent({\n                  type: \"TEXT_MESSAGE_CONTENT\",\n                  messageId,\n                  delta: parsed.choices[0].delta.content,\n                  timestamp: Date.now(),\n                })\n              }\n\n              // 处理工具调用\n              if (parsed.choices?.[0]?.delta?.tool_calls) {\n                await this.handleToolCalls(parsed.choices[0].delta.tool_calls, messageId)\n              }\n            } catch (e) {\n              console.error(\"Error parsing SSE data:\", e)\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  }\n\n  /**\n   * 处理工具调用\n   */\n  private async handleToolCalls(toolCalls: any[], parentMessageId: string): Promise<void> {\n    for (const toolCall of toolCalls) {\n      const toolCallId = `tool-${Date.now()}-${Math.random()}`\n\n      // 发送工具调用开始事件\n      this.emitEvent({\n        type: \"TOOL_CALL_START\",\n        toolCallId,\n        toolCallName: toolCall.function?.name || \"unknown\",\n        parentMessageId,\n        timestamp: Date.now(),\n      })\n\n      // 发送工具调用参数事件\n      if (toolCall.function?.arguments) {\n        this.emitEvent({\n          type: \"TOOL_CALL_ARGS\",\n          toolCallId,\n          delta: toolCall.function.arguments,\n          timestamp: Date.now(),\n        })\n      }\n\n      // 执行工具\n      try {\n        const result = await this.executeTool(toolCall.function?.name, toolCall.function?.arguments)\n\n        // 发送工具调用结果（可以通过自定义事件）\n        this.emitEvent({\n          type: \"CUSTOM\",\n          name: \"tool_call_result\",\n          value: {\n            toolCallId,\n            result,\n          },\n          timestamp: Date.now(),\n        })\n      } catch (error) {\n        console.error(\"Tool execution error:\", error)\n      }\n\n      // 发送工具调用结束事件\n      this.emitEvent({\n        type: \"TOOL_CALL_END\",\n        toolCallId,\n        timestamp: Date.now(),\n      })\n    }\n  }\n\n  /**\n   * 执行工具\n   */\n  private async executeTool(toolName: string, args: string): Promise<any> {\n    const tool = this.tools.find((t) => t.name === toolName)\n\n    if (!tool) {\n      throw new Error(`Tool not found: ${toolName}`)\n    }\n\n    // 解析参数\n    let parsedArgs: any = {}\n    try {\n      parsedArgs = JSON.parse(args)\n    } catch (e) {\n      console.error(\"Error parsing tool arguments:\", e)\n    }\n\n    // 这里应该调用实际的工具执行逻辑\n    // 暂时返回模拟结果\n    return {\n      success: true,\n      result: `Tool ${toolName} executed with args: ${args}`,\n    }\n  }\n\n  /**\n   * 获取事件流\n   */\n  getEventStream(): Observable<BaseEvent> {\n    return this.eventSubject.asObservable()\n  }\n\n  /**\n   * 更新状态\n   */\n  updateState(newState: Record<string, any>): void {\n    this.state = { ...this.state, ...newState }\n\n    // 发送状态快照事件\n    this.emitEvent({\n      type: \"STATE_SNAPSHOT\",\n      snapshot: this.state,\n      timestamp: Date.now(),\n    })\n  }\n\n  /**\n   * 获取当前状态\n   */\n  getState(): Record<string, any> {\n    return { ...this.state }\n  }\n\n  /**\n   * 发送事件\n   */\n  private emitEvent(event: BaseEvent): void {\n    if (this.options.debug) {\n      console.debug(\"AG-UI Event:\", event)\n    }\n    this.eventSubject.next(event)\n  }\n}\n"],"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","ignoreList":[]}