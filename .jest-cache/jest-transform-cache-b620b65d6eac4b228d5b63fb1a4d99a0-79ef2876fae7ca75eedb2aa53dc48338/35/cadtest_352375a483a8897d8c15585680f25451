b8b3ed3661123d4540bd33e58bb3a148
"use strict";
/**
 * @file cad.test.ts
 * @description CAD分析相关API路由错误处理测试
 * @author ZK-Agent Team
 * @date 2025-01-27
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock CAD analyzer
globals_1.jest.mock('@/lib/cad/analyzer', () => ({
    analyzeCADFile: globals_1.jest.fn()
}));
// Mock storage service
globals_1.jest.mock('@/lib/storage/file-storage', () => ({
    uploadFile: globals_1.jest.fn()
}));
const server_1 = require("next/server");
const route_1 = require("@/app/api/cad/upload/route");
const route_2 = require("@/app/api/cad/analyze/route");
const route_3 = require("@/app/api/cad/history/route");
const route_4 = require("@/app/api/cad/statistics/route");
const route_5 = require("@/app/api/cad/export/route");
const global_error_handler_1 = require("@/lib/middleware/global-error-handler");
// Mock upload-enhanced handler since it doesn't exist
const uploadEnhancedHandler = globals_1.jest.fn();
(0, globals_1.describe)('CAD API Routes Error Handling', () => {
    let errorHandler;
    (0, globals_1.beforeEach)(() => {
        errorHandler = global_error_handler_1.GlobalErrorHandler.getInstance();
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        // 清理测试状态
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Upload Route (/api/cad/upload)', () => {
        (0, globals_1.it)('should handle missing file error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/upload', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('VALIDATION_ERROR');
            (0, globals_1.expect)(data.error).toContain('file');
        });
        (0, globals_1.it)('should handle unsupported file format error', async () => {
            const formData = new FormData();
            const file = new File(['test content'], 'test.txt', { type: 'text/plain' });
            formData.append('file', file);
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/upload', {
                method: 'POST',
                body: formData
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('VALIDATION_ERROR');
            (0, globals_1.expect)(data.error).toContain('format');
        });
        (0, globals_1.it)('should handle file size limit exceeded error', async () => {
            const formData = new FormData();
            // Create a large file (simulate > 100MB)
            const largeContent = 'x'.repeat(100 * 1024 * 1024 + 1);
            const file = new File([largeContent], 'large.dwg', { type: 'application/dwg' });
            formData.append('file', file);
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/upload', {
                method: 'POST',
                body: formData
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(413);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('FILE_TOO_LARGE');
        });
        (0, globals_1.it)('should handle corrupted file error', async () => {
            const formData = new FormData();
            const file = new File(['corrupted data'], 'corrupted.dwg', { type: 'application/dwg' });
            formData.append('file', file);
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/upload', {
                method: 'POST',
                body: formData
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('FILE_CORRUPTED');
        });
        (0, globals_1.it)('should handle storage quota exceeded error', async () => {
            // Mock storage service to simulate quota exceeded
            const { uploadFile } = require('@/lib/storage/file-storage');
            uploadFile.mockRejectedValue(new Error('Storage quota exceeded'));
            const formData = new FormData();
            const file = new File(['test content'], 'test.dwg', { type: 'application/dwg' });
            formData.append('file', file);
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/upload', {
                method: 'POST',
                body: formData
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(507);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('STORAGE_QUOTA_EXCEEDED');
        });
    });
    (0, globals_1.describe)('Analyze Route (/api/cad/analyze)', () => {
        (0, globals_1.it)('should handle missing file ID error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, globals_1.it)('should handle file not found error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fileId: 'non-existent-file-id'
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(404);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('FILE_NOT_FOUND');
        });
        (0, globals_1.it)('should handle analysis timeout error', async () => {
            // Mock analysis service to simulate timeout
            const { analyzeCADFile } = require('@/lib/cad/analyzer');
            analyzeCADFile.mockImplementation(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Analysis timeout')), 100)));
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fileId: 'valid-file-id'
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(504);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('ANALYSIS_TIMEOUT');
        });
        (0, globals_1.it)('should handle insufficient memory error', async () => {
            // Mock analysis service to simulate memory error
            const { analyzeCADFile } = require('@/lib/cad/analyzer');
            analyzeCADFile.mockRejectedValue(new Error('Insufficient memory'));
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fileId: 'large-file-id'
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(507);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('INSUFFICIENT_MEMORY');
        });
        (0, globals_1.it)('should handle concurrent analysis limit error', async () => {
            // Mock analysis service to simulate concurrent limit
            const { analyzeCADFile } = require('@/lib/cad/analyzer');
            analyzeCADFile.mockRejectedValue(new Error('Too many concurrent analyses'));
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fileId: 'valid-file-id'
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(429);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('TOO_MANY_REQUESTS');
        });
    });
    (0, globals_1.describe)('History Route (/api/cad/history)', () => {
        (0, globals_1.it)('should handle unauthorized access error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/history', {
                method: 'GET'
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(401);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('AUTHENTICATION_ERROR');
        });
        (0, globals_1.it)('should handle invalid pagination parameters error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/history?page=-1&limit=0', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer valid_token'
                }
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, globals_1.it)('should handle database query timeout error', async () => {
            // Mock database to simulate timeout
            const db = require('@/lib/database/connection').default;
            db.cadAnalysis.findMany.mockRejectedValue(new Error('Query timeout'));
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/history', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer valid_token'
                }
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(504);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('DATABASE_TIMEOUT');
        });
    });
    (0, globals_1.describe)('Statistics Route (/api/cad/statistics)', () => {
        (0, globals_1.it)('should handle invalid date range error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/statistics?startDate=invalid&endDate=invalid', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer valid_token'
                }
            });
            const response = await (0, route_4.GET)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, globals_1.it)('should handle date range too large error', async () => {
            const startDate = '2020-01-01';
            const endDate = '2025-12-31';
            const request = new server_1.NextRequest(`http://localhost:3000/api/cad/statistics?startDate=${startDate}&endDate=${endDate}`, {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer valid_token'
                }
            });
            const response = await (0, route_4.GET)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('DATE_RANGE_TOO_LARGE');
        });
    });
    (0, globals_1.describe)('Export Route (/api/cad/export)', () => {
        (0, globals_1.it)('should handle missing analysis ID error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/export', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });
            const response = await (0, route_5.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, globals_1.it)('should handle unsupported export format error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/export', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    analysisId: 'valid-analysis-id',
                    format: 'unsupported-format'
                })
            });
            const response = await (0, route_5.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('UNSUPPORTED_FORMAT');
        });
        (0, globals_1.it)('should handle export generation failure error', async () => {
            // Mock export service to simulate failure
            globals_1.jest.mock('@/lib/cad/exporter', () => ({
                generateExport: globals_1.jest.fn().mockRejectedValue(new Error('Export generation failed'))
            }));
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/export', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    analysisId: 'valid-analysis-id',
                    format: 'pdf'
                })
            });
            const response = await (0, route_5.POST)(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(500);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('EXPORT_GENERATION_FAILED');
        });
    });
    (0, globals_1.describe)('Upload Enhanced Route (/api/cad/upload-enhanced)', () => {
        (0, globals_1.it)('should handle missing preprocessing options error', async () => {
            const formData = new FormData();
            const file = new File(['test content'], 'test.dwg', { type: 'application/dwg' });
            formData.append('file', file);
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/upload-enhanced', {
                method: 'POST',
                body: formData
            });
            const response = await uploadEnhancedHandler(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, globals_1.it)('should handle preprocessing failure error', async () => {
            // Mock preprocessing service to simulate failure
            const { preprocessCADFile } = require('@/lib/cad/preprocessor');
            preprocessCADFile.mockRejectedValue(new Error('Preprocessing failed'));
            const formData = new FormData();
            const file = new File(['test content'], 'test.dwg', { type: 'application/dwg' });
            formData.append('file', file);
            formData.append('options', JSON.stringify({ autoFix: true, optimize: true }));
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/upload-enhanced', {
                method: 'POST',
                body: formData
            });
            const response = await uploadEnhancedHandler(request);
            const data = await response.json();
            (0, globals_1.expect)(response.status).toBe(500);
            (0, globals_1.expect)(data.error).toBeDefined();
            (0, globals_1.expect)(data.code).toBe('PREPROCESSING_FAILED');
        });
    });
    (0, globals_1.describe)('Error Recovery and Resilience', () => {
        (0, globals_1.it)('should implement retry logic for transient failures', async () => {
            globals_1.jest.mock('@/lib/cad/analyzer', () => ({
                analyzeCADFile: globals_1.jest.fn().mockImplementation(() => {
                    callCount++;
                    if (callCount < 3) {
                        return Promise.reject(new Error('Transient failure'));
                    }
                    return Promise.resolve({ success: true, results: {} });
                })
            }));
            let callCount = 0;
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fileId: 'valid-file-id'
                })
            });
            const response = await (0, route_2.POST)(request);
            (0, globals_1.expect)(callCount).toBe(3);
            (0, globals_1.expect)(response.status).toBe(200);
        });
        (0, globals_1.it)('should gracefully degrade when analysis service is unavailable', async () => {
            // Mock persistent service failure
            const { analyzeCADFile } = require('@/lib/cad/analyzer');
            analyzeCADFile.mockRejectedValue(new Error('Service unavailable'));
            const request = new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fileId: 'valid-file-id'
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            // Should return basic analysis instead of complete failure
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.degraded).toBe(true);
        });
    });
    (0, globals_1.describe)('Circuit Breaker Integration', () => {
        (0, globals_1.it)('should track CAD analysis errors in global error handler', async () => {
            // Mock analysis failures
            const { analyzeCADFile } = require('@/lib/cad/analyzer');
            analyzeCADFile.mockRejectedValue(new Error('Analysis failed'));
            const requests = Array(5).fill(null).map(() => new server_1.NextRequest('http://localhost:3000/api/cad/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ fileId: 'test-file-id' })
            }));
            for (const request of requests) {
                await (0, route_2.POST)(request).catch(() => { });
            }
            const stats = errorHandler.getErrorStats();
            (0, globals_1.expect)(stats.errorCount).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,