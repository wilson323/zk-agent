{"version":3,"names":["describe","test","message","id","content","role","timestamp","Date","now","expect","toBeDefined","toBe","validMessage","toBeTruthy","userMessage","assistantMessage","systemMessage","sessionId1","Math","random","toString","substring","sessionId2","not","startsWith","session","userId","createdAt","lastActivity","messageCount","status","emptyMessage","isValid","trim","length","longContent","repeat","maxLength","toBeGreaterThan","validRoles","invalidRole","includes","conversationHistory","push","toHaveLength","maxMessages","messages","Array","from","_","i","limitedMessages","slice","safeMessage","unsafeMessage","containsScript","toLowerCase","sensitiveWords","containsSensitive","some","word","startTime","processedMessage","processed","processingTime","endTime","toBeLessThan","processedMessages","map","msg","every","messageSchema","sessionId","testMessage","Object","keys","forEach","key","toHaveProperty","sessionSchema","testSession","generateId","id1","id2","date","getTime"],"sources":["chat-basic.test.js"],"sourcesContent":["/**\r\n * 智能对话基础功能测试\r\n * 确保智能对话核心功能100%可靠\r\n */\r\n\r\ndescribe('智能对话基础功能测试', () => {\r\n  \r\n  describe('消息处理测试', () => {\r\n    test('应该正确处理简单文本消息', () => {\r\n      const message = {\r\n        id: 'msg-1',\r\n        content: '你好',\r\n        role: 'user',\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      expect(message).toBeDefined()\r\n      expect(message.content).toBe('你好')\r\n      expect(message.role).toBe('user')\r\n      expect(typeof message.timestamp).toBe('number')\r\n    })\r\n\r\n    test('应该正确验证消息格式', () => {\r\n      const validMessage = {\r\n        id: 'msg-1',\r\n        content: '测试消息',\r\n        role: 'user',\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      // 验证必需字段\r\n      expect(validMessage.id).toBeTruthy()\r\n      expect(validMessage.content).toBeTruthy()\r\n      expect(validMessage.role).toBeTruthy()\r\n      expect(validMessage.timestamp).toBeTruthy()\r\n      \r\n      // 验证字段类型\r\n      expect(typeof validMessage.id).toBe('string')\r\n      expect(typeof validMessage.content).toBe('string')\r\n      expect(typeof validMessage.role).toBe('string')\r\n      expect(typeof validMessage.timestamp).toBe('number')\r\n    })\r\n\r\n    test('应该正确处理多种角色的消息', () => {\r\n      const userMessage = { role: 'user', content: '用户消息' }\r\n      const assistantMessage = { role: 'assistant', content: 'AI回复' }\r\n      const systemMessage = { role: 'system', content: '系统消息' }\r\n      \r\n      expect(userMessage.role).toBe('user')\r\n      expect(assistantMessage.role).toBe('assistant')\r\n      expect(systemMessage.role).toBe('system')\r\n    })\r\n  })\r\n\r\n  describe('会话管理测试', () => {\r\n    test('应该正确生成会话ID', () => {\r\n      const sessionId1 = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\r\n      const sessionId2 = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\r\n      \r\n      expect(sessionId1).toBeTruthy()\r\n      expect(sessionId2).toBeTruthy()\r\n      expect(sessionId1).not.toBe(sessionId2)\r\n      expect(sessionId1.startsWith('session_')).toBe(true)\r\n    })\r\n\r\n    test('应该正确管理会话状态', () => {\r\n      const session = {\r\n        id: 'test-session',\r\n        userId: 'user-1',\r\n        createdAt: Date.now(),\r\n        lastActivity: Date.now(),\r\n        messageCount: 0,\r\n        status: 'active'\r\n      }\r\n      \r\n      expect(session.id).toBe('test-session')\r\n      expect(session.userId).toBe('user-1')\r\n      expect(session.status).toBe('active')\r\n      expect(session.messageCount).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe('错误处理测试', () => {\r\n    test('应该正确处理空消息', () => {\r\n      const emptyMessage = { content: '' }\r\n      const isValid = emptyMessage.content && emptyMessage.content.trim().length > 0\r\n      \r\n      expect(isValid).toBe(false)\r\n    })\r\n\r\n    test('应该正确处理超长消息', () => {\r\n      const longContent = 'a'.repeat(10000)\r\n      const maxLength = 5000\r\n      const isValid = longContent.length <= maxLength\r\n      \r\n      expect(isValid).toBe(false)\r\n      expect(longContent.length).toBeGreaterThan(maxLength)\r\n    })\r\n\r\n    test('应该正确处理无效角色', () => {\r\n      const validRoles = ['user', 'assistant', 'system']\r\n      const invalidRole = 'invalid'\r\n      \r\n      expect(validRoles.includes(invalidRole)).toBe(false)\r\n      expect(validRoles.includes('user')).toBe(true)\r\n      expect(validRoles.includes('assistant')).toBe(true)\r\n      expect(validRoles.includes('system')).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('上下文管理测试', () => {\r\n    test('应该正确管理对话历史', () => {\r\n      const conversationHistory = []\r\n      \r\n      // 添加消息\r\n      conversationHistory.push({\r\n        role: 'user',\r\n        content: '你好',\r\n        timestamp: Date.now()\r\n      })\r\n      \r\n      conversationHistory.push({\r\n        role: 'assistant',\r\n        content: '你好！有什么可以帮助你的吗？',\r\n        timestamp: Date.now() + 1000\r\n      })\r\n      \r\n      expect(conversationHistory).toHaveLength(2)\r\n      expect(conversationHistory[0].role).toBe('user')\r\n      expect(conversationHistory[1].role).toBe('assistant')\r\n    })\r\n\r\n    test('应该正确限制上下文长度', () => {\r\n      const maxMessages = 10\r\n      const messages = Array.from({ length: 15 }, (_, i) => ({\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        content: `消息 ${i}`,\r\n        timestamp: Date.now() + i * 1000\r\n      }))\r\n      \r\n      // 模拟限制上下文长度\r\n      const limitedMessages = messages.slice(-maxMessages)\r\n      \r\n      expect(limitedMessages).toHaveLength(maxMessages)\r\n      expect(limitedMessages[0].content).toBe('消息 5')\r\n      expect(limitedMessages[9].content).toBe('消息 14')\r\n    })\r\n  })\r\n\r\n  describe('消息验证测试', () => {\r\n    test('应该正确验证消息内容安全性', () => {\r\n      const safeMessage = '这是一条安全的消息'\r\n      const unsafeMessage = '<script>alert(\"xss\")</script>'\r\n      \r\n      // 简单的XSS检测\r\n      const containsScript = (content) => {\r\n        return content.toLowerCase().includes('<script') || \r\n               content.toLowerCase().includes('javascript:') ||\r\n               content.toLowerCase().includes('onclick=')\r\n      }\r\n      \r\n      expect(containsScript(safeMessage)).toBe(false)\r\n      expect(containsScript(unsafeMessage)).toBe(true)\r\n    })\r\n\r\n    test('应该正确过滤敏感内容', () => {\r\n      const sensitiveWords = ['密码', 'password', '身份证']\r\n      const message = '请告诉我你的密码'\r\n      \r\n      const containsSensitive = sensitiveWords.some(word => \r\n        message.toLowerCase().includes(word.toLowerCase())\r\n      )\r\n      \r\n      expect(containsSensitive).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('性能测试', () => {\r\n    test('应该在合理时间内处理消息', () => {\r\n      const startTime = Date.now()\r\n      \r\n      // 模拟消息处理\r\n      const message = {\r\n        id: `msg_${Date.now()}`,\r\n        content: '性能测试消息',\r\n        role: 'user',\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      // 简单的处理逻辑\r\n      const processedMessage = {\r\n        ...message,\r\n        processed: true,\r\n        processingTime: Date.now() - startTime\r\n      }\r\n      \r\n      const endTime = Date.now()\r\n      const processingTime = endTime - startTime\r\n      \r\n      expect(processingTime).toBeLessThan(100) // 100ms内完成\r\n      expect(processedMessage.processed).toBe(true)\r\n    })\r\n\r\n    test('应该正确处理并发消息', () => {\r\n      const messages = Array.from({ length: 100 }, (_, i) => ({\r\n        id: `msg_${i}`,\r\n        content: `并发消息 ${i}`,\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        timestamp: Date.now() + i\r\n      }))\r\n      \r\n      // 模拟并发处理\r\n      const processedMessages = messages.map(msg => ({\r\n        ...msg,\r\n        processed: true\r\n      }))\r\n      \r\n      expect(processedMessages).toHaveLength(100)\r\n      expect(processedMessages.every(msg => msg.processed)).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('数据结构测试', () => {\r\n    test('应该正确定义消息数据结构', () => {\r\n      const messageSchema = {\r\n        id: 'string',\r\n        content: 'string',\r\n        role: 'string',\r\n        timestamp: 'number',\r\n        sessionId: 'string'\r\n      }\r\n      \r\n      const testMessage = {\r\n        id: 'msg-1',\r\n        content: '测试消息',\r\n        role: 'user',\r\n        timestamp: Date.now(),\r\n        sessionId: 'session-1'\r\n      }\r\n      \r\n      // 验证数据结构\r\n      Object.keys(messageSchema).forEach(key => {\r\n        expect(testMessage).toHaveProperty(key)\r\n        expect(typeof testMessage[key]).toBe(messageSchema[key])\r\n      })\r\n    })\r\n\r\n    test('应该正确定义会话数据结构', () => {\r\n      const sessionSchema = {\r\n        id: 'string',\r\n        userId: 'string',\r\n        createdAt: 'number',\r\n        lastActivity: 'number',\r\n        messageCount: 'number',\r\n        status: 'string'\r\n      }\r\n      \r\n      const testSession = {\r\n        id: 'session-1',\r\n        userId: 'user-1',\r\n        createdAt: Date.now(),\r\n        lastActivity: Date.now(),\r\n        messageCount: 5,\r\n        status: 'active'\r\n      }\r\n      \r\n      // 验证数据结构\r\n      Object.keys(sessionSchema).forEach(key => {\r\n        expect(testSession).toHaveProperty(key)\r\n        expect(typeof testSession[key]).toBe(sessionSchema[key])\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('工具函数测试', () => {\r\n    test('应该正确生成唯一ID', () => {\r\n      const generateId = () => `${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\r\n      \r\n      const id1 = generateId()\r\n      const id2 = generateId()\r\n      \r\n      expect(id1).toBeTruthy()\r\n      expect(id2).toBeTruthy()\r\n      expect(id1).not.toBe(id2)\r\n    })\r\n\r\n    test('应该正确格式化时间戳', () => {\r\n      const timestamp = Date.now()\r\n      const date = new Date(timestamp)\r\n      \r\n      expect(date.getTime()).toBe(timestamp)\r\n      expect(date instanceof Date).toBe(true)\r\n    })\r\n\r\n    test('应该正确计算消息长度', () => {\r\n      const message = '这是一条测试消息'\r\n      const length = message.length\r\n      \r\n      expect(length).toBe(8)\r\n      expect(typeof length).toBe('number')\r\n    })\r\n  })\r\n}) "],"mappings":"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","ignoreList":[]}