{"version":3,"names":["cov_2lbdklyl7y","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","recordMetrics","_metrics","Promise","resolve","recordToRedis","exports","POST","createApiRoute","RouteConfigs","protectedPost","req","params","validatedBody","validatedQuery","user","requestId","metrics","_validatedBody","ApiResponseWrapper","success","message","timestamp","Date","toISOString","error","console"],"sources":["E:\\zk-agent\\app\\api\\metrics\\record\\route.ts"],"sourcesContent":["/**\n * @file metrics\\record\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\n// Mock functions for demonstration\nasync function recordMetrics(_metrics: any) {\n  // In a real application, this would save metrics to a database\n  return Promise.resolve(true);\n}\n\nasync function recordToRedis(_metrics: any) {\n  // In a real application, this would save metrics to Redis\n  return Promise.resolve(true);\n}\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const metrics = _validatedBody;\n      \n      // Record metrics to database\n      await recordMetrics(metrics);\n      \n      // Record metrics to Redis for real-time analytics\n      await recordToRedis(metrics);\n      \n      return ApiResponseWrapper.success({\n        message: 'Metrics recorded successfully',\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Error recording metrics:', error);\n      return ApiResponseWrapper.error('Failed to record metrics', 500);\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}