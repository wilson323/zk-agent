{"file":"E:\\zk-agent\\__tests__\\lib\\database\\enhanced-database-manager.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\database\\enhanced-database-manager.test.ts"],"sourcesContent":["/**\n * Enhanced Database Manager 测试\n * 测试lib/database/enhanced-database-manager.ts中的所有功能\n */\n\nimport { EnhancedDatabaseManager } from '@/lib/database/enhanced-database-manager'\nimport { PrismaClient } from '@prisma/client'\nimport { Logger } from '@/lib/logger'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\n\n// Mock Logger\njest.mock('@/lib/logger')\n\n// Mock fetch for external API calls\nglobal.fetch = jest.fn()\n\nconst mockPrismaInstance = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $transaction: jest.fn(),\n  $queryRaw: jest.fn(),\n  $executeRaw: jest.fn(),\n  user: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  post: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n}\n\nconst mockLogger = {\n  info: jest.fn(),\n  error: jest.fn(),\n  warn: jest.fn(),\n  debug: jest.fn(),\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrismaInstance as any)\n;(Logger as jest.MockedClass<typeof Logger>).mockImplementation(() => mockLogger as any)\n\n// Helper function to execute queries\nconst executeQuery = async (queryFn: () => Promise<any>) => {\n  return await queryFn()\n}\n\ndescribe('EnhancedDatabaseManager', () => {\n  let dbManager: EnhancedDatabaseManager\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Reset singleton instance\n    ;(EnhancedDatabaseManager as any).instance = null\n    dbManager = EnhancedDatabaseManager.getInstance()\n  })\n\n  afterEach(async () => {\n    await dbManager.disconnect()\n  })\n\n  describe('单例模式', () => {\n    it('应该返回相同的实例', () => {\n      const instance1 = EnhancedDatabaseManager.getInstance()\n      const instance2 = EnhancedDatabaseManager.getInstance()\n      expect(instance1).toBe(instance2)\n    })\n  })\n\n  describe('初始化', () => {\n    it('应该成功初始化数据库连接', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      \n      await dbManager.initialize()\n      \n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n      expect(mockLogger.info).toHaveBeenCalledWith('数据库连接已建立')\n    })\n\n    it('应该处理初始化错误', async () => {\n      const error = new Error('连接失败')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n      \n      await expect(dbManager.initialize()).rejects.toThrow('连接失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('数据库初始化失败:', error)\n    })\n  })\n\n  describe('事务执行', () => {\n    it('应该成功执行事务', async () => {\n      const mockResult = { id: 1, name: 'test' }\n      mockPrismaInstance.$transaction.mockResolvedValue(mockResult)\n      \n      const transactionFn = jest.fn().mockResolvedValue(mockResult)\n      const result = await dbManager.executeTransaction(transactionFn)\n      \n      expect(result).toEqual(mockResult)\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalledWith(transactionFn)\n    })\n\n    it('应该处理事务错误', async () => {\n      const error = new Error('事务失败')\n      mockPrismaInstance.$transaction.mockRejectedValue(error)\n      \n      const transactionFn = jest.fn()\n      await expect(dbManager.executeTransaction(transactionFn)).rejects.toThrow('事务失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('事务执行失败:', error)\n    })\n  })\n\n  describe('查询执行', () => {\n    it('应该成功执行查询', async () => {\n      const mockResult = [{ id: 1, name: 'test' }]\n      const queryFn = jest.fn().mockResolvedValue(mockResult)\n      \n      const result = await dbManager.executeQuery(queryFn)\n      \n      expect(result).toEqual(mockResult)\n      expect(queryFn).toHaveBeenCalled()\n    })\n\n    it('应该处理查询错误', async () => {\n      const error = new Error('查询失败')\n      const queryFn = jest.fn().mockRejectedValue(error)\n      \n      await expect(dbManager.executeQuery(queryFn)).rejects.toThrow('查询失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('查询执行失败:', error)\n    })\n  })\n\n  describe('健康检查', () => {\n    it('应该返回健康状态', async () => {\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ result: 1 }])\n      \n      const health = await dbManager.healthCheck()\n      \n      expect(health.status).toBe('healthy')\n      expect(health.timestamp).toBeDefined()\n      expect(mockPrismaInstance.$queryRaw).toHaveBeenCalledWith`SELECT 1 as result`\n    })\n\n    it('应该处理健康检查错误', async () => {\n      const error = new Error('健康检查失败')\n      mockPrismaInstance.$queryRaw.mockRejectedValue(error)\n      \n      const health = await dbManager.healthCheck()\n      \n      expect(health.status).toBe('unhealthy')\n      expect(health.error).toBe('健康检查失败')\n    })\n  })\n\n  describe('批量操作', () => {\n    it('应该成功执行批量创建', async () => {\n      const mockData = [{ name: 'test1' }, { name: 'test2' }]\n      const mockResult = [{ id: 1, name: 'test1' }, { id: 2, name: 'test2' }]\n      \n      mockPrismaInstance.$transaction.mockImplementation(async (operations) => {\n        return await Promise.all(operations.map(() => mockResult[0]))\n      })\n      \n      const result = await dbManager.batchCreate('user', mockData)\n      \n      expect(result).toBeDefined()\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n    })\n\n    it('应该成功执行批量更新', async () => {\n      const mockUpdates = [{ id: 1, name: 'updated1' }, { id: 2, name: 'updated2' }]\n      \n      mockPrismaInstance.$transaction.mockImplementation(async (operations) => {\n        return await Promise.all(operations.map(() => ({ count: 1 })))\n      })\n      \n      const result = await dbManager.batchUpdate('user', mockUpdates)\n      \n      expect(result).toBeDefined()\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n    })\n\n    it('应该成功执行批量删除', async () => {\n      const mockIds = [1, 2, 3]\n      \n      mockPrismaInstance.$transaction.mockImplementation(async (operations) => {\n        return await Promise.all(operations.map(() => ({ count: 1 })))\n      })\n      \n      const result = await dbManager.batchDelete('user', mockIds)\n      \n      expect(result).toBeDefined()\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n    })\n  })\n\n  describe('查询分析', () => {\n    it('应该返回查询分析数据', () => {\n      const analytics = dbManager.getQueryAnalytics()\n      \n      expect(analytics).toBeDefined()\n      expect(analytics.totalQueries).toBeDefined()\n      expect(analytics.averageExecutionTime).toBeDefined()\n      expect(analytics.slowQueries).toBeDefined()\n    })\n\n    it('应该重置查询分析数据', () => {\n      dbManager.resetQueryAnalytics()\n      \n      const analytics = dbManager.getQueryAnalytics()\n      expect(analytics.totalQueries).toBe(0)\n      expect(analytics.averageExecutionTime).toBe(0)\n      expect(analytics.slowQueries).toHaveLength(0)\n    })\n  })\n\n  describe('连接池管理', () => {\n    it('应该返回连接池状态', () => {\n      const poolStatus = dbManager.getConnectionPoolStatus()\n      \n      expect(poolStatus).toBeDefined()\n      expect(poolStatus.activeConnections).toBeDefined()\n      expect(poolStatus.idleConnections).toBeDefined()\n      expect(poolStatus.totalConnections).toBeDefined()\n    })\n  })\n\n  describe('缓存管理', () => {\n    it('应该设置和获取缓存', () => {\n      const key = 'test-key'\n      const value = { data: 'test' }\n      \n      dbManager.setCache(key, value)\n      const cachedValue = dbManager.getCache(key)\n      \n      expect(cachedValue).toEqual(value)\n    })\n\n    it('应该清除缓存', () => {\n      const key = 'test-key'\n      const value = { data: 'test' }\n      \n      dbManager.setCache(key, value)\n      dbManager.clearCache(key)\n      const cachedValue = dbManager.getCache(key)\n      \n      expect(cachedValue).toBeNull()\n    })\n\n    it('应该清除所有缓存', () => {\n      dbManager.setCache('key1', 'value1')\n      dbManager.setCache('key2', 'value2')\n      \n      dbManager.clearAllCache()\n      \n      expect(dbManager.getCache('key1')).toBeNull()\n      expect(dbManager.getCache('key2')).toBeNull()\n    })\n  })\n\n  describe('优雅关闭', () => {\n    it('应该优雅地断开数据库连接', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n      \n      await dbManager.disconnect()\n      \n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(mockLogger.info).toHaveBeenCalledWith('数据库连接已断开')\n    })\n\n    it('应该处理断开连接时的错误', async () => {\n      const error = new Error('断开连接失败')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n      \n      await dbManager.disconnect()\n      \n      expect(mockLogger.error).toHaveBeenCalledWith('断开数据库连接时发生错误:', error)\n    })\n  })\n\n  describe('Prisma客户端访问', () => {\n    it('应该提供对Prisma客户端的访问', () => {\n      const prismaClient = dbManager.getPrismaClient()\n      \n      expect(prismaClient).toBeDefined()\n      expect(prismaClient).toBe(mockPrismaInstance)\n    })\n  })\n\n  describe('性能测试', () => {\n    it('应该在合理时间内完成查询', async () => {\n      const startTime = Date.now()\n      const queryFn = jest.fn().mockResolvedValue({ id: 1 })\n      \n      await dbManager.executeQuery(queryFn)\n      \n      const endTime = Date.now()\n      const executionTime = endTime - startTime\n      \n      expect(executionTime).toBeLessThan(1000) // 应该在1秒内完成\n    })\n\n    it('应该在合理时间内完成事务', async () => {\n      const startTime = Date.now()\n      const transactionFn = jest.fn().mockResolvedValue({ id: 1 })\n      mockPrismaInstance.$transaction.mockResolvedValue({ id: 1 })\n      \n      await dbManager.executeTransaction(transactionFn)\n      \n      const endTime = Date.now()\n      const executionTime = endTime - startTime\n      \n      expect(executionTime).toBeLessThan(2000) // 事务应该在2秒内完成\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理数据库连接错误', async () => {\n      const error = new Error('数据库连接失败')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n      \n      await expect(dbManager.initialize()).rejects.toThrow('数据库连接失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('数据库初始化失败:', error)\n    })\n\n    it('应该处理查询超时', async () => {\n      const timeoutError = new Error('查询超时')\n      const queryFn = jest.fn().mockRejectedValue(timeoutError)\n      \n      await expect(dbManager.executeQuery(queryFn)).rejects.toThrow('查询超时')\n      expect(mockLogger.error).toHaveBeenCalledWith('查询执行失败:', timeoutError)\n    })\n  })\n\n  describe('内存管理', () => {\n    it('应该正确管理查询指标内存', async () => {\n      // 模拟大量查询以测试内存管理\n      const promises = Array.from({ length: 1500 }, async (_, i) => {\n        const queryFn = jest.fn().mockResolvedValue({ id: i.toString() })\n        return executeQuery(queryFn)\n      })\n\n      await Promise.all(promises)\n\n      // 验证查询指标不会无限增长\n      const analytics = dbManager.getQueryAnalytics()\n      expect(analytics).toBeDefined()\n    })\n  })\n})"],"version":3}