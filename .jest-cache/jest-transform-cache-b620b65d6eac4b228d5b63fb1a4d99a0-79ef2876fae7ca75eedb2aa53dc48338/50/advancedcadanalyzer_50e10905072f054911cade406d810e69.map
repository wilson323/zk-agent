{"version":3,"names":["events_1","cov_1wzucppx2i","s","require","AdvancedCADAnalyzer","constructor","f","eventEmitter","EventEmitter","analysisQueue","Map","activeAnalyses","Set","performanceMetrics","analyzeFile","file","Promise","resolve","reject","setTimeout","result","fileId","id","status","data","vertices","edges","faces","analyzeBatch","files","config","b","maxConcurrent","priorityQueue","results","queue","sort","a","priority","processFile","add","set","progressCallback","stage","progress","details","timestamp","Date","error","console","delete","chunks","i","length","push","slice","chunk","all","map","getPerformanceMetrics","size","queueLength","averageProcessingTime","calculateAverageProcessingTime","memoryUsage","process","cpuUsage","cacheResults","cacheKey","generateCacheKey","exports"],"sources":["E:\\zk-agent\\lib\\cad\\advanced-cad-analyzer.ts"],"sourcesContent":["// @ts-nocheck\nimport { EventEmitter } from \"events\"\n\n// 添加实时分析进度接口\nexport interface RealTimeProgress {\n  stage: string\n  progress: number\n  details: string\n  timestamp: Date\n  estimatedTimeRemaining?: number\n}\n\n// 添加批量分析配置\nexport interface BatchAnalysisConfig {\n  maxConcurrent: number\n  priorityQueue: boolean\n  progressCallback?: (fileId: string, progress: RealTimeProgress) => void\n}\n\nexport interface CADFileInfo {\n  id: string\n  path: string\n  priority?: number\n}\n\nexport interface CADAnalysisResult {\n  [key: string]: any // Define the structure as needed\n}\n\nexport class AdvancedCADAnalyzer {\n  private eventEmitter = new EventEmitter()\n  private analysisQueue: Map<string, any> = new Map()\n  private activeAnalyses: Set<string> = new Set()\n  private performanceMetrics: Map<string, any> = new Map()\n\n  /**\n   * 分析单个CAD文件\n   * @param file CAD文件信息\n   * @returns 分析结果\n   */\n  async analyzeFile(file: CADFileInfo): Promise<CADAnalysisResult> {\n    return new Promise((resolve, reject) => {\n      // 模拟分析过程\n      setTimeout(() => {\n        const result: CADAnalysisResult = {\n          fileId: file.id,\n          status: \"success\",\n          data: {\n            vertices: 1000,\n            edges: 2000,\n            faces: 3000,\n          },\n        }\n        resolve(result)\n      }, 1000)\n    })\n  }\n\n  /**\n   * 批量分析多个CAD文件\n   */\n  async analyzeBatch(\n    files: CADFileInfo[],\n    config: BatchAnalysisConfig = { maxConcurrent: 3, priorityQueue: false },\n  ): Promise<Map<string, CADAnalysisResult>> {\n    const results = new Map<string, CADAnalysisResult>()\n    const queue = [...files]\n\n    // 按优先级排序\n    if (config.priorityQueue) {\n      queue.sort((a, b) => (b.priority || 0) - (a.priority || 0))\n    }\n\n    const processFile = async (file: CADFileInfo) => {\n      try {\n        this.activeAnalyses.add(file.id)\n        const result = await this.analyzeFile(file)\n        results.set(file.id, result)\n\n        // 触发进度回调\n        config.progressCallback?.(file.id, {\n          stage: \"completed\",\n          progress: 100,\n          details: \"分析完成\",\n          timestamp: new Date(),\n        })\n      } catch (error) {\n        console.error(`文件 ${file.id} 分析失败:`, error)\n      } finally {\n        this.activeAnalyses.delete(file.id)\n      }\n    }\n\n    // 并发处理\n    const chunks = []\n    for (let i = 0; i < queue.length; i += config.maxConcurrent) {\n      chunks.push(queue.slice(i, i + config.maxConcurrent))\n    }\n\n    for (const chunk of chunks) {\n      await Promise.all(chunk.map(processFile))\n    }\n\n    return results\n  }\n\n  /**\n   * 实时性能监控\n   */\n  getPerformanceMetrics(): any {\n    return {\n      activeAnalyses: this.activeAnalyses.size,\n      queueLength: this.analysisQueue.size,\n      averageProcessingTime: this.calculateAverageProcessingTime(),\n      memoryUsage: process.memoryUsage(),\n      cpuUsage: process.cpuUsage(),\n    }\n  }\n\n  /**\n   * 智能缓存管理\n   */\n  private cacheResults(fileId: string, result: CADAnalysisResult): void {\n    // 实现智能缓存逻辑\n    const cacheKey = this.generateCacheKey(fileId)\n    // 缓存到内存或持久化存储\n  }\n\n  private generateCacheKey(fileId: string): string {\n    return `cache_key_for_${fileId}`\n  }\n\n  private calculateAverageProcessingTime(): number {\n    // TODO: Implement the logic to calculate the average processing time\n    return 0\n  }\n}\n"],"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","ignoreList":[]}