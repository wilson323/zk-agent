{"file":"E:\\zk-agent\\__tests__\\lib\\services\\agent-service.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\services\\agent-service.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/services/agent-service.test.ts\r\n * @description 智能体服务层单元测试\r\n * @author zk-agent开发团队\r\n * @lastUpdate 2024-12-19\r\n * @updateLog\r\n *   - 2024-12-19 初始创建智能体服务测试\r\n */\r\n\r\nimport { AgentService } from '@/lib/services/agent-service';\r\nimport { AgentType, AgentStatus } from '@/types/agents';\r\nimport { prisma } from '@/lib/database';\r\n\r\n// Mock Prisma\r\njest.mock('@/lib/database', () => ({\r\n  prisma: {\r\n    agentConfig: {\r\n      findMany: jest.fn(),\r\n      findUnique: jest.fn(),\r\n      create: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      count: jest.fn(),\r\n    },\r\n  },\r\n}));\r\n\r\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>;\r\n\r\ndescribe('AgentService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('getAgents', () => {\r\n    it('应该返回智能体列表和分页信息', async () => {\r\n      const mockAgents = [\r\n        {\r\n          id: '1',\r\n          name: 'Test Agent',\r\n          description: 'Test Description',\r\n          type: AgentType.CHAT,\r\n          status: AgentStatus.ACTIVE,\r\n          tags: ['test'],\r\n          apiEndpoint: 'https://api.test.com',\r\n          capabilities: ['chat'],\r\n          configuration: {},\r\n          metrics: {\r\n            totalRequests: 100,\r\n            successfulRequests: 95,\r\n            failedRequests: 5,\r\n            averageResponseTime: 200,\r\n            dailyActiveUsers: 10,\r\n            weeklyActiveUsers: 50,\r\n            monthlyActiveUsers: 200,\r\n            rating: 4.5,\r\n            reviewCount: 10,\r\n            uptime: 99.9\r\n          },\r\n          version: '1.0.0',\r\n          isPublic: true,\r\n          ownerId: null,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          _count: { sessions: 5, messages: 100 }\r\n        }\r\n      ];\r\n\r\n      mockPrisma.agentConfig.findMany.mockResolvedValue(mockAgents);\r\n      mockPrisma.agentConfig.count.mockResolvedValue(1);\r\n\r\n      const result = await AgentService.getAgents({\r\n        page: 1,\r\n        limit: 10\r\n      });\r\n\r\n      expect(result.agents).toHaveLength(1);\r\n      expect(result.pagination).toEqual({\r\n        page: 1,\r\n        limit: 10,\r\n        total: 1,\r\n        totalPages: 1\r\n      });\r\n      expect(mockPrisma.agentConfig.findMany).toHaveBeenCalledWith({\r\n        where: {},\r\n        skip: 0,\r\n        take: 10,\r\n        orderBy: { createdAt: 'desc' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('应该支持搜索功能', async () => {\r\n      mockPrisma.agentConfig.findMany.mockResolvedValue([]);\r\n      mockPrisma.agentConfig.count.mockResolvedValue(0);\r\n\r\n      await AgentService.getAgents({\r\n        search: 'test query'\r\n      });\r\n\r\n      expect(mockPrisma.agentConfig.findMany).toHaveBeenCalledWith({\r\n        where: {\r\n          OR: [\r\n            { name: { contains: 'test query', mode: 'insensitive' } },\r\n            { description: { contains: 'test query', mode: 'insensitive' } },\r\n            { capabilities: { hasSome: ['test query'] } }\r\n          ]\r\n        },\r\n        skip: 0,\r\n        take: 10,\r\n        orderBy: { createdAt: 'desc' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('应该支持标签筛选', async () => {\r\n      mockPrisma.agentConfig.findMany.mockResolvedValue([]);\r\n      mockPrisma.agentConfig.count.mockResolvedValue(0);\r\n\r\n      await AgentService.getAgents({\r\n        tags: ['chat', 'ai']\r\n      });\r\n\r\n      expect(mockPrisma.agentConfig.findMany).toHaveBeenCalledWith({\r\n        where: {\r\n          tags: { hasSome: ['chat', 'ai'] }\r\n        },\r\n        skip: 0,\r\n        take: 10,\r\n        orderBy: { createdAt: 'desc' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getAgentById', () => {\r\n    it('应该返回单个智能体', async () => {\r\n      const mockAgent = {\r\n        id: '1',\r\n        name: 'Test Agent',\r\n        description: 'Test Description',\r\n        type: AgentType.CHAT,\r\n        status: AgentStatus.ACTIVE,\r\n        tags: ['test'],\r\n        apiEndpoint: 'https://api.test.com',\r\n        capabilities: ['chat'],\r\n        configuration: {},\r\n        metrics: {},\r\n        version: '1.0.0',\r\n        isPublic: true,\r\n        ownerId: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        _count: { sessions: 5, messages: 100 }\r\n      };\r\n\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue(mockAgent);\r\n\r\n      const result = await AgentService.getAgentById('1');\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result?.id).toBe('1');\r\n      expect(mockPrisma.agentConfig.findUnique).toHaveBeenCalledWith({\r\n        where: { id: '1' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('找不到智能体时应该返回null', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue(null);\r\n\r\n      const result = await AgentService.getAgentById('nonexistent');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('createAgent', () => {\r\n    it('应该创建新的智能体', async () => {\r\n      const createData = {\r\n        name: 'New Agent',\r\n        description: 'New Description',\r\n        type: AgentType.CHAT,\r\n        tags: ['new'],\r\n        apiEndpoint: 'https://api.new.com',\r\n        capabilities: ['chat'],\r\n        configuration: {\r\n          model: 'gpt-4',\r\n          temperature: 0.7,\r\n          maxTokens: 2000,\r\n          systemPrompt: 'You are a helpful assistant',\r\n          tools: [],\r\n          rateLimits: {\r\n            requestsPerMinute: 60,\r\n            requestsPerHour: 1000,\r\n            requestsPerDay: 10000\r\n          },\r\n          security: {\r\n            requireAuth: true,\r\n            allowedRoles: ['USER']\r\n          }\r\n        }\r\n      };\r\n\r\n      const mockCreatedAgent = {\r\n        id: '2',\r\n        ...createData,\r\n        status: AgentStatus.ACTIVE,\r\n        version: '1.0.0',\r\n        isPublic: true,\r\n        ownerId: 'user1',\r\n        metrics: {\r\n          totalRequests: 0,\r\n          successfulRequests: 0,\r\n          failedRequests: 0,\r\n          averageResponseTime: 0,\r\n          dailyActiveUsers: 0,\r\n          weeklyActiveUsers: 0,\r\n          monthlyActiveUsers: 0,\r\n          rating: 0,\r\n          reviewCount: 0,\r\n          uptime: 0\r\n        },\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        _count: { sessions: 0, messages: 0 }\r\n      };\r\n\r\n      mockPrisma.agentConfig.create.mockResolvedValue(mockCreatedAgent);\r\n\r\n      const result = await AgentService.createAgent(createData, 'user1');\r\n\r\n      expect(result.id).toBe('2');\r\n      expect(result.name).toBe('New Agent');\r\n      expect(mockPrisma.agentConfig.create).toHaveBeenCalledWith({\r\n        data: {\r\n          name: 'New Agent',\r\n          description: 'New Description',\r\n          type: AgentType.CHAT,\r\n          status: AgentStatus.ACTIVE,\r\n          tags: ['new'],\r\n          apiEndpoint: 'https://api.new.com',\r\n          capabilities: ['chat'],\r\n          configuration: createData.configuration,\r\n          version: '1.0.0',\r\n          isPublic: true,\r\n          ownerId: 'user1',\r\n          metrics: expect.any(Object)\r\n        },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('updateAgent', () => {\r\n    it('应该更新智能体', async () => {\r\n      const updateData = {\r\n        name: 'Updated Agent',\r\n        description: 'Updated Description'\r\n      };\r\n\r\n      const mockUpdatedAgent = {\r\n        id: '1',\r\n        name: 'Updated Agent',\r\n        description: 'Updated Description',\r\n        type: AgentType.CHAT,\r\n        status: AgentStatus.ACTIVE,\r\n        tags: ['updated'],\r\n        apiEndpoint: 'https://api.updated.com',\r\n        capabilities: ['chat'],\r\n        configuration: {},\r\n        metrics: {},\r\n        version: '1.0.0',\r\n        isPublic: true,\r\n        ownerId: 'user1',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        _count: { sessions: 5, messages: 100 }\r\n      };\r\n\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'user1'\r\n      } as any);\r\n      mockPrisma.agentConfig.update.mockResolvedValue(mockUpdatedAgent);\r\n\r\n      const result = await AgentService.updateAgent('1', updateData, 'user1');\r\n\r\n      expect(result?.name).toBe('Updated Agent');\r\n      expect(mockPrisma.agentConfig.update).toHaveBeenCalledWith({\r\n        where: { id: '1' },\r\n        data: {\r\n          name: 'Updated Agent',\r\n          description: 'Updated Description'\r\n        },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('无权限时应该抛出错误', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'other-user'\r\n      } as any);\r\n\r\n      await expect(\r\n        AgentService.updateAgent('1', { name: 'Updated' }, 'user1')\r\n      ).rejects.toThrow('Unauthorized to update this agent');\r\n    });\r\n  });\r\n\r\n  describe('deleteAgent', () => {\r\n    it('应该删除智能体', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'user1'\r\n      } as any);\r\n      mockPrisma.agentConfig.delete.mockResolvedValue({} as any);\r\n\r\n      const result = await AgentService.deleteAgent('1', 'user1');\r\n\r\n      expect(result).toBe(true);\r\n      expect(mockPrisma.agentConfig.delete).toHaveBeenCalledWith({\r\n        where: { id: '1' }\r\n      });\r\n    });\r\n\r\n    it('无权限时应该抛出错误', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'other-user'\r\n      } as any);\r\n\r\n      await expect(\r\n        AgentService.deleteAgent('1', 'user1')\r\n      ).rejects.toThrow('Unauthorized to delete this agent');\r\n    });\r\n  });\r\n}); "],"version":3}