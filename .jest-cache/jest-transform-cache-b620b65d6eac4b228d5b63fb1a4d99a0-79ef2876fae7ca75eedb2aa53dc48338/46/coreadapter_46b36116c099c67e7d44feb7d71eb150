2fa622554e0ee9ec7d079fc0e879452b
"use strict";

/* istanbul ignore next */
function cov_155oxohehp() {
  var path = "E:\\zk-agent\\lib\\ag-ui\\core-adapter.ts";
  var hash = "b9418a544c4657eaf5c47cd417fc9117eff4df5f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\ag-ui\\core-adapter.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 34
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 35
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 24
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 80
        }
      },
      "9": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 57
        }
      },
      "10": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 70
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "13": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 38,
          column: 14
        }
      },
      "14": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "15": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 88
        }
      },
      "16": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 46
        }
      },
      "17": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 51,
          column: 15
        }
      },
      "18": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 57,
          column: 15
        }
      },
      "19": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "20": {
        start: {
          line: 60,
          column: 34
        },
        end: {
          line: 60,
          column: 66
        }
      },
      "21": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 66,
          column: 19
        }
      },
      "22": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 72,
          column: 19
        }
      },
      "23": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "24": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 24
        }
      },
      "25": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 64
        }
      },
      "26": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "27": {
        start: {
          line: 92,
          column: 26
        },
        end: {
          line: 92,
          column: 58
        }
      },
      "28": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 41
        }
      },
      "29": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "30": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 44
        }
      },
      "31": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 104,
          column: 11
        }
      },
      "32": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "33": {
        start: {
          line: 107,
          column: 29
        },
        end: {
          line: 121,
          column: 14
        }
      },
      "34": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 124,
          column: 13
        }
      },
      "35": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 77
        }
      },
      "36": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "37": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 235,
          column: 15
        }
      },
      "38": {
        start: {
          line: 135,
          column: 31
        },
        end: {
          line: 135,
          column: 56
        }
      },
      "39": {
        start: {
          line: 136,
          column: 32
        },
        end: {
          line: 136,
          column: 49
        }
      },
      "40": {
        start: {
          line: 137,
          column: 29
        },
        end: {
          line: 137,
          column: 31
        }
      },
      "41": {
        start: {
          line: 138,
          column: 34
        },
        end: {
          line: 138,
          column: 36
        }
      },
      "42": {
        start: {
          line: 139,
          column: 37
        },
        end: {
          line: 225,
          column: 17
        }
      },
      "43": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 224,
          column: 21
        }
      },
      "44": {
        start: {
          line: 141,
          column: 48
        },
        end: {
          line: 141,
          column: 67
        }
      },
      "45": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 166,
          column: 25
        }
      },
      "46": {
        start: {
          line: 144,
          column: 28
        },
        end: {
          line: 148,
          column: 29
        }
      },
      "47": {
        start: {
          line: 145,
          column: 46
        },
        end: {
          line: 145,
          column: 52
        }
      },
      "48": {
        start: {
          line: 146,
          column: 32
        },
        end: {
          line: 146,
          column: 44
        }
      },
      "49": {
        start: {
          line: 147,
          column: 32
        },
        end: {
          line: 147,
          column: 76
        }
      },
      "50": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 154,
          column: 31
        }
      },
      "51": {
        start: {
          line: 156,
          column: 28
        },
        end: {
          line: 161,
          column: 31
        }
      },
      "52": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 93
        }
      },
      "53": {
        start: {
          line: 164,
          column: 28
        },
        end: {
          line: 164,
          column: 48
        }
      },
      "54": {
        start: {
          line: 165,
          column: 28
        },
        end: {
          line: 165,
          column: 35
        }
      },
      "55": {
        start: {
          line: 168,
          column: 38
        },
        end: {
          line: 168,
          column: 77
        }
      },
      "56": {
        start: {
          line: 169,
          column: 24
        },
        end: {
          line: 169,
          column: 40
        }
      },
      "57": {
        start: {
          line: 171,
          column: 39
        },
        end: {
          line: 171,
          column: 59
        }
      },
      "58": {
        start: {
          line: 172,
          column: 24
        },
        end: {
          line: 215,
          column: 25
        }
      },
      "59": {
        start: {
          line: 173,
          column: 41
        },
        end: {
          line: 173,
          column: 70
        }
      },
      "60": {
        start: {
          line: 174,
          column: 28
        },
        end: {
          line: 174,
          column: 68
        }
      },
      "61": {
        start: {
          line: 175,
          column: 28
        },
        end: {
          line: 213,
          column: 29
        }
      },
      "62": {
        start: {
          line: 176,
          column: 32
        },
        end: {
          line: 212,
          column: 33
        }
      },
      "63": {
        start: {
          line: 178,
          column: 36
        },
        end: {
          line: 206,
          column: 37
        }
      },
      "64": {
        start: {
          line: 179,
          column: 56
        },
        end: {
          line: 179,
          column: 73
        }
      },
      "65": {
        start: {
          line: 180,
          column: 40
        },
        end: {
          line: 182,
          column: 41
        }
      },
      "66": {
        start: {
          line: 181,
          column: 44
        },
        end: {
          line: 181,
          column: 53
        }
      },
      "67": {
        start: {
          line: 183,
          column: 53
        },
        end: {
          line: 183,
          column: 72
        }
      },
      "68": {
        start: {
          line: 185,
          column: 40
        },
        end: {
          line: 187,
          column: 41
        }
      },
      "69": {
        start: {
          line: 186,
          column: 44
        },
        end: {
          line: 186,
          column: 108
        }
      },
      "70": {
        start: {
          line: 189,
          column: 40
        },
        end: {
          line: 201,
          column: 41
        }
      },
      "71": {
        start: {
          line: 190,
          column: 60
        },
        end: {
          line: 190,
          column: 89
        }
      },
      "72": {
        start: {
          line: 191,
          column: 44
        },
        end: {
          line: 191,
          column: 67
        }
      },
      "73": {
        start: {
          line: 193,
          column: 44
        },
        end: {
          line: 198,
          column: 47
        }
      },
      "74": {
        start: {
          line: 200,
          column: 44
        },
        end: {
          line: 200,
          column: 77
        }
      },
      "75": {
        start: {
          line: 204,
          column: 53
        },
        end: {
          line: 204,
          column: 69
        }
      },
      "76": {
        start: {
          line: 205,
          column: 40
        },
        end: {
          line: 205,
          column: 60
        }
      },
      "77": {
        start: {
          line: 209,
          column: 36
        },
        end: {
          line: 211,
          column: 37
        }
      },
      "78": {
        start: {
          line: 210,
          column: 40
        },
        end: {
          line: 210,
          column: 88
        }
      },
      "79": {
        start: {
          line: 214,
          column: 28
        },
        end: {
          line: 214,
          column: 60
        }
      },
      "80": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 39
        }
      },
      "81": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 222,
          column: 25
        }
      },
      "82": {
        start: {
          line: 221,
          column: 28
        },
        end: {
          line: 221,
          column: 77
        }
      },
      "83": {
        start: {
          line: 223,
          column: 24
        },
        end: {
          line: 223,
          column: 46
        }
      },
      "84": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 31
        }
      },
      "85": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 234,
          column: 18
        }
      },
      "86": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 233,
          column: 23
        }
      },
      "87": {
        start: {
          line: 230,
          column: 24
        },
        end: {
          line: 232,
          column: 25
        }
      },
      "88": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 231,
          column: 75
        }
      },
      "89": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 62
        }
      },
      "90": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 245,
          column: 15
        }
      },
      "91": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 251,
          column: 15
        }
      },
      "92": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 257,
          column: 15
        }
      },
      "93": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 24
        }
      },
      "94": {
        start: {
          line: 265,
          column: 27
        },
        end: {
          line: 265,
          column: 61
        }
      },
      "95": {
        start: {
          line: 267,
          column: 8
        },
        end: {
          line: 273,
          column: 11
        }
      },
      "96": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "97": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 281,
          column: 15
        }
      },
      "98": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 288,
          column: 11
        }
      },
      "99": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "100": {
        start: {
          line: 295,
          column: 29
        },
        end: {
          line: 301,
          column: 14
        }
      },
      "101": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "102": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 88
        }
      },
      "103": {
        start: {
          line: 305,
          column: 25
        },
        end: {
          line: 305,
          column: 46
        }
      },
      "104": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 311,
          column: 15
        }
      },
      "105": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 24
        }
      },
      "106": {
        start: {
          line: 315,
          column: 12
        },
        end: {
          line: 315,
          column: 65
        }
      },
      "107": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 24
        }
      },
      "108": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "109": {
        start: {
          line: 324,
          column: 29
        },
        end: {
          line: 330,
          column: 14
        }
      },
      "110": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 333,
          column: 13
        }
      },
      "111": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 95
        }
      },
      "112": {
        start: {
          line: 334,
          column: 25
        },
        end: {
          line: 334,
          column: 46
        }
      },
      "113": {
        start: {
          line: 335,
          column: 30
        },
        end: {
          line: 335,
          column: 50
        }
      },
      "114": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 64
        }
      },
      "115": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 344,
          column: 15
        }
      },
      "116": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 29
        }
      },
      "117": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 72
        }
      },
      "118": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 22
        }
      },
      "119": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 403,
          column: 9
        }
      },
      "120": {
        start: {
          line: 357,
          column: 29
        },
        end: {
          line: 369,
          column: 14
        }
      },
      "121": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 372,
          column: 13
        }
      },
      "122": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 371,
          column: 85
        }
      },
      "123": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 384,
          column: 15
        }
      },
      "124": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 24
        }
      },
      "125": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 63
        }
      },
      "126": {
        start: {
          line: 390,
          column: 12
        },
        end: {
          line: 401,
          column: 15
        }
      },
      "127": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 25
        }
      },
      "128": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 441,
          column: 9
        }
      },
      "129": {
        start: {
          line: 410,
          column: 29
        },
        end: {
          line: 420,
          column: 14
        }
      },
      "130": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 423,
          column: 13
        }
      },
      "131": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 422,
          column: 89
        }
      },
      "132": {
        start: {
          line: 424,
          column: 25
        },
        end: {
          line: 424,
          column: 46
        }
      },
      "133": {
        start: {
          line: 425,
          column: 29
        },
        end: {
          line: 425,
          column: 42
        }
      },
      "134": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 435,
          column: 15
        }
      },
      "135": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 436,
          column: 28
        }
      },
      "136": {
        start: {
          line: 439,
          column: 12
        },
        end: {
          line: 439,
          column: 65
        }
      },
      "137": {
        start: {
          line: 440,
          column: 12
        },
        end: {
          line: 440,
          column: 24
        }
      },
      "138": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 479,
          column: 9
        }
      },
      "139": {
        start: {
          line: 448,
          column: 29
        },
        end: {
          line: 459,
          column: 14
        }
      },
      "140": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 462,
          column: 13
        }
      },
      "141": {
        start: {
          line: 461,
          column: 16
        },
        end: {
          line: 461,
          column: 83
        }
      },
      "142": {
        start: {
          line: 463,
          column: 25
        },
        end: {
          line: 463,
          column: 46
        }
      },
      "143": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 473,
          column: 15
        }
      },
      "144": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 24
        }
      },
      "145": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 60
        }
      },
      "146": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 24
        }
      },
      "147": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 488,
          column: 10
        }
      },
      "148": {
        start: {
          line: 494,
          column: 8
        },
        end: {
          line: 496,
          column: 9
        }
      },
      "149": {
        start: {
          line: 495,
          column: 12
        },
        end: {
          line: 495,
          column: 49
        }
      },
      "150": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 497,
          column: 38
        }
      },
      "151": {
        start: {
          line: 500,
          column: 0
        },
        end: {
          line: 500,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 43
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        loc: {
          start: {
            line: 90,
            column: 81
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 90
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 133,
            column: 41
          },
          end: {
            line: 133,
            column: 42
          }
        },
        loc: {
          start: {
            line: 133,
            column: 55
          },
          end: {
            line: 235,
            column: 13
          }
        },
        line: 133
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 139,
            column: 37
          },
          end: {
            line: 139,
            column: 38
          }
        },
        loc: {
          start: {
            line: 139,
            column: 49
          },
          end: {
            line: 225,
            column: 17
          }
        },
        line: 139
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 228,
            column: 23
          },
          end: {
            line: 228,
            column: 24
          }
        },
        loc: {
          start: {
            line: 228,
            column: 29
          },
          end: {
            line: 234,
            column: 17
          }
        },
        line: 228
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 229,
            column: 42
          },
          end: {
            line: 229,
            column: 43
          }
        },
        loc: {
          start: {
            line: 229,
            column: 51
          },
          end: {
            line: 233,
            column: 21
          }
        },
        line: 229
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 36
          },
          end: {
            line: 289,
            column: 5
          }
        },
        line: 264
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 42
          },
          end: {
            line: 318,
            column: 5
          }
        },
        line: 293
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 49
          },
          end: {
            line: 351,
            column: 5
          }
        },
        line: 322
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 355,
            column: 5
          }
        },
        loc: {
          start: {
            line: 355,
            column: 70
          },
          end: {
            line: 404,
            column: 5
          }
        },
        line: 355
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 408,
            column: 4
          },
          end: {
            line: 408,
            column: 5
          }
        },
        loc: {
          start: {
            line: 408,
            column: 66
          },
          end: {
            line: 442,
            column: 5
          }
        },
        line: 408
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 76
          },
          end: {
            line: 480,
            column: 5
          }
        },
        line: 446
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 484,
            column: 4
          },
          end: {
            line: 484,
            column: 5
          }
        },
        loc: {
          start: {
            line: 484,
            column: 26
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 484
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 5
          }
        },
        loc: {
          start: {
            line: 493,
            column: 21
          },
          end: {
            line: 498,
            column: 5
          }
        },
        line: 493
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 28
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 32
          },
          end: {
            line: 16,
            column: 53
          }
        }, {
          start: {
            line: 16,
            column: 57
          },
          end: {
            line: 16,
            column: 79
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 17,
            column: 29
          },
          end: {
            line: 17,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 29
          },
          end: {
            line: 17,
            column: 47
          }
        }, {
          start: {
            line: 17,
            column: 51
          },
          end: {
            line: 17,
            column: 56
          }
        }],
        line: 17
      },
      "3": {
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 18,
            column: 53
          }
        }, {
          start: {
            line: 18,
            column: 57
          },
          end: {
            line: 18,
            column: 69
          }
        }],
        line: 18
      },
      "4": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "5": {
        loc: {
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 24
          },
          end: {
            line: 46,
            column: 30
          }
        }, {
          start: {
            line: 46,
            column: 34
          },
          end: {
            line: 46,
            column: 45
          }
        }],
        line: 46
      },
      "6": {
        loc: {
          start: {
            line: 49,
            column: 27
          },
          end: {
            line: 49,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 27
          },
          end: {
            line: 49,
            column: 41
          }
        }, {
          start: {
            line: 49,
            column: 45
          },
          end: {
            line: 49,
            column: 47
          }
        }],
        line: 49
      },
      "7": {
        loc: {
          start: {
            line: 50,
            column: 36
          },
          end: {
            line: 50,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 36
          },
          end: {
            line: 50,
            column: 59
          }
        }, {
          start: {
            line: 50,
            column: 63
          },
          end: {
            line: 50,
            column: 65
          }
        }],
        line: 50
      },
      "8": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 12
          },
          end: {
            line: 124,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "11": {
        loc: {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 166,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 166,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 148,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 148,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 175,
            column: 28
          },
          end: {
            line: 213,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 28
          },
          end: {
            line: 213,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "14": {
        loc: {
          start: {
            line: 178,
            column: 36
          },
          end: {
            line: 206,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 36
          },
          end: {
            line: 206,
            column: 37
          }
        }, {
          start: {
            line: 203,
            column: 41
          },
          end: {
            line: 206,
            column: 37
          }
        }],
        line: 178
      },
      "15": {
        loc: {
          start: {
            line: 180,
            column: 40
          },
          end: {
            line: 182,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 40
          },
          end: {
            line: 182,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "16": {
        loc: {
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 187,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 187,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "17": {
        loc: {
          start: {
            line: 185,
            column: 44
          },
          end: {
            line: 185,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 44
          },
          end: {
            line: 185,
            column: 56
          }
        }, {
          start: {
            line: 185,
            column: 60
          },
          end: {
            line: 185,
            column: 81
          }
        }, {
          start: {
            line: 185,
            column: 85
          },
          end: {
            line: 185,
            column: 117
          }
        }],
        line: 185
      },
      "18": {
        loc: {
          start: {
            line: 189,
            column: 40
          },
          end: {
            line: 201,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 40
          },
          end: {
            line: 201,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "19": {
        loc: {
          start: {
            line: 189,
            column: 44
          },
          end: {
            line: 189,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 44
          },
          end: {
            line: 189,
            column: 56
          }
        }, {
          start: {
            line: 189,
            column: 60
          },
          end: {
            line: 189,
            column: 81
          }
        }, {
          start: {
            line: 189,
            column: 85
          },
          end: {
            line: 189,
            column: 114
          }
        }],
        line: 189
      },
      "20": {
        loc: {
          start: {
            line: 209,
            column: 36
          },
          end: {
            line: 211,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 36
          },
          end: {
            line: 211,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "21": {
        loc: {
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 222,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 222,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "22": {
        loc: {
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 232,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 232,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "23": {
        loc: {
          start: {
            line: 242,
            column: 25
          },
          end: {
            line: 242,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 50
          },
          end: {
            line: 242,
            column: 63
          }
        }, {
          start: {
            line: 242,
            column: 66
          },
          end: {
            line: 242,
            column: 81
          }
        }],
        line: 242
      },
      "24": {
        loc: {
          start: {
            line: 270,
            column: 26
          },
          end: {
            line: 270,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 270,
            column: 26
          },
          end: {
            line: 270,
            column: 49
          }
        }, {
          start: {
            line: 270,
            column: 53
          },
          end: {
            line: 270,
            column: 62
          }
        }],
        line: 270
      },
      "25": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "26": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "27": {
        loc: {
          start: {
            line: 309,
            column: 26
          },
          end: {
            line: 309,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 26
          },
          end: {
            line: 309,
            column: 39
          }
        }, {
          start: {
            line: 309,
            column: 43
          },
          end: {
            line: 309,
            column: 45
          }
        }],
        line: 309
      },
      "28": {
        loc: {
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 12
          },
          end: {
            line: 333,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "29": {
        loc: {
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 335,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 335,
            column: 44
          }
        }, {
          start: {
            line: 335,
            column: 48
          },
          end: {
            line: 335,
            column: 50
          }
        }],
        line: 335
      },
      "30": {
        loc: {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 372,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "31": {
        loc: {
          start: {
            line: 398,
            column: 27
          },
          end: {
            line: 398,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 398,
            column: 52
          },
          end: {
            line: 398,
            column: 65
          }
        }, {
          start: {
            line: 398,
            column: 68
          },
          end: {
            line: 398,
            column: 83
          }
        }],
        line: 398
      },
      "32": {
        loc: {
          start: {
            line: 408,
            column: 43
          },
          end: {
            line: 408,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 408,
            column: 60
          },
          end: {
            line: 408,
            column: 64
          }
        }],
        line: 408
      },
      "33": {
        loc: {
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 423,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 12
          },
          end: {
            line: 423,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "34": {
        loc: {
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 462,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 12
          },
          end: {
            line: 462,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      },
      "35": {
        loc: {
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 496,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 494,
            column: 8
          },
          end: {
            line: 496,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 494
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\ag-ui\\core-adapter.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\lib\\ag-ui\\core-adapter.ts"],
      sourcesContent: ["// @ts-nocheck\nimport { Observable, Subject } from \"rxjs\"\nimport type {\n  BaseEvent,\n  TextMessageStartEvent,\n  TextMessageContentEvent,\n  TextMessageEndEvent,\n  RunStartedEvent,\n  RunFinishedEvent,\n  StateSnapshotEvent,\n  ToolCallStartEvent,\n  ToolCallArgsEvent,\n  ToolCallEndEvent,\n  CustomEvent,\n} from \"./types\"\n\n/**\n * AG-UI\u6838\u5FC3\u9002\u914D\u5668 - \u5C06FastGPT\u7684\u6240\u6709\u529F\u80FD\u8F6C\u6362\u4E3AAG-UI\u4E8B\u4EF6\u6D41\n */\nexport class AgUICoreAdapter {\n  private eventSubject = new Subject<BaseEvent>()\n  private messageIdCounter = 0\n  private toolCallIdCounter = 0\n  private state: Record<string, any> = {}\n\n  constructor(\n    private options: {\n      debug?: boolean\n      threadId?: string\n      proxyUrl?: string\n    } = {},\n  ) {\n    this.options.threadId = this.options.threadId || `thread-${Date.now()}`\n    this.options.debug = this.options.debug || false\n    this.options.proxyUrl = this.options.proxyUrl || \"/api/proxy\"\n  }\n\n  /**\n   * \u83B7\u53D6\u4E8B\u4EF6\u6D41Observable\n   */\n  public getEventStream(): Observable<BaseEvent> {\n    return this.eventSubject.asObservable()\n  }\n\n  /**\n   * \u521D\u59CB\u5316\u4F1A\u8BDD\n   * \u5904\u7406FastGPT\u521D\u59CB\u5316\u4F1A\u8BDD\u63A5\u53E3\uFF0C\u5305\u62EC\u5168\u5C40\u53D8\u91CF\u5904\u7406\n   */\n  public async initializeSession(appId: string, chatId?: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/init-chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ appId, chatId }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to initialize session: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n\n      // \u66F4\u65B0\u72B6\u6001\uFF0C\u5305\u62EC\u5168\u5C40\u53D8\u91CF\n      this.updateState({\n        appId,\n        chatId: chatId || data.chatId,\n        welcomeMessage: data.welcomeMessage,\n        systemPrompt: data.systemPrompt,\n        variables: data.variables || {},\n        suggestedQuestions: data.suggestedQuestions || [],\n      })\n\n      // \u53D1\u9001\u72B6\u6001\u5FEB\u7167\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"STATE_SNAPSHOT\",\n        snapshot: this.state,\n        timestamp: Date.now(),\n      } as StateSnapshotEvent)\n\n      // \u5982\u679C\u6709\u6B22\u8FCE\u6D88\u606F\uFF0C\u53D1\u9001\u6587\u672C\u6D88\u606F\u4E8B\u4EF6\n      if (data.welcomeMessage) {\n        const messageId = `msg-${++this.messageIdCounter}`\n\n        this.emitEvent({\n          type: \"TEXT_MESSAGE_START\",\n          messageId,\n          role: \"assistant\",\n          timestamp: Date.now(),\n        } as TextMessageStartEvent)\n\n        this.emitEvent({\n          type: \"TEXT_MESSAGE_CONTENT\",\n          messageId,\n          delta: data.welcomeMessage,\n          timestamp: Date.now(),\n        } as TextMessageContentEvent)\n\n        this.emitEvent({\n          type: \"TEXT_MESSAGE_END\",\n          messageId,\n          timestamp: Date.now(),\n        } as TextMessageEndEvent)\n      }\n\n      return data\n    } catch (error) {\n      console.error(\"Error initializing session:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * \u5904\u7406\u6765\u81EAFastGPT\u7684\u6D41\u5F0F\u54CD\u5E94\n   * \u5C06\u5176\u8F6C\u6362\u4E3AAG-UI\u4E8B\u4EF6\u6D41\n   */\n  public async handleChatCompletion(\n    appId: string,\n    chatId: string,\n    messages: Array<{ role: string; content: string }>,\n    systemPrompt?: string,\n    variables?: Record<string, any>,\n  ): Promise<Observable<any>> {\n    // \u751F\u6210\u552F\u4E00\u6D88\u606FID\u548C\u8FD0\u884CID\n    const messageId = `msg-${++this.messageIdCounter}`\n    const runId = `run-${Date.now()}`\n\n    // \u66F4\u65B0\u72B6\u6001\n    if (variables) {\n      this.updateState({ variables })\n    }\n\n    // \u53D1\u9001\u8FD0\u884C\u5F00\u59CB\u4E8B\u4EF6\n    this.emitEvent({\n      type: \"RUN_STARTED\",\n      threadId: this.options.threadId,\n      runId,\n      timestamp: Date.now(),\n    } as RunStartedEvent)\n\n    try {\n      // \u8C03\u7528FastGPT API\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          appId,\n          chatId,\n          messages,\n          stream: true,\n          detail: true,\n          system: systemPrompt,\n          variables,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`FastGPT API error: ${response.statusText}`)\n      }\n\n      // \u53D1\u9001\u6D88\u606F\u5F00\u59CB\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"TEXT_MESSAGE_START\",\n        messageId,\n        role: \"assistant\",\n        timestamp: Date.now(),\n      } as TextMessageStartEvent)\n\n      // \u521B\u5EFA\u4E00\u4E2A\u65B0\u7684Observable\u6765\u5904\u7406\u6D41\u5F0F\u54CD\u5E94\n      return new Observable<any>((observer) => {\n        // \u5904\u7406\u6D41\u5F0F\u54CD\u5E94\n        const reader = response.body!.getReader()\n        const decoder = new TextDecoder()\n        let buffer = \"\"\n        let fullContent = \"\"\n\n        const processChunk = async () => {\n          try {\n            const { done, value } = await reader.read()\n\n            if (done) {\n              // \u5904\u7406\u7F13\u51B2\u533A\u4E2D\u5269\u4F59\u7684\u6570\u636E\n              if (buffer) {\n                const chunk = buffer\n                buffer = \"\"\n                observer.next({ text: chunk, isEnd: true })\n              }\n\n              // \u53D1\u9001\u6D88\u606F\u7ED3\u675F\u4E8B\u4EF6\n              this.emitEvent({\n                type: \"TEXT_MESSAGE_END\",\n                messageId,\n                timestamp: Date.now(),\n              } as TextMessageEndEvent)\n\n              // \u53D1\u9001\u8FD0\u884C\u7ED3\u675F\u4E8B\u4EF6\n              this.emitEvent({\n                type: \"RUN_FINISHED\",\n                threadId: this.options.threadId,\n                runId,\n                timestamp: Date.now(),\n              } as RunFinishedEvent)\n\n              // \u5C1D\u8BD5\u83B7\u53D6\u5EFA\u8BAE\u95EE\u9898\n              this.fetchSuggestedQuestions(appId, chatId).catch(console.error)\n\n              observer.complete()\n              return\n            }\n\n            // \u89E3\u7801\u4E8C\u8FDB\u5236\u6570\u636E\n            const chunk = decoder.decode(value, { stream: true })\n            buffer += chunk\n\n            // \u5904\u7406\u5B8C\u6574\u7684JSON\u5BF9\u8C61\n            let boundary = buffer.indexOf(\"\\n\")\n            while (boundary !== -1) {\n              const part = buffer.substring(0, boundary)\n              buffer = buffer.substring(boundary + 1)\n\n              if (part.trim()) {\n                try {\n                  // \u5904\u7406SSE\u683C\u5F0F\u6570\u636E\n                  if (part.startsWith(\"data: \")) {\n                    const jsonStr = part.substring(6)\n\n                    if (jsonStr === \"[DONE]\") {\n                      continue\n                    }\n\n                    const data = JSON.parse(jsonStr)\n\n                    // \u5904\u7406\u5DE5\u5177\u8C03\u7528\n                    if (data.choices && data.choices[0].delta && data.choices[0].delta.tool_calls) {\n                      this.handleToolCall(data.choices[0].delta.tool_calls[0], runId)\n                    }\n\n                    // \u5904\u7406\u6587\u672C\u5185\u5BB9\n                    if (data.choices && data.choices[0].delta && data.choices[0].delta.content) {\n                      const content = data.choices[0].delta.content\n                      fullContent += content\n\n                      // \u53D1\u9001\u6D88\u606F\u5185\u5BB9\u4E8B\u4EF6\n                      this.emitEvent({\n                        type: \"TEXT_MESSAGE_CONTENT\",\n                        messageId,\n                        delta: content,\n                        timestamp: Date.now(),\n                      } as TextMessageContentEvent)\n\n                      // \u5C06\u539F\u59CB\u6570\u636E\u4F20\u9012\u7ED9\u89C2\u5BDF\u8005\n                      observer.next({ text: content })\n                    }\n                  } else {\n                    const data = JSON.parse(part)\n                    observer.next(data)\n                  }\n                } catch (e) {\n                  if (this.options.debug) {\n                    console.error(\"Failed to parse JSON:\", part, e)\n                  }\n                }\n              }\n\n              boundary = buffer.indexOf(\"\\n\")\n            }\n\n            // \u7EE7\u7EED\u5904\u7406\u4E0B\u4E00\u4E2A\u5757\n            processChunk()\n          } catch (error) {\n            if (this.options.debug) {\n              console.error(\"Error processing stream:\", error)\n            }\n            observer.error(error)\n          }\n        }\n\n        processChunk()\n\n        // \u8FD4\u56DE\u6E05\u7406\u51FD\u6570\n        return () => {\n          reader.cancel().catch((err) => {\n            if (this.options.debug) {\n              console.error(\"Error cancelling reader:\", err)\n            }\n          })\n        }\n      })\n    } catch (error) {\n      console.error(\"Error in chat completion:\", error)\n\n      // \u53D1\u9001\u9519\u8BEF\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"RUN_ERROR\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        code: 500,\n        timestamp: Date.now(),\n      })\n\n      // \u53D1\u9001\u6D88\u606F\u7ED3\u675F\u548C\u8FD0\u884C\u7ED3\u675F\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"TEXT_MESSAGE_END\",\n        messageId,\n        timestamp: Date.now(),\n      } as TextMessageEndEvent)\n\n      this.emitEvent({\n        type: \"RUN_FINISHED\",\n        threadId: this.options.threadId,\n        runId,\n        timestamp: Date.now(),\n      } as RunFinishedEvent)\n\n      throw error\n    }\n  }\n\n  /**\n   * \u5904\u7406\u5DE5\u5177\u8C03\u7528\n   */\n  private handleToolCall(toolCall: any, runId: string) {\n    const toolCallId = `tool-${++this.toolCallIdCounter}`\n\n    // \u53D1\u9001\u5DE5\u5177\u8C03\u7528\u5F00\u59CB\u4E8B\u4EF6\n    this.emitEvent({\n      type: \"TOOL_CALL_START\",\n      toolCallId,\n      toolCallName: toolCall.function?.name || \"unknown\",\n      parentMessageId: `msg-${this.messageIdCounter}`,\n      timestamp: Date.now(),\n    } as ToolCallStartEvent)\n\n    // \u53D1\u9001\u5DE5\u5177\u8C03\u7528\u53C2\u6570\u4E8B\u4EF6\n    if (toolCall.function?.arguments) {\n      this.emitEvent({\n        type: \"TOOL_CALL_ARGS\",\n        toolCallId,\n        delta: toolCall.function.arguments,\n        timestamp: Date.now(),\n      } as ToolCallArgsEvent)\n    }\n\n    // \u53D1\u9001\u5DE5\u5177\u8C03\u7528\u7ED3\u675F\u4E8B\u4EF6\n    this.emitEvent({\n      type: \"TOOL_CALL_END\",\n      toolCallId,\n      timestamp: Date.now(),\n    } as ToolCallEndEvent)\n  }\n\n  /**\n   * \u83B7\u53D6\u804A\u5929\u5386\u53F2\u8BB0\u5F55\n   */\n  public async fetchChatHistory(appId: string, chatId: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/chat-history`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ appId, chatId }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch chat history: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n\n      // \u53D1\u9001\u6D88\u606F\u5FEB\u7167\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"MESSAGES_SNAPSHOT\",\n        messages: data.messages || [],\n        timestamp: Date.now(),\n      })\n\n      return data\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * \u83B7\u53D6\u5EFA\u8BAE\u95EE\u9898\n   */\n  public async fetchSuggestedQuestions(appId: string, chatId: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/suggested-questions`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ appId, chatId }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch suggested questions: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      const questions = data.questions || []\n\n      // \u66F4\u65B0\u72B6\u6001\n      this.updateState({ suggestedQuestions: questions })\n\n      // \u53D1\u9001\u81EA\u5B9A\u4E49\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"suggested_questions\",\n        value: questions,\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return questions\n    } catch (error) {\n      console.error(\"Error fetching suggested questions:\", error)\n      return []\n    }\n  }\n\n  /**\n   * \u63D0\u4EA4\u6D88\u606F\u53CD\u9988\uFF08\u70B9\u8D5E/\u70B9\u8E29\uFF09\n   */\n  public async submitFeedback(\n    appId: string,\n    chatId: string,\n    messageId: string,\n    feedback: \"like\" | \"dislike\",\n    comment?: string,\n  ): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/feedback`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          appId,\n          chatId,\n          messageId,\n          feedback,\n          comment,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to submit feedback: ${response.statusText}`)\n      }\n\n      // \u53D1\u9001\u81EA\u5B9A\u4E49\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"message_feedback\",\n        value: {\n          messageId,\n          feedback,\n          comment,\n          success: true,\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return true\n    } catch (error) {\n      console.error(\"Error submitting feedback:\", error)\n\n      // \u53D1\u9001\u81EA\u5B9A\u4E49\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"message_feedback\",\n        value: {\n          messageId,\n          feedback,\n          comment,\n          success: false,\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return false\n    }\n  }\n\n  /**\n   * \u751F\u6210\u957F\u56FE\n   */\n  public async generateLongImage(appId: string, chatId: string, includeWelcome = true): Promise<string> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/generate-image`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          appId,\n          chatId,\n          includeWelcome,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate long image: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      const imageUrl = data.imageUrl\n\n      // \u53D1\u9001\u81EA\u5B9A\u4E49\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"long_image_generated\",\n        value: {\n          imageUrl,\n          chatId,\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return imageUrl\n    } catch (error) {\n      console.error(\"Error generating long image:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * \u6279\u91CF\u8F6C\u53D1\u6D88\u606F\n   */\n  public async batchForward(\n    sourceAppId: string,\n    sourceChatId: string,\n    targetAppIds: string[],\n    messageIds: string[],\n  ): Promise<any> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/batch-forward`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sourceAppId,\n          sourceChatId,\n          targetAppIds,\n          messageIds,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to batch forward: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n\n      // \u53D1\u9001\u81EA\u5B9A\u4E49\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"batch_forward_completed\",\n        value: {\n          results: data.results,\n          success: data.success,\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return data\n    } catch (error) {\n      console.error(\"Error in batch forward:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * \u66F4\u65B0\u72B6\u6001\n   */\n  private updateState(newState: Record<string, any>): void {\n    this.state = {\n      ...this.state,\n      ...newState,\n    }\n  }\n\n  /**\n   * \u53D1\u9001\u4E8B\u4EF6\u5230\u4E8B\u4EF6\u6D41\n   */\n  private emitEvent(event: BaseEvent): void {\n    if (this.options.debug) {\n      console.debug(\"AG-UI Event:\", event)\n    }\n    this.eventSubject.next(event)\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9418a544c4657eaf5c47cd417fc9117eff4df5f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_155oxohehp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_155oxohehp();
cov_155oxohehp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_155oxohehp().s[1]++;
exports.AgUICoreAdapter = void 0;
// @ts-nocheck
const rxjs_1 =
/* istanbul ignore next */
(cov_155oxohehp().s[2]++, require("rxjs"));
/**
 * AG-UI核心适配器 - 将FastGPT的所有功能转换为AG-UI事件流
 */
class AgUICoreAdapter {
  constructor(options =
  /* istanbul ignore next */
  (cov_155oxohehp().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_155oxohehp().f[0]++;
    cov_155oxohehp().s[3]++;
    this.options = options;
    /* istanbul ignore next */
    cov_155oxohehp().s[4]++;
    this.eventSubject = new rxjs_1.Subject();
    /* istanbul ignore next */
    cov_155oxohehp().s[5]++;
    this.messageIdCounter = 0;
    /* istanbul ignore next */
    cov_155oxohehp().s[6]++;
    this.toolCallIdCounter = 0;
    /* istanbul ignore next */
    cov_155oxohehp().s[7]++;
    this.state = {};
    /* istanbul ignore next */
    cov_155oxohehp().s[8]++;
    this.options.threadId =
    /* istanbul ignore next */
    (cov_155oxohehp().b[1][0]++, this.options.threadId) ||
    /* istanbul ignore next */
    (cov_155oxohehp().b[1][1]++, `thread-${Date.now()}`);
    /* istanbul ignore next */
    cov_155oxohehp().s[9]++;
    this.options.debug =
    /* istanbul ignore next */
    (cov_155oxohehp().b[2][0]++, this.options.debug) ||
    /* istanbul ignore next */
    (cov_155oxohehp().b[2][1]++, false);
    /* istanbul ignore next */
    cov_155oxohehp().s[10]++;
    this.options.proxyUrl =
    /* istanbul ignore next */
    (cov_155oxohehp().b[3][0]++, this.options.proxyUrl) ||
    /* istanbul ignore next */
    (cov_155oxohehp().b[3][1]++, "/api/proxy");
  }
  /**
   * 获取事件流Observable
   */
  getEventStream() {
    /* istanbul ignore next */
    cov_155oxohehp().f[1]++;
    cov_155oxohehp().s[11]++;
    return this.eventSubject.asObservable();
  }
  /**
   * 初始化会话
   * 处理FastGPT初始化会话接口，包括全局变量处理
   */
  async initializeSession(appId, chatId) {
    /* istanbul ignore next */
    cov_155oxohehp().f[2]++;
    cov_155oxohehp().s[12]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_155oxohehp().s[13]++, await fetch(`${this.options.proxyUrl}/fastgpt/init-chat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          appId,
          chatId
        })
      }));
      /* istanbul ignore next */
      cov_155oxohehp().s[14]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_155oxohehp().b[4][0]++;
        cov_155oxohehp().s[15]++;
        throw new Error(`Failed to initialize session: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[4][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_155oxohehp().s[16]++, await response.json());
      // 更新状态，包括全局变量
      /* istanbul ignore next */
      cov_155oxohehp().s[17]++;
      this.updateState({
        appId,
        chatId:
        /* istanbul ignore next */
        (cov_155oxohehp().b[5][0]++, chatId) ||
        /* istanbul ignore next */
        (cov_155oxohehp().b[5][1]++, data.chatId),
        welcomeMessage: data.welcomeMessage,
        systemPrompt: data.systemPrompt,
        variables:
        /* istanbul ignore next */
        (cov_155oxohehp().b[6][0]++, data.variables) ||
        /* istanbul ignore next */
        (cov_155oxohehp().b[6][1]++, {}),
        suggestedQuestions:
        /* istanbul ignore next */
        (cov_155oxohehp().b[7][0]++, data.suggestedQuestions) ||
        /* istanbul ignore next */
        (cov_155oxohehp().b[7][1]++, [])
      });
      // 发送状态快照事件
      /* istanbul ignore next */
      cov_155oxohehp().s[18]++;
      this.emitEvent({
        type: "STATE_SNAPSHOT",
        snapshot: this.state,
        timestamp: Date.now()
      });
      // 如果有欢迎消息，发送文本消息事件
      /* istanbul ignore next */
      cov_155oxohehp().s[19]++;
      if (data.welcomeMessage) {
        /* istanbul ignore next */
        cov_155oxohehp().b[8][0]++;
        const messageId =
        /* istanbul ignore next */
        (cov_155oxohehp().s[20]++, `msg-${++this.messageIdCounter}`);
        /* istanbul ignore next */
        cov_155oxohehp().s[21]++;
        this.emitEvent({
          type: "TEXT_MESSAGE_START",
          messageId,
          role: "assistant",
          timestamp: Date.now()
        });
        /* istanbul ignore next */
        cov_155oxohehp().s[22]++;
        this.emitEvent({
          type: "TEXT_MESSAGE_CONTENT",
          messageId,
          delta: data.welcomeMessage,
          timestamp: Date.now()
        });
        /* istanbul ignore next */
        cov_155oxohehp().s[23]++;
        this.emitEvent({
          type: "TEXT_MESSAGE_END",
          messageId,
          timestamp: Date.now()
        });
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[8][1]++;
      }
      cov_155oxohehp().s[24]++;
      return data;
    } catch (error) {
      /* istanbul ignore next */
      cov_155oxohehp().s[25]++;
      console.error("Error initializing session:", error);
      /* istanbul ignore next */
      cov_155oxohehp().s[26]++;
      throw error;
    }
  }
  /**
   * 处理来自FastGPT的流式响应
   * 将其转换为AG-UI事件流
   */
  async handleChatCompletion(appId, chatId, messages, systemPrompt, variables) {
    /* istanbul ignore next */
    cov_155oxohehp().f[3]++;
    // 生成唯一消息ID和运行ID
    const messageId =
    /* istanbul ignore next */
    (cov_155oxohehp().s[27]++, `msg-${++this.messageIdCounter}`);
    const runId =
    /* istanbul ignore next */
    (cov_155oxohehp().s[28]++, `run-${Date.now()}`);
    // 更新状态
    /* istanbul ignore next */
    cov_155oxohehp().s[29]++;
    if (variables) {
      /* istanbul ignore next */
      cov_155oxohehp().b[9][0]++;
      cov_155oxohehp().s[30]++;
      this.updateState({
        variables
      });
    } else
    /* istanbul ignore next */
    {
      cov_155oxohehp().b[9][1]++;
    }
    // 发送运行开始事件
    cov_155oxohehp().s[31]++;
    this.emitEvent({
      type: "RUN_STARTED",
      threadId: this.options.threadId,
      runId,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_155oxohehp().s[32]++;
    try {
      // 调用FastGPT API
      const response =
      /* istanbul ignore next */
      (cov_155oxohehp().s[33]++, await fetch(`${this.options.proxyUrl}/fastgpt/chat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          appId,
          chatId,
          messages,
          stream: true,
          detail: true,
          system: systemPrompt,
          variables
        })
      }));
      /* istanbul ignore next */
      cov_155oxohehp().s[34]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_155oxohehp().b[10][0]++;
        cov_155oxohehp().s[35]++;
        throw new Error(`FastGPT API error: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[10][1]++;
      }
      // 发送消息开始事件
      cov_155oxohehp().s[36]++;
      this.emitEvent({
        type: "TEXT_MESSAGE_START",
        messageId,
        role: "assistant",
        timestamp: Date.now()
      });
      // 创建一个新的Observable来处理流式响应
      /* istanbul ignore next */
      cov_155oxohehp().s[37]++;
      return new rxjs_1.Observable(observer => {
        /* istanbul ignore next */
        cov_155oxohehp().f[4]++;
        // 处理流式响应
        const reader =
        /* istanbul ignore next */
        (cov_155oxohehp().s[38]++, response.body.getReader());
        const decoder =
        /* istanbul ignore next */
        (cov_155oxohehp().s[39]++, new TextDecoder());
        let buffer =
        /* istanbul ignore next */
        (cov_155oxohehp().s[40]++, "");
        let fullContent =
        /* istanbul ignore next */
        (cov_155oxohehp().s[41]++, "");
        /* istanbul ignore next */
        cov_155oxohehp().s[42]++;
        const processChunk = async () => {
          /* istanbul ignore next */
          cov_155oxohehp().f[5]++;
          cov_155oxohehp().s[43]++;
          try {
            const {
              done,
              value
            } =
            /* istanbul ignore next */
            (cov_155oxohehp().s[44]++, await reader.read());
            /* istanbul ignore next */
            cov_155oxohehp().s[45]++;
            if (done) {
              /* istanbul ignore next */
              cov_155oxohehp().b[11][0]++;
              cov_155oxohehp().s[46]++;
              // 处理缓冲区中剩余的数据
              if (buffer) {
                /* istanbul ignore next */
                cov_155oxohehp().b[12][0]++;
                const chunk =
                /* istanbul ignore next */
                (cov_155oxohehp().s[47]++, buffer);
                /* istanbul ignore next */
                cov_155oxohehp().s[48]++;
                buffer = "";
                /* istanbul ignore next */
                cov_155oxohehp().s[49]++;
                observer.next({
                  text: chunk,
                  isEnd: true
                });
              } else
              /* istanbul ignore next */
              {
                cov_155oxohehp().b[12][1]++;
              }
              // 发送消息结束事件
              cov_155oxohehp().s[50]++;
              this.emitEvent({
                type: "TEXT_MESSAGE_END",
                messageId,
                timestamp: Date.now()
              });
              // 发送运行结束事件
              /* istanbul ignore next */
              cov_155oxohehp().s[51]++;
              this.emitEvent({
                type: "RUN_FINISHED",
                threadId: this.options.threadId,
                runId,
                timestamp: Date.now()
              });
              // 尝试获取建议问题
              /* istanbul ignore next */
              cov_155oxohehp().s[52]++;
              this.fetchSuggestedQuestions(appId, chatId).catch(console.error);
              /* istanbul ignore next */
              cov_155oxohehp().s[53]++;
              observer.complete();
              /* istanbul ignore next */
              cov_155oxohehp().s[54]++;
              return;
            } else
            /* istanbul ignore next */
            {
              cov_155oxohehp().b[11][1]++;
            }
            // 解码二进制数据
            const chunk =
            /* istanbul ignore next */
            (cov_155oxohehp().s[55]++, decoder.decode(value, {
              stream: true
            }));
            /* istanbul ignore next */
            cov_155oxohehp().s[56]++;
            buffer += chunk;
            // 处理完整的JSON对象
            let boundary =
            /* istanbul ignore next */
            (cov_155oxohehp().s[57]++, buffer.indexOf("\n"));
            /* istanbul ignore next */
            cov_155oxohehp().s[58]++;
            while (boundary !== -1) {
              const part =
              /* istanbul ignore next */
              (cov_155oxohehp().s[59]++, buffer.substring(0, boundary));
              /* istanbul ignore next */
              cov_155oxohehp().s[60]++;
              buffer = buffer.substring(boundary + 1);
              /* istanbul ignore next */
              cov_155oxohehp().s[61]++;
              if (part.trim()) {
                /* istanbul ignore next */
                cov_155oxohehp().b[13][0]++;
                cov_155oxohehp().s[62]++;
                try {
                  /* istanbul ignore next */
                  cov_155oxohehp().s[63]++;
                  // 处理SSE格式数据
                  if (part.startsWith("data: ")) {
                    /* istanbul ignore next */
                    cov_155oxohehp().b[14][0]++;
                    const jsonStr =
                    /* istanbul ignore next */
                    (cov_155oxohehp().s[64]++, part.substring(6));
                    /* istanbul ignore next */
                    cov_155oxohehp().s[65]++;
                    if (jsonStr === "[DONE]") {
                      /* istanbul ignore next */
                      cov_155oxohehp().b[15][0]++;
                      cov_155oxohehp().s[66]++;
                      continue;
                    } else
                    /* istanbul ignore next */
                    {
                      cov_155oxohehp().b[15][1]++;
                    }
                    const data =
                    /* istanbul ignore next */
                    (cov_155oxohehp().s[67]++, JSON.parse(jsonStr));
                    // 处理工具调用
                    /* istanbul ignore next */
                    cov_155oxohehp().s[68]++;
                    if (
                    /* istanbul ignore next */
                    (cov_155oxohehp().b[17][0]++, data.choices) &&
                    /* istanbul ignore next */
                    (cov_155oxohehp().b[17][1]++, data.choices[0].delta) &&
                    /* istanbul ignore next */
                    (cov_155oxohehp().b[17][2]++, data.choices[0].delta.tool_calls)) {
                      /* istanbul ignore next */
                      cov_155oxohehp().b[16][0]++;
                      cov_155oxohehp().s[69]++;
                      this.handleToolCall(data.choices[0].delta.tool_calls[0], runId);
                    } else
                    /* istanbul ignore next */
                    {
                      cov_155oxohehp().b[16][1]++;
                    }
                    // 处理文本内容
                    cov_155oxohehp().s[70]++;
                    if (
                    /* istanbul ignore next */
                    (cov_155oxohehp().b[19][0]++, data.choices) &&
                    /* istanbul ignore next */
                    (cov_155oxohehp().b[19][1]++, data.choices[0].delta) &&
                    /* istanbul ignore next */
                    (cov_155oxohehp().b[19][2]++, data.choices[0].delta.content)) {
                      /* istanbul ignore next */
                      cov_155oxohehp().b[18][0]++;
                      const content =
                      /* istanbul ignore next */
                      (cov_155oxohehp().s[71]++, data.choices[0].delta.content);
                      /* istanbul ignore next */
                      cov_155oxohehp().s[72]++;
                      fullContent += content;
                      // 发送消息内容事件
                      /* istanbul ignore next */
                      cov_155oxohehp().s[73]++;
                      this.emitEvent({
                        type: "TEXT_MESSAGE_CONTENT",
                        messageId,
                        delta: content,
                        timestamp: Date.now()
                      });
                      // 将原始数据传递给观察者
                      /* istanbul ignore next */
                      cov_155oxohehp().s[74]++;
                      observer.next({
                        text: content
                      });
                    } else
                    /* istanbul ignore next */
                    {
                      cov_155oxohehp().b[18][1]++;
                    }
                  } else {
                    /* istanbul ignore next */
                    cov_155oxohehp().b[14][1]++;
                    const data =
                    /* istanbul ignore next */
                    (cov_155oxohehp().s[75]++, JSON.parse(part));
                    /* istanbul ignore next */
                    cov_155oxohehp().s[76]++;
                    observer.next(data);
                  }
                } catch (e) {
                  /* istanbul ignore next */
                  cov_155oxohehp().s[77]++;
                  if (this.options.debug) {
                    /* istanbul ignore next */
                    cov_155oxohehp().b[20][0]++;
                    cov_155oxohehp().s[78]++;
                    console.error("Failed to parse JSON:", part, e);
                  } else
                  /* istanbul ignore next */
                  {
                    cov_155oxohehp().b[20][1]++;
                  }
                }
              } else
              /* istanbul ignore next */
              {
                cov_155oxohehp().b[13][1]++;
              }
              cov_155oxohehp().s[79]++;
              boundary = buffer.indexOf("\n");
            }
            // 继续处理下一个块
            /* istanbul ignore next */
            cov_155oxohehp().s[80]++;
            processChunk();
          } catch (error) {
            /* istanbul ignore next */
            cov_155oxohehp().s[81]++;
            if (this.options.debug) {
              /* istanbul ignore next */
              cov_155oxohehp().b[21][0]++;
              cov_155oxohehp().s[82]++;
              console.error("Error processing stream:", error);
            } else
            /* istanbul ignore next */
            {
              cov_155oxohehp().b[21][1]++;
            }
            cov_155oxohehp().s[83]++;
            observer.error(error);
          }
        };
        /* istanbul ignore next */
        cov_155oxohehp().s[84]++;
        processChunk();
        // 返回清理函数
        /* istanbul ignore next */
        cov_155oxohehp().s[85]++;
        return () => {
          /* istanbul ignore next */
          cov_155oxohehp().f[6]++;
          cov_155oxohehp().s[86]++;
          reader.cancel().catch(err => {
            /* istanbul ignore next */
            cov_155oxohehp().f[7]++;
            cov_155oxohehp().s[87]++;
            if (this.options.debug) {
              /* istanbul ignore next */
              cov_155oxohehp().b[22][0]++;
              cov_155oxohehp().s[88]++;
              console.error("Error cancelling reader:", err);
            } else
            /* istanbul ignore next */
            {
              cov_155oxohehp().b[22][1]++;
            }
          });
        };
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_155oxohehp().s[89]++;
      console.error("Error in chat completion:", error);
      // 发送错误事件
      /* istanbul ignore next */
      cov_155oxohehp().s[90]++;
      this.emitEvent({
        type: "RUN_ERROR",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_155oxohehp().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_155oxohehp().b[23][1]++, "Unknown error"),
        code: 500,
        timestamp: Date.now()
      });
      // 发送消息结束和运行结束事件
      /* istanbul ignore next */
      cov_155oxohehp().s[91]++;
      this.emitEvent({
        type: "TEXT_MESSAGE_END",
        messageId,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[92]++;
      this.emitEvent({
        type: "RUN_FINISHED",
        threadId: this.options.threadId,
        runId,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[93]++;
      throw error;
    }
  }
  /**
   * 处理工具调用
   */
  handleToolCall(toolCall, runId) {
    /* istanbul ignore next */
    cov_155oxohehp().f[8]++;
    const toolCallId =
    /* istanbul ignore next */
    (cov_155oxohehp().s[94]++, `tool-${++this.toolCallIdCounter}`);
    // 发送工具调用开始事件
    /* istanbul ignore next */
    cov_155oxohehp().s[95]++;
    this.emitEvent({
      type: "TOOL_CALL_START",
      toolCallId,
      toolCallName:
      /* istanbul ignore next */
      (cov_155oxohehp().b[24][0]++, toolCall.function?.name) ||
      /* istanbul ignore next */
      (cov_155oxohehp().b[24][1]++, "unknown"),
      parentMessageId: `msg-${this.messageIdCounter}`,
      timestamp: Date.now()
    });
    // 发送工具调用参数事件
    /* istanbul ignore next */
    cov_155oxohehp().s[96]++;
    if (toolCall.function?.arguments) {
      /* istanbul ignore next */
      cov_155oxohehp().b[25][0]++;
      cov_155oxohehp().s[97]++;
      this.emitEvent({
        type: "TOOL_CALL_ARGS",
        toolCallId,
        delta: toolCall.function.arguments,
        timestamp: Date.now()
      });
    } else
    /* istanbul ignore next */
    {
      cov_155oxohehp().b[25][1]++;
    }
    // 发送工具调用结束事件
    cov_155oxohehp().s[98]++;
    this.emitEvent({
      type: "TOOL_CALL_END",
      toolCallId,
      timestamp: Date.now()
    });
  }
  /**
   * 获取聊天历史记录
   */
  async fetchChatHistory(appId, chatId) {
    /* istanbul ignore next */
    cov_155oxohehp().f[9]++;
    cov_155oxohehp().s[99]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_155oxohehp().s[100]++, await fetch(`${this.options.proxyUrl}/fastgpt/chat-history`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          appId,
          chatId
        })
      }));
      /* istanbul ignore next */
      cov_155oxohehp().s[101]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_155oxohehp().b[26][0]++;
        cov_155oxohehp().s[102]++;
        throw new Error(`Failed to fetch chat history: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[26][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_155oxohehp().s[103]++, await response.json());
      // 发送消息快照事件
      /* istanbul ignore next */
      cov_155oxohehp().s[104]++;
      this.emitEvent({
        type: "MESSAGES_SNAPSHOT",
        messages:
        /* istanbul ignore next */
        (cov_155oxohehp().b[27][0]++, data.messages) ||
        /* istanbul ignore next */
        (cov_155oxohehp().b[27][1]++, []),
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[105]++;
      return data;
    } catch (error) {
      /* istanbul ignore next */
      cov_155oxohehp().s[106]++;
      console.error("Error fetching chat history:", error);
      /* istanbul ignore next */
      cov_155oxohehp().s[107]++;
      throw error;
    }
  }
  /**
   * 获取建议问题
   */
  async fetchSuggestedQuestions(appId, chatId) {
    /* istanbul ignore next */
    cov_155oxohehp().f[10]++;
    cov_155oxohehp().s[108]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_155oxohehp().s[109]++, await fetch(`${this.options.proxyUrl}/fastgpt/suggested-questions`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          appId,
          chatId
        })
      }));
      /* istanbul ignore next */
      cov_155oxohehp().s[110]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_155oxohehp().b[28][0]++;
        cov_155oxohehp().s[111]++;
        throw new Error(`Failed to fetch suggested questions: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[28][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_155oxohehp().s[112]++, await response.json());
      const questions =
      /* istanbul ignore next */
      (cov_155oxohehp().s[113]++,
      /* istanbul ignore next */
      (cov_155oxohehp().b[29][0]++, data.questions) ||
      /* istanbul ignore next */
      (cov_155oxohehp().b[29][1]++, []));
      // 更新状态
      /* istanbul ignore next */
      cov_155oxohehp().s[114]++;
      this.updateState({
        suggestedQuestions: questions
      });
      // 发送自定义事件
      /* istanbul ignore next */
      cov_155oxohehp().s[115]++;
      this.emitEvent({
        type: "CUSTOM",
        name: "suggested_questions",
        value: questions,
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[116]++;
      return questions;
    } catch (error) {
      /* istanbul ignore next */
      cov_155oxohehp().s[117]++;
      console.error("Error fetching suggested questions:", error);
      /* istanbul ignore next */
      cov_155oxohehp().s[118]++;
      return [];
    }
  }
  /**
   * 提交消息反馈（点赞/点踩）
   */
  async submitFeedback(appId, chatId, messageId, feedback, comment) {
    /* istanbul ignore next */
    cov_155oxohehp().f[11]++;
    cov_155oxohehp().s[119]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_155oxohehp().s[120]++, await fetch(`${this.options.proxyUrl}/fastgpt/feedback`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          appId,
          chatId,
          messageId,
          feedback,
          comment
        })
      }));
      /* istanbul ignore next */
      cov_155oxohehp().s[121]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_155oxohehp().b[30][0]++;
        cov_155oxohehp().s[122]++;
        throw new Error(`Failed to submit feedback: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[30][1]++;
      }
      // 发送自定义事件
      cov_155oxohehp().s[123]++;
      this.emitEvent({
        type: "CUSTOM",
        name: "message_feedback",
        value: {
          messageId,
          feedback,
          comment,
          success: true
        },
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[124]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_155oxohehp().s[125]++;
      console.error("Error submitting feedback:", error);
      // 发送自定义事件
      /* istanbul ignore next */
      cov_155oxohehp().s[126]++;
      this.emitEvent({
        type: "CUSTOM",
        name: "message_feedback",
        value: {
          messageId,
          feedback,
          comment,
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_155oxohehp().b[31][0]++, error.message) :
          /* istanbul ignore next */
          (cov_155oxohehp().b[31][1]++, "Unknown error")
        },
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[127]++;
      return false;
    }
  }
  /**
   * 生成长图
   */
  async generateLongImage(appId, chatId, includeWelcome =
  /* istanbul ignore next */
  (cov_155oxohehp().b[32][0]++, true)) {
    /* istanbul ignore next */
    cov_155oxohehp().f[12]++;
    cov_155oxohehp().s[128]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_155oxohehp().s[129]++, await fetch(`${this.options.proxyUrl}/fastgpt/generate-image`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          appId,
          chatId,
          includeWelcome
        })
      }));
      /* istanbul ignore next */
      cov_155oxohehp().s[130]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_155oxohehp().b[33][0]++;
        cov_155oxohehp().s[131]++;
        throw new Error(`Failed to generate long image: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[33][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_155oxohehp().s[132]++, await response.json());
      const imageUrl =
      /* istanbul ignore next */
      (cov_155oxohehp().s[133]++, data.imageUrl);
      // 发送自定义事件
      /* istanbul ignore next */
      cov_155oxohehp().s[134]++;
      this.emitEvent({
        type: "CUSTOM",
        name: "long_image_generated",
        value: {
          imageUrl,
          chatId
        },
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[135]++;
      return imageUrl;
    } catch (error) {
      /* istanbul ignore next */
      cov_155oxohehp().s[136]++;
      console.error("Error generating long image:", error);
      /* istanbul ignore next */
      cov_155oxohehp().s[137]++;
      throw error;
    }
  }
  /**
   * 批量转发消息
   */
  async batchForward(sourceAppId, sourceChatId, targetAppIds, messageIds) {
    /* istanbul ignore next */
    cov_155oxohehp().f[13]++;
    cov_155oxohehp().s[138]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_155oxohehp().s[139]++, await fetch(`${this.options.proxyUrl}/fastgpt/batch-forward`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          sourceAppId,
          sourceChatId,
          targetAppIds,
          messageIds
        })
      }));
      /* istanbul ignore next */
      cov_155oxohehp().s[140]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_155oxohehp().b[34][0]++;
        cov_155oxohehp().s[141]++;
        throw new Error(`Failed to batch forward: ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_155oxohehp().b[34][1]++;
      }
      const data =
      /* istanbul ignore next */
      (cov_155oxohehp().s[142]++, await response.json());
      // 发送自定义事件
      /* istanbul ignore next */
      cov_155oxohehp().s[143]++;
      this.emitEvent({
        type: "CUSTOM",
        name: "batch_forward_completed",
        value: {
          results: data.results,
          success: data.success
        },
        timestamp: Date.now()
      });
      /* istanbul ignore next */
      cov_155oxohehp().s[144]++;
      return data;
    } catch (error) {
      /* istanbul ignore next */
      cov_155oxohehp().s[145]++;
      console.error("Error in batch forward:", error);
      /* istanbul ignore next */
      cov_155oxohehp().s[146]++;
      throw error;
    }
  }
  /**
   * 更新状态
   */
  updateState(newState) {
    /* istanbul ignore next */
    cov_155oxohehp().f[14]++;
    cov_155oxohehp().s[147]++;
    this.state = {
      ...this.state,
      ...newState
    };
  }
  /**
   * 发送事件到事件流
   */
  emitEvent(event) {
    /* istanbul ignore next */
    cov_155oxohehp().f[15]++;
    cov_155oxohehp().s[148]++;
    if (this.options.debug) {
      /* istanbul ignore next */
      cov_155oxohehp().b[35][0]++;
      cov_155oxohehp().s[149]++;
      console.debug("AG-UI Event:", event);
    } else
    /* istanbul ignore next */
    {
      cov_155oxohehp().b[35][1]++;
    }
    cov_155oxohehp().s[150]++;
    this.eventSubject.next(event);
  }
}
/* istanbul ignore next */
cov_155oxohehp().s[151]++;
exports.AgUICoreAdapter = AgUICoreAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,