{"version":3,"names":["cov_lfrx3ax7o","actualCoverage","s","exports","migrateToStandardRuntime","rxjs_1","require","runtime_1","AgUIAdapter","constructor","options","b","f","eventSubject","Subject","messageIdCounter","threadId","Date","now","getEventStream","asObservable","handleFastGPTStreamResponse","response","messageId","runId","emitEvent","type","timestamp","role","Observable","observer","reader","getReader","decoder","TextDecoder","buffer","processChunk","done","value","read","chunk","next","complete","decode","stream","boundary","indexOf","part","substring","trim","data","JSON","parse","text","delta","e","debug","console","error","cancel","catch","err","handleCADAnalysisResponse","resultText","stringify","from","event","adapter","AgUIRuntime"],"sources":["E:\\zk-agent\\lib\\ag-ui\\adapter.ts"],"sourcesContent":["import { Observable, Subject, from } from \"rxjs\"\nimport type {\n  BaseEvent,\n  TextMessageStartEvent,\n  TextMessageContentEvent,\n  TextMessageEndEvent,\n  RunStartedEvent,\n  RunFinishedEvent,\n} from \"./types\"\nimport { AgUIRuntime } from \"./protocol/runtime\"\n\n// CAD 分析响应接口\ninterface CADAnalysisResponse {\n  status: 'success' | 'error' | 'processing';\n  data?: {\n    fileName?: string;\n    fileSize?: number;\n    analysisResult?: Record<string, unknown>;\n    dimensions?: {\n      width?: number;\n      height?: number;\n      depth?: number;\n    };\n    materials?: string[];\n    complexity?: 'low' | 'medium' | 'high';\n    warnings?: string[];\n  };\n  error?: {\n    code: string;\n    message: string;\n    details?: Record<string, unknown>;\n  };\n  timestamp: number;\n  processingTime?: number;\n}\n\n/**\n * @deprecated 请使用 AgUIRuntime 替代\n * 这个适配器将在下个版本中移除\n */\n/**\n * AG-UI适配器 - 将现有系统的消息流转换为AG-UI事件流\n * 该适配器确保现有系统功能不变的情况下支持AG-UI协议\n */\nexport class AgUIAdapter {\n  private eventSubject = new Subject<BaseEvent>()\n  private messageIdCounter = 0\n\n  constructor(\n    private options: {\n      debug?: boolean\n      threadId?: string\n    } = {},\n  ) {\n    this.options.threadId = this.options.threadId || `thread-${Date.now()}`\n  }\n\n  /**\n   * 获取事件流Observable\n   */\n  public getEventStream(): Observable<BaseEvent> {\n    return this.eventSubject.asObservable()\n  }\n\n  /**\n   * 处理来自FastGPT的流式响应\n   * 将其转换为AG-UI事件流，但不改变原有处理逻辑\n   */\n  public handleFastGPTStreamResponse(response: ReadableStream<Uint8Array>): Observable<unknown> {\n    // 生成唯一消息ID\n    const messageId = `msg-${++this.messageIdCounter}`\n    const runId = `run-${Date.now()}`\n\n    // 发送运行开始事件\n    this.emitEvent({\n      type: \"RUN_STARTED\",\n      threadId: this.options.threadId,\n      runId,\n      timestamp: Date.now(),\n    } as RunStartedEvent)\n\n    // 发送消息开始事件\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_START\",\n      messageId,\n      role: \"assistant\",\n      timestamp: Date.now(),\n    } as TextMessageStartEvent)\n\n    // 创建一个新的Observable来处理流式响应\n    return new Observable<unknown>((observer) => {\n      // 保持原有的处理逻辑\n      const reader = response.getReader()\n      const decoder = new TextDecoder()\n      let buffer = \"\"\n\n      const processChunk = async () => {\n        try {\n          const { done, value } = await reader.read()\n\n          if (done) {\n            // 处理缓冲区中剩余的数据\n            if (buffer) {\n              const chunk = buffer\n              buffer = \"\"\n              observer.next(chunk)\n            }\n\n            // 发送消息结束事件\n            this.emitEvent({\n              type: \"TEXT_MESSAGE_END\",\n              messageId,\n              timestamp: Date.now(),\n            } as TextMessageEndEvent)\n\n            // 发送运行结束事件\n            this.emitEvent({\n              type: \"RUN_FINISHED\",\n              threadId: this.options.threadId,\n              runId,\n              timestamp: Date.now(),\n            } as RunFinishedEvent)\n\n            observer.complete()\n            return\n          }\n\n          // 解码二进制数据\n          const chunk = decoder.decode(value, { stream: true })\n          buffer += chunk\n\n          // 处理完整的JSON对象\n          let boundary = buffer.indexOf(\"\\n\")\n          while (boundary !== -1) {\n            const part = buffer.substring(0, boundary)\n            buffer = buffer.substring(boundary + 1)\n\n            if (part.trim()) {\n              try {\n                const data = JSON.parse(part)\n\n                // 发送消息内容事件\n                if (data.text) {\n                  this.emitEvent({\n                    type: \"TEXT_MESSAGE_CONTENT\",\n                    messageId,\n                    delta: data.text,\n                    timestamp: Date.now(),\n                  } as TextMessageContentEvent)\n                }\n\n                // 将原始数据传递给观察者\n                observer.next(data)\n              } catch (e) {\n                if (this.options.debug) {\n                  console.error(\"Failed to parse JSON:\", part, e)\n                }\n              }\n            }\n\n            boundary = buffer.indexOf(\"\\n\")\n          }\n\n          // 继续处理下一个块\n          processChunk()\n        } catch (error) {\n          if (this.options.debug) {\n            console.error(\"Error processing stream:\", error)\n          }\n          observer.error(error)\n        }\n      }\n\n      processChunk()\n\n      // 返回清理函数\n      return () => {\n        reader.cancel().catch((err) => {\n          if (this.options.debug) {\n            console.error(\"Error cancelling reader:\", err)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * 处理CAD解读智能体的响应\n   */\n  public handleCADAnalysisResponse(response: CADAnalysisResponse): Observable<CADAnalysisResponse> {\n    const messageId = `msg-${++this.messageIdCounter}`\n    const runId = `run-${Date.now()}`\n\n    // 发送运行开始事件\n    this.emitEvent({\n      type: \"RUN_STARTED\",\n      threadId: this.options.threadId,\n      runId,\n      timestamp: Date.now(),\n    } as RunStartedEvent)\n\n    // 将CAD分析结果转换为AG-UI事件\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_START\",\n      messageId,\n      role: \"assistant\",\n      timestamp: Date.now(),\n    } as TextMessageStartEvent)\n\n    // 将分析结果作为消息内容发送\n    const resultText = JSON.stringify(response)\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_CONTENT\",\n      messageId,\n      delta: resultText,\n      timestamp: Date.now(),\n    } as TextMessageContentEvent)\n\n    // 发送消息结束事件\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_END\",\n      messageId,\n      timestamp: Date.now(),\n    } as TextMessageEndEvent)\n\n    // 发送运行结束事件\n    this.emitEvent({\n      type: \"RUN_FINISHED\",\n      threadId: this.options.threadId,\n      runId,\n      timestamp: Date.now(),\n    } as RunFinishedEvent)\n\n    // 返回原始响应的Observable\n    return from([response])\n  }\n\n  /**\n   * 发送事件到事件流\n   */\n  private emitEvent(event: BaseEvent): void {\n    if (this.options.debug) {\n      console.debug(\"AG-UI Event:\", event)\n    }\n    this.eventSubject.next(event)\n  }\n}\n\nexport function migrateToStandardRuntime(adapter: AgUIAdapter): AgUIRuntime {\n  // 迁移逻辑\n  return new AgUIRuntime()\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgDE;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;;;;AAwMFC,OAAA,CAAAC,wBAAA,GAAAA,wBAAA;AAxPA,MAAAC,MAAA;AAAA;AAAA,CAAAL,aAAA,GAAAE,CAAA,OAAAI,OAAA;AASA,MAAAC,SAAA;AAAA;AAAA,CAAAP,aAAA,GAAAE,CAAA,OAAAI,OAAA;AA2BA;;;;AAIA;;;;AAIA,MAAaE,WAAW;EAItBC,YACUC,OAAA;EAAA;EAAA,CAAAV,aAAA,GAAAW,CAAA,UAGJ,EAAE;IAAA;IAAAX,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IAHE,KAAAQ,OAAO,GAAPA,OAAO;IAGT;IAAAV,aAAA,GAAAE,CAAA;IAPA,KAAAW,YAAY,GAAG,IAAIR,MAAA,CAAAS,OAAO,EAAa;IAAA;IAAAd,aAAA,GAAAE,CAAA;IACvC,KAAAa,gBAAgB,GAAG,CAAC;IAAA;IAAAf,aAAA,GAAAE,CAAA;IAQ1B,IAAI,CAACQ,OAAO,CAACM,QAAQ;IAAG;IAAA,CAAAhB,aAAA,GAAAW,CAAA,cAAI,CAACD,OAAO,CAACM,QAAQ;IAAA;IAAA,CAAAhB,aAAA,GAAAW,CAAA,UAAI,UAAUM,IAAI,CAACC,GAAG,EAAE,EAAE;EACzE;EAEA;;;EAGOC,cAAcA,CAAA;IAAA;IAAAnB,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IACnB,OAAO,IAAI,CAACW,YAAY,CAACO,YAAY,EAAE;EACzC;EAEA;;;;EAIOC,2BAA2BA,CAACC,QAAoC;IAAA;IAAAtB,aAAA,GAAAY,CAAA;IACrE;IACA,MAAMW,SAAS;IAAA;IAAA,CAAAvB,aAAA,GAAAE,CAAA,QAAG,OAAO,EAAE,IAAI,CAACa,gBAAgB,EAAE;IAClD,MAAMS,KAAK;IAAA;IAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAG,OAAOe,IAAI,CAACC,GAAG,EAAE,EAAE;IAEjC;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACuB,SAAS,CAAC;MACbC,IAAI,EAAE,aAAa;MACnBV,QAAQ,EAAE,IAAI,CAACN,OAAO,CAACM,QAAQ;MAC/BQ,KAAK;MACLG,SAAS,EAAEV,IAAI,CAACC,GAAG;KACD,CAAC;IAErB;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACuB,SAAS,CAAC;MACbC,IAAI,EAAE,oBAAoB;MAC1BH,SAAS;MACTK,IAAI,EAAE,WAAW;MACjBD,SAAS,EAAEV,IAAI,CAACC,GAAG;KACK,CAAC;IAE3B;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,OAAO,IAAIG,MAAA,CAAAwB,UAAU,CAAWC,QAAQ,IAAI;MAAA;MAAA9B,aAAA,GAAAY,CAAA;MAC1C;MACA,MAAMmB,MAAM;MAAA;MAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAGoB,QAAQ,CAACU,SAAS,EAAE;MACnC,MAAMC,OAAO;MAAA;MAAA,CAAAjC,aAAA,GAAAE,CAAA,QAAG,IAAIgC,WAAW,EAAE;MACjC,IAAIC,MAAM;MAAA;MAAA,CAAAnC,aAAA,GAAAE,CAAA,QAAG,EAAE;MAAA;MAAAF,aAAA,GAAAE,CAAA;MAEf,MAAMkC,YAAY,GAAG,MAAAA,CAAA,KAAW;QAAA;QAAApC,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAE,CAAA;QAC9B,IAAI;UACF,MAAM;YAAEmC,IAAI;YAAEC;UAAK,CAAE;UAAA;UAAA,CAAAtC,aAAA,GAAAE,CAAA,QAAG,MAAM6B,MAAM,CAACQ,IAAI,EAAE;UAAA;UAAAvC,aAAA,GAAAE,CAAA;UAE3C,IAAImC,IAAI,EAAE;YAAA;YAAArC,aAAA,GAAAW,CAAA;YAAAX,aAAA,GAAAE,CAAA;YACR;YACA,IAAIiC,MAAM,EAAE;cAAA;cAAAnC,aAAA,GAAAW,CAAA;cACV,MAAM6B,KAAK;cAAA;cAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAGiC,MAAM;cAAA;cAAAnC,aAAA,GAAAE,CAAA;cACpBiC,MAAM,GAAG,EAAE;cAAA;cAAAnC,aAAA,GAAAE,CAAA;cACX4B,QAAQ,CAACW,IAAI,CAACD,KAAK,CAAC;YACtB,CAAC;YAAA;YAAA;cAAAxC,aAAA,GAAAW,CAAA;YAAA;YAED;YAAAX,aAAA,GAAAE,CAAA;YACA,IAAI,CAACuB,SAAS,CAAC;cACbC,IAAI,EAAE,kBAAkB;cACxBH,SAAS;cACTI,SAAS,EAAEV,IAAI,CAACC,GAAG;aACG,CAAC;YAEzB;YAAA;YAAAlB,aAAA,GAAAE,CAAA;YACA,IAAI,CAACuB,SAAS,CAAC;cACbC,IAAI,EAAE,cAAc;cACpBV,QAAQ,EAAE,IAAI,CAACN,OAAO,CAACM,QAAQ;cAC/BQ,KAAK;cACLG,SAAS,EAAEV,IAAI,CAACC,GAAG;aACA,CAAC;YAAA;YAAAlB,aAAA,GAAAE,CAAA;YAEtB4B,QAAQ,CAACY,QAAQ,EAAE;YAAA;YAAA1C,aAAA,GAAAE,CAAA;YACnB;UACF,CAAC;UAAA;UAAA;YAAAF,aAAA,GAAAW,CAAA;UAAA;UAED;UACA,MAAM6B,KAAK;UAAA;UAAA,CAAAxC,aAAA,GAAAE,CAAA,QAAG+B,OAAO,CAACU,MAAM,CAACL,KAAK,EAAE;YAAEM,MAAM,EAAE;UAAI,CAAE,CAAC;UAAA;UAAA5C,aAAA,GAAAE,CAAA;UACrDiC,MAAM,IAAIK,KAAK;UAEf;UACA,IAAIK,QAAQ;UAAA;UAAA,CAAA7C,aAAA,GAAAE,CAAA,QAAGiC,MAAM,CAACW,OAAO,CAAC,IAAI,CAAC;UAAA;UAAA9C,aAAA,GAAAE,CAAA;UACnC,OAAO2C,QAAQ,KAAK,CAAC,CAAC,EAAE;YACtB,MAAME,IAAI;YAAA;YAAA,CAAA/C,aAAA,GAAAE,CAAA,QAAGiC,MAAM,CAACa,SAAS,CAAC,CAAC,EAAEH,QAAQ,CAAC;YAAA;YAAA7C,aAAA,GAAAE,CAAA;YAC1CiC,MAAM,GAAGA,MAAM,CAACa,SAAS,CAACH,QAAQ,GAAG,CAAC,CAAC;YAAA;YAAA7C,aAAA,GAAAE,CAAA;YAEvC,IAAI6C,IAAI,CAACE,IAAI,EAAE,EAAE;cAAA;cAAAjD,aAAA,GAAAW,CAAA;cAAAX,aAAA,GAAAE,CAAA;cACf,IAAI;gBACF,MAAMgD,IAAI;gBAAA;gBAAA,CAAAlD,aAAA,GAAAE,CAAA,QAAGiD,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;gBAE7B;gBAAA;gBAAA/C,aAAA,GAAAE,CAAA;gBACA,IAAIgD,IAAI,CAACG,IAAI,EAAE;kBAAA;kBAAArD,aAAA,GAAAW,CAAA;kBAAAX,aAAA,GAAAE,CAAA;kBACb,IAAI,CAACuB,SAAS,CAAC;oBACbC,IAAI,EAAE,sBAAsB;oBAC5BH,SAAS;oBACT+B,KAAK,EAAEJ,IAAI,CAACG,IAAI;oBAChB1B,SAAS,EAAEV,IAAI,CAACC,GAAG;mBACO,CAAC;gBAC/B,CAAC;gBAAA;gBAAA;kBAAAlB,aAAA,GAAAW,CAAA;gBAAA;gBAED;gBAAAX,aAAA,GAAAE,CAAA;gBACA4B,QAAQ,CAACW,IAAI,CAACS,IAAI,CAAC;cACrB,CAAC,CAAC,OAAOK,CAAC,EAAE;gBAAA;gBAAAvD,aAAA,GAAAE,CAAA;gBACV,IAAI,IAAI,CAACQ,OAAO,CAAC8C,KAAK,EAAE;kBAAA;kBAAAxD,aAAA,GAAAW,CAAA;kBAAAX,aAAA,GAAAE,CAAA;kBACtBuD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEX,IAAI,EAAEQ,CAAC,CAAC;gBACjD,CAAC;gBAAA;gBAAA;kBAAAvD,aAAA,GAAAW,CAAA;gBAAA;cACH;YACF,CAAC;YAAA;YAAA;cAAAX,aAAA,GAAAW,CAAA;YAAA;YAAAX,aAAA,GAAAE,CAAA;YAED2C,QAAQ,GAAGV,MAAM,CAACW,OAAO,CAAC,IAAI,CAAC;UACjC;UAEA;UAAA;UAAA9C,aAAA,GAAAE,CAAA;UACAkC,YAAY,EAAE;QAChB,CAAC,CAAC,OAAOsB,KAAK,EAAE;UAAA;UAAA1D,aAAA,GAAAE,CAAA;UACd,IAAI,IAAI,CAACQ,OAAO,CAAC8C,KAAK,EAAE;YAAA;YAAAxD,aAAA,GAAAW,CAAA;YAAAX,aAAA,GAAAE,CAAA;YACtBuD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAClD,CAAC;UAAA;UAAA;YAAA1D,aAAA,GAAAW,CAAA;UAAA;UAAAX,aAAA,GAAAE,CAAA;UACD4B,QAAQ,CAAC4B,KAAK,CAACA,KAAK,CAAC;QACvB;MACF,CAAC;MAAA;MAAA1D,aAAA,GAAAE,CAAA;MAEDkC,YAAY,EAAE;MAEd;MAAA;MAAApC,aAAA,GAAAE,CAAA;MACA,OAAO,MAAK;QAAA;QAAAF,aAAA,GAAAY,CAAA;QAAAZ,aAAA,GAAAE,CAAA;QACV6B,MAAM,CAAC4B,MAAM,EAAE,CAACC,KAAK,CAAEC,GAAG,IAAI;UAAA;UAAA7D,aAAA,GAAAY,CAAA;UAAAZ,aAAA,GAAAE,CAAA;UAC5B,IAAI,IAAI,CAACQ,OAAO,CAAC8C,KAAK,EAAE;YAAA;YAAAxD,aAAA,GAAAW,CAAA;YAAAX,aAAA,GAAAE,CAAA;YACtBuD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEG,GAAG,CAAC;UAChD,CAAC;UAAA;UAAA;YAAA7D,aAAA,GAAAW,CAAA;UAAA;QACH,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,CAAC;EACJ;EAEA;;;EAGOmD,yBAAyBA,CAACxC,QAA6B;IAAA;IAAAtB,aAAA,GAAAY,CAAA;IAC5D,MAAMW,SAAS;IAAA;IAAA,CAAAvB,aAAA,GAAAE,CAAA,QAAG,OAAO,EAAE,IAAI,CAACa,gBAAgB,EAAE;IAClD,MAAMS,KAAK;IAAA;IAAA,CAAAxB,aAAA,GAAAE,CAAA,QAAG,OAAOe,IAAI,CAACC,GAAG,EAAE,EAAE;IAEjC;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACuB,SAAS,CAAC;MACbC,IAAI,EAAE,aAAa;MACnBV,QAAQ,EAAE,IAAI,CAACN,OAAO,CAACM,QAAQ;MAC/BQ,KAAK;MACLG,SAAS,EAAEV,IAAI,CAACC,GAAG;KACD,CAAC;IAErB;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACuB,SAAS,CAAC;MACbC,IAAI,EAAE,oBAAoB;MAC1BH,SAAS;MACTK,IAAI,EAAE,WAAW;MACjBD,SAAS,EAAEV,IAAI,CAACC,GAAG;KACK,CAAC;IAE3B;IACA,MAAM6C,UAAU;IAAA;IAAA,CAAA/D,aAAA,GAAAE,CAAA,QAAGiD,IAAI,CAACa,SAAS,CAAC1C,QAAQ,CAAC;IAAA;IAAAtB,aAAA,GAAAE,CAAA;IAC3C,IAAI,CAACuB,SAAS,CAAC;MACbC,IAAI,EAAE,sBAAsB;MAC5BH,SAAS;MACT+B,KAAK,EAAES,UAAU;MACjBpC,SAAS,EAAEV,IAAI,CAACC,GAAG;KACO,CAAC;IAE7B;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACuB,SAAS,CAAC;MACbC,IAAI,EAAE,kBAAkB;MACxBH,SAAS;MACTI,SAAS,EAAEV,IAAI,CAACC,GAAG;KACG,CAAC;IAEzB;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,IAAI,CAACuB,SAAS,CAAC;MACbC,IAAI,EAAE,cAAc;MACpBV,QAAQ,EAAE,IAAI,CAACN,OAAO,CAACM,QAAQ;MAC/BQ,KAAK;MACLG,SAAS,EAAEV,IAAI,CAACC,GAAG;KACA,CAAC;IAEtB;IAAA;IAAAlB,aAAA,GAAAE,CAAA;IACA,OAAO,IAAAG,MAAA,CAAA4D,IAAI,EAAC,CAAC3C,QAAQ,CAAC,CAAC;EACzB;EAEA;;;EAGQG,SAASA,CAACyC,KAAgB;IAAA;IAAAlE,aAAA,GAAAY,CAAA;IAAAZ,aAAA,GAAAE,CAAA;IAChC,IAAI,IAAI,CAACQ,OAAO,CAAC8C,KAAK,EAAE;MAAA;MAAAxD,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAE,CAAA;MACtBuD,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEU,KAAK,CAAC;IACtC,CAAC;IAAA;IAAA;MAAAlE,aAAA,GAAAW,CAAA;IAAA;IAAAX,aAAA,GAAAE,CAAA;IACD,IAAI,CAACW,YAAY,CAAC4B,IAAI,CAACyB,KAAK,CAAC;EAC/B;;AACD;AAAAlE,aAAA,GAAAE,CAAA;AA1MDC,OAAA,CAAAK,WAAA,GAAAA,WAAA;AA4MA,SAAgBJ,wBAAwBA,CAAC+D,OAAoB;EAAA;EAAAnE,aAAA,GAAAY,CAAA;EAAAZ,aAAA,GAAAE,CAAA;EAC3D;EACA,OAAO,IAAIK,SAAA,CAAA6D,WAAW,EAAE;AAC1B","ignoreList":[]}