{"version":3,"names":["cov_7o4ma9m8b","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","logger_1","require","error_handler_1","code_review_system_1","logger","Logger","RuleValidator","constructor","testCases","Map","validationConfig","maxRegexComplexity","maxExecutionTime","enablePerformanceChecks","enableSecurityChecks","initializeDefaultTestCases","getInstance","instance","validateRule","rule","result","valid","errors","warnings","suggestions","performance","regexComplexity","estimatedExecutionTime","memoryUsage","validateBasicProperties","validateRegexPattern","validatePerformance","validateSecurity","runTestCases","generateSuggestions","length","info","ruleId","id","error","push","getErrorMessage","testRule","testCode","startTime","process","hrtime","bigint","initialMemory","heapUsed","matches","lines","split","lineIndex","lineMatches","Array","from","matchAll","pattern","match","index","context","trim","endTime","finalMemory","executionTime","Number","validateRules","rules","results","set","totalRules","validRules","values","filter","r","invalidRules","addTestCase","testCase","existingTests","get","testName","getTestCases","updateConfig","config","updates","Object","keys","description","SecurityRuleCategory","includes","category","SecurityRuleSeverity","severity","isArray","fileExtensions","forEach","ext","startsWith","remediation","references","testString","test","patternSource","source","hasCatastrophicBacktracking","flags","complexity","calculateRegexComplexity","sampleCode","generateSampleCode","testResult","categorizeMemoryUsage","redosPatterns","redosPattern","sensitivePatterns","lowerPattern","toLowerCase","sensitive","validateSecurityRelevance","getDefaultTestCases","code","expectedMatches","expectedPositions","i","expected","actual","INPUT_VALIDATION","INJECTION_PREVENTION","HIGH","CRITICAL","CRYPTOGRAPHY","problematicPatterns","some","p","bytes","fileExtension","samples","categoryPatterns","ACCESS_CONTROL","DATA_PROTECTION","OUTPUT_ENCODING","ERROR_HANDLING","LOGGING_AUDITING","SESSION_MANAGEMENT","CONFIGURATION","relevantKeywords","hasRelevantKeyword","keyword","exports","ruleValidator","bind"],"sources":["E:\\zk-agent\\lib\\security\\rule-validator.ts"],"sourcesContent":["/**\n * @file lib/security/rule-validator.ts\n * @description Security rule validation and testing framework\n * @author Security Team\n * @lastUpdate 2024-12-19\n * @security Production-level rule validation and testing\n */\n\nimport { Logger } from '@/lib/utils/logger';\nimport { getErrorMessage } from '@/lib/utils/error-handler';\nimport { SecurityRule, SecurityRuleCategory, SecurityRuleSeverity } from './code-review-system';\n\nconst logger = new Logger('RuleValidator');\n\n// Rule validation result\nexport interface RuleValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n  suggestions: string[];\n  performance: {\n    regexComplexity: 'low' | 'medium' | 'high';\n    estimatedExecutionTime: number;\n    memoryUsage: 'low' | 'medium' | 'high';\n  };\n}\n\n// Test case for rule validation\nexport interface RuleTestCase {\n  name: string;\n  code: string;\n  expectedMatches: number;\n  expectedPositions?: Array<{ line: number; column: number }>;\n  description: string;\n}\n\n// Rule validation configuration\nexport interface ValidationConfig {\n  maxRegexComplexity: number;\n  maxExecutionTime: number;\n  enablePerformanceChecks: boolean;\n  enableSecurityChecks: boolean;\n  customPatterns?: Array<{\n    pattern: RegExp;\n    message: string;\n    severity: 'error' | 'warning';\n  }>;\n}\n\nexport class RuleValidator {\n  private static instance: RuleValidator;\n  private validationConfig: ValidationConfig;\n  private testCases: Map<string, RuleTestCase[]> = new Map();\n\n  private constructor() {\n    this.validationConfig = {\n      maxRegexComplexity: 100,\n      maxExecutionTime: 1000, // 1 second\n      enablePerformanceChecks: true,\n      enableSecurityChecks: true,\n    };\n    this.initializeDefaultTestCases();\n  }\n\n  public static getInstance(): RuleValidator {\n    if (!RuleValidator.instance) {\n      RuleValidator.instance = new RuleValidator();\n    }\n    return RuleValidator.instance;\n  }\n\n  /**\n   * Validate a security rule\n   */\n  async validateRule(rule: SecurityRule): Promise<RuleValidationResult> {\n    const result: RuleValidationResult = {\n      valid: true,\n      errors: [],\n      warnings: [],\n      suggestions: [],\n      performance: {\n        regexComplexity: 'low',\n        estimatedExecutionTime: 0,\n        memoryUsage: 'low',\n      },\n    };\n\n    try {\n      // Basic validation\n      this.validateBasicProperties(rule, result);\n      \n      // Regex validation\n      this.validateRegexPattern(rule, result);\n      \n      // Performance validation\n      if (this.validationConfig.enablePerformanceChecks) {\n        await this.validatePerformance(rule, result);\n      }\n      \n      // Security validation\n      if (this.validationConfig.enableSecurityChecks) {\n        this.validateSecurity(rule, result);\n      }\n      \n      // Test case validation\n      await this.runTestCases(rule, result);\n      \n      // Generate suggestions\n      this.generateSuggestions(rule, result);\n\n      // Mark as invalid if there are errors\n      if (result.errors.length > 0) {\n        result.valid = false;\n      }\n\n      logger.info('Rule validation completed', {\n        ruleId: rule.id,\n        valid: result.valid,\n        errors: result.errors.length,\n        warnings: result.warnings.length,\n      });\n\n      return result;\n\n    } catch (error) {\n      result.valid = false;\n      result.errors.push(`Validation failed: ${getErrorMessage(error)}`);\n      \n      logger.error('Rule validation failed', {\n        ruleId: rule.id,\n        error: getErrorMessage(error),\n      });\n\n      return result;\n    }\n  }\n\n  /**\n   * Test rule against sample code\n   */\n  async testRule(rule: SecurityRule, testCode: string): Promise<{\n    matches: Array<{\n      line: number;\n      column: number;\n      match: string;\n      context: string;\n    }>;\n    executionTime: number;\n    memoryUsage: number;\n  }> {\n    const startTime = process.hrtime.bigint();\n    const initialMemory = process.memoryUsage().heapUsed;\n\n    try {\n      const matches: Array<{\n        line: number;\n        column: number;\n        match: string;\n        context: string;\n      }> = [];\n\n      const lines = testCode.split('\\n');\n      \n      for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n        const line = lines[lineIndex];\n        const lineMatches = Array.from(line.matchAll(rule.pattern));\n        \n        for (const match of lineMatches) {\n          matches.push({\n            line: lineIndex + 1,\n            column: (match.index || 0) + 1,\n            match: match[0],\n            context: line.trim(),\n          });\n        }\n      }\n\n      const endTime = process.hrtime.bigint();\n      const finalMemory = process.memoryUsage().heapUsed;\n\n      return {\n        matches,\n        executionTime: Number(endTime - startTime) / 1000000, // Convert to milliseconds\n        memoryUsage: finalMemory - initialMemory,\n      };\n\n    } catch (error) {\n      logger.error('Rule testing failed', {\n        ruleId: rule.id,\n        error: getErrorMessage(error),\n      });\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Batch validate multiple rules\n   */\n  async validateRules(rules: SecurityRule[]): Promise<Map<string, RuleValidationResult>> {\n    const results = new Map<string, RuleValidationResult>();\n    \n    for (const rule of rules) {\n      try {\n        const result = await this.validateRule(rule);\n        results.set(rule.id, result);\n      } catch (error) {\n        results.set(rule.id, {\n          valid: false,\n          errors: [`Validation failed: ${getErrorMessage(error)}`],\n          warnings: [],\n          suggestions: [],\n          performance: {\n            regexComplexity: 'high',\n            estimatedExecutionTime: -1,\n            memoryUsage: 'high',\n          },\n        });\n      }\n    }\n\n    logger.info('Batch rule validation completed', {\n      totalRules: rules.length,\n      validRules: Array.from(results.values()).filter(r => r.valid).length,\n      invalidRules: Array.from(results.values()).filter(r => !r.valid).length,\n    });\n\n    return results;\n  }\n\n  /**\n   * Add custom test case for a rule\n   */\n  addTestCase(ruleId: string, testCase: RuleTestCase): void {\n    const existingTests = this.testCases.get(ruleId) || [];\n    existingTests.push(testCase);\n    this.testCases.set(ruleId, existingTests);\n\n    logger.info('Test case added', {\n      ruleId,\n      testName: testCase.name,\n    });\n  }\n\n  /**\n   * Get test cases for a rule\n   */\n  getTestCases(ruleId: string): RuleTestCase[] {\n    return this.testCases.get(ruleId) || [];\n  }\n\n  /**\n   * Update validation configuration\n   */\n  updateConfig(config: Partial<ValidationConfig>): void {\n    this.validationConfig = { ...this.validationConfig, ...config };\n    \n    logger.info('Validation configuration updated', {\n      updates: Object.keys(config),\n    });\n  }\n\n  /**\n   * Private: Validate basic rule properties\n   */\n  private validateBasicProperties(rule: SecurityRule, result: RuleValidationResult): void {\n    // Required fields\n    if (!rule.id || typeof rule.id !== 'string') {\n      result.errors.push('Rule ID is required and must be a string');\n    }\n\n    if (!rule.name || typeof rule.name !== 'string') {\n      result.errors.push('Rule name is required and must be a string');\n    }\n\n    if (!rule.description || typeof rule.description !== 'string') {\n      result.errors.push('Rule description is required and must be a string');\n    }\n\n    // Validate category\n    if (!Object.values(SecurityRuleCategory).includes(rule.category)) {\n      result.errors.push(`Invalid rule category: ${rule.category}`);\n    }\n\n    // Validate severity\n    if (!Object.values(SecurityRuleSeverity).includes(rule.severity)) {\n      result.errors.push(`Invalid rule severity: ${rule.severity}`);\n    }\n\n    // Validate file extensions\n    if (!Array.isArray(rule.fileExtensions) || rule.fileExtensions.length === 0) {\n      result.errors.push('Rule must specify at least one file extension');\n    }\n\n    rule.fileExtensions.forEach(ext => {\n      if (!ext.startsWith('.')) {\n        result.warnings.push(`File extension should start with dot: ${ext}`);\n      }\n    });\n\n    // Validate remediation\n    if (!rule.remediation || typeof rule.remediation !== 'string') {\n      result.warnings.push('Rule should include remediation guidance');\n    }\n\n    // Validate references\n    if (!Array.isArray(rule.references)) {\n      result.warnings.push('Rule should include security references');\n    }\n  }\n\n  /**\n   * Private: Validate regex pattern\n   */\n  private validateRegexPattern(rule: SecurityRule, result: RuleValidationResult): void {\n    try {\n      // Test if regex is valid\n      const testString = 'test';\n      rule.pattern.test(testString);\n\n      // Check for common regex issues\n      const patternSource = rule.pattern.source;\n\n      // Check for catastrophic backtracking\n      if (this.hasCatastrophicBacktracking(patternSource)) {\n        result.errors.push('Regex pattern may cause catastrophic backtracking');\n      }\n\n      // Check for case sensitivity\n      if (!rule.pattern.flags.includes('i') && patternSource.includes('[a-z]')) {\n        result.warnings.push('Consider making pattern case-insensitive with /i flag');\n      }\n\n      // Check for global flag\n      if (!rule.pattern.flags.includes('g')) {\n        result.warnings.push('Consider using global flag /g to find all matches');\n      }\n\n      // Check for overly broad patterns\n      if (patternSource.includes('.*') && patternSource.length < 10) {\n        result.warnings.push('Pattern may be too broad and generate false positives');\n      }\n\n      // Check for anchors\n      if (!patternSource.includes('^') && !patternSource.includes('$') && \n          !patternSource.includes('\\\\b')) {\n        result.suggestions.push('Consider using word boundaries (\\\\b) or anchors (^ $) for more precise matching');\n      }\n\n    } catch (error) {\n      result.errors.push(`Invalid regex pattern: ${getErrorMessage(error)}`);\n    }\n  }\n\n  /**\n   * Private: Validate performance characteristics\n   */\n  private async validatePerformance(rule: SecurityRule, result: RuleValidationResult): Promise<void> {\n    try {\n      // Calculate regex complexity\n      const complexity = this.calculateRegexComplexity(rule.pattern.source);\n      result.performance.regexComplexity = complexity;\n\n      if (complexity === 'high') {\n        result.warnings.push('High regex complexity may impact performance');\n      }\n\n      // Test execution time with sample data\n      const sampleCode = this.generateSampleCode(rule.fileExtensions[0]);\n      const testResult = await this.testRule(rule, sampleCode);\n      \n      result.performance.estimatedExecutionTime = testResult.executionTime;\n      result.performance.memoryUsage = this.categorizeMemoryUsage(testResult.memoryUsage);\n\n      if (testResult.executionTime > this.validationConfig.maxExecutionTime) {\n        result.warnings.push(`Execution time (${testResult.executionTime}ms) exceeds threshold`);\n      }\n\n      if (result.performance.memoryUsage === 'high') {\n        result.warnings.push('High memory usage detected during pattern matching');\n      }\n\n    } catch (error) {\n      result.warnings.push(`Performance validation failed: ${getErrorMessage(error)}`);\n    }\n  }\n\n  /**\n   * Private: Validate security aspects\n   */\n  private validateSecurity(rule: SecurityRule, result: RuleValidationResult): void {\n    const patternSource = rule.pattern.source;\n\n    // Check for potential ReDoS patterns\n    const redosPatterns = [\n      /\\(\\.\\*\\+\\)/,\n      /\\(\\.\\+\\*\\)/,\n      /\\(\\[.*\\]\\+\\)\\+/,\n      /\\(\\[.*\\]\\*\\)\\+/,\n    ];\n\n    for (const redosPattern of redosPatterns) {\n      if (redosPattern.test(patternSource)) {\n        result.errors.push('Pattern contains potential ReDoS (Regular Expression Denial of Service) vulnerability');\n        break;\n      }\n    }\n\n    // Check for overly permissive patterns\n    if (patternSource === '.*' || patternSource === '.+') {\n      result.errors.push('Pattern is too permissive and will match everything');\n    }\n\n    // Check for patterns that might leak sensitive data\n    const sensitivePatterns = ['password', 'token', 'key', 'secret'];\n    const lowerPattern = patternSource.toLowerCase();\n    \n    for (const sensitive of sensitivePatterns) {\n      if (lowerPattern.includes(sensitive) && !lowerPattern.includes('\\\\b')) {\n        result.suggestions.push(`Consider using word boundaries when matching '${sensitive}' to avoid false positives`);\n      }\n    }\n\n    // Validate pattern matches intended security issue\n    this.validateSecurityRelevance(rule, result);\n  }\n\n  /**\n   * Private: Run test cases against rule\n   */\n  private async runTestCases(rule: SecurityRule, result: RuleValidationResult): Promise<void> {\n    const testCases = this.testCases.get(rule.id) || this.getDefaultTestCases(rule.category);\n    \n    for (const testCase of testCases) {\n      try {\n        const testResult = await this.testRule(rule, testCase.code);\n        \n        if (testResult.matches.length !== testCase.expectedMatches) {\n          result.warnings.push(\n            `Test case '${testCase.name}': expected ${testCase.expectedMatches} matches, got ${testResult.matches.length}`\n          );\n        }\n\n        // Check expected positions if provided\n        if (testCase.expectedPositions) {\n          for (let i = 0; i < testCase.expectedPositions.length; i++) {\n            const expected = testCase.expectedPositions[i];\n            const actual = testResult.matches[i];\n            \n            if (!actual || actual.line !== expected.line || actual.column !== expected.column) {\n              result.warnings.push(\n                `Test case '${testCase.name}': position mismatch at match ${i + 1}`\n              );\n            }\n          }\n        }\n\n      } catch (error) {\n        result.errors.push(`Test case '${testCase.name}' failed: ${getErrorMessage(error)}`);\n      }\n    }\n  }\n\n  /**\n   * Private: Generate improvement suggestions\n   */\n  private generateSuggestions(rule: SecurityRule, result: RuleValidationResult): void {\n    // Suggest improvements based on category\n    switch (rule.category) {\n      case SecurityRuleCategory.INPUT_VALIDATION:\n        if (!rule.pattern.source.includes('\\\\b')) {\n          result.suggestions.push('Consider using word boundaries for input validation patterns');\n        }\n        break;\n        \n      case SecurityRuleCategory.INJECTION_PREVENTION:\n        if (rule.severity !== SecurityRuleSeverity.HIGH && rule.severity !== SecurityRuleSeverity.CRITICAL) {\n          result.suggestions.push('Injection prevention rules should typically be HIGH or CRITICAL severity');\n        }\n        break;\n        \n      case SecurityRuleCategory.CRYPTOGRAPHY:\n        if (!rule.remediation.toLowerCase().includes('secure')) {\n          result.suggestions.push('Cryptography rules should emphasize secure alternatives in remediation');\n        }\n        break;\n    }\n\n    // Suggest documentation improvements\n    if (rule.references.length === 0) {\n      result.suggestions.push('Add security references (OWASP, CWE, etc.) for better context');\n    }\n\n    if (rule.remediation.length < 50) {\n      result.suggestions.push('Provide more detailed remediation guidance');\n    }\n  }\n\n  /**\n   * Private: Helper methods\n   */\n  private hasCatastrophicBacktracking(pattern: string): boolean {\n    // Simple heuristic for catastrophic backtracking detection\n    const problematicPatterns = [\n      /\\(\\.\\*\\)\\+/,\n      /\\(\\.\\+\\)\\*/,\n      /\\(\\[.*?\\]\\+\\)\\+/,\n      /\\(\\.\\*\\?\\)\\*/,\n    ];\n\n    return problematicPatterns.some(p => p.test(pattern));\n  }\n\n  private calculateRegexComplexity(pattern: string): 'low' | 'medium' | 'high' {\n    let complexity = 0;\n    \n    // Count complex constructs\n    complexity += (pattern.match(/\\(.*?\\)/g) || []).length * 2; // Groups\n    complexity += (pattern.match(/\\[.*?\\]/g) || []).length; // Character classes\n    complexity += (pattern.match(/[+*?{]/g) || []).length; // Quantifiers\n    complexity += (pattern.match(/\\|/g) || []).length * 2; // Alternations\n    complexity += (pattern.match(/\\\\\\w/g) || []).length; // Escape sequences\n\n    if (complexity > 20) {return 'high';}\n    if (complexity > 10) {return 'medium';}\n    return 'low';\n  }\n\n  private categorizeMemoryUsage(bytes: number): 'low' | 'medium' | 'high' {\n    if (bytes > 1024 * 1024) {return 'high';} // > 1MB\n    if (bytes > 100 * 1024) {return 'medium';} // > 100KB\n    return 'low';\n  }\n\n  private generateSampleCode(fileExtension: string): string {\n    const samples: Record<string, string> = {\n      '.js': `\n        const password = \"hardcoded123\";\n        eval(userInput);\n        document.innerHTML = unsafeData;\n        console.log(\"debug info\");\n      `,\n      '.ts': `\n        const apiKey: string = \"sk-1234567890abcdef\";\n        const result = eval(dynamicCode);\n        Math.random();\n      `,\n      '.py': `\n        password = \"secret123\"\n        eval(user_input)\n        exec(dangerous_code)\n      `,\n      '.java': `\n        String password = \"hardcoded\";\n        Runtime.getRuntime().exec(command);\n      `,\n    };\n\n    return samples[fileExtension] || samples['.js'];\n  }\n\n  private validateSecurityRelevance(rule: SecurityRule, result: RuleValidationResult): void {\n    const pattern = rule.pattern.source.toLowerCase();\n    const category = rule.category;\n\n    // Validate pattern relevance to category\n    const categoryPatterns: Record<SecurityRuleCategory, string[]> = {\n      [SecurityRuleCategory.INPUT_VALIDATION]: ['input', 'validate', 'sanitize', 'escape'],\n      [SecurityRuleCategory.INJECTION_PREVENTION]: ['sql', 'inject', 'eval', 'exec'],\n      [SecurityRuleCategory.CRYPTOGRAPHY]: ['crypto', 'random', 'hash', 'encrypt'],\n      [SecurityRuleCategory.ACCESS_CONTROL]: ['auth', 'permission', 'role', 'access'],\n      [SecurityRuleCategory.DATA_PROTECTION]: ['password', 'secret', 'key', 'token'],\n      [SecurityRuleCategory.OUTPUT_ENCODING]: ['innerHTML', 'output', 'encode', 'escape'],\n      [SecurityRuleCategory.ERROR_HANDLING]: ['error', 'exception', 'catch', 'throw'],\n      [SecurityRuleCategory.LOGGING_AUDITING]: ['log', 'audit', 'track', 'monitor'],\n      [SecurityRuleCategory.SESSION_MANAGEMENT]: ['session', 'cookie', 'jwt', 'token'],\n      [SecurityRuleCategory.CONFIGURATION]: ['config', 'setting', 'env', 'property'],\n    };\n\n    const relevantKeywords = categoryPatterns[category] || [];\n    const hasRelevantKeyword = relevantKeywords.some(keyword => \n      pattern.includes(keyword) || rule.name.toLowerCase().includes(keyword)\n    );\n\n    if (!hasRelevantKeyword) {\n      result.warnings.push(`Pattern may not be relevant to category '${category}'`);\n    }\n  }\n\n  private initializeDefaultTestCases(): void {\n    // Add default test cases for common rule categories\n    this.testCases.set('eval-detection', [\n      {\n        name: 'Basic eval usage',\n        code: 'eval(\"alert(1)\")',\n        expectedMatches: 1,\n        description: 'Should detect basic eval usage',\n      },\n      {\n        name: 'No false positives',\n        code: 'const evaluate = () => {}',\n        expectedMatches: 0,\n        description: 'Should not match similar words',\n      },\n    ]);\n  }\n\n  private getDefaultTestCases(category: SecurityRuleCategory): RuleTestCase[] {\n    // Return category-specific default test cases\n    return [];\n  }\n}\n\n// Export singleton instance\nexport const ruleValidator = RuleValidator.getInstance();\n\n// Export convenience methods\nexport const validateRule = ruleValidator.validateRule.bind(ruleValidator);\nexport const testRule = ruleValidator.testRule.bind(ruleValidator);\nexport const validateRules = ruleValidator.validateRules.bind(ruleValidator);"],"mappings":"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","ignoreList":[]}