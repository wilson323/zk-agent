{"file":"E:\\zk-agent\\tests\\api\\routes\\db.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\db.test.ts"],"sourcesContent":["/**\n * 数据库API路由错误处理测试\n * 测试数据库连接、查询、事务、备份等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '@/app/api/db/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/database/connection-manager', () => ({\n  getConnection: jest.fn(),\n  createConnection: jest.fn(),\n  closeConnection: jest.fn(),\n  testConnection: jest.fn(),\n  getConnectionStatus: jest.fn(),\n  resetConnectionPool: jest.fn(),\n  validateConnectionConfig: jest.fn()\n}));\n\njest.mock('../../../lib/database/query-executor', () => ({\n  executeQuery: jest.fn(),\n  executeTransaction: jest.fn(),\n  executeBatch: jest.fn(),\n  validateQuery: jest.fn(),\n  optimizeQuery: jest.fn(),\n  getQueryPlan: jest.fn(),\n  cancelQuery: jest.fn()\n}));\n\njest.mock('../../../lib/database/schema-manager', () => ({\n  validateSchema: jest.fn(),\n  createTable: jest.fn(),\n  alterTable: jest.fn(),\n  dropTable: jest.fn(),\n  createIndex: jest.fn(),\n  dropIndex: jest.fn(),\n  getTableInfo: jest.fn(),\n  validateTableStructure: jest.fn()\n}));\n\njest.mock('../../../lib/database/backup-manager', () => ({\n  createBackup: jest.fn(),\n  restoreBackup: jest.fn(),\n  listBackups: jest.fn(),\n  deleteBackup: jest.fn(),\n  validateBackup: jest.fn(),\n  scheduleBackup: jest.fn(),\n  getBackupStatus: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkAdminPermissions: jest.fn(),\n  checkDatabasePermissions: jest.fn()\n}));\n\ndescribe('Database API Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/db - Database Status and Query', () => {\n    it('should handle database connection failure', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('DATABASE_ERROR');\n      expect(data.error.message).toContain('Database connection failed');\n    });\n\n    it('should handle database connection timeout', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Connection timeout after 30 seconds'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error.message).toContain('Connection timeout');\n    });\n\n    it('should handle invalid database credentials', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Authentication failed for database user'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n      expect(data.error.message).toContain('Authentication failed');\n    });\n\n    it('should handle database not found', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Database \"nonexistent_db\" does not exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status&database=nonexistent_db');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Database \"nonexistent_db\" does not exist');\n    });\n\n    it('should handle connection pool exhaustion', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Connection pool exhausted: maximum 100 connections reached'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Connection pool exhausted');\n    });\n\n    it('should handle invalid SQL query', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Syntax error in SQL query at line 1'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=INVALID SQL');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Syntax error in SQL query');\n    });\n\n    it('should handle query execution timeout', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Query execution timeout after 60 seconds'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM large_table');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error.message).toContain('Query execution timeout');\n    });\n\n    it('should handle insufficient database permissions', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Permission denied for table \"restricted_table\"'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM restricted_table', {\n        headers: { 'Authorization': 'Bearer limited-user-token' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Permission denied');\n    });\n\n    it('should handle table not found', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Table \"nonexistent_table\" doesn\\'t exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM nonexistent_table');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.message).toContain('Table \"nonexistent_table\" doesn\\'t exist');\n    });\n\n    it('should handle database disk space full', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Disk full: cannot write to database'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=INSERT INTO logs VALUES (1, \\'test\\')');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient Storage\n      expect(data.error.message).toContain('Disk full');\n    });\n\n    it('should handle database corruption', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Database corruption detected in table \"users\"'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM users');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Database corruption detected');\n    });\n  });\n\n  describe('POST /api/db - Database Operations', () => {\n    let validOperationData: any;\n\n    beforeEach(() => {\n      validOperationData = {\n        operation: 'create_table',\n        tableName: 'test_table',\n        schema: {\n          columns: [\n            { name: 'id', type: 'INTEGER', primaryKey: true },\n            { name: 'name', type: 'VARCHAR(255)', nullable: false },\n            { name: 'created_at', type: 'TIMESTAMP', default: 'CURRENT_TIMESTAMP' }\n          ]\n        }\n      };\n    });\n\n    it('should handle missing operation type', async () => {\n      const invalidData = { ...validOperationData };\n      delete invalidData.operation;\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(invalidData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('operation');\n    });\n\n    it('should handle invalid table schema', async () => {\n      const { validateSchema } = require('../../../lib/database/schema-manager');\n      validateSchema.mockRejectedValue(new Error('Invalid column type: INVALID_TYPE'));\n\n      const invalidSchemaData = {\n        ...validOperationData,\n        schema: {\n          columns: [\n            { name: 'id', type: 'INVALID_TYPE' }\n          ]\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(invalidSchemaData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid column type');\n    });\n\n    it('should handle table already exists', async () => {\n      const { createTable } = require('../../../lib/database/schema-manager');\n      createTable.mockRejectedValue(new Error('Table \"test_table\" already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(validOperationData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.code).toBe('CONFLICT');\n      expect(data.error.message).toContain('Table \"test_table\" already exists');\n    });\n\n    it('should handle transaction rollback', async () => {\n      const { executeTransaction } = require('../../../lib/database/query-executor');\n      executeTransaction.mockRejectedValue(new Error('Transaction rolled back due to constraint violation'));\n\n      const transactionData = {\n        operation: 'transaction',\n        queries: [\n          'INSERT INTO users (name) VALUES (\\'John\\')',\n          'INSERT INTO users (name) VALUES (\\'Jane\\')',\n          'INSERT INTO users (name) VALUES (NULL)' // This should fail\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(transactionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Transaction rolled back');\n    });\n\n    it('should handle foreign key constraint violation', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Foreign key constraint violation: referenced record does not exist'));\n\n      const insertData = {\n        operation: 'insert',\n        table: 'orders',\n        data: {\n          user_id: 999, // Non-existent user\n          product_id: 1,\n          quantity: 2\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(insertData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Foreign key constraint violation');\n    });\n\n    it('should handle unique constraint violation', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Unique constraint violation: duplicate key value'));\n\n      const insertData = {\n        operation: 'insert',\n        table: 'users',\n        data: {\n          email: 'existing@example.com', // Already exists\n          name: 'New User'\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(insertData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Unique constraint violation');\n    });\n\n    it('should handle deadlock detection', async () => {\n      const { executeTransaction } = require('../../../lib/database/query-executor');\n      executeTransaction.mockRejectedValue(new Error('Deadlock detected and resolved by rolling back transaction'));\n\n      const transactionData = {\n        operation: 'transaction',\n        queries: [\n          'UPDATE accounts SET balance = balance - 100 WHERE id = 1',\n          'UPDATE accounts SET balance = balance + 100 WHERE id = 2'\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(transactionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Deadlock detected');\n    });\n\n    it('should handle batch operation with partial failures', async () => {\n      const { executeBatch } = require('../../../lib/database/query-executor');\n      executeBatch.mockRejectedValue(new Error('Batch operation failed: 2 of 5 operations succeeded'));\n\n      const batchData = {\n        operation: 'batch',\n        operations: [\n          { type: 'insert', table: 'users', data: { name: 'User1' } },\n          { type: 'insert', table: 'users', data: { name: 'User2' } },\n          { type: 'insert', table: 'users', data: { name: null } }, // Should fail\n          { type: 'insert', table: 'users', data: { name: 'User4' } },\n          { type: 'insert', table: 'users', data: { name: 'User5' } }\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(batchData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.error.message).toContain('Batch operation failed');\n    });\n\n    it('should handle database backup creation failure', async () => {\n      const { createBackup } = require('../../../lib/database/backup-manager');\n      createBackup.mockRejectedValue(new Error('Backup creation failed: insufficient disk space'));\n\n      const backupData = {\n        operation: 'backup',\n        type: 'full',\n        destination: '/backups/db_backup_20231201.sql'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(backupData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507);\n      expect(data.error.message).toContain('Backup creation failed');\n    });\n\n    it('should handle database restore failure', async () => {\n      const { restoreBackup } = require('../../../lib/database/backup-manager');\n      restoreBackup.mockRejectedValue(new Error('Restore failed: backup file is corrupted'));\n\n      const restoreData = {\n        operation: 'restore',\n        backupFile: '/backups/corrupted_backup.sql',\n        targetDatabase: 'test_db'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(restoreData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(422);\n      expect(data.error.message).toContain('Restore failed: backup file is corrupted');\n    });\n  });\n\n  describe('PUT /api/db - Database Updates', () => {\n    it('should handle table structure modification failure', async () => {\n      const { alterTable } = require('../../../lib/database/schema-manager');\n      alterTable.mockRejectedValue(new Error('Cannot drop column: column is referenced by foreign key'));\n\n      const alterData = {\n        table: 'users',\n        operation: 'drop_column',\n        column: 'id'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(alterData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot drop column');\n    });\n\n    it('should handle index creation failure', async () => {\n      const { createIndex } = require('../../../lib/database/schema-manager');\n      createIndex.mockRejectedValue(new Error('Index creation failed: column does not exist'));\n\n      const indexData = {\n        table: 'users',\n        operation: 'create_index',\n        indexName: 'idx_nonexistent',\n        columns: ['nonexistent_column']\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(indexData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Index creation failed');\n    });\n\n    it('should handle concurrent schema modification', async () => {\n      const { alterTable } = require('../../../lib/database/schema-manager');\n      alterTable.mockRejectedValue(new Error('Table is being modified by another process'));\n\n      const alterData = {\n        table: 'users',\n        operation: 'add_column',\n        column: { name: 'new_field', type: 'VARCHAR(100)' }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(alterData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Table is being modified by another process');\n    });\n\n    it('should handle data type conversion failure', async () => {\n      const { alterTable } = require('../../../lib/database/schema-manager');\n      alterTable.mockRejectedValue(new Error('Cannot convert VARCHAR to INTEGER: invalid data in column'));\n\n      const alterData = {\n        table: 'users',\n        operation: 'modify_column',\n        column: { name: 'phone', oldType: 'VARCHAR(20)', newType: 'INTEGER' }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(alterData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot convert VARCHAR to INTEGER');\n    });\n  });\n\n  describe('DELETE /api/db - Database Deletion Operations', () => {\n    it('should handle table not found for deletion', async () => {\n      const { dropTable } = require('../../../lib/database/schema-manager');\n      dropTable.mockRejectedValue(new Error('Table \"nonexistent_table\" does not exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?table=nonexistent_table', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Table \"nonexistent_table\" does not exist');\n    });\n\n    it('should handle table with foreign key references', async () => {\n      const { dropTable } = require('../../../lib/database/schema-manager');\n      dropTable.mockRejectedValue(new Error('Cannot drop table: referenced by foreign key constraints'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?table=users', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot drop table: referenced by foreign key constraints');\n    });\n\n    it('should handle backup deletion failure', async () => {\n      const { deleteBackup } = require('../../../lib/database/backup-manager');\n      deleteBackup.mockRejectedValue(new Error('Cannot delete backup: file is in use'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?backup=backup_20231201.sql', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Cannot delete backup: file is in use');\n    });\n\n    it('should handle unauthorized table deletion', async () => {\n      const { checkDatabasePermissions } = require('../../../lib/auth/session');\n      checkDatabasePermissions.mockRejectedValue(new Error('Insufficient permissions to drop table'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?table=critical_table', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer limited-user-token' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n  });\n\n  describe('Database Connection Management', () => {\n    it('should handle connection pool reset failure', async () => {\n      const { resetConnectionPool } = require('../../../lib/database/connection-manager');\n      resetConnectionPool.mockRejectedValue(new Error('Failed to reset connection pool: active connections exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=reset_pool', {\n        method: 'POST'\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Failed to reset connection pool');\n    });\n\n    it('should handle invalid connection configuration', async () => {\n      const { validateConnectionConfig } = require('../../../lib/database/connection-manager');\n      validateConnectionConfig.mockRejectedValue(new Error('Invalid connection configuration: missing host'));\n\n      const configData = {\n        operation: 'test_connection',\n        config: {\n          database: 'test_db',\n          user: 'test_user',\n          password: 'test_pass'\n          // Missing host\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(configData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid connection configuration');\n    });\n\n    it('should handle connection leak detection', async () => {\n      const { getConnectionStatus } = require('../../../lib/database/connection-manager');\n      getConnectionStatus.mockRejectedValue(new Error('Connection leak detected: 95 of 100 connections in use'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=connection_status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Connection leak detected');\n    });\n  });\n\n  describe('Query Optimization and Performance', () => {\n    it('should handle query optimization failure', async () => {\n      const { optimizeQuery } = require('../../../lib/database/query-executor');\n      optimizeQuery.mockRejectedValue(new Error('Query optimization failed: query too complex'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=optimize&sql=SELECT * FROM users WHERE complex_condition');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(422);\n      expect(data.error.message).toContain('Query optimization failed');\n    });\n\n    it('should handle query plan generation failure', async () => {\n      const { getQueryPlan } = require('../../../lib/database/query-executor');\n      getQueryPlan.mockRejectedValue(new Error('Cannot generate query plan: invalid query structure'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=explain&sql=INVALID QUERY');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot generate query plan');\n    });\n\n    it('should handle query cancellation failure', async () => {\n      const { cancelQuery } = require('../../../lib/database/query-executor');\n      cancelQuery.mockRejectedValue(new Error('Cannot cancel query: query has already completed'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=cancel&queryId=query-123', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(410);\n      expect(data.error.message).toContain('Cannot cancel query: query has already completed');\n    });\n  });\n\n  describe('Database Monitoring and Health', () => {\n    it('should handle database health check failure', async () => {\n      const { testConnection } = require('../../../lib/database/connection-manager');\n      testConnection.mockRejectedValue(new Error('Database health check failed: high CPU usage'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=health');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Database health check failed');\n    });\n\n    it('should handle backup validation failure', async () => {\n      const { validateBackup } = require('../../../lib/database/backup-manager');\n      validateBackup.mockRejectedValue(new Error('Backup validation failed: checksum mismatch'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=validate_backup&file=backup.sql');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(422);\n      expect(data.error.message).toContain('Backup validation failed');\n    });\n\n    it('should handle backup scheduling conflict', async () => {\n      const { scheduleBackup } = require('../../../lib/database/backup-manager');\n      scheduleBackup.mockRejectedValue(new Error('Backup scheduling conflict: another backup is already scheduled'));\n\n      const scheduleData = {\n        operation: 'schedule_backup',\n        schedule: '0 2 * * *', // Daily at 2 AM\n        type: 'full'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(scheduleData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Backup scheduling conflict');\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide database operation recovery suggestions', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Database temporarily unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT 1');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry database operation');\n    });\n\n    it('should track database operation performance', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT 1');\n      await GET(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include database context in error responses', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM users');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('executeQuery');\n      expect(data.error.context.query).toContain('SELECT * FROM users');\n    });\n  });\n});"],"version":3}