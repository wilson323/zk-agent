95c4e6906fa31f199ce9e64b7db74e95
"use strict";

/**
 * @file sharing\route.ts
 * @description Migrated API route with global error handling
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_2360bzduuc() {
  var path = "E:\\zk-agent\\app\\api\\sharing\\route.ts";
  var hash = "ce1998c6213426be77ac31d3d1a62ca8b233f2a6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\sharing\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 48,
          column: 3
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "7": {
        start: {
          line: 16,
          column: 33
        },
        end: {
          line: 16,
          column: 49
        }
      },
      "8": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 45
        }
      },
      "9": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 47
        }
      },
      "10": {
        start: {
          line: 19,
          column: 21
        },
        end: {
          line: 19,
          column: 65
        }
      },
      "11": {
        start: {
          line: 20,
          column: 22
        },
        end: {
          line: 20,
          column: 68
        }
      },
      "12": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "13": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "14": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 43,
          column: 11
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 129
        }
      },
      "16": {
        start: {
          line: 49,
          column: 0
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "17": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "18": {
        start: {
          line: 51,
          column: 21
        },
        end: {
          line: 51,
          column: 37
        }
      },
      "19": {
        start: {
          line: 52,
          column: 59
        },
        end: {
          line: 52,
          column: 63
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "21": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 166
        }
      },
      "22": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 60,
          column: 11
        }
      },
      "23": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 129
        }
      },
      "24": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "25": {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "26": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 68,
          column: 37
        }
      },
      "27": {
        start: {
          line: 69,
          column: 44
        },
        end: {
          line: 69,
          column: 48
        }
      },
      "28": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "29": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 151
        }
      },
      "30": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 77,
          column: 11
        }
      },
      "31": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 129
        }
      },
      "32": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 100,
          column: 3
        }
      },
      "33": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "34": {
        start: {
          line: 85,
          column: 33
        },
        end: {
          line: 85,
          column: 49
        }
      },
      "35": {
        start: {
          line: 86,
          column: 24
        },
        end: {
          line: 86,
          column: 47
        }
      },
      "36": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 45
        }
      },
      "37": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "38": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 151
        }
      },
      "39": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "40": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 129
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 100
          },
          end: {
            line: 14,
            column: 101
          }
        },
        loc: {
          start: {
            line: 14,
            column: 175
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 49,
            column: 105
          },
          end: {
            line: 49,
            column: 106
          }
        },
        loc: {
          start: {
            line: 49,
            column: 180
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 49
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 66,
            column: 103
          },
          end: {
            line: 66,
            column: 104
          }
        },
        loc: {
          start: {
            line: 66,
            column: 178
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 66
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 83,
            column: 114
          },
          end: {
            line: 83,
            column: 115
          }
        },
        loc: {
          start: {
            line: 83,
            column: 189
          },
          end: {
            line: 100,
            column: 1
          }
        },
        line: 83
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 19,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 37
          },
          end: {
            line: 19,
            column: 57
          }
        }, {
          start: {
            line: 19,
            column: 61
          },
          end: {
            line: 19,
            column: 64
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 38
          },
          end: {
            line: 20,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 38
          },
          end: {
            line: 20,
            column: 59
          }
        }, {
          start: {
            line: 20,
            column: 63
          },
          end: {
            line: 20,
            column: 67
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 53,
            column: 22
          }
        }, {
          start: {
            line: 53,
            column: 26
          },
          end: {
            line: 53,
            column: 38
          }
        }, {
          start: {
            line: 53,
            column: 42
          },
          end: {
            line: 53,
            column: 49
          }
        }],
        line: 53
      },
      "5": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 20
          }
        }, {
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 70,
            column: 31
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 90,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 88,
            column: 20
          }
        }, {
          start: {
            line: 88,
            column: 24
          },
          end: {
            line: 88,
            column: 31
          }
        }],
        line: 88
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\sharing\\route.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\sharing\\route.ts"],
      sourcesContent: ["/**\n * @file sharing\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { ErrorCode } from '@/types/core';\n// import { enhancedShareManager } from \"@/lib/sharing/enhanced-share-manager\"\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const { searchParams } = new URL(req.url)\n      const userId = validatedQuery?.userId\n      const shareId = validatedQuery?.shareId\n      const page = Number.parseInt(validatedQuery?.page || \"1\")\n      const limit = Number.parseInt(validatedQuery?.limit || \"20\")\n    \n      if (shareId) {\n        // Get specific share link\n        // const shareLink = await enhancedShareManager.getShareLink(shareId)\n        // if (!shareLink) {\n        //   return ApiResponseWrapper.error(\n        //     ErrorCode.NOT_FOUND,\n        //     \"Share link not found\",\n        //     null,\n        //     404\n        //   )\n        // }\n        return ApiResponseWrapper.success({\n          success: true,\n          shareLink: { id: shareId, contentId: \"mock\", contentType: \"mock\", userId: \"mock\" },\n        })\n      }\n    \n      // const result = await enhancedShareManager.getUserShares(userId, page, limit)\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        history: [],\n        total: 0,\n        hasMore: false,\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        \"Internal server error\",\n        null,\n        500\n      )\n    }\n  }\n);\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const body = await req.json()\n      const { contentId, contentType, config, userId } = body\n    \n      if (!contentId || !contentType || !userId) {\n        return ApiResponseWrapper.error(\n          ErrorCode.VALIDATION_ERROR,\n          \"Missing required parameters: contentId, contentType, userId\",\n          null,\n          400\n        )\n      }\n    \n      // const shareLink = await enhancedShareManager.createShareLink(contentId, contentType, userId, config)\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        shareLink: { id: \"mock\", contentId, contentType, userId },\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        \"Internal server error\",\n        null,\n        500\n      )\n    }\n  }\n);\n\nexport const PUT = createApiRoute(\n  RouteConfigs.protectedPut(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const body = await req.json()\n      const { shareId, config, userId } = body\n    \n      if (!shareId || !userId) {\n        return ApiResponseWrapper.error(\n          ErrorCode.VALIDATION_ERROR,\n          \"Missing required parameters: shareId, userId\",\n          null,\n          400\n        )\n      }\n    \n      // const updatedShareLink = await enhancedShareManager.updateShareLink(shareId, userId, config)\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        shareLink: { id: shareId, contentId: \"mock\", contentType: \"mock\", userId: \"mock\" },\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        \"Internal server error\",\n        null,\n        500\n      )\n    }\n  }\n);\n\nexport const DELETE = createApiRoute(\n  { method: 'DELETE', requireAuth: true, timeout: 60000 },\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const { searchParams } = new URL(req.url)\n      const shareId = validatedQuery?.shareId\n      const userId = validatedQuery?.userId\n    \n      if (!shareId || !userId) {\n        return ApiResponseWrapper.error(\n          ErrorCode.VALIDATION_ERROR,\n          \"Missing required parameters: shareId, userId\",\n          null,\n          400\n        )\n      }\n    \n      // await enhancedShareManager.deleteShareLink(shareId, userId)\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        message: \"\u5206\u4EAB\u94FE\u63A5\u5DF2\u5220\u9664\",\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        \"Internal server error\",\n        null,\n        500\n      )\n    }\n  }\n);"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ce1998c6213426be77ac31d3d1a62ca8b233f2a6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2360bzduuc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2360bzduuc();
cov_2360bzduuc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2360bzduuc().s[1]++;
exports.DELETE = exports.PUT = exports.POST = exports.GET = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_2360bzduuc().s[2]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_2360bzduuc().s[3]++, require("@/lib/utils/api-helper"));
const core_1 =
/* istanbul ignore next */
(cov_2360bzduuc().s[4]++, require("@/types/core"));
// import { enhancedShareManager } from "@/lib/sharing/enhanced-share-manager"
/* istanbul ignore next */
cov_2360bzduuc().s[5]++;
exports.GET = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.publicGet(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_2360bzduuc().f[0]++;
  cov_2360bzduuc().s[6]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[7]++, new URL(req.url));
    const userId =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[8]++, validatedQuery?.userId);
    const shareId =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[9]++, validatedQuery?.shareId);
    const page =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[10]++, Number.parseInt(
    /* istanbul ignore next */
    (cov_2360bzduuc().b[0][0]++, validatedQuery?.page) ||
    /* istanbul ignore next */
    (cov_2360bzduuc().b[0][1]++, "1")));
    const limit =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[11]++, Number.parseInt(
    /* istanbul ignore next */
    (cov_2360bzduuc().b[1][0]++, validatedQuery?.limit) ||
    /* istanbul ignore next */
    (cov_2360bzduuc().b[1][1]++, "20")));
    /* istanbul ignore next */
    cov_2360bzduuc().s[12]++;
    if (shareId) {
      /* istanbul ignore next */
      cov_2360bzduuc().b[2][0]++;
      cov_2360bzduuc().s[13]++;
      // Get specific share link
      // const shareLink = await enhancedShareManager.getShareLink(shareId)
      // if (!shareLink) {
      //   return ApiResponseWrapper.error(
      //     ErrorCode.NOT_FOUND,
      //     "Share link not found",
      //     null,
      //     404
      //   )
      // }
      return api_helper_1.ApiResponseWrapper.success({
        success: true,
        shareLink: {
          id: shareId,
          contentId: "mock",
          contentType: "mock",
          userId: "mock"
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2360bzduuc().b[2][1]++;
    }
    // const result = await enhancedShareManager.getUserShares(userId, page, limit)
    cov_2360bzduuc().s[14]++;
    return api_helper_1.ApiResponseWrapper.success({
      success: true,
      history: [],
      total: 0,
      hasMore: false
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2360bzduuc().s[15]++;
    return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.INTERNAL_SERVER_ERROR, "Internal server error", null, 500);
  }
});
/* istanbul ignore next */
cov_2360bzduuc().s[16]++;
exports.POST = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPost(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_2360bzduuc().f[1]++;
  cov_2360bzduuc().s[17]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[18]++, await req.json());
    const {
      contentId,
      contentType,
      config,
      userId
    } =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[19]++, body);
    /* istanbul ignore next */
    cov_2360bzduuc().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_2360bzduuc().b[4][0]++, !contentId) ||
    /* istanbul ignore next */
    (cov_2360bzduuc().b[4][1]++, !contentType) ||
    /* istanbul ignore next */
    (cov_2360bzduuc().b[4][2]++, !userId)) {
      /* istanbul ignore next */
      cov_2360bzduuc().b[3][0]++;
      cov_2360bzduuc().s[21]++;
      return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.VALIDATION_ERROR, "Missing required parameters: contentId, contentType, userId", null, 400);
    } else
    /* istanbul ignore next */
    {
      cov_2360bzduuc().b[3][1]++;
    }
    // const shareLink = await enhancedShareManager.createShareLink(contentId, contentType, userId, config)
    cov_2360bzduuc().s[22]++;
    return api_helper_1.ApiResponseWrapper.success({
      success: true,
      shareLink: {
        id: "mock",
        contentId,
        contentType,
        userId
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2360bzduuc().s[23]++;
    return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.INTERNAL_SERVER_ERROR, "Internal server error", null, 500);
  }
});
/* istanbul ignore next */
cov_2360bzduuc().s[24]++;
exports.PUT = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPut(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_2360bzduuc().f[2]++;
  cov_2360bzduuc().s[25]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[26]++, await req.json());
    const {
      shareId,
      config,
      userId
    } =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[27]++, body);
    /* istanbul ignore next */
    cov_2360bzduuc().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_2360bzduuc().b[6][0]++, !shareId) ||
    /* istanbul ignore next */
    (cov_2360bzduuc().b[6][1]++, !userId)) {
      /* istanbul ignore next */
      cov_2360bzduuc().b[5][0]++;
      cov_2360bzduuc().s[29]++;
      return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.VALIDATION_ERROR, "Missing required parameters: shareId, userId", null, 400);
    } else
    /* istanbul ignore next */
    {
      cov_2360bzduuc().b[5][1]++;
    }
    // const updatedShareLink = await enhancedShareManager.updateShareLink(shareId, userId, config)
    cov_2360bzduuc().s[30]++;
    return api_helper_1.ApiResponseWrapper.success({
      success: true,
      shareLink: {
        id: shareId,
        contentId: "mock",
        contentType: "mock",
        userId: "mock"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2360bzduuc().s[31]++;
    return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.INTERNAL_SERVER_ERROR, "Internal server error", null, 500);
  }
});
/* istanbul ignore next */
cov_2360bzduuc().s[32]++;
exports.DELETE = (0, api_route_wrapper_1.createApiRoute)({
  method: 'DELETE',
  requireAuth: true,
  timeout: 60000
}, async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_2360bzduuc().f[3]++;
  cov_2360bzduuc().s[33]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[34]++, new URL(req.url));
    const shareId =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[35]++, validatedQuery?.shareId);
    const userId =
    /* istanbul ignore next */
    (cov_2360bzduuc().s[36]++, validatedQuery?.userId);
    /* istanbul ignore next */
    cov_2360bzduuc().s[37]++;
    if (
    /* istanbul ignore next */
    (cov_2360bzduuc().b[8][0]++, !shareId) ||
    /* istanbul ignore next */
    (cov_2360bzduuc().b[8][1]++, !userId)) {
      /* istanbul ignore next */
      cov_2360bzduuc().b[7][0]++;
      cov_2360bzduuc().s[38]++;
      return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.VALIDATION_ERROR, "Missing required parameters: shareId, userId", null, 400);
    } else
    /* istanbul ignore next */
    {
      cov_2360bzduuc().b[7][1]++;
    }
    // await enhancedShareManager.deleteShareLink(shareId, userId)
    cov_2360bzduuc().s[39]++;
    return api_helper_1.ApiResponseWrapper.success({
      success: true,
      message: "分享链接已删除"
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2360bzduuc().s[40]++;
    return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.INTERNAL_SERVER_ERROR, "Internal server error", null, 500);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjM2MGJ6ZHV1YyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImFwaV9yb3V0ZV93cmFwcGVyXzEiLCJyZXF1aXJlIiwiYXBpX2hlbHBlcl8xIiwiY29yZV8xIiwiZXhwb3J0cyIsIkdFVCIsImNyZWF0ZUFwaVJvdXRlIiwiUm91dGVDb25maWdzIiwicHVibGljR2V0IiwicmVxIiwicGFyYW1zIiwidmFsaWRhdGVkQm9keSIsInZhbGlkYXRlZFF1ZXJ5IiwidXNlciIsInJlcXVlc3RJZCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsInVzZXJJZCIsInNoYXJlSWQiLCJwYWdlIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJsaW1pdCIsIkFwaVJlc3BvbnNlV3JhcHBlciIsInN1Y2Nlc3MiLCJzaGFyZUxpbmsiLCJpZCIsImNvbnRlbnRJZCIsImNvbnRlbnRUeXBlIiwiaGlzdG9yeSIsInRvdGFsIiwiaGFzTW9yZSIsImVycm9yIiwiRXJyb3JDb2RlIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiUE9TVCIsInByb3RlY3RlZFBvc3QiLCJib2R5IiwianNvbiIsImNvbmZpZyIsIlZBTElEQVRJT05fRVJST1IiLCJQVVQiLCJwcm90ZWN0ZWRQdXQiLCJERUxFVEUiLCJtZXRob2QiLCJyZXF1aXJlQXV0aCIsInRpbWVvdXQiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsiRTpcXHprLWFnZW50XFxhcHBcXGFwaVxcc2hhcmluZ1xccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZSBzaGFyaW5nXFxyb3V0ZS50c1xuICogQGRlc2NyaXB0aW9uIE1pZ3JhdGVkIEFQSSByb3V0ZSB3aXRoIGdsb2JhbCBlcnJvciBoYW5kbGluZ1xuICogQGF1dGhvciBaSy1BZ2VudCBUZWFtXG4gKiBAZGF0ZSAyMDI1LTA2LTI1XG4gKi9cblxuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGNyZWF0ZUFwaVJvdXRlLCBSb3V0ZUNvbmZpZ3MsIENvbW1vblZhbGlkYXRpb25zIH0gZnJvbSAnQC9saWIvbWlkZGxld2FyZS9hcGktcm91dGUtd3JhcHBlcic7XG5pbXBvcnQgeyBBcGlSZXNwb25zZVdyYXBwZXIgfSBmcm9tICdAL2xpYi91dGlscy9hcGktaGVscGVyJztcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gJ0AvdHlwZXMvY29yZSc7XG4vLyBpbXBvcnQgeyBlbmhhbmNlZFNoYXJlTWFuYWdlciB9IGZyb20gXCJAL2xpYi9zaGFyaW5nL2VuaGFuY2VkLXNoYXJlLW1hbmFnZXJcIlxuXG5leHBvcnQgY29uc3QgR0VUID0gY3JlYXRlQXBpUm91dGUoXG4gIFJvdXRlQ29uZmlncy5wdWJsaWNHZXQoKSxcbiAgYXN5bmMgKHJlcTogTmV4dFJlcXVlc3QsIHsgcGFyYW1zLCB2YWxpZGF0ZWRCb2R5LCB2YWxpZGF0ZWRRdWVyeSwgdXNlciwgcmVxdWVzdElkIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxLnVybClcbiAgICAgIGNvbnN0IHVzZXJJZCA9IHZhbGlkYXRlZFF1ZXJ5Py51c2VySWRcbiAgICAgIGNvbnN0IHNoYXJlSWQgPSB2YWxpZGF0ZWRRdWVyeT8uc2hhcmVJZFxuICAgICAgY29uc3QgcGFnZSA9IE51bWJlci5wYXJzZUludCh2YWxpZGF0ZWRRdWVyeT8ucGFnZSB8fCBcIjFcIilcbiAgICAgIGNvbnN0IGxpbWl0ID0gTnVtYmVyLnBhcnNlSW50KHZhbGlkYXRlZFF1ZXJ5Py5saW1pdCB8fCBcIjIwXCIpXG4gICAgXG4gICAgICBpZiAoc2hhcmVJZCkge1xuICAgICAgICAvLyBHZXQgc3BlY2lmaWMgc2hhcmUgbGlua1xuICAgICAgICAvLyBjb25zdCBzaGFyZUxpbmsgPSBhd2FpdCBlbmhhbmNlZFNoYXJlTWFuYWdlci5nZXRTaGFyZUxpbmsoc2hhcmVJZClcbiAgICAgICAgLy8gaWYgKCFzaGFyZUxpbmspIHtcbiAgICAgICAgLy8gICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLmVycm9yKFxuICAgICAgICAvLyAgICAgRXJyb3JDb2RlLk5PVF9GT1VORCxcbiAgICAgICAgLy8gICAgIFwiU2hhcmUgbGluayBub3QgZm91bmRcIixcbiAgICAgICAgLy8gICAgIG51bGwsXG4gICAgICAgIC8vICAgICA0MDRcbiAgICAgICAgLy8gICApXG4gICAgICAgIC8vIH1cbiAgICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5zdWNjZXNzKHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIHNoYXJlTGluazogeyBpZDogc2hhcmVJZCwgY29udGVudElkOiBcIm1vY2tcIiwgY29udGVudFR5cGU6IFwibW9ja1wiLCB1c2VySWQ6IFwibW9ja1wiIH0sXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgXG4gICAgICAvLyBjb25zdCByZXN1bHQgPSBhd2FpdCBlbmhhbmNlZFNoYXJlTWFuYWdlci5nZXRVc2VyU2hhcmVzKHVzZXJJZCwgcGFnZSwgbGltaXQpXG4gICAgXG4gICAgICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLnN1Y2Nlc3Moe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBoaXN0b3J5OiBbXSxcbiAgICAgICAgdG90YWw6IDAsXG4gICAgICAgIGhhc01vcmU6IGZhbHNlLFxuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgRXJyb3JDb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUixcbiAgICAgICAgXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgNTAwXG4gICAgICApXG4gICAgfVxuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgUE9TVCA9IGNyZWF0ZUFwaVJvdXRlKFxuICBSb3V0ZUNvbmZpZ3MucHJvdGVjdGVkUG9zdCgpLFxuICBhc3luYyAocmVxOiBOZXh0UmVxdWVzdCwgeyBwYXJhbXMsIHZhbGlkYXRlZEJvZHksIHZhbGlkYXRlZFF1ZXJ5LCB1c2VyLCByZXF1ZXN0SWQgfSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxLmpzb24oKVxuICAgICAgY29uc3QgeyBjb250ZW50SWQsIGNvbnRlbnRUeXBlLCBjb25maWcsIHVzZXJJZCB9ID0gYm9keVxuICAgIFxuICAgICAgaWYgKCFjb250ZW50SWQgfHwgIWNvbnRlbnRUeXBlIHx8ICF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgICBFcnJvckNvZGUuVkFMSURBVElPTl9FUlJPUixcbiAgICAgICAgICBcIk1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyczogY29udGVudElkLCBjb250ZW50VHlwZSwgdXNlcklkXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICA0MDBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIFxuICAgICAgLy8gY29uc3Qgc2hhcmVMaW5rID0gYXdhaXQgZW5oYW5jZWRTaGFyZU1hbmFnZXIuY3JlYXRlU2hhcmVMaW5rKGNvbnRlbnRJZCwgY29udGVudFR5cGUsIHVzZXJJZCwgY29uZmlnKVxuICAgIFxuICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5zdWNjZXNzKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgc2hhcmVMaW5rOiB7IGlkOiBcIm1vY2tcIiwgY29udGVudElkLCBjb250ZW50VHlwZSwgdXNlcklkIH0sXG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLmVycm9yKFxuICAgICAgICBFcnJvckNvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLFxuICAgICAgICBcIkludGVybmFsIHNlcnZlciBlcnJvclwiLFxuICAgICAgICBudWxsLFxuICAgICAgICA1MDBcbiAgICAgIClcbiAgICB9XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBQVVQgPSBjcmVhdGVBcGlSb3V0ZShcbiAgUm91dGVDb25maWdzLnByb3RlY3RlZFB1dCgpLFxuICBhc3luYyAocmVxOiBOZXh0UmVxdWVzdCwgeyBwYXJhbXMsIHZhbGlkYXRlZEJvZHksIHZhbGlkYXRlZFF1ZXJ5LCB1c2VyLCByZXF1ZXN0SWQgfSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxLmpzb24oKVxuICAgICAgY29uc3QgeyBzaGFyZUlkLCBjb25maWcsIHVzZXJJZCB9ID0gYm9keVxuICAgIFxuICAgICAgaWYgKCFzaGFyZUlkIHx8ICF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgICBFcnJvckNvZGUuVkFMSURBVElPTl9FUlJPUixcbiAgICAgICAgICBcIk1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyczogc2hhcmVJZCwgdXNlcklkXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICA0MDBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIFxuICAgICAgLy8gY29uc3QgdXBkYXRlZFNoYXJlTGluayA9IGF3YWl0IGVuaGFuY2VkU2hhcmVNYW5hZ2VyLnVwZGF0ZVNoYXJlTGluayhzaGFyZUlkLCB1c2VySWQsIGNvbmZpZylcbiAgICBcbiAgICAgIHJldHVybiBBcGlSZXNwb25zZVdyYXBwZXIuc3VjY2Vzcyh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHNoYXJlTGluazogeyBpZDogc2hhcmVJZCwgY29udGVudElkOiBcIm1vY2tcIiwgY29udGVudFR5cGU6IFwibW9ja1wiLCB1c2VySWQ6IFwibW9ja1wiIH0sXG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLmVycm9yKFxuICAgICAgICBFcnJvckNvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLFxuICAgICAgICBcIkludGVybmFsIHNlcnZlciBlcnJvclwiLFxuICAgICAgICBudWxsLFxuICAgICAgICA1MDBcbiAgICAgIClcbiAgICB9XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBERUxFVEUgPSBjcmVhdGVBcGlSb3V0ZShcbiAgeyBtZXRob2Q6ICdERUxFVEUnLCByZXF1aXJlQXV0aDogdHJ1ZSwgdGltZW91dDogNjAwMDAgfSxcbiAgYXN5bmMgKHJlcTogTmV4dFJlcXVlc3QsIHsgcGFyYW1zLCB2YWxpZGF0ZWRCb2R5LCB2YWxpZGF0ZWRRdWVyeSwgdXNlciwgcmVxdWVzdElkIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxLnVybClcbiAgICAgIGNvbnN0IHNoYXJlSWQgPSB2YWxpZGF0ZWRRdWVyeT8uc2hhcmVJZFxuICAgICAgY29uc3QgdXNlcklkID0gdmFsaWRhdGVkUXVlcnk/LnVzZXJJZFxuICAgIFxuICAgICAgaWYgKCFzaGFyZUlkIHx8ICF1c2VySWQpIHtcbiAgICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgICBFcnJvckNvZGUuVkFMSURBVElPTl9FUlJPUixcbiAgICAgICAgICBcIk1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyczogc2hhcmVJZCwgdXNlcklkXCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICA0MDBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIFxuICAgICAgLy8gYXdhaXQgZW5oYW5jZWRTaGFyZU1hbmFnZXIuZGVsZXRlU2hhcmVMaW5rKHNoYXJlSWQsIHVzZXJJZClcbiAgICBcbiAgICAgIHJldHVybiBBcGlSZXNwb25zZVdyYXBwZXIuc3VjY2Vzcyh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6IFwi5YiG5Lqr6ZO+5o6l5bey5Yig6ZmkXCIsXG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLmVycm9yKFxuICAgICAgICBFcnJvckNvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLFxuICAgICAgICBcIkludGVybmFsIHNlcnZlciBlcnJvclwiLFxuICAgICAgICBudWxsLFxuICAgICAgICA1MDBcbiAgICAgIClcbiAgICB9XG4gIH1cbik7Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFBQTtBQUFBLFNBQUFBLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7SUFBQTtJQUFBRSxLQUFBO01BQUE7UUFBQUMsSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQU8sU0FBQTtNQUFBO1FBQUFELEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtN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