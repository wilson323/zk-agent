238ffc5069f38e812a51903b65ec86c7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const enhanced_connection_1 = require("../../lib/database/enhanced-connection");
const monitoring_1 = require("../../lib/database/monitoring");
const pool_optimizer_1 = require("../../lib/database/pool-optimizer");
const error_recovery_1 = require("../../lib/database/error-recovery");
const connection_1 = require("../../lib/database/connection");
// Mock environment variables
process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test_db';
process.env.ENHANCED_DB_CONNECTION = 'true';
process.env.DB_MONITORING_ENABLED = 'true';
process.env.DB_POOL_OPTIMIZATION_ENABLED = 'true';
process.env.DB_ERROR_RECOVERY_ENABLED = 'true';
(0, globals_1.describe)('Database Integration Tests', () => {
    (0, globals_1.beforeAll)(async () => {
        // 确保所有模块都已初始化
        await new Promise(resolve => setTimeout(resolve, 1000));
    });
    (0, globals_1.afterAll)(async () => {
        // 清理所有连接和监控
        await enhanced_connection_1.enhancedDb.disconnect();
        monitoring_1.databaseMonitor.stop();
        pool_optimizer_1.poolOptimizer.stop();
        error_recovery_1.errorRecovery.stop();
    });
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Enhanced Database Connection Integration', () => {
        (0, globals_1.it)('should connect and provide basic functionality', async () => {
            const isConnected = await enhanced_connection_1.enhancedDb.connect();
            (0, globals_1.expect)(isConnected).toBe(true);
            (0, globals_1.expect)(enhanced_connection_1.enhancedDb.isConnected()).toBe(true);
            const stats = enhanced_connection_1.enhancedDb.getStats();
            (0, globals_1.expect)(stats.state).toBe('connected');
            (0, globals_1.expect)(stats.isHealthy).toBe(true);
        });
        (0, globals_1.it)('should handle configuration updates', async () => {
            const newConfig = {
                maxConnections: 15,
                minConnections: 3,
                connectionTimeout: 8000
            };
            await enhanced_connection_1.enhancedDb.updateConfiguration(newConfig);
            const config = enhanced_connection_1.enhancedDb.getConfiguration();
            (0, globals_1.expect)(config.pool).toMatchObject(newConfig);
        });
        (0, globals_1.it)('should provide detailed statistics', () => {
            const detailedStats = enhanced_connection_1.enhancedDb.getDetailedStats();
            (0, globals_1.expect)(detailedStats).toHaveProperty('state');
            (0, globals_1.expect)(detailedStats).toHaveProperty('uptime');
            (0, globals_1.expect)(detailedStats).toHaveProperty('configuration');
            (0, globals_1.expect)(detailedStats).toHaveProperty('performance');
            (0, globals_1.expect)(detailedStats.performance).toHaveProperty('successRate');
            (0, globals_1.expect)(detailedStats.performance).toHaveProperty('queriesPerSecond');
            (0, globals_1.expect)(detailedStats.performance).toHaveProperty('avgResponseTime');
        });
    });
    (0, globals_1.describe)('Database Monitoring Integration', () => {
        (0, globals_1.it)('should start monitoring and collect metrics', async () => {
            monitoring_1.databaseMonitor.start();
            // 等待监控收集一些数据
            await new Promise(resolve => setTimeout(resolve, 2000));
            const metrics = monitoring_1.databaseMonitor.getMetrics();
            (0, globals_1.expect)(metrics).toHaveProperty('timestamp');
            (0, globals_1.expect)(metrics).toHaveProperty('connections');
            (0, globals_1.expect)(metrics).toHaveProperty('performance');
            (0, globals_1.expect)(metrics).toHaveProperty('system');
        });
        (0, globals_1.it)('should detect performance issues', async () => {
            const alertSpy = globals_1.jest.fn();
            monitoring_1.databaseMonitor.on('alert', alertSpy);
            // 模拟性能问题
            const mockMetrics = {
                timestamp: new Date(),
                connections: {
                    active: 18, // 超过阈值
                    idle: 2,
                    total: 20
                },
                performance: {
                    avgLatency: 1200, // 超过阈值
                    queryRate: 50,
                    errorRate: 0.05
                },
                system: {
                    cpuUsage: 85, // 超过阈值
                    memoryUsage: 90,
                    diskUsage: 60
                }
            };
            // 手动触发性能检查
            monitoring_1.databaseMonitor['checkPerformanceThresholds'](mockMetrics);
            // 验证是否生成了警报
            (0, globals_1.expect)(alertSpy).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Pool Optimizer Integration', () => {
        (0, globals_1.it)('should start optimization and evaluate strategies', async () => {
            pool_optimizer_1.poolOptimizer.start();
            // 等待优化器运行
            await new Promise(resolve => setTimeout(resolve, 1000));
            const history = pool_optimizer_1.poolOptimizer.getOptimizationHistory();
            (0, globals_1.expect)(Array.isArray(history)).toBe(true);
        });
        (0, globals_1.it)('should respond to performance alerts', async () => {
            const optimizationSpy = globals_1.jest.fn();
            pool_optimizer_1.poolOptimizer.on('optimizationApplied', optimizationSpy);
            // 模拟性能警报
            const alert = {
                id: 'test-alert',
                type: 'performance',
                severity: 'high',
                message: 'High connection usage detected',
                timestamp: new Date(),
                metrics: {
                    connections: { active: 18, idle: 2, total: 20 },
                    performance: { avgLatency: 800, queryRate: 100, errorRate: 0.02 }
                }
            };
            // 手动触发警报处理
            pool_optimizer_1.poolOptimizer['handleAlert'](alert);
            // 验证是否应用了优化
            (0, globals_1.expect)(optimizationSpy).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Error Recovery Integration', () => {
        (0, globals_1.it)('should start error recovery system', () => {
            error_recovery_1.errorRecovery.start();
            const stats = error_recovery_1.errorRecovery.getStats();
            (0, globals_1.expect)(stats).toHaveProperty('totalErrors');
            (0, globals_1.expect)(stats).toHaveProperty('recoveryAttempts');
            (0, globals_1.expect)(stats).toHaveProperty('circuitBreakerState');
        });
        (0, globals_1.it)('should handle database errors', async () => {
            const recoverySpy = globals_1.jest.fn();
            error_recovery_1.errorRecovery.on('recoveryExecuted', recoverySpy);
            // 模拟数据库错误
            const error = new Error('Connection timeout');
            error.name = 'ConnectionError';
            // 手动触发错误处理
            await error_recovery_1.errorRecovery.handleError(error);
            // 验证是否执行了恢复策略
            (0, globals_1.expect)(recoverySpy).toHaveBeenCalled();
        });
        (0, globals_1.it)('should update circuit breaker state', async () => {
            // 模拟多次错误以触发断路器
            for (let i = 0; i < 6; i++) {
                const error = new Error(`Error ${i}`);
                await error_recovery_1.errorRecovery.handleError(error);
            }
            const stats = error_recovery_1.errorRecovery.getStats();
            (0, globals_1.expect)(stats.circuitBreakerState).toBe('open');
        });
    });
    (0, globals_1.describe)('Legacy Connection Integration', () => {
        (0, globals_1.it)('should work with existing connection functions', async () => {
            const connectionStatus = await (0, connection_1.checkDatabaseConnection)();
            (0, globals_1.expect)(connectionStatus).toHaveProperty('connected');
            (0, globals_1.expect)(connectionStatus).toHaveProperty('message');
            (0, globals_1.expect)(connectionStatus).toHaveProperty('stats');
            if (connectionStatus.connected) {
                (0, globals_1.expect)(connectionStatus.stats).toHaveProperty('totalQueries');
                (0, globals_1.expect)(connectionStatus.stats).toHaveProperty('failedQueries');
                (0, globals_1.expect)(connectionStatus.stats).toHaveProperty('avgLatency');
            }
        });
        (0, globals_1.it)('should provide enhanced pool status', async () => {
            const poolStatus = await (0, connection_1.getDatabasePoolStatus)();
            (0, globals_1.expect)(poolStatus).toHaveProperty('status');
            (0, globals_1.expect)(poolStatus).toHaveProperty('connections');
            (0, globals_1.expect)(poolStatus).toHaveProperty('performance');
            if (enhanced_connection_1.enhancedDb.isConnected()) {
                (0, globals_1.expect)(poolStatus.performance).toHaveProperty('successRate');
                (0, globals_1.expect)(poolStatus.performance).toHaveProperty('avgLatency');
                (0, globals_1.expect)(poolStatus.connections).toHaveProperty('reconnectAttempts');
            }
        });
    });
    (0, globals_1.describe)('End-to-End Workflow', () => {
        (0, globals_1.it)('should handle complete error recovery workflow', async () => {
            // 1. 连接数据库
            await enhanced_connection_1.enhancedDb.connect();
            (0, globals_1.expect)(enhanced_connection_1.enhancedDb.isConnected()).toBe(true);
            // 2. 启动所有监控系统
            monitoring_1.databaseMonitor.start();
            pool_optimizer_1.poolOptimizer.start();
            error_recovery_1.errorRecovery.start();
            // 3. 模拟查询执行
            try {
                await enhanced_connection_1.enhancedDb.executeQuery(async (prisma) => {
                    // 模拟简单查询
                    return { result: 'success' };
                });
            }
            catch (error) {
                // 预期可能的错误
            }
            // 4. 检查统计信息
            const stats = enhanced_connection_1.enhancedDb.getDetailedStats();
            (0, globals_1.expect)(stats.totalQueries).toBeGreaterThan(0);
            // 5. 验证监控数据
            const metrics = monitoring_1.databaseMonitor.getMetrics();
            (0, globals_1.expect)(metrics.timestamp).toBeInstanceOf(Date);
            // 6. 验证错误恢复状态
            const errorStats = error_recovery_1.errorRecovery.getStats();
            (0, globals_1.expect)(errorStats).toHaveProperty('totalErrors');
            // 7. 清理
            monitoring_1.databaseMonitor.stop();
            pool_optimizer_1.poolOptimizer.stop();
            error_recovery_1.errorRecovery.stop();
            await enhanced_connection_1.enhancedDb.disconnect();
        });
        (0, globals_1.it)('should maintain system stability under load', async () => {
            await enhanced_connection_1.enhancedDb.connect();
            // 启动监控
            monitoring_1.databaseMonitor.start();
            error_recovery_1.errorRecovery.start();
            // 模拟并发查询
            const queries = Array.from({ length: 10 }, (_, i) => enhanced_connection_1.enhancedDb.executeQuery(async () => ({ id: i, result: 'test' }))
                .catch(error => ({ error: error.message })));
            const results = await Promise.all(queries);
            // 验证系统仍然稳定
            (0, globals_1.expect)(enhanced_connection_1.enhancedDb.isConnected()).toBe(true);
            (0, globals_1.expect)(results.length).toBe(10);
            // 检查性能指标
            const detailedStats = enhanced_connection_1.enhancedDb.getDetailedStats();
            (0, globals_1.expect)(detailedStats.performance.successRate).toBeGreaterThan(0);
            // 清理
            monitoring_1.databaseMonitor.stop();
            error_recovery_1.errorRecovery.stop();
            await enhanced_connection_1.enhancedDb.disconnect();
        });
    });
    (0, globals_1.describe)('Configuration Management', () => {
        (0, globals_1.it)('should handle dynamic configuration updates', async () => {
            await enhanced_connection_1.enhancedDb.connect();
            // 更新连接池配置
            const poolConfig = {
                maxConnections: 25,
                minConnections: 5,
                connectionTimeout: 10000
            };
            await enhanced_connection_1.enhancedDb.updateConfiguration(poolConfig);
            // 更新恢复配置
            const recoveryConfig = {
                maxRetries: 5,
                retryDelay: 2000,
                circuitBreakerThreshold: 8
            };
            enhanced_connection_1.enhancedDb.updateRecoveryConfiguration(recoveryConfig);
            // 验证配置已更新
            const currentConfig = enhanced_connection_1.enhancedDb.getConfiguration();
            (0, globals_1.expect)(currentConfig.pool).toMatchObject(poolConfig);
            (0, globals_1.expect)(currentConfig.recovery).toMatchObject(recoveryConfig);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,