{"version":3,"names":["cov_1xpaomosep","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","POST","GET","server_1","require","connection_1","index_1","initialization_1","request","isDatabaseInitialized","NextResponse","json","success","error","code","status","databaseMonitor","isMonitoring","optimizationOptions","body","options","console","log","startTime","Date","now","optimizationResult","triggerDatabaseOptimization","duration","optimizationStatus","getOptimizationStatus","message","data","optimizationId","toISOString","results","recommendations","details","Error","optimizationHistory","getOptimizationHistory","availableOptimizations","getAvailableOptimizations","currentStatus","history","canOptimize","id","timestamp","improvements","queryPerformance","connectionEfficiency","cacheHitRate","componentsOptimized","queryOptimization","description","estimatedDuration","impact","connectionPoolOptimization","cacheOptimization","indexAnalysis","statisticsUpdate"],"sources":["E:\\zk-agent\\app\\api\\admin\\database\\optimize\\route.ts"],"sourcesContent":["/**\r\n * @file 数据库优化触发API路由\r\n * @description 提供手动触发数据库优化的API接口\r\n * @author ZK-Agent Team\r\n * @date 2024-12-19\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server'\r\nimport { triggerDatabaseOptimization } from '@/lib/database/connection'\r\nimport { databaseMonitor } from '@/lib/database/index'\r\nimport { isDatabaseInitialized } from '@/lib/database/initialization'\r\n\r\n/**\r\n * POST /api/admin/database/optimize\r\n * 手动触发数据库性能优化\r\n */\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // 检查数据库是否已初始化\r\n    if (!isDatabaseInitialized()) {\r\n      return NextResponse.json(\r\n        { \r\n          success: false,\r\n          error: '数据库系统尚未初始化',\r\n          code: 'DATABASE_NOT_INITIALIZED'\r\n        },\r\n        { status: 503 }\r\n      )\r\n    }\r\n\r\n    // 检查监控系统是否运行\r\n    if (!databaseMonitor.isMonitoring()) {\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: '数据库监控系统未运行，无法执行优化',\r\n          code: 'MONITORING_NOT_ACTIVE'\r\n        },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    // 解析请求体（可选的优化参数）\r\n    let optimizationOptions = {}\r\n    try {\r\n      const body = await request.json()\r\n      optimizationOptions = body.options || {}\r\n    } catch {\r\n      // 如果没有请求体或解析失败，使用默认选项\r\n    }\r\n\r\n    console.log('开始手动触发数据库优化...', optimizationOptions)\r\n\r\n    // 记录优化开始时间\r\n    const startTime = Date.now()\r\n\r\n    // 执行优化\r\n    const optimizationResult = await triggerDatabaseOptimization(optimizationOptions)\r\n\r\n    // 计算优化耗时\r\n    const duration = Date.now() - startTime\r\n\r\n    // 获取优化后的状态\r\n    const optimizationStatus = databaseMonitor.getOptimizationStatus()\r\n\r\n    console.log(`数据库优化完成，耗时: ${duration}ms`)\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: '数据库优化已成功触发',\r\n      data: {\r\n        optimizationId: optimizationResult.optimizationId || `opt_${Date.now()}`,\r\n        startTime: new Date(startTime).toISOString(),\r\n        duration,\r\n        status: optimizationStatus,\r\n        results: optimizationResult,\r\n        recommendations: optimizationResult.recommendations || []\r\n      }\r\n    })\r\n  } catch (error) {\r\n    console.error('数据库优化失败:', error)\r\n    \r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: '数据库优化执行失败',\r\n        details: error instanceof Error ? error.message : '未知错误',\r\n        code: 'OPTIMIZATION_FAILED'\r\n      },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * GET /api/admin/database/optimize\r\n * 获取优化历史和状态\r\n */\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // 检查数据库是否已初始化\r\n    if (!isDatabaseInitialized()) {\r\n      return NextResponse.json(\r\n        { error: '数据库系统尚未初始化' },\r\n        { status: 503 }\r\n      )\r\n    }\r\n\r\n    // 获取当前优化状态\r\n    const optimizationStatus = databaseMonitor.getOptimizationStatus()\r\n    \r\n    // 获取优化历史（模拟数据，实际应用中应从数据库获取）\r\n    const optimizationHistory = await getOptimizationHistory()\r\n    \r\n    // 获取可用的优化选项\r\n    const availableOptimizations = getAvailableOptimizations()\r\n\r\n    return NextResponse.json({\r\n      currentStatus: optimizationStatus,\r\n      history: optimizationHistory,\r\n      availableOptimizations,\r\n      canOptimize: databaseMonitor.isMonitoring()\r\n    })\r\n  } catch (error) {\r\n    console.error('获取优化信息失败:', error)\r\n    return NextResponse.json(\r\n      { error: '获取优化信息失败', details: error instanceof Error ? error.message : '未知错误' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * 获取优化历史记录\r\n */\r\nasync function getOptimizationHistory() {\r\n  // 在实际应用中，这里应该从数据库查询优化历史\r\n  // 目前返回模拟数据\r\n  return [\r\n    {\r\n      id: 'opt_1703001234567',\r\n      timestamp: new Date(Date.now() - 3600000).toISOString(),\r\n      type: 'automatic',\r\n      duration: 2340,\r\n      status: 'completed',\r\n      improvements: {\r\n        queryPerformance: '+12%',\r\n        connectionEfficiency: '+8%',\r\n        cacheHitRate: '+5%'\r\n      },\r\n      componentsOptimized: ['query-cache', 'connection-pool', 'index-analyzer']\r\n    },\r\n    {\r\n      id: 'opt_1702987654321',\r\n      timestamp: new Date(Date.now() - 86400000).toISOString(),\r\n      type: 'manual',\r\n      duration: 1890,\r\n      status: 'completed',\r\n      improvements: {\r\n        queryPerformance: '+7%',\r\n        connectionEfficiency: '+15%'\r\n      },\r\n      componentsOptimized: ['connection-pool', 'query-optimizer']\r\n    },\r\n    {\r\n      id: 'opt_1702901234567',\r\n      timestamp: new Date(Date.now() - 172800000).toISOString(),\r\n      type: 'scheduled',\r\n      duration: 3120,\r\n      status: 'completed',\r\n      improvements: {\r\n        queryPerformance: '+18%',\r\n        cacheHitRate: '+22%'\r\n      },\r\n      componentsOptimized: ['query-cache', 'index-analyzer', 'statistics-collector']\r\n    }\r\n  ]\r\n}\r\n\r\n/**\r\n * 获取可用的优化选项\r\n */\r\nfunction getAvailableOptimizations() {\r\n  return {\r\n    queryOptimization: {\r\n      name: '查询优化',\r\n      description: '分析和优化慢查询，建议索引改进',\r\n      estimatedDuration: '30-60秒',\r\n      impact: 'medium'\r\n    },\r\n    connectionPoolOptimization: {\r\n      name: '连接池优化',\r\n      description: '调整连接池配置，优化连接管理',\r\n      estimatedDuration: '10-30秒',\r\n      impact: 'high'\r\n    },\r\n    cacheOptimization: {\r\n      name: '缓存优化',\r\n      description: '优化查询缓存策略和配置',\r\n      estimatedDuration: '20-45秒',\r\n      impact: 'medium'\r\n    },\r\n    indexAnalysis: {\r\n      name: '索引分析',\r\n      description: '分析索引使用情况，建议索引优化',\r\n      estimatedDuration: '45-90秒',\r\n      impact: 'high'\r\n    },\r\n    statisticsUpdate: {\r\n      name: '统计信息更新',\r\n      description: '更新数据库统计信息，改善查询计划',\r\n      estimatedDuration: '15-30秒',\r\n      impact: 'low'\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UA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","ignoreList":[]}