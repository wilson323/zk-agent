{"version":3,"names":["getCurrentConfig","require","Pool","EventEmitter","DatabaseHealthChecker","constructor","pool","isHealthy","reconnectAttempts","maxReconnectAttempts","reconnectDelay","healthCheckInterval","healthCheckTimer","initialize","config","host","port","database","user","username","password","max","min","idleTimeoutMillis","idle","connectionTimeoutMillis","acquire","ssl","retryDelayMs","maxRetries","on","client","console","log","emit","err","error","handleConnectionError","startHealthCheck","testConnection","connect","result","query","release","rows","current_time","clearInterval","setInterval","setTimeout","reconnectError","getPoolStatus","status","totalCount","idleCount","waitingCount","getConnection","Error","text","params","close","end","healthChecker","module","exports"],"sources":["connection-health.js"],"sourcesContent":["/**\n * @file connection-health.js\n * @description 数据库连接健康检查和重连机制\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nconst { getCurrentConfig } = require('./database.config');\nconst { Pool } = require('pg');\nconst EventEmitter = require('events');\n\n/**\n * 数据库连接健康检查器\n */\nclass DatabaseHealthChecker extends EventEmitter {\n  constructor() {\n    super();\n    this.pool = null;\n    this.isHealthy = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 5000; // 5秒\n    this.healthCheckInterval = 30000; // 30秒\n    this.healthCheckTimer = null;\n  }\n\n  /**\n   * 初始化数据库连接池\n   */\n  async initialize() {\n    try {\n      const config = getCurrentConfig();\n      \n      this.pool = new Pool({\n        host: config.host,\n        port: config.port,\n        database: config.database,\n        user: config.username,\n        password: config.password,\n        max: config.pool.max,\n        min: config.pool.min,\n        idleTimeoutMillis: config.pool.idle,\n        connectionTimeoutMillis: config.pool.acquire,\n        ssl: config.ssl,\n        // 连接重试配置\n        retryDelayMs: 1000,\n        maxRetries: 3\n      });\n\n      // 监听连接池事件\n      this.pool.on('connect', (client) => {\n        console.log('数据库连接已建立');\n        this.isHealthy = true;\n        this.reconnectAttempts = 0;\n        this.emit('connected', client);\n      });\n\n      this.pool.on('error', (err) => {\n        console.error('数据库连接池错误:', err);\n        this.isHealthy = false;\n        this.emit('error', err);\n        this.handleConnectionError(err);\n      });\n\n      this.pool.on('remove', (client) => {\n        console.log('数据库连接已移除');\n        this.emit('disconnected', client);\n      });\n\n      // 启动健康检查\n      this.startHealthCheck();\n      \n      // 初始连接测试\n      await this.testConnection();\n      \n      console.log('数据库连接池初始化成功');\n      return this.pool;\n    } catch (error) {\n      console.error('数据库连接池初始化失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 测试数据库连接\n   */\n  async testConnection() {\n    try {\n      const client = await this.pool.connect();\n      const result = await client.query('SELECT NOW() as current_time');\n      client.release();\n      \n      this.isHealthy = true;\n      console.log('数据库连接测试成功:', result.rows[0].current_time);\n      return true;\n    } catch (error) {\n      this.isHealthy = false;\n      console.error('数据库连接测试失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 启动健康检查\n   */\n  startHealthCheck() {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n    }\n\n    this.healthCheckTimer = setInterval(async () => {\n      try {\n        await this.testConnection();\n        if (!this.isHealthy) {\n          console.log('数据库连接已恢复');\n          this.isHealthy = true;\n          this.emit('recovered');\n        }\n      } catch (error) {\n        if (this.isHealthy) {\n          console.error('数据库健康检查失败:', error);\n          this.isHealthy = false;\n          this.emit('unhealthy', error);\n        }\n      }\n    }, this.healthCheckInterval);\n  }\n\n  /**\n   * 处理连接错误\n   */\n  async handleConnectionError(error) {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('达到最大重连次数，停止重连');\n      this.emit('maxReconnectAttemptsReached', error);\n      return;\n    }\n\n    this.reconnectAttempts++;\n    console.log(`尝试重连数据库 (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n    \n    setTimeout(async () => {\n      try {\n        await this.testConnection();\n        console.log('数据库重连成功');\n        this.emit('reconnected');\n      } catch (reconnectError) {\n        console.error('数据库重连失败:', reconnectError);\n        this.handleConnectionError(reconnectError);\n      }\n    }, this.reconnectDelay * this.reconnectAttempts); // 指数退避\n  }\n\n  /**\n   * 获取连接池状态\n   */\n  getPoolStatus() {\n    if (!this.pool) {\n      return { status: 'not_initialized' };\n    }\n\n    return {\n      status: this.isHealthy ? 'healthy' : 'unhealthy',\n      totalCount: this.pool.totalCount,\n      idleCount: this.pool.idleCount,\n      waitingCount: this.pool.waitingCount,\n      reconnectAttempts: this.reconnectAttempts,\n      maxReconnectAttempts: this.maxReconnectAttempts\n    };\n  }\n\n  /**\n   * 获取连接\n   */\n  async getConnection() {\n    if (!this.pool) {\n      throw new Error('数据库连接池未初始化');\n    }\n\n    if (!this.isHealthy) {\n      throw new Error('数据库连接不健康');\n    }\n\n    return await this.pool.connect();\n  }\n\n  /**\n   * 执行查询\n   */\n  async query(text, params) {\n    if (!this.pool) {\n      throw new Error('数据库连接池未初始化');\n    }\n\n    if (!this.isHealthy) {\n      throw new Error('数据库连接不健康');\n    }\n\n    return await this.pool.query(text, params);\n  }\n\n  /**\n   * 关闭连接池\n   */\n  async close() {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = null;\n    }\n\n    if (this.pool) {\n      await this.pool.end();\n      this.pool = null;\n    }\n\n    this.isHealthy = false;\n    console.log('数据库连接池已关闭');\n  }\n}\n\n// 单例实例\nconst healthChecker = new DatabaseHealthChecker();\n\nmodule.exports = {\n  DatabaseHealthChecker,\n  healthChecker\n};"],"mappings":"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","ignoreList":[]}