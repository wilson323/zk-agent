b4c74d89302a74fe9e3cc3b757403cc9
"use strict";

/* istanbul ignore next */
function cov_21antz9dpk() {
  var path = "E:\\zk-agent\\lib\\cad\\cad-database.ts";
  var hash = "98fd69e203a4c893fae35fd1e9f950e77910b1f5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\cad\\cad-database.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 51
        }
      },
      "2": {
        start: {
          line: 5,
          column: 13
        },
        end: {
          line: 5,
          column: 26
        }
      },
      "3": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 14,
          column: 11
        }
      },
      "4": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 20,
          column: 48
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 102,
          column: 9
        }
      },
      "6": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "7": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "8": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "9": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "10": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "11": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 41
        }
      },
      "12": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 43
        }
      },
      "13": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 24
        }
      },
      "14": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 101,
          column: 29
        }
      },
      "15": {
        start: {
          line: 108,
          column: 23
        },
        end: {
          line: 108,
          column: 48
        }
      },
      "16": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "17": {
        start: {
          line: 110,
          column: 27
        },
        end: {
          line: 130,
          column: 14
        }
      },
      "18": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 37
        }
      },
      "19": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 29
        }
      },
      "20": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "21": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 22
        }
      },
      "22": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 48
        }
      },
      "23": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "24": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 40
        }
      },
      "25": {
        start: {
          line: 147,
          column: 30
        },
        end: {
          line: 147,
          column: 32
        }
      },
      "26": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "27": {
        start: {
          line: 149,
          column: 31
        },
        end: {
          line: 170,
          column: 18
        }
      },
      "28": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 50
        }
      },
      "29": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 41
        }
      },
      "30": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 29
        }
      },
      "31": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 43
        }
      },
      "32": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 24
        }
      },
      "33": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 29
        }
      },
      "34": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "35": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 22
        }
      },
      "36": {
        start: {
          line: 191,
          column: 23
        },
        end: {
          line: 191,
          column: 48
        }
      },
      "37": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "38": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 193,
          column: 40
        }
      },
      "39": {
        start: {
          line: 194,
          column: 28
        },
        end: {
          line: 194,
          column: 30
        }
      },
      "40": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "41": {
        start: {
          line: 196,
          column: 31
        },
        end: {
          line: 214,
          column: 18
        }
      },
      "42": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 48
        }
      },
      "43": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 217,
          column: 41
        }
      },
      "44": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 27
        }
      },
      "45": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 43
        }
      },
      "46": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 24
        }
      },
      "47": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 29
        }
      },
      "48": {
        start: {
          line: 232,
          column: 23
        },
        end: {
          line: 232,
          column: 48
        }
      },
      "49": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "50": {
        start: {
          line: 234,
          column: 27
        },
        end: {
          line: 243,
          column: 33
        }
      },
      "51": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 260,
          column: 16
        }
      },
      "52": {
        start: {
          line: 244,
          column: 45
        },
        end: {
          line: 260,
          column: 13
        }
      },
      "53": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 29
        }
      },
      "54": {
        start: {
          line: 270,
          column: 23
        },
        end: {
          line: 270,
          column: 48
        }
      },
      "55": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "56": {
        start: {
          line: 272,
          column: 27
        },
        end: {
          line: 279,
          column: 14
        }
      },
      "57": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "58": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 28
        }
      },
      "59": {
        start: {
          line: 283,
          column: 24
        },
        end: {
          line: 283,
          column: 38
        }
      },
      "60": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 300,
          column: 14
        }
      },
      "61": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 29
        }
      },
      "62": {
        start: {
          line: 310,
          column: 23
        },
        end: {
          line: 310,
          column: 48
        }
      },
      "63": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "64": {
        start: {
          line: 312,
          column: 27
        },
        end: {
          line: 320,
          column: 22
        }
      },
      "65": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 338,
          column: 16
        }
      },
      "66": {
        start: {
          line: 321,
          column: 45
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "67": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 341,
          column: 29
        }
      },
      "68": {
        start: {
          line: 348,
          column: 23
        },
        end: {
          line: 348,
          column: 48
        }
      },
      "69": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "70": {
        start: {
          line: 350,
          column: 27
        },
        end: {
          line: 365,
          column: 22
        }
      },
      "71": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 381,
          column: 16
        }
      },
      "72": {
        start: {
          line: 366,
          column: 45
        },
        end: {
          line: 381,
          column: 13
        }
      },
      "73": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 29
        }
      },
      "74": {
        start: {
          line: 391,
          column: 23
        },
        end: {
          line: 391,
          column: 48
        }
      },
      "75": {
        start: {
          line: 392,
          column: 8
        },
        end: {
          line: 401,
          column: 9
        }
      },
      "76": {
        start: {
          line: 393,
          column: 12
        },
        end: {
          line: 397,
          column: 37
        }
      },
      "77": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 400,
          column: 29
        }
      },
      "78": {
        start: {
          line: 407,
          column: 23
        },
        end: {
          line: 407,
          column: 48
        }
      },
      "79": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 417,
          column: 9
        }
      },
      "80": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 413,
          column: 35
        }
      },
      "81": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 29
        }
      },
      "82": {
        start: {
          line: 423,
          column: 23
        },
        end: {
          line: 423,
          column: 48
        }
      },
      "83": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 472,
          column: 9
        }
      },
      "84": {
        start: {
          line: 425,
          column: 32
        },
        end: {
          line: 425,
          column: 66
        }
      },
      "85": {
        start: {
          line: 426,
          column: 27
        },
        end: {
          line: 426,
          column: 49
        }
      },
      "86": {
        start: {
          line: 427,
          column: 34
        },
        end: {
          line: 435,
          column: 16
        }
      },
      "87": {
        start: {
          line: 436,
          column: 32
        },
        end: {
          line: 446,
          column: 16
        }
      },
      "88": {
        start: {
          line: 447,
          column: 30
        },
        end: {
          line: 456,
          column: 16
        }
      },
      "89": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 468,
          column: 14
        }
      },
      "90": {
        start: {
          line: 460,
          column: 65
        },
        end: {
          line: 460,
          column: 97
        }
      },
      "91": {
        start: {
          line: 465,
          column: 63
        },
        end: {
          line: 465,
          column: 95
        }
      },
      "92": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 29
        }
      },
      "93": {
        start: {
          line: 478,
          column: 23
        },
        end: {
          line: 478,
          column: 48
        }
      },
      "94": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 484,
          column: 9
        }
      },
      "95": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 79
        }
      },
      "96": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 29
        }
      },
      "97": {
        start: {
          line: 490,
          column: 23
        },
        end: {
          line: 490,
          column: 48
        }
      },
      "98": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 501,
          column: 9
        }
      },
      "99": {
        start: {
          line: 492,
          column: 27
        },
        end: {
          line: 496,
          column: 8
        }
      },
      "100": {
        start: {
          line: 497,
          column: 12
        },
        end: {
          line: 497,
          column: 40
        }
      },
      "101": {
        start: {
          line: 500,
          column: 12
        },
        end: {
          line: 500,
          column: 29
        }
      },
      "102": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 507,
          column: 30
        }
      },
      "103": {
        start: {
          line: 510,
          column: 0
        },
        end: {
          line: 510,
          column: 34
        }
      },
      "104": {
        start: {
          line: 512,
          column: 0
        },
        end: {
          line: 512,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 18
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 29
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 31
          },
          end: {
            line: 136,
            column: 5
          }
        },
        line: 107
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 31
          },
          end: {
            line: 183,
            column: 5
          }
        },
        line: 140
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 27
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 187
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 58
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 231
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 244,
            column: 35
          },
          end: {
            line: 244,
            column: 36
          }
        },
        loc: {
          start: {
            line: 244,
            column: 45
          },
          end: {
            line: 260,
            column: 13
          }
        },
        line: 244
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 30
          },
          end: {
            line: 305,
            column: 5
          }
        },
        line: 269
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 309,
            column: 4
          },
          end: {
            line: 309,
            column: 5
          }
        },
        loc: {
          start: {
            line: 309,
            column: 41
          },
          end: {
            line: 343,
            column: 5
          }
        },
        line: 309
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 321,
            column: 35
          },
          end: {
            line: 321,
            column: 36
          }
        },
        loc: {
          start: {
            line: 321,
            column: 45
          },
          end: {
            line: 338,
            column: 13
          }
        },
        line: 321
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 39
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 347
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 366,
            column: 35
          },
          end: {
            line: 366,
            column: 36
          }
        },
        loc: {
          start: {
            line: 366,
            column: 45
          },
          end: {
            line: 381,
            column: 13
          }
        },
        line: 366
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 57
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 390
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 51
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 406
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 422,
            column: 4
          },
          end: {
            line: 422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 422,
            column: 32
          },
          end: {
            line: 473,
            column: 5
          }
        },
        line: 422
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 460,
            column: 51
          },
          end: {
            line: 460,
            column: 52
          }
        },
        loc: {
          start: {
            line: 460,
            column: 65
          },
          end: {
            line: 460,
            column: 97
          }
        },
        line: 460
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 465,
            column: 49
          },
          end: {
            line: 465,
            column: 50
          }
        },
        loc: {
          start: {
            line: 465,
            column: 63
          },
          end: {
            line: 465,
            column: 95
          }
        },
        line: 465
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 477,
            column: 4
          },
          end: {
            line: 477,
            column: 5
          }
        },
        loc: {
          start: {
            line: 477,
            column: 29
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 477
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 489,
            column: 4
          },
          end: {
            line: 489,
            column: 5
          }
        },
        loc: {
          start: {
            line: 489,
            column: 42
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 489
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 506,
            column: 4
          },
          end: {
            line: 506,
            column: 5
          }
        },
        loc: {
          start: {
            line: 506,
            column: 18
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 506
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 17
          },
          end: {
            line: 10,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 10,
            column: 57
          },
          end: {
            line: 10,
            column: 86
          }
        }, {
          start: {
            line: 10,
            column: 89
          },
          end: {
            line: 10,
            column: 94
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "2": {
        loc: {
          start: {
            line: 168,
            column: 35
          },
          end: {
            line: 168,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 35
          },
          end: {
            line: 168,
            column: 53
          }
        }, {
          start: {
            line: 168,
            column: 57
          },
          end: {
            line: 168,
            column: 59
          }
        }],
        line: 168
      },
      "3": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "4": {
        loc: {
          start: {
            line: 231,
            column: 34
          },
          end: {
            line: 231,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 231,
            column: 42
          },
          end: {
            line: 231,
            column: 44
          }
        }],
        line: 231
      },
      "5": {
        loc: {
          start: {
            line: 231,
            column: 46
          },
          end: {
            line: 231,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 231,
            column: 55
          },
          end: {
            line: 231,
            column: 56
          }
        }],
        line: 231
      },
      "6": {
        loc: {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 282,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "7": {
        loc: {
          start: {
            line: 425,
            column: 32
          },
          end: {
            line: 425,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 425,
            column: 41
          },
          end: {
            line: 425,
            column: 61
          }
        }, {
          start: {
            line: 425,
            column: 64
          },
          end: {
            line: 425,
            column: 66
          }
        }],
        line: 425
      },
      "8": {
        loc: {
          start: {
            line: 426,
            column: 27
          },
          end: {
            line: 426,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 426,
            column: 36
          },
          end: {
            line: 426,
            column: 44
          }
        }, {
          start: {
            line: 426,
            column: 47
          },
          end: {
            line: 426,
            column: 49
          }
        }],
        line: 426
      },
      "9": {
        loc: {
          start: {
            line: 489,
            column: 28
          },
          end: {
            line: 489,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 489,
            column: 38
          },
          end: {
            line: 489,
            column: 40
          }
        }],
        line: 489
      },
      "10": {
        loc: {
          start: {
            line: 497,
            column: 19
          },
          end: {
            line: 497,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 497,
            column: 19
          },
          end: {
            line: 497,
            column: 34
          }
        }, {
          start: {
            line: 497,
            column: 38
          },
          end: {
            line: 497,
            column: 39
          }
        }],
        line: 497
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\cad\\cad-database.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\lib\\cad\\cad-database.ts"],
      sourcesContent: ["// @ts-nocheck\nimport { Pool } from \"pg\"\n\nexport interface CADAnalysisRecord {\n  id: string\n  userId: string\n  fileName: string\n  fileSize: number\n  fileType: string\n  analysisConfig: any\n  analysisResult: any\n  devices: any[]\n  risks: any[]\n  complianceStatus: any\n  createdAt: Date\n  updatedAt: Date\n  status: \"pending\" | \"processing\" | \"completed\" | \"failed\"\n  processingTime?: number\n  errorMessage?: string\n}\n\nexport interface DeviceRecord {\n  id: string\n  analysisId: string\n  name: string\n  category: string\n  type: string\n  specifications: any\n  location: {\n    x: number\n    y: number\n    z: number\n    room?: string\n    zone?: string\n  }\n  connections: any\n  status: string\n  installDate?: Date\n  warrantyExpiry?: Date\n  maintenanceSchedule?: string\n  riskFactors?: string[]\n  aiConfidence?: number\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface RiskRecord {\n  id: string\n  analysisId: string\n  deviceId?: string\n  title: string\n  description: string\n  category: string\n  severity: \"low\" | \"medium\" | \"high\" | \"critical\"\n  location: any\n  recommendations: string[]\n  status: \"open\" | \"acknowledged\" | \"resolved\" | \"false_positive\"\n  assignedTo?: string\n  dueDate?: Date\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport class CADDatabase {\n  private pool: Pool\n\n  constructor() {\n    this.pool = new Pool({\n      connectionString: process.env.DATABASE_URL,\n      ssl: process.env.NODE_ENV === \"production\" ? { rejectUnauthorized: false } : false,\n      max: 20,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    })\n  }\n\n  /**\n   * \u521D\u59CB\u5316\u6570\u636E\u5E93\u8868\n   */\n  async initializeTables(): Promise<void> {\n    const client = await this.pool.connect()\n\n    try {\n      await client.query(\"BEGIN\")\n\n      // \u521B\u5EFACAD\u5206\u6790\u8BB0\u5F55\u8868\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS cad_analyses (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          user_id VARCHAR(255) NOT NULL,\n          file_name VARCHAR(500) NOT NULL,\n          file_size BIGINT NOT NULL,\n          file_type VARCHAR(50) NOT NULL,\n          analysis_config JSONB NOT NULL DEFAULT '{}',\n          analysis_result JSONB NOT NULL DEFAULT '{}',\n          devices JSONB NOT NULL DEFAULT '[]',\n          risks JSONB NOT NULL DEFAULT '[]',\n          compliance_status JSONB NOT NULL DEFAULT '{}',\n          status VARCHAR(50) NOT NULL DEFAULT 'pending',\n          processing_time INTEGER,\n          error_message TEXT,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        )\n      `)\n\n      // \u521B\u5EFA\u8BBE\u5907\u8BB0\u5F55\u8868\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS cad_devices (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          analysis_id UUID NOT NULL REFERENCES cad_analyses(id) ON DELETE CASCADE,\n          name VARCHAR(255) NOT NULL,\n          category VARCHAR(100) NOT NULL,\n          type VARCHAR(100) NOT NULL,\n          specifications JSONB NOT NULL DEFAULT '{}',\n          location JSONB NOT NULL DEFAULT '{}',\n          connections JSONB NOT NULL DEFAULT '{}',\n          status VARCHAR(50) NOT NULL DEFAULT 'active',\n          install_date DATE,\n          warranty_expiry DATE,\n          maintenance_schedule TEXT,\n          risk_factors JSONB DEFAULT '[]',\n          ai_confidence DECIMAL(3,2),\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        )\n      `)\n\n      // \u521B\u5EFA\u98CE\u9669\u8BB0\u5F55\u8868\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS cad_risks (\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n          analysis_id UUID NOT NULL REFERENCES cad_analyses(id) ON DELETE CASCADE,\n          device_id UUID REFERENCES cad_devices(id) ON DELETE SET NULL,\n          title VARCHAR(255) NOT NULL,\n          description TEXT NOT NULL,\n          category VARCHAR(100) NOT NULL,\n          severity VARCHAR(20) NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),\n          location JSONB NOT NULL DEFAULT '{}',\n          recommendations JSONB NOT NULL DEFAULT '[]',\n          status VARCHAR(50) NOT NULL DEFAULT 'open',\n          assigned_to VARCHAR(255),\n          due_date DATE,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        )\n      `)\n\n      // \u521B\u5EFA\u7D22\u5F15\n      await client.query(`\n        CREATE INDEX IF NOT EXISTS idx_cad_analyses_user_id ON cad_analyses(user_id);\n        CREATE INDEX IF NOT EXISTS idx_cad_analyses_status ON cad_analyses(status);\n        CREATE INDEX IF NOT EXISTS idx_cad_analyses_created_at ON cad_analyses(created_at);\n        CREATE INDEX IF NOT EXISTS idx_cad_devices_analysis_id ON cad_devices(analysis_id);\n        CREATE INDEX IF NOT EXISTS idx_cad_devices_category ON cad_devices(category);\n        CREATE INDEX IF NOT EXISTS idx_cad_risks_analysis_id ON cad_risks(analysis_id);\n        CREATE INDEX IF NOT EXISTS idx_cad_risks_severity ON cad_risks(severity);\n        CREATE INDEX IF NOT EXISTS idx_cad_risks_status ON cad_risks(status);\n      `)\n\n      await client.query(\"COMMIT\")\n    } catch (error) {\n      await client.query(\"ROLLBACK\")\n      throw error\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u4FDD\u5B58CAD\u5206\u6790\u8BB0\u5F55\n   */\n  async saveAnalysis(record: Omit<CADAnalysisRecord, \"id\" | \"createdAt\" | \"updatedAt\">): Promise<string> {\n    const client = await this.pool.connect()\n\n    try {\n      const result = await client.query(\n        `\n        INSERT INTO cad_analyses (\n          user_id, file_name, file_size, file_type, analysis_config,\n          analysis_result, devices, risks, compliance_status, status,\n          processing_time, error_message\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n        RETURNING id\n      `,\n        [\n          record.userId,\n          record.fileName,\n          record.fileSize,\n          record.fileType,\n          JSON.stringify(record.analysisConfig),\n          JSON.stringify(record.analysisResult),\n          JSON.stringify(record.devices),\n          JSON.stringify(record.risks),\n          JSON.stringify(record.complianceStatus),\n          record.status,\n          record.processingTime,\n          record.errorMessage,\n        ],\n      )\n\n      return result.rows[0].id\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u6279\u91CF\u4FDD\u5B58\u8BBE\u5907\u8BB0\u5F55\n   */\n  async saveDevices(devices: Omit<DeviceRecord, \"id\" | \"createdAt\" | \"updatedAt\">[]): Promise<string[]> {\n    if (devices.length === 0) {return []}\n\n    const client = await this.pool.connect()\n\n    try {\n      await client.query(\"BEGIN\")\n\n      const deviceIds: string[] = []\n\n      for (const device of devices) {\n        const result = await client.query(\n          `\n          INSERT INTO cad_devices (\n            analysis_id, name, category, type, specifications, location,\n            connections, status, install_date, warranty_expiry,\n            maintenance_schedule, risk_factors, ai_confidence\n          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)\n          RETURNING id\n        `,\n          [\n            device.analysisId,\n            device.name,\n            device.category,\n            device.type,\n            JSON.stringify(device.specifications),\n            JSON.stringify(device.location),\n            JSON.stringify(device.connections),\n            device.status,\n            device.installDate,\n            device.warrantyExpiry,\n            device.maintenanceSchedule,\n            JSON.stringify(device.riskFactors || []),\n            device.aiConfidence,\n          ],\n        )\n\n        deviceIds.push(result.rows[0].id)\n      }\n\n      await client.query(\"COMMIT\")\n      return deviceIds\n    } catch (error) {\n      await client.query(\"ROLLBACK\")\n      throw error\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u6279\u91CF\u4FDD\u5B58\u98CE\u9669\u8BB0\u5F55\n   */\n  async saveRisks(risks: Omit<RiskRecord, \"id\" | \"createdAt\" | \"updatedAt\">[]): Promise<string[]> {\n    if (risks.length === 0) {return []}\n\n    const client = await this.pool.connect()\n\n    try {\n      await client.query(\"BEGIN\")\n\n      const riskIds: string[] = []\n\n      for (const risk of risks) {\n        const result = await client.query(\n          `\n          INSERT INTO cad_risks (\n            analysis_id, device_id, title, description, category, severity,\n            location, recommendations, status, assigned_to, due_date\n          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n          RETURNING id\n        `,\n          [\n            risk.analysisId,\n            risk.deviceId,\n            risk.title,\n            risk.description,\n            risk.category,\n            risk.severity,\n            JSON.stringify(risk.location),\n            JSON.stringify(risk.recommendations),\n            risk.status,\n            risk.assignedTo,\n            risk.dueDate,\n          ],\n        )\n\n        riskIds.push(result.rows[0].id)\n      }\n\n      await client.query(\"COMMIT\")\n      return riskIds\n    } catch (error) {\n      await client.query(\"ROLLBACK\")\n      throw error\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u83B7\u53D6\u7528\u6237\u7684\u5206\u6790\u5386\u53F2\n   */\n  async getUserAnalyses(userId: string, limit = 50, offset = 0): Promise<CADAnalysisRecord[]> {\n    const client = await this.pool.connect()\n\n    try {\n      const result = await client.query(\n        `\n        SELECT \n          id, user_id, file_name, file_size, file_type, analysis_config,\n          analysis_result, devices, risks, compliance_status, status,\n          processing_time, error_message, created_at, updated_at\n        FROM cad_analyses \n        WHERE user_id = $1 \n        ORDER BY created_at DESC \n        LIMIT $2 OFFSET $3\n      `,\n        [userId, limit, offset],\n      )\n\n      return result.rows.map((row) => ({\n        id: row.id,\n        userId: row.user_id,\n        fileName: row.file_name,\n        fileSize: row.file_size,\n        fileType: row.file_type,\n        analysisConfig: row.analysis_config,\n        analysisResult: row.analysis_result,\n        devices: row.devices,\n        risks: row.risks,\n        complianceStatus: row.compliance_status,\n        status: row.status,\n        processingTime: row.processing_time,\n        errorMessage: row.error_message,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n      }))\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u83B7\u53D6\u5206\u6790\u8BE6\u60C5\n   */\n  async getAnalysisById(id: string): Promise<CADAnalysisRecord | null> {\n    const client = await this.pool.connect()\n\n    try {\n      const result = await client.query(\n        `\n        SELECT \n          id, user_id, file_name, file_size, file_type, analysis_config,\n          analysis_result, devices, risks, compliance_status, status,\n          processing_time, error_message, created_at, updated_at\n        FROM cad_analyses \n        WHERE id = $1\n      `,\n        [id],\n      )\n\n      if (result.rows.length === 0) {return null}\n\n      const row = result.rows[0]\n      return {\n        id: row.id,\n        userId: row.user_id,\n        fileName: row.file_name,\n        fileSize: row.file_size,\n        fileType: row.file_type,\n        analysisConfig: row.analysis_config,\n        analysisResult: row.analysis_result,\n        devices: row.devices,\n        risks: row.risks,\n        complianceStatus: row.compliance_status,\n        status: row.status,\n        processingTime: row.processing_time,\n        errorMessage: row.error_message,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n      }\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u83B7\u53D6\u5206\u6790\u7684\u8BBE\u5907\u5217\u8868\n   */\n  async getAnalysisDevices(analysisId: string): Promise<DeviceRecord[]> {\n    const client = await this.pool.connect()\n\n    try {\n      const result = await client.query(\n        `\n        SELECT \n          id, analysis_id, name, category, type, specifications, location,\n          connections, status, install_date, warranty_expiry, maintenance_schedule,\n          risk_factors, ai_confidence, created_at, updated_at\n        FROM cad_devices \n        WHERE analysis_id = $1\n        ORDER BY created_at ASC\n      `,\n        [analysisId],\n      )\n\n      return result.rows.map((row) => ({\n        id: row.id,\n        analysisId: row.analysis_id,\n        name: row.name,\n        category: row.category,\n        type: row.type,\n        specifications: row.specifications,\n        location: row.location,\n        connections: row.connections,\n        status: row.status,\n        installDate: row.install_date,\n        warrantyExpiry: row.warranty_expiry,\n        maintenanceSchedule: row.maintenance_schedule,\n        riskFactors: row.risk_factors,\n        aiConfidence: row.ai_confidence,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n      }))\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u83B7\u53D6\u5206\u6790\u7684\u98CE\u9669\u5217\u8868\n   */\n  async getAnalysisRisks(analysisId: string): Promise<RiskRecord[]> {\n    const client = await this.pool.connect()\n\n    try {\n      const result = await client.query(\n        `\n        SELECT \n          id, analysis_id, device_id, title, description, category, severity,\n          location, recommendations, status, assigned_to, due_date,\n          created_at, updated_at\n        FROM cad_risks \n        WHERE analysis_id = $1\n        ORDER BY \n          CASE severity \n            WHEN 'critical' THEN 1 \n            WHEN 'high' THEN 2 \n            WHEN 'medium' THEN 3 \n            WHEN 'low' THEN 4 \n          END,\n          created_at ASC\n      `,\n        [analysisId],\n      )\n\n      return result.rows.map((row) => ({\n        id: row.id,\n        analysisId: row.analysis_id,\n        deviceId: row.device_id,\n        title: row.title,\n        description: row.description,\n        category: row.category,\n        severity: row.severity,\n        location: row.location,\n        recommendations: row.recommendations,\n        status: row.status,\n        assignedTo: row.assigned_to,\n        dueDate: row.due_date,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n      }))\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u66F4\u65B0\u5206\u6790\u72B6\u6001\n   */\n  async updateAnalysisStatus(id: string, status: string, errorMessage?: string): Promise<void> {\n    const client = await this.pool.connect()\n\n    try {\n      await client.query(\n        `\n        UPDATE cad_analyses \n        SET status = $1, error_message = $2, updated_at = NOW()\n        WHERE id = $3\n      `,\n        [status, errorMessage, id],\n      )\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u66F4\u65B0\u98CE\u9669\u72B6\u6001\n   */\n  async updateRiskStatus(id: string, status: string, assignedTo?: string): Promise<void> {\n    const client = await this.pool.connect()\n\n    try {\n      await client.query(\n        `\n        UPDATE cad_risks \n        SET status = $1, assigned_to = $2, updated_at = NOW()\n        WHERE id = $3\n      `,\n        [status, assignedTo, id],\n      )\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u83B7\u53D6\u7EDF\u8BA1\u4FE1\u606F\n   */\n  async getStatistics(userId?: string): Promise<any> {\n    const client = await this.pool.connect()\n\n    try {\n      const whereClause = userId ? \"WHERE user_id = $1\" : \"\"\n      const params = userId ? [userId] : []\n\n      const analysisStats = await client.query(\n        `\n        SELECT \n          COUNT(*) as total_analyses,\n          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_analyses,\n          COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_analyses,\n          AVG(processing_time) as avg_processing_time\n        FROM cad_analyses \n        ${whereClause}\n      `,\n        params,\n      )\n\n      const deviceStats = await client.query(\n        `\n        SELECT \n          COUNT(*) as total_devices,\n          COUNT(DISTINCT category) as device_categories,\n          category,\n          COUNT(*) as count\n        FROM cad_devices d\n        JOIN cad_analyses a ON d.analysis_id = a.id\n        ${whereClause.replace(\"user_id\", \"a.user_id\")}\n        GROUP BY category\n      `,\n        params,\n      )\n\n      const riskStats = await client.query(\n        `\n        SELECT \n          COUNT(*) as total_risks,\n          severity,\n          COUNT(*) as count\n        FROM cad_risks r\n        JOIN cad_analyses a ON r.analysis_id = a.id\n        ${whereClause.replace(\"user_id\", \"a.user_id\")}\n        GROUP BY severity\n      `,\n        params,\n      )\n\n      return {\n        analyses: analysisStats.rows[0],\n        devices: {\n          total: deviceStats.rows.reduce((sum, row) => sum + Number.parseInt(row.count), 0),\n          categories: deviceStats.rows.length,\n          breakdown: deviceStats.rows,\n        },\n        risks: {\n          total: riskStats.rows.reduce((sum, row) => sum + Number.parseInt(row.count), 0),\n          breakdown: riskStats.rows,\n        },\n      }\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u5220\u9664\u5206\u6790\u8BB0\u5F55\n   */\n  async deleteAnalysis(id: string): Promise<void> {\n    const client = await this.pool.connect()\n\n    try {\n      await client.query(\"DELETE FROM cad_analyses WHERE id = $1\", [id])\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u6E05\u7406\u65E7\u8BB0\u5F55\n   */\n  async cleanupOldRecords(daysOld = 90): Promise<number> {\n    const client = await this.pool.connect()\n\n    try {\n      const result = await client.query(`\n        DELETE FROM cad_analyses \n        WHERE created_at < NOW() - INTERVAL '${daysOld} days'\n        AND status IN ('completed', 'failed')\n      `)\n\n      return result.rowCount || 0\n    } finally {\n      client.release()\n    }\n  }\n\n  /**\n   * \u5173\u95ED\u6570\u636E\u5E93\u8FDE\u63A5\n   */\n  async close(): Promise<void> {\n    await this.pool.end()\n  }\n}\n\n// \u521B\u5EFA\u5355\u4F8B\u5B9E\u4F8B\nexport const cadDatabase = new CADDatabase()\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "98fd69e203a4c893fae35fd1e9f950e77910b1f5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21antz9dpk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21antz9dpk();
cov_21antz9dpk().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_21antz9dpk().s[1]++;
exports.cadDatabase = exports.CADDatabase = void 0;
// @ts-nocheck
const pg_1 =
/* istanbul ignore next */
(cov_21antz9dpk().s[2]++, require("pg"));
class CADDatabase {
  constructor() {
    /* istanbul ignore next */
    cov_21antz9dpk().f[0]++;
    cov_21antz9dpk().s[3]++;
    this.pool = new pg_1.Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === "production" ?
      /* istanbul ignore next */
      (cov_21antz9dpk().b[0][0]++, {
        rejectUnauthorized: false
      }) :
      /* istanbul ignore next */
      (cov_21antz9dpk().b[0][1]++, false),
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000
    });
  }
  /**
   * 初始化数据库表
   */
  async initializeTables() {
    /* istanbul ignore next */
    cov_21antz9dpk().f[1]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[4]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[5]++;
    try {
      /* istanbul ignore next */
      cov_21antz9dpk().s[6]++;
      await client.query("BEGIN");
      // 创建CAD分析记录表
      /* istanbul ignore next */
      cov_21antz9dpk().s[7]++;
      await client.query(`
        CREATE TABLE IF NOT EXISTS cad_analyses (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id VARCHAR(255) NOT NULL,
          file_name VARCHAR(500) NOT NULL,
          file_size BIGINT NOT NULL,
          file_type VARCHAR(50) NOT NULL,
          analysis_config JSONB NOT NULL DEFAULT '{}',
          analysis_result JSONB NOT NULL DEFAULT '{}',
          devices JSONB NOT NULL DEFAULT '[]',
          risks JSONB NOT NULL DEFAULT '[]',
          compliance_status JSONB NOT NULL DEFAULT '{}',
          status VARCHAR(50) NOT NULL DEFAULT 'pending',
          processing_time INTEGER,
          error_message TEXT,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
      `);
      // 创建设备记录表
      /* istanbul ignore next */
      cov_21antz9dpk().s[8]++;
      await client.query(`
        CREATE TABLE IF NOT EXISTS cad_devices (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          analysis_id UUID NOT NULL REFERENCES cad_analyses(id) ON DELETE CASCADE,
          name VARCHAR(255) NOT NULL,
          category VARCHAR(100) NOT NULL,
          type VARCHAR(100) NOT NULL,
          specifications JSONB NOT NULL DEFAULT '{}',
          location JSONB NOT NULL DEFAULT '{}',
          connections JSONB NOT NULL DEFAULT '{}',
          status VARCHAR(50) NOT NULL DEFAULT 'active',
          install_date DATE,
          warranty_expiry DATE,
          maintenance_schedule TEXT,
          risk_factors JSONB DEFAULT '[]',
          ai_confidence DECIMAL(3,2),
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
      `);
      // 创建风险记录表
      /* istanbul ignore next */
      cov_21antz9dpk().s[9]++;
      await client.query(`
        CREATE TABLE IF NOT EXISTS cad_risks (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          analysis_id UUID NOT NULL REFERENCES cad_analyses(id) ON DELETE CASCADE,
          device_id UUID REFERENCES cad_devices(id) ON DELETE SET NULL,
          title VARCHAR(255) NOT NULL,
          description TEXT NOT NULL,
          category VARCHAR(100) NOT NULL,
          severity VARCHAR(20) NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
          location JSONB NOT NULL DEFAULT '{}',
          recommendations JSONB NOT NULL DEFAULT '[]',
          status VARCHAR(50) NOT NULL DEFAULT 'open',
          assigned_to VARCHAR(255),
          due_date DATE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        )
      `);
      // 创建索引
      /* istanbul ignore next */
      cov_21antz9dpk().s[10]++;
      await client.query(`
        CREATE INDEX IF NOT EXISTS idx_cad_analyses_user_id ON cad_analyses(user_id);
        CREATE INDEX IF NOT EXISTS idx_cad_analyses_status ON cad_analyses(status);
        CREATE INDEX IF NOT EXISTS idx_cad_analyses_created_at ON cad_analyses(created_at);
        CREATE INDEX IF NOT EXISTS idx_cad_devices_analysis_id ON cad_devices(analysis_id);
        CREATE INDEX IF NOT EXISTS idx_cad_devices_category ON cad_devices(category);
        CREATE INDEX IF NOT EXISTS idx_cad_risks_analysis_id ON cad_risks(analysis_id);
        CREATE INDEX IF NOT EXISTS idx_cad_risks_severity ON cad_risks(severity);
        CREATE INDEX IF NOT EXISTS idx_cad_risks_status ON cad_risks(status);
      `);
      /* istanbul ignore next */
      cov_21antz9dpk().s[11]++;
      await client.query("COMMIT");
    } catch (error) {
      /* istanbul ignore next */
      cov_21antz9dpk().s[12]++;
      await client.query("ROLLBACK");
      /* istanbul ignore next */
      cov_21antz9dpk().s[13]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[14]++;
      client.release();
    }
  }
  /**
   * 保存CAD分析记录
   */
  async saveAnalysis(record) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[2]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[15]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[16]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[17]++, await client.query(`
        INSERT INTO cad_analyses (
          user_id, file_name, file_size, file_type, analysis_config,
          analysis_result, devices, risks, compliance_status, status,
          processing_time, error_message
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
        RETURNING id
      `, [record.userId, record.fileName, record.fileSize, record.fileType, JSON.stringify(record.analysisConfig), JSON.stringify(record.analysisResult), JSON.stringify(record.devices), JSON.stringify(record.risks), JSON.stringify(record.complianceStatus), record.status, record.processingTime, record.errorMessage]));
      /* istanbul ignore next */
      cov_21antz9dpk().s[18]++;
      return result.rows[0].id;
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[19]++;
      client.release();
    }
  }
  /**
   * 批量保存设备记录
   */
  async saveDevices(devices) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[3]++;
    cov_21antz9dpk().s[20]++;
    if (devices.length === 0) {
      /* istanbul ignore next */
      cov_21antz9dpk().b[1][0]++;
      cov_21antz9dpk().s[21]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_21antz9dpk().b[1][1]++;
    }
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[22]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[23]++;
    try {
      /* istanbul ignore next */
      cov_21antz9dpk().s[24]++;
      await client.query("BEGIN");
      const deviceIds =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[25]++, []);
      /* istanbul ignore next */
      cov_21antz9dpk().s[26]++;
      for (const device of devices) {
        const result =
        /* istanbul ignore next */
        (cov_21antz9dpk().s[27]++, await client.query(`
          INSERT INTO cad_devices (
            analysis_id, name, category, type, specifications, location,
            connections, status, install_date, warranty_expiry,
            maintenance_schedule, risk_factors, ai_confidence
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
          RETURNING id
        `, [device.analysisId, device.name, device.category, device.type, JSON.stringify(device.specifications), JSON.stringify(device.location), JSON.stringify(device.connections), device.status, device.installDate, device.warrantyExpiry, device.maintenanceSchedule, JSON.stringify(
        /* istanbul ignore next */
        (cov_21antz9dpk().b[2][0]++, device.riskFactors) ||
        /* istanbul ignore next */
        (cov_21antz9dpk().b[2][1]++, [])), device.aiConfidence]));
        /* istanbul ignore next */
        cov_21antz9dpk().s[28]++;
        deviceIds.push(result.rows[0].id);
      }
      /* istanbul ignore next */
      cov_21antz9dpk().s[29]++;
      await client.query("COMMIT");
      /* istanbul ignore next */
      cov_21antz9dpk().s[30]++;
      return deviceIds;
    } catch (error) {
      /* istanbul ignore next */
      cov_21antz9dpk().s[31]++;
      await client.query("ROLLBACK");
      /* istanbul ignore next */
      cov_21antz9dpk().s[32]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[33]++;
      client.release();
    }
  }
  /**
   * 批量保存风险记录
   */
  async saveRisks(risks) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[4]++;
    cov_21antz9dpk().s[34]++;
    if (risks.length === 0) {
      /* istanbul ignore next */
      cov_21antz9dpk().b[3][0]++;
      cov_21antz9dpk().s[35]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_21antz9dpk().b[3][1]++;
    }
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[36]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[37]++;
    try {
      /* istanbul ignore next */
      cov_21antz9dpk().s[38]++;
      await client.query("BEGIN");
      const riskIds =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[39]++, []);
      /* istanbul ignore next */
      cov_21antz9dpk().s[40]++;
      for (const risk of risks) {
        const result =
        /* istanbul ignore next */
        (cov_21antz9dpk().s[41]++, await client.query(`
          INSERT INTO cad_risks (
            analysis_id, device_id, title, description, category, severity,
            location, recommendations, status, assigned_to, due_date
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
          RETURNING id
        `, [risk.analysisId, risk.deviceId, risk.title, risk.description, risk.category, risk.severity, JSON.stringify(risk.location), JSON.stringify(risk.recommendations), risk.status, risk.assignedTo, risk.dueDate]));
        /* istanbul ignore next */
        cov_21antz9dpk().s[42]++;
        riskIds.push(result.rows[0].id);
      }
      /* istanbul ignore next */
      cov_21antz9dpk().s[43]++;
      await client.query("COMMIT");
      /* istanbul ignore next */
      cov_21antz9dpk().s[44]++;
      return riskIds;
    } catch (error) {
      /* istanbul ignore next */
      cov_21antz9dpk().s[45]++;
      await client.query("ROLLBACK");
      /* istanbul ignore next */
      cov_21antz9dpk().s[46]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[47]++;
      client.release();
    }
  }
  /**
   * 获取用户的分析历史
   */
  async getUserAnalyses(userId, limit =
  /* istanbul ignore next */
  (cov_21antz9dpk().b[4][0]++, 50), offset =
  /* istanbul ignore next */
  (cov_21antz9dpk().b[5][0]++, 0)) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[5]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[48]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[49]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[50]++, await client.query(`
        SELECT 
          id, user_id, file_name, file_size, file_type, analysis_config,
          analysis_result, devices, risks, compliance_status, status,
          processing_time, error_message, created_at, updated_at
        FROM cad_analyses 
        WHERE user_id = $1 
        ORDER BY created_at DESC 
        LIMIT $2 OFFSET $3
      `, [userId, limit, offset]));
      /* istanbul ignore next */
      cov_21antz9dpk().s[51]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_21antz9dpk().f[6]++;
        cov_21antz9dpk().s[52]++;
        return {
          id: row.id,
          userId: row.user_id,
          fileName: row.file_name,
          fileSize: row.file_size,
          fileType: row.file_type,
          analysisConfig: row.analysis_config,
          analysisResult: row.analysis_result,
          devices: row.devices,
          risks: row.risks,
          complianceStatus: row.compliance_status,
          status: row.status,
          processingTime: row.processing_time,
          errorMessage: row.error_message,
          createdAt: row.created_at,
          updatedAt: row.updated_at
        };
      });
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[53]++;
      client.release();
    }
  }
  /**
   * 获取分析详情
   */
  async getAnalysisById(id) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[7]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[54]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[55]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[56]++, await client.query(`
        SELECT 
          id, user_id, file_name, file_size, file_type, analysis_config,
          analysis_result, devices, risks, compliance_status, status,
          processing_time, error_message, created_at, updated_at
        FROM cad_analyses 
        WHERE id = $1
      `, [id]));
      /* istanbul ignore next */
      cov_21antz9dpk().s[57]++;
      if (result.rows.length === 0) {
        /* istanbul ignore next */
        cov_21antz9dpk().b[6][0]++;
        cov_21antz9dpk().s[58]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_21antz9dpk().b[6][1]++;
      }
      const row =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[59]++, result.rows[0]);
      /* istanbul ignore next */
      cov_21antz9dpk().s[60]++;
      return {
        id: row.id,
        userId: row.user_id,
        fileName: row.file_name,
        fileSize: row.file_size,
        fileType: row.file_type,
        analysisConfig: row.analysis_config,
        analysisResult: row.analysis_result,
        devices: row.devices,
        risks: row.risks,
        complianceStatus: row.compliance_status,
        status: row.status,
        processingTime: row.processing_time,
        errorMessage: row.error_message,
        createdAt: row.created_at,
        updatedAt: row.updated_at
      };
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[61]++;
      client.release();
    }
  }
  /**
   * 获取分析的设备列表
   */
  async getAnalysisDevices(analysisId) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[8]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[62]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[63]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[64]++, await client.query(`
        SELECT 
          id, analysis_id, name, category, type, specifications, location,
          connections, status, install_date, warranty_expiry, maintenance_schedule,
          risk_factors, ai_confidence, created_at, updated_at
        FROM cad_devices 
        WHERE analysis_id = $1
        ORDER BY created_at ASC
      `, [analysisId]));
      /* istanbul ignore next */
      cov_21antz9dpk().s[65]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_21antz9dpk().f[9]++;
        cov_21antz9dpk().s[66]++;
        return {
          id: row.id,
          analysisId: row.analysis_id,
          name: row.name,
          category: row.category,
          type: row.type,
          specifications: row.specifications,
          location: row.location,
          connections: row.connections,
          status: row.status,
          installDate: row.install_date,
          warrantyExpiry: row.warranty_expiry,
          maintenanceSchedule: row.maintenance_schedule,
          riskFactors: row.risk_factors,
          aiConfidence: row.ai_confidence,
          createdAt: row.created_at,
          updatedAt: row.updated_at
        };
      });
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[67]++;
      client.release();
    }
  }
  /**
   * 获取分析的风险列表
   */
  async getAnalysisRisks(analysisId) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[10]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[68]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[69]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[70]++, await client.query(`
        SELECT 
          id, analysis_id, device_id, title, description, category, severity,
          location, recommendations, status, assigned_to, due_date,
          created_at, updated_at
        FROM cad_risks 
        WHERE analysis_id = $1
        ORDER BY 
          CASE severity 
            WHEN 'critical' THEN 1 
            WHEN 'high' THEN 2 
            WHEN 'medium' THEN 3 
            WHEN 'low' THEN 4 
          END,
          created_at ASC
      `, [analysisId]));
      /* istanbul ignore next */
      cov_21antz9dpk().s[71]++;
      return result.rows.map(row => {
        /* istanbul ignore next */
        cov_21antz9dpk().f[11]++;
        cov_21antz9dpk().s[72]++;
        return {
          id: row.id,
          analysisId: row.analysis_id,
          deviceId: row.device_id,
          title: row.title,
          description: row.description,
          category: row.category,
          severity: row.severity,
          location: row.location,
          recommendations: row.recommendations,
          status: row.status,
          assignedTo: row.assigned_to,
          dueDate: row.due_date,
          createdAt: row.created_at,
          updatedAt: row.updated_at
        };
      });
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[73]++;
      client.release();
    }
  }
  /**
   * 更新分析状态
   */
  async updateAnalysisStatus(id, status, errorMessage) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[12]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[74]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[75]++;
    try {
      /* istanbul ignore next */
      cov_21antz9dpk().s[76]++;
      await client.query(`
        UPDATE cad_analyses 
        SET status = $1, error_message = $2, updated_at = NOW()
        WHERE id = $3
      `, [status, errorMessage, id]);
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[77]++;
      client.release();
    }
  }
  /**
   * 更新风险状态
   */
  async updateRiskStatus(id, status, assignedTo) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[13]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[78]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[79]++;
    try {
      /* istanbul ignore next */
      cov_21antz9dpk().s[80]++;
      await client.query(`
        UPDATE cad_risks 
        SET status = $1, assigned_to = $2, updated_at = NOW()
        WHERE id = $3
      `, [status, assignedTo, id]);
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[81]++;
      client.release();
    }
  }
  /**
   * 获取统计信息
   */
  async getStatistics(userId) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[14]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[82]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[83]++;
    try {
      const whereClause =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[84]++, userId ?
      /* istanbul ignore next */
      (cov_21antz9dpk().b[7][0]++, "WHERE user_id = $1") :
      /* istanbul ignore next */
      (cov_21antz9dpk().b[7][1]++, ""));
      const params =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[85]++, userId ?
      /* istanbul ignore next */
      (cov_21antz9dpk().b[8][0]++, [userId]) :
      /* istanbul ignore next */
      (cov_21antz9dpk().b[8][1]++, []));
      const analysisStats =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[86]++, await client.query(`
        SELECT 
          COUNT(*) as total_analyses,
          COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_analyses,
          COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_analyses,
          AVG(processing_time) as avg_processing_time
        FROM cad_analyses 
        ${whereClause}
      `, params));
      const deviceStats =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[87]++, await client.query(`
        SELECT 
          COUNT(*) as total_devices,
          COUNT(DISTINCT category) as device_categories,
          category,
          COUNT(*) as count
        FROM cad_devices d
        JOIN cad_analyses a ON d.analysis_id = a.id
        ${whereClause.replace("user_id", "a.user_id")}
        GROUP BY category
      `, params));
      const riskStats =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[88]++, await client.query(`
        SELECT 
          COUNT(*) as total_risks,
          severity,
          COUNT(*) as count
        FROM cad_risks r
        JOIN cad_analyses a ON r.analysis_id = a.id
        ${whereClause.replace("user_id", "a.user_id")}
        GROUP BY severity
      `, params));
      /* istanbul ignore next */
      cov_21antz9dpk().s[89]++;
      return {
        analyses: analysisStats.rows[0],
        devices: {
          total: deviceStats.rows.reduce((sum, row) => {
            /* istanbul ignore next */
            cov_21antz9dpk().f[15]++;
            cov_21antz9dpk().s[90]++;
            return sum + Number.parseInt(row.count);
          }, 0),
          categories: deviceStats.rows.length,
          breakdown: deviceStats.rows
        },
        risks: {
          total: riskStats.rows.reduce((sum, row) => {
            /* istanbul ignore next */
            cov_21antz9dpk().f[16]++;
            cov_21antz9dpk().s[91]++;
            return sum + Number.parseInt(row.count);
          }, 0),
          breakdown: riskStats.rows
        }
      };
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[92]++;
      client.release();
    }
  }
  /**
   * 删除分析记录
   */
  async deleteAnalysis(id) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[17]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[93]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[94]++;
    try {
      /* istanbul ignore next */
      cov_21antz9dpk().s[95]++;
      await client.query("DELETE FROM cad_analyses WHERE id = $1", [id]);
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[96]++;
      client.release();
    }
  }
  /**
   * 清理旧记录
   */
  async cleanupOldRecords(daysOld =
  /* istanbul ignore next */
  (cov_21antz9dpk().b[9][0]++, 90)) {
    /* istanbul ignore next */
    cov_21antz9dpk().f[18]++;
    const client =
    /* istanbul ignore next */
    (cov_21antz9dpk().s[97]++, await this.pool.connect());
    /* istanbul ignore next */
    cov_21antz9dpk().s[98]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_21antz9dpk().s[99]++, await client.query(`
        DELETE FROM cad_analyses 
        WHERE created_at < NOW() - INTERVAL '${daysOld} days'
        AND status IN ('completed', 'failed')
      `));
      /* istanbul ignore next */
      cov_21antz9dpk().s[100]++;
      return /* istanbul ignore next */(cov_21antz9dpk().b[10][0]++, result.rowCount) ||
      /* istanbul ignore next */
      (cov_21antz9dpk().b[10][1]++, 0);
    } finally {
      /* istanbul ignore next */
      cov_21antz9dpk().s[101]++;
      client.release();
    }
  }
  /**
   * 关闭数据库连接
   */
  async close() {
    /* istanbul ignore next */
    cov_21antz9dpk().f[19]++;
    cov_21antz9dpk().s[102]++;
    await this.pool.end();
  }
}
/* istanbul ignore next */
cov_21antz9dpk().s[103]++;
exports.CADDatabase = CADDatabase;
// 创建单例实例
/* istanbul ignore next */
cov_21antz9dpk().s[104]++;
exports.cadDatabase = new CADDatabase();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,