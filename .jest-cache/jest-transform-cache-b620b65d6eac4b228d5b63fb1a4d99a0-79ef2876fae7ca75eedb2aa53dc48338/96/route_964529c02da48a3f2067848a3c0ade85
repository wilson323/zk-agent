220c679aa9a96c56bd990db4418df99d
"use strict";

/**
 * @file proxy\route.ts
 * @description Migrated API route with global error handling
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_21likxh9fg() {
  var path = "E:\\zk-agent\\app\\api\\proxy\\route.ts";
  var hash = "fbaa16b2544bdcffb483d67edaeb762e3949e6a1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\proxy\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "4": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 43,
          column: 3
        }
      },
      "5": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 40
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 91
        }
      },
      "9": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 71
        }
      },
      "10": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "11": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 58
        }
      },
      "13": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 82
        }
      },
      "14": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "15": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "16": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 36
        }
      },
      "17": {
        start: {
          line: 48,
          column: 21
        },
        end: {
          line: 48,
          column: 59
        }
      },
      "18": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 50
        }
      },
      "19": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 50
        }
      },
      "20": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "21": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 102
        }
      },
      "22": {
        start: {
          line: 56,
          column: 21
        },
        end: {
          line: 56,
          column: 41
        }
      },
      "23": {
        start: {
          line: 58,
          column: 24
        },
        end: {
          line: 58,
          column: 42
        }
      },
      "24": {
        start: {
          line: 60,
          column: 25
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "25": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "26": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 59
        }
      },
      "27": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 82
        }
      },
      "28": {
        start: {
          line: 83,
          column: 0
        },
        end: {
          line: 121,
          column: 3
        }
      },
      "29": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "30": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 86,
          column: 36
        }
      },
      "31": {
        start: {
          line: 87,
          column: 21
        },
        end: {
          line: 87,
          column: 59
        }
      },
      "32": {
        start: {
          line: 89,
          column: 23
        },
        end: {
          line: 89,
          column: 50
        }
      },
      "33": {
        start: {
          line: 90,
          column: 23
        },
        end: {
          line: 90,
          column: 50
        }
      },
      "34": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "35": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 102
        }
      },
      "36": {
        start: {
          line: 95,
          column: 21
        },
        end: {
          line: 95,
          column: 41
        }
      },
      "37": {
        start: {
          line: 97,
          column: 24
        },
        end: {
          line: 97,
          column: 42
        }
      },
      "38": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 106,
          column: 10
        }
      },
      "39": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "40": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 58
        }
      },
      "41": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 82
        }
      },
      "42": {
        start: {
          line: 122,
          column: 0
        },
        end: {
          line: 157,
          column: 3
        }
      },
      "43": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 156,
          column: 5
        }
      },
      "44": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 125,
          column: 36
        }
      },
      "45": {
        start: {
          line: 126,
          column: 21
        },
        end: {
          line: 126,
          column: 59
        }
      },
      "46": {
        start: {
          line: 128,
          column: 23
        },
        end: {
          line: 128,
          column: 50
        }
      },
      "47": {
        start: {
          line: 129,
          column: 23
        },
        end: {
          line: 129,
          column: 50
        }
      },
      "48": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "49": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 102
        }
      },
      "50": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 42
        }
      },
      "51": {
        start: {
          line: 136,
          column: 25
        },
        end: {
          line: 142,
          column: 10
        }
      },
      "52": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 151,
          column: 11
        }
      },
      "53": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 61
        }
      },
      "54": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 82
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 100
          },
          end: {
            line: 12,
            column: 101
          }
        },
        loc: {
          start: {
            line: 12,
            column: 175
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 44,
            column: 105
          },
          end: {
            line: 44,
            column: 106
          }
        },
        loc: {
          start: {
            line: 44,
            column: 180
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 44
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 83,
            column: 103
          },
          end: {
            line: 83,
            column: 104
          }
        },
        loc: {
          start: {
            line: 83,
            column: 178
          },
          end: {
            line: 121,
            column: 1
          }
        },
        line: 83
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 122,
            column: 107
          },
          end: {
            line: 122,
            column: 108
          }
        },
        loc: {
          start: {
            line: 122,
            column: 182
          },
          end: {
            line: 157,
            column: 1
          }
        },
        line: 122
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 49
          },
          end: {
            line: 20,
            column: 52
          }
        }, {
          start: {
            line: 20,
            column: 55
          },
          end: {
            line: 20,
            column: 71
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 31
          },
          end: {
            line: 26,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 31
          },
          end: {
            line: 26,
            column: 63
          }
        }, {
          start: {
            line: 26,
            column: 67
          },
          end: {
            line: 26,
            column: 69
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 68
          }
        }, {
          start: {
            line: 34,
            column: 72
          },
          end: {
            line: 34,
            column: 90
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 52,
            column: 19
          }
        }, {
          start: {
            line: 52,
            column: 23
          },
          end: {
            line: 52,
            column: 30
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 56,
            column: 21
          },
          end: {
            line: 56,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 56,
            column: 21
          },
          end: {
            line: 56,
            column: 35
          }
        }, {
          start: {
            line: 56,
            column: 39
          },
          end: {
            line: 56,
            column: 41
          }
        }],
        line: 56
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 32
          },
          end: {
            line: 73,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 32
          },
          end: {
            line: 73,
            column: 68
          }
        }, {
          start: {
            line: 73,
            column: 72
          },
          end: {
            line: 73,
            column: 90
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 91,
            column: 19
          }
        }, {
          start: {
            line: 91,
            column: 23
          },
          end: {
            line: 91,
            column: 30
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 95,
            column: 21
          },
          end: {
            line: 95,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 21
          },
          end: {
            line: 95,
            column: 35
          }
        }, {
          start: {
            line: 95,
            column: 39
          },
          end: {
            line: 95,
            column: 41
          }
        }],
        line: 95
      },
      "11": {
        loc: {
          start: {
            line: 112,
            column: 32
          },
          end: {
            line: 112,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 32
          },
          end: {
            line: 112,
            column: 68
          }
        }, {
          start: {
            line: 112,
            column: 72
          },
          end: {
            line: 112,
            column: 90
          }
        }],
        line: 112
      },
      "12": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "13": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 130,
            column: 19
          }
        }, {
          start: {
            line: 130,
            column: 23
          },
          end: {
            line: 130,
            column: 30
          }
        }],
        line: 130
      },
      "14": {
        loc: {
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 148,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 32
          },
          end: {
            line: 148,
            column: 68
          }
        }, {
          start: {
            line: 148,
            column: 72
          },
          end: {
            line: 148,
            column: 90
          }
        }],
        line: 148
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\proxy\\route.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\proxy\\route.ts"],
      sourcesContent: ["/**\n * @file proxy\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest } from 'next/server';\nimport { createApiRoute, RouteConfigs } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // Get the URL from the query parameter\n      const url = _validatedQuery?.url as string;\n      \n      if (!url) {\n        return ApiResponseWrapper.error('URL parameter is required', 400);\n      }\n      \n      // Construct the full URL\n      const fullUrl = url.startsWith(\"http\") ? url : `https://${url}`;\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: req.headers.get(\"Authorization\") || \"\",\n        },\n      });\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      });\n    } catch (error) {\n      console.error('Proxy GET request failed:', error);\n      return ApiResponseWrapper.error('Proxy request failed', 500);\n    }\n  }\n);\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // \u83B7\u53D6\u8BF7\u6C42\u8DEF\u5F84\n      const url = new URL(req.url);\n      const path = url.pathname.replace(\"/api/proxy\", \"\");\n      \n      // \u83B7\u53D6\u73AF\u5883\u53D8\u91CF\n      const apiUrl = process.env.FASTGPT_API_URL;\n      const apiKey = process.env.FASTGPT_API_KEY;\n      \n      if (!apiUrl || !apiKey) {\n        return ApiResponseWrapper.error('FastGPT API configuration is missing', 500);\n      }\n      \n      // Get the request body\n      const body = _validatedBody || {};\n      \n      // Construct the full URL\n      const fullUrl = `${apiUrl}${path}`;\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify(body),\n      });\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      });\n    } catch (error) {\n      console.error('Proxy POST request failed:', error);\n      return ApiResponseWrapper.error('Proxy request failed', 500);\n    }\n  }\n);\n\nexport const PUT = createApiRoute(\n  RouteConfigs.protectedPut(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // \u83B7\u53D6\u8BF7\u6C42\u8DEF\u5F84\n      const url = new URL(req.url);\n      const path = url.pathname.replace(\"/api/proxy\", \"\");\n      \n      // \u83B7\u53D6\u73AF\u5883\u53D8\u91CF\n      const apiUrl = process.env.FASTGPT_API_URL;\n      const apiKey = process.env.FASTGPT_API_KEY;\n      \n      if (!apiUrl || !apiKey) {\n        return ApiResponseWrapper.error('FastGPT API configuration is missing', 500);\n      }\n      \n      // Get the request body\n      const body = _validatedBody || {};\n      \n      // Construct the full URL\n      const fullUrl = `${apiUrl}${path}`;\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify(body),\n      });\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      });\n    } catch (error) {\n      console.error('Proxy PUT request failed:', error);\n      return ApiResponseWrapper.error('Proxy request failed', 500);\n    }\n  }\n);\n\nexport const DELETE = createApiRoute(\n  RouteConfigs.admin('DELETE'),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // \u83B7\u53D6\u8BF7\u6C42\u8DEF\u5F84\n      const url = new URL(req.url);\n      const path = url.pathname.replace(\"/api/proxy\", \"\");\n      \n      // \u83B7\u53D6\u73AF\u5883\u53D8\u91CF\n      const apiUrl = process.env.FASTGPT_API_URL;\n      const apiKey = process.env.FASTGPT_API_KEY;\n      \n      if (!apiUrl || !apiKey) {\n        return ApiResponseWrapper.error('FastGPT API configuration is missing', 500);\n      }\n      \n      // Construct the full URL\n      const fullUrl = `${apiUrl}${path}`;\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n      });\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      });\n    } catch (error) {\n      console.error('Proxy DELETE request failed:', error);\n      return ApiResponseWrapper.error('Proxy request failed', 500);\n    }\n  }\n);\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fbaa16b2544bdcffb483d67edaeb762e3949e6a1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21likxh9fg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21likxh9fg();
cov_21likxh9fg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_21likxh9fg().s[1]++;
exports.DELETE = exports.PUT = exports.POST = exports.GET = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_21likxh9fg().s[2]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_21likxh9fg().s[3]++, require("@/lib/utils/api-helper"));
/* istanbul ignore next */
cov_21likxh9fg().s[4]++;
exports.GET = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.publicGet(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[0]++;
  cov_21likxh9fg().s[5]++;
  try {
    // Get the URL from the query parameter
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[6]++, _validatedQuery?.url);
    /* istanbul ignore next */
    cov_21likxh9fg().s[7]++;
    if (!url) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[0][0]++;
      cov_21likxh9fg().s[8]++;
      return api_helper_1.ApiResponseWrapper.error('URL parameter is required', 400);
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[0][1]++;
    }
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[9]++, url.startsWith("http") ?
    /* istanbul ignore next */
    (cov_21likxh9fg().b[1][0]++, url) :
    /* istanbul ignore next */
    (cov_21likxh9fg().b[1][1]++, `https://${url}`));
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[10]++, await fetch(fullUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization:
        /* istanbul ignore next */
        (cov_21likxh9fg().b[2][0]++, req.headers.get("Authorization")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[2][1]++, "")
      }
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[11]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[3][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[3][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[12]++;
    console.error('Proxy GET request failed:', error);
    /* istanbul ignore next */
    cov_21likxh9fg().s[13]++;
    return api_helper_1.ApiResponseWrapper.error('Proxy request failed', 500);
  }
});
/* istanbul ignore next */
cov_21likxh9fg().s[14]++;
exports.POST = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPost(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[1]++;
  cov_21likxh9fg().s[15]++;
  try {
    // 获取请求路径
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[16]++, new URL(req.url));
    const path =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[17]++, url.pathname.replace("/api/proxy", ""));
    // 获取环境变量
    const apiUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[18]++, process.env.FASTGPT_API_URL);
    const apiKey =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[19]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_21likxh9fg().s[20]++;
    if (
    /* istanbul ignore next */
    (cov_21likxh9fg().b[5][0]++, !apiUrl) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[5][1]++, !apiKey)) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[4][0]++;
      cov_21likxh9fg().s[21]++;
      return api_helper_1.ApiResponseWrapper.error('FastGPT API configuration is missing', 500);
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[4][1]++;
    }
    // Get the request body
    const body =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[22]++,
    /* istanbul ignore next */
    (cov_21likxh9fg().b[6][0]++, _validatedBody) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[6][1]++, {}));
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[23]++, `${apiUrl}${path}`);
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[24]++, await fetch(fullUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify(body)
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[25]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[7][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[7][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[26]++;
    console.error('Proxy POST request failed:', error);
    /* istanbul ignore next */
    cov_21likxh9fg().s[27]++;
    return api_helper_1.ApiResponseWrapper.error('Proxy request failed', 500);
  }
});
/* istanbul ignore next */
cov_21likxh9fg().s[28]++;
exports.PUT = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPut(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[2]++;
  cov_21likxh9fg().s[29]++;
  try {
    // 获取请求路径
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[30]++, new URL(req.url));
    const path =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[31]++, url.pathname.replace("/api/proxy", ""));
    // 获取环境变量
    const apiUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[32]++, process.env.FASTGPT_API_URL);
    const apiKey =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[33]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_21likxh9fg().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_21likxh9fg().b[9][0]++, !apiUrl) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[9][1]++, !apiKey)) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[8][0]++;
      cov_21likxh9fg().s[35]++;
      return api_helper_1.ApiResponseWrapper.error('FastGPT API configuration is missing', 500);
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[8][1]++;
    }
    // Get the request body
    const body =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[36]++,
    /* istanbul ignore next */
    (cov_21likxh9fg().b[10][0]++, _validatedBody) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[10][1]++, {}));
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[37]++, `${apiUrl}${path}`);
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[38]++, await fetch(fullUrl, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify(body)
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[39]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[11][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[11][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[40]++;
    console.error('Proxy PUT request failed:', error);
    /* istanbul ignore next */
    cov_21likxh9fg().s[41]++;
    return api_helper_1.ApiResponseWrapper.error('Proxy request failed', 500);
  }
});
/* istanbul ignore next */
cov_21likxh9fg().s[42]++;
exports.DELETE = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.admin('DELETE'), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[3]++;
  cov_21likxh9fg().s[43]++;
  try {
    // 获取请求路径
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[44]++, new URL(req.url));
    const path =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[45]++, url.pathname.replace("/api/proxy", ""));
    // 获取环境变量
    const apiUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[46]++, process.env.FASTGPT_API_URL);
    const apiKey =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[47]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_21likxh9fg().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_21likxh9fg().b[13][0]++, !apiUrl) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[13][1]++, !apiKey)) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[12][0]++;
      cov_21likxh9fg().s[49]++;
      return api_helper_1.ApiResponseWrapper.error('FastGPT API configuration is missing', 500);
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[12][1]++;
    }
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[50]++, `${apiUrl}${path}`);
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[51]++, await fetch(fullUrl, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      }
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[52]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[14][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[14][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[53]++;
    console.error('Proxy DELETE request failed:', error);
    /* istanbul ignore next */
    cov_21likxh9fg().s[54]++;
    return api_helper_1.ApiResponseWrapper.error('Proxy request failed', 500);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,