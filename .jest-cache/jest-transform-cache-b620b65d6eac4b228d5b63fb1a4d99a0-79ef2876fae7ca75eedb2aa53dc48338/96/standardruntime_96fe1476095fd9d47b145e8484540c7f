2978608ff6f1b16a2dc85e15e42570f6
"use strict";

/* istanbul ignore next */
function cov_1vrxqwm4tx() {
  var path = "E:\\zk-agent\\lib\\ag-ui\\standard-runtime.ts";
  var hash = "5fe803f06f18f2003a38099caa203cb1ad297c98";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\ag-ui\\standard-runtime.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 30
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 24
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 27
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 24
        }
      },
      "8": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "9": {
        start: {
          line: 22,
          column: 85
        },
        end: {
          line: 22,
          column: 90
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 29,
          column: 11
        }
      },
      "11": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "12": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 53
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 37
        }
      },
      "14": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 34,
          column: 31
        }
      },
      "15": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "16": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 39,
          column: 17
        }
      },
      "17": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 59
        }
      },
      "18": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 47,
          column: 15
        }
      },
      "19": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 56,
          column: 15
        }
      },
      "20": {
        start: {
          line: 63,
          column: 26
        },
        end: {
          line: 63,
          column: 45
        }
      },
      "21": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "22": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 86,
          column: 9
        }
      },
      "23": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 73,
          column: 68
        }
      },
      "24": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 65
        }
      },
      "25": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 59
        }
      },
      "26": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 85,
          column: 15
        }
      },
      "27": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "28": {
        start: {
          line: 98,
          column: 25
        },
        end: {
          line: 116,
          column: 10
        }
      },
      "29": {
        start: {
          line: 107,
          column: 51
        },
        end: {
          line: 110,
          column: 21
        }
      },
      "30": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "31": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 73
        }
      },
      "32": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 29
        }
      },
      "33": {
        start: {
          line: 126,
          column: 23
        },
        end: {
          line: 126,
          column: 41
        }
      },
      "34": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 41
        }
      },
      "35": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "36": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 163,
          column: 13
        }
      },
      "37": {
        start: {
          line: 130,
          column: 40
        },
        end: {
          line: 130,
          column: 59
        }
      },
      "38": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "39": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 26
        }
      },
      "40": {
        start: {
          line: 134,
          column: 30
        },
        end: {
          line: 134,
          column: 69
        }
      },
      "41": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 47
        }
      },
      "42": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 162,
          column: 17
        }
      },
      "43": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 161,
          column: 21
        }
      },
      "44": {
        start: {
          line: 138,
          column: 37
        },
        end: {
          line: 138,
          column: 54
        }
      },
      "45": {
        start: {
          line: 139,
          column: 24
        },
        end: {
          line: 141,
          column: 25
        }
      },
      "46": {
        start: {
          line: 140,
          column: 28
        },
        end: {
          line: 140,
          column: 37
        }
      },
      "47": {
        start: {
          line: 142,
          column: 24
        },
        end: {
          line: 160,
          column: 25
        }
      },
      "48": {
        start: {
          line: 143,
          column: 43
        },
        end: {
          line: 143,
          column: 59
        }
      },
      "49": {
        start: {
          line: 144,
          column: 28
        },
        end: {
          line: 152,
          column: 29
        }
      },
      "50": {
        start: {
          line: 146,
          column: 32
        },
        end: {
          line: 151,
          column: 35
        }
      },
      "51": {
        start: {
          line: 154,
          column: 28
        },
        end: {
          line: 156,
          column: 29
        }
      },
      "52": {
        start: {
          line: 155,
          column: 32
        },
        end: {
          line: 155,
          column: 106
        }
      },
      "53": {
        start: {
          line: 159,
          column: 28
        },
        end: {
          line: 159,
          column: 72
        }
      },
      "54": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 33
        }
      },
      "55": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "56": {
        start: {
          line: 174,
          column: 31
        },
        end: {
          line: 174,
          column: 68
        }
      },
      "57": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 182,
          column: 15
        }
      },
      "58": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "59": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 190,
          column: 19
        }
      },
      "60": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "61": {
        start: {
          line: 194,
          column: 31
        },
        end: {
          line: 194,
          column: 108
        }
      },
      "62": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 204,
          column: 19
        }
      },
      "63": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 62
        }
      },
      "64": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 214,
          column: 15
        }
      },
      "65": {
        start: {
          line: 221,
          column: 21
        },
        end: {
          line: 221,
          column: 64
        }
      },
      "66": {
        start: {
          line: 221,
          column: 44
        },
        end: {
          line: 221,
          column: 63
        }
      },
      "67": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "68": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 59
        }
      },
      "69": {
        start: {
          line: 226,
          column: 25
        },
        end: {
          line: 226,
          column: 27
        }
      },
      "70": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "71": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 42
        }
      },
      "72": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 62
        }
      },
      "73": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 238,
          column: 10
        }
      },
      "74": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 48
        }
      },
      "75": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 52
        }
      },
      "76": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 256,
          column: 11
        }
      },
      "77": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 33
        }
      },
      "78": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "79": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 269,
          column: 49
        }
      },
      "80": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 38
        }
      },
      "81": {
        start: {
          line: 274,
          column: 0
        },
        end: {
          line: 274,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 25
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 38
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 62
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 31
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 97
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 107,
            column: 41
          },
          end: {
            line: 107,
            column: 42
          }
        },
        loc: {
          start: {
            line: 107,
            column: 51
          },
          end: {
            line: 110,
            column: 21
          }
        },
        line: 107
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 50
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 125
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 54
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 172
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 38
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 220
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 221,
            column: 37
          },
          end: {
            line: 221,
            column: 38
          }
        },
        loc: {
          start: {
            line: 221,
            column: 44
          },
          end: {
            line: 221,
            column: 63
          }
        },
        line: 221
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 21
          },
          end: {
            line: 245,
            column: 5
          }
        },
        line: 243
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 249,
            column: 5
          }
        },
        loc: {
          start: {
            line: 249,
            column: 26
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 249
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 261,
            column: 5
          }
        },
        loc: {
          start: {
            line: 261,
            column: 15
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 261
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 21
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 267
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "1": {
        loc: {
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 53,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 53,
            column: 50
          },
          end: {
            line: 53,
            column: 63
          }
        }, {
          start: {
            line: 53,
            column: 66
          },
          end: {
            line: 53,
            column: 81
          }
        }],
        line: 53
      },
      "2": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "3": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 133,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "4": {
        loc: {
          start: {
            line: 137,
            column: 20
          },
          end: {
            line: 161,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 20
          },
          end: {
            line: 161,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "5": {
        loc: {
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 141,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 24
          },
          end: {
            line: 141,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "6": {
        loc: {
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 152,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 152,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "7": {
        loc: {
          start: {
            line: 154,
            column: 28
          },
          end: {
            line: 156,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 28
          },
          end: {
            line: 156,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "8": {
        loc: {
          start: {
            line: 179,
            column: 30
          },
          end: {
            line: 179,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 30
          },
          end: {
            line: 179,
            column: 53
          }
        }, {
          start: {
            line: 179,
            column: 57
          },
          end: {
            line: 179,
            column: 66
          }
        }],
        line: 179
      },
      "9": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "10": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "11": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\ag-ui\\standard-runtime.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\lib\\ag-ui\\standard-runtime.ts"],
      sourcesContent: ["import { type Observable, Subject } from \"rxjs\"\nimport type { BaseEvent, RunAgentInput, Tool, Message } from \"./types\"\nimport type { AgentDefinition } from \"./protocol/types\"\n\n/**\n * \u6807\u51C6AG-UI\u8FD0\u884C\u65F6\u5B9E\u73B0\n * \u5B8C\u5168\u7B26\u5408AG-UI\u534F\u8BAE\u89C4\u8303\n */\nexport class StandardAgUIRuntime {\n  private eventSubject = new Subject<BaseEvent>()\n  private state: Record<string, unknown> = {}\n  private messages: Message[] = []\n  private tools: Tool[] = []\n  private agent: AgentDefinition | null = null\n\n  constructor(\n    private options: {\n      threadId: string\n      runId: string\n      debug?: boolean\n    },\n  ) {}\n\n  /**\n   * \u6267\u884CAgent - AG-UI\u6807\u51C6\u63A5\u53E3\n   */\n  async executeAgent(input: RunAgentInput): Promise<void> {\n    const { threadId, runId, state, messages, tools, context, forwardedProps } = input\n\n    // \u53D1\u9001\u8FD0\u884C\u5F00\u59CB\u4E8B\u4EF6\n    this.emitEvent({\n      type: \"RUN_STARTED\",\n      threadId,\n      runId,\n      timestamp: Date.now(),\n    })\n\n    try {\n      // \u66F4\u65B0\u72B6\u6001\n      this.state = { ...this.state, ...state }\n      this.messages = messages\n      this.tools = tools\n\n      // \u5904\u7406\u6D88\u606F\n      for (const message of messages) {\n        if (message.role === \"user\") {\n          await this.processUserMessage(message)\n        }\n      }\n\n      // \u53D1\u9001\u8FD0\u884C\u5B8C\u6210\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"RUN_FINISHED\",\n        threadId,\n        runId,\n        timestamp: Date.now(),\n      })\n    } catch (error) {\n      // \u53D1\u9001\u9519\u8BEF\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"RUN_ERROR\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        code: 500,\n        timestamp: Date.now(),\n      })\n    }\n  }\n\n  /**\n   * \u5904\u7406\u7528\u6237\u6D88\u606F\n   */\n  private async processUserMessage(message: Message): Promise<void> {\n    const messageId = `msg-${Date.now()}`\n\n    // \u53D1\u9001\u6D88\u606F\u5F00\u59CB\u4E8B\u4EF6\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_START\",\n      messageId,\n      role: \"assistant\",\n      timestamp: Date.now(),\n    })\n\n    // \u8C03\u7528FastGPT API\n    try {\n      const response = await this.callFastGPT(message.content)\n\n      // \u5904\u7406\u6D41\u5F0F\u54CD\u5E94\n      await this.handleStreamResponse(response, messageId)\n    } catch (error) {\n      console.error(\"Error calling FastGPT:\", error)\n\n      // \u53D1\u9001\u9519\u8BEF\u6D88\u606F\n      this.emitEvent({\n        type: \"TEXT_MESSAGE_CONTENT\",\n        messageId,\n        delta: \"Sorry, I encountered an error processing your request.\",\n        timestamp: Date.now(),\n      })\n    }\n\n    // \u53D1\u9001\u6D88\u606F\u7ED3\u675F\u4E8B\u4EF6\n    this.emitEvent({\n      type: \"TEXT_MESSAGE_END\",\n      messageId,\n      timestamp: Date.now(),\n    })\n  }\n\n  /**\n   * \u8C03\u7528FastGPT API\n   */\n  private async callFastGPT(content: string): Promise<ReadableStream> {\n    const response = await fetch(\"/api/fastgpt/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        appId: this.state.appId,\n        chatId: this.state.chatId,\n        messages: [\n          ...this.messages.map((msg) => ({\n            role: msg.role,\n            content: msg.content,\n          })),\n          { role: \"user\", content },\n        ],\n        stream: true,\n        variables: this.state.variables,\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`FastGPT API error: ${response.statusText}`)\n    }\n\n    return response.body!\n  }\n\n  /**\n   * \u5904\u7406\u6D41\u5F0F\u54CD\u5E94\n   */\n  private async handleStreamResponse(stream: ReadableStream, messageId: string): Promise<void> {\n    const reader = stream.getReader()\n    const decoder = new TextDecoder()\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read()\n\n        if (done) {break}\n\n        const chunk = decoder.decode(value, { stream: true })\n        const lines = chunk.split(\"\\n\")\n\n        for (const line of lines) {\n          if (line.startsWith(\"data: \")) {\n            const data = line.substring(6)\n\n            if (data === \"[DONE]\") {continue}\n\n            try {\n              const parsed = JSON.parse(data)\n\n              if (parsed.choices?.[0]?.delta?.content) {\n                // \u53D1\u9001\u6587\u672C\u5185\u5BB9\u4E8B\u4EF6\n                this.emitEvent({\n                  type: \"TEXT_MESSAGE_CONTENT\",\n                  messageId,\n                  delta: parsed.choices[0].delta.content,\n                  timestamp: Date.now(),\n                })\n              }\n\n              // \u5904\u7406\u5DE5\u5177\u8C03\u7528\n              if (parsed.choices?.[0]?.delta?.tool_calls) {\n                await this.handleToolCalls(parsed.choices[0].delta.tool_calls, messageId)\n              }\n            } catch (e) {\n              console.error(\"Error parsing SSE data:\", e)\n            }\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  }\n\n  /**\n   * \u5904\u7406\u5DE5\u5177\u8C03\u7528\n   */\n  private async handleToolCalls(toolCalls: any[], parentMessageId: string): Promise<void> {\n    for (const toolCall of toolCalls) {\n      const toolCallId = `tool-${Date.now()}-${Math.random()}`\n\n      // \u53D1\u9001\u5DE5\u5177\u8C03\u7528\u5F00\u59CB\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"TOOL_CALL_START\",\n        toolCallId,\n        toolCallName: toolCall.function?.name || \"unknown\",\n        parentMessageId,\n        timestamp: Date.now(),\n      })\n\n      // \u53D1\u9001\u5DE5\u5177\u8C03\u7528\u53C2\u6570\u4E8B\u4EF6\n      if (toolCall.function?.arguments) {\n        this.emitEvent({\n          type: \"TOOL_CALL_ARGS\",\n          toolCallId,\n          delta: toolCall.function.arguments,\n          timestamp: Date.now(),\n        })\n      }\n\n      // \u6267\u884C\u5DE5\u5177\n      try {\n        const result = await this.executeTool(toolCall.function?.name, toolCall.function?.arguments)\n\n        // \u53D1\u9001\u5DE5\u5177\u8C03\u7528\u7ED3\u679C\uFF08\u53EF\u4EE5\u901A\u8FC7\u81EA\u5B9A\u4E49\u4E8B\u4EF6\uFF09\n        this.emitEvent({\n          type: \"CUSTOM\",\n          name: \"tool_call_result\",\n          value: {\n            toolCallId,\n            result,\n          },\n          timestamp: Date.now(),\n        })\n      } catch (error) {\n        console.error(\"Tool execution error:\", error)\n      }\n\n      // \u53D1\u9001\u5DE5\u5177\u8C03\u7528\u7ED3\u675F\u4E8B\u4EF6\n      this.emitEvent({\n        type: \"TOOL_CALL_END\",\n        toolCallId,\n        timestamp: Date.now(),\n      })\n    }\n  }\n\n  /**\n   * \u6267\u884C\u5DE5\u5177\n   */\n  private async executeTool(toolName: string, args: string): Promise<any> {\n    const tool = this.tools.find((t) => t.name === toolName)\n\n    if (!tool) {\n      throw new Error(`Tool not found: ${toolName}`)\n    }\n\n    // \u89E3\u6790\u53C2\u6570\n    let parsedArgs: any = {}\n    try {\n      parsedArgs = JSON.parse(args)\n    } catch (e) {\n      console.error(\"Error parsing tool arguments:\", e)\n    }\n\n    // \u8FD9\u91CC\u5E94\u8BE5\u8C03\u7528\u5B9E\u9645\u7684\u5DE5\u5177\u6267\u884C\u903B\u8F91\n    // \u6682\u65F6\u8FD4\u56DE\u6A21\u62DF\u7ED3\u679C\n    return {\n      success: true,\n      result: `Tool ${toolName} executed with args: ${args}`,\n    }\n  }\n\n  /**\n   * \u83B7\u53D6\u4E8B\u4EF6\u6D41\n   */\n  getEventStream(): Observable<BaseEvent> {\n    return this.eventSubject.asObservable()\n  }\n\n  /**\n   * \u66F4\u65B0\u72B6\u6001\n   */\n  updateState(newState: Record<string, any>): void {\n    this.state = { ...this.state, ...newState }\n\n    // \u53D1\u9001\u72B6\u6001\u5FEB\u7167\u4E8B\u4EF6\n    this.emitEvent({\n      type: \"STATE_SNAPSHOT\",\n      snapshot: this.state,\n      timestamp: Date.now(),\n    })\n  }\n\n  /**\n   * \u83B7\u53D6\u5F53\u524D\u72B6\u6001\n   */\n  getState(): Record<string, any> {\n    return { ...this.state }\n  }\n\n  /**\n   * \u53D1\u9001\u4E8B\u4EF6\n   */\n  private emitEvent(event: BaseEvent): void {\n    if (this.options.debug) {\n      console.debug(\"AG-UI Event:\", event)\n    }\n    this.eventSubject.next(event)\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5fe803f06f18f2003a38099caa203cb1ad297c98"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1vrxqwm4tx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1vrxqwm4tx();
cov_1vrxqwm4tx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1vrxqwm4tx().s[1]++;
exports.StandardAgUIRuntime = void 0;
const rxjs_1 =
/* istanbul ignore next */
(cov_1vrxqwm4tx().s[2]++, require("rxjs"));
/**
 * 标准AG-UI运行时实现
 * 完全符合AG-UI协议规范
 */
class StandardAgUIRuntime {
  constructor(options) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[0]++;
    cov_1vrxqwm4tx().s[3]++;
    this.options = options;
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[4]++;
    this.eventSubject = new rxjs_1.Subject();
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[5]++;
    this.state = {};
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[6]++;
    this.messages = [];
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[7]++;
    this.tools = [];
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[8]++;
    this.agent = null;
  }
  /**
   * 执行Agent - AG-UI标准接口
   */
  async executeAgent(input) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[1]++;
    const {
      threadId,
      runId,
      state,
      messages,
      tools,
      context,
      forwardedProps
    } =
    /* istanbul ignore next */
    (cov_1vrxqwm4tx().s[9]++, input);
    // 发送运行开始事件
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[10]++;
    this.emitEvent({
      type: "RUN_STARTED",
      threadId,
      runId,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[11]++;
    try {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[12]++;
      // 更新状态
      this.state = {
        ...this.state,
        ...state
      };
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[13]++;
      this.messages = messages;
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[14]++;
      this.tools = tools;
      // 处理消息
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[15]++;
      for (const message of messages) {
        /* istanbul ignore next */
        cov_1vrxqwm4tx().s[16]++;
        if (message.role === "user") {
          /* istanbul ignore next */
          cov_1vrxqwm4tx().b[0][0]++;
          cov_1vrxqwm4tx().s[17]++;
          await this.processUserMessage(message);
        } else
        /* istanbul ignore next */
        {
          cov_1vrxqwm4tx().b[0][1]++;
        }
      }
      // 发送运行完成事件
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[18]++;
      this.emitEvent({
        type: "RUN_FINISHED",
        threadId,
        runId,
        timestamp: Date.now()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[19]++;
      // 发送错误事件
      this.emitEvent({
        type: "RUN_ERROR",
        message: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().b[1][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().b[1][1]++, "Unknown error"),
        code: 500,
        timestamp: Date.now()
      });
    }
  }
  /**
   * 处理用户消息
   */
  async processUserMessage(message) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[2]++;
    const messageId =
    /* istanbul ignore next */
    (cov_1vrxqwm4tx().s[20]++, `msg-${Date.now()}`);
    // 发送消息开始事件
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[21]++;
    this.emitEvent({
      type: "TEXT_MESSAGE_START",
      messageId,
      role: "assistant",
      timestamp: Date.now()
    });
    // 调用FastGPT API
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[22]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1vrxqwm4tx().s[23]++, await this.callFastGPT(message.content));
      // 处理流式响应
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[24]++;
      await this.handleStreamResponse(response, messageId);
    } catch (error) {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[25]++;
      console.error("Error calling FastGPT:", error);
      // 发送错误消息
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[26]++;
      this.emitEvent({
        type: "TEXT_MESSAGE_CONTENT",
        messageId,
        delta: "Sorry, I encountered an error processing your request.",
        timestamp: Date.now()
      });
    }
    // 发送消息结束事件
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[27]++;
    this.emitEvent({
      type: "TEXT_MESSAGE_END",
      messageId,
      timestamp: Date.now()
    });
  }
  /**
   * 调用FastGPT API
   */
  async callFastGPT(content) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[3]++;
    const response =
    /* istanbul ignore next */
    (cov_1vrxqwm4tx().s[28]++, await fetch("/api/fastgpt/chat", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        appId: this.state.appId,
        chatId: this.state.chatId,
        messages: [...this.messages.map(msg => {
          /* istanbul ignore next */
          cov_1vrxqwm4tx().f[4]++;
          cov_1vrxqwm4tx().s[29]++;
          return {
            role: msg.role,
            content: msg.content
          };
        }), {
          role: "user",
          content
        }],
        stream: true,
        variables: this.state.variables
      })
    }));
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[30]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().b[2][0]++;
      cov_1vrxqwm4tx().s[31]++;
      throw new Error(`FastGPT API error: ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_1vrxqwm4tx().b[2][1]++;
    }
    cov_1vrxqwm4tx().s[32]++;
    return response.body;
  }
  /**
   * 处理流式响应
   */
  async handleStreamResponse(stream, messageId) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[5]++;
    const reader =
    /* istanbul ignore next */
    (cov_1vrxqwm4tx().s[33]++, stream.getReader());
    const decoder =
    /* istanbul ignore next */
    (cov_1vrxqwm4tx().s[34]++, new TextDecoder());
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[35]++;
    try {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[36]++;
      while (true) {
        const {
          done,
          value
        } =
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().s[37]++, await reader.read());
        /* istanbul ignore next */
        cov_1vrxqwm4tx().s[38]++;
        if (done) {
          /* istanbul ignore next */
          cov_1vrxqwm4tx().b[3][0]++;
          cov_1vrxqwm4tx().s[39]++;
          break;
        } else
        /* istanbul ignore next */
        {
          cov_1vrxqwm4tx().b[3][1]++;
        }
        const chunk =
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().s[40]++, decoder.decode(value, {
          stream: true
        }));
        const lines =
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().s[41]++, chunk.split("\n"));
        /* istanbul ignore next */
        cov_1vrxqwm4tx().s[42]++;
        for (const line of lines) {
          /* istanbul ignore next */
          cov_1vrxqwm4tx().s[43]++;
          if (line.startsWith("data: ")) {
            /* istanbul ignore next */
            cov_1vrxqwm4tx().b[4][0]++;
            const data =
            /* istanbul ignore next */
            (cov_1vrxqwm4tx().s[44]++, line.substring(6));
            /* istanbul ignore next */
            cov_1vrxqwm4tx().s[45]++;
            if (data === "[DONE]") {
              /* istanbul ignore next */
              cov_1vrxqwm4tx().b[5][0]++;
              cov_1vrxqwm4tx().s[46]++;
              continue;
            } else
            /* istanbul ignore next */
            {
              cov_1vrxqwm4tx().b[5][1]++;
            }
            cov_1vrxqwm4tx().s[47]++;
            try {
              const parsed =
              /* istanbul ignore next */
              (cov_1vrxqwm4tx().s[48]++, JSON.parse(data));
              /* istanbul ignore next */
              cov_1vrxqwm4tx().s[49]++;
              if (parsed.choices?.[0]?.delta?.content) {
                /* istanbul ignore next */
                cov_1vrxqwm4tx().b[6][0]++;
                cov_1vrxqwm4tx().s[50]++;
                // 发送文本内容事件
                this.emitEvent({
                  type: "TEXT_MESSAGE_CONTENT",
                  messageId,
                  delta: parsed.choices[0].delta.content,
                  timestamp: Date.now()
                });
              } else
              /* istanbul ignore next */
              {
                cov_1vrxqwm4tx().b[6][1]++;
              }
              // 处理工具调用
              cov_1vrxqwm4tx().s[51]++;
              if (parsed.choices?.[0]?.delta?.tool_calls) {
                /* istanbul ignore next */
                cov_1vrxqwm4tx().b[7][0]++;
                cov_1vrxqwm4tx().s[52]++;
                await this.handleToolCalls(parsed.choices[0].delta.tool_calls, messageId);
              } else
              /* istanbul ignore next */
              {
                cov_1vrxqwm4tx().b[7][1]++;
              }
            } catch (e) {
              /* istanbul ignore next */
              cov_1vrxqwm4tx().s[53]++;
              console.error("Error parsing SSE data:", e);
            }
          } else
          /* istanbul ignore next */
          {
            cov_1vrxqwm4tx().b[4][1]++;
          }
        }
      }
    } finally {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[54]++;
      reader.releaseLock();
    }
  }
  /**
   * 处理工具调用
   */
  async handleToolCalls(toolCalls, parentMessageId) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[6]++;
    cov_1vrxqwm4tx().s[55]++;
    for (const toolCall of toolCalls) {
      const toolCallId =
      /* istanbul ignore next */
      (cov_1vrxqwm4tx().s[56]++, `tool-${Date.now()}-${Math.random()}`);
      // 发送工具调用开始事件
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[57]++;
      this.emitEvent({
        type: "TOOL_CALL_START",
        toolCallId,
        toolCallName:
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().b[8][0]++, toolCall.function?.name) ||
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().b[8][1]++, "unknown"),
        parentMessageId,
        timestamp: Date.now()
      });
      // 发送工具调用参数事件
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[58]++;
      if (toolCall.function?.arguments) {
        /* istanbul ignore next */
        cov_1vrxqwm4tx().b[9][0]++;
        cov_1vrxqwm4tx().s[59]++;
        this.emitEvent({
          type: "TOOL_CALL_ARGS",
          toolCallId,
          delta: toolCall.function.arguments,
          timestamp: Date.now()
        });
      } else
      /* istanbul ignore next */
      {
        cov_1vrxqwm4tx().b[9][1]++;
      }
      // 执行工具
      cov_1vrxqwm4tx().s[60]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1vrxqwm4tx().s[61]++, await this.executeTool(toolCall.function?.name, toolCall.function?.arguments));
        // 发送工具调用结果（可以通过自定义事件）
        /* istanbul ignore next */
        cov_1vrxqwm4tx().s[62]++;
        this.emitEvent({
          type: "CUSTOM",
          name: "tool_call_result",
          value: {
            toolCallId,
            result
          },
          timestamp: Date.now()
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1vrxqwm4tx().s[63]++;
        console.error("Tool execution error:", error);
      }
      // 发送工具调用结束事件
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[64]++;
      this.emitEvent({
        type: "TOOL_CALL_END",
        toolCallId,
        timestamp: Date.now()
      });
    }
  }
  /**
   * 执行工具
   */
  async executeTool(toolName, args) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[7]++;
    const tool =
    /* istanbul ignore next */
    (cov_1vrxqwm4tx().s[65]++, this.tools.find(t => {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().f[8]++;
      cov_1vrxqwm4tx().s[66]++;
      return t.name === toolName;
    }));
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[67]++;
    if (!tool) {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().b[10][0]++;
      cov_1vrxqwm4tx().s[68]++;
      throw new Error(`Tool not found: ${toolName}`);
    } else
    /* istanbul ignore next */
    {
      cov_1vrxqwm4tx().b[10][1]++;
    }
    // 解析参数
    let parsedArgs =
    /* istanbul ignore next */
    (cov_1vrxqwm4tx().s[69]++, {});
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[70]++;
    try {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[71]++;
      parsedArgs = JSON.parse(args);
    } catch (e) {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().s[72]++;
      console.error("Error parsing tool arguments:", e);
    }
    // 这里应该调用实际的工具执行逻辑
    // 暂时返回模拟结果
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[73]++;
    return {
      success: true,
      result: `Tool ${toolName} executed with args: ${args}`
    };
  }
  /**
   * 获取事件流
   */
  getEventStream() {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[9]++;
    cov_1vrxqwm4tx().s[74]++;
    return this.eventSubject.asObservable();
  }
  /**
   * 更新状态
   */
  updateState(newState) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[10]++;
    cov_1vrxqwm4tx().s[75]++;
    this.state = {
      ...this.state,
      ...newState
    };
    // 发送状态快照事件
    /* istanbul ignore next */
    cov_1vrxqwm4tx().s[76]++;
    this.emitEvent({
      type: "STATE_SNAPSHOT",
      snapshot: this.state,
      timestamp: Date.now()
    });
  }
  /**
   * 获取当前状态
   */
  getState() {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[11]++;
    cov_1vrxqwm4tx().s[77]++;
    return {
      ...this.state
    };
  }
  /**
   * 发送事件
   */
  emitEvent(event) {
    /* istanbul ignore next */
    cov_1vrxqwm4tx().f[12]++;
    cov_1vrxqwm4tx().s[78]++;
    if (this.options.debug) {
      /* istanbul ignore next */
      cov_1vrxqwm4tx().b[11][0]++;
      cov_1vrxqwm4tx().s[79]++;
      console.debug("AG-UI Event:", event);
    } else
    /* istanbul ignore next */
    {
      cov_1vrxqwm4tx().b[11][1]++;
    }
    cov_1vrxqwm4tx().s[80]++;
    this.eventSubject.next(event);
  }
}
/* istanbul ignore next */
cov_1vrxqwm4tx().s[81]++;
exports.StandardAgUIRuntime = StandardAgUIRuntime;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,