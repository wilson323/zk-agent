0de73a016e87d3043c1e0787580f094a
"use strict";

/* istanbul ignore next */
function cov_2asuj2vwch() {
  var path = "E:\\zk-agent\\app\\api\\metrics\\route.ts";
  var hash = "210aa52dd25b6902bb0266fa14ca59c29a559f6c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\metrics\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 18
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 39
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 44
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "5": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 62
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 20,
          column: 11
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 69
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 86
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 6,
            column: 15
          },
          end: {
            line: 6,
            column: 18
          }
        },
        loc: {
          start: {
            line: 6,
            column: 24
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 6
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0
    },
    b: {},
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\metrics\\route.ts",
      mappings: ";;AAKA,kBAqBC;AA1BD,wCAAwD;AACxD,6CAAuC;AAIhC,KAAK,UAAU,GAAG,CAAC,GAAgB;IACxC,IAAI,CAAC;QACH,+CAA+C;QAC/C,2EAA2E;QAC3E,wEAAwE;QAExE,uEAAuE;QACvE,qCAAqC;QACrC,oCAAoC;QAEpC,MAAM,OAAO,GAAG,MAAM,sBAAQ,CAAC,OAAO,EAAE,CAAC;QACzC,OAAO,IAAI,qBAAY,CAAC,OAAO,EAAE;YAC/B,MAAM,EAAE,GAAG;YACX,OAAO,EAAE;gBACP,cAAc,EAAE,sBAAQ,CAAC,WAAW;aACrC;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;QAC7D,OAAO,IAAI,qBAAY,CAAC,0BAA0B,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACvE,CAAC;AACH,CAAC",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\metrics\\route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { register } from 'prom-client';\nimport { databaseMonitor } from '@/lib/database/monitoring';\nimport { aiModelManager } from '@/lib/ai-models/model-manager';\n\nexport async function GET(req: NextRequest) {\n  try {\n    // Ensure metrics are collected before exposing\n    // This might involve calling methods on databaseMonitor and aiModelManager\n    // to update their internal metrics that are then exposed by prom-client\n\n    // Example: Manually trigger metric collection if not already automated\n    // databaseMonitor.collectMetrics(); \n    // aiModelManager.collectMetrics(); \n\n    const metrics = await register.metrics();\n    return new NextResponse(metrics, {\n      status: 200,\n      headers: {\n        'Content-Type': register.contentType,\n      },\n    });\n  } catch (error) {\n    console.error('Error generating Prometheus metrics:', error);\n    return new NextResponse('Error generating metrics', { status: 500 });\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "210aa52dd25b6902bb0266fa14ca59c29a559f6c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2asuj2vwch = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2asuj2vwch();
cov_2asuj2vwch().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2asuj2vwch().s[1]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_2asuj2vwch().s[2]++, require("next/server"));
const prom_client_1 =
/* istanbul ignore next */
(cov_2asuj2vwch().s[3]++, require("prom-client"));
async function GET(req) {
  /* istanbul ignore next */
  cov_2asuj2vwch().f[0]++;
  cov_2asuj2vwch().s[4]++;
  try {
    // Ensure metrics are collected before exposing
    // This might involve calling methods on databaseMonitor and aiModelManager
    // to update their internal metrics that are then exposed by prom-client
    // Example: Manually trigger metric collection if not already automated
    // databaseMonitor.collectMetrics(); 
    // aiModelManager.collectMetrics(); 
    const metrics =
    /* istanbul ignore next */
    (cov_2asuj2vwch().s[5]++, await prom_client_1.register.metrics());
    /* istanbul ignore next */
    cov_2asuj2vwch().s[6]++;
    return new server_1.NextResponse(metrics, {
      status: 200,
      headers: {
        'Content-Type': prom_client_1.register.contentType
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2asuj2vwch().s[7]++;
    console.error('Error generating Prometheus metrics:', error);
    /* istanbul ignore next */
    cov_2asuj2vwch().s[8]++;
    return new server_1.NextResponse('Error generating metrics', {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMmFzdWoydndjaCIsImFjdHVhbENvdmVyYWdlIiwicyIsImV4cG9ydHMiLCJHRVQiLCJzZXJ2ZXJfMSIsInJlcXVpcmUiLCJwcm9tX2NsaWVudF8xIiwicmVxIiwiZiIsIm1ldHJpY3MiLCJyZWdpc3RlciIsIk5leHRSZXNwb25zZSIsInN0YXR1cyIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImVycm9yIiwiY29uc29sZSJdLCJzb3VyY2VzIjpbIkU6XFx6ay1hZ2VudFxcYXBwXFxhcGlcXG1ldHJpY3NcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyByZWdpc3RlciB9IGZyb20gJ3Byb20tY2xpZW50JztcbmltcG9ydCB7IGRhdGFiYXNlTW9uaXRvciB9IGZyb20gJ0AvbGliL2RhdGFiYXNlL21vbml0b3JpbmcnO1xuaW1wb3J0IHsgYWlNb2RlbE1hbmFnZXIgfSBmcm9tICdAL2xpYi9haS1tb2RlbHMvbW9kZWwtbWFuYWdlcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxOiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIC8vIEVuc3VyZSBtZXRyaWNzIGFyZSBjb2xsZWN0ZWQgYmVmb3JlIGV4cG9zaW5nXG4gICAgLy8gVGhpcyBtaWdodCBpbnZvbHZlIGNhbGxpbmcgbWV0aG9kcyBvbiBkYXRhYmFzZU1vbml0b3IgYW5kIGFpTW9kZWxNYW5hZ2VyXG4gICAgLy8gdG8gdXBkYXRlIHRoZWlyIGludGVybmFsIG1ldHJpY3MgdGhhdCBhcmUgdGhlbiBleHBvc2VkIGJ5IHByb20tY2xpZW50XG5cbiAgICAvLyBFeGFtcGxlOiBNYW51YWxseSB0cmlnZ2VyIG1ldHJpYyBjb2xsZWN0aW9uIGlmIG5vdCBhbHJlYWR5IGF1dG9tYXRlZFxuICAgIC8vIGRhdGFiYXNlTW9uaXRvci5jb2xsZWN0TWV0cmljcygpOyBcbiAgICAvLyBhaU1vZGVsTWFuYWdlci5jb2xsZWN0TWV0cmljcygpOyBcblxuICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCByZWdpc3Rlci5tZXRyaWNzKCk7XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UobWV0cmljcywge1xuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiByZWdpc3Rlci5jb250ZW50VHlwZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBQcm9tZXRoZXVzIG1ldHJpY3M6JywgZXJyb3IpO1xuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKCdFcnJvciBnZW5lcmF0aW5nIG1ldHJpY3MnLCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBaUJNO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFBQUEsY0FBQSxHQUFBRSxDQUFBOzs7Ozs7QUFaTkMsT0FBQSxDQUFBQyxHQUFBLEdBQUFBLEdBQUE7QUFMQSxNQUFBQyxRQUFBO0FBQUE7QUFBQSxDQUFBTCxjQUFBLEdBQUFFLENBQUEsT0FBQUksT0FBQTtBQUNBLE1BQUFDLGFBQUE7QUFBQTtBQUFBLENBQUFQLGNBQUEsR0FBQUUsQ0FBQSxPQUFBSSxPQUFBO0FBSU8sZUFBZUYsR0FBR0EsQ0FBQ0ksR0FBZ0I7RUFBQTtFQUFBUixjQUFBLEdBQUFTLENBQUE7RUFBQVQsY0FBQSxHQUFBRSxDQUFBO0VBQ3hDLElBQUk7SUFDRjtJQUNBO0lBQ0E7SUFFQTtJQUNBO0lBQ0E7SUFFQSxNQUFNUSxPQUFPO0lBQUE7SUFBQSxDQUFBVixjQUFBLEdBQUFFLENBQUEsT0FBRyxNQUFNSyxhQUFBLENBQUFJLFFBQVEsQ0FBQ0QsT0FBTyxFQUFFO0lBQUM7SUFBQVYsY0FBQSxHQUFBRSxDQUFBO0lBQ3pDLE9BQU8sSUFBSUcsUUFBQSxDQUFBTyxZQUFZLENBQUNGLE9BQU8sRUFBRTtNQUMvQkcsTUFBTSxFQUFFLEdBQUc7TUFDWEMsT0FBTyxFQUFFO1FBQ1AsY0FBYyxFQUFFUCxhQUFBLENBQUFJLFFBQVEsQ0FBQ0k7O0tBRTVCLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT0MsS0FBSyxFQUFFO0lBQUE7SUFBQWhCLGNBQUEsR0FBQUUsQ0FBQTtJQUNkZSxPQUFPLENBQUNELEtBQUssQ0FBQyxzQ0FBc0MsRUFBRUEsS0FBSyxDQUFDO0lBQUM7SUFBQWhCLGNBQUEsR0FBQUUsQ0FBQTtJQUM3RCxPQUFPLElBQUlHLFFBQUEsQ0FBQU8sWUFBWSxDQUFDLDBCQUEwQixFQUFFO01BQUVDLE1BQU0sRUFBRTtJQUFHLENBQUUsQ0FBQztFQUN0RTtBQUNGIiwiaWdub3JlTGlzdCI6W119