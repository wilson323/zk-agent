{"version":3,"names":["exports","createOptimizedMemo","cov_xe9gg6ur5","s","useStableCallback","useOptimizedState","createLazyComponent","useImageLazyLoad","useContentLazyLoad","useVirtualization","VirtualList","useDebounce","useDebouncedCallback","useThrottledCallback","useMemoryMonitor","useRenderPerformance","useComponentSizeMonitor","useBatchedUpdates","getBatchedDOMOperations","React","__importStar","require","Component","propsAreEqual","f","defaultCompare","prevProps","nextProps","prevKeys","Object","keys","nextKeys","length","b","key","shallowEqual","memo","obj1","obj2","Array","isArray","i","keys1","keys2","callback","deps","callbackRef","useRef","stableDeps","useStableDeps","useEffect","current","useCallback","args","stableDepsRef","hasChanged","some","dep","index","initialState","state","setState","useState","pendingUpdatesRef","timeoutRef","optimizedSetState","newState","push","clearTimeout","setTimeout","prevState","update","importFn","options","fallback","Fallback","retryCount","retryDelay","retries","retryImport","error","Promise","resolve","lazy","threshold","rootMargin","isLoaded","setIsLoaded","isInView","setIsInView","imgRef","img","observer","IntersectionObserver","entry","isIntersecting","unobserve","observe","handleLoad","elementRef","element","items","config","itemHeight","containerHeight","overscan","scrollingDelay","scrollTop","setScrollTop","isScrolling","setIsScrolling","scrollTimeoutRef","getItemHeight","getItemOffset","offset","visibleRange","useMemo","startIndex","Math","floor","endIndex","min","ceil","start","max","end","visibleItems","result","item","height","totalHeight","handleScroll","event","newScrollTop","currentTarget","renderItem","className","style","jsx_runtime_1","jsx","overflow","onScroll","children","position","map","top","left","right","value","delay","immediate","maxWait","debouncedValue","setDebouncedValue","maxTimeoutRef","lastCallTimeRef","now","Date","debouncedCallback","leading","trailing","lastArgsRef","throttledCallback","timeSinceLastCall","interval","onThresholdExceeded","memoryUsage","setMemoryUsage","isSupported","setIsSupported","supported","performance","checkMemory","memory","usedMB","usedJSHeapSize","intervalId","setInterval","clearInterval","componentName","renderCountRef","renderTimesRef","metrics","setMetrics","renderTime","componentCount","startTime","endTime","slice","avgRenderTime","reduce","a","process","env","NODE_ENV","console","warn","toFixed","resetMetrics","size","setSize","width","resizeObserver","ResizeObserver","entries","contentRect","batchRef","addToBatch","clearBatch","BatchedDOMOperations","constructor","operations","isScheduled","add","operation","schedule","requestAnimationFrame","flush","clear","globalBatchedDOM","performanceOptimizers"],"sources":["E:\\zk-agent\\lib\\component-standards\\performance-optimizers.tsx"],"sourcesContent":["/**\n * 性能优化工具库\n * 基于 React 18+ 和现代前端性能优化最佳实践\n */\n\nimport * as React from 'react';\nimport { type ClassValue } from 'clsx';\n\n// =============================================================================\n// 类型定义\n// =============================================================================\n\n/**\n * 懒加载配置\n */\ninterface LazyLoadOptions {\n  threshold?: number;\n  rootMargin?: string;\n  fallback?: React.ComponentType;\n  retryCount?: number;\n  retryDelay?: number;\n}\n\n/**\n * 虚拟化配置\n */\ninterface VirtualizationConfig {\n  itemHeight: number | ((index: number) => number);\n  containerHeight: number;\n  overscan?: number;\n  scrollingDelay?: number;\n  estimatedItemSize?: number;\n}\n\n/**\n * 防抖配置\n */\ninterface DebounceOptions {\n  delay: number;\n  immediate?: boolean;\n  maxWait?: number;\n}\n\n/**\n * 节流配置\n */\ninterface ThrottleOptions {\n  delay: number;\n  leading?: boolean;\n  trailing?: boolean;\n}\n\n/**\n * 内存监控配置\n */\ninterface MemoryMonitorConfig {\n  threshold?: number; // MB\n  interval?: number; // ms\n  onThresholdExceeded?: (usage: number) => void;\n}\n\n/**\n * 性能指标\n */\ninterface PerformanceMetrics {\n  renderTime: number;\n  componentCount: number;\n  memoryUsage?: number;\n  bundleSize?: number;\n}\n\n// =============================================================================\n// React 组件优化\n// =============================================================================\n\n/**\n * 创建优化的 memo 组件\n * 基于 React.memo 和自定义比较函数\n */\nexport function createOptimizedMemo<P extends Record<string, any>>(\n  Component: React.ComponentType<P>,\n  propsAreEqual?: (prevProps: P, nextProps: P) => boolean\n): React.MemoExoticComponent<React.ComponentType<P>> {\n  const defaultCompare = (prevProps: P, nextProps: P): boolean => {\n    const prevKeys = Object.keys(prevProps);\n    const nextKeys = Object.keys(nextProps);\n    \n    if (prevKeys.length !== nextKeys.length) {\n      return false;\n    }\n    \n    for (const key of prevKeys) {\n      if (prevProps[key] !== nextProps[key]) {\n        // 深度比较对象和数组\n        if (typeof prevProps[key] === 'object' && typeof nextProps[key] === 'object') {\n          if (!shallowEqual(prevProps[key], nextProps[key])) {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  };\n  \n  return React.memo(Component, propsAreEqual || defaultCompare);\n}\n\n/**\n * 浅比较工具函数\n */\nfunction shallowEqual(obj1: any, obj2: any): boolean {\n  if (obj1 === obj2) {return true;}\n  \n  if (obj1 == null || obj2 == null) {return false;}\n  \n  if (Array.isArray(obj1) && Array.isArray(obj2)) {\n    if (obj1.length !== obj2.length) {return false;}\n    for (let i = 0; i < obj1.length; i++) {\n      if (obj1[i] !== obj2[i]) {return false;}\n    }\n    return true;\n  }\n  \n  if (typeof obj1 === 'object' && typeof obj2 === 'object') {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    \n    if (keys1.length !== keys2.length) {return false;}\n    \n    for (const key of keys1) {\n      if (obj1[key] !== obj2[key]) {return false;}\n    }\n    return true;\n  }\n  \n  return false;\n}\n\n/**\n * React Hook: 稳定的回调函数\n * 基于 useCallback 和依赖项优化\n */\nexport function useStableCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  deps: React.DependencyList\n): T {\n  const callbackRef = React.useRef(callback);\n  const stableDeps = useStableDeps(deps);\n  \n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n  \n  return React.useCallback(\n    ((...args: any[]) => callbackRef.current(...args)) as T,\n    stableDeps\n  );\n}\n\n/**\n * React Hook: 稳定的依赖项\n */\nfunction useStableDeps(deps: React.DependencyList): React.DependencyList {\n  const stableDepsRef = React.useRef<React.DependencyList>(deps);\n  \n  const hasChanged = deps.some((dep, index) => {\n    return dep !== stableDepsRef.current[index];\n  });\n  \n  if (hasChanged) {\n    stableDepsRef.current = deps;\n  }\n  \n  return stableDepsRef.current;\n}\n\n/**\n * React Hook: 优化的状态更新\n * 基于 useState 和批量更新\n */\nexport function useOptimizedState<T>(\n  initialState: T | (() => T)\n): [T, (newState: T | ((prevState: T) => T)) => void] {\n  const [state, setState] = React.useState(initialState);\n  const pendingUpdatesRef = React.useRef<Array<(prevState: T) => T>>([]);\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  \n  const optimizedSetState = React.useCallback(\n    (newState: T | ((prevState: T) => T)) => {\n      if (typeof newState === 'function') {\n        pendingUpdatesRef.current.push(newState as (prevState: T) => T);\n      } else {\n        pendingUpdatesRef.current.push(() => newState);\n      }\n      \n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      \n      timeoutRef.current = setTimeout(() => {\n        setState(prevState => {\n          let newState = prevState;\n          for (const update of pendingUpdatesRef.current) {\n            newState = update(newState);\n          }\n          pendingUpdatesRef.current = [];\n          return newState;\n        });\n      }, 0);\n    },\n    []\n  );\n  \n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  \n  return [state, optimizedSetState];\n}\n\n// =============================================================================\n// 懒加载和代码分割\n// =============================================================================\n\n/**\n * 创建懒加载组件\n * 基于 React.lazy 和 Suspense\n */\nexport function createLazyComponent<P extends Record<string, any>>(\n  importFn: () => Promise<{ default: React.ComponentType<P> }>,\n  options: LazyLoadOptions = {}\n): React.LazyExoticComponent<React.ComponentType<P>> {\n  const {\n    fallback: Fallback,\n    retryCount = 3,\n    retryDelay = 1000\n  } = options;\n  \n  let retries = 0;\n  \n  const retryImport = async (): Promise<{ default: React.ComponentType<P> }> => {\n    try {\n      return await importFn();\n    } catch (error) {\n      if (retries < retryCount) {\n        retries++;\n        await new Promise(resolve => setTimeout(resolve, retryDelay * retries));\n        return retryImport();\n      }\n      throw error;\n    }\n  };\n  \n  return React.lazy(retryImport);\n}\n\n/**\n * React Hook: 图片懒加载\n * 基于 Intersection Observer API\n */\nexport function useImageLazyLoad(\n  options: LazyLoadOptions = {}\n) {\n  const {\n    threshold = 0.1,\n    rootMargin = '50px'\n  } = options;\n  \n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [isInView, setIsInView] = React.useState(false);\n  const imgRef = React.useRef<HTMLImageElement>(null);\n  \n  React.useEffect(() => {\n    const img = imgRef.current;\n    if (!img) {return;}\n    \n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          observer.unobserve(img);\n        }\n      },\n      { threshold, rootMargin }\n    );\n    \n    observer.observe(img);\n    \n    return () => {\n      observer.unobserve(img);\n    };\n  }, [threshold, rootMargin]);\n  \n  const handleLoad = React.useCallback(() => {\n    setIsLoaded(true);\n  }, []);\n  \n  return {\n    imgRef,\n    isLoaded,\n    isInView,\n    handleLoad\n  };\n}\n\n/**\n * React Hook: 内容懒加载\n */\nexport function useContentLazyLoad<T extends HTMLElement>(\n  options: LazyLoadOptions = {}\n) {\n  const {\n    threshold = 0.1,\n    rootMargin = '50px'\n  } = options;\n  \n  const [isInView, setIsInView] = React.useState(false);\n  const elementRef = React.useRef<T>(null);\n  \n  React.useEffect(() => {\n    const element = elementRef.current;\n    if (!element) {return;}\n    \n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsInView(entry.isIntersecting);\n      },\n      { threshold, rootMargin }\n    );\n    \n    observer.observe(element);\n    \n    return () => {\n      observer.unobserve(element);\n    };\n  }, [threshold, rootMargin]);\n  \n  return { elementRef, isInView };\n}\n\n// =============================================================================\n// 虚拟化和大列表优化\n// =============================================================================\n\n/**\n * React Hook: 虚拟化列表\n * 基于窗口化技术优化大列表渲染\n */\nexport function useVirtualization<T>(\n  items: T[],\n  config: VirtualizationConfig\n) {\n  const {\n    itemHeight,\n    containerHeight,\n    overscan = 5,\n    scrollingDelay = 150\n  } = config;\n  \n  const [scrollTop, setScrollTop] = React.useState(0);\n  const [isScrolling, setIsScrolling] = React.useState(false);\n  const scrollTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  \n  // 计算可见范围\n  const getItemHeight = React.useCallback(\n    (index: number): number => {\n      return typeof itemHeight === 'function' ? itemHeight(index) : itemHeight;\n    },\n    [itemHeight]\n  );\n  \n  const getItemOffset = React.useCallback(\n    (index: number): number => {\n      if (typeof itemHeight === 'number') {\n        return index * itemHeight;\n      }\n      \n      let offset = 0;\n      for (let i = 0; i < index; i++) {\n        offset += getItemHeight(i);\n      }\n      return offset;\n    },\n    [getItemHeight, itemHeight]\n  );\n  \n  const visibleRange = React.useMemo(() => {\n    const startIndex = Math.floor(scrollTop / (typeof itemHeight === 'number' ? itemHeight : 50));\n    const endIndex = Math.min(\n      items.length - 1,\n      Math.ceil((scrollTop + containerHeight) / (typeof itemHeight === 'number' ? itemHeight : 50))\n    );\n    \n    return {\n      start: Math.max(0, startIndex - overscan),\n      end: Math.min(items.length - 1, endIndex + overscan)\n    };\n  }, [scrollTop, containerHeight, itemHeight, items.length, overscan]);\n  \n  // 可见项目\n  const visibleItems = React.useMemo(() => {\n    const result = [];\n    for (let i = visibleRange.start; i <= visibleRange.end; i++) {\n      result.push({\n        index: i,\n        item: items[i],\n        offset: getItemOffset(i),\n        height: getItemHeight(i)\n      });\n    }\n    return result;\n  }, [visibleRange, items, getItemOffset, getItemHeight]);\n  \n  // 总高度\n  const totalHeight = React.useMemo(() => {\n    if (typeof itemHeight === 'number') {\n      return items.length * itemHeight;\n    }\n    \n    let height = 0;\n    for (let i = 0; i < items.length; i++) {\n      height += getItemHeight(i);\n    }\n    return height;\n  }, [items.length, itemHeight, getItemHeight]);\n  \n  // 滚动处理\n  const handleScroll = React.useCallback(\n    (event: React.UIEvent<HTMLDivElement>) => {\n      const newScrollTop = event.currentTarget.scrollTop;\n      setScrollTop(newScrollTop);\n      setIsScrolling(true);\n      \n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n      \n      scrollTimeoutRef.current = setTimeout(() => {\n        setIsScrolling(false);\n      }, scrollingDelay);\n    },\n    [scrollingDelay]\n  );\n  \n  React.useEffect(() => {\n    return () => {\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n  \n  return {\n    visibleItems,\n    totalHeight,\n    isScrolling,\n    handleScroll,\n    scrollTop\n  };\n}\n\n/**\n * 虚拟化列表组件\n */\ninterface VirtualListProps<T> {\n  items: T[];\n  itemHeight: number | ((index: number) => number);\n  containerHeight: number;\n  renderItem: (item: T, index: number, style: React.CSSProperties) => React.ReactNode;\n  overscan?: number;\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport function VirtualList<T>({\n  items,\n  itemHeight,\n  containerHeight,\n  renderItem,\n  overscan = 5,\n  className,\n  style\n}: VirtualListProps<T>) {\n  const {\n    visibleItems,\n    totalHeight,\n    handleScroll\n  } = useVirtualization(items, {\n    itemHeight,\n    containerHeight,\n    overscan\n  });\n  \n  return (\n    <div\n      className={className}\n      style={{\n        height: containerHeight,\n        overflow: 'auto',\n        ...style\n      }}\n      onScroll={handleScroll}\n    >\n      <div style={{ height: totalHeight, position: 'relative' }}>\n        {visibleItems.map(({ index, item, offset, height }) => (\n          <div\n            key={index}\n            style={{\n              position: 'absolute',\n              top: offset,\n              left: 0,\n              right: 0,\n              height\n            }}\n          >\n            {renderItem(item, index, {\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              right: 0,\n              height\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// =============================================================================\n// 防抖和节流\n// =============================================================================\n\n/**\n * React Hook: 防抖值\n */\nexport function useDebounce<T>(\n  value: T,\n  options: DebounceOptions\n): T {\n  const {\n    delay,\n    immediate = false,\n    maxWait\n  } = options;\n  \n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  const maxTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  const lastCallTimeRef = React.useRef<number>(0);\n  \n  React.useEffect(() => {\n    const now = Date.now();\n    \n    // 立即执行逻辑\n    if (immediate && now - lastCallTimeRef.current > delay) {\n      setDebouncedValue(value);\n      lastCallTimeRef.current = now;\n      return;\n    }\n    \n    // 清除之前的定时器\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    // 设置新的定时器\n    timeoutRef.current = setTimeout(() => {\n      setDebouncedValue(value);\n      lastCallTimeRef.current = Date.now();\n      \n      if (maxTimeoutRef.current) {\n        clearTimeout(maxTimeoutRef.current);\n        maxTimeoutRef.current = null;\n      }\n    }, delay);\n    \n    // 最大等待时间逻辑\n    if (maxWait && !maxTimeoutRef.current) {\n      maxTimeoutRef.current = setTimeout(() => {\n        setDebouncedValue(value);\n        lastCallTimeRef.current = Date.now();\n        \n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current);\n          timeoutRef.current = null;\n        }\n      }, maxWait);\n    }\n    \n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      if (maxTimeoutRef.current) {\n        clearTimeout(maxTimeoutRef.current);\n      }\n    };\n  }, [value, delay, immediate, maxWait]);\n  \n  return debouncedValue;\n}\n\n/**\n * React Hook: 防抖回调\n */\nexport function useDebouncedCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  options: DebounceOptions\n): T {\n  const {\n    delay,\n    immediate = false,\n    maxWait\n  } = options;\n  \n  const callbackRef = React.useRef(callback);\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  const maxTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  const lastCallTimeRef = React.useRef<number>(0);\n  \n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n  \n  const debouncedCallback = React.useCallback(\n    ((...args: any[]) => {\n      const now = Date.now();\n      \n      // 立即执行逻辑\n      if (immediate && now - lastCallTimeRef.current > delay) {\n        lastCallTimeRef.current = now;\n        return callbackRef.current(...args);\n      }\n      \n      // 清除之前的定时器\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      \n      // 设置新的定时器\n      timeoutRef.current = setTimeout(() => {\n        lastCallTimeRef.current = Date.now();\n        callbackRef.current(...args);\n        \n        if (maxTimeoutRef.current) {\n          clearTimeout(maxTimeoutRef.current);\n          maxTimeoutRef.current = null;\n        }\n      }, delay);\n      \n      // 最大等待时间逻辑\n      if (maxWait && !maxTimeoutRef.current) {\n        maxTimeoutRef.current = setTimeout(() => {\n          lastCallTimeRef.current = Date.now();\n          callbackRef.current(...args);\n          \n          if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n            timeoutRef.current = null;\n          }\n        }, maxWait);\n      }\n    }) as T,\n    [delay, immediate, maxWait]\n  );\n  \n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      if (maxTimeoutRef.current) {\n        clearTimeout(maxTimeoutRef.current);\n      }\n    };\n  }, []);\n  \n  return debouncedCallback;\n}\n\n/**\n * React Hook: 节流回调\n */\nexport function useThrottledCallback<T extends (...args: any[]) => any>(\n  callback: T,\n  options: ThrottleOptions\n): T {\n  const {\n    delay,\n    leading = true,\n    trailing = true\n  } = options;\n  \n  const callbackRef = React.useRef(callback);\n  const lastCallTimeRef = React.useRef<number>(0);\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  const lastArgsRef = React.useRef<any[]>([]);\n  \n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n  \n  const throttledCallback = React.useCallback(\n    ((...args: any[]) => {\n      const now = Date.now();\n      const timeSinceLastCall = now - lastCallTimeRef.current;\n      \n      lastArgsRef.current = args;\n      \n      // 首次调用或超过延迟时间\n      if (timeSinceLastCall >= delay) {\n        if (leading) {\n          lastCallTimeRef.current = now;\n          return callbackRef.current(...args);\n        } else {\n          // 不立即执行，设置定时器\n          if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n          }\n          \n          timeoutRef.current = setTimeout(() => {\n            lastCallTimeRef.current = Date.now();\n            callbackRef.current(...lastArgsRef.current);\n          }, delay - timeSinceLastCall);\n        }\n      } else {\n        // 在延迟期间，设置尾随调用\n        if (trailing) {\n          if (timeoutRef.current) {\n            clearTimeout(timeoutRef.current);\n          }\n          \n          timeoutRef.current = setTimeout(() => {\n            lastCallTimeRef.current = Date.now();\n            callbackRef.current(...lastArgsRef.current);\n          }, delay - timeSinceLastCall);\n        }\n      }\n    }) as T,\n    [delay, leading, trailing]\n  );\n  \n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  \n  return throttledCallback;\n}\n\n// =============================================================================\n// 内存和性能监控\n// =============================================================================\n\n/**\n * React Hook: 内存使用监控\n */\nexport function useMemoryMonitor(\n  config: MemoryMonitorConfig = {}\n) {\n  const {\n    threshold = 100, // 100MB\n    interval = 5000, // 5秒\n    onThresholdExceeded\n  } = config;\n  \n  const [memoryUsage, setMemoryUsage] = React.useState<number>(0);\n  const [isSupported, setIsSupported] = React.useState(false);\n  \n  React.useEffect(() => {\n    // 检查浏览器支持\n    const supported = 'memory' in performance;\n    setIsSupported(supported);\n    \n    if (!supported) {return;}\n    \n    const checkMemory = () => {\n      const memory = (performance as any).memory;\n      if (memory) {\n        const usedMB = memory.usedJSHeapSize / 1024 / 1024;\n        setMemoryUsage(usedMB);\n        \n        if (usedMB > threshold && onThresholdExceeded) {\n          onThresholdExceeded(usedMB);\n        }\n      }\n    };\n    \n    checkMemory();\n    const intervalId = setInterval(checkMemory, interval);\n    \n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [threshold, interval, onThresholdExceeded]);\n  \n  return {\n    memoryUsage,\n    isSupported,\n    threshold\n  };\n}\n\n/**\n * React Hook: 渲染性能监控\n */\nexport function useRenderPerformance(\n  componentName: string = 'Component'\n) {\n  const renderCountRef = React.useRef(0);\n  const renderTimesRef = React.useRef<number[]>([]);\n  const [metrics, setMetrics] = React.useState<PerformanceMetrics>({\n    renderTime: 0,\n    componentCount: 0\n  });\n  \n  React.useEffect(() => {\n    const startTime = performance.now();\n    renderCountRef.current++;\n    \n    return () => {\n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      renderTimesRef.current.push(renderTime);\n      \n      // 保持最近 100 次渲染记录\n      if (renderTimesRef.current.length > 100) {\n        renderTimesRef.current = renderTimesRef.current.slice(-100);\n      }\n      \n      const avgRenderTime = renderTimesRef.current.reduce((a, b) => a + b, 0) / renderTimesRef.current.length;\n      \n      setMetrics({\n        renderTime: avgRenderTime,\n        componentCount: renderCountRef.current\n      });\n      \n      // 开发环境下的性能警告\n      if (process.env.NODE_ENV === 'development') {\n        if (renderTime > 16) { // 超过一帧时间\n          console.warn(\n            `${componentName} 渲染时间过长: ${renderTime.toFixed(2)}ms`\n          );\n        }\n        \n        if (renderCountRef.current > 100 && avgRenderTime > 10) {\n          console.warn(\n            `${componentName} 平均渲染时间: ${avgRenderTime.toFixed(2)}ms (${renderCountRef.current} 次渲染)`\n          );\n        }\n      }\n    };\n  });\n  \n  const resetMetrics = React.useCallback(() => {\n    renderCountRef.current = 0;\n    renderTimesRef.current = [];\n    setMetrics({\n      renderTime: 0,\n      componentCount: 0\n    });\n  }, []);\n  \n  return {\n    metrics,\n    resetMetrics\n  };\n}\n\n/**\n * React Hook: 组件大小监控\n */\nexport function useComponentSizeMonitor() {\n  const [size, setSize] = React.useState({ width: 0, height: 0 });\n  const elementRef = React.useRef<HTMLElement>(null);\n  \n  React.useEffect(() => {\n    const element = elementRef.current;\n    if (!element) {return;}\n    \n    const resizeObserver = new ResizeObserver(entries => {\n      for (const entry of entries) {\n        const { width, height } = entry.contentRect;\n        setSize({ width, height });\n      }\n    });\n    \n    resizeObserver.observe(element);\n    \n    return () => {\n      resizeObserver.unobserve(element);\n    };\n  }, []);\n  \n  return {\n    elementRef,\n    size\n  };\n}\n\n// =============================================================================\n// 批量操作优化\n// =============================================================================\n\n/**\n * React Hook: 批量状态更新\n */\nexport function useBatchedUpdates<T>() {\n  const [state, setState] = React.useState<T[]>([]);\n  const batchRef = React.useRef<T[]>([]);\n  const timeoutRef = React.useRef<NodeJS.Timeout | null>(null);\n  \n  const addToBatch = React.useCallback((item: T) => {\n    batchRef.current.push(item);\n    \n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      setState(prevState => [...prevState, ...batchRef.current]);\n      batchRef.current = [];\n    }, 0);\n  }, []);\n  \n  const clearBatch = React.useCallback(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    batchRef.current = [];\n    setState([]);\n  }, []);\n  \n  React.useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  \n  return {\n    state,\n    addToBatch,\n    clearBatch\n  };\n}\n\n/**\n * 批量 DOM 操作工具\n */\nexport class BatchedDOMOperations {\n  private operations: Array<() => void> = [];\n  private isScheduled = false;\n  \n  /**\n   * 添加 DOM 操作到批次\n   */\n  add(operation: () => void): void {\n    this.operations.push(operation);\n    this.schedule();\n  }\n  \n  /**\n   * 调度批量执行\n   */\n  private schedule(): void {\n    if (this.isScheduled) {return;}\n    \n    this.isScheduled = true;\n    \n    requestAnimationFrame(() => {\n      this.flush();\n    });\n  }\n  \n  /**\n   * 执行所有操作\n   */\n  private flush(): void {\n    const operations = this.operations.slice();\n    this.operations = [];\n    this.isScheduled = false;\n    \n    for (const operation of operations) {\n      operation();\n    }\n  }\n  \n  /**\n   * 清除所有待执行操作\n   */\n  clear(): void {\n    this.operations = [];\n    this.isScheduled = false;\n  }\n}\n\n// 全局批量 DOM 操作实例\nlet globalBatchedDOM: BatchedDOMOperations | null = null;\n\n/**\n * 获取全局批量 DOM 操作实例\n */\nexport function getBatchedDOMOperations(): BatchedDOMOperations {\n  if (!globalBatchedDOM) {\n    globalBatchedDOM = new BatchedDOMOperations();\n  }\n  return globalBatchedDOM;\n}\n\n// =============================================================================\n// 导出所有工具\n// =============================================================================\n\nexport const performanceOptimizers = {\n  // React 优化\n  createOptimizedMemo,\n  useStableCallback,\n  useOptimizedState,\n  \n  // 懒加载\n  createLazyComponent,\n  useImageLazyLoad,\n  useContentLazyLoad,\n  \n  // 虚拟化\n  useVirtualization,\n  VirtualList,\n  \n  // 防抖节流\n  useDebounce,\n  useDebouncedCallback,\n  useThrottledCallback,\n  \n  // 性能监控\n  useMemoryMonitor,\n  useRenderPerformance,\n  useComponentSizeMonitor,\n  \n  // 批量操作\n  useBatchedUpdates,\n  BatchedDOMOperations,\n  getBatchedDOMOperations\n} as const;\n\nexport type PerformanceOptimizers = typeof performanceOptimizers;"],"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","ignoreList":[]}