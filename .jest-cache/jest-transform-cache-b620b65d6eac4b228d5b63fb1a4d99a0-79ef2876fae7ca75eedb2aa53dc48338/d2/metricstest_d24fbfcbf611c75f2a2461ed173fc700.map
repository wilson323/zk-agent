{"file":"E:\\zk-agent\\tests\\api\\routes\\metrics.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\metrics.test.ts"],"sourcesContent":["/**\n * 指标监控API路由错误处理测试\n * 测试系统指标收集、监控、报警等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '../../../app/api/metrics/route';\nimport { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/metrics-collector', () => ({\n  collectSystemMetrics: jest.fn(),\n  collectApplicationMetrics: jest.fn(),\n  collectPerformanceMetrics: jest.fn(),\n  collectErrorMetrics: jest.fn(),\n  aggregateMetrics: jest.fn(),\n  validateMetricData: jest.fn(),\n  calculateMetricTrends: jest.fn()\n}));\n\njest.mock('../../../lib/storage/metrics-store', () => ({\n  storeMetrics: jest.fn(),\n  retrieveMetrics: jest.fn(),\n  deleteMetrics: jest.fn(),\n  queryMetrics: jest.fn(),\n  getMetricHistory: jest.fn(),\n  checkStorageCapacity: jest.fn()\n}));\n\njest.mock('../../../lib/services/alert-manager', () => ({\n  checkAlertThresholds: jest.fn(),\n  triggerAlert: jest.fn(),\n  resolveAlert: jest.fn(),\n  getActiveAlerts: jest.fn(),\n  validateAlertRules: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkMetricsPermissions: jest.fn()\n}));\n\ndescribe('Metrics API Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/metrics - Get Metrics', () => {\n    it('should handle metrics collection service unavailable', async () => {\n      const { collectSystemMetrics } = require('../../../lib/services/metrics-collector');\n      collectSystemMetrics.mockRejectedValue(new Error('Metrics collection service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=system');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.error.message).toContain('Metrics collection service unavailable');\n    });\n\n    it('should handle invalid metric type parameter', async () => {\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=invalid');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid metric type');\n    });\n\n    it('should handle invalid time range parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/metrics?from=invalid&to=invalid');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid time range');\n    });\n\n    it('should handle metrics storage query failure', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockRejectedValue(new Error('Metrics database query failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=application');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Metrics database query failed');\n    });\n\n    it('should handle metrics data corruption', async () => {\n      const { retrieveMetrics } = require('../../../lib/storage/metrics-store');\n      retrieveMetrics.mockRejectedValue(new Error('Metrics data corrupted'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=performance');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Metrics data corrupted');\n    });\n\n    it('should handle insufficient permissions for metrics access', async () => {\n      const { checkMetricsPermissions } = require('../../../lib/auth/session');\n      checkMetricsPermissions.mockRejectedValue(new Error('Metrics access permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle metrics aggregation timeout', async () => {\n      const { aggregateMetrics } = require('../../../lib/services/metrics-collector');\n      aggregateMetrics.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Metrics aggregation timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?aggregate=true');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Metrics aggregation timeout');\n    });\n\n    it('should handle missing metrics data for requested period', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockResolvedValue([]);\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?from=2023-01-01&to=2023-01-02');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('No metrics data found');\n    });\n  });\n\n  describe('POST /api/metrics - Store Custom Metrics', () => {\n    let validMetricData: any;\n\n    beforeEach(() => {\n      validMetricData = {\n        name: 'custom.api.response_time',\n        value: 150,\n        unit: 'ms',\n        timestamp: new Date().toISOString(),\n        tags: {\n          endpoint: '/api/test',\n          method: 'GET',\n          status: '200'\n        },\n        metadata: {\n          source: 'application',\n          environment: 'production'\n        }\n      };\n    });\n\n    it('should handle invalid metric data format', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Invalid metric data format'));\n\n      const invalidData = { name: 'test', value: 'invalid' };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(invalidData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid metric data format');\n    });\n\n    it('should handle missing required metric fields', async () => {\n      const incompleteData = { name: 'test.metric' }; // Missing value, timestamp\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(incompleteData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('value');\n    });\n\n    it('should handle metric name validation failure', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Invalid metric name: must follow naming convention'));\n\n      const invalidNameData = { ...validMetricData, name: 'invalid-metric-name!' };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(invalidNameData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid metric name');\n    });\n\n    it('should handle metrics storage capacity exceeded', async () => {\n      const { checkStorageCapacity } = require('../../../lib/storage/metrics-store');\n      checkStorageCapacity.mockRejectedValue(new Error('Metrics storage capacity exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient storage\n      expect(data.error.message).toContain('Metrics storage capacity exceeded');\n    });\n\n    it('should handle metrics storage service unavailable', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Metrics storage service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Metrics storage service unavailable');\n    });\n\n    it('should handle duplicate metric timestamp conflict', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Metric with same name and timestamp already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Metric with same name and timestamp already exists');\n    });\n\n    it('should handle metric value out of range', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Metric value exceeds allowed range'));\n\n      const outOfRangeData = { ...validMetricData, value: Number.MAX_SAFE_INTEGER + 1 };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(outOfRangeData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Metric value exceeds allowed range');\n    });\n\n    it('should handle invalid timestamp format', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Invalid timestamp format'));\n\n      const invalidTimestampData = { ...validMetricData, timestamp: 'invalid-date' };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(invalidTimestampData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid timestamp format');\n    });\n  });\n\n  describe('PUT /api/metrics/alerts - Update Alert Rules', () => {\n    let validAlertRule: any;\n\n    beforeEach(() => {\n      validAlertRule = {\n        name: 'high_response_time',\n        metric: 'api.response_time',\n        condition: 'greater_than',\n        threshold: 1000,\n        duration: '5m',\n        severity: 'warning',\n        enabled: true,\n        notifications: {\n          email: ['admin@example.com'],\n          webhook: 'https://hooks.example.com/alert'\n        }\n      };\n    });\n\n    it('should handle invalid alert rule format', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Invalid alert rule format'));\n\n      const invalidRule = { name: 'test' }; // Missing required fields\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(invalidRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid alert rule format');\n    });\n\n    it('should handle unsupported alert condition', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Unsupported alert condition: invalid_condition'));\n\n      const invalidConditionRule = { ...validAlertRule, condition: 'invalid_condition' };\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(invalidConditionRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Unsupported alert condition');\n    });\n\n    it('should handle alert rule conflict', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Alert rule with same name already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(validAlertRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Alert rule with same name already exists');\n    });\n\n    it('should handle invalid notification configuration', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Invalid notification webhook URL'));\n\n      const invalidNotificationRule = {\n        ...validAlertRule,\n        notifications: { webhook: 'invalid-url' }\n      };\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(invalidNotificationRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid notification webhook URL');\n    });\n\n    it('should handle alert manager service unavailable', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Alert manager service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(validAlertRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Alert manager service unavailable');\n    });\n  });\n\n  describe('DELETE /api/metrics - Delete Metrics', () => {\n    it('should handle metrics not found for deletion', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockResolvedValue([]);\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=nonexistent.metric', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('No metrics found');\n    });\n\n    it('should handle metrics deletion failure', async () => {\n      const { deleteMetrics } = require('../../../lib/storage/metrics-store');\n      deleteMetrics.mockRejectedValue(new Error('Failed to delete metrics from storage'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=test.metric', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to delete metrics from storage');\n    });\n\n    it('should handle attempt to delete system metrics', async () => {\n      const { deleteMetrics } = require('../../../lib/storage/metrics-store');\n      deleteMetrics.mockRejectedValue(new Error('Cannot delete system metrics'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=system.cpu.usage', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Cannot delete system metrics');\n    });\n\n    it('should handle metrics in use by active alerts', async () => {\n      const { deleteMetrics } = require('../../../lib/storage/metrics-store');\n      deleteMetrics.mockRejectedValue(new Error('Metrics are referenced by active alert rules'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=api.response_time', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Metrics are referenced by active alert rules');\n    });\n  });\n\n  describe('Alert Management Errors', () => {\n    it('should handle alert threshold check failure', async () => {\n      const { checkAlertThresholds } = require('../../../lib/services/alert-manager');\n      checkAlertThresholds.mockRejectedValue(new Error('Alert threshold check failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/check');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Alert threshold check failed');\n    });\n\n    it('should handle alert trigger failure', async () => {\n      const { triggerAlert } = require('../../../lib/services/alert-manager');\n      triggerAlert.mockRejectedValue(new Error('Failed to trigger alert notification'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/trigger', {\n        method: 'POST',\n        body: JSON.stringify({ alertName: 'high_cpu_usage' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to trigger alert notification');\n    });\n\n    it('should handle alert resolution failure', async () => {\n      const { resolveAlert } = require('../../../lib/services/alert-manager');\n      resolveAlert.mockRejectedValue(new Error('Failed to resolve alert'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/resolve', {\n        method: 'POST',\n        body: JSON.stringify({ alertId: 'alert-123' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to resolve alert');\n    });\n\n    it('should handle active alerts retrieval failure', async () => {\n      const { getActiveAlerts } = require('../../../lib/services/alert-manager');\n      getActiveAlerts.mockRejectedValue(new Error('Failed to retrieve active alerts'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/active');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to retrieve active alerts');\n    });\n  });\n\n  describe('Metrics Trend Analysis Errors', () => {\n    it('should handle trend calculation failure', async () => {\n      const { calculateMetricTrends } = require('../../../lib/services/metrics-collector');\n      calculateMetricTrends.mockRejectedValue(new Error('Trend calculation failed: insufficient data'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/trends?metric=api.response_time');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Trend calculation failed');\n    });\n\n    it('should handle invalid trend analysis parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/metrics/trends?period=invalid');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid trend analysis parameters');\n    });\n\n    it('should handle trend analysis timeout', async () => {\n      const { calculateMetricTrends } = require('../../../lib/services/metrics-collector');\n      calculateMetricTrends.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Trend analysis timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/trends?metric=system.cpu.usage');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Trend analysis timeout');\n    });\n  });\n\n  describe('Batch Metrics Operations', () => {\n    it('should handle batch metrics ingestion with partial failures', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockImplementation((metrics: any) => {\n        if (metrics.some((m: any) => m.name === 'invalid.metric')) {\n          throw new Error('Invalid metric in batch');\n        }\n        return Promise.resolve();\n      });\n\n      const batchMetrics = [\n        { name: 'valid.metric', value: 100, timestamp: new Date().toISOString() },\n        { name: 'invalid.metric', value: 'invalid', timestamp: new Date().toISOString() }\n      ];\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/batch', {\n        method: 'POST',\n        body: JSON.stringify({ metrics: batchMetrics }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n\n    it('should handle batch metrics query with large result set', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockRejectedValue(new Error('Query result set too large'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/batch?names=metric1,metric2,metric3');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(413); // Payload too large\n      expect(data.error.message).toContain('Query result set too large');\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide metrics operation recovery suggestions', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Temporary metrics storage outage'));\n\n      const validMetricData = {\n        name: 'test.metric',\n        value: 100,\n        timestamp: new Date().toISOString()\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry metric storage');\n    });\n\n    it('should track metrics operation performance', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Test error'));\n\n      const validMetricData = {\n        name: 'test.metric',\n        value: 100,\n        timestamp: new Date().toISOString()\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      await POST(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include metrics context in error responses', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Test error'));\n\n      const validMetricData = {\n        name: 'test.metric',\n        value: 100,\n        timestamp: new Date().toISOString()\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('storeMetrics');\n      expect(data.error.context.metricName).toBe('test.metric');\n    });\n  });\n});"],"version":3}