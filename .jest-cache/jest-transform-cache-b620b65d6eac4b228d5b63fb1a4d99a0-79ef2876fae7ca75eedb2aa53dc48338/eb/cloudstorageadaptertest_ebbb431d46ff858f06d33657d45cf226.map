{"file":"E:\\zk-agent\\__tests__\\lib\\storage\\cloud-storage-adapter.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\storage\\cloud-storage-adapter.test.ts"],"sourcesContent":["// @ts-nocheck\r\n/**\r\n * @file __tests__/lib/storage/cloud-storage-adapter.test.ts\r\n * @description 云存储适配器测试套件\r\n * @author B团队测试工程师\r\n * @lastUpdate 2024-12-19\r\n * @coverage 100%测试覆盖率目标\r\n */\r\n\r\nimport {\r\n  CloudStorageAdapter,\r\n  CloudProvider,\r\n  uploadFile,\r\n  downloadFile,\r\n  deleteFile,\r\n  fileExists,\r\n  getFileInfo,\r\n  listFiles,\r\n  getSignedUrl,\r\n} from '@/lib/storage/cloud-storage-adapter';\r\n\r\n// Mock dependencies\r\njest.mock('@/lib/utils/logger');\r\njest.mock('@/lib/cache/enhanced-cache-manager', () => ({\r\n  EnhancedCacheManager: {\r\n    getInstance: jest.fn(() => ({\r\n      get: jest.fn(),\r\n      set: jest.fn(),\r\n      delete: jest.fn(),\r\n      clear: jest.fn(),\r\n      getStats: jest.fn(() => ({ hits: 0, misses: 0, size: 0 })),\r\n      updateCacheMetrics: jest.fn(),\r\n      setupMemoryMonitoring: jest.fn()\r\n    }))\r\n  }\r\n}));\r\n\r\n// Mock AWS SDK - 使用虚拟模块避免依赖问题\r\njest.doMock('@aws-sdk/client-s3', () => ({\r\n  S3Client: jest.fn().mockImplementation(() => ({\r\n    send: jest.fn().mockResolvedValue({ Body: Buffer.from('test content') })\r\n  })),\r\n  PutObjectCommand: jest.fn(),\r\n  GetObjectCommand: jest.fn(),\r\n  DeleteObjectCommand: jest.fn(),\r\n  HeadObjectCommand: jest.fn(),\r\n  ListObjectsV2Command: jest.fn()\r\n}), { virtual: true });\r\n\r\n// Mock Aliyun OSS - 使用虚拟模块避免依赖问题\r\njest.doMock('ali-oss', () => {\r\n  return jest.fn().mockImplementation(() => ({\r\n    put: jest.fn().mockResolvedValue({ name: 'test.txt' }),\r\n    get: jest.fn().mockResolvedValue({ content: Buffer.from('test content') }),\r\n    delete: jest.fn().mockResolvedValue({}),\r\n    head: jest.fn().mockResolvedValue({ status: 200 }),\r\n    list: jest.fn().mockResolvedValue({ objects: [] }),\r\n    signatureUrl: jest.fn().mockReturnValue('https://example.com/signed-url')\r\n  }));\r\n}, { virtual: true });\r\n\r\ndescribe('CloudStorageAdapter', () => {\r\n  let adapter: CloudStorageAdapter;\r\n\r\n  beforeEach(() => {\r\n    // 确保测试环境变量正确设置\r\n    process.env.NODE_ENV = 'test';\r\n    adapter = CloudStorageAdapter.getInstance();\r\n    \r\n    // 配置默认的存储客户端以避免 'No storage client available' 错误\r\n    adapter.configure([\r\n      {\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket-aws',\r\n          accessKeyId: 'test-aws-key',\r\n          secretAccessKey: 'test-aws-secret',\r\n        },\r\n      },\r\n      {\r\n        provider: CloudProvider.ALIYUN_OSS,\r\n        config: {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          region: 'oss-cn-hangzhou',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n          endpoint: 'oss-cn-hangzhou.aliyuncs.com',\r\n        },\r\n      }\r\n    ]);\r\n    \r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('单例模式', () => {\r\n    it('应该返回同一个实例', () => {\r\n      const instance1 = CloudStorageAdapter.getInstance();\r\n      const instance2 = CloudStorageAdapter.getInstance();\r\n      \r\n      expect(instance1).toBe(instance2);\r\n    });\r\n  });\r\n\r\n  describe('配置管理', () => {\r\n    it('应该正确配置AWS S3', () => {\r\n      const config = {\r\n        provider: CloudProvider.AWS_S3,\r\n        region: 'us-east-1',\r\n        bucket: 'test-bucket',\r\n        accessKeyId: 'test-key',\r\n        secretAccessKey: 'test-secret',\r\n        enableCDN: true,\r\n        cdnDomain: 'cdn.example.com',\r\n      };\r\n\r\n      expect(() => {\r\n        adapter.configure([{ provider: CloudProvider.AWS_S3, config }]);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该正确配置阿里云OSS', () => {\r\n      const config = {\r\n        provider: CloudProvider.ALIYUN_OSS,\r\n        region: 'oss-cn-hangzhou',\r\n        bucket: 'test-bucket',\r\n        accessKeyId: 'test-key',\r\n        secretAccessKey: 'test-secret',\r\n        endpoint: 'oss-cn-hangzhou.aliyuncs.com',\r\n      };\r\n\r\n      expect(() => {\r\n        adapter.configure([{ provider: CloudProvider.ALIYUN_OSS, config }]);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该拒绝不支持的提供商', () => {\r\n      const config = {\r\n        provider: 'unsupported' as CloudProvider,\r\n        region: 'test',\r\n        bucket: 'test',\r\n        accessKeyId: 'test',\r\n        secretAccessKey: 'test',\r\n      };\r\n\r\n      expect(() => {\r\n        adapter.configure([{ provider: 'unsupported' as CloudProvider, config }]);\r\n      }).toThrow('Unsupported storage provider');\r\n    });\r\n\r\n    it('应该设置主要和备用提供商', () => {\r\n      const configs = [\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'primary-bucket',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'fallback-bucket',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ];\r\n\r\n      expect(() => {\r\n        adapter.configure(configs);\r\n      }).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('文件上传', () => {\r\n    beforeEach(() => {\r\n      // 配置测试提供商\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该成功上传文件', async () => {\r\n      const buffer = Buffer.from('test file content');\r\n      const options = {\r\n        key: 'test-file.txt',\r\n        contentType: 'text/plain',\r\n        metadata: { purpose: 'test' },\r\n      };\r\n\r\n      const result = await uploadFile(buffer, options);\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.key).toBe(options.key);\r\n      expect(result.size).toBe(buffer.length);\r\n      expect(result.url).toContain('test-bucket');\r\n      expect(result.etag).toBeDefined();\r\n    });\r\n\r\n    it('应该处理上传选项', async () => {\r\n      const buffer = Buffer.from('test content');\r\n      const options = {\r\n        key: 'test-file.txt',\r\n        contentType: 'text/plain',\r\n        acl: 'public-read' as const,\r\n        cacheControl: 'max-age=3600',\r\n        serverSideEncryption: true,\r\n        tags: { environment: 'test' },\r\n      };\r\n\r\n      const result = await uploadFile(buffer, options);\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.contentType).toBe(options.contentType);\r\n    });\r\n\r\n    it('应该在主提供商失败时使用备用提供商', async () => {\r\n      // 配置多个提供商\r\n      adapter.configure([\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'primary-bucket',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'fallback-bucket',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ]);\r\n\r\n      const buffer = Buffer.from('test content');\r\n      const options = { key: 'test-file.txt' };\r\n\r\n      // 即使主提供商可能失败，也应该成功（通过备用提供商）\r\n      const result = await uploadFile(buffer, options);\r\n      expect(result).toBeDefined();\r\n    });\r\n\r\n    it('应该缓存上传结果', async () => {\r\n      const buffer = Buffer.from('test content');\r\n      const options = { key: 'cached-file.txt' };\r\n\r\n      await uploadFile(buffer, options);\r\n\r\n      // 验证缓存调用\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      expect(enhancedCacheManager.set).toHaveBeenCalledWith(\r\n        `file:${options.key}`,\r\n        expect.any(Object),\r\n        { ttl: 3600000, tags: ['file-upload'] }\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('文件下载', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该成功下载文件', async () => {\r\n      const options = { key: 'test-file.txt' };\r\n      const mockClient = adapter.getClient(CloudProvider.AWS_S3);\r\n      \r\n      const buffer = await downloadFile(options);\r\n      \r\n      expect(buffer).toBeInstanceOf(Buffer);\r\n      expect(buffer.length).toBeGreaterThan(0);\r\n      \r\n      // 验证mock客户端download方法被调用\r\n      expect(mockClient.download).toHaveBeenCalledWith(options);\r\n    });\r\n\r\n    it('应该支持下载选项', async () => {\r\n      const options = {\r\n        key: 'test-file.txt',\r\n        versionId: 'v123',\r\n        range: 'bytes=0-1023',\r\n        responseContentType: 'application/octet-stream',\r\n      };\r\n\r\n      const buffer = await downloadFile(options);\r\n      expect(buffer).toBeInstanceOf(Buffer);\r\n    });\r\n\r\n    it('应该从缓存返回文件', async () => {\r\n      const cachedBuffer = Buffer.from('cached content');\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      enhancedCacheManager.get.mockResolvedValue(cachedBuffer);\r\n\r\n      const options = { key: 'cached-file.txt' };\r\n      const buffer = await downloadFile(options);\r\n\r\n      expect(buffer).toBe(cachedBuffer);\r\n      expect(enhancedCacheManager.get).toHaveBeenCalledWith('file:download:cached-file.txt');\r\n    });\r\n\r\n    it('应该缓存小文件下载结果', async () => {\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      enhancedCacheManager.get.mockResolvedValue(null); // 缓存未命中\r\n\r\n      const options = { key: 'small-file.txt' };\r\n      await downloadFile(options);\r\n\r\n      // 验证缓存设置（对于小文件）\r\n      expect(enhancedCacheManager.set).toHaveBeenCalledWith(\r\n        `file:download:${options.key}`,\r\n        expect.any(Buffer),\r\n        { ttl: 300000, tags: ['file-download'] }\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('文件删除', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该成功删除文件', async () => {\r\n      const key = 'test-file.txt';\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      \r\n      await expect(deleteFile(key)).resolves.not.toThrow();\r\n      \r\n      // 验证mock客户端delete方法被调用\r\n      const mockClient = adapter.getClient(CloudProvider.AWS_S3);\r\n      expect(mockClient.delete).toHaveBeenCalledWith(key);\r\n      \r\n      // 验证缓存被清除\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:${key}`);\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:download:${key}`);\r\n    });\r\n\r\n    it('应该清除相关缓存', async () => {\r\n      const key = 'test-file.txt';\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n\r\n      await deleteFile(key);\r\n\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:${key}`);\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:download:${key}`);\r\n    });\r\n\r\n    it('应该在所有提供商上删除文件', async () => {\r\n      // 配置多个提供商\r\n      adapter.configure([\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'bucket1',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'bucket2',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ]);\r\n\r\n      const key = 'test-file.txt';\r\n      await expect(deleteFile(key)).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('文件存在检查', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该检查文件是否存在', async () => {\r\n      const key = 'test-file.txt';\r\n\r\n      const exists = await fileExists(key);\r\n\r\n      expect(typeof exists).toBe('boolean');\r\n    });\r\n\r\n    it('应该处理检查错误', async () => {\r\n      const key = 'error-file.txt';\r\n\r\n      // 即使出错也应该返回false而不是抛出异常\r\n      const exists = await fileExists(key);\r\n      expect(typeof exists).toBe('boolean');\r\n    });\r\n  });\r\n\r\n  describe('文件信息获取', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该获取文件信息', async () => {\r\n      const key = 'test-file.txt';\r\n\r\n      const info = await getFileInfo(key);\r\n\r\n      expect(info).toBeDefined();\r\n      expect(info.key).toBe(key);\r\n      expect(info.size).toBeGreaterThan(0);\r\n      expect(info.lastModified).toBeInstanceOf(Date);\r\n      expect(info.etag).toBeDefined();\r\n      expect(info.url).toContain('test-bucket');\r\n    });\r\n\r\n    it('应该包含CDN URL（如果启用）', async () => {\r\n      // 重新配置启用CDN\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n          enableCDN: true,\r\n          cdnDomain: 'cdn.example.com',\r\n        },\r\n      }]);\r\n\r\n      const key = 'test-file.txt';\r\n      const info = await getFileInfo(key);\r\n\r\n      expect(info.cdnUrl).toContain('cdn.example.com');\r\n    });\r\n  });\r\n\r\n  describe('文件列表', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该列出文件', async () => {\r\n      const files = await listFiles();\r\n\r\n      expect(Array.isArray(files)).toBe(true);\r\n      expect(files.length).toBeGreaterThan(0);\r\n      \r\n      files.forEach(file => {\r\n        expect(file.key).toBeDefined();\r\n        expect(file.size).toBeGreaterThan(0);\r\n        expect(file.lastModified).toBeInstanceOf(Date);\r\n        expect(file.etag).toBeDefined();\r\n      });\r\n    });\r\n\r\n    it('应该支持前缀过滤', async () => {\r\n      const prefix = 'images/';\r\n      const files = await listFiles(prefix);\r\n\r\n      expect(Array.isArray(files)).toBe(true);\r\n      files.forEach(file => {\r\n        expect(file.key).toContain(prefix);\r\n      });\r\n    });\r\n\r\n    it('应该支持最大数量限制', async () => {\r\n      const maxKeys = 10;\r\n      const files = await listFiles(undefined, maxKeys);\r\n\r\n      expect(Array.isArray(files)).toBe(true);\r\n      expect(files.length).toBeLessThanOrEqual(maxKeys);\r\n    });\r\n  });\r\n\r\n  describe('签名URL生成', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该生成GET签名URL', async () => {\r\n      const key = 'test-file.txt';\r\n      const url = await getSignedUrl(key, 'get');\r\n\r\n      expect(url).toBeDefined();\r\n      expect(url).toContain('test-bucket');\r\n      expect(url).toContain(key);\r\n      expect(url).toContain('X-Amz-Signature');\r\n    });\r\n\r\n    it('应该生成PUT签名URL', async () => {\r\n      const key = 'test-file.txt';\r\n      const url = await getSignedUrl(key, 'put');\r\n\r\n      expect(url).toBeDefined();\r\n      expect(url).toContain('test-bucket');\r\n      expect(url).toContain(key);\r\n    });\r\n\r\n    it('应该支持自定义过期时间', async () => {\r\n      const key = 'test-file.txt';\r\n      const expiresIn = 7200; // 2小时\r\n      const url = await getSignedUrl(key, 'get', expiresIn);\r\n\r\n      expect(url).toBeDefined();\r\n      expect(url).toContain(`X-Amz-Expires=${expiresIn}`);\r\n    });\r\n  });\r\n\r\n  describe('存储统计', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该获取存储统计', async () => {\r\n      const stats = await adapter.getStats();\r\n\r\n      expect(stats).toBeDefined();\r\n      expect(typeof stats.totalFiles).toBe('number');\r\n      expect(typeof stats.totalSize).toBe('number');\r\n      expect(typeof stats.usedQuota).toBe('number');\r\n      expect(typeof stats.availableQuota).toBe('number');\r\n      expect(stats.bandwidth).toBeDefined();\r\n      expect(typeof stats.bandwidth.upload).toBe('number');\r\n      expect(typeof stats.bandwidth.download).toBe('number');\r\n    });\r\n  });\r\n\r\n  describe('健康状态检查', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'bucket1',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'bucket2',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ]);\r\n    });\r\n\r\n    it('应该检查所有提供商的健康状态', async () => {\r\n      const status = await adapter.getHealthStatus();\r\n\r\n      expect(status).toBeDefined();\r\n      expect(status[CloudProvider.AWS_S3]).toBeDefined();\r\n      expect(status[CloudProvider.ALIYUN_OSS]).toBeDefined();\r\n\r\n      Object.values(status).forEach(providerStatus => {\r\n        expect(typeof providerStatus.healthy).toBe('boolean');\r\n        expect(typeof providerStatus.latency).toBe('number');\r\n        expect(providerStatus.latency).toBeGreaterThanOrEqual(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('熔断器机制', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该在多次失败后触发熔断器', async () => {\r\n      // 这个测试需要模拟失败情况\r\n      // 由于我们使用的是模拟实现，这里主要测试熔断器逻辑存在\r\n      expect(adapter).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理没有配置客户端的情况', async () => {\r\n      // 创建一个新的适配器实例，不使用单例以避免共享配置\r\n      const emptyAdapter = new (CloudStorageAdapter as any)();\r\n      \r\n      await expect(emptyAdapter.exists('test')).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.getFileInfo('test')).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.listFiles()).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.getSignedUrl('test', 'get')).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.getStats()).rejects.toThrow('No storage client available');\r\n    });\r\n\r\n    it('应该处理网络错误', async () => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n\r\n      // 测试各种操作的错误处理\r\n      // 由于使用模拟实现，这些操作通常会成功\r\n      // 在实际实现中，可以通过模拟网络错误来测试\r\n      expect(adapter).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('环境变量配置', () => {\r\n    const originalEnv = process.env;\r\n\r\n    beforeEach(() => {\r\n      jest.resetModules();\r\n      process.env = { ...originalEnv };\r\n    });\r\n\r\n    afterEach(() => {\r\n      process.env = originalEnv;\r\n    });\r\n\r\n    it('应该从环境变量读取AWS配置', () => {\r\n      process.env.AWS_ACCESS_KEY_ID = 'test-aws-key';\r\n      process.env.AWS_SECRET_ACCESS_KEY = 'test-aws-secret';\r\n      process.env.AWS_REGION = 'us-west-2';\r\n      process.env.AWS_S3_BUCKET = 'test-aws-bucket';\r\n\r\n      // 重新创建实例以读取环境变量\r\n      const newAdapter = CloudStorageAdapter.getInstance();\r\n      expect(newAdapter).toBeDefined();\r\n    });\r\n\r\n    it('应该从环境变量读取阿里云配置', () => {\r\n      process.env.ALIYUN_ACCESS_KEY_ID = 'test-aliyun-key';\r\n      process.env.ALIYUN_ACCESS_KEY_SECRET = 'test-aliyun-secret';\r\n      process.env.ALIYUN_OSS_REGION = 'oss-cn-beijing';\r\n      process.env.ALIYUN_OSS_BUCKET = 'test-aliyun-bucket';\r\n\r\n      const newAdapter = CloudStorageAdapter.getInstance();\r\n      expect(newAdapter).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('性能测试', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该在合理时间内完成文件操作', async () => {\r\n      const buffer = Buffer.from('test content');\r\n      const options = { key: 'performance-test.txt' };\r\n\r\n      const startTime = Date.now();\r\n      \r\n      await uploadFile(buffer, options);\r\n      await downloadFile(options);\r\n      await fileExists(options.key);\r\n      await getFileInfo(options.key);\r\n      \r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 所有操作应该在5秒内完成\r\n      expect(duration).toBeLessThan(5000);\r\n    });\r\n\r\n    it('应该高效处理批量操作', async () => {\r\n      const startTime = Date.now();\r\n      \r\n      const promises = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(fileExists(`batch-test-${i}.txt`));\r\n      }\r\n      \r\n      await Promise.all(promises);\r\n      \r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 10个并发检查应该在3秒内完成\r\n      expect(duration).toBeLessThan(3000);\r\n    });\r\n  });\r\n\r\n  describe('并发安全', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该安全处理并发上传', async () => {\r\n      const promises = [];\r\n      \r\n      for (let i = 0; i < 20; i++) {\r\n        const buffer = Buffer.from(`concurrent content ${i}`);\r\n        const options = { key: `concurrent-${i}.txt` };\r\n        promises.push(uploadFile(buffer, options));\r\n      }\r\n      \r\n      const results = await Promise.all(promises);\r\n      \r\n      expect(results).toHaveLength(20);\r\n      results.forEach((result, index) => {\r\n        expect(result.key).toBe(`concurrent-${index}.txt`);\r\n      });\r\n    });\r\n\r\n    it('应该安全处理并发下载', async () => {\r\n      const promises = [];\r\n      \r\n      for (let i = 0; i < 15; i++) {\r\n        promises.push(downloadFile({ key: `concurrent-download-${i}.txt` }));\r\n      }\r\n      \r\n      const results = await Promise.all(promises);\r\n      \r\n      expect(results).toHaveLength(15);\r\n      results.forEach(buffer => {\r\n        expect(buffer).toBeInstanceOf(Buffer);\r\n      });\r\n    });\r\n  });\r\n});"],"version":3}