{"version":3,"names":["cov_v5tyq9woc","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","withValidation","withSecurity","combineMiddleware","server_1","require","zod_1","ValidationError","Error","constructor","message","issues","statusCode","config","middleware","handler","validatedHandler","request","context","validatedRequest","validateBody","body","safeParseJSON","bodyResult","validateWithSchema","success","handleValidationError","error","validatedBody","data","validateQuery","query","Object","fromEntries","URL","url","searchParams","entries","queryResult","validatedQuery","validateHeaders","headers","headersResult","validatedHeaders","validateParams","params","paramsResult","validatedParams","debug","console","NextResponse","json","status","schema","validData","parse","z","ZodError","map","issue","code","onValidationError","timestamp","Date","toISOString","text","trim","JSON","validateRequest","cadFileUpload","object","string","regex","size","number","max","options","precision","enum","default","enableAI","boolean","optional","chatMessage","content","min","role","metadata","record","unknown","userAuth","email","password","agentConfig","id","description","capabilities","array","enabled","priority","securityMiddleware","securedHandler","allowedOrigins","origin","get","includes","maxRequestSize","contentLength","parseInt","enableCSRF","csrfToken","middlewares","combinedMiddleware","reduceRight","acc","exampleUsage","basicValidation","fullProtection","enableRateLimit","process","env","NODE_ENV"],"sources":["E:\\zk-agent\\lib\\validation\\middleware.ts"],"sourcesContent":["/* eslint-disable */\n// @ts-nocheck\n/**\r\n * @file lib/validation/middleware.ts\r\n * @description 验证中间件模块 - 为现有API路由提供zod验证增强\r\n * @author zk-agent开发团队\r\n * @lastUpdate 2024-12-19\r\n * @updateLog\r\n *   - 2024-12-19 创建验证中间件，增强现有API安全性\r\n * \r\n * 🔤 命名规范说明：\r\n * - 中间件函数：with + 功能描述（如：withValidation）\r\n * - 验证装饰器：validate + 对象（如：validateRequest）\r\n * - 错误处理：handle + 错误类型（如：handleValidationError）\r\n * \r\n * ⚠️ 本模块为现有API路由的增强，保持向后兼容性\r\n */\r\n\r\nimport { NextRequest, NextResponse } from 'next/server'\r\nimport { z } from 'zod'\r\nimport type { ValidationResult } from './schemas'\r\n\r\n// 📝 命名规范：中间件配置类型\r\nexport interface ValidationMiddlewareConfig {\r\n  // 验证选项\r\n  validateBody?: z.ZodSchema\r\n  validateQuery?: z.ZodSchema\r\n  validateHeaders?: z.ZodSchema\r\n  validateParams?: z.ZodSchema\r\n  \r\n  // 错误处理选项\r\n  onValidationError?: (error: ValidationError) => NextResponse\r\n  \r\n  // 安全选项\r\n  sanitizeInput?: boolean\r\n  enableCSRF?: boolean\r\n  enableRateLimit?: boolean\r\n  \r\n  // 调试选项\r\n  debug?: boolean\r\n}\r\n\r\n// 📝 命名规范：验证错误类型\r\nexport class ValidationError extends Error {\r\n  constructor(\r\n    message: string,\r\n    public readonly issues: Array<{\r\n      path: (string | number)[]\r\n      message: string\r\n      code: string\r\n    }>,\r\n    public readonly statusCode: number = 400\r\n  ) {\r\n    super(message)\r\n    this.name = 'ValidationError'\r\n  }\r\n}\r\n\r\n// 📝 命名规范：验证结果扩展类型\r\nexport interface ValidatedRequest extends NextRequest {\r\n  validatedBody?: any\r\n  validatedQuery?: any\r\n  validatedHeaders?: any\r\n  validatedParams?: any\r\n}\r\n\r\n// 📝 命名规范：API处理函数类型\r\nexport type APIHandler = (\r\n  request: ValidatedRequest,\r\n  context?: { params?: any }\r\n) => Promise<NextResponse> | NextResponse\r\n\r\n// 📝 命名规范：主要验证中间件函数\r\nexport function withValidation(\r\n  config: ValidationMiddlewareConfig\r\n) {\r\n  return function middleware(handler: APIHandler) {\r\n    return async function validatedHandler(\r\n      request: NextRequest,\r\n      context?: { params?: any }\r\n    ): Promise<NextResponse> {\r\n      try {\r\n        const validatedRequest: any = request as ValidatedRequest\r\n        \r\n        // 验证请求体\r\n        if (config.validateBody) {\r\n          const body: any = await safeParseJSON(request)\r\n          const bodyResult: any = validateWithSchema(config.validateBody, body, 'request body')\r\n          \r\n          if (!bodyResult.success) {\r\n            return handleValidationError(bodyResult.error, config)\r\n          }\r\n          \r\n          validatedRequest.validatedBody = bodyResult.data\r\n        }\r\n        \r\n        // 验证查询参数\r\n        if (config.validateQuery) {\r\n          const query: any = Object.fromEntries(new URL(request.url).searchParams.entries())\r\n          const queryResult: any = validateWithSchema(config.validateQuery, query, 'query parameters')\r\n          \r\n          if (!queryResult.success) {\r\n            return handleValidationError(queryResult.error, config)\r\n          }\r\n          \r\n          validatedRequest.validatedQuery = queryResult.data\r\n        }\r\n        \r\n        // 验证请求头\r\n        if (config.validateHeaders) {\r\n          const headers: any = Object.fromEntries(request.headers.entries())\r\n          const headersResult: any = validateWithSchema(config.validateHeaders, headers, 'headers')\r\n          \r\n          if (!headersResult.success) {\r\n            return handleValidationError(headersResult.error, config)\r\n          }\r\n          \r\n          validatedRequest.validatedHeaders = headersResult.data\r\n        }\r\n        \r\n        // 验证路径参数\r\n        if (config.validateParams && context?.params) {\r\n          const paramsResult: any = validateWithSchema(config.validateParams, context.params, 'path parameters')\r\n          \r\n          if (!paramsResult.success) {\r\n            return handleValidationError(paramsResult.error, config)\r\n          }\r\n          \r\n          validatedRequest.validatedParams = paramsResult.data\r\n        }\r\n        \r\n        // 调用原始处理函数\r\n        return await handler(validatedRequest, context)\r\n        \r\n      } catch (error) {\r\n        if (config.debug) {\r\n          console.error('[ValidationMiddleware] 验证中间件错误:', error)\r\n        }\r\n        \r\n        if (error instanceof ValidationError) {\r\n          return handleValidationError(error, config)\r\n        }\r\n        \r\n        // 处理其他错误\r\n        return NextResponse.json(\r\n          { \r\n            error: '服务器内部错误',\r\n            message: error instanceof Error ? error.message : '未知错误'\r\n          },\r\n          { status: 500 }\r\n        )\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 📝 命名规范：验证工具函数\r\nfunction validateWithSchema<T extends z.ZodSchema>(\r\n  schema: T,\r\n  data: unknown,\r\n  context: string\r\n): ValidationResult<z.infer<T>> {\r\n  try {\r\n    const validData: any = schema.parse(data)\r\n    return { success: true, data: validData }\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n              return {\r\n          success: false,\r\n          error: new ValidationError(\r\n            `${context} validation failed`,\r\n            error.issues.map(issue => ({\r\n              path: issue.path,\r\n              message: issue.message,\r\n              code: issue.code,\r\n            })),\r\n            400\r\n          )\r\n        }\r\n    }\r\n    \r\n          return {\r\n        success: false,\r\n        error: new ValidationError(\r\n          `${context} validation error`,\r\n          [{ path: [], message: 'Unknown validation error', code: 'unknown' }],\r\n          400\r\n        )\r\n      }\r\n  }\r\n}\r\n\r\n// 📝 命名规范：错误处理函数\r\nfunction handleValidationError(\r\n  error: ValidationError,\r\n  config: ValidationMiddlewareConfig\r\n): NextResponse {\r\n  // 如果有自定义错误处理器，使用它\r\n  if (config.onValidationError) {\r\n    return config.onValidationError(error)\r\n  }\r\n  \r\n  // 默认错误响应\r\n  return NextResponse.json(\r\n    {\r\n      error: error.message,\r\n      issues: error.issues,\r\n      timestamp: new Date().toISOString(),\r\n    },\r\n    { status: error.statusCode }\r\n  )\r\n}\r\n\r\n// 📝 命名规范：安全JSON解析函数\r\nasync function safeParseJSON(request: NextRequest): Promise<unknown> {\r\n  try {\r\n    const text: any = await request.text()\r\n    if (!text.trim()) {\r\n      return {}\r\n    }\r\n    return JSON.parse(text)\r\n  } catch (error) {\r\n    throw new ValidationError(\r\n      'Invalid JSON in request body',\r\n      [{ path: ['body'], message: 'Request body must be valid JSON', code: 'invalid_json' }]\r\n    )\r\n  }\r\n}\r\n\r\n// 📝 命名规范：便捷验证装饰器\r\nexport const validateRequest: any = {\r\n  // CAD文件上传验证\r\n  cadFileUpload: (config?: Partial<ValidationMiddlewareConfig>) => {\r\n    return withValidation({\r\n      validateBody: z.object({\r\n        file: z.object({\r\n          name: z.string().regex(/\\.(dwg|dxf|step|stp|iges|igs|stl|obj|gltf|glb)$/i),\r\n          size: z.number().max(100 * 1024 * 1024),\r\n          type: z.string(),\r\n        }),\r\n        options: z.object({\r\n          precision: z.enum(['low', 'standard', 'high', 'ultra']).default('standard'),\r\n          enableAI: z.boolean().default(true),\r\n        }).optional(),\r\n      }),\r\n      ...config,\r\n    })\r\n  },\r\n  \r\n  // 聊天消息验证\r\n  chatMessage: (config?: Partial<ValidationMiddlewareConfig>) => {\r\n    return withValidation({\r\n      validateBody: z.object({\r\n        content: z.string().min(1).max(4000),\r\n        type: z.enum(['text', 'file', 'image', 'system']).default('text'),\r\n        role: z.enum(['user', 'assistant', 'system', 'tool']).default('user'),\r\n        metadata: z.record(z.unknown()).optional(),\r\n      }),\r\n      ...config,\r\n    })\r\n  },\r\n  \r\n  // 用户认证验证\r\n  userAuth: (config?: Partial<ValidationMiddlewareConfig>) => {\r\n    return withValidation({\r\n      validateBody: z.object({\r\n        email: z.string().email(),\r\n        password: z.string().min(8),\r\n        name: z.string().min(1).max(100).optional(),\r\n      }),\r\n      ...config,\r\n    })\r\n  },\r\n  \r\n  // 智能体配置验证\r\n  agentConfig: (config?: Partial<ValidationMiddlewareConfig>) => {\r\n    return withValidation({\r\n      validateBody: z.object({\r\n        id: z.string().regex(/^[a-zA-Z0-9_-]+$/),\r\n        name: z.string().min(1).max(50),\r\n        type: z.enum(['fastgpt', 'cad', 'poster', 'custom']),\r\n        description: z.string().max(500).optional(),\r\n        capabilities: z.array(z.string()).max(20).default([]),\r\n        config: z.record(z.unknown()).default({}),\r\n        enabled: z.boolean().default(true),\r\n        priority: z.number().min(0).max(100).default(50),\r\n      }),\r\n      ...config,\r\n    })\r\n  },\r\n}\r\n\r\n// 📝 命名规范：安全增强中间件\r\nexport function withSecurity(config: {\r\n  enableCSRF?: boolean\r\n  enableRateLimit?: boolean\r\n  enableSanitization?: boolean\r\n  allowedOrigins?: string[]\r\n  maxRequestSize?: number\r\n}) {\r\n  return function securityMiddleware(handler: APIHandler) {\r\n    return async function securedHandler(\r\n      request: NextRequest,\r\n      context?: { params?: any }\r\n    ): Promise<NextResponse> {\r\n      \r\n      // CORS检查\r\n      if (config.allowedOrigins) {\r\n        const origin: any = request.headers.get('origin')\r\n        if (origin && !config.allowedOrigins.includes(origin)) {\r\n          return NextResponse.json(\r\n            { error: 'Origin not allowed' },\r\n            { status: 403 }\r\n          )\r\n        }\r\n      }\r\n      \r\n      // 请求大小检查\r\n      if (config.maxRequestSize) {\r\n        const contentLength: any = request.headers.get('content-length')\r\n        if (contentLength && parseInt(contentLength) > config.maxRequestSize) {\r\n          return NextResponse.json(\r\n            { error: 'Request too large' },\r\n            { status: 413 }\r\n          )\r\n        }\r\n      }\r\n      \r\n      // CSRF检查\r\n      if (config.enableCSRF) {\r\n        const csrfToken: any = request.headers.get('x-csrf-token')\r\n        if (!csrfToken) {\r\n          return NextResponse.json(\r\n            { error: 'CSRF token required' },\r\n            { status: 403 }\r\n          )\r\n        }\r\n      }\r\n      \r\n      return await handler(request, context)\r\n    }\r\n  }\r\n}\r\n\r\n// 📝 命名规范：组合中间件工具\r\nexport function combineMiddleware(...middlewares: Array<(handler: APIHandler) => APIHandler>) {\r\n  return function combinedMiddleware(handler: APIHandler): APIHandler {\r\n    return middlewares.reduceRight(\r\n      (acc, middleware) => middleware(acc),\r\n      handler\r\n    )\r\n  }\r\n}\r\n\r\n// 📝 命名规范：使用示例导出\r\nexport const exampleUsage: any = {\r\n  // 基础验证示例\r\n  basicValidation: withValidation({\r\n    validateBody: z.object({\r\n      name: z.string().min(1),\r\n      email: z.string().email(),\r\n    }),\r\n  }),\r\n  \r\n  // 组合中间件示例\r\n  fullProtection: combineMiddleware(\r\n    withSecurity({\r\n      enableCSRF: true,\r\n      enableRateLimit: true,\r\n      allowedOrigins: ['https://yourdomain.com'],\r\n      maxRequestSize: 10 * 1024 * 1024, // 10MB\r\n    }),\r\n    validateRequest.userAuth({\r\n      debug: process.env.NODE_ENV === 'development',\r\n    })\r\n  ),\r\n}\r\n\r\n// 导出类型（避免重复导出）\r\nexport type { \r\n  ValidationMiddlewareConfig as VMConfig, \r\n  ValidatedRequest as VRequest, \r\n  APIHandler as Handler \r\n} "],"mappings":"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","ignoreList":[]}