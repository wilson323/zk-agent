{"version":3,"names":["cov_ozpzqe4h1","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","server_1","require","api_route_wrapper_1","api_helper_1","exports","POST","createApiRoute","RouteConfigs","protectedPost","req","params","validatedBody","validatedQuery","user","requestId","imageUrl","format","options","json","ApiResponseWrapper","error","mockImageData","Uint8Array","blob","Blob","NextResponse","headers"],"sources":["E:\\zk-agent\\app\\api\\poster\\export\\route.ts"],"sourcesContent":["/**\n * @file poster\\export\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    const { imageUrl, format, options } = await req.json();\n    \n    // 验证参数\n    if (!imageUrl) {\n      return ApiResponseWrapper.error('Image URL is required', 400);\n    }\n    \n    // 模拟导出过程\n    // 在实际实现中，这里会调用图像处理服务\n    const mockImageData = new Uint8Array([\n      // 模拟图像数据\n      137,\n      80,\n      78,\n      71,\n      13,\n      10,\n      26,\n      10, // PNG header\n    ]);\n    \n    const blob = new Blob([mockImageData], {\n      type:\n        format === \"png\"\n          ? \"image/png\"\n          : format === \"jpg\"\n            ? \"image/jpeg\"\n            : format === \"pdf\"\n              ? \"application/pdf\"\n              : \"image/svg+xml\",\n    });\n    \n    return new NextResponse(blob, {\n      headers: {\n        \"Content-Type\": blob.type,\n        \"Content-Disposition\": `attachment; filename=\"poster.${format}\"`,\n      },\n    });\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}