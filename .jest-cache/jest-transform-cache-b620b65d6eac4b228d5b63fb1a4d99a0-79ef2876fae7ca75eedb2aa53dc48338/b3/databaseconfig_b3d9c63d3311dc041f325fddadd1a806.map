{"version":3,"names":["databaseConfig","production","host","validateEnvVar","port","parseInt","database","username","password","dialect","logging","process","env","NODE_ENV","console","log","pool","max","DB_POOL_MAX","min","DB_POOL_MIN","acquire","DB_POOL_ACQUIRE","idle","DB_POOL_IDLE","evict","DB_POOL_EVICT","handleDisconnects","ssl","DB_SSL","rejectUnauthorized","DB_SSL_REJECT_UNAUTHORIZED","ca","DB_SSL_CA","cert","DB_SSL_CERT","key","DB_SSL_KEY","connectionString","DATABASE_URL","connectTimeout","DB_CONNECT_TIMEOUT","requestTimeout","DB_REQUEST_TIMEOUT","cancelTimeout","DB_CANCEL_TIMEOUT","healthCheck","enabled","DB_HEALTH_CHECK","interval","DB_HEALTH_CHECK_INTERVAL","timeout","DB_HEALTH_CHECK_TIMEOUT","test","development","getDatabaseConfig","config","Error","getDatabaseUrl","environment","validateDatabaseConfig","error","module","exports"],"sources":["database.config.js"],"sourcesContent":["/**\r\n * @file database.config.js\r\n * @description 数据库配置 - 支持生产和测试环境\r\n * @author ZK-Agent Team\r\n * @date 2025-05-25\r\n */\r\n\r\nconst databaseConfig = {\r\n  // 生产数据库配置 (zkagent1)\r\n  production: {\r\n    host: validateEnvVar('DB_HOST', 'localhost'),\r\n    port: parseInt(validateEnvVar('DB_PORT', '5432')),\r\n    database: validateEnvVar('DB_NAME', 'zkagent_dev'),\r\n    username: validateEnvVar('DB_USER', 'postgres'),\r\n    password: validateEnvVar('DB_PASSWORD', '123456'),\r\n    dialect: 'postgresql',\r\n    logging: process.env.NODE_ENV === 'production' ? false : console.log,\r\n    pool: {\r\n      max: parseInt(process.env.DB_POOL_MAX) || 50,\r\n      min: parseInt(process.env.DB_POOL_MIN) || 10,\r\n      acquire: parseInt(process.env.DB_POOL_ACQUIRE) || 60000,\r\n      idle: parseInt(process.env.DB_POOL_IDLE) || 20000,\r\n      evict: parseInt(process.env.DB_POOL_EVICT) || 1000,\r\n      handleDisconnects: true\r\n    },\r\n    ssl: process.env.DB_SSL === 'true' ? {\r\n      rejectUnauthorized: process.env.DB_SSL_REJECT_UNAUTHORIZED !== 'false',\r\n      ca: process.env.DB_SSL_CA,\r\n      cert: process.env.DB_SSL_CERT,\r\n      key: process.env.DB_SSL_KEY\r\n    } : false,\r\n    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:123456@localhost:5432/zkagent1',\r\n    // 连接超时和重试配置\r\n    connectTimeout: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000,\r\n    requestTimeout: parseInt(process.env.DB_REQUEST_TIMEOUT) || 15000,\r\n    cancelTimeout: parseInt(process.env.DB_CANCEL_TIMEOUT) || 5000,\r\n    // 健康检查配置\r\n    healthCheck: {\r\n      enabled: process.env.DB_HEALTH_CHECK !== 'false',\r\n      interval: parseInt(process.env.DB_HEALTH_CHECK_INTERVAL) || 30000,\r\n      timeout: parseInt(process.env.DB_HEALTH_CHECK_TIMEOUT) || 5000\r\n    }\r\n  },\r\n\r\n  // 测试数据库配置 (zkagent2)\r\n  test: {\r\n    host: 'localhost',\r\n    port: 5432,\r\n    database: 'zkagent2',\r\n    username: 'postgres',\r\n    password: '123456',\r\n    dialect: 'postgresql',\r\n    logging: false,\r\n    pool: {\r\n      max: 10,\r\n      min: 2,\r\n      acquire: 30000,\r\n      idle: 10000\r\n    },\r\n    ssl: false,\r\n    connectionString: 'postgresql://postgres:123456@localhost:5432/zkagent2'\r\n  },\r\n\r\n  // 开发环境配置\r\n  development: {\r\n    host: 'localhost',\r\n    port: 5432,\r\n    database: 'zkagent_dev',\r\n    username: 'postgres',\r\n    password: '123456',\r\n    dialect: 'postgresql',\r\n    logging: console.log,\r\n    pool: {\r\n      max: 5,\r\n      min: 1,\r\n      acquire: 30000,\r\n      idle: 10000\r\n    },\r\n    ssl: false,\r\n    connectionString: 'postgresql://postgres:123456@localhost:5432/zkagent_dev'\r\n  }\r\n};\r\n\r\n/**\r\n * 获取当前环境的数据库配置\r\n * @returns {Object} 数据库配置对象\r\n */\r\nfunction getDatabaseConfig() {\r\n  const env = process.env.NODE_ENV || 'development';\r\n  const config = databaseConfig[env];\r\n  \r\n  if (!config) {\r\n    throw new Error(`未找到环境 ${env} 的数据库配置`);\r\n  }\r\n  \r\n  return config;\r\n}\r\n\r\n/**\r\n * 获取数据库连接字符串\r\n * @param {string} environment - 环境名称 (production, test, development)\r\n * @returns {string} 数据库连接字符串\r\n */\r\nfunction getDatabaseUrl(environment = null) {\r\n  const env = environment || process.env.NODE_ENV || 'development';\r\n  const config = databaseConfig[env];\r\n  \r\n  if (!config) {\r\n    throw new Error(`未找到环境 ${env} 的数据库配置`);\r\n  }\r\n  \r\n  return config.connectionString;\r\n}\r\n\r\n/**\r\n * 验证数据库连接配置\r\n * @param {string} environment - 环境名称\r\n * @returns {boolean} 配置是否有效\r\n */\r\nfunction validateDatabaseConfig(environment) {\r\n  try {\r\n    const config = databaseConfig[environment];\r\n    return !!(config && config.host && config.port && config.database && config.username);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  databaseConfig,\r\n  getDatabaseConfig,\r\n  getDatabaseUrl,\r\n  validateDatabaseConfig\r\n};"],"mappings":"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","ignoreList":[]}