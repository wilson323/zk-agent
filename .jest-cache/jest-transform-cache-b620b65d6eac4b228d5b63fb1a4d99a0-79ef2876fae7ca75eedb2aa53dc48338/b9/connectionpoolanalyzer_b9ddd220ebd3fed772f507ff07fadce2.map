{"file":"E:\\zk-agent\\lib\\database\\connection-pool-analyzer.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\connection-pool-analyzer.ts"],"sourcesContent":["/**\r\n * 连接池使用模式分析器\r\n * 用于分析数据库连接池的实际使用情况，为优化提供数据支持\r\n * \r\n * 功能:\r\n * - 实时监控连接池使用情况\r\n * - 分析连接使用模式和趋势\r\n * - 识别性能瓶颈和优化机会\r\n * - 生成优化建议报告\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { DatabaseMetrics } from './monitoring'\r\nimport { databaseMonitor } from './monitoring'\r\nimport { Logger } from '@/lib/utils/logger'\r\n\r\n/**\r\n * 连接池使用统计接口\r\n */\r\ninterface PoolUsageStats {\r\n  /** 时间戳 */\r\n  timestamp: Date\r\n  /** 活跃连接数 */\r\n  activeConnections: number\r\n  /** 空闲连接数 */\r\n  idleConnections: number\r\n  /** 总连接数 */\r\n  totalConnections: number\r\n  /** 等待连接的请求数 */\r\n  waitingRequests: number\r\n  /** 连接获取平均时间(ms) */\r\n  avgAcquireTime: number\r\n  /** 连接使用率(%) */\r\n  utilizationRate: number\r\n  /** 峰值连接数 */\r\n  peakConnections: number\r\n  /** 连接创建次数 */\r\n  connectionCreations: number\r\n  /** 连接销毁次数 */\r\n  connectionDestructions: number\r\n}\r\n\r\n/**\r\n * 使用模式分析结果接口\r\n */\r\ninterface UsagePatternAnalysis {\r\n  /** 分析时间段 */\r\n  timeRange: {\r\n    start: Date\r\n    end: Date\r\n  }\r\n  /** 平均使用率 */\r\n  avgUtilization: number\r\n  /** 峰值使用率 */\r\n  peakUtilization: number\r\n  /** 低谷使用率 */\r\n  minUtilization: number\r\n  /** 使用率标准差 */\r\n  utilizationStdDev: number\r\n  /** 连接获取延迟统计 */\r\n  acquireTimeStats: {\r\n    avg: number\r\n    min: number\r\n    max: number\r\n    p95: number\r\n    p99: number\r\n  }\r\n  /** 使用模式类型 */\r\n  patternType: 'stable' | 'bursty' | 'growing' | 'declining' | 'irregular'\r\n  /** 建议的连接池配置 */\r\n  recommendedConfig: {\r\n    minConnections: number\r\n    maxConnections: number\r\n    acquireTimeout: number\r\n    idleTimeout: number\r\n  }\r\n}\r\n\r\n/**\r\n * 优化建议接口\r\n */\r\ninterface OptimizationRecommendation {\r\n  /** 建议类型 */\r\n  type: 'increase_pool' | 'decrease_pool' | 'adjust_timeout' | 'optimize_queries' | 'no_action'\r\n  /** 建议描述 */\r\n  description: string\r\n  /** 预期效果 */\r\n  expectedImpact: string\r\n  /** 优先级 */\r\n  priority: 'high' | 'medium' | 'low'\r\n  /** 具体配置建议 */\r\n  configChanges?: Partial<PoolUsageStats>\r\n}\r\n\r\n/**\r\n * 连接池使用模式分析器类\r\n */\r\nexport class ConnectionPoolAnalyzer extends EventEmitter {\r\n  private usageHistory: PoolUsageStats[] = []\r\n  private isAnalyzing: boolean = false\r\n  private analysisInterval: NodeJS.Timeout | null = null\r\n  private maxHistorySize: number\r\n  private analysisIntervalMs: number\r\n  private logger = new Logger('ConnectionPoolAnalyzer')\r\n\r\n  constructor(\r\n    maxHistorySize: number = 1000,\r\n    analysisIntervalMs: number = 30000 // 30秒分析一次\r\n  ) {\r\n    super()\r\n    this.maxHistorySize = maxHistorySize\r\n    this.analysisIntervalMs = analysisIntervalMs\r\n\r\n    // 监听数据库监控事件\r\n    this.setupMonitoringListeners()\r\n  }\r\n\r\n  /**\r\n   * 设置监控事件监听器\r\n   */\r\n  private setupMonitoringListeners(): void {\r\n    databaseMonitor.on('metrics', (metrics: DatabaseMetrics) => {\r\n      this.recordUsageStats(metrics)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 记录连接池使用统计\r\n   * \r\n   * @param metrics - 数据库监控指标\r\n   */\r\n  /**\r\n   * 记录连接池使用统计\r\n   * \r\n   * @param metrics - 数据库监控指标\r\n   */\r\n  private recordUsageStats(metrics: DatabaseMetrics): void {\r\n    // 安全地获取连接池指标，提供默认值\r\n    const activeConnections = metrics.activeConnections ?? 0\r\n    const idleConnections = metrics.idleConnections ?? 0\r\n    const waitingRequests = metrics.waitingRequests ?? 0\r\n    const connectionCreations = metrics.connectionCreations ?? 0\r\n    const connectionDestructions = metrics.connectionDestructions ?? 0\r\n    \r\n    const stats: PoolUsageStats = {\r\n      timestamp: new Date(),\r\n      activeConnections,\r\n      idleConnections,\r\n      totalConnections: activeConnections + idleConnections,\r\n      waitingRequests,\r\n      avgAcquireTime: metrics.avgLatency || 0,\r\n      utilizationRate: this.calculateUtilizationRate(metrics),\r\n      peakConnections: this.calculatePeakConnections(),\r\n      connectionCreations,\r\n      connectionDestructions\r\n    }\r\n\r\n    this.usageHistory.push(stats)\r\n\r\n    // 限制历史记录大小\r\n    if (this.usageHistory.length > this.maxHistorySize) {\r\n      this.usageHistory.shift()\r\n    }\r\n\r\n    this.emit('usage-stats', stats)\r\n  }\r\n\r\n  /**\r\n   * 计算连接池使用率\r\n   * \r\n   * @param metrics - 数据库监控指标\r\n   * @returns 使用率百分比\r\n   */\r\n  /**\r\n   * 计算连接池使用率\r\n   * \r\n   * @param metrics - 数据库监控指标\r\n   * @returns 使用率百分比\r\n   */\r\n  private calculateUtilizationRate(metrics: DatabaseMetrics): number {\r\n    const active = metrics.activeConnections ?? 0\r\n    const idle = metrics.idleConnections ?? 0\r\n    const total = active + idle\r\n    \r\n    if (total === 0) return 0\r\n    return (active / total) * 100\r\n  }\r\n\r\n  /**\r\n   * 计算峰值连接数\r\n   * \r\n   * @returns 峰值连接数\r\n   */\r\n  private calculatePeakConnections(): number {\r\n    if (this.usageHistory.length === 0) return 0\r\n    \r\n    return Math.max(...this.usageHistory.map(stats => stats.totalConnections))\r\n  }\r\n\r\n  /**\r\n   * 开始分析\r\n   */\r\n  startAnalysis(): void {\r\n    if (this.isAnalyzing) {\r\n      console.log('Connection pool analysis is already running')\r\n      return\r\n    }\r\n\r\n    console.log(`Starting connection pool usage analysis (interval: ${this.analysisIntervalMs}ms)`)\r\n    this.isAnalyzing = true\r\n\r\n    this.analysisInterval = setInterval(() => {\r\n      this.performAnalysis()\r\n    }, this.analysisIntervalMs)\r\n\r\n    // 立即执行一次分析\r\n    this.performAnalysis()\r\n  }\r\n\r\n  /**\r\n   * 停止分析\r\n   */\r\n  stopAnalysis(): void {\r\n    if (!this.isAnalyzing) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping connection pool usage analysis')\r\n    this.isAnalyzing = false\r\n\r\n    if (this.analysisInterval) {\r\n      clearInterval(this.analysisInterval)\r\n      this.analysisInterval = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行使用模式分析\r\n   */\r\n  private performAnalysis(): void {\r\n    if (this.usageHistory.length < 10) {\r\n      // 数据不足，无法进行有效分析\r\n      return\r\n    }\r\n\r\n    try {\r\n      const analysis = this.analyzeUsagePattern()\r\n      const recommendations = this.generateRecommendations(analysis)\r\n      \r\n      this.emit('analysis-complete', {\r\n        analysis,\r\n        recommendations,\r\n        timestamp: new Date()\r\n      })\r\n\r\n      console.log('Connection pool usage analysis completed', {\r\n        patternType: analysis.patternType,\r\n        avgUtilization: analysis.avgUtilization.toFixed(2) + '%',\r\n        recommendationsCount: recommendations.length\r\n      })\r\n\r\n    } catch (error) {\r\n      console.error('Error during connection pool analysis:', error)\r\n      this.emit('analysis-error', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 分析使用模式\r\n   * \r\n   * @param timeRangeMs - 分析时间范围(毫秒)\r\n   * @returns 使用模式分析结果\r\n   */\r\n  analyzeUsagePattern(timeRangeMs: number = 3600000): UsagePatternAnalysis {\r\n    const now = new Date()\r\n    const startTime = new Date(now.getTime() - timeRangeMs)\r\n    \r\n    const relevantStats = this.usageHistory.filter(\r\n      stats => stats.timestamp >= startTime\r\n    )\r\n\r\n    if (relevantStats.length === 0) {\r\n      throw new Error('Insufficient data for analysis')\r\n    }\r\n\r\n    // 计算使用率统计\r\n    const utilizations = relevantStats.map(stats => stats.utilizationRate)\r\n    const avgUtilization = utilizations.reduce((sum, val) => sum + val, 0) / utilizations.length\r\n    const peakUtilization = Math.max(...utilizations)\r\n    const minUtilization = Math.min(...utilizations)\r\n    \r\n    // 计算标准差\r\n    const variance = utilizations.reduce((sum, val) => sum + Math.pow(val - avgUtilization, 2), 0) / utilizations.length\r\n    const utilizationStdDev = Math.sqrt(variance)\r\n\r\n    // 计算连接获取时间统计\r\n    const acquireTimes = relevantStats.map(stats => stats.avgAcquireTime).sort((a, b) => a - b)\r\n    const acquireTimeStats = {\r\n      avg: acquireTimes.reduce((sum, val) => sum + val, 0) / acquireTimes.length,\r\n      min: acquireTimes[0],\r\n      max: acquireTimes[acquireTimes.length - 1],\r\n      p95: acquireTimes[Math.floor(acquireTimes.length * 0.95)],\r\n      p99: acquireTimes[Math.floor(acquireTimes.length * 0.99)]\r\n    }\r\n\r\n    // 确定使用模式类型\r\n    const patternType = this.determinePatternType(relevantStats, utilizationStdDev)\r\n\r\n    // 生成推荐配置\r\n    const recommendedConfig = this.generateRecommendedConfig(relevantStats, avgUtilization, peakUtilization)\r\n\r\n    return {\r\n      timeRange: {\r\n        start: startTime,\r\n        end: now\r\n      },\r\n      avgUtilization,\r\n      peakUtilization,\r\n      minUtilization,\r\n      utilizationStdDev,\r\n      acquireTimeStats,\r\n      patternType,\r\n      recommendedConfig\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 确定使用模式类型\r\n   * \r\n   * @param stats - 使用统计数据\r\n   * @param stdDev - 使用率标准差\r\n   * @returns 模式类型\r\n   */\r\n  private determinePatternType(stats: PoolUsageStats[], stdDev: number): UsagePatternAnalysis['patternType'] {\r\n    const utilizations = stats.map(s => s.utilizationRate)\r\n    const trend = this.calculateTrend(utilizations)\r\n    \r\n    if (stdDev < 10) {\r\n      return 'stable'\r\n    } else if (stdDev > 30) {\r\n      return 'irregular'\r\n    } else if (trend > 5) {\r\n      return 'growing'\r\n    } else if (trend < -5) {\r\n      return 'declining'\r\n    } else {\r\n      return 'bursty'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算趋势\r\n   * \r\n   * @param values - 数值数组\r\n   * @returns 趋势值\r\n   */\r\n  private calculateTrend(values: number[]): number {\r\n    if (values.length < 2) return 0\r\n    \r\n    const firstHalf = values.slice(0, Math.floor(values.length / 2))\r\n    const secondHalf = values.slice(Math.floor(values.length / 2))\r\n    \r\n    const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length\r\n    const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length\r\n    \r\n    return secondAvg - firstAvg\r\n  }\r\n\r\n  /**\r\n   * 生成推荐配置\r\n   * \r\n   * @param stats - 使用统计数据\r\n   * @param avgUtilization - 平均使用率\r\n   * @param peakUtilization - 峰值使用率\r\n   * @returns 推荐配置\r\n   */\r\n  private generateRecommendedConfig(\r\n    stats: PoolUsageStats[],\r\n    avgUtilization: number,\r\n    peakUtilization: number\r\n  ): UsagePatternAnalysis['recommendedConfig'] {\r\n    const maxConnections = Math.max(...stats.map(s => s.totalConnections))\r\n    const avgConnections = stats.reduce((sum, s) => sum + s.totalConnections, 0) / stats.length\r\n    \r\n    // 基于使用模式调整配置\r\n    let minConnections = Math.max(2, Math.ceil(avgConnections * 0.3))\r\n    let recommendedMax = Math.max(minConnections + 2, Math.ceil(maxConnections * 1.2))\r\n    \r\n    // 根据使用率调整\r\n    if (avgUtilization > 80) {\r\n      recommendedMax = Math.ceil(recommendedMax * 1.5)\r\n    } else if (avgUtilization < 30) {\r\n      recommendedMax = Math.max(minConnections + 1, Math.ceil(recommendedMax * 0.8))\r\n    }\r\n    \r\n    // 计算超时时间\r\n    const avgAcquireTime = stats.reduce((sum, s) => sum + s.avgAcquireTime, 0) / stats.length\r\n    const acquireTimeout = Math.max(30000, avgAcquireTime * 3)\r\n    const idleTimeout = avgUtilization > 60 ? 300000 : 600000 // 5-10分钟\r\n    \r\n    return {\r\n      minConnections,\r\n      maxConnections: recommendedMax,\r\n      acquireTimeout,\r\n      idleTimeout\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成优化建议\r\n   * \r\n   * @param analysis - 使用模式分析结果\r\n   * @returns 优化建议数组\r\n   */\r\n  private generateRecommendations(analysis: UsagePatternAnalysis): OptimizationRecommendation[] {\r\n    const recommendations: OptimizationRecommendation[] = []\r\n    \r\n    // 基于平均使用率的建议\r\n    if (analysis.avgUtilization > 85) {\r\n      recommendations.push({\r\n        type: 'increase_pool',\r\n        description: '连接池使用率过高，建议增加最大连接数',\r\n        expectedImpact: '减少连接等待时间，提升并发处理能力',\r\n        priority: 'high'\r\n      })\r\n    } else if (analysis.avgUtilization < 20) {\r\n      recommendations.push({\r\n        type: 'decrease_pool',\r\n        description: '连接池使用率较低，建议减少连接数以节省资源',\r\n        expectedImpact: '降低内存使用，减少维护开销',\r\n        priority: 'medium'\r\n      })\r\n    }\r\n    \r\n    // 基于连接获取时间的建议\r\n    if (analysis.acquireTimeStats.p95 > 5000) {\r\n      recommendations.push({\r\n        type: 'adjust_timeout',\r\n        description: '连接获取时间较长，建议调整超时配置或增加连接数',\r\n        expectedImpact: '减少连接获取延迟，提升响应速度',\r\n        priority: 'high'\r\n      })\r\n    }\r\n    \r\n    // 基于使用模式的建议\r\n    if (analysis.patternType === 'bursty') {\r\n      recommendations.push({\r\n        type: 'optimize_queries',\r\n        description: '检测到突发性使用模式，建议优化查询性能或实现连接预热',\r\n        expectedImpact: '平滑负载峰值，提升系统稳定性',\r\n        priority: 'medium'\r\n      })\r\n    }\r\n    \r\n    // 如果没有明显问题\r\n    if (recommendations.length === 0) {\r\n      recommendations.push({\r\n        type: 'no_action',\r\n        description: '连接池配置良好，暂无需要优化的项目',\r\n        expectedImpact: '保持当前性能水平',\r\n        priority: 'low'\r\n      })\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 获取使用历史\r\n   * \r\n   * @param limit - 限制返回数量\r\n   * @returns 使用统计历史\r\n   */\r\n  getUsageHistory(limit?: number): PoolUsageStats[] {\r\n    if (limit) {\r\n      return this.usageHistory.slice(-limit)\r\n    }\r\n    return [...this.usageHistory]\r\n  }\r\n\r\n  /**\r\n   * 获取当前使用统计\r\n   * \r\n   * @returns 当前使用统计\r\n   */\r\n  getCurrentStats(): PoolUsageStats | null {\r\n    return this.usageHistory.length > 0 ? this.usageHistory[this.usageHistory.length - 1] : null\r\n  }\r\n\r\n  /**\r\n   * 清除历史数据\r\n   */\r\n  clearHistory(): void {\r\n    this.usageHistory = []\r\n    console.log('Connection pool usage history cleared')\r\n  }\r\n\r\n  /**\r\n   * 生成分析报告\r\n   * \r\n   * @param timeRangeMs - 分析时间范围\r\n   * @returns 分析报告\r\n   */\r\n  generateReport(timeRangeMs: number = 3600000): {\r\n    analysis: UsagePatternAnalysis\r\n    recommendations: OptimizationRecommendation[]\r\n    summary: string\r\n  } {\r\n    const analysis = this.analyzeUsagePattern(timeRangeMs)\r\n    const recommendations = this.generateRecommendations(analysis)\r\n    \r\n    const summary = `\r\n连接池使用分析报告\r\n==================\r\n时间范围: ${analysis.timeRange.start.toISOString()} - ${analysis.timeRange.end.toISOString()}\r\n使用模式: ${analysis.patternType}\r\n平均使用率: ${analysis.avgUtilization.toFixed(2)}%\r\n峰值使用率: ${analysis.peakUtilization.toFixed(2)}%\r\n平均获取时间: ${analysis.acquireTimeStats.avg.toFixed(2)}ms\r\n建议数量: ${recommendations.length}\r\n\r\n推荐配置:\r\n- 最小连接数: ${analysis.recommendedConfig.minConnections}\r\n- 最大连接数: ${analysis.recommendedConfig.maxConnections}\r\n- 获取超时: ${analysis.recommendedConfig.acquireTimeout}ms\r\n- 空闲超时: ${analysis.recommendedConfig.idleTimeout}ms\r\n    `.trim()\r\n    \r\n    return {\r\n      analysis,\r\n      recommendations,\r\n      summary\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const connectionPoolAnalyzer = new ConnectionPoolAnalyzer()\r\n\r\n// 导出类型\r\nexport type {\r\n  PoolUsageStats,\r\n  UsagePatternAnalysis,\r\n  OptimizationRecommendation\r\n}\r\n"],"version":3}