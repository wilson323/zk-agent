{"file":"E:\\zk-agent\\tests\\api\\routes\\images.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\images.test.ts"],"sourcesContent":["/**\n * 图片处理API路由错误处理测试\n * 测试图片上传、处理、存储等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET } from '../../../app/api/images/temp/[filename]/route';\n// import { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';\n\n// Mock POST method for testing\nconst POST = jest.fn();\n\n// Mock dependencies\njest.mock('../../../lib/services/image-processor', () => ({\n  processImage: jest.fn(),\n  validateImageFormat: jest.fn(),\n  compressImage: jest.fn(),\n  generateThumbnail: jest.fn(),\n  extractMetadata: jest.fn(),\n  detectImageType: jest.fn(),\n  optimizeImage: jest.fn()\n}));\n\njest.mock('../../../lib/storage/image-store', () => ({\n  uploadImage: jest.fn(),\n  downloadImage: jest.fn(),\n  deleteImage: jest.fn(),\n  getImageMetadata: jest.fn(),\n  checkStorageQuota: jest.fn(),\n  generateImageUrl: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkUploadPermissions: jest.fn()\n}));\n\njest.mock('../../../lib/utils/file-validator', () => ({\n  validateFileSize: jest.fn(),\n  validateFileType: jest.fn(),\n  scanForMalware: jest.fn()\n}));\n\ndescribe('Images API Error Handling', () => {\n  let errorHandler: any;\n\n  beforeEach(() => {\n    // errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler = { errorCount: 0, circuitBreakerOpen: false };\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/images - Upload Image', () => {\n    let validImageData: FormData;\n\n    beforeEach(() => {\n      validImageData = new FormData();\n      const mockFile = new File(['test image data'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n      validImageData.append('category', 'poster');\n      validImageData.append('description', 'Test image');\n    });\n\n    it('should handle file size limit exceeded', async () => {\n      const { validateFileSize } = require('../../../lib/utils/file-validator');\n      validateFileSize.mockRejectedValue(new Error('File size exceeds 10MB limit'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(413); // Payload too large\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('File size exceeds');\n    });\n\n    it('should handle unsupported image format', async () => {\n      const { validateFileType } = require('../../../lib/utils/file-validator');\n      validateFileType.mockRejectedValue(new Error('Unsupported file type: .bmp'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(415); // Unsupported media type\n      expect(data.error.message).toContain('Unsupported file type');\n    });\n\n    it('should handle corrupted image file', async () => {\n      const { validateImageFormat } = require('../../../lib/services/image-processor');\n      validateImageFormat.mockRejectedValue(new Error('Image file is corrupted or invalid'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Image file is corrupted');\n    });\n\n    it('should handle malware detection', async () => {\n      const { scanForMalware } = require('../../../lib/utils/file-validator');\n      scanForMalware.mockRejectedValue(new Error('Malware detected in uploaded file'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Malware detected');\n    });\n\n    it('should handle storage quota exceeded', async () => {\n      const { checkStorageQuota } = require('../../../lib/storage/image-store');\n      checkStorageQuota.mockRejectedValue(new Error('Storage quota exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient storage\n      expect(data.error.message).toContain('Storage quota exceeded');\n    });\n\n    it('should handle upload service unavailable', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Image storage service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Image storage service unavailable');\n    });\n\n    it('should handle missing required fields', async () => {\n      const incompleteData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      incompleteData.append('image', mockFile);\n      // Missing category and description\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: incompleteData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('category');\n    });\n\n    it('should handle insufficient upload permissions', async () => {\n      const { checkUploadPermissions } = require('../../../lib/auth/session');\n      checkUploadPermissions.mockRejectedValue(new Error('Upload permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData,\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle image processing timeout', async () => {\n      const { processImage } = require('../../../lib/services/image-processor');\n      processImage.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Image processing timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Image processing timeout');\n    });\n\n    it('should handle duplicate image upload', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Image with same hash already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Image with same hash already exists');\n    });\n  });\n\n  describe('GET /api/images/[id] - Get Image', () => {\n    it('should handle image not found', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/images/nonexistent-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Image not found');\n    });\n\n    it('should handle corrupted image data', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockRejectedValue(new Error('Image data corrupted'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Image data corrupted');\n    });\n\n    it('should handle storage service unavailable', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockRejectedValue(new Error('Storage service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Storage service unavailable');\n    });\n\n    it('should handle access denied for private images', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockRejectedValue(new Error('Access denied: private image'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/private-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Access denied');\n    });\n\n    it('should handle image download timeout', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Download timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Download timeout');\n    });\n  });\n\n  // PUT method not implemented in this route\n\n  // DELETE method not implemented in this route\n\n  // POST method not implemented in this route\n\n  describe('Image URL Generation Errors', () => {\n    it('should handle URL generation failure', async () => {\n      const { generateImageUrl } = require('../../../lib/storage/image-store');\n      generateImageUrl.mockRejectedValue(new Error('Failed to generate image URL'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id/url');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to generate image URL');\n    });\n\n    it('should handle expired URL access', async () => {\n      const { generateImageUrl } = require('../../../lib/storage/image-store');\n      generateImageUrl.mockRejectedValue(new Error('Image URL has expired'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id/url');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(410); // Gone\n      expect(data.error.message).toContain('Image URL has expired');\n    });\n\n    it('should handle CDN service unavailable', async () => {\n      const { generateImageUrl } = require('../../../lib/storage/image-store');\n      generateImageUrl.mockRejectedValue(new Error('CDN service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id/url');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('CDN service unavailable');\n    });\n  });\n\n  // Batch operations and POST/DELETE methods not implemented in this route\n});"],"version":3}