{"file":"E:\\zk-agent\\tests\\api\\routes\\poster.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\poster.test.ts"],"sourcesContent":["/**\n * 海报生成API路由错误处理测试\n * 测试海报生成端点的各种错误场景和恢复机制\n */\n\nimport { NextRequest } from 'next/server';\nimport { POST } from '../../../app/api/poster/generate/route';\nimport { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\nimport { PosterGenerationFailed, PosterResourceLimit } from '../../../lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/poster-generator', () => ({\n  generatePoster: jest.fn(),\n  validateTemplate: jest.fn(),\n  checkResourceLimits: jest.fn()\n}));\n\njest.mock('../../../lib/storage/file-manager', () => ({\n  uploadFile: jest.fn(),\n  deleteFile: jest.fn(),\n  getFileUrl: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  getUserLimits: jest.fn()\n}));\n\ndescribe('Poster Generation API Error Handling', () => {\n  let mockRequest: NextRequest;\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    const requestBody = {\n      template: 'security-awareness',\n      title: 'Test Poster',\n      content: 'Test content',\n      style: {\n        theme: 'corporate',\n        colors: ['#1f2937', '#3b82f6']\n      }\n    };\n    \n    mockRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer valid-token'\n      }\n    });\n    \n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('Template Validation Errors', () => {\n    it('should handle invalid template format', async () => {\n      const { validateTemplate } = require('../../../lib/services/poster-generator');\n      validateTemplate.mockRejectedValue(new Error('Invalid template format'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid template format');\n    });\n\n    it('should handle missing required template fields', async () => {\n      const invalidRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({ template: 'security-awareness' }), // Missing required fields\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(invalidRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('title');\n    });\n\n    it('should handle unsupported template type', async () => {\n      const { validateTemplate } = require('../../../lib/services/poster-generator');\n      validateTemplate.mockRejectedValue(new Error('Template type not supported'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Template type not supported');\n    });\n  });\n\n  describe('Resource Limit Errors', () => {\n    it('should handle memory limit exceeded', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const resourceError = new PosterResourceLimit(\n        'Memory limit exceeded during poster generation',\n        { memoryUsage: '512MB', limit: '256MB' }\n      );\n      generatePoster.mockRejectedValue(resourceError);\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.code).toBe('POSTER_RESOURCE_LIMIT');\n      expect(data.error.message).toContain('Memory limit exceeded');\n      expect(data.error.retryAfter).toBeDefined();\n    });\n\n    it('should handle concurrent generation limit', async () => {\n      const { checkResourceLimits } = require('../../../lib/services/poster-generator');\n      checkResourceLimits.mockRejectedValue(new Error('Too many concurrent poster generations'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.message).toContain('Too many concurrent');\n    });\n\n    it('should handle storage quota exceeded', async () => {\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      uploadFile.mockRejectedValue(new Error('Storage quota exceeded'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(413);\n      expect(data.error.message).toContain('Storage quota exceeded');\n    });\n  });\n\n  describe('Generation Process Errors', () => {\n    it('should handle poster generation timeout', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Generation timeout')), 100)\n        )\n      );\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Generation timeout');\n    });\n\n    it('should handle rendering engine failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const generationError = new PosterGenerationFailed(\n        'Rendering engine crashed',\n        new Error('Canvas rendering failed'),\n        { template: 'security-awareness', step: 'rendering' }\n      );\n      generatePoster.mockRejectedValue(generationError);\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.code).toBe('POSTER_GENERATION_FAILED');\n      expect(data.error.message).toContain('Rendering engine crashed');\n    });\n\n    it('should handle image processing failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Image processing failed'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Image processing failed');\n    });\n\n    it('should handle font loading failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Failed to load custom font'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to load custom font');\n    });\n  });\n\n  describe('Authentication and Authorization Errors', () => {\n    it('should handle missing authentication token', async () => {\n      const unauthRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({ template: 'test' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(unauthRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n    });\n\n    it('should handle invalid authentication token', async () => {\n      const { validateSession } = require('../../../lib/auth/session');\n      validateSession.mockRejectedValue(new Error('Invalid token'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Invalid token');\n    });\n\n    it('should handle expired authentication token', async () => {\n      const { validateSession } = require('../../../lib/auth/session');\n      validateSession.mockRejectedValue(new Error('Token expired'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Token expired');\n    });\n\n    it('should handle insufficient permissions', async () => {\n      const { getUserLimits } = require('../../../lib/auth/session');\n      getUserLimits.mockResolvedValue({ canGeneratePosters: false });\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n  });\n\n  describe('File Storage Errors', () => {\n    it('should handle file upload failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      \n      generatePoster.mockResolvedValue({ imageBuffer: Buffer.from('test') });\n      uploadFile.mockRejectedValue(new Error('Upload failed'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Upload failed');\n    });\n\n    it('should handle storage service unavailable', async () => {\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      uploadFile.mockRejectedValue(new Error('Storage service unavailable'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Storage service unavailable');\n    });\n\n    it('should handle file corruption during upload', async () => {\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      uploadFile.mockRejectedValue(new Error('File corruption detected'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('File corruption detected');\n    });\n  });\n\n  describe('Input Validation Errors', () => {\n    it('should handle malformed JSON request', async () => {\n      const malformedRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: '{invalid json}',\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(malformedRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid JSON');\n    });\n\n    it('should handle oversized request payload', async () => {\n      const largeContent = 'x'.repeat(10000000); // 10MB string\n      const largeRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({ template: 'test', content: largeContent }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(largeRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(413);\n      expect(data.error.message).toContain('Payload too large');\n    });\n\n    it('should handle invalid color format', async () => {\n      const invalidColorRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          template: 'security-awareness',\n          title: 'Test',\n          content: 'Test',\n          style: { colors: ['invalid-color'] }\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(invalidColorRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid color format');\n    });\n  });\n\n  describe('Error Recovery and Retry Logic', () => {\n    it('should implement exponential backoff for retries', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      let attemptCount = 0;\n      generatePoster.mockImplementation(() => {\n        attemptCount++;\n        if (attemptCount < 3) {\n          return Promise.reject(new Error('Temporary failure'));\n        }\n        return Promise.resolve({ imageBuffer: Buffer.from('success') });\n      });\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(attemptCount).toBe(3);\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n    });\n\n    it('should provide fallback template on generation failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Template rendering failed'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data.fallbackUsed).toBe(true);\n    });\n\n    it('should clean up resources on failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const { deleteFile } = require('../../../lib/storage/file-manager');\n      \n      generatePoster.mockRejectedValue(new Error('Generation failed'));\n\n      await POST(mockRequest);\n\n      expect(deleteFile).toHaveBeenCalled();\n    });\n  });\n\n  describe('Circuit Breaker Integration', () => {\n    it('should trigger circuit breaker after multiple failures', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Service failure'));\n\n      // Simulate multiple failures\n      for (let i = 0; i < 5; i++) {\n        await POST(mockRequest);\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should return circuit breaker response when open', async () => {\n      // Force circuit breaker to open state\n      errorHandler['circuitBreakerOpen'] = true;\n      errorHandler['circuitBreakerOpen'] = true;\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.code).toBe('CIRCUIT_BREAKER_OPEN');\n    });\n  });\n\n  describe('Performance and Monitoring', () => {\n    it('should include generation metrics in response', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockResolvedValue({\n        imageBuffer: Buffer.from('test'),\n        metrics: {\n          generationTime: 1500,\n          memoryUsed: '128MB',\n          templateComplexity: 'medium'\n        }\n      });\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(data.data.metrics).toBeDefined();\n      expect(data.data.metrics.generationTime).toBe(1500);\n    });\n\n    it('should log performance warnings for slow generation', async () => {\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      \n      generatePoster.mockImplementation(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({ imageBuffer: Buffer.from('test') }), 5000)\n        )\n      );\n\n      await POST(mockRequest);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Slow poster generation detected')\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n});"],"version":3}