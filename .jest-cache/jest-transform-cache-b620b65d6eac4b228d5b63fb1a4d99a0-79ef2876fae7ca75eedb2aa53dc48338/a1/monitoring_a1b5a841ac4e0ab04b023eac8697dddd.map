{"file":"E:\\zk-agent\\lib\\database\\monitoring.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\monitoring.ts"],"sourcesContent":["/**\r\n * @file Database Connection Monitoring\r\n * @description 数据库连接监控和指标收集工具\r\n * @author ZK-Agent Team\r\n * @date 2024-12-19\r\n */\r\n\r\nimport { enhancedDb } from './enhanced-connection';\r\nimport { ConnectionState } from './enhanced-connection'\r\nimport { EventEmitter } from 'events';\r\nimport { PerformanceOptimizationCoordinator } from './performance-optimization-coordinator';\r\nimport { ConnectionPoolAnalyzer } from './connection-pool-analyzer';\r\nimport { DynamicPoolAdjuster } from './dynamic-pool-adjuster';\r\nimport { QueryPerformanceOptimizer } from './query-performance-optimizer';\r\nimport { IntelligentCacheManager } from './intelligent-cache-manager';\r\nimport { CacheStrategyOptimizer } from './cache-strategy-optimizer';\r\nimport { PerformanceMonitorEnhancer } from './performance-monitor-enhancer';\r\n\r\n// 监控指标接口\r\nexport interface DatabaseMetrics {\r\n  timestamp: Date\r\n  connectionState: ConnectionState\r\n  uptime: number\r\n  totalQueries: number\r\n  failedQueries: number\r\n  successRate: number\r\n  avgLatency: number\r\n  reconnectAttempts: number\r\n  // 连接池相关指标\r\n  activeConnections?: number\r\n  idleConnections?: number\r\n  waitingRequests?: number\r\n  connectionCreations?: number\r\n  connectionDestructions?: number\r\n  memoryUsage: {\r\n    rss: number\r\n    heapUsed: number\r\n    heapTotal: number\r\n    external: number\r\n  }\r\n  cpuUsage: {\r\n    user: number\r\n    system: number\r\n  }\r\n}\r\n\r\n// 性能阈值配置\r\nexport interface PerformanceThresholds {\r\n  maxLatency: number // 最大延迟（毫秒）\r\n  maxFailureRate: number // 最大失败率（百分比）\r\n  maxReconnectAttempts: number // 最大重连尝试次数\r\n  minUptime: number // 最小运行时间（毫秒）\r\n}\r\n\r\n// 告警级别\r\nexport enum AlertLevel {\r\n  INFO = 'info',\r\n  WARNING = 'warning',\r\n  ERROR = 'error',\r\n  CRITICAL = 'critical'\r\n}\r\n\r\n// 告警信息\r\nexport interface Alert {\r\n  level: AlertLevel\r\n  message: string\r\n  timestamp: Date\r\n  metrics: DatabaseMetrics\r\n  threshold?: any\r\n}\r\n\r\n/**\r\n * 数据库监控器\r\n */\r\nexport class DatabaseMonitor extends EventEmitter {\r\n  private isMonitoring: boolean = false\r\n  private monitoringInterval: NodeJS.Timeout | null = null\r\n  private metricsHistory: DatabaseMetrics[] = []\r\n  private alerts: Alert[] = []\r\n  private thresholds: PerformanceThresholds\r\n  private intervalMs: number\r\n  private maxHistorySize: number\r\n  private lastCpuUsage: NodeJS.CpuUsage | null = null\r\n  \r\n  // 性能优化组件\r\n  private optimizationCoordinator: PerformanceOptimizationCoordinator\r\n  private poolAnalyzer: ConnectionPoolAnalyzer\r\n  private dynamicAdjuster: DynamicPoolAdjuster\r\n  private queryOptimizer: QueryPerformanceOptimizer\r\n  private cacheManager: IntelligentCacheManager\r\n  private cacheOptimizer: CacheStrategyOptimizer\r\n  private monitorEnhancer: PerformanceMonitorEnhancer\r\n\r\n  constructor(\r\n    thresholds?: Partial<PerformanceThresholds>,\r\n    intervalMs: number = 30000,\r\n    maxHistorySize: number = 100\r\n  ) {\r\n    super()\r\n\r\n    // 默认性能阈值\r\n    this.thresholds = {\r\n      maxLatency: parseInt(process.env.DB_MAX_LATENCY || '1000'),\r\n      maxFailureRate: parseFloat(process.env.DB_MAX_FAILURE_RATE || '5'),\r\n      maxReconnectAttempts: parseInt(process.env.DB_MAX_RECONNECT_ATTEMPTS || '5'),\r\n      minUptime: parseInt(process.env.DB_MIN_UPTIME || '60000'),\r\n      ...thresholds\r\n    }\r\n\r\n    this.intervalMs = intervalMs\r\n    this.maxHistorySize = maxHistorySize\r\n\r\n    // 初始化性能优化组件\r\n    this.initializeOptimizationComponents()\r\n\r\n    // 监听数据库事件\r\n    this.setupDatabaseEventListeners()\r\n  }\r\n\r\n  /**\r\n   * 初始化性能优化组件\r\n   */\r\n  private initializeOptimizationComponents(): void {\r\n    try {\r\n      // 初始化连接池分析器\r\n      this.poolAnalyzer = new ConnectionPoolAnalyzer({\r\n        analysisInterval: 60000, // 1分钟分析一次\r\n        historySize: 100,\r\n        enableRealtimeMonitoring: true\r\n      })\r\n\r\n      // 初始化动态连接池调整器\r\n      this.dynamicAdjuster = new DynamicPoolAdjuster({\r\n        adjustmentInterval: 120000, // 2分钟调整一次\r\n        cooldownPeriod: 300000, // 5分钟冷却期\r\n        enablePredictiveAdjustment: true,\r\n        maxAdjustmentPercentage: 20\r\n      })\r\n\r\n      // 初始化查询性能优化器\r\n      this.queryOptimizer = new QueryPerformanceOptimizer({\r\n        slowQueryThreshold: 1000, // 1秒\r\n        enableQueryCache: true,\r\n        cacheSize: 1000,\r\n        enableOptimizationSuggestions: true\r\n      })\r\n\r\n      // 初始化智能缓存管理器\r\n      this.cacheManager = new IntelligentCacheManager({\r\n        l1Config: {\r\n          maxSize: 1000,\r\n          ttl: 300000 // 5分钟\r\n        },\r\n        l2Config: {\r\n          host: process.env.REDIS_HOST || 'localhost',\r\n          port: parseInt(process.env.REDIS_PORT || '6379'),\r\n          ttl: 3600000 // 1小时\r\n        },\r\n        enablePrewarming: true,\r\n        enableDistributedConsistency: true\r\n      })\r\n\r\n      // 初始化缓存策略优化器\r\n      this.cacheOptimizer = new CacheStrategyOptimizer({\r\n        optimizationInterval: 300000, // 5分钟\r\n        enableABTesting: true,\r\n        enableMLOptimization: true,\r\n        strategyEvaluationPeriod: 3600000 // 1小时\r\n      })\r\n\r\n      // 初始化性能监控增强器\r\n      this.monitorEnhancer = new PerformanceMonitorEnhancer({\r\n        metricsCollectionInterval: 30000, // 30秒\r\n        anomalyDetectionEnabled: true,\r\n        trendAnalysisEnabled: true,\r\n        autoOptimizationEnabled: true\r\n      })\r\n\r\n      // 初始化性能优化协调器\r\n      this.optimizationCoordinator = new PerformanceOptimizationCoordinator({\r\n        healthCheckInterval: 60000, // 1分钟\r\n        optimizationEvaluationInterval: 300000, // 5分钟\r\n        enableAutoOptimization: true,\r\n        maxConcurrentOptimizations: 3\r\n      })\r\n\r\n      // 注册组件到协调器\r\n      this.optimizationCoordinator.registerComponent('poolAnalyzer', this.poolAnalyzer)\r\n      this.optimizationCoordinator.registerComponent('dynamicAdjuster', this.dynamicAdjuster)\r\n      this.optimizationCoordinator.registerComponent('queryOptimizer', this.queryOptimizer)\r\n      this.optimizationCoordinator.registerComponent('cacheManager', this.cacheManager)\r\n      this.optimizationCoordinator.registerComponent('cacheOptimizer', this.cacheOptimizer)\r\n      this.optimizationCoordinator.registerComponent('monitorEnhancer', this.monitorEnhancer)\r\n\r\n      // 设置组件间的事件监听\r\n      this.setupOptimizationEventListeners()\r\n\r\n      console.log('Performance optimization components initialized successfully')\r\n    } catch (error) {\r\n      console.error('Failed to initialize optimization components:', error)\r\n      this.createAlert(AlertLevel.ERROR, `性能优化组件初始化失败: ${error}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置优化组件事件监听器\r\n   */\r\n  private setupOptimizationEventListeners(): void {\r\n    // 监听连接池分析完成事件\r\n    this.poolAnalyzer.on('analysisComplete', (analysis) => {\r\n      this.emit('poolAnalysis', analysis)\r\n      // 触发动态调整器评估\r\n      this.dynamicAdjuster.triggerImmediateAdjustment()\r\n    })\r\n\r\n    // 监听动态调整完成事件\r\n    this.dynamicAdjuster.on('adjustmentComplete', (result) => {\r\n      this.emit('poolAdjustment', result)\r\n      this.createAlert(AlertLevel.INFO, `连接池动态调整完成: ${result.description}`)\r\n    })\r\n\r\n    // 监听查询优化事件\r\n    this.queryOptimizer.on('slowQueryDetected', (query) => {\r\n      this.createAlert(AlertLevel.WARNING, `检测到慢查询: ${query.template} (${query.executionTime}ms)`)\r\n    })\r\n\r\n    this.queryOptimizer.on('optimizationSuggestion', (suggestion) => {\r\n      this.emit('optimizationSuggestion', suggestion)\r\n    })\r\n\r\n    // 监听缓存事件\r\n    this.cacheManager.on('cacheHit', (key, level) => {\r\n      this.emit('cacheHit', { key, level })\r\n    })\r\n\r\n    this.cacheManager.on('cacheMiss', (key) => {\r\n      this.emit('cacheMiss', { key })\r\n    })\r\n\r\n    // 监听缓存策略优化事件\r\n    this.cacheOptimizer.on('strategyOptimized', (result) => {\r\n      this.emit('cacheStrategyOptimized', result)\r\n      this.createAlert(AlertLevel.INFO, `缓存策略优化完成: ${result.description}`)\r\n    })\r\n\r\n    // 监听性能监控增强器事件\r\n    this.monitorEnhancer.on('anomalyDetected', (anomaly) => {\r\n      this.createAlert(AlertLevel.WARNING, `性能异常检测: ${anomaly.description}`)\r\n    })\r\n\r\n    this.monitorEnhancer.on('optimizationRecommendation', (recommendation) => {\r\n      this.emit('optimizationRecommendation', recommendation)\r\n    })\r\n\r\n    // 监听协调器事件\r\n    this.optimizationCoordinator.on('optimizationComplete', (result) => {\r\n      this.emit('coordinatedOptimization', result)\r\n      this.createAlert(AlertLevel.INFO, `协调优化完成: ${result.description}`)\r\n    })\r\n\r\n    this.optimizationCoordinator.on('criticalAlert', (alert) => {\r\n      this.createAlert(AlertLevel.CRITICAL, `关键性能告警: ${alert.message}`)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置数据库事件监听器\r\n   */\r\n  private setupDatabaseEventListeners(): void {\r\n    enhancedDatabaseManager.getPrismaClient().on('connected', () => {\r\n      this.createAlert(AlertLevel.INFO, '数据库连接成功建立')\r\n    })\r\n\r\n    enhancedDatabaseManager.getPrismaClient().on('disconnected', (error) => {\r\n      const message = error ? `数据库连接断开: ${error.message}` : '数据库连接断开'\r\n      this.createAlert(AlertLevel.WARNING, message)\r\n    })\r\n\r\n    enhancedDatabaseManager.getPrismaClient().on('reconnecting', (attempt) => {\r\n      this.createAlert(AlertLevel.WARNING, `数据库重连中 (第${attempt}次尝试)`)\r\n    })\r\n\r\n    enhancedDatabaseManager.getPrismaClient().on('reconnected', () => {\r\n      this.createAlert(AlertLevel.INFO, '数据库重连成功')\r\n    })\r\n\r\n    enhancedDatabaseManager.getPrismaClient().on('error', (error) => {\r\n      this.createAlert(AlertLevel.ERROR, `数据库错误: ${error.message}`)\r\n    })\r\n\r\n    enhancedDatabaseManager.getPrismaClient().on('healthCheck', (healthy) => {\r\n      if (!healthy) {\r\n        this.createAlert(AlertLevel.WARNING, '数据库健康检查失败')\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 开始监控\r\n   */\r\n  startMonitoring(): void {\r\n    if (this.isMonitoring) {\r\n      console.log('Database monitoring is already running')\r\n      return\r\n    }\r\n\r\n    console.log(`Starting database monitoring (interval: ${this.intervalMs}ms)`)\r\n    this.isMonitoring = true\r\n    this.lastCpuUsage = process.cpuUsage()\r\n\r\n    // 启动所有性能优化组件\r\n    this.startOptimizationComponents()\r\n\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.collectMetrics()\r\n    }, this.intervalMs)\r\n\r\n    // 立即收集一次指标\r\n    this.collectMetrics()\r\n  }\r\n\r\n  /**\r\n   * 停止监控\r\n   */\r\n  stopMonitoring(): void {\r\n    if (!this.isMonitoring) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping database monitoring')\r\n    this.isMonitoring = false\r\n\r\n    // 停止所有性能优化组件\r\n    this.stopOptimizationComponents()\r\n\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval)\r\n      this.monitoringInterval = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动所有性能优化组件\r\n   */\r\n  private startOptimizationComponents(): void {\r\n    try {\r\n      console.log('Starting performance optimization components...')\r\n      \r\n      // 启动协调器（会自动启动所有注册的组件）\r\n      this.optimizationCoordinator.start()\r\n      \r\n      console.log('All performance optimization components started successfully')\r\n    } catch (error) {\r\n      console.error('Failed to start optimization components:', error)\r\n      this.createAlert(AlertLevel.ERROR, `性能优化组件启动失败: ${error}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 停止所有性能优化组件\r\n   */\r\n  private stopOptimizationComponents(): void {\r\n    try {\r\n      console.log('Stopping performance optimization components...')\r\n      \r\n      // 停止协调器（会自动停止所有注册的组件）\r\n      this.optimizationCoordinator.stop()\r\n      \r\n      console.log('All performance optimization components stopped successfully')\r\n    } catch (error) {\r\n      console.error('Failed to stop optimization components:', error)\r\n      this.createAlert(AlertLevel.ERROR, `性能优化组件停止失败: ${error}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取性能优化状态\r\n   */\r\n  getOptimizationStatus(): {\r\n    coordinator: any\r\n    poolAnalyzer: any\r\n    dynamicAdjuster: any\r\n    queryOptimizer: any\r\n    cacheManager: any\r\n    cacheOptimizer: any\r\n    monitorEnhancer: any\r\n  } {\r\n    return {\r\n      coordinator: this.optimizationCoordinator?.getStatus() || null,\r\n      poolAnalyzer: this.poolAnalyzer?.getStatus() || null,\r\n      dynamicAdjuster: this.dynamicAdjuster?.getStatus() || null,\r\n      queryOptimizer: this.queryOptimizer?.getStatus() || null,\r\n      cacheManager: this.cacheManager?.getStatus() || null,\r\n      cacheOptimizer: this.cacheOptimizer?.getStatus() || null,\r\n      monitorEnhancer: this.monitorEnhancer?.getStatus() || null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 手动触发性能优化\r\n   */\r\n  triggerOptimization(strategy?: string): void {\r\n    try {\r\n      if (strategy) {\r\n        this.optimizationCoordinator.executeStrategy(strategy)\r\n      } else {\r\n        this.optimizationCoordinator.triggerOptimizationEvaluation()\r\n      }\r\n      \r\n      this.createAlert(AlertLevel.INFO, `手动触发性能优化${strategy ? `: ${strategy}` : ''}`)\r\n    } catch (error) {\r\n      console.error('Failed to trigger optimization:', error)\r\n      this.createAlert(AlertLevel.ERROR, `手动优化触发失败: ${error}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取优化建议\r\n   */\r\n  getOptimizationRecommendations(): any[] {\r\n    const recommendations: any[] = []\r\n    \r\n    try {\r\n      // 从各个组件收集优化建议\r\n      if (this.poolAnalyzer) {\r\n        const poolRecommendations = this.poolAnalyzer.generateOptimizationRecommendations()\r\n        recommendations.push(...poolRecommendations)\r\n      }\r\n      \r\n      if (this.queryOptimizer) {\r\n        const queryRecommendations = this.queryOptimizer.getOptimizationSuggestions()\r\n        recommendations.push(...queryRecommendations)\r\n      }\r\n      \r\n      if (this.cacheOptimizer) {\r\n        const cacheRecommendations = this.cacheOptimizer.generateOptimizationRecommendations()\r\n        recommendations.push(...cacheRecommendations)\r\n      }\r\n      \r\n      if (this.monitorEnhancer) {\r\n        const monitorRecommendations = this.monitorEnhancer.generateOptimizationRecommendations()\r\n        recommendations.push(...monitorRecommendations)\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to get optimization recommendations:', error)\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 收集指标\r\n   */\r\n  private collectMetrics(): void {\r\n    try {\r\n      const stats = enhancedDatabaseManager.getPrismaClient().getStats()\r\n      const memUsage = process.memoryUsage()\r\n      const cpuUsage = process.cpuUsage(this.lastCpuUsage || undefined)\r\n      this.lastCpuUsage = process.cpuUsage()\r\n\r\n      const metrics: DatabaseMetrics = {\r\n        timestamp: new Date(),\r\n        connectionState: stats.state,\r\n        uptime: stats.uptime,\r\n        totalQueries: stats.totalQueries,\r\n        failedQueries: stats.failedQueries,\r\n        successRate: stats.totalQueries > 0 \r\n          ? ((stats.totalQueries - stats.failedQueries) / stats.totalQueries) * 100\r\n          : 100,\r\n        avgLatency: stats.avgLatency,\r\n        reconnectAttempts: stats.reconnectAttempts,\r\n        memoryUsage: {\r\n          rss: memUsage.rss,\r\n          heapUsed: memUsage.heapUsed,\r\n          heapTotal: memUsage.heapTotal,\r\n          external: memUsage.external\r\n        },\r\n        cpuUsage: {\r\n          user: cpuUsage.user / 1000, // 转换为毫秒\r\n          system: cpuUsage.system / 1000\r\n        }\r\n      }\r\n\r\n      // 添加到历史记录\r\n      this.addMetricsToHistory(metrics)\r\n\r\n      // 检查性能阈值\r\n      this.checkPerformanceThresholds(metrics)\r\n\r\n      // 触发指标收集事件\r\n      this.emit('metrics', metrics)\r\n\r\n    } catch (error) {\r\n      console.error('Failed to collect database metrics:', error)\r\n      this.createAlert(AlertLevel.ERROR, `指标收集失败: ${error}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加指标到历史记录\r\n   */\r\n  private addMetricsToHistory(metrics: DatabaseMetrics): void {\r\n    this.metricsHistory.push(metrics)\r\n\r\n    // 限制历史记录大小\r\n    if (this.metricsHistory.length > this.maxHistorySize) {\r\n      this.metricsHistory = this.metricsHistory.slice(-this.maxHistorySize)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查性能阈值\r\n   */\r\n  private checkPerformanceThresholds(metrics: DatabaseMetrics): void {\r\n    // 检查延迟\r\n    if (metrics.avgLatency > this.thresholds.maxLatency) {\r\n      this.createAlert(\r\n        AlertLevel.WARNING,\r\n        `数据库平均延迟过高: ${metrics.avgLatency.toFixed(2)}ms (阈值: ${this.thresholds.maxLatency}ms)`,\r\n        metrics,\r\n        { threshold: this.thresholds.maxLatency, actual: metrics.avgLatency }\r\n      )\r\n    }\r\n\r\n    // 检查失败率\r\n    if (metrics.successRate < (100 - this.thresholds.maxFailureRate)) {\r\n      this.createAlert(\r\n        AlertLevel.ERROR,\r\n        `数据库查询失败率过高: ${(100 - metrics.successRate).toFixed(2)}% (阈值: ${this.thresholds.maxFailureRate}%)`,\r\n        metrics,\r\n        { threshold: this.thresholds.maxFailureRate, actual: 100 - metrics.successRate }\r\n      )\r\n    }\r\n\r\n    // 检查重连次数\r\n    if (metrics.reconnectAttempts > this.thresholds.maxReconnectAttempts) {\r\n      this.createAlert(\r\n        AlertLevel.CRITICAL,\r\n        `数据库重连次数过多: ${metrics.reconnectAttempts} (阈值: ${this.thresholds.maxReconnectAttempts})`,\r\n        metrics,\r\n        { threshold: this.thresholds.maxReconnectAttempts, actual: metrics.reconnectAttempts }\r\n      )\r\n    }\r\n\r\n    // 检查运行时间（如果连接状态为已连接但运行时间过短）\r\n    if (metrics.connectionState === ConnectionState.CONNECTED && \r\n        metrics.uptime < this.thresholds.minUptime) {\r\n      this.createAlert(\r\n        AlertLevel.WARNING,\r\n        `数据库连接运行时间过短: ${(metrics.uptime / 1000).toFixed(2)}s (阈值: ${this.thresholds.minUptime / 1000}s)`,\r\n        metrics,\r\n        { threshold: this.thresholds.minUptime, actual: metrics.uptime }\r\n      )\r\n    }\r\n\r\n    // 检查连接状态\r\n    if (metrics.connectionState === ConnectionState.FAILED || \r\n        metrics.connectionState === ConnectionState.DISCONNECTED) {\r\n      this.createAlert(\r\n        AlertLevel.CRITICAL,\r\n        `数据库连接状态异常: ${metrics.connectionState}`,\r\n        metrics\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建告警\r\n   */\r\n  private createAlert(\r\n    level: AlertLevel, \r\n    message: string, \r\n    metrics?: DatabaseMetrics,\r\n    threshold?: any\r\n  ): void {\r\n    const alert: Alert = {\r\n      level,\r\n      message,\r\n      timestamp: new Date(),\r\n      metrics: metrics || this.getCurrentMetrics(),\r\n      threshold\r\n    }\r\n\r\n    this.alerts.push(alert)\r\n\r\n    // 限制告警历史大小\r\n    if (this.alerts.length > 1000) {\r\n      this.alerts = this.alerts.slice(-1000)\r\n    }\r\n\r\n    // 触发告警事件\r\n    this.emit('alert', alert)\r\n\r\n    // 根据级别输出日志\r\n    switch (level) {\r\n      case AlertLevel.INFO:\r\n        console.info(`[DB Monitor] ${message}`)\r\n        break\r\n      case AlertLevel.WARNING:\r\n        console.warn(`[DB Monitor] ${message}`)\r\n        break\r\n      case AlertLevel.ERROR:\r\n        console.error(`[DB Monitor] ${message}`)\r\n        break\r\n      case AlertLevel.CRITICAL:\r\n        console.error(`[DB Monitor] CRITICAL: ${message}`)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前指标\r\n   */\r\n  private getCurrentMetrics(): DatabaseMetrics {\r\n    const stats = enhancedDatabaseManager.getPrismaClient().getStats()\r\n    const memUsage = process.memoryUsage()\r\n    const cpuUsage = process.cpuUsage()\r\n\r\n    return {\r\n      timestamp: new Date(),\r\n      connectionState: stats.state,\r\n      uptime: stats.uptime,\r\n      totalQueries: stats.totalQueries,\r\n      failedQueries: stats.failedQueries,\r\n      successRate: stats.totalQueries > 0 \r\n        ? ((stats.totalQueries - stats.failedQueries) / stats.totalQueries) * 100\r\n        : 100,\r\n      avgLatency: stats.avgLatency,\r\n      reconnectAttempts: stats.reconnectAttempts,\r\n      memoryUsage: {\r\n        rss: memUsage.rss,\r\n        heapUsed: memUsage.heapUsed,\r\n        heapTotal: memUsage.heapTotal,\r\n        external: memUsage.external\r\n      },\r\n      cpuUsage: {\r\n        user: cpuUsage.user / 1000,\r\n        system: cpuUsage.system / 1000\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取指标历史\r\n   */\r\n  getMetricsHistory(limit?: number): DatabaseMetrics[] {\r\n    if (limit) {\r\n      return this.metricsHistory.slice(-limit)\r\n    }\r\n    return [...this.metricsHistory]\r\n  }\r\n\r\n  /**\r\n   * 获取告警历史\r\n   */\r\n  getAlerts(level?: AlertLevel, limit?: number): Alert[] {\r\n    let alerts = level \r\n      ? this.alerts.filter(alert => alert.level === level)\r\n      : [...this.alerts]\r\n\r\n    if (limit) {\r\n      alerts = alerts.slice(-limit)\r\n    }\r\n\r\n    return alerts\r\n  }\r\n\r\n  /**\r\n   * 获取性能统计\r\n   */\r\n  getPerformanceStats(timeRangeMs?: number): {\r\n    avgLatency: number\r\n    maxLatency: number\r\n    minLatency: number\r\n    successRate: number\r\n    totalQueries: number\r\n    failedQueries: number\r\n    uptimePercentage: number\r\n  } {\r\n    let metrics = this.metricsHistory\r\n\r\n    // 如果指定了时间范围，过滤指标\r\n    if (timeRangeMs) {\r\n      const cutoffTime = new Date(Date.now() - timeRangeMs)\r\n      metrics = metrics.filter(m => m.timestamp >= cutoffTime)\r\n    }\r\n\r\n    if (metrics.length === 0) {\r\n      return {\r\n        avgLatency: 0,\r\n        maxLatency: 0,\r\n        minLatency: 0,\r\n        successRate: 100,\r\n        totalQueries: 0,\r\n        failedQueries: 0,\r\n        uptimePercentage: 0\r\n      }\r\n    }\r\n\r\n    const latencies = metrics.map(m => m.avgLatency).filter(l => l > 0)\r\n    const totalQueries = metrics[metrics.length - 1].totalQueries - (metrics[0].totalQueries || 0)\r\n    const failedQueries = metrics[metrics.length - 1].failedQueries - (metrics[0].failedQueries || 0)\r\n    const connectedMetrics = metrics.filter(m => m.connectionState === ConnectionState.CONNECTED)\r\n\r\n    return {\r\n      avgLatency: latencies.length > 0 ? latencies.reduce((a, b) => a + b, 0) / latencies.length : 0,\r\n      maxLatency: latencies.length > 0 ? Math.max(...latencies) : 0,\r\n      minLatency: latencies.length > 0 ? Math.min(...latencies) : 0,\r\n      successRate: totalQueries > 0 ? ((totalQueries - failedQueries) / totalQueries) * 100 : 100,\r\n      totalQueries,\r\n      failedQueries,\r\n      uptimePercentage: (connectedMetrics.length / metrics.length) * 100\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新性能阈值\r\n   */\r\n  updateThresholds(thresholds: Partial<PerformanceThresholds>): void {\r\n    this.thresholds = { ...this.thresholds, ...thresholds }\r\n    console.log('Database monitoring thresholds updated:', this.thresholds)\r\n  }\r\n\r\n  /**\r\n   * 清除历史数据\r\n   */\r\n  clearHistory(): void {\r\n    this.metricsHistory = []\r\n    this.alerts = []\r\n    console.log('Database monitoring history cleared')\r\n  }\r\n\r\n  /**\r\n   * 获取监控状态\r\n   */\r\n  getMonitoringStatus(): {\r\n    isMonitoring: boolean\r\n    intervalMs: number\r\n    metricsCount: number\r\n    alertsCount: number\r\n    thresholds: PerformanceThresholds\r\n  } {\r\n    return {\r\n      isMonitoring: this.isMonitoring,\r\n      intervalMs: this.intervalMs,\r\n      metricsCount: this.metricsHistory.length,\r\n      alertsCount: this.alerts.length,\r\n      thresholds: this.thresholds\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 导出监控数据\r\n   */\r\n  exportData(): {\r\n    metrics: DatabaseMetrics[]\r\n    alerts: Alert[]\r\n    thresholds: PerformanceThresholds\r\n    exportedAt: Date\r\n  } {\r\n    return {\r\n      metrics: this.getMetricsHistory(),\r\n      alerts: this.getAlerts(),\r\n      thresholds: this.thresholds,\r\n      exportedAt: new Date()\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局监控实例\r\nexport const databaseMonitor = new DatabaseMonitor()\r\n\r\n// 导出性能优化组件类型\r\nexport {\r\n  PerformanceOptimizationCoordinator,\r\n  ConnectionPoolAnalyzer,\r\n  DynamicPoolAdjuster,\r\n  QueryPerformanceOptimizer,\r\n  IntelligentCacheManager,\r\n  CacheStrategyOptimizer,\r\n  PerformanceMonitorEnhancer\r\n}\r\n\r\n// 如果启用了监控，自动开始监控\r\nif (process.env.DB_MONITORING_ENABLED === 'true') {\r\n  databaseMonitor.startMonitoring()\r\n  \r\n  // 监听告警事件\r\n  databaseMonitor.on('alert', (alert: Alert) => {\r\n    // 这里可以集成外部告警系统，如邮件、Slack、钉钉等\r\n    if (alert.level === AlertLevel.CRITICAL) {\r\n      console.error('CRITICAL DATABASE ALERT:', alert.message)\r\n      // 可以在这里发送紧急通知\r\n    }\r\n  })\r\n  \r\n  // 监听指标事件\r\n  databaseMonitor.on('metrics', (metrics: DatabaseMetrics) => {\r\n    // 这里可以将指标发送到外部监控系统，如Prometheus、InfluxDB等\r\n    if (process.env.DB_METRICS_COLLECTION === 'true') {\r\n      // 发送指标到外部系统\r\n    }\r\n  })\r\n}\r\n\r\n// 导出便捷函数\r\nexport const startDatabaseMonitoring = () => databaseMonitor.startMonitoring()\r\nexport const stopDatabaseMonitoring = () => databaseMonitor.stopMonitoring()\r\nexport const getDatabaseMetrics = () => databaseMonitor.getMetricsHistory(1)[0]\r\nexport const getDatabaseAlerts = (level?: AlertLevel) => databaseMonitor.getAlerts(level)\r\nexport const getDatabasePerformanceStats = (timeRangeMs?: number) => \r\n  databaseMonitor.getPerformanceStats(timeRangeMs)\r\n\r\n// 默认导出监控器\r\nexport default databaseMonitor"],"version":3}