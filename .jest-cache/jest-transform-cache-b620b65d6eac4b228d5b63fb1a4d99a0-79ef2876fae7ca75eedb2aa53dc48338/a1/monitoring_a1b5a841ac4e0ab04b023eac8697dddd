a8646abccf5a14d963544d9e50422014
"use strict";
/**
 * @file Database Connection Monitoring
 * @description 数据库连接监控和指标收集工具
 * @author ZK-Agent Team
 * @date 2024-12-19
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDatabasePerformanceStats = exports.getDatabaseAlerts = exports.getDatabaseMetrics = exports.stopDatabaseMonitoring = exports.startDatabaseMonitoring = exports.PerformanceMonitorEnhancer = exports.CacheStrategyOptimizer = exports.IntelligentCacheManager = exports.QueryPerformanceOptimizer = exports.DynamicPoolAdjuster = exports.ConnectionPoolAnalyzer = exports.PerformanceOptimizationCoordinator = exports.databaseMonitor = exports.DatabaseMonitor = exports.AlertLevel = void 0;
const enhanced_connection_1 = require("./enhanced-connection");
const events_1 = require("events");
const performance_optimization_coordinator_1 = require("./performance-optimization-coordinator");
Object.defineProperty(exports, "PerformanceOptimizationCoordinator", { enumerable: true, get: function () { return performance_optimization_coordinator_1.PerformanceOptimizationCoordinator; } });
const connection_pool_analyzer_1 = require("./connection-pool-analyzer");
Object.defineProperty(exports, "ConnectionPoolAnalyzer", { enumerable: true, get: function () { return connection_pool_analyzer_1.ConnectionPoolAnalyzer; } });
const dynamic_pool_adjuster_1 = require("./dynamic-pool-adjuster");
Object.defineProperty(exports, "DynamicPoolAdjuster", { enumerable: true, get: function () { return dynamic_pool_adjuster_1.DynamicPoolAdjuster; } });
const query_performance_optimizer_1 = require("./query-performance-optimizer");
Object.defineProperty(exports, "QueryPerformanceOptimizer", { enumerable: true, get: function () { return query_performance_optimizer_1.QueryPerformanceOptimizer; } });
const intelligent_cache_manager_1 = require("./intelligent-cache-manager");
Object.defineProperty(exports, "IntelligentCacheManager", { enumerable: true, get: function () { return intelligent_cache_manager_1.IntelligentCacheManager; } });
const cache_strategy_optimizer_1 = require("./cache-strategy-optimizer");
Object.defineProperty(exports, "CacheStrategyOptimizer", { enumerable: true, get: function () { return cache_strategy_optimizer_1.CacheStrategyOptimizer; } });
const performance_monitor_enhancer_1 = require("./performance-monitor-enhancer");
Object.defineProperty(exports, "PerformanceMonitorEnhancer", { enumerable: true, get: function () { return performance_monitor_enhancer_1.PerformanceMonitorEnhancer; } });
// 告警级别
var AlertLevel;
(function (AlertLevel) {
    AlertLevel["INFO"] = "info";
    AlertLevel["WARNING"] = "warning";
    AlertLevel["ERROR"] = "error";
    AlertLevel["CRITICAL"] = "critical";
})(AlertLevel || (exports.AlertLevel = AlertLevel = {}));
/**
 * 数据库监控器
 */
class DatabaseMonitor extends events_1.EventEmitter {
    constructor(thresholds, intervalMs = 30000, maxHistorySize = 100) {
        super();
        this.isMonitoring = false;
        this.monitoringInterval = null;
        this.metricsHistory = [];
        this.alerts = [];
        this.lastCpuUsage = null;
        // 默认性能阈值
        this.thresholds = {
            maxLatency: parseInt(process.env.DB_MAX_LATENCY || '1000'),
            maxFailureRate: parseFloat(process.env.DB_MAX_FAILURE_RATE || '5'),
            maxReconnectAttempts: parseInt(process.env.DB_MAX_RECONNECT_ATTEMPTS || '5'),
            minUptime: parseInt(process.env.DB_MIN_UPTIME || '60000'),
            ...thresholds
        };
        this.intervalMs = intervalMs;
        this.maxHistorySize = maxHistorySize;
        // 初始化性能优化组件
        this.initializeOptimizationComponents();
        // 监听数据库事件
        this.setupDatabaseEventListeners();
    }
    /**
     * 初始化性能优化组件
     */
    initializeOptimizationComponents() {
        try {
            // 初始化连接池分析器
            this.poolAnalyzer = new connection_pool_analyzer_1.ConnectionPoolAnalyzer({
                analysisInterval: 60000, // 1分钟分析一次
                historySize: 100,
                enableRealtimeMonitoring: true
            });
            // 初始化动态连接池调整器
            this.dynamicAdjuster = new dynamic_pool_adjuster_1.DynamicPoolAdjuster({
                adjustmentInterval: 120000, // 2分钟调整一次
                cooldownPeriod: 300000, // 5分钟冷却期
                enablePredictiveAdjustment: true,
                maxAdjustmentPercentage: 20
            });
            // 初始化查询性能优化器
            this.queryOptimizer = new query_performance_optimizer_1.QueryPerformanceOptimizer({
                slowQueryThreshold: 1000, // 1秒
                enableQueryCache: true,
                cacheSize: 1000,
                enableOptimizationSuggestions: true
            });
            // 初始化智能缓存管理器
            this.cacheManager = new intelligent_cache_manager_1.IntelligentCacheManager({
                l1Config: {
                    maxSize: 1000,
                    ttl: 300000 // 5分钟
                },
                l2Config: {
                    host: process.env.REDIS_HOST || 'localhost',
                    port: parseInt(process.env.REDIS_PORT || '6379'),
                    ttl: 3600000 // 1小时
                },
                enablePrewarming: true,
                enableDistributedConsistency: true
            });
            // 初始化缓存策略优化器
            this.cacheOptimizer = new cache_strategy_optimizer_1.CacheStrategyOptimizer({
                optimizationInterval: 300000, // 5分钟
                enableABTesting: true,
                enableMLOptimization: true,
                strategyEvaluationPeriod: 3600000 // 1小时
            });
            // 初始化性能监控增强器
            this.monitorEnhancer = new performance_monitor_enhancer_1.PerformanceMonitorEnhancer({
                metricsCollectionInterval: 30000, // 30秒
                anomalyDetectionEnabled: true,
                trendAnalysisEnabled: true,
                autoOptimizationEnabled: true
            });
            // 初始化性能优化协调器
            this.optimizationCoordinator = new performance_optimization_coordinator_1.PerformanceOptimizationCoordinator({
                healthCheckInterval: 60000, // 1分钟
                optimizationEvaluationInterval: 300000, // 5分钟
                enableAutoOptimization: true,
                maxConcurrentOptimizations: 3
            });
            // 注册组件到协调器
            this.optimizationCoordinator.registerComponent('poolAnalyzer', this.poolAnalyzer);
            this.optimizationCoordinator.registerComponent('dynamicAdjuster', this.dynamicAdjuster);
            this.optimizationCoordinator.registerComponent('queryOptimizer', this.queryOptimizer);
            this.optimizationCoordinator.registerComponent('cacheManager', this.cacheManager);
            this.optimizationCoordinator.registerComponent('cacheOptimizer', this.cacheOptimizer);
            this.optimizationCoordinator.registerComponent('monitorEnhancer', this.monitorEnhancer);
            // 设置组件间的事件监听
            this.setupOptimizationEventListeners();
            console.log('Performance optimization components initialized successfully');
        }
        catch (error) {
            console.error('Failed to initialize optimization components:', error);
            this.createAlert(AlertLevel.ERROR, `性能优化组件初始化失败: ${error}`);
        }
    }
    /**
     * 设置优化组件事件监听器
     */
    setupOptimizationEventListeners() {
        // 监听连接池分析完成事件
        this.poolAnalyzer.on('analysisComplete', (analysis) => {
            this.emit('poolAnalysis', analysis);
            // 触发动态调整器评估
            this.dynamicAdjuster.triggerImmediateAdjustment();
        });
        // 监听动态调整完成事件
        this.dynamicAdjuster.on('adjustmentComplete', (result) => {
            this.emit('poolAdjustment', result);
            this.createAlert(AlertLevel.INFO, `连接池动态调整完成: ${result.description}`);
        });
        // 监听查询优化事件
        this.queryOptimizer.on('slowQueryDetected', (query) => {
            this.createAlert(AlertLevel.WARNING, `检测到慢查询: ${query.template} (${query.executionTime}ms)`);
        });
        this.queryOptimizer.on('optimizationSuggestion', (suggestion) => {
            this.emit('optimizationSuggestion', suggestion);
        });
        // 监听缓存事件
        this.cacheManager.on('cacheHit', (key, level) => {
            this.emit('cacheHit', { key, level });
        });
        this.cacheManager.on('cacheMiss', (key) => {
            this.emit('cacheMiss', { key });
        });
        // 监听缓存策略优化事件
        this.cacheOptimizer.on('strategyOptimized', (result) => {
            this.emit('cacheStrategyOptimized', result);
            this.createAlert(AlertLevel.INFO, `缓存策略优化完成: ${result.description}`);
        });
        // 监听性能监控增强器事件
        this.monitorEnhancer.on('anomalyDetected', (anomaly) => {
            this.createAlert(AlertLevel.WARNING, `性能异常检测: ${anomaly.description}`);
        });
        this.monitorEnhancer.on('optimizationRecommendation', (recommendation) => {
            this.emit('optimizationRecommendation', recommendation);
        });
        // 监听协调器事件
        this.optimizationCoordinator.on('optimizationComplete', (result) => {
            this.emit('coordinatedOptimization', result);
            this.createAlert(AlertLevel.INFO, `协调优化完成: ${result.description}`);
        });
        this.optimizationCoordinator.on('criticalAlert', (alert) => {
            this.createAlert(AlertLevel.CRITICAL, `关键性能告警: ${alert.message}`);
        });
    }
    /**
     * 设置数据库事件监听器
     */
    setupDatabaseEventListeners() {
        enhancedDatabaseManager.getPrismaClient().on('connected', () => {
            this.createAlert(AlertLevel.INFO, '数据库连接成功建立');
        });
        enhancedDatabaseManager.getPrismaClient().on('disconnected', (error) => {
            const message = error ? `数据库连接断开: ${error.message}` : '数据库连接断开';
            this.createAlert(AlertLevel.WARNING, message);
        });
        enhancedDatabaseManager.getPrismaClient().on('reconnecting', (attempt) => {
            this.createAlert(AlertLevel.WARNING, `数据库重连中 (第${attempt}次尝试)`);
        });
        enhancedDatabaseManager.getPrismaClient().on('reconnected', () => {
            this.createAlert(AlertLevel.INFO, '数据库重连成功');
        });
        enhancedDatabaseManager.getPrismaClient().on('error', (error) => {
            this.createAlert(AlertLevel.ERROR, `数据库错误: ${error.message}`);
        });
        enhancedDatabaseManager.getPrismaClient().on('healthCheck', (healthy) => {
            if (!healthy) {
                this.createAlert(AlertLevel.WARNING, '数据库健康检查失败');
            }
        });
    }
    /**
     * 开始监控
     */
    startMonitoring() {
        if (this.isMonitoring) {
            console.log('Database monitoring is already running');
            return;
        }
        console.log(`Starting database monitoring (interval: ${this.intervalMs}ms)`);
        this.isMonitoring = true;
        this.lastCpuUsage = process.cpuUsage();
        // 启动所有性能优化组件
        this.startOptimizationComponents();
        this.monitoringInterval = setInterval(() => {
            this.collectMetrics();
        }, this.intervalMs);
        // 立即收集一次指标
        this.collectMetrics();
    }
    /**
     * 停止监控
     */
    stopMonitoring() {
        if (!this.isMonitoring) {
            return;
        }
        console.log('Stopping database monitoring');
        this.isMonitoring = false;
        // 停止所有性能优化组件
        this.stopOptimizationComponents();
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
        }
    }
    /**
     * 启动所有性能优化组件
     */
    startOptimizationComponents() {
        try {
            console.log('Starting performance optimization components...');
            // 启动协调器（会自动启动所有注册的组件）
            this.optimizationCoordinator.start();
            console.log('All performance optimization components started successfully');
        }
        catch (error) {
            console.error('Failed to start optimization components:', error);
            this.createAlert(AlertLevel.ERROR, `性能优化组件启动失败: ${error}`);
        }
    }
    /**
     * 停止所有性能优化组件
     */
    stopOptimizationComponents() {
        try {
            console.log('Stopping performance optimization components...');
            // 停止协调器（会自动停止所有注册的组件）
            this.optimizationCoordinator.stop();
            console.log('All performance optimization components stopped successfully');
        }
        catch (error) {
            console.error('Failed to stop optimization components:', error);
            this.createAlert(AlertLevel.ERROR, `性能优化组件停止失败: ${error}`);
        }
    }
    /**
     * 获取性能优化状态
     */
    getOptimizationStatus() {
        return {
            coordinator: this.optimizationCoordinator?.getStatus() || null,
            poolAnalyzer: this.poolAnalyzer?.getStatus() || null,
            dynamicAdjuster: this.dynamicAdjuster?.getStatus() || null,
            queryOptimizer: this.queryOptimizer?.getStatus() || null,
            cacheManager: this.cacheManager?.getStatus() || null,
            cacheOptimizer: this.cacheOptimizer?.getStatus() || null,
            monitorEnhancer: this.monitorEnhancer?.getStatus() || null
        };
    }
    /**
     * 手动触发性能优化
     */
    triggerOptimization(strategy) {
        try {
            if (strategy) {
                this.optimizationCoordinator.executeStrategy(strategy);
            }
            else {
                this.optimizationCoordinator.triggerOptimizationEvaluation();
            }
            this.createAlert(AlertLevel.INFO, `手动触发性能优化${strategy ? `: ${strategy}` : ''}`);
        }
        catch (error) {
            console.error('Failed to trigger optimization:', error);
            this.createAlert(AlertLevel.ERROR, `手动优化触发失败: ${error}`);
        }
    }
    /**
     * 获取优化建议
     */
    getOptimizationRecommendations() {
        const recommendations = [];
        try {
            // 从各个组件收集优化建议
            if (this.poolAnalyzer) {
                const poolRecommendations = this.poolAnalyzer.generateOptimizationRecommendations();
                recommendations.push(...poolRecommendations);
            }
            if (this.queryOptimizer) {
                const queryRecommendations = this.queryOptimizer.getOptimizationSuggestions();
                recommendations.push(...queryRecommendations);
            }
            if (this.cacheOptimizer) {
                const cacheRecommendations = this.cacheOptimizer.generateOptimizationRecommendations();
                recommendations.push(...cacheRecommendations);
            }
            if (this.monitorEnhancer) {
                const monitorRecommendations = this.monitorEnhancer.generateOptimizationRecommendations();
                recommendations.push(...monitorRecommendations);
            }
        }
        catch (error) {
            console.error('Failed to get optimization recommendations:', error);
        }
        return recommendations;
    }
    /**
     * 收集指标
     */
    collectMetrics() {
        try {
            const stats = enhancedDatabaseManager.getPrismaClient().getStats();
            const memUsage = process.memoryUsage();
            const cpuUsage = process.cpuUsage(this.lastCpuUsage || undefined);
            this.lastCpuUsage = process.cpuUsage();
            const metrics = {
                timestamp: new Date(),
                connectionState: stats.state,
                uptime: stats.uptime,
                totalQueries: stats.totalQueries,
                failedQueries: stats.failedQueries,
                successRate: stats.totalQueries > 0
                    ? ((stats.totalQueries - stats.failedQueries) / stats.totalQueries) * 100
                    : 100,
                avgLatency: stats.avgLatency,
                reconnectAttempts: stats.reconnectAttempts,
                memoryUsage: {
                    rss: memUsage.rss,
                    heapUsed: memUsage.heapUsed,
                    heapTotal: memUsage.heapTotal,
                    external: memUsage.external
                },
                cpuUsage: {
                    user: cpuUsage.user / 1000, // 转换为毫秒
                    system: cpuUsage.system / 1000
                }
            };
            // 添加到历史记录
            this.addMetricsToHistory(metrics);
            // 检查性能阈值
            this.checkPerformanceThresholds(metrics);
            // 触发指标收集事件
            this.emit('metrics', metrics);
        }
        catch (error) {
            console.error('Failed to collect database metrics:', error);
            this.createAlert(AlertLevel.ERROR, `指标收集失败: ${error}`);
        }
    }
    /**
     * 添加指标到历史记录
     */
    addMetricsToHistory(metrics) {
        this.metricsHistory.push(metrics);
        // 限制历史记录大小
        if (this.metricsHistory.length > this.maxHistorySize) {
            this.metricsHistory = this.metricsHistory.slice(-this.maxHistorySize);
        }
    }
    /**
     * 检查性能阈值
     */
    checkPerformanceThresholds(metrics) {
        // 检查延迟
        if (metrics.avgLatency > this.thresholds.maxLatency) {
            this.createAlert(AlertLevel.WARNING, `数据库平均延迟过高: ${metrics.avgLatency.toFixed(2)}ms (阈值: ${this.thresholds.maxLatency}ms)`, metrics, { threshold: this.thresholds.maxLatency, actual: metrics.avgLatency });
        }
        // 检查失败率
        if (metrics.successRate < (100 - this.thresholds.maxFailureRate)) {
            this.createAlert(AlertLevel.ERROR, `数据库查询失败率过高: ${(100 - metrics.successRate).toFixed(2)}% (阈值: ${this.thresholds.maxFailureRate}%)`, metrics, { threshold: this.thresholds.maxFailureRate, actual: 100 - metrics.successRate });
        }
        // 检查重连次数
        if (metrics.reconnectAttempts > this.thresholds.maxReconnectAttempts) {
            this.createAlert(AlertLevel.CRITICAL, `数据库重连次数过多: ${metrics.reconnectAttempts} (阈值: ${this.thresholds.maxReconnectAttempts})`, metrics, { threshold: this.thresholds.maxReconnectAttempts, actual: metrics.reconnectAttempts });
        }
        // 检查运行时间（如果连接状态为已连接但运行时间过短）
        if (metrics.connectionState === enhanced_connection_1.ConnectionState.CONNECTED &&
            metrics.uptime < this.thresholds.minUptime) {
            this.createAlert(AlertLevel.WARNING, `数据库连接运行时间过短: ${(metrics.uptime / 1000).toFixed(2)}s (阈值: ${this.thresholds.minUptime / 1000}s)`, metrics, { threshold: this.thresholds.minUptime, actual: metrics.uptime });
        }
        // 检查连接状态
        if (metrics.connectionState === enhanced_connection_1.ConnectionState.FAILED ||
            metrics.connectionState === enhanced_connection_1.ConnectionState.DISCONNECTED) {
            this.createAlert(AlertLevel.CRITICAL, `数据库连接状态异常: ${metrics.connectionState}`, metrics);
        }
    }
    /**
     * 创建告警
     */
    createAlert(level, message, metrics, threshold) {
        const alert = {
            level,
            message,
            timestamp: new Date(),
            metrics: metrics || this.getCurrentMetrics(),
            threshold
        };
        this.alerts.push(alert);
        // 限制告警历史大小
        if (this.alerts.length > 1000) {
            this.alerts = this.alerts.slice(-1000);
        }
        // 触发告警事件
        this.emit('alert', alert);
        // 根据级别输出日志
        switch (level) {
            case AlertLevel.INFO:
                console.info(`[DB Monitor] ${message}`);
                break;
            case AlertLevel.WARNING:
                console.warn(`[DB Monitor] ${message}`);
                break;
            case AlertLevel.ERROR:
                console.error(`[DB Monitor] ${message}`);
                break;
            case AlertLevel.CRITICAL:
                console.error(`[DB Monitor] CRITICAL: ${message}`);
                break;
        }
    }
    /**
     * 获取当前指标
     */
    getCurrentMetrics() {
        const stats = enhancedDatabaseManager.getPrismaClient().getStats();
        const memUsage = process.memoryUsage();
        const cpuUsage = process.cpuUsage();
        return {
            timestamp: new Date(),
            connectionState: stats.state,
            uptime: stats.uptime,
            totalQueries: stats.totalQueries,
            failedQueries: stats.failedQueries,
            successRate: stats.totalQueries > 0
                ? ((stats.totalQueries - stats.failedQueries) / stats.totalQueries) * 100
                : 100,
            avgLatency: stats.avgLatency,
            reconnectAttempts: stats.reconnectAttempts,
            memoryUsage: {
                rss: memUsage.rss,
                heapUsed: memUsage.heapUsed,
                heapTotal: memUsage.heapTotal,
                external: memUsage.external
            },
            cpuUsage: {
                user: cpuUsage.user / 1000,
                system: cpuUsage.system / 1000
            }
        };
    }
    /**
     * 获取指标历史
     */
    getMetricsHistory(limit) {
        if (limit) {
            return this.metricsHistory.slice(-limit);
        }
        return [...this.metricsHistory];
    }
    /**
     * 获取告警历史
     */
    getAlerts(level, limit) {
        let alerts = level
            ? this.alerts.filter(alert => alert.level === level)
            : [...this.alerts];
        if (limit) {
            alerts = alerts.slice(-limit);
        }
        return alerts;
    }
    /**
     * 获取性能统计
     */
    getPerformanceStats(timeRangeMs) {
        let metrics = this.metricsHistory;
        // 如果指定了时间范围，过滤指标
        if (timeRangeMs) {
            const cutoffTime = new Date(Date.now() - timeRangeMs);
            metrics = metrics.filter(m => m.timestamp >= cutoffTime);
        }
        if (metrics.length === 0) {
            return {
                avgLatency: 0,
                maxLatency: 0,
                minLatency: 0,
                successRate: 100,
                totalQueries: 0,
                failedQueries: 0,
                uptimePercentage: 0
            };
        }
        const latencies = metrics.map(m => m.avgLatency).filter(l => l > 0);
        const totalQueries = metrics[metrics.length - 1].totalQueries - (metrics[0].totalQueries || 0);
        const failedQueries = metrics[metrics.length - 1].failedQueries - (metrics[0].failedQueries || 0);
        const connectedMetrics = metrics.filter(m => m.connectionState === enhanced_connection_1.ConnectionState.CONNECTED);
        return {
            avgLatency: latencies.length > 0 ? latencies.reduce((a, b) => a + b, 0) / latencies.length : 0,
            maxLatency: latencies.length > 0 ? Math.max(...latencies) : 0,
            minLatency: latencies.length > 0 ? Math.min(...latencies) : 0,
            successRate: totalQueries > 0 ? ((totalQueries - failedQueries) / totalQueries) * 100 : 100,
            totalQueries,
            failedQueries,
            uptimePercentage: (connectedMetrics.length / metrics.length) * 100
        };
    }
    /**
     * 更新性能阈值
     */
    updateThresholds(thresholds) {
        this.thresholds = { ...this.thresholds, ...thresholds };
        console.log('Database monitoring thresholds updated:', this.thresholds);
    }
    /**
     * 清除历史数据
     */
    clearHistory() {
        this.metricsHistory = [];
        this.alerts = [];
        console.log('Database monitoring history cleared');
    }
    /**
     * 获取监控状态
     */
    getMonitoringStatus() {
        return {
            isMonitoring: this.isMonitoring,
            intervalMs: this.intervalMs,
            metricsCount: this.metricsHistory.length,
            alertsCount: this.alerts.length,
            thresholds: this.thresholds
        };
    }
    /**
     * 导出监控数据
     */
    exportData() {
        return {
            metrics: this.getMetricsHistory(),
            alerts: this.getAlerts(),
            thresholds: this.thresholds,
            exportedAt: new Date()
        };
    }
}
exports.DatabaseMonitor = DatabaseMonitor;
// 创建全局监控实例
exports.databaseMonitor = new DatabaseMonitor();
// 如果启用了监控，自动开始监控
if (process.env.DB_MONITORING_ENABLED === 'true') {
    exports.databaseMonitor.startMonitoring();
    // 监听告警事件
    exports.databaseMonitor.on('alert', (alert) => {
        // 这里可以集成外部告警系统，如邮件、Slack、钉钉等
        if (alert.level === AlertLevel.CRITICAL) {
            console.error('CRITICAL DATABASE ALERT:', alert.message);
            // 可以在这里发送紧急通知
        }
    });
    // 监听指标事件
    exports.databaseMonitor.on('metrics', (metrics) => {
        // 这里可以将指标发送到外部监控系统，如Prometheus、InfluxDB等
        if (process.env.DB_METRICS_COLLECTION === 'true') {
            // 发送指标到外部系统
        }
    });
}
// 导出便捷函数
const startDatabaseMonitoring = () => exports.databaseMonitor.startMonitoring();
exports.startDatabaseMonitoring = startDatabaseMonitoring;
const stopDatabaseMonitoring = () => exports.databaseMonitor.stopMonitoring();
exports.stopDatabaseMonitoring = stopDatabaseMonitoring;
const getDatabaseMetrics = () => exports.databaseMonitor.getMetricsHistory(1)[0];
exports.getDatabaseMetrics = getDatabaseMetrics;
const getDatabaseAlerts = (level) => exports.databaseMonitor.getAlerts(level);
exports.getDatabaseAlerts = getDatabaseAlerts;
const getDatabasePerformanceStats = (timeRangeMs) => exports.databaseMonitor.getPerformanceStats(timeRangeMs);
exports.getDatabasePerformanceStats = getDatabasePerformanceStats;
// 默认导出监控器
exports.default = exports.databaseMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,