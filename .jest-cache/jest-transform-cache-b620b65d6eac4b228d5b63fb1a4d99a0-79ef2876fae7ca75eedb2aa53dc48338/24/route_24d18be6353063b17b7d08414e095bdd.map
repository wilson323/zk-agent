{"version":3,"names":["cov_8zqxi6uzw","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","zod_1","connection_1","__importDefault","password_1","jwt_1","registerSchema","z","object","email","string","password","min","optional","inviteCode","exports","POST","createApiRoute","RouteConfigs","protectedPost","req","params","validatedBody","validatedQuery","user","requestId","body","json","validationResult","safeParse","success","ApiResponseWrapper","error","errors","message","status","data","passwordValidation","validatePassword","isValid","existingUser","default","findUnique","where","toLowerCase","process","env","REQUIRE_INVITE_CODE","hashedPassword","hashPassword","newUser","create","split","select","id","avatar","createdAt","updatedAt","tokens","generateTokenPair","role","usageStats","userId","agentType","action","metadata","userAgent","headers","get","ip","catch","console","response"],"sources":["E:\\zk-agent\\app\\api\\auth\\register\\route.ts"],"sourcesContent":["/**\n * @file auth\\register\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { z } from \"zod\"\nimport prisma from \"@/lib/database/connection\"\nimport { hashPassword, validatePassword } from \"@/lib/auth/password\"\nimport { generateTokenPair } from \"@/lib/auth/jwt\"\nimport type { RegisterRequest, LoginResponse } from \"@/types/auth\"\n\nconst registerSchema = z.object({\n  email: z.string().email(\"请输入有效的邮箱地址\"),\n  password: z.string().min(8, \"密码至少需要8个字符\"),\n  name: z.string().optional(),\n  inviteCode: z.string().optional()\n})\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    const body: RegisterRequest = await req.json()\n    \n    // 验证请求数据\n    const validationResult = registerSchema.safeParse(body)\n    if (!validationResult.success) {\n      return ApiResponseWrapper.success(\n        {\n          success: false,\n          error: validationResult.error.errors[0].message,\n        } as LoginResponse,\n        { status: 400 },\n      )\n    }\n\n    const { email, password, name, inviteCode } = validationResult.data\n\n    // 验证密码强度\n    const passwordValidation = validatePassword(password)\n    if (!passwordValidation.isValid) {\n      return ApiResponseWrapper.success(\n        {\n          success: false,\n          error: passwordValidation.errors[0],\n        } as LoginResponse,\n        { status: 400 },\n      )\n    }\n\n    // 检查邮箱是否已存在\n    const existingUser = await prisma.user.findUnique({\n      where: { email: email.toLowerCase() },\n    })\n\n    if (existingUser) {\n      return ApiResponseWrapper.success(\n        {\n          success: false,\n          error: \"该邮箱已被注册\",\n        } as LoginResponse,\n        { status: 409 },\n      )\n    }\n\n    // 验证邀请码（如果需要）\n    if (process.env.REQUIRE_INVITE_CODE === \"true\" && !inviteCode) {\n      return ApiResponseWrapper.success(\n        {\n          success: false,\n          error: \"请提供有效的邀请码\",\n        } as LoginResponse,\n        { status: 400 },\n      )\n    }\n\n    // 加密密码\n    const hashedPassword = await hashPassword(password)\n\n    // 创建用户\n    const newUser = await prisma.user.create({\n      data: {\n        email: email.toLowerCase(),\n        name: name || email.split(\"@\")[0],\n        // password: hashedPassword, // 需要在schema中添加password字段\n        // role: 'user', // 需要在schema中添加role字段\n      },\n      select: {\n        id: true,\n        email: true,\n        name: true,\n        avatar: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    })\n\n    // 生成令牌\n    const tokens = generateTokenPair({\n      id: newUser.id,\n      email: newUser.email,\n      role: \"user\",\n    })\n\n    // 记录注册日志\n    await prisma.usageStats\n      .create({\n        data: {\n          userId: newUser.id,\n          agentType: \"auth\",\n          action: \"register\",\n          metadata: {\n            userAgent: req.headers.get(\"user-agent\"),\n            ip: req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\"),\n            inviteCode,\n          },\n        },\n      })\n      .catch((error) => {\n        console.error(\"Failed to log registration:\", error)\n      })\n\n    const response: LoginResponse = {\n      success: true,\n      user: {\n        id: newUser.id,\n        email: newUser.email,\n        name: newUser.name,\n        avatar: newUser.avatar,\n        role: \"user\",\n        createdAt: newUser.createdAt,\n        updatedAt: newUser.updatedAt,\n      },\n      tokens,\n    }\n\n    return ApiResponseWrapper.success(response)\n  }\n);\n\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UA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","ignoreList":[]}