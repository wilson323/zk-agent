{"version":3,"names":["cov_16xxh5eegb","actualCoverage","s","rxjs_1","require","operators_1","uuid_1","EnhancedFastGPTClient","constructor","config","f","connectionStatus$","BehaviorSubject","isConnected","lastPing","latency","errorCount","retryCount","contextCache","Map","messageQueue","isProcessing","startHealthCheck","getConnectionStatus","asObservable","initializeContext","appId","userId","systemPrompt","sessionId","v4","response","makeRequest","method","body","JSON","stringify","data","json","context","messages","variables","b","maxContextLength","welcomeMessage","push","id","role","content","timestamp","Date","metadata","isWelcome","set","error","console","Error","message","sendMessage","files","Observable","observer","get","userMessage","map","name","undefined","manageContext","prepareMessages","requestBody","chatId","stream","detail","system","streamRequest","pipe","timeout","retry","count","maxRetries","delay","warn","updateConnectionStatus","Promise","resolve","setTimeout","retryDelay","catchError","value","subscribe","next","isComplete","assistantMessage","complete","calculateContextLength","log","importantMessages","filter","msg","isImportant","recentMessages","slice","preservedMessages","some","im","sort","a","getTime","summaryContent","createContextSummary","summaryMessage","isSummary","length","reduce","total","topics","Set","keyPoints","forEach","words","split","word","add","substring","Array","from","join","endpoint","responseId","accumulatedContent","fetch","headers","then","ok","status","statusText","reader","getReader","decoder","TextDecoder","buffer","processChunk","done","read","delta","decode","lines","pop","line","trim","startsWith","parsed","parse","choices","e","catch","options","lastError","attempt","updates","current","setInterval","start","now","getContext","clearContext","delete","getActiveSessions","keys","exportChatHistory","markMessageAsImportant","messageId","find","m","exports","defaultFastGPTConfig","apiKey","process","env","FASTGPT_API_KEY","baseUrl","FASTGPT_API_URL","useProxy","enhancedFastGPTClient"],"sources":["E:\\zk-agent\\lib\\api\\enhanced-fastgpt-client.ts"],"sourcesContent":["// @ts-nocheck\n/// <reference lib=\"dom\" />\nimport { Observable, BehaviorSubject } from \"rxjs\"\nimport { retry, catchError, timeout } from \"rxjs/operators\"\nimport { v4 as uuidv4 } from \"uuid\"\n\nexport interface FastGPTConfig {\n  apiKey: string\n  baseUrl: string\n  useProxy: boolean\n  timeout: number\n  maxRetries: number\n  retryDelay: number\n}\n\nexport interface ChatMessage {\n  id: string\n  role: \"user\" | \"assistant\" | \"system\"\n  content: string\n  timestamp: Date\n  metadata?: Record<string, any>\n}\n\nexport interface ChatContext {\n  sessionId: string\n  appId: string\n  userId: string\n  messages: ChatMessage[]\n  variables: Record<string, any>\n  systemPrompt?: string\n  maxContextLength: number\n}\n\nexport interface StreamResponse {\n  id: string\n  content: string\n  delta: string\n  isComplete: boolean\n  metadata?: Record<string, any>\n}\n\nexport interface ConnectionStatus {\n  isConnected: boolean\n  lastPing: Date | null\n  latency: number\n  errorCount: number\n  retryCount: number\n}\n\n/**\n * 增强的FastGPT客户端\n * 支持上下文记忆、错误重试、连接监控等高级功能\n */\nexport class EnhancedFastGPTClient {\n  private config: FastGPTConfig\n  private connectionStatus$ = new BehaviorSubject<ConnectionStatus>({\n    isConnected: false,\n    lastPing: null,\n    latency: 0,\n    errorCount: 0,\n    retryCount: 0,\n  })\n\n  private contextCache = new Map<string, ChatContext>()\n  private messageQueue: Array<{ context: ChatContext; resolve: Function; reject: Function }> = []\n  private isProcessing = false\n\n  constructor(config: FastGPTConfig) {\n    this.config = config\n    this.startHealthCheck()\n  }\n\n  /**\n   * 获取连接状态\n   */\n  getConnectionStatus(): Observable<ConnectionStatus> {\n    return this.connectionStatus$.asObservable()\n  }\n\n  /**\n   * 初始化聊天上下文\n   */\n  async initializeContext(appId: string, userId: string, systemPrompt?: string): Promise<ChatContext> {\n    const sessionId = uuidv4()\n\n    try {\n      // 调用FastGPT初始化接口\n      const response = await this.makeRequest(\"/api/fastgpt/init-chat\", {\n        method: \"POST\",\n        body: JSON.stringify({ appId, userId, systemPrompt }),\n      })\n\n      const data = await response.json()\n\n      const context: ChatContext = {\n        sessionId,\n        appId,\n        userId,\n        messages: [],\n        variables: data.variables || {},\n        systemPrompt: systemPrompt || data.systemPrompt,\n        maxContextLength: 4000, // 可配置的上下文长度限制\n      }\n\n      // 添加欢迎消息\n      if (data.welcomeMessage) {\n        context.messages.push({\n          id: uuidv4(),\n          role: \"assistant\",\n          content: data.welcomeMessage,\n          timestamp: new Date(),\n          metadata: { isWelcome: true },\n        })\n      }\n\n      // 缓存上下文\n      this.contextCache.set(sessionId, context)\n\n      return context\n    } catch (error) {\n      console.error(\"Failed to initialize context:\", error)\n      throw new Error(`Context initialization failed: ${error.message}`)\n    }\n  }\n\n  /**\n   * 发送消息并获取流式响应\n   */\n  sendMessage(sessionId: string, content: string, files?: File[]): Observable<StreamResponse> {\n    return new Observable((observer) => {\n      const context = this.contextCache.get(sessionId)\n      if (!context) {\n        observer.error(new Error(\"Context not found\"))\n        return\n      }\n\n      // 添加用户消息到上下文\n      const userMessage: ChatMessage = {\n        id: uuidv4(),\n        role: \"user\",\n        content,\n        timestamp: new Date(),\n        metadata: files ? { files: files.map((f) => f.name) } : undefined,\n      }\n\n      context.messages.push(userMessage)\n\n      // 智能上下文管理\n      this.manageContext(context)\n\n      // 准备API请求\n      const messages = this.prepareMessages(context)\n      const requestBody = {\n        appId: context.appId,\n        chatId: sessionId,\n        messages,\n        stream: true,\n        detail: true,\n        system: context.systemPrompt,\n        variables: context.variables,\n        userId: context.userId,\n      }\n\n      // 发送请求\n      this.streamRequest(\"/api/fastgpt/chat\", requestBody)\n        .pipe(\n          timeout(this.config.timeout),\n          retry({\n            count: this.config.maxRetries,\n            delay: (error, retryCount) => {\n              console.warn(`Retry attempt ${retryCount} for session ${sessionId}:`, error.message)\n              this.updateConnectionStatus({ retryCount })\n              return new Promise((resolve) => setTimeout(resolve, this.config.retryDelay * retryCount))\n            },\n          }),\n          catchError((error) => {\n            this.updateConnectionStatus({ errorCount: this.connectionStatus$.value.errorCount + 1 })\n            observer.error(new Error(`Stream request failed: ${error.message}`))\n            return []\n          }),\n        )\n        .subscribe({\n          next: (response) => {\n            observer.next(response)\n\n            // 如果响应完成，添加到上下文\n            if (response.isComplete) {\n              const assistantMessage: ChatMessage = {\n                id: response.id,\n                role: \"assistant\",\n                content: response.content,\n                timestamp: new Date(),\n                metadata: response.metadata,\n              }\n              context.messages.push(assistantMessage)\n              this.contextCache.set(sessionId, context)\n            }\n          },\n          error: (error) => observer.error(error),\n          complete: () => observer.complete(),\n        })\n    })\n  }\n\n  /**\n   * 智能上下文管理\n   * 当上下文过长时，保留重要消息并压缩历史\n   */\n  private manageContext(context: ChatContext): void {\n    if (this.calculateContextLength(context) <= context.maxContextLength) {\n      return\n    }\n\n    console.log(`Context too long for session ${context.sessionId}, managing...`)\n\n    // 保留系统消息、最近的消息和重要消息\n    const importantMessages = context.messages.filter(\n      (msg) => msg.role === \"system\" || msg.metadata?.isWelcome || msg.metadata?.isImportant,\n    )\n\n    const recentMessages = context.messages.slice(-10) // 保留最近10条消息\n\n    // 合并并去重\n    const preservedMessages = [\n      ...importantMessages,\n      ...recentMessages.filter((msg) => !importantMessages.some((im) => im.id === msg.id)),\n    ].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime())\n\n    // 如果还是太长，进一步压缩\n    if (this.calculateContextLength({ ...context, messages: preservedMessages }) > context.maxContextLength) {\n      // 创建摘要消息\n      const summaryContent = this.createContextSummary(context.messages.slice(0, -10))\n      const summaryMessage: ChatMessage = {\n        id: uuidv4(),\n        role: \"system\",\n        content: `[Context Summary] ${summaryContent}`,\n        timestamp: new Date(),\n        metadata: { isSummary: true },\n      }\n\n      context.messages = [summaryMessage, ...recentMessages]\n    } else {\n      context.messages = preservedMessages\n    }\n\n    console.log(`Context managed: ${context.messages.length} messages remaining`)\n  }\n\n  /**\n   * 计算上下文长度（简单的字符计数，实际应该用token计数）\n   */\n  private calculateContextLength(context: ChatContext): number {\n    return context.messages.reduce((total, msg) => total + msg.content.length, 0)\n  }\n\n  /**\n   * 创建上下文摘要\n   */\n  private createContextSummary(messages: ChatMessage[]): string {\n    const topics = new Set<string>()\n    const keyPoints: string[] = []\n\n    messages.forEach((msg) => {\n      if (msg.role === \"user\") {\n        // 提取关键词\n        const words = msg.content.split(/\\s+/).filter((word) => word.length > 3)\n        words.slice(0, 3).forEach((word) => topics.add(word))\n      } else if (msg.role === \"assistant\" && msg.content.length > 100) {\n        // 提取重要回答的开头\n        keyPoints.push(msg.content.substring(0, 50) + \"...\")\n      }\n    })\n\n    return `Topics discussed: ${Array.from(topics).join(\", \")}. Key points: ${keyPoints.join(\" \")}`\n  }\n\n  /**\n   * 准备发送给API的消息格式\n   */\n  private prepareMessages(context: ChatContext): Array<{ role: string; content: string }> {\n    return context.messages\n      .filter((msg) => !msg.metadata?.isSummary) // 过滤掉摘要消息，避免重复\n      .map((msg) => ({\n        role: msg.role,\n        content: msg.content,\n      }))\n  }\n\n  /**\n   * 流式请求处理\n   */\n  private streamRequest(endpoint: string, body: any): Observable<StreamResponse> {\n    return new Observable((observer) => {\n      const responseId = uuidv4()\n      let accumulatedContent = \"\"\n\n      fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      })\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n          }\n\n          const reader = response.body?.getReader()\n          if (!reader) {\n            throw new Error(\"Response body is null\")\n          }\n\n          const decoder = new TextDecoder()\n          let buffer = \"\"\n\n          const processChunk = async () => {\n            try {\n              const { done, value } = await reader.read()\n\n              if (done) {\n                // 发送最终完成响应\n                observer.next({\n                  id: responseId,\n                  content: accumulatedContent,\n                  delta: \"\",\n                  isComplete: true,\n                })\n                observer.complete()\n                return\n              }\n\n              buffer += decoder.decode(value, { stream: true })\n              const lines = buffer.split(\"\\n\")\n              buffer = lines.pop() || \"\" // 保留不完整的行\n\n              for (const line of lines) {\n                if (line.trim() === \"\") {continue}\n\n                if (line.startsWith(\"data: \")) {\n                  const data = line.slice(6)\n\n                  if (data === \"[DONE]\") {\n                    observer.next({\n                      id: responseId,\n                      content: accumulatedContent,\n                      delta: \"\",\n                      isComplete: true,\n                    })\n                    observer.complete()\n                    return\n                  }\n\n                  try {\n                    const parsed = JSON.parse(data)\n\n                    if (parsed.choices?.[0]?.delta?.content) {\n                      const delta = parsed.choices[0].delta.content\n                      accumulatedContent += delta\n\n                      observer.next({\n                        id: responseId,\n                        content: accumulatedContent,\n                        delta,\n                        isComplete: false,\n                        metadata: parsed.metadata,\n                      })\n                    }\n                  } catch (e) {\n                    console.warn(\"Failed to parse SSE data:\", data)\n                  }\n                }\n              }\n\n              processChunk()\n            } catch (error) {\n              observer.error(error)\n            }\n          }\n\n          processChunk()\n        })\n        .catch((error) => observer.error(error))\n    })\n  }\n\n  /**\n   * 通用请求方法，支持重试\n   */\n  private async makeRequest(endpoint: string, options: RequestInit): Promise<Response> {\n    let lastError: Error | undefined;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const response = await fetch(endpoint, {\n          ...options,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...options.headers,\n          },\n        })\n\n        if (response.ok) {\n          this.updateConnectionStatus({\n            isConnected: true,\n            lastPing: new Date(),\n            errorCount: 0,\n          })\n          return response\n        } else {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n        }\n      } catch (error) {\n        lastError = error as Error\n\n        if (attempt < this.config.maxRetries) {\n          console.warn(`Request attempt ${attempt + 1} failed, retrying...`, error.message)\n          await new Promise((resolve) => setTimeout(resolve, this.config.retryDelay * (attempt + 1)))\n        }\n      }\n    }\n\n    this.updateConnectionStatus({\n      isConnected: false,\n      errorCount: this.connectionStatus$.value.errorCount + 1,\n    })\n\n    throw lastError!\n  }\n\n  /**\n   * 更新连接状态\n   */\n  private updateConnectionStatus(updates: Partial<ConnectionStatus>): void {\n    const current = this.connectionStatus$.value\n    this.connectionStatus$.next({ ...current, ...updates })\n  }\n\n  /**\n   * 健康检查\n   */\n  private startHealthCheck(): void {\n    setInterval(async () => {\n      try {\n        const start = Date.now()\n        await this.makeRequest(\"/api/fastgpt/health\", { method: \"GET\" })\n        const latency = Date.now() - start\n\n        this.updateConnectionStatus({\n          isConnected: true,\n          lastPing: new Date(),\n          latency,\n        })\n      } catch (error) {\n        this.updateConnectionStatus({\n          isConnected: false,\n          errorCount: this.connectionStatus$.value.errorCount + 1,\n        })\n      }\n    }, 30000) // 每30秒检查一次\n  }\n\n  /**\n   * 获取上下文信息\n   */\n  getContext(sessionId: string): ChatContext | undefined {\n    return this.contextCache.get(sessionId)\n  }\n\n  /**\n   * 清理上下文\n   */\n  clearContext(sessionId: string): void {\n    this.contextCache.delete(sessionId)\n  }\n\n  /**\n   * 获取所有活跃会话\n   */\n  getActiveSessions(): string[] {\n    return Array.from(this.contextCache.keys())\n  }\n\n  /**\n   * 导出聊天历史\n   */\n  exportChatHistory(sessionId: string): ChatMessage[] | null {\n    const context = this.contextCache.get(sessionId)\n    return context ? [...context.messages] : null\n  }\n\n  /**\n   * 设置消息为重要\n   */\n  markMessageAsImportant(sessionId: string, messageId: string): void {\n    const context = this.contextCache.get(sessionId)\n    if (context) {\n      const message = context.messages.find((m) => m.id === messageId)\n      if (message) {\n        message.metadata = { ...message.metadata, isImportant: true }\n        this.contextCache.set(sessionId, context)\n      }\n    }\n  }\n}\n\n// 默认配置\nexport const defaultFastGPTConfig: FastGPTConfig = {\n  apiKey: process.env.FASTGPT_API_KEY || \"\",\n  baseUrl: process.env.FASTGPT_API_URL || \"https://zktecoaihub.com\",\n  useProxy: true,\n  timeout: 30000,\n  maxRetries: 3,\n  retryDelay: 1000,\n}\n\n// 全局客户端实例\nexport const enhancedFastGPTClient = new EnhancedFastGPTClient(defaultFastGPTConfig)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}