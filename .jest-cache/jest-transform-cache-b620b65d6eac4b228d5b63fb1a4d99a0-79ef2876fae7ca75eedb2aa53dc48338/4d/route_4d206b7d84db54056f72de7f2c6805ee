174925d4d2385b1d82c83519455d8ab3
"use strict";

/**
 * @file fastgpt\health\route.ts
 * @description FastGPT health check API route
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_6h46r9urt() {
  var path = "E:\\zk-agent\\app\\api\\fastgpt\\health\\route.ts";
  var hash = "6446e428d7618d970ff98bd26e746d728e83a962";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\fastgpt\\health\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 21
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "4": {
        start: {
          line: 12,
          column: 15
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "5": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 56,
          column: 3
        }
      },
      "6": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "7": {
        start: {
          line: 15,
          column: 26
        },
        end: {
          line: 15,
          column: 36
        }
      },
      "8": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 79
        }
      },
      "9": {
        start: {
          line: 18,
          column: 23
        },
        end: {
          line: 18,
          column: 50
        }
      },
      "10": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 135
        }
      },
      "12": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "13": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 46
        }
      },
      "14": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 47,
          column: 9
        }
      },
      "15": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 39,
          column: 15
        }
      },
      "16": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 46,
          column: 20
        }
      },
      "17": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 60
        }
      },
      "18": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 54,
          column: 16
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 100
          },
          end: {
            line: 13,
            column: 101
          }
        },
        loc: {
          start: {
            line: 13,
            column: 176
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 23
          },
          end: {
            line: 17,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 23
          },
          end: {
            line: 17,
            column: 50
          }
        }, {
          start: {
            line: 17,
            column: 54
          },
          end: {
            line: 17,
            column: 79
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 21,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 47,
            column: 9
          }
        }, {
          start: {
            line: 41,
            column: 13
          },
          end: {
            line: 47,
            column: 9
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\fastgpt\\health\\route.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAGH,0EAAkF;AAClF,uDAA4D;AAC5D,uCAAyC;AAE5B,QAAA,GAAG,GAAG,IAAA,kCAAc,EAC/B,gCAAY,CAAC,SAAS,EAAE,EACxB,KAAK,EAAE,IAAiB,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;IACtF,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,kBAAkB;QAClB,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,yBAAyB,CAAC;QACxE,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;QAE3C,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,+BAAkB,CAAC,KAAK,CAC7B,gBAAS,CAAC,sBAAsB,EAChC,wBAAwB,EACxB,IAAI,EACJ,GAAG,CACJ,CAAC;QACJ,CAAC;QAED,YAAY;QACZ,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,MAAM,gBAAgB,EAAE;YACtD,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,eAAe,EAAE,UAAU,MAAM,EAAE;gBACnC,cAAc,EAAE,kBAAkB;aACnC;YACD,MAAM,EAAE,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO;SAC3C,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QAEvC,IAAI,QAAQ,CAAC,EAAE,EAAE,CAAC;YAChB,OAAO,+BAAkB,CAAC,OAAO,CAAC;gBAChC,MAAM,EAAE,SAAS;gBACjB,OAAO;gBACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,MAAM;gBACN,OAAO,EAAE,OAAO;aACjB,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,OAAO,+BAAkB,CAAC,KAAK,CAC7B,gBAAS,CAAC,sBAAsB,EAChC,gBAAgB,QAAQ,CAAC,MAAM,KAAK,QAAQ,CAAC,UAAU,EAAE,EACzD;gBACE,MAAM,EAAE,WAAW;gBACnB,OAAO;gBACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,EACD,GAAG,CACJ,CAAC;QACJ,CAAC;IACH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACpD,OAAO,+BAAkB,CAAC,KAAK,CAC7B,gBAAS,CAAC,qBAAqB,EAC/B,qBAAqB,EACrB;YACE,MAAM,EAAE,OAAO;YACf,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,EACD,GAAG,CACJ,CAAC;IACJ,CAAC;AACH,CAAC,CACF,CAAC",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\fastgpt\\health\\route.ts"],
      sourcesContent: ["/**\n * @file fastgpt\\health\\route.ts\n * @description FastGPT health check API route\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest } from 'next/server';\nimport { createApiRoute, RouteConfigs } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { ErrorCode } from '@/types/core';\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (_req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const startTime = Date.now();\n      \n      // \u68C0\u67E5FastGPT API\u8FDE\u63A5\n      const apiUrl = process.env.FASTGPT_API_URL || 'https://zktecoaihub.com';\n      const apiKey = process.env.FASTGPT_API_KEY;\n  \n      if (!apiKey) {\n        return ApiResponseWrapper.error(\n          ErrorCode.EXTERNAL_SERVICE_ERROR,\n          'API key not configured',\n          null,\n          500\n        );\n      }\n  \n      // \u7B80\u5355\u7684\u5065\u5EB7\u68C0\u67E5\u8BF7\u6C42\n      const response = await fetch(`${apiUrl}/api/v1/models`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        signal: AbortSignal.timeout(5000), // 5\u79D2\u8D85\u65F6\n      });\n  \n      const latency = Date.now() - startTime;\n  \n      if (response.ok) {\n        return ApiResponseWrapper.success({\n          status: 'healthy',\n          latency,\n          timestamp: new Date().toISOString(),\n          apiUrl,\n          version: '1.0.0',\n        });\n      } else {\n        return ApiResponseWrapper.error(\n          ErrorCode.EXTERNAL_SERVICE_ERROR,\n          `API returned ${response.status}: ${response.statusText}`,\n          {\n            status: 'unhealthy',\n            latency,\n            timestamp: new Date().toISOString(),\n          },\n          503\n        );\n      }\n    } catch (error) {\n      console.error('FastGPT health check error:', error);\n      return ApiResponseWrapper.error(\n        ErrorCode.INTERNAL_SERVER_ERROR,\n        'Health check failed',\n        {\n          status: 'error',\n          timestamp: new Date().toISOString(),\n        },\n        500\n      );\n    }\n  }\n);"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6446e428d7618d970ff98bd26e746d728e83a962"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6h46r9urt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6h46r9urt();
cov_6h46r9urt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_6h46r9urt().s[1]++;
exports.GET = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_6h46r9urt().s[2]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_6h46r9urt().s[3]++, require("@/lib/utils/api-helper"));
const core_1 =
/* istanbul ignore next */
(cov_6h46r9urt().s[4]++, require("@/types/core"));
/* istanbul ignore next */
cov_6h46r9urt().s[5]++;
exports.GET = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.publicGet(), async (_req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_6h46r9urt().f[0]++;
  cov_6h46r9urt().s[6]++;
  try {
    const startTime =
    /* istanbul ignore next */
    (cov_6h46r9urt().s[7]++, Date.now());
    // 检查FastGPT API连接
    const apiUrl =
    /* istanbul ignore next */
    (cov_6h46r9urt().s[8]++,
    /* istanbul ignore next */
    (cov_6h46r9urt().b[0][0]++, process.env.FASTGPT_API_URL) ||
    /* istanbul ignore next */
    (cov_6h46r9urt().b[0][1]++, 'https://zktecoaihub.com'));
    const apiKey =
    /* istanbul ignore next */
    (cov_6h46r9urt().s[9]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_6h46r9urt().s[10]++;
    if (!apiKey) {
      /* istanbul ignore next */
      cov_6h46r9urt().b[1][0]++;
      cov_6h46r9urt().s[11]++;
      return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.EXTERNAL_SERVICE_ERROR, 'API key not configured', null, 500);
    } else
    /* istanbul ignore next */
    {
      cov_6h46r9urt().b[1][1]++;
    }
    // 简单的健康检查请求
    const response =
    /* istanbul ignore next */
    (cov_6h46r9urt().s[12]++, await fetch(`${apiUrl}/api/v1/models`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      signal: AbortSignal.timeout(5000) // 5秒超时
    }));
    const latency =
    /* istanbul ignore next */
    (cov_6h46r9urt().s[13]++, Date.now() - startTime);
    /* istanbul ignore next */
    cov_6h46r9urt().s[14]++;
    if (response.ok) {
      /* istanbul ignore next */
      cov_6h46r9urt().b[2][0]++;
      cov_6h46r9urt().s[15]++;
      return api_helper_1.ApiResponseWrapper.success({
        status: 'healthy',
        latency,
        timestamp: new Date().toISOString(),
        apiUrl,
        version: '1.0.0'
      });
    } else {
      /* istanbul ignore next */
      cov_6h46r9urt().b[2][1]++;
      cov_6h46r9urt().s[16]++;
      return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.EXTERNAL_SERVICE_ERROR, `API returned ${response.status}: ${response.statusText}`, {
        status: 'unhealthy',
        latency,
        timestamp: new Date().toISOString()
      }, 503);
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_6h46r9urt().s[17]++;
    console.error('FastGPT health check error:', error);
    /* istanbul ignore next */
    cov_6h46r9urt().s[18]++;
    return api_helper_1.ApiResponseWrapper.error(core_1.ErrorCode.INTERNAL_SERVER_ERROR, 'Health check failed', {
      status: 'error',
      timestamp: new Date().toISOString()
    }, 500);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,