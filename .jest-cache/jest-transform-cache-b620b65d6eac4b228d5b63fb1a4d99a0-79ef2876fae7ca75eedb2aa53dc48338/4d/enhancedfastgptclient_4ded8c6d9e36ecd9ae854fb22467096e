b80531feecb0549fe672c002633bd93e
"use strict";

/* istanbul ignore next */
function cov_16xxh5eegb() {
  var path = "E:\\zk-agent\\lib\\api\\enhanced-fastgpt-client.ts";
  var hash = "e71e601635355560ed3a4a39af751f3f9fab9dd5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\api\\enhanced-fastgpt-client.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 102
        }
      },
      "2": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 30
        }
      },
      "3": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 7,
          column: 45
        }
      },
      "4": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "5": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 38
        }
      },
      "7": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 31
        }
      },
      "8": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 34
        }
      },
      "9": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "10": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 32
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 53
        }
      },
      "12": {
        start: {
          line: 38,
          column: 26
        },
        end: {
          line: 38,
          column: 42
        }
      },
      "13": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "14": {
        start: {
          line: 41,
          column: 29
        },
        end: {
          line: 44,
          column: 14
        }
      },
      "15": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 46
        }
      },
      "16": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "17": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "18": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "19": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 54
        }
      },
      "20": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 27
        }
      },
      "21": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 66
        }
      },
      "22": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 79
        }
      },
      "23": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 140,
          column: 11
        }
      },
      "24": {
        start: {
          line: 79,
          column: 28
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "25": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "26": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 63
        }
      },
      "27": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 23
        }
      },
      "28": {
        start: {
          line: 85,
          column: 32
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "29": {
        start: {
          line: 90,
          column: 60
        },
        end: {
          line: 90,
          column: 66
        }
      },
      "30": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 47
        }
      },
      "31": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 94,
          column: 40
        }
      },
      "32": {
        start: {
          line: 96,
          column: 29
        },
        end: {
          line: 96,
          column: 58
        }
      },
      "33": {
        start: {
          line: 97,
          column: 32
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "34": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 139,
          column: 15
        }
      },
      "35": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 105
        }
      },
      "36": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 64
        }
      },
      "37": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 110
        }
      },
      "38": {
        start: {
          line: 114,
          column: 52
        },
        end: {
          line: 114,
          column: 108
        }
      },
      "39": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 105
        }
      },
      "40": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 85
        }
      },
      "41": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 26
        }
      },
      "42": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 44
        }
      },
      "43": {
        start: {
          line: 125,
          column: 20
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "44": {
        start: {
          line: 126,
          column: 49
        },
        end: {
          line: 132,
          column: 25
        }
      },
      "45": {
        start: {
          line: 133,
          column: 24
        },
        end: {
          line: 133,
          column: 64
        }
      },
      "46": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 66
        }
      },
      "47": {
        start: {
          line: 137,
          column: 34
        },
        end: {
          line: 137,
          column: 55
        }
      },
      "48": {
        start: {
          line: 138,
          column: 32
        },
        end: {
          line: 138,
          column: 51
        }
      },
      "49": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "50": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "51": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 86
        }
      },
      "52": {
        start: {
          line: 152,
          column: 34
        },
        end: {
          line: 152,
          column: 145
        }
      },
      "53": {
        start: {
          line: 152,
          column: 67
        },
        end: {
          line: 152,
          column: 144
        }
      },
      "54": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 58
        }
      },
      "55": {
        start: {
          line: 155,
          column: 34
        },
        end: {
          line: 158,
          column: 71
        }
      },
      "56": {
        start: {
          line: 157,
          column: 46
        },
        end: {
          line: 157,
          column: 95
        }
      },
      "57": {
        start: {
          line: 157,
          column: 78
        },
        end: {
          line: 157,
          column: 94
        }
      },
      "58": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 158,
          column: 70
        }
      },
      "59": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "60": {
        start: {
          line: 162,
          column: 35
        },
        end: {
          line: 162,
          column: 92
        }
      },
      "61": {
        start: {
          line: 163,
          column: 35
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "62": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 67
        }
      },
      "63": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 49
        }
      },
      "64": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 86
        }
      },
      "65": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 86
        }
      },
      "66": {
        start: {
          line: 181,
          column: 55
        },
        end: {
          line: 181,
          column: 81
        }
      },
      "67": {
        start: {
          line: 187,
          column: 23
        },
        end: {
          line: 187,
          column: 32
        }
      },
      "68": {
        start: {
          line: 188,
          column: 26
        },
        end: {
          line: 188,
          column: 28
        }
      },
      "69": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 199,
          column: 11
        }
      },
      "70": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "71": {
        start: {
          line: 192,
          column: 30
        },
        end: {
          line: 192,
          column: 88
        }
      },
      "72": {
        start: {
          line: 192,
          column: 72
        },
        end: {
          line: 192,
          column: 87
        }
      },
      "73": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 70
        }
      },
      "74": {
        start: {
          line: 193,
          column: 52
        },
        end: {
          line: 193,
          column: 68
        }
      },
      "75": {
        start: {
          line: 195,
          column: 17
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "76": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 69
        }
      },
      "77": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 104
        }
      },
      "78": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 211,
          column: 12
        }
      },
      "79": {
        start: {
          line: 207,
          column: 29
        },
        end: {
          line: 207,
          column: 53
        }
      },
      "80": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "81": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 298,
          column: 11
        }
      },
      "82": {
        start: {
          line: 218,
          column: 31
        },
        end: {
          line: 218,
          column: 47
        }
      },
      "83": {
        start: {
          line: 219,
          column: 37
        },
        end: {
          line: 219,
          column: 39
        }
      },
      "84": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 297,
          column: 57
        }
      },
      "85": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "86": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 87
        }
      },
      "87": {
        start: {
          line: 231,
          column: 31
        },
        end: {
          line: 231,
          column: 57
        }
      },
      "88": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 234,
          column: 17
        }
      },
      "89": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 61
        }
      },
      "90": {
        start: {
          line: 235,
          column: 32
        },
        end: {
          line: 235,
          column: 49
        }
      },
      "91": {
        start: {
          line: 236,
          column: 29
        },
        end: {
          line: 236,
          column: 31
        }
      },
      "92": {
        start: {
          line: 237,
          column: 37
        },
        end: {
          line: 294,
          column: 17
        }
      },
      "93": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 293,
          column: 21
        }
      },
      "94": {
        start: {
          line: 239,
          column: 48
        },
        end: {
          line: 239,
          column: 67
        }
      },
      "95": {
        start: {
          line: 240,
          column: 24
        },
        end: {
          line: 250,
          column: 25
        }
      },
      "96": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 247,
          column: 31
        }
      },
      "97": {
        start: {
          line: 248,
          column: 28
        },
        end: {
          line: 248,
          column: 48
        }
      },
      "98": {
        start: {
          line: 249,
          column: 28
        },
        end: {
          line: 249,
          column: 35
        }
      },
      "99": {
        start: {
          line: 251,
          column: 24
        },
        end: {
          line: 251,
          column: 74
        }
      },
      "100": {
        start: {
          line: 252,
          column: 38
        },
        end: {
          line: 252,
          column: 56
        }
      },
      "101": {
        start: {
          line: 253,
          column: 24
        },
        end: {
          line: 253,
          column: 51
        }
      },
      "102": {
        start: {
          line: 254,
          column: 24
        },
        end: {
          line: 288,
          column: 25
        }
      },
      "103": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 257,
          column: 29
        }
      },
      "104": {
        start: {
          line: 256,
          column: 32
        },
        end: {
          line: 256,
          column: 41
        }
      },
      "105": {
        start: {
          line: 258,
          column: 28
        },
        end: {
          line: 287,
          column: 29
        }
      },
      "106": {
        start: {
          line: 259,
          column: 45
        },
        end: {
          line: 259,
          column: 58
        }
      },
      "107": {
        start: {
          line: 260,
          column: 32
        },
        end: {
          line: 269,
          column: 33
        }
      },
      "108": {
        start: {
          line: 261,
          column: 36
        },
        end: {
          line: 266,
          column: 39
        }
      },
      "109": {
        start: {
          line: 267,
          column: 36
        },
        end: {
          line: 267,
          column: 56
        }
      },
      "110": {
        start: {
          line: 268,
          column: 36
        },
        end: {
          line: 268,
          column: 43
        }
      },
      "111": {
        start: {
          line: 270,
          column: 32
        },
        end: {
          line: 286,
          column: 33
        }
      },
      "112": {
        start: {
          line: 271,
          column: 51
        },
        end: {
          line: 271,
          column: 67
        }
      },
      "113": {
        start: {
          line: 272,
          column: 36
        },
        end: {
          line: 282,
          column: 37
        }
      },
      "114": {
        start: {
          line: 273,
          column: 54
        },
        end: {
          line: 273,
          column: 85
        }
      },
      "115": {
        start: {
          line: 274,
          column: 40
        },
        end: {
          line: 274,
          column: 68
        }
      },
      "116": {
        start: {
          line: 275,
          column: 40
        },
        end: {
          line: 281,
          column: 43
        }
      },
      "117": {
        start: {
          line: 285,
          column: 36
        },
        end: {
          line: 285,
          column: 84
        }
      },
      "118": {
        start: {
          line: 289,
          column: 24
        },
        end: {
          line: 289,
          column: 39
        }
      },
      "119": {
        start: {
          line: 292,
          column: 24
        },
        end: {
          line: 292,
          column: 46
        }
      },
      "120": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 31
        }
      },
      "121": {
        start: {
          line: 297,
          column: 34
        },
        end: {
          line: 297,
          column: 55
        }
      },
      "122": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "123": {
        start: {
          line: 305,
          column: 27
        },
        end: {
          line: 305,
          column: 28
        }
      },
      "124": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "125": {
        start: {
          line: 307,
          column: 33
        },
        end: {
          line: 313,
          column: 18
        }
      },
      "126": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 324,
          column: 17
        }
      },
      "127": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 319,
          column: 23
        }
      },
      "128": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 320,
          column: 36
        }
      },
      "129": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 87
        }
      },
      "130": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 34
        }
      },
      "131": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 331,
          column: 17
        }
      },
      "132": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 102
        }
      },
      "133": {
        start: {
          line: 330,
          column: 20
        },
        end: {
          line: 330,
          column: 112
        }
      },
      "134": {
        start: {
          line: 330,
          column: 51
        },
        end: {
          line: 330,
          column: 110
        }
      },
      "135": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 337,
          column: 11
        }
      },
      "136": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 338,
          column: 24
        }
      },
      "137": {
        start: {
          line: 344,
          column: 24
        },
        end: {
          line: 344,
          column: 52
        }
      },
      "138": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 64
        }
      },
      "139": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 368,
          column: 18
        }
      },
      "140": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "141": {
        start: {
          line: 353,
          column: 30
        },
        end: {
          line: 353,
          column: 40
        }
      },
      "142": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 354,
          column: 81
        }
      },
      "143": {
        start: {
          line: 355,
          column: 32
        },
        end: {
          line: 355,
          column: 50
        }
      },
      "144": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 360,
          column: 19
        }
      },
      "145": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 366,
          column: 19
        }
      },
      "146": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 48
        }
      },
      "147": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 44
        }
      },
      "148": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 386,
          column: 52
        }
      },
      "149": {
        start: {
          line: 392,
          column: 24
        },
        end: {
          line: 392,
          column: 56
        }
      },
      "150": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 54
        }
      },
      "151": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 399,
          column: 56
        }
      },
      "152": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "153": {
        start: {
          line: 401,
          column: 28
        },
        end: {
          line: 401,
          column: 76
        }
      },
      "154": {
        start: {
          line: 401,
          column: 57
        },
        end: {
          line: 401,
          column: 75
        }
      },
      "155": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "156": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 403,
          column: 78
        }
      },
      "157": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 58
        }
      },
      "158": {
        start: {
          line: 409,
          column: 0
        },
        end: {
          line: 409,
          column: 54
        }
      },
      "159": {
        start: {
          line: 411,
          column: 0
        },
        end: {
          line: 418,
          column: 2
        }
      },
      "160": {
        start: {
          line: 420,
          column: 0
        },
        end: {
          line: 420,
          column: 88
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 24
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 57
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 43
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 77
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 78,
            column: 37
          },
          end: {
            line: 78,
            column: 38
          }
        },
        loc: {
          start: {
            line: 78,
            column: 51
          },
          end: {
            line: 140,
            column: 9
          }
        },
        line: 78
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 90,
            column: 53
          },
          end: {
            line: 90,
            column: 54
          }
        },
        loc: {
          start: {
            line: 90,
            column: 60
          },
          end: {
            line: 90,
            column: 66
          }
        },
        line: 90
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 23
          },
          end: {
            line: 111,
            column: 24
          }
        },
        loc: {
          start: {
            line: 111,
            column: 46
          },
          end: {
            line: 115,
            column: 17
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 114,
            column: 39
          },
          end: {
            line: 114,
            column: 40
          }
        },
        loc: {
          start: {
            line: 114,
            column: 52
          },
          end: {
            line: 114,
            column: 108
          }
        },
        line: 114
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 116,
            column: 44
          },
          end: {
            line: 116,
            column: 45
          }
        },
        loc: {
          start: {
            line: 116,
            column: 55
          },
          end: {
            line: 120,
            column: 13
          }
        },
        line: 116
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 122,
            column: 22
          },
          end: {
            line: 122,
            column: 23
          }
        },
        loc: {
          start: {
            line: 122,
            column: 36
          },
          end: {
            line: 136,
            column: 17
          }
        },
        line: 122
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 137,
            column: 23
          },
          end: {
            line: 137,
            column: 24
          }
        },
        loc: {
          start: {
            line: 137,
            column: 34
          },
          end: {
            line: 137,
            column: 55
          }
        },
        line: 137
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 138,
            column: 26
          },
          end: {
            line: 138,
            column: 27
          }
        },
        loc: {
          start: {
            line: 138,
            column: 32
          },
          end: {
            line: 138,
            column: 51
          }
        },
        line: 138
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 27
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 146
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 152,
            column: 58
          },
          end: {
            line: 152,
            column: 59
          }
        },
        loc: {
          start: {
            line: 152,
            column: 67
          },
          end: {
            line: 152,
            column: 144
          }
        },
        line: 152
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 157,
            column: 37
          },
          end: {
            line: 157,
            column: 38
          }
        },
        loc: {
          start: {
            line: 157,
            column: 46
          },
          end: {
            line: 157,
            column: 95
          }
        },
        line: 157
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 157,
            column: 70
          },
          end: {
            line: 157,
            column: 71
          }
        },
        loc: {
          start: {
            line: 157,
            column: 78
          },
          end: {
            line: 157,
            column: 94
          }
        },
        line: 157
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 158,
            column: 16
          }
        },
        loc: {
          start: {
            line: 158,
            column: 25
          },
          end: {
            line: 158,
            column: 70
          }
        },
        line: 158
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 36
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 180
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 181,
            column: 39
          },
          end: {
            line: 181,
            column: 40
          }
        },
        loc: {
          start: {
            line: 181,
            column: 55
          },
          end: {
            line: 181,
            column: 81
          }
        },
        line: 181
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 35
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 186
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 189,
            column: 25
          },
          end: {
            line: 189,
            column: 26
          }
        },
        loc: {
          start: {
            line: 189,
            column: 34
          },
          end: {
            line: 199,
            column: 9
          }
        },
        line: 189
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 192,
            column: 62
          },
          end: {
            line: 192,
            column: 63
          }
        },
        loc: {
          start: {
            line: 192,
            column: 72
          },
          end: {
            line: 192,
            column: 87
          }
        },
        line: 192
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 193,
            column: 42
          },
          end: {
            line: 193,
            column: 43
          }
        },
        loc: {
          start: {
            line: 193,
            column: 52
          },
          end: {
            line: 193,
            column: 68
          }
        },
        line: 193
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 29
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 205
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 207,
            column: 21
          }
        },
        loc: {
          start: {
            line: 207,
            column: 29
          },
          end: {
            line: 207,
            column: 53
          }
        },
        line: 207
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 208,
            column: 17
          },
          end: {
            line: 208,
            column: 18
          }
        },
        loc: {
          start: {
            line: 208,
            column: 27
          },
          end: {
            line: 211,
            column: 9
          }
        },
        line: 208
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 34
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 216
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 217,
            column: 37
          },
          end: {
            line: 217,
            column: 38
          }
        },
        loc: {
          start: {
            line: 217,
            column: 51
          },
          end: {
            line: 298,
            column: 9
          }
        },
        line: 217
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 227,
            column: 22
          },
          end: {
            line: 227,
            column: 23
          }
        },
        loc: {
          start: {
            line: 227,
            column: 36
          },
          end: {
            line: 296,
            column: 13
          }
        },
        line: 227
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 237,
            column: 37
          },
          end: {
            line: 237,
            column: 38
          }
        },
        loc: {
          start: {
            line: 237,
            column: 49
          },
          end: {
            line: 294,
            column: 17
          }
        },
        line: 237
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 297,
            column: 23
          },
          end: {
            line: 297,
            column: 24
          }
        },
        loc: {
          start: {
            line: 297,
            column: 34
          },
          end: {
            line: 297,
            column: 55
          }
        },
        line: 297
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 41
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 303
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 330,
            column: 38
          },
          end: {
            line: 330,
            column: 39
          }
        },
        loc: {
          start: {
            line: 330,
            column: 51
          },
          end: {
            line: 330,
            column: 110
          }
        },
        line: 330
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 36
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 343
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 23
          },
          end: {
            line: 369,
            column: 5
          }
        },
        line: 350
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 351,
            column: 20
          },
          end: {
            line: 351,
            column: 21
          }
        },
        loc: {
          start: {
            line: 351,
            column: 32
          },
          end: {
            line: 368,
            column: 9
          }
        },
        line: 351
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 373,
            column: 4
          },
          end: {
            line: 373,
            column: 5
          }
        },
        loc: {
          start: {
            line: 373,
            column: 26
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 373
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 28
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 379
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 24
          },
          end: {
            line: 387,
            column: 5
          }
        },
        line: 385
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 391,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        loc: {
          start: {
            line: 391,
            column: 33
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 391
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 398,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        },
        loc: {
          start: {
            line: 398,
            column: 49
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 398
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 401,
            column: 50
          },
          end: {
            line: 401,
            column: 51
          }
        },
        loc: {
          start: {
            line: 401,
            column: 57
          },
          end: {
            line: 401,
            column: 75
          }
        },
        line: 401
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 27
          },
          end: {
            line: 51,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 27
          },
          end: {
            line: 51,
            column: 41
          }
        }, {
          start: {
            line: 51,
            column: 45
          },
          end: {
            line: 51,
            column: 47
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 52,
            column: 30
          },
          end: {
            line: 52,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 30
          },
          end: {
            line: 52,
            column: 42
          }
        }, {
          start: {
            line: 52,
            column: 46
          },
          end: {
            line: 52,
            column: 63
          }
        }],
        line: 52
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 83,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "4": {
        loc: {
          start: {
            line: 90,
            column: 26
          },
          end: {
            line: 90,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 34
          },
          end: {
            line: 90,
            column: 69
          }
        }, {
          start: {
            line: 90,
            column: 72
          },
          end: {
            line: 90,
            column: 81
          }
        }],
        line: 90
      },
      "5": {
        loc: {
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 135,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 20
          },
          end: {
            line: 135,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "6": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "7": {
        loc: {
          start: {
            line: 152,
            column: 67
          },
          end: {
            line: 152,
            column: 144
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 67
          },
          end: {
            line: 152,
            column: 88
          }
        }, {
          start: {
            line: 152,
            column: 92
          },
          end: {
            line: 152,
            column: 115
          }
        }, {
          start: {
            line: 152,
            column: 119
          },
          end: {
            line: 152,
            column: 144
          }
        }],
        line: 152
      },
      "8": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: 172,
            column: 13
          },
          end: {
            line: 174,
            column: 9
          }
        }],
        line: 160
      },
      "9": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        }, {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 198,
            column: 13
          }
        }],
        line: 190
      },
      "10": {
        loc: {
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 17
          },
          end: {
            line: 198,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "11": {
        loc: {
          start: {
            line: 195,
            column: 21
          },
          end: {
            line: 195,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 21
          },
          end: {
            line: 195,
            column: 45
          }
        }, {
          start: {
            line: 195,
            column: 49
          },
          end: {
            line: 195,
            column: 73
          }
        }],
        line: 195
      },
      "12": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "13": {
        loc: {
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 234,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 234,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "14": {
        loc: {
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 250,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 250,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "15": {
        loc: {
          start: {
            line: 253,
            column: 33
          },
          end: {
            line: 253,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 33
          },
          end: {
            line: 253,
            column: 44
          }
        }, {
          start: {
            line: 253,
            column: 48
          },
          end: {
            line: 253,
            column: 50
          }
        }],
        line: 253
      },
      "16": {
        loc: {
          start: {
            line: 255,
            column: 28
          },
          end: {
            line: 257,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 28
          },
          end: {
            line: 257,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "17": {
        loc: {
          start: {
            line: 258,
            column: 28
          },
          end: {
            line: 287,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 28
          },
          end: {
            line: 287,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "18": {
        loc: {
          start: {
            line: 260,
            column: 32
          },
          end: {
            line: 269,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 32
          },
          end: {
            line: 269,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "19": {
        loc: {
          start: {
            line: 272,
            column: 36
          },
          end: {
            line: 282,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 36
          },
          end: {
            line: 282,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "20": {
        loc: {
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        }, {
          start: {
            line: 322,
            column: 21
          },
          end: {
            line: 324,
            column: 17
          }
        }],
        line: 314
      },
      "21": {
        loc: {
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 331,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 331,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "22": {
        loc: {
          start: {
            line: 393,
            column: 15
          },
          end: {
            line: 393,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 393,
            column: 25
          },
          end: {
            line: 393,
            column: 46
          }
        }, {
          start: {
            line: 393,
            column: 49
          },
          end: {
            line: 393,
            column: 53
          }
        }],
        line: 393
      },
      "23": {
        loc: {
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 406,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "24": {
        loc: {
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "25": {
        loc: {
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 412,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 412,
            column: 39
          }
        }, {
          start: {
            line: 412,
            column: 43
          },
          end: {
            line: 412,
            column: 45
          }
        }],
        line: 412
      },
      "26": {
        loc: {
          start: {
            line: 413,
            column: 13
          },
          end: {
            line: 413,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 13
          },
          end: {
            line: 413,
            column: 40
          }
        }, {
          start: {
            line: 413,
            column: 44
          },
          end: {
            line: 413,
            column: 69
          }
        }],
        line: 413
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\api\\enhanced-fastgpt-client.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\lib\\api\\enhanced-fastgpt-client.ts"],
      sourcesContent: ["// @ts-nocheck\n/// <reference lib=\"dom\" />\nimport { Observable, BehaviorSubject } from \"rxjs\"\nimport { retry, catchError, timeout } from \"rxjs/operators\"\nimport { v4 as uuidv4 } from \"uuid\"\n\nexport interface FastGPTConfig {\n  apiKey: string\n  baseUrl: string\n  useProxy: boolean\n  timeout: number\n  maxRetries: number\n  retryDelay: number\n}\n\nexport interface ChatMessage {\n  id: string\n  role: \"user\" | \"assistant\" | \"system\"\n  content: string\n  timestamp: Date\n  metadata?: Record<string, any>\n}\n\nexport interface ChatContext {\n  sessionId: string\n  appId: string\n  userId: string\n  messages: ChatMessage[]\n  variables: Record<string, any>\n  systemPrompt?: string\n  maxContextLength: number\n}\n\nexport interface StreamResponse {\n  id: string\n  content: string\n  delta: string\n  isComplete: boolean\n  metadata?: Record<string, any>\n}\n\nexport interface ConnectionStatus {\n  isConnected: boolean\n  lastPing: Date | null\n  latency: number\n  errorCount: number\n  retryCount: number\n}\n\n/**\n * \u589E\u5F3A\u7684FastGPT\u5BA2\u6237\u7AEF\n * \u652F\u6301\u4E0A\u4E0B\u6587\u8BB0\u5FC6\u3001\u9519\u8BEF\u91CD\u8BD5\u3001\u8FDE\u63A5\u76D1\u63A7\u7B49\u9AD8\u7EA7\u529F\u80FD\n */\nexport class EnhancedFastGPTClient {\n  private config: FastGPTConfig\n  private connectionStatus$ = new BehaviorSubject<ConnectionStatus>({\n    isConnected: false,\n    lastPing: null,\n    latency: 0,\n    errorCount: 0,\n    retryCount: 0,\n  })\n\n  private contextCache = new Map<string, ChatContext>()\n  private messageQueue: Array<{ context: ChatContext; resolve: Function; reject: Function }> = []\n  private isProcessing = false\n\n  constructor(config: FastGPTConfig) {\n    this.config = config\n    this.startHealthCheck()\n  }\n\n  /**\n   * \u83B7\u53D6\u8FDE\u63A5\u72B6\u6001\n   */\n  getConnectionStatus(): Observable<ConnectionStatus> {\n    return this.connectionStatus$.asObservable()\n  }\n\n  /**\n   * \u521D\u59CB\u5316\u804A\u5929\u4E0A\u4E0B\u6587\n   */\n  async initializeContext(appId: string, userId: string, systemPrompt?: string): Promise<ChatContext> {\n    const sessionId = uuidv4()\n\n    try {\n      // \u8C03\u7528FastGPT\u521D\u59CB\u5316\u63A5\u53E3\n      const response = await this.makeRequest(\"/api/fastgpt/init-chat\", {\n        method: \"POST\",\n        body: JSON.stringify({ appId, userId, systemPrompt }),\n      })\n\n      const data = await response.json()\n\n      const context: ChatContext = {\n        sessionId,\n        appId,\n        userId,\n        messages: [],\n        variables: data.variables || {},\n        systemPrompt: systemPrompt || data.systemPrompt,\n        maxContextLength: 4000, // \u53EF\u914D\u7F6E\u7684\u4E0A\u4E0B\u6587\u957F\u5EA6\u9650\u5236\n      }\n\n      // \u6DFB\u52A0\u6B22\u8FCE\u6D88\u606F\n      if (data.welcomeMessage) {\n        context.messages.push({\n          id: uuidv4(),\n          role: \"assistant\",\n          content: data.welcomeMessage,\n          timestamp: new Date(),\n          metadata: { isWelcome: true },\n        })\n      }\n\n      // \u7F13\u5B58\u4E0A\u4E0B\u6587\n      this.contextCache.set(sessionId, context)\n\n      return context\n    } catch (error) {\n      console.error(\"Failed to initialize context:\", error)\n      throw new Error(`Context initialization failed: ${error.message}`)\n    }\n  }\n\n  /**\n   * \u53D1\u9001\u6D88\u606F\u5E76\u83B7\u53D6\u6D41\u5F0F\u54CD\u5E94\n   */\n  sendMessage(sessionId: string, content: string, files?: File[]): Observable<StreamResponse> {\n    return new Observable((observer) => {\n      const context = this.contextCache.get(sessionId)\n      if (!context) {\n        observer.error(new Error(\"Context not found\"))\n        return\n      }\n\n      // \u6DFB\u52A0\u7528\u6237\u6D88\u606F\u5230\u4E0A\u4E0B\u6587\n      const userMessage: ChatMessage = {\n        id: uuidv4(),\n        role: \"user\",\n        content,\n        timestamp: new Date(),\n        metadata: files ? { files: files.map((f) => f.name) } : undefined,\n      }\n\n      context.messages.push(userMessage)\n\n      // \u667A\u80FD\u4E0A\u4E0B\u6587\u7BA1\u7406\n      this.manageContext(context)\n\n      // \u51C6\u5907API\u8BF7\u6C42\n      const messages = this.prepareMessages(context)\n      const requestBody = {\n        appId: context.appId,\n        chatId: sessionId,\n        messages,\n        stream: true,\n        detail: true,\n        system: context.systemPrompt,\n        variables: context.variables,\n        userId: context.userId,\n      }\n\n      // \u53D1\u9001\u8BF7\u6C42\n      this.streamRequest(\"/api/fastgpt/chat\", requestBody)\n        .pipe(\n          timeout(this.config.timeout),\n          retry({\n            count: this.config.maxRetries,\n            delay: (error, retryCount) => {\n              console.warn(`Retry attempt ${retryCount} for session ${sessionId}:`, error.message)\n              this.updateConnectionStatus({ retryCount })\n              return new Promise((resolve) => setTimeout(resolve, this.config.retryDelay * retryCount))\n            },\n          }),\n          catchError((error) => {\n            this.updateConnectionStatus({ errorCount: this.connectionStatus$.value.errorCount + 1 })\n            observer.error(new Error(`Stream request failed: ${error.message}`))\n            return []\n          }),\n        )\n        .subscribe({\n          next: (response) => {\n            observer.next(response)\n\n            // \u5982\u679C\u54CD\u5E94\u5B8C\u6210\uFF0C\u6DFB\u52A0\u5230\u4E0A\u4E0B\u6587\n            if (response.isComplete) {\n              const assistantMessage: ChatMessage = {\n                id: response.id,\n                role: \"assistant\",\n                content: response.content,\n                timestamp: new Date(),\n                metadata: response.metadata,\n              }\n              context.messages.push(assistantMessage)\n              this.contextCache.set(sessionId, context)\n            }\n          },\n          error: (error) => observer.error(error),\n          complete: () => observer.complete(),\n        })\n    })\n  }\n\n  /**\n   * \u667A\u80FD\u4E0A\u4E0B\u6587\u7BA1\u7406\n   * \u5F53\u4E0A\u4E0B\u6587\u8FC7\u957F\u65F6\uFF0C\u4FDD\u7559\u91CD\u8981\u6D88\u606F\u5E76\u538B\u7F29\u5386\u53F2\n   */\n  private manageContext(context: ChatContext): void {\n    if (this.calculateContextLength(context) <= context.maxContextLength) {\n      return\n    }\n\n    console.log(`Context too long for session ${context.sessionId}, managing...`)\n\n    // \u4FDD\u7559\u7CFB\u7EDF\u6D88\u606F\u3001\u6700\u8FD1\u7684\u6D88\u606F\u548C\u91CD\u8981\u6D88\u606F\n    const importantMessages = context.messages.filter(\n      (msg) => msg.role === \"system\" || msg.metadata?.isWelcome || msg.metadata?.isImportant,\n    )\n\n    const recentMessages = context.messages.slice(-10) // \u4FDD\u7559\u6700\u8FD110\u6761\u6D88\u606F\n\n    // \u5408\u5E76\u5E76\u53BB\u91CD\n    const preservedMessages = [\n      ...importantMessages,\n      ...recentMessages.filter((msg) => !importantMessages.some((im) => im.id === msg.id)),\n    ].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime())\n\n    // \u5982\u679C\u8FD8\u662F\u592A\u957F\uFF0C\u8FDB\u4E00\u6B65\u538B\u7F29\n    if (this.calculateContextLength({ ...context, messages: preservedMessages }) > context.maxContextLength) {\n      // \u521B\u5EFA\u6458\u8981\u6D88\u606F\n      const summaryContent = this.createContextSummary(context.messages.slice(0, -10))\n      const summaryMessage: ChatMessage = {\n        id: uuidv4(),\n        role: \"system\",\n        content: `[Context Summary] ${summaryContent}`,\n        timestamp: new Date(),\n        metadata: { isSummary: true },\n      }\n\n      context.messages = [summaryMessage, ...recentMessages]\n    } else {\n      context.messages = preservedMessages\n    }\n\n    console.log(`Context managed: ${context.messages.length} messages remaining`)\n  }\n\n  /**\n   * \u8BA1\u7B97\u4E0A\u4E0B\u6587\u957F\u5EA6\uFF08\u7B80\u5355\u7684\u5B57\u7B26\u8BA1\u6570\uFF0C\u5B9E\u9645\u5E94\u8BE5\u7528token\u8BA1\u6570\uFF09\n   */\n  private calculateContextLength(context: ChatContext): number {\n    return context.messages.reduce((total, msg) => total + msg.content.length, 0)\n  }\n\n  /**\n   * \u521B\u5EFA\u4E0A\u4E0B\u6587\u6458\u8981\n   */\n  private createContextSummary(messages: ChatMessage[]): string {\n    const topics = new Set<string>()\n    const keyPoints: string[] = []\n\n    messages.forEach((msg) => {\n      if (msg.role === \"user\") {\n        // \u63D0\u53D6\u5173\u952E\u8BCD\n        const words = msg.content.split(/\\s+/).filter((word) => word.length > 3)\n        words.slice(0, 3).forEach((word) => topics.add(word))\n      } else if (msg.role === \"assistant\" && msg.content.length > 100) {\n        // \u63D0\u53D6\u91CD\u8981\u56DE\u7B54\u7684\u5F00\u5934\n        keyPoints.push(msg.content.substring(0, 50) + \"...\")\n      }\n    })\n\n    return `Topics discussed: ${Array.from(topics).join(\", \")}. Key points: ${keyPoints.join(\" \")}`\n  }\n\n  /**\n   * \u51C6\u5907\u53D1\u9001\u7ED9API\u7684\u6D88\u606F\u683C\u5F0F\n   */\n  private prepareMessages(context: ChatContext): Array<{ role: string; content: string }> {\n    return context.messages\n      .filter((msg) => !msg.metadata?.isSummary) // \u8FC7\u6EE4\u6389\u6458\u8981\u6D88\u606F\uFF0C\u907F\u514D\u91CD\u590D\n      .map((msg) => ({\n        role: msg.role,\n        content: msg.content,\n      }))\n  }\n\n  /**\n   * \u6D41\u5F0F\u8BF7\u6C42\u5904\u7406\n   */\n  private streamRequest(endpoint: string, body: any): Observable<StreamResponse> {\n    return new Observable((observer) => {\n      const responseId = uuidv4()\n      let accumulatedContent = \"\"\n\n      fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      })\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n          }\n\n          const reader = response.body?.getReader()\n          if (!reader) {\n            throw new Error(\"Response body is null\")\n          }\n\n          const decoder = new TextDecoder()\n          let buffer = \"\"\n\n          const processChunk = async () => {\n            try {\n              const { done, value } = await reader.read()\n\n              if (done) {\n                // \u53D1\u9001\u6700\u7EC8\u5B8C\u6210\u54CD\u5E94\n                observer.next({\n                  id: responseId,\n                  content: accumulatedContent,\n                  delta: \"\",\n                  isComplete: true,\n                })\n                observer.complete()\n                return\n              }\n\n              buffer += decoder.decode(value, { stream: true })\n              const lines = buffer.split(\"\\n\")\n              buffer = lines.pop() || \"\" // \u4FDD\u7559\u4E0D\u5B8C\u6574\u7684\u884C\n\n              for (const line of lines) {\n                if (line.trim() === \"\") {continue}\n\n                if (line.startsWith(\"data: \")) {\n                  const data = line.slice(6)\n\n                  if (data === \"[DONE]\") {\n                    observer.next({\n                      id: responseId,\n                      content: accumulatedContent,\n                      delta: \"\",\n                      isComplete: true,\n                    })\n                    observer.complete()\n                    return\n                  }\n\n                  try {\n                    const parsed = JSON.parse(data)\n\n                    if (parsed.choices?.[0]?.delta?.content) {\n                      const delta = parsed.choices[0].delta.content\n                      accumulatedContent += delta\n\n                      observer.next({\n                        id: responseId,\n                        content: accumulatedContent,\n                        delta,\n                        isComplete: false,\n                        metadata: parsed.metadata,\n                      })\n                    }\n                  } catch (e) {\n                    console.warn(\"Failed to parse SSE data:\", data)\n                  }\n                }\n              }\n\n              processChunk()\n            } catch (error) {\n              observer.error(error)\n            }\n          }\n\n          processChunk()\n        })\n        .catch((error) => observer.error(error))\n    })\n  }\n\n  /**\n   * \u901A\u7528\u8BF7\u6C42\u65B9\u6CD5\uFF0C\u652F\u6301\u91CD\u8BD5\n   */\n  private async makeRequest(endpoint: string, options: RequestInit): Promise<Response> {\n    let lastError: Error | undefined;\n\n    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {\n      try {\n        const response = await fetch(endpoint, {\n          ...options,\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...options.headers,\n          },\n        })\n\n        if (response.ok) {\n          this.updateConnectionStatus({\n            isConnected: true,\n            lastPing: new Date(),\n            errorCount: 0,\n          })\n          return response\n        } else {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n        }\n      } catch (error) {\n        lastError = error as Error\n\n        if (attempt < this.config.maxRetries) {\n          console.warn(`Request attempt ${attempt + 1} failed, retrying...`, error.message)\n          await new Promise((resolve) => setTimeout(resolve, this.config.retryDelay * (attempt + 1)))\n        }\n      }\n    }\n\n    this.updateConnectionStatus({\n      isConnected: false,\n      errorCount: this.connectionStatus$.value.errorCount + 1,\n    })\n\n    throw lastError!\n  }\n\n  /**\n   * \u66F4\u65B0\u8FDE\u63A5\u72B6\u6001\n   */\n  private updateConnectionStatus(updates: Partial<ConnectionStatus>): void {\n    const current = this.connectionStatus$.value\n    this.connectionStatus$.next({ ...current, ...updates })\n  }\n\n  /**\n   * \u5065\u5EB7\u68C0\u67E5\n   */\n  private startHealthCheck(): void {\n    setInterval(async () => {\n      try {\n        const start = Date.now()\n        await this.makeRequest(\"/api/fastgpt/health\", { method: \"GET\" })\n        const latency = Date.now() - start\n\n        this.updateConnectionStatus({\n          isConnected: true,\n          lastPing: new Date(),\n          latency,\n        })\n      } catch (error) {\n        this.updateConnectionStatus({\n          isConnected: false,\n          errorCount: this.connectionStatus$.value.errorCount + 1,\n        })\n      }\n    }, 30000) // \u6BCF30\u79D2\u68C0\u67E5\u4E00\u6B21\n  }\n\n  /**\n   * \u83B7\u53D6\u4E0A\u4E0B\u6587\u4FE1\u606F\n   */\n  getContext(sessionId: string): ChatContext | undefined {\n    return this.contextCache.get(sessionId)\n  }\n\n  /**\n   * \u6E05\u7406\u4E0A\u4E0B\u6587\n   */\n  clearContext(sessionId: string): void {\n    this.contextCache.delete(sessionId)\n  }\n\n  /**\n   * \u83B7\u53D6\u6240\u6709\u6D3B\u8DC3\u4F1A\u8BDD\n   */\n  getActiveSessions(): string[] {\n    return Array.from(this.contextCache.keys())\n  }\n\n  /**\n   * \u5BFC\u51FA\u804A\u5929\u5386\u53F2\n   */\n  exportChatHistory(sessionId: string): ChatMessage[] | null {\n    const context = this.contextCache.get(sessionId)\n    return context ? [...context.messages] : null\n  }\n\n  /**\n   * \u8BBE\u7F6E\u6D88\u606F\u4E3A\u91CD\u8981\n   */\n  markMessageAsImportant(sessionId: string, messageId: string): void {\n    const context = this.contextCache.get(sessionId)\n    if (context) {\n      const message = context.messages.find((m) => m.id === messageId)\n      if (message) {\n        message.metadata = { ...message.metadata, isImportant: true }\n        this.contextCache.set(sessionId, context)\n      }\n    }\n  }\n}\n\n// \u9ED8\u8BA4\u914D\u7F6E\nexport const defaultFastGPTConfig: FastGPTConfig = {\n  apiKey: process.env.FASTGPT_API_KEY || \"\",\n  baseUrl: process.env.FASTGPT_API_URL || \"https://zktecoaihub.com\",\n  useProxy: true,\n  timeout: 30000,\n  maxRetries: 3,\n  retryDelay: 1000,\n}\n\n// \u5168\u5C40\u5BA2\u6237\u7AEF\u5B9E\u4F8B\nexport const enhancedFastGPTClient = new EnhancedFastGPTClient(defaultFastGPTConfig)\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e71e601635355560ed3a4a39af751f3f9fab9dd5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_16xxh5eegb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_16xxh5eegb();
cov_16xxh5eegb().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_16xxh5eegb().s[1]++;
exports.enhancedFastGPTClient = exports.defaultFastGPTConfig = exports.EnhancedFastGPTClient = void 0;
// @ts-nocheck
/// <reference lib="dom" />
const rxjs_1 =
/* istanbul ignore next */
(cov_16xxh5eegb().s[2]++, require("rxjs"));
const operators_1 =
/* istanbul ignore next */
(cov_16xxh5eegb().s[3]++, require("rxjs/operators"));
const uuid_1 =
/* istanbul ignore next */
(cov_16xxh5eegb().s[4]++, require("uuid"));
/**
 * 增强的FastGPT客户端
 * 支持上下文记忆、错误重试、连接监控等高级功能
 */
class EnhancedFastGPTClient {
  constructor(config) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[0]++;
    cov_16xxh5eegb().s[5]++;
    this.connectionStatus$ = new rxjs_1.BehaviorSubject({
      isConnected: false,
      lastPing: null,
      latency: 0,
      errorCount: 0,
      retryCount: 0
    });
    /* istanbul ignore next */
    cov_16xxh5eegb().s[6]++;
    this.contextCache = new Map();
    /* istanbul ignore next */
    cov_16xxh5eegb().s[7]++;
    this.messageQueue = [];
    /* istanbul ignore next */
    cov_16xxh5eegb().s[8]++;
    this.isProcessing = false;
    /* istanbul ignore next */
    cov_16xxh5eegb().s[9]++;
    this.config = config;
    /* istanbul ignore next */
    cov_16xxh5eegb().s[10]++;
    this.startHealthCheck();
  }
  /**
   * 获取连接状态
   */
  getConnectionStatus() {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[1]++;
    cov_16xxh5eegb().s[11]++;
    return this.connectionStatus$.asObservable();
  }
  /**
   * 初始化聊天上下文
   */
  async initializeContext(appId, userId, systemPrompt) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[2]++;
    const sessionId =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[12]++, (0, uuid_1.v4)());
    /* istanbul ignore next */
    cov_16xxh5eegb().s[13]++;
    try {
      // 调用FastGPT初始化接口
      const response =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[14]++, await this.makeRequest("/api/fastgpt/init-chat", {
        method: "POST",
        body: JSON.stringify({
          appId,
          userId,
          systemPrompt
        })
      }));
      const data =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[15]++, await response.json());
      const context =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[16]++, {
        sessionId,
        appId,
        userId,
        messages: [],
        variables:
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[0][0]++, data.variables) ||
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[0][1]++, {}),
        systemPrompt:
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[1][0]++, systemPrompt) ||
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[1][1]++, data.systemPrompt),
        maxContextLength: 4000 // 可配置的上下文长度限制
      });
      // 添加欢迎消息
      /* istanbul ignore next */
      cov_16xxh5eegb().s[17]++;
      if (data.welcomeMessage) {
        /* istanbul ignore next */
        cov_16xxh5eegb().b[2][0]++;
        cov_16xxh5eegb().s[18]++;
        context.messages.push({
          id: (0, uuid_1.v4)(),
          role: "assistant",
          content: data.welcomeMessage,
          timestamp: new Date(),
          metadata: {
            isWelcome: true
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_16xxh5eegb().b[2][1]++;
      }
      // 缓存上下文
      cov_16xxh5eegb().s[19]++;
      this.contextCache.set(sessionId, context);
      /* istanbul ignore next */
      cov_16xxh5eegb().s[20]++;
      return context;
    } catch (error) {
      /* istanbul ignore next */
      cov_16xxh5eegb().s[21]++;
      console.error("Failed to initialize context:", error);
      /* istanbul ignore next */
      cov_16xxh5eegb().s[22]++;
      throw new Error(`Context initialization failed: ${error.message}`);
    }
  }
  /**
   * 发送消息并获取流式响应
   */
  sendMessage(sessionId, content, files) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[3]++;
    cov_16xxh5eegb().s[23]++;
    return new rxjs_1.Observable(observer => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[4]++;
      const context =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[24]++, this.contextCache.get(sessionId));
      /* istanbul ignore next */
      cov_16xxh5eegb().s[25]++;
      if (!context) {
        /* istanbul ignore next */
        cov_16xxh5eegb().b[3][0]++;
        cov_16xxh5eegb().s[26]++;
        observer.error(new Error("Context not found"));
        /* istanbul ignore next */
        cov_16xxh5eegb().s[27]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_16xxh5eegb().b[3][1]++;
      }
      // 添加用户消息到上下文
      const userMessage =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[28]++, {
        id: (0, uuid_1.v4)(),
        role: "user",
        content,
        timestamp: new Date(),
        metadata: files ?
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[4][0]++, {
          files: files.map(f => {
            /* istanbul ignore next */
            cov_16xxh5eegb().f[5]++;
            cov_16xxh5eegb().s[29]++;
            return f.name;
          })
        }) :
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[4][1]++, undefined)
      });
      /* istanbul ignore next */
      cov_16xxh5eegb().s[30]++;
      context.messages.push(userMessage);
      // 智能上下文管理
      /* istanbul ignore next */
      cov_16xxh5eegb().s[31]++;
      this.manageContext(context);
      // 准备API请求
      const messages =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[32]++, this.prepareMessages(context));
      const requestBody =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[33]++, {
        appId: context.appId,
        chatId: sessionId,
        messages,
        stream: true,
        detail: true,
        system: context.systemPrompt,
        variables: context.variables,
        userId: context.userId
      });
      // 发送请求
      /* istanbul ignore next */
      cov_16xxh5eegb().s[34]++;
      this.streamRequest("/api/fastgpt/chat", requestBody).pipe((0, operators_1.timeout)(this.config.timeout), (0, operators_1.retry)({
        count: this.config.maxRetries,
        delay: (error, retryCount) => {
          /* istanbul ignore next */
          cov_16xxh5eegb().f[6]++;
          cov_16xxh5eegb().s[35]++;
          console.warn(`Retry attempt ${retryCount} for session ${sessionId}:`, error.message);
          /* istanbul ignore next */
          cov_16xxh5eegb().s[36]++;
          this.updateConnectionStatus({
            retryCount
          });
          /* istanbul ignore next */
          cov_16xxh5eegb().s[37]++;
          return new Promise(resolve => {
            /* istanbul ignore next */
            cov_16xxh5eegb().f[7]++;
            cov_16xxh5eegb().s[38]++;
            return setTimeout(resolve, this.config.retryDelay * retryCount);
          });
        }
      }), (0, operators_1.catchError)(error => {
        /* istanbul ignore next */
        cov_16xxh5eegb().f[8]++;
        cov_16xxh5eegb().s[39]++;
        this.updateConnectionStatus({
          errorCount: this.connectionStatus$.value.errorCount + 1
        });
        /* istanbul ignore next */
        cov_16xxh5eegb().s[40]++;
        observer.error(new Error(`Stream request failed: ${error.message}`));
        /* istanbul ignore next */
        cov_16xxh5eegb().s[41]++;
        return [];
      })).subscribe({
        next: response => {
          /* istanbul ignore next */
          cov_16xxh5eegb().f[9]++;
          cov_16xxh5eegb().s[42]++;
          observer.next(response);
          // 如果响应完成，添加到上下文
          /* istanbul ignore next */
          cov_16xxh5eegb().s[43]++;
          if (response.isComplete) {
            /* istanbul ignore next */
            cov_16xxh5eegb().b[5][0]++;
            const assistantMessage =
            /* istanbul ignore next */
            (cov_16xxh5eegb().s[44]++, {
              id: response.id,
              role: "assistant",
              content: response.content,
              timestamp: new Date(),
              metadata: response.metadata
            });
            /* istanbul ignore next */
            cov_16xxh5eegb().s[45]++;
            context.messages.push(assistantMessage);
            /* istanbul ignore next */
            cov_16xxh5eegb().s[46]++;
            this.contextCache.set(sessionId, context);
          } else
          /* istanbul ignore next */
          {
            cov_16xxh5eegb().b[5][1]++;
          }
        },
        error: error => {
          /* istanbul ignore next */
          cov_16xxh5eegb().f[10]++;
          cov_16xxh5eegb().s[47]++;
          return observer.error(error);
        },
        complete: () => {
          /* istanbul ignore next */
          cov_16xxh5eegb().f[11]++;
          cov_16xxh5eegb().s[48]++;
          return observer.complete();
        }
      });
    });
  }
  /**
   * 智能上下文管理
   * 当上下文过长时，保留重要消息并压缩历史
   */
  manageContext(context) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[12]++;
    cov_16xxh5eegb().s[49]++;
    if (this.calculateContextLength(context) <= context.maxContextLength) {
      /* istanbul ignore next */
      cov_16xxh5eegb().b[6][0]++;
      cov_16xxh5eegb().s[50]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_16xxh5eegb().b[6][1]++;
    }
    cov_16xxh5eegb().s[51]++;
    console.log(`Context too long for session ${context.sessionId}, managing...`);
    // 保留系统消息、最近的消息和重要消息
    const importantMessages =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[52]++, context.messages.filter(msg => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[13]++;
      cov_16xxh5eegb().s[53]++;
      return /* istanbul ignore next */(cov_16xxh5eegb().b[7][0]++, msg.role === "system") ||
      /* istanbul ignore next */
      (cov_16xxh5eegb().b[7][1]++, msg.metadata?.isWelcome) ||
      /* istanbul ignore next */
      (cov_16xxh5eegb().b[7][2]++, msg.metadata?.isImportant);
    }));
    const recentMessages =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[54]++, context.messages.slice(-10)); // 保留最近10条消息
    // 合并并去重
    const preservedMessages =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[55]++, [...importantMessages, ...recentMessages.filter(msg => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[14]++;
      cov_16xxh5eegb().s[56]++;
      return !importantMessages.some(im => {
        /* istanbul ignore next */
        cov_16xxh5eegb().f[15]++;
        cov_16xxh5eegb().s[57]++;
        return im.id === msg.id;
      });
    })].sort((a, b) => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[16]++;
      cov_16xxh5eegb().s[58]++;
      return a.timestamp.getTime() - b.timestamp.getTime();
    }));
    // 如果还是太长，进一步压缩
    /* istanbul ignore next */
    cov_16xxh5eegb().s[59]++;
    if (this.calculateContextLength({
      ...context,
      messages: preservedMessages
    }) > context.maxContextLength) {
      /* istanbul ignore next */
      cov_16xxh5eegb().b[8][0]++;
      // 创建摘要消息
      const summaryContent =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[60]++, this.createContextSummary(context.messages.slice(0, -10)));
      const summaryMessage =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[61]++, {
        id: (0, uuid_1.v4)(),
        role: "system",
        content: `[Context Summary] ${summaryContent}`,
        timestamp: new Date(),
        metadata: {
          isSummary: true
        }
      });
      /* istanbul ignore next */
      cov_16xxh5eegb().s[62]++;
      context.messages = [summaryMessage, ...recentMessages];
    } else {
      /* istanbul ignore next */
      cov_16xxh5eegb().b[8][1]++;
      cov_16xxh5eegb().s[63]++;
      context.messages = preservedMessages;
    }
    /* istanbul ignore next */
    cov_16xxh5eegb().s[64]++;
    console.log(`Context managed: ${context.messages.length} messages remaining`);
  }
  /**
   * 计算上下文长度（简单的字符计数，实际应该用token计数）
   */
  calculateContextLength(context) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[17]++;
    cov_16xxh5eegb().s[65]++;
    return context.messages.reduce((total, msg) => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[18]++;
      cov_16xxh5eegb().s[66]++;
      return total + msg.content.length;
    }, 0);
  }
  /**
   * 创建上下文摘要
   */
  createContextSummary(messages) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[19]++;
    const topics =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[67]++, new Set());
    const keyPoints =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[68]++, []);
    /* istanbul ignore next */
    cov_16xxh5eegb().s[69]++;
    messages.forEach(msg => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[20]++;
      cov_16xxh5eegb().s[70]++;
      if (msg.role === "user") {
        /* istanbul ignore next */
        cov_16xxh5eegb().b[9][0]++;
        // 提取关键词
        const words =
        /* istanbul ignore next */
        (cov_16xxh5eegb().s[71]++, msg.content.split(/\s+/).filter(word => {
          /* istanbul ignore next */
          cov_16xxh5eegb().f[21]++;
          cov_16xxh5eegb().s[72]++;
          return word.length > 3;
        }));
        /* istanbul ignore next */
        cov_16xxh5eegb().s[73]++;
        words.slice(0, 3).forEach(word => {
          /* istanbul ignore next */
          cov_16xxh5eegb().f[22]++;
          cov_16xxh5eegb().s[74]++;
          return topics.add(word);
        });
      } else {
        /* istanbul ignore next */
        cov_16xxh5eegb().b[9][1]++;
        cov_16xxh5eegb().s[75]++;
        if (
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[11][0]++, msg.role === "assistant") &&
        /* istanbul ignore next */
        (cov_16xxh5eegb().b[11][1]++, msg.content.length > 100)) {
          /* istanbul ignore next */
          cov_16xxh5eegb().b[10][0]++;
          cov_16xxh5eegb().s[76]++;
          // 提取重要回答的开头
          keyPoints.push(msg.content.substring(0, 50) + "...");
        } else
        /* istanbul ignore next */
        {
          cov_16xxh5eegb().b[10][1]++;
        }
      }
    });
    /* istanbul ignore next */
    cov_16xxh5eegb().s[77]++;
    return `Topics discussed: ${Array.from(topics).join(", ")}. Key points: ${keyPoints.join(" ")}`;
  }
  /**
   * 准备发送给API的消息格式
   */
  prepareMessages(context) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[23]++;
    cov_16xxh5eegb().s[78]++;
    return context.messages.filter(msg => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[24]++;
      cov_16xxh5eegb().s[79]++;
      return !msg.metadata?.isSummary;
    }) // 过滤掉摘要消息，避免重复
    .map(msg => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[25]++;
      cov_16xxh5eegb().s[80]++;
      return {
        role: msg.role,
        content: msg.content
      };
    });
  }
  /**
   * 流式请求处理
   */
  streamRequest(endpoint, body) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[26]++;
    cov_16xxh5eegb().s[81]++;
    return new rxjs_1.Observable(observer => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[27]++;
      const responseId =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[82]++, (0, uuid_1.v4)());
      let accumulatedContent =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[83]++, "");
      /* istanbul ignore next */
      cov_16xxh5eegb().s[84]++;
      fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(body)
      }).then(response => {
        /* istanbul ignore next */
        cov_16xxh5eegb().f[28]++;
        cov_16xxh5eegb().s[85]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_16xxh5eegb().b[12][0]++;
          cov_16xxh5eegb().s[86]++;
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        } else
        /* istanbul ignore next */
        {
          cov_16xxh5eegb().b[12][1]++;
        }
        const reader =
        /* istanbul ignore next */
        (cov_16xxh5eegb().s[87]++, response.body?.getReader());
        /* istanbul ignore next */
        cov_16xxh5eegb().s[88]++;
        if (!reader) {
          /* istanbul ignore next */
          cov_16xxh5eegb().b[13][0]++;
          cov_16xxh5eegb().s[89]++;
          throw new Error("Response body is null");
        } else
        /* istanbul ignore next */
        {
          cov_16xxh5eegb().b[13][1]++;
        }
        const decoder =
        /* istanbul ignore next */
        (cov_16xxh5eegb().s[90]++, new TextDecoder());
        let buffer =
        /* istanbul ignore next */
        (cov_16xxh5eegb().s[91]++, "");
        /* istanbul ignore next */
        cov_16xxh5eegb().s[92]++;
        const processChunk = async () => {
          /* istanbul ignore next */
          cov_16xxh5eegb().f[29]++;
          cov_16xxh5eegb().s[93]++;
          try {
            const {
              done,
              value
            } =
            /* istanbul ignore next */
            (cov_16xxh5eegb().s[94]++, await reader.read());
            /* istanbul ignore next */
            cov_16xxh5eegb().s[95]++;
            if (done) {
              /* istanbul ignore next */
              cov_16xxh5eegb().b[14][0]++;
              cov_16xxh5eegb().s[96]++;
              // 发送最终完成响应
              observer.next({
                id: responseId,
                content: accumulatedContent,
                delta: "",
                isComplete: true
              });
              /* istanbul ignore next */
              cov_16xxh5eegb().s[97]++;
              observer.complete();
              /* istanbul ignore next */
              cov_16xxh5eegb().s[98]++;
              return;
            } else
            /* istanbul ignore next */
            {
              cov_16xxh5eegb().b[14][1]++;
            }
            cov_16xxh5eegb().s[99]++;
            buffer += decoder.decode(value, {
              stream: true
            });
            const lines =
            /* istanbul ignore next */
            (cov_16xxh5eegb().s[100]++, buffer.split("\n"));
            /* istanbul ignore next */
            cov_16xxh5eegb().s[101]++;
            buffer =
            /* istanbul ignore next */
            (cov_16xxh5eegb().b[15][0]++, lines.pop()) ||
            /* istanbul ignore next */
            (cov_16xxh5eegb().b[15][1]++, ""); // 保留不完整的行
            /* istanbul ignore next */
            cov_16xxh5eegb().s[102]++;
            for (const line of lines) {
              /* istanbul ignore next */
              cov_16xxh5eegb().s[103]++;
              if (line.trim() === "") {
                /* istanbul ignore next */
                cov_16xxh5eegb().b[16][0]++;
                cov_16xxh5eegb().s[104]++;
                continue;
              } else
              /* istanbul ignore next */
              {
                cov_16xxh5eegb().b[16][1]++;
              }
              cov_16xxh5eegb().s[105]++;
              if (line.startsWith("data: ")) {
                /* istanbul ignore next */
                cov_16xxh5eegb().b[17][0]++;
                const data =
                /* istanbul ignore next */
                (cov_16xxh5eegb().s[106]++, line.slice(6));
                /* istanbul ignore next */
                cov_16xxh5eegb().s[107]++;
                if (data === "[DONE]") {
                  /* istanbul ignore next */
                  cov_16xxh5eegb().b[18][0]++;
                  cov_16xxh5eegb().s[108]++;
                  observer.next({
                    id: responseId,
                    content: accumulatedContent,
                    delta: "",
                    isComplete: true
                  });
                  /* istanbul ignore next */
                  cov_16xxh5eegb().s[109]++;
                  observer.complete();
                  /* istanbul ignore next */
                  cov_16xxh5eegb().s[110]++;
                  return;
                } else
                /* istanbul ignore next */
                {
                  cov_16xxh5eegb().b[18][1]++;
                }
                cov_16xxh5eegb().s[111]++;
                try {
                  const parsed =
                  /* istanbul ignore next */
                  (cov_16xxh5eegb().s[112]++, JSON.parse(data));
                  /* istanbul ignore next */
                  cov_16xxh5eegb().s[113]++;
                  if (parsed.choices?.[0]?.delta?.content) {
                    /* istanbul ignore next */
                    cov_16xxh5eegb().b[19][0]++;
                    const delta =
                    /* istanbul ignore next */
                    (cov_16xxh5eegb().s[114]++, parsed.choices[0].delta.content);
                    /* istanbul ignore next */
                    cov_16xxh5eegb().s[115]++;
                    accumulatedContent += delta;
                    /* istanbul ignore next */
                    cov_16xxh5eegb().s[116]++;
                    observer.next({
                      id: responseId,
                      content: accumulatedContent,
                      delta,
                      isComplete: false,
                      metadata: parsed.metadata
                    });
                  } else
                  /* istanbul ignore next */
                  {
                    cov_16xxh5eegb().b[19][1]++;
                  }
                } catch (e) {
                  /* istanbul ignore next */
                  cov_16xxh5eegb().s[117]++;
                  console.warn("Failed to parse SSE data:", data);
                }
              } else
              /* istanbul ignore next */
              {
                cov_16xxh5eegb().b[17][1]++;
              }
            }
            /* istanbul ignore next */
            cov_16xxh5eegb().s[118]++;
            processChunk();
          } catch (error) {
            /* istanbul ignore next */
            cov_16xxh5eegb().s[119]++;
            observer.error(error);
          }
        };
        /* istanbul ignore next */
        cov_16xxh5eegb().s[120]++;
        processChunk();
      }).catch(error => {
        /* istanbul ignore next */
        cov_16xxh5eegb().f[30]++;
        cov_16xxh5eegb().s[121]++;
        return observer.error(error);
      });
    });
  }
  /**
   * 通用请求方法，支持重试
   */
  async makeRequest(endpoint, options) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[31]++;
    let lastError;
    /* istanbul ignore next */
    cov_16xxh5eegb().s[122]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[123]++, 0); attempt <= this.config.maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_16xxh5eegb().s[124]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_16xxh5eegb().s[125]++, await fetch(endpoint, {
          ...options,
          headers: {
            "Content-Type": "application/json",
            ...options.headers
          }
        }));
        /* istanbul ignore next */
        cov_16xxh5eegb().s[126]++;
        if (response.ok) {
          /* istanbul ignore next */
          cov_16xxh5eegb().b[20][0]++;
          cov_16xxh5eegb().s[127]++;
          this.updateConnectionStatus({
            isConnected: true,
            lastPing: new Date(),
            errorCount: 0
          });
          /* istanbul ignore next */
          cov_16xxh5eegb().s[128]++;
          return response;
        } else {
          /* istanbul ignore next */
          cov_16xxh5eegb().b[20][1]++;
          cov_16xxh5eegb().s[129]++;
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_16xxh5eegb().s[130]++;
        lastError = error;
        /* istanbul ignore next */
        cov_16xxh5eegb().s[131]++;
        if (attempt < this.config.maxRetries) {
          /* istanbul ignore next */
          cov_16xxh5eegb().b[21][0]++;
          cov_16xxh5eegb().s[132]++;
          console.warn(`Request attempt ${attempt + 1} failed, retrying...`, error.message);
          /* istanbul ignore next */
          cov_16xxh5eegb().s[133]++;
          await new Promise(resolve => {
            /* istanbul ignore next */
            cov_16xxh5eegb().f[32]++;
            cov_16xxh5eegb().s[134]++;
            return setTimeout(resolve, this.config.retryDelay * (attempt + 1));
          });
        } else
        /* istanbul ignore next */
        {
          cov_16xxh5eegb().b[21][1]++;
        }
      }
    }
    /* istanbul ignore next */
    cov_16xxh5eegb().s[135]++;
    this.updateConnectionStatus({
      isConnected: false,
      errorCount: this.connectionStatus$.value.errorCount + 1
    });
    /* istanbul ignore next */
    cov_16xxh5eegb().s[136]++;
    throw lastError;
  }
  /**
   * 更新连接状态
   */
  updateConnectionStatus(updates) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[33]++;
    const current =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[137]++, this.connectionStatus$.value);
    /* istanbul ignore next */
    cov_16xxh5eegb().s[138]++;
    this.connectionStatus$.next({
      ...current,
      ...updates
    });
  }
  /**
   * 健康检查
   */
  startHealthCheck() {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[34]++;
    cov_16xxh5eegb().s[139]++;
    setInterval(async () => {
      /* istanbul ignore next */
      cov_16xxh5eegb().f[35]++;
      cov_16xxh5eegb().s[140]++;
      try {
        const start =
        /* istanbul ignore next */
        (cov_16xxh5eegb().s[141]++, Date.now());
        /* istanbul ignore next */
        cov_16xxh5eegb().s[142]++;
        await this.makeRequest("/api/fastgpt/health", {
          method: "GET"
        });
        const latency =
        /* istanbul ignore next */
        (cov_16xxh5eegb().s[143]++, Date.now() - start);
        /* istanbul ignore next */
        cov_16xxh5eegb().s[144]++;
        this.updateConnectionStatus({
          isConnected: true,
          lastPing: new Date(),
          latency
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_16xxh5eegb().s[145]++;
        this.updateConnectionStatus({
          isConnected: false,
          errorCount: this.connectionStatus$.value.errorCount + 1
        });
      }
    }, 30000); // 每30秒检查一次
  }
  /**
   * 获取上下文信息
   */
  getContext(sessionId) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[36]++;
    cov_16xxh5eegb().s[146]++;
    return this.contextCache.get(sessionId);
  }
  /**
   * 清理上下文
   */
  clearContext(sessionId) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[37]++;
    cov_16xxh5eegb().s[147]++;
    this.contextCache.delete(sessionId);
  }
  /**
   * 获取所有活跃会话
   */
  getActiveSessions() {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[38]++;
    cov_16xxh5eegb().s[148]++;
    return Array.from(this.contextCache.keys());
  }
  /**
   * 导出聊天历史
   */
  exportChatHistory(sessionId) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[39]++;
    const context =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[149]++, this.contextCache.get(sessionId));
    /* istanbul ignore next */
    cov_16xxh5eegb().s[150]++;
    return context ?
    /* istanbul ignore next */
    (cov_16xxh5eegb().b[22][0]++, [...context.messages]) :
    /* istanbul ignore next */
    (cov_16xxh5eegb().b[22][1]++, null);
  }
  /**
   * 设置消息为重要
   */
  markMessageAsImportant(sessionId, messageId) {
    /* istanbul ignore next */
    cov_16xxh5eegb().f[40]++;
    const context =
    /* istanbul ignore next */
    (cov_16xxh5eegb().s[151]++, this.contextCache.get(sessionId));
    /* istanbul ignore next */
    cov_16xxh5eegb().s[152]++;
    if (context) {
      /* istanbul ignore next */
      cov_16xxh5eegb().b[23][0]++;
      const message =
      /* istanbul ignore next */
      (cov_16xxh5eegb().s[153]++, context.messages.find(m => {
        /* istanbul ignore next */
        cov_16xxh5eegb().f[41]++;
        cov_16xxh5eegb().s[154]++;
        return m.id === messageId;
      }));
      /* istanbul ignore next */
      cov_16xxh5eegb().s[155]++;
      if (message) {
        /* istanbul ignore next */
        cov_16xxh5eegb().b[24][0]++;
        cov_16xxh5eegb().s[156]++;
        message.metadata = {
          ...message.metadata,
          isImportant: true
        };
        /* istanbul ignore next */
        cov_16xxh5eegb().s[157]++;
        this.contextCache.set(sessionId, context);
      } else
      /* istanbul ignore next */
      {
        cov_16xxh5eegb().b[24][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_16xxh5eegb().b[23][1]++;
    }
  }
}
/* istanbul ignore next */
cov_16xxh5eegb().s[158]++;
exports.EnhancedFastGPTClient = EnhancedFastGPTClient;
// 默认配置
/* istanbul ignore next */
cov_16xxh5eegb().s[159]++;
exports.defaultFastGPTConfig = {
  apiKey:
  /* istanbul ignore next */
  (cov_16xxh5eegb().b[25][0]++, process.env.FASTGPT_API_KEY) ||
  /* istanbul ignore next */
  (cov_16xxh5eegb().b[25][1]++, ""),
  baseUrl:
  /* istanbul ignore next */
  (cov_16xxh5eegb().b[26][0]++, process.env.FASTGPT_API_URL) ||
  /* istanbul ignore next */
  (cov_16xxh5eegb().b[26][1]++, "https://zktecoaihub.com"),
  useProxy: true,
  timeout: 30000,
  maxRetries: 3,
  retryDelay: 1000
};
// 全局客户端实例
/* istanbul ignore next */
cov_16xxh5eegb().s[160]++;
exports.enhancedFastGPTClient = new EnhancedFastGPTClient(exports.defaultFastGPTConfig);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,