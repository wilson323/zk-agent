b155108f8bc1c70e9b30af5b6b3dbbdf
"use strict";

/* istanbul ignore next */
function cov_2mao18m0xw() {
  var path = "E:\\zk-agent\\lib\\utils\\fastgpt-utils.ts";
  var hash = "8cc518f44e124fd6f9c52c4a6fb3c77ef8b3e58d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\utils\\fastgpt-utils.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 151
        }
      },
      "4": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 77
        }
      },
      "5": {
        start: {
          line: 14,
          column: 23
        },
        end: {
          line: 16,
          column: 1
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 78
        }
      },
      "7": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 40
        }
      },
      "8": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 21,
          column: 1
        }
      },
      "9": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 77
        }
      },
      "10": {
        start: {
          line: 22,
          column: 0
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "11": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 74,
          column: 1
        }
      },
      "12": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 52
        }
      },
      "14": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 15
        }
      },
      "15": {
        start: {
          line: 29,
          column: 19
        },
        end: {
          line: 29,
          column: 44
        }
      },
      "16": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 30,
          column: 37
        }
      },
      "17": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 20
        }
      },
      "18": {
        start: {
          line: 32,
          column: 29
        },
        end: {
          line: 32,
          column: 31
        }
      },
      "19": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "20": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "21": {
        start: {
          line: 35,
          column: 49
        },
        end: {
          line: 35,
          column: 68
        }
      },
      "22": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 31
        }
      },
      "23": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 38,
          column: 22
        }
      },
      "24": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 22
        }
      },
      "25": {
        start: {
          line: 39,
          column: 26
        },
        end: {
          line: 39,
          column: 65
        }
      },
      "26": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 40,
          column: 80
        }
      },
      "27": {
        start: {
          line: 40,
          column: 61
        },
        end: {
          line: 40,
          column: 79
        }
      },
      "28": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 60,
          column: 13
        }
      },
      "29": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "30": {
        start: {
          line: 43,
          column: 33
        },
        end: {
          line: 43,
          column: 46
        }
      },
      "31": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 47,
          column: 21
        }
      },
      "32": {
        start: {
          line: 46,
          column: 24
        },
        end: {
          line: 46,
          column: 30
        }
      },
      "33": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 58,
          column: 21
        }
      },
      "34": {
        start: {
          line: 49,
          column: 39
        },
        end: {
          line: 49,
          column: 55
        }
      },
      "35": {
        start: {
          line: 50,
          column: 24
        },
        end: {
          line: 54,
          column: 25
        }
      },
      "36": {
        start: {
          line: 51,
          column: 44
        },
        end: {
          line: 51,
          column: 75
        }
      },
      "37": {
        start: {
          line: 52,
          column: 28
        },
        end: {
          line: 52,
          column: 58
        }
      },
      "38": {
        start: {
          line: 53,
          column: 28
        },
        end: {
          line: 53,
          column: 56
        }
      },
      "39": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 71
        }
      },
      "40": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "41": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 43
        }
      },
      "42": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 57
        }
      },
      "43": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 95
        }
      },
      "44": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 29
        }
      },
      "45": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 75,
          column: 54
        }
      },
      "46": {
        start: {
          line: 77,
          column: 24
        },
        end: {
          line: 96,
          column: 1
        }
      },
      "47": {
        start: {
          line: 79,
          column: 19
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "48": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "49": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 37
        }
      },
      "50": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 60
        }
      },
      "51": {
        start: {
          line: 97,
          column: 0
        },
        end: {
          line: 97,
          column: 42
        }
      },
      "52": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 112,
          column: 1
        }
      },
      "53": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 111,
          column: 5
        }
      },
      "54": {
        start: {
          line: 101,
          column: 23
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "55": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 51
        }
      },
      "56": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 68
        }
      },
      "57": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 18
        }
      },
      "58": {
        start: {
          line: 113,
          column: 0
        },
        end: {
          line: 113,
          column: 56
        }
      },
      "59": {
        start: {
          line: 114,
          column: 0
        },
        end: {
          line: 120,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 23
          },
          end: {
            line: 14,
            column: 24
          }
        },
        loc: {
          start: {
            line: 14,
            column: 29
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 19,
            column: 27
          }
        },
        loc: {
          start: {
            line: 19,
            column: 32
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 30
          },
          end: {
            line: 24,
            column: 31
          }
        },
        loc: {
          start: {
            line: 24,
            column: 80
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 40,
            column: 51
          },
          end: {
            line: 40,
            column: 52
          }
        },
        loc: {
          start: {
            line: 40,
            column: 61
          },
          end: {
            line: 40,
            column: 79
          }
        },
        line: 40
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 77,
            column: 24
          },
          end: {
            line: 77,
            column: 25
          }
        },
        loc: {
          start: {
            line: 77,
            column: 126
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 77
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 99,
            column: 31
          },
          end: {
            line: 99,
            column: 32
          }
        },
        loc: {
          start: {
            line: 99,
            column: 79
          },
          end: {
            line: 112,
            column: 1
          }
        },
        line: 99
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 38,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 38,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "6": {
        loc: {
          start: {
            line: 44,
            column: 20
          },
          end: {
            line: 47,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 20
          },
          end: {
            line: 47,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "7": {
        loc: {
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 54,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 54,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "8": {
        loc: {
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 50,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 50,
            column: 42
          }
        }, {
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 50,
            column: 69
          }
        }, {
          start: {
            line: 50,
            column: 73
          },
          end: {
            line: 50,
            column: 104
          }
        }],
        line: 50
      },
      "9": {
        loc: {
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "10": {
        loc: {
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 69,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 41
          },
          end: {
            line: 69,
            column: 46
          }
        }, {
          start: {
            line: 69,
            column: 49
          },
          end: {
            line: 69,
            column: 93
          }
        }],
        line: 69
      },
      "11": {
        loc: {
          start: {
            line: 77,
            column: 70
          },
          end: {
            line: 77,
            column: 90
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 79
          },
          end: {
            line: 77,
            column: 90
          }
        }],
        line: 77
      },
      "12": {
        loc: {
          start: {
            line: 77,
            column: 92
          },
          end: {
            line: 77,
            column: 105
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 101
          },
          end: {
            line: 77,
            column: 105
          }
        }],
        line: 77
      },
      "13": {
        loc: {
          start: {
            line: 77,
            column: 107
          },
          end: {
            line: 77,
            column: 121
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 77,
            column: 116
          },
          end: {
            line: 77,
            column: 121
          }
        }],
        line: 77
      },
      "14": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "15": {
        loc: {
          start: {
            line: 99,
            column: 53
          },
          end: {
            line: 99,
            column: 74
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 99,
            column: 61
          },
          end: {
            line: 99,
            column: 74
          }
        }],
        line: 99
      },
      "16": {
        loc: {
          start: {
            line: 106,
            column: 15
          },
          end: {
            line: 106,
            column: 50
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 39
          },
          end: {
            line: 106,
            column: 45
          }
        }, {
          start: {
            line: 106,
            column: 48
          },
          end: {
            line: 106,
            column: 50
          }
        }],
        line: 106
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0],
      "13": [0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\utils\\fastgpt-utils.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\lib\\utils\\fastgpt-utils.ts"],
      sourcesContent: ["/* eslint-disable */\n// @ts-nocheck\nimport fastGPTClient from \"@/lib/api/fastgpt-client\"\n\n/**\n * Utility functions for FastGPT API operations\n */\n\n// Generate a unique chat ID\nexport const generateChatId: any = (): string => {\n  return `chat_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n}\n\n// Generate a unique message ID\nexport const generateMessageId: any = (): string => {\n  return `msg_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n}\n\n// Process streaming response from FastGPT API\nexport const processStreamResponse: any = async (\n  response: Response,\n  onChunk: (content: string) => void,\n  onComplete: (fullContent: string) => void,\n  onError: (error: Error) => void,\n): Promise<void> => {\n  if (!response.body) {\n    onError(new Error(\"Response body is null\"))\n    return\n  }\n\n  const reader: any = response.body.getReader()\n  const decoder: any = new TextDecoder()\n  let done: any = false\n  let accumulatedContent: any = \"\"\n\n  try {\n    while (!done) {\n      const { value, done: doneReading } = await reader.read()\n      done = doneReading\n\n      if (done) break\n\n      const chunk: any = decoder.decode(value, { stream: true })\n      const lines: any = chunk.split(\"\\n\").filter((line) => line.trim() !== \"\")\n\n      for (const line of lines) {\n        if (line.startsWith(\"data: \")) {\n          const data: any = line.slice(6)\n\n          if (data === \"[DONE]\") {\n            // Stream ended\n            break\n          }\n\n          try {\n            const parsed: any = JSON.parse(data)\n            if (parsed.choices && parsed.choices[0].delta && parsed.choices[0].delta.content) {\n              const content: any = parsed.choices[0].delta.content\n              accumulatedContent += content\n              onChunk(accumulatedContent)\n            }\n          } catch (e) {\n            console.error(\"Error parsing stream data:\", e)\n          }\n        }\n      }\n    }\n\n    // Stream ended, call complete callback\n    if (accumulatedContent) {\n      onComplete(accumulatedContent)\n    }\n  } catch (error) {\n    console.error(\"Error processing stream:\", error)\n    onError(error instanceof Error ? error : new Error(\"Unknown error processing stream\"))\n  } finally {\n    reader.releaseLock()\n  }\n}\n\n// Send a chat message to FastGPT API\nexport const sendChatMessage: any = async (\n  appId: string,\n  chatId: string,\n  messages: Array<{ role: string; content: string }>,\n  systemPrompt?: string,\n  userId = \"anonymous\",\n  stream = true,\n  detail = false,\n): Promise<Response> => {\n  // Prepare request parameters\n  const params: any = {\n    model: appId,\n    messages,\n    stream,\n    detail,\n    chatId,\n    responseChatItemId: `resp_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n    variables: {\n      userId,\n    },\n  }\n\n  // Add system message if exists\n  if (systemPrompt) {\n    params.system = systemPrompt\n  }\n\n  // Send request to FastGPT API\n  return fastGPTClient.chatCompletions(params)\n}\n\n// Get question suggestions (\"Guess what you want to ask\")\nexport const getQuestionSuggestions: any = async (\n  appId: string,\n  chatId: string,\n  model = \"GPT-4o-mini\",\n): Promise<string[]> => {\n  try {\n    const result: any = await fastGPTClient.createQuestionGuide(appId, chatId, {\n      open: true,\n      model,\n      customPrompt:\n        \"You are a helpful assistant. Based on the conversation history, suggest 3 follow-up questions the user might want to ask.\",\n    })\n\n    return Array.isArray(result) ? result : []\n  } catch (error) {\n    console.error(\"Failed to get question suggestions:\", error)\n    return []\n  }\n}\n\nexport default {\n  generateChatId,\n  generateMessageId,\n  processStreamResponse,\n  sendChatMessage,\n  getQuestionSuggestions,\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8cc518f44e124fd6f9c52c4a6fb3c77ef8b3e58d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mao18m0xw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mao18m0xw();
var __importDefault =
/* istanbul ignore next */
(cov_2mao18m0xw().s[0]++,
/* istanbul ignore next */
(cov_2mao18m0xw().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_2mao18m0xw().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_2mao18m0xw().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_2mao18m0xw().f[0]++;
  cov_2mao18m0xw().s[1]++;
  return /* istanbul ignore next */(cov_2mao18m0xw().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_2mao18m0xw().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_2mao18m0xw().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_2mao18m0xw().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_2mao18m0xw().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2mao18m0xw().s[3]++;
exports.getQuestionSuggestions = exports.sendChatMessage = exports.processStreamResponse = exports.generateMessageId = exports.generateChatId = void 0;
/* eslint-disable */
// @ts-nocheck
const fastgpt_client_1 =
/* istanbul ignore next */
(cov_2mao18m0xw().s[4]++, __importDefault(require("@/lib/api/fastgpt-client")));
/**
 * Utility functions for FastGPT API operations
 */
// Generate a unique chat ID
/* istanbul ignore next */
cov_2mao18m0xw().s[5]++;
const generateChatId = () => {
  /* istanbul ignore next */
  cov_2mao18m0xw().f[1]++;
  cov_2mao18m0xw().s[6]++;
  return `chat_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
};
/* istanbul ignore next */
cov_2mao18m0xw().s[7]++;
exports.generateChatId = generateChatId;
// Generate a unique message ID
/* istanbul ignore next */
cov_2mao18m0xw().s[8]++;
const generateMessageId = () => {
  /* istanbul ignore next */
  cov_2mao18m0xw().f[2]++;
  cov_2mao18m0xw().s[9]++;
  return `msg_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
};
/* istanbul ignore next */
cov_2mao18m0xw().s[10]++;
exports.generateMessageId = generateMessageId;
// Process streaming response from FastGPT API
/* istanbul ignore next */
cov_2mao18m0xw().s[11]++;
const processStreamResponse = async (response, onChunk, onComplete, onError) => {
  /* istanbul ignore next */
  cov_2mao18m0xw().f[3]++;
  cov_2mao18m0xw().s[12]++;
  if (!response.body) {
    /* istanbul ignore next */
    cov_2mao18m0xw().b[3][0]++;
    cov_2mao18m0xw().s[13]++;
    onError(new Error("Response body is null"));
    /* istanbul ignore next */
    cov_2mao18m0xw().s[14]++;
    return;
  } else
  /* istanbul ignore next */
  {
    cov_2mao18m0xw().b[3][1]++;
  }
  const reader =
  /* istanbul ignore next */
  (cov_2mao18m0xw().s[15]++, response.body.getReader());
  const decoder =
  /* istanbul ignore next */
  (cov_2mao18m0xw().s[16]++, new TextDecoder());
  let done =
  /* istanbul ignore next */
  (cov_2mao18m0xw().s[17]++, false);
  let accumulatedContent =
  /* istanbul ignore next */
  (cov_2mao18m0xw().s[18]++, "");
  /* istanbul ignore next */
  cov_2mao18m0xw().s[19]++;
  try {
    /* istanbul ignore next */
    cov_2mao18m0xw().s[20]++;
    while (!done) {
      const {
        value,
        done: doneReading
      } =
      /* istanbul ignore next */
      (cov_2mao18m0xw().s[21]++, await reader.read());
      /* istanbul ignore next */
      cov_2mao18m0xw().s[22]++;
      done = doneReading;
      /* istanbul ignore next */
      cov_2mao18m0xw().s[23]++;
      if (done) {
        /* istanbul ignore next */
        cov_2mao18m0xw().b[4][0]++;
        cov_2mao18m0xw().s[24]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_2mao18m0xw().b[4][1]++;
      }
      const chunk =
      /* istanbul ignore next */
      (cov_2mao18m0xw().s[25]++, decoder.decode(value, {
        stream: true
      }));
      const lines =
      /* istanbul ignore next */
      (cov_2mao18m0xw().s[26]++, chunk.split("\n").filter(line => {
        /* istanbul ignore next */
        cov_2mao18m0xw().f[4]++;
        cov_2mao18m0xw().s[27]++;
        return line.trim() !== "";
      }));
      /* istanbul ignore next */
      cov_2mao18m0xw().s[28]++;
      for (const line of lines) {
        /* istanbul ignore next */
        cov_2mao18m0xw().s[29]++;
        if (line.startsWith("data: ")) {
          /* istanbul ignore next */
          cov_2mao18m0xw().b[5][0]++;
          const data =
          /* istanbul ignore next */
          (cov_2mao18m0xw().s[30]++, line.slice(6));
          /* istanbul ignore next */
          cov_2mao18m0xw().s[31]++;
          if (data === "[DONE]") {
            /* istanbul ignore next */
            cov_2mao18m0xw().b[6][0]++;
            cov_2mao18m0xw().s[32]++;
            // Stream ended
            break;
          } else
          /* istanbul ignore next */
          {
            cov_2mao18m0xw().b[6][1]++;
          }
          cov_2mao18m0xw().s[33]++;
          try {
            const parsed =
            /* istanbul ignore next */
            (cov_2mao18m0xw().s[34]++, JSON.parse(data));
            /* istanbul ignore next */
            cov_2mao18m0xw().s[35]++;
            if (
            /* istanbul ignore next */
            (cov_2mao18m0xw().b[8][0]++, parsed.choices) &&
            /* istanbul ignore next */
            (cov_2mao18m0xw().b[8][1]++, parsed.choices[0].delta) &&
            /* istanbul ignore next */
            (cov_2mao18m0xw().b[8][2]++, parsed.choices[0].delta.content)) {
              /* istanbul ignore next */
              cov_2mao18m0xw().b[7][0]++;
              const content =
              /* istanbul ignore next */
              (cov_2mao18m0xw().s[36]++, parsed.choices[0].delta.content);
              /* istanbul ignore next */
              cov_2mao18m0xw().s[37]++;
              accumulatedContent += content;
              /* istanbul ignore next */
              cov_2mao18m0xw().s[38]++;
              onChunk(accumulatedContent);
            } else
            /* istanbul ignore next */
            {
              cov_2mao18m0xw().b[7][1]++;
            }
          } catch (e) {
            /* istanbul ignore next */
            cov_2mao18m0xw().s[39]++;
            console.error("Error parsing stream data:", e);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2mao18m0xw().b[5][1]++;
        }
      }
    }
    // Stream ended, call complete callback
    /* istanbul ignore next */
    cov_2mao18m0xw().s[40]++;
    if (accumulatedContent) {
      /* istanbul ignore next */
      cov_2mao18m0xw().b[9][0]++;
      cov_2mao18m0xw().s[41]++;
      onComplete(accumulatedContent);
    } else
    /* istanbul ignore next */
    {
      cov_2mao18m0xw().b[9][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_2mao18m0xw().s[42]++;
    console.error("Error processing stream:", error);
    /* istanbul ignore next */
    cov_2mao18m0xw().s[43]++;
    onError(error instanceof Error ?
    /* istanbul ignore next */
    (cov_2mao18m0xw().b[10][0]++, error) :
    /* istanbul ignore next */
    (cov_2mao18m0xw().b[10][1]++, new Error("Unknown error processing stream")));
  } finally {
    /* istanbul ignore next */
    cov_2mao18m0xw().s[44]++;
    reader.releaseLock();
  }
};
/* istanbul ignore next */
cov_2mao18m0xw().s[45]++;
exports.processStreamResponse = processStreamResponse;
// Send a chat message to FastGPT API
/* istanbul ignore next */
cov_2mao18m0xw().s[46]++;
const sendChatMessage = async (appId, chatId, messages, systemPrompt, userId =
/* istanbul ignore next */
(cov_2mao18m0xw().b[11][0]++, "anonymous"), stream =
/* istanbul ignore next */
(cov_2mao18m0xw().b[12][0]++, true), detail =
/* istanbul ignore next */
(cov_2mao18m0xw().b[13][0]++, false)) => {
  /* istanbul ignore next */
  cov_2mao18m0xw().f[5]++;
  // Prepare request parameters
  const params =
  /* istanbul ignore next */
  (cov_2mao18m0xw().s[47]++, {
    model: appId,
    messages,
    stream,
    detail,
    chatId,
    responseChatItemId: `resp_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
    variables: {
      userId
    }
  });
  // Add system message if exists
  /* istanbul ignore next */
  cov_2mao18m0xw().s[48]++;
  if (systemPrompt) {
    /* istanbul ignore next */
    cov_2mao18m0xw().b[14][0]++;
    cov_2mao18m0xw().s[49]++;
    params.system = systemPrompt;
  } else
  /* istanbul ignore next */
  {
    cov_2mao18m0xw().b[14][1]++;
  }
  // Send request to FastGPT API
  cov_2mao18m0xw().s[50]++;
  return fastgpt_client_1.default.chatCompletions(params);
};
/* istanbul ignore next */
cov_2mao18m0xw().s[51]++;
exports.sendChatMessage = sendChatMessage;
// Get question suggestions ("Guess what you want to ask")
/* istanbul ignore next */
cov_2mao18m0xw().s[52]++;
const getQuestionSuggestions = async (appId, chatId, model =
/* istanbul ignore next */
(cov_2mao18m0xw().b[15][0]++, "GPT-4o-mini")) => {
  /* istanbul ignore next */
  cov_2mao18m0xw().f[6]++;
  cov_2mao18m0xw().s[53]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_2mao18m0xw().s[54]++, await fastgpt_client_1.default.createQuestionGuide(appId, chatId, {
      open: true,
      model,
      customPrompt: "You are a helpful assistant. Based on the conversation history, suggest 3 follow-up questions the user might want to ask."
    }));
    /* istanbul ignore next */
    cov_2mao18m0xw().s[55]++;
    return Array.isArray(result) ?
    /* istanbul ignore next */
    (cov_2mao18m0xw().b[16][0]++, result) :
    /* istanbul ignore next */
    (cov_2mao18m0xw().b[16][1]++, []);
  } catch (error) {
    /* istanbul ignore next */
    cov_2mao18m0xw().s[56]++;
    console.error("Failed to get question suggestions:", error);
    /* istanbul ignore next */
    cov_2mao18m0xw().s[57]++;
    return [];
  }
};
/* istanbul ignore next */
cov_2mao18m0xw().s[58]++;
exports.getQuestionSuggestions = getQuestionSuggestions;
/* istanbul ignore next */
cov_2mao18m0xw().s[59]++;
exports.default = {
  generateChatId: exports.generateChatId,
  generateMessageId: exports.generateMessageId,
  processStreamResponse: exports.processStreamResponse,
  sendChatMessage: exports.sendChatMessage,
  getQuestionSuggestions: exports.getQuestionSuggestions
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,