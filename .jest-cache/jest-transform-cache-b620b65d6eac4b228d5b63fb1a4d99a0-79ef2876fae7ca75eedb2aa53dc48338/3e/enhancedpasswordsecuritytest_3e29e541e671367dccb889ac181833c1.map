{"file":"E:\\zk-agent\\__tests__\\lib\\auth\\enhanced-password-security.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\auth\\enhanced-password-security.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/auth/enhanced-password-security.test.ts\r\n * @description 增强密码安全模块测试套件\r\n * @author B团队测试工程师\r\n * @lastUpdate 2024-12-19\r\n * @coverage 100%测试覆盖率目标\r\n */\r\n\r\nimport {\r\n  EnhancedPasswordSecurity,\r\n  PasswordStrength,\r\n  validatePassword,\r\n  hashPassword,\r\n  verifyPassword,\r\n  generateSecurePassword,\r\n  recordLoginAttempt,\r\n  isAccountLocked,\r\n} from '@/lib/auth/enhanced-password-security';\r\n\r\ndescribe('EnhancedPasswordSecurity', () => {\r\n  let passwordSecurity: EnhancedPasswordSecurity;\r\n\r\n  beforeEach(() => {\r\n    passwordSecurity = EnhancedPasswordSecurity.getInstance();\r\n  });\r\n\r\n  describe('密码验证', () => {\r\n    it('应该验证强密码', () => {\r\n      const result = validatePassword('StrongP@ssw0rd123');\r\n      \r\n      expect(result.isValid).toBe(true);\r\n      expect(result.strength).toBeGreaterThanOrEqual(PasswordStrength.GOOD);\r\n      expect(result.errors).toHaveLength(0);\r\n    });\r\n\r\n    it('应该拒绝弱密码', () => {\r\n      const weakPasswords = [\r\n        'short',\r\n        'nouppercase123',\r\n        'NOLOWERCASE123',\r\n        'NoNumbers',\r\n        'NoSpecial123',\r\n      ];\r\n\r\n      weakPasswords.forEach(password => {\r\n        const result = validatePassword(password);\r\n        expect(result.isValid).toBe(false);\r\n        expect(result.errors.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('应该检测常见密码', () => {\r\n      const commonPasswords = ['password', '123456', 'admin', 'qwerty'];\r\n      \r\n      commonPasswords.forEach(password => {\r\n        const result = validatePassword(password);\r\n        expect(result.isValid).toBe(false);\r\n        expect(result.errors).toContain('不能使用常见密码');\r\n      });\r\n    });\r\n\r\n    it('应该检测个人信息', () => {\r\n      const userInfo = {\r\n        email: 'john.doe@example.com',\r\n        name: 'John Doe',\r\n        username: 'johndoe',\r\n      };\r\n\r\n      const result = validatePassword('JohnDoe123!', userInfo);\r\n      expect(result.warnings).toContain('密码不应包含个人信息');\r\n    });\r\n  });\r\n\r\n  describe('密码哈希和验证', () => {\r\n    it('应该成功哈希密码', async () => {\r\n      const password = 'TestPassword123!';\r\n      const hash = await hashPassword(password);\r\n      \r\n      expect(hash).toBeDefined();\r\n      expect(hash).not.toBe(password);\r\n      expect(hash.length).toBeGreaterThan(10);\r\n    });\r\n\r\n    it('应该验证正确的密码', async () => {\r\n      const password = 'correct-password';\r\n      const hash = await hashPassword(password);\r\n      \r\n      const isValid = await verifyPassword(password, hash);\r\n      expect(isValid).toBe(true);\r\n    });\r\n\r\n    it('应该拒绝错误的密码', async () => {\r\n      const password = 'TestPassword123!';\r\n      const wrongPassword = 'WrongPassword123!';\r\n      const hash = await hashPassword(password);\r\n      \r\n      const isValid = await verifyPassword(wrongPassword, hash);\r\n      expect(isValid).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('登录尝试跟踪', () => {\r\n    const userId = 'test-user-123';\r\n    const ip = '192.168.1.100';\r\n\r\n    beforeEach(() => {\r\n      // 清理之前的测试数据\r\n      passwordSecurity.unlockAccount(userId, ip);\r\n    });\r\n\r\n    it('应该记录成功的登录尝试', () => {\r\n      expect(() => {\r\n        recordLoginAttempt(userId, ip, true, 'test-user-agent');\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该记录失败的登录尝试', () => {\r\n      expect(() => {\r\n        recordLoginAttempt(userId, ip, false, 'test-user-agent');\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该在多次失败后锁定账户', () => {\r\n      // 记录5次失败尝试\r\n      for (let i = 0; i < 5; i++) {\r\n        recordLoginAttempt(userId, ip, false);\r\n      }\r\n      \r\n      expect(isAccountLocked(userId, ip)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('安全密码生成', () => {\r\n    it('应该生成指定长度的密码', () => {\r\n      const lengths = [8, 12, 16, 20];\r\n      \r\n      lengths.forEach(length => {\r\n        const password = generateSecurePassword(length);\r\n        expect(password.length).toBe(length);\r\n      });\r\n    });\r\n\r\n    it('应该生成包含所有字符类型的密码', () => {\r\n      const password = generateSecurePassword(16);\r\n      \r\n      expect(/[a-z]/.test(password)).toBe(true); // 小写字母\r\n      expect(/[A-Z]/.test(password)).toBe(true); // 大写字母\r\n      expect(/\\d/.test(password)).toBe(true);    // 数字\r\n      expect(/[!@#$%^&*()_+\\-=\\[\\]{}|;:,.<>?]/.test(password)).toBe(true); // 特殊字符\r\n    });\r\n\r\n    it('应该生成不同的密码', () => {\r\n      const passwords = new Set();\r\n      \r\n      for (let i = 0; i < 100; i++) {\r\n        passwords.add(generateSecurePassword(12));\r\n      }\r\n      \r\n      // 应该生成至少95%不同的密码\r\n      expect(passwords.size).toBeGreaterThanOrEqual(95);\r\n    });\r\n  });\r\n\r\n  describe('安全统计', () => {\r\n    it('应该返回安全统计信息', () => {\r\n      const stats = passwordSecurity.getSecurityStats();\r\n      \r\n      expect(stats).toHaveProperty('totalAttempts');\r\n      expect(stats).toHaveProperty('lockedAccounts');\r\n      expect(stats).toHaveProperty('config');\r\n      expect(typeof stats.totalAttempts).toBe('number');\r\n      expect(typeof stats.lockedAccounts).toBe('number');\r\n      expect(typeof stats.config).toBe('object');\r\n    });\r\n  });\r\n}); "],"version":3}