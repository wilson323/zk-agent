{"version":3,"names":["cov_2mao18m0xw","actualCoverage","fastgpt_client_1","s","__importDefault","require","generateChatId","f","Date","now","Math","random","toString","substring","exports","generateMessageId","processStreamResponse","response","onChunk","onComplete","onError","body","b","Error","reader","getReader","decoder","TextDecoder","done","accumulatedContent","value","doneReading","read","chunk","decode","stream","lines","split","filter","line","trim","startsWith","data","slice","parsed","JSON","parse","choices","delta","content","e","console","error","releaseLock","sendChatMessage","appId","chatId","messages","systemPrompt","userId","detail","params","model","responseChatItemId","variables","system","default","chatCompletions","getQuestionSuggestions","result","createQuestionGuide","open","customPrompt","Array","isArray"],"sources":["E:\\zk-agent\\lib\\utils\\fastgpt-utils.ts"],"sourcesContent":["/* eslint-disable */\n// @ts-nocheck\nimport fastGPTClient from \"@/lib/api/fastgpt-client\"\n\n/**\n * Utility functions for FastGPT API operations\n */\n\n// Generate a unique chat ID\nexport const generateChatId: any = (): string => {\n  return `chat_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n}\n\n// Generate a unique message ID\nexport const generateMessageId: any = (): string => {\n  return `msg_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n}\n\n// Process streaming response from FastGPT API\nexport const processStreamResponse: any = async (\n  response: Response,\n  onChunk: (content: string) => void,\n  onComplete: (fullContent: string) => void,\n  onError: (error: Error) => void,\n): Promise<void> => {\n  if (!response.body) {\n    onError(new Error(\"Response body is null\"))\n    return\n  }\n\n  const reader: any = response.body.getReader()\n  const decoder: any = new TextDecoder()\n  let done: any = false\n  let accumulatedContent: any = \"\"\n\n  try {\n    while (!done) {\n      const { value, done: doneReading } = await reader.read()\n      done = doneReading\n\n      if (done) break\n\n      const chunk: any = decoder.decode(value, { stream: true })\n      const lines: any = chunk.split(\"\\n\").filter((line) => line.trim() !== \"\")\n\n      for (const line of lines) {\n        if (line.startsWith(\"data: \")) {\n          const data: any = line.slice(6)\n\n          if (data === \"[DONE]\") {\n            // Stream ended\n            break\n          }\n\n          try {\n            const parsed: any = JSON.parse(data)\n            if (parsed.choices && parsed.choices[0].delta && parsed.choices[0].delta.content) {\n              const content: any = parsed.choices[0].delta.content\n              accumulatedContent += content\n              onChunk(accumulatedContent)\n            }\n          } catch (e) {\n            console.error(\"Error parsing stream data:\", e)\n          }\n        }\n      }\n    }\n\n    // Stream ended, call complete callback\n    if (accumulatedContent) {\n      onComplete(accumulatedContent)\n    }\n  } catch (error) {\n    console.error(\"Error processing stream:\", error)\n    onError(error instanceof Error ? error : new Error(\"Unknown error processing stream\"))\n  } finally {\n    reader.releaseLock()\n  }\n}\n\n// Send a chat message to FastGPT API\nexport const sendChatMessage: any = async (\n  appId: string,\n  chatId: string,\n  messages: Array<{ role: string; content: string }>,\n  systemPrompt?: string,\n  userId = \"anonymous\",\n  stream = true,\n  detail = false,\n): Promise<Response> => {\n  // Prepare request parameters\n  const params: any = {\n    model: appId,\n    messages,\n    stream,\n    detail,\n    chatId,\n    responseChatItemId: `resp_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n    variables: {\n      userId,\n    },\n  }\n\n  // Add system message if exists\n  if (systemPrompt) {\n    params.system = systemPrompt\n  }\n\n  // Send request to FastGPT API\n  return fastGPTClient.chatCompletions(params)\n}\n\n// Get question suggestions (\"Guess what you want to ask\")\nexport const getQuestionSuggestions: any = async (\n  appId: string,\n  chatId: string,\n  model = \"GPT-4o-mini\",\n): Promise<string[]> => {\n  try {\n    const result: any = await fastGPTClient.createQuestionGuide(appId, chatId, {\n      open: true,\n      model,\n      customPrompt:\n        \"You are a helpful assistant. Based on the conversation history, suggest 3 follow-up questions the user might want to ask.\",\n    })\n\n    return Array.isArray(result) ? result : []\n  } catch (error) {\n    console.error(\"Failed to get question suggestions:\", error)\n    return []\n  }\n}\n\nexport default {\n  generateChatId,\n  generateMessageId,\n  processStreamResponse,\n  sendChatMessage,\n  getQuestionSuggestions,\n}\n"],"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","ignoreList":[]}