{"version":3,"names":["cov_12j8jrnubj","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","enhanced_database_manager_1","require","createUsageStats","userId","agentType","action","metadata","req","enrichedMetadata","userAgent","headers","get","ip","db","usageStats","create","data","catch","error","console","exports","getUserStats","stats","groupBy","by","where","_count","id","getStatsSummary","startDate","endDate","createdAt","gte","lte","totalCount","actionBreakdown","userBreakdown","Promise","all","count","orderBy","take","topUsers"],"sources":["E:\\zk-agent\\lib\\services\\stats-service.ts"],"sourcesContent":["/**\n * @file lib/services/stats-service.ts\n * @description Statistics service for handling usage stats and analytics.\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { db } from '../database/enhanced-database-manager';\nimport { NextRequest } from 'next/server';\n\n/**\n * Creates a usage stats record.\n *\n * @param {object} data - The usage stats data.\n * @returns {Promise<object>} The created usage stats record.\n */\nexport const createUsageStats = async ({\n  userId,\n  agentType,\n  action,\n  metadata = {},\n  req,\n}: {\n  userId: string;\n  agentType: string;\n  action: string;\n  metadata?: Record<string, any>;\n  req?: NextRequest;\n}) => {\n  const enrichedMetadata = {\n    ...metadata,\n    userAgent: req?.headers.get('user-agent'),\n    ip: req?.headers.get('x-forwarded-for') || req?.headers.get('x-real-ip'),\n  };\n\n  return db?.usageStats\n    .create({\n      data: {\n        userId,\n        agentType,\n        action,\n        metadata: enrichedMetadata,\n      },\n    })\n    .catch((error) => {\n      console.error(`Failed to log ${action}:`, error);\n      return null;\n    });\n};\n\n/**\n * Gets usage stats for a user.\n *\n * @param {string} userId - The user ID.\n * @returns {Promise<object>} The usage stats.\n */\nexport const getUserStats = async (userId: string) => {\n  const stats = await db?.usageStats.groupBy({\n    by: ['agentType'],\n    where: { userId },\n    _count: { id: true },\n  });\n\n  return stats;\n};\n\n/**\n * Gets usage stats summary.\n *\n * @param {object} options - The options for fetching stats.\n * @returns {Promise<object>} The stats summary.\n */\nexport const getStatsSummary = async ({\n  startDate,\n  endDate,\n  agentType,\n}: {\n  startDate?: Date;\n  endDate?: Date;\n  agentType?: string;\n}) => {\n  const where = {\n    ...(startDate && { createdAt: { gte: startDate } }),\n    ...(endDate && { createdAt: { lte: endDate } }),\n    ...(agentType && { agentType }),\n  };\n\n  const [totalCount, actionBreakdown, userBreakdown] = await Promise.all([\n    db?.usageStats.count({ where }),\n    db?.usageStats.groupBy({\n      by: ['action'],\n      where,\n      _count: { id: true },\n      orderBy: { _count: { id: 'desc' } },\n    }),\n    db?.usageStats.groupBy({\n      by: ['userId'],\n      where,\n      _count: { id: true },\n      orderBy: { _count: { id: 'desc' } },\n      take: 10,\n    }),\n  ]);\n\n  return {\n    totalCount,\n    actionBreakdown,\n    topUsers: userBreakdown,\n  };\n};"],"mappings":"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","ignoreList":[]}