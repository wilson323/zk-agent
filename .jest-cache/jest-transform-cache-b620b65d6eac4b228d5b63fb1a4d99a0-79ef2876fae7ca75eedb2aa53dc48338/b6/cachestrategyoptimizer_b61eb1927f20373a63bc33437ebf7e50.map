{"version":3,"names":["cov_o2dro1tp8","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","intelligent_cache_manager_1","monitoring_1","OptimizationStrategy","exports","CacheStrategyOptimizer","EventEmitter","constructor","strategies","Map","activeTests","testResults","mlModels","recommendations","isOptimizing","optimizationInterval","metricsHistory","currentStrategy","optimizationConfig","enabled","interval","minDataPoints","maxStrategies","autoApply","initializeDefaultStrategies","initializeMLModels","process","nextTick","setupEventListeners","BALANCED","l1Config","maxSize","ttl","strategy","CacheStrategy","LRU","l2Config","weights","hitRate","responseTime","memoryUsage","errorRate","createdAt","Date","updatedAt","PERFORMANCE","LFU","MEMORY","LATENCY","ADAPTIVE","forEach","set","performanceModel","trainingData","parameters","learningRate","epochs","hiddenLayers","accuracy","lastTrainedAt","predict","input","predictPerformance","train","data","trainPerformanceModel","strategyModel","maxDepth","minSamples","classifyOptimalStrategy","trainStrategyModel","intelligentCacheManager","on","metrics","handleMetricsUpdate","databaseMonitor","dbMetrics","handleDatabaseMetrics","console","log","setInterval","performOptimization","emit","stop","clearInterval","test","values","stopABTest","testId","currentMetrics","collectCurrentMetrics","push","length","slice","trends","analyzePerformanceTrends","generateRecommendations","bestRecommendation","find","r","priority","riskAssessment","applyRecommendation","trainModels","error","cacheStats","getStats","avgResponseTime","calculateMemoryUsage","errors","Math","max","totalRequests","throughput","calculateThroughput","costScore","calculateCostScore","overallScore","calculateOverallScore","stats","l1Usage","levelStats","L1","l2Usage","L2","totalUsage","maxMemory","min","recent","timeSpan","reduce","sum","memoryCost","sizeCost","size","get","normalizedResponseTime","score","hitRateTrend","responseTimeTrend","memoryTrend","overallTrend","older","recentAvg","calculateAverageMetrics","olderAvg","determineTrend","count","m","current","previous","threshold","change","id","now","title","description","toFixed","expectedImprovement","implementationDifficulty","suggestedConfig","floor","mlRecommendations","generateMLRecommendations","sort","a","priorityOrder","high","medium","low","optimalStrategy","predictions","Array","from","bestStrategy","improvements","recommendation","startABTest","updateCacheConfig","config","cacheConfig","getConfig","Object","assign","l1","l2","updateConfig","controlStrategy","experimentStrategy","trafficSplit","duration","startTime","endTime","isActive","significanceThreshold","setTimeout","result","analyzeABTestResult","delete","isSignificant","adoptStrategy","controlMetrics","collectMetricsForStrategy","experimentMetrics","improvement","significance","calculateStatisticalSignificance","confidence","baseMetrics","adjustments","getStrategyAdjustments","control","experiment","diff","pooledStd","n","tStat","sqrt","abs","preparePerformanceTrainingData","prepareStrategyTrainingData","map","index","output","strategyName","performance","expectedScore","model","connectionPoolUsage","adjustCacheAggressiveness","factor","currentConfig","newConfig","getRecommendations","getActiveTests","getTestResults","getStrategies","getCurrentStrategy","getMLModelStatus","lastTrained","triggerOptimization","updateOptimizationConfig","generateOptimizationReport","modelAccuracy","acc","summary","toISOString","join","trim","cacheStrategyOptimizer"],"sources":["E:\\zk-agent\\lib\\database\\cache-strategy-optimizer.ts"],"sourcesContent":["/**\r\n * 缓存策略优化器\r\n * 基于机器学习和统计分析的智能缓存策略优化\r\n * \r\n * 功能:\r\n * - 动态策略调整和性能分析\r\n * - 机器学习预测和模式识别\r\n * - A/B测试和策略评估\r\n * - 自动化优化建议生成\r\n * - 实时监控和告警\r\n * \r\n * @author ZK-Agent Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { intelligentCacheManager, CacheLevel, CacheStrategy } from './intelligent-cache-manager'\r\nimport { databaseMonitor } from './monitoring'\r\n\r\n/**\r\n * 优化策略枚举\r\n */\r\nenum OptimizationStrategy {\r\n  PERFORMANCE = 'performance',     // 性能优先\r\n  MEMORY = 'memory',               // 内存优先\r\n  BALANCED = 'balanced',           // 平衡策略\r\n  COST = 'cost',                   // 成本优先\r\n  LATENCY = 'latency'              // 延迟优先\r\n}\r\n\r\n/**\r\n * 策略评估指标\r\n */\r\ninterface StrategyMetrics {\r\n  /** 命中率 */\r\n  hitRate: number\r\n  /** 平均响应时间(ms) */\r\n  avgResponseTime: number\r\n  /** 内存使用率 */\r\n  memoryUsage: number\r\n  /** 错误率 */\r\n  errorRate: number\r\n  /** 吞吐量(请求/秒) */\r\n  throughput: number\r\n  /** 成本评分 */\r\n  costScore: number\r\n  /** 综合评分 */\r\n  overallScore: number\r\n}\r\n\r\n/**\r\n * 策略配置\r\n */\r\ninterface StrategyConfig {\r\n  /** 策略名称 */\r\n  name: string\r\n  /** 策略类型 */\r\n  type: OptimizationStrategy\r\n  /** L1缓存配置 */\r\n  l1Config: {\r\n    maxSize: number\r\n    ttl: number\r\n    strategy: CacheStrategy\r\n  }\r\n  /** L2缓存配置 */\r\n  l2Config: {\r\n    maxSize: number\r\n    ttl: number\r\n    strategy: CacheStrategy\r\n  }\r\n  /** 权重配置 */\r\n  weights: {\r\n    hitRate: number\r\n    responseTime: number\r\n    memoryUsage: number\r\n    errorRate: number\r\n  }\r\n  /** 是否启用 */\r\n  enabled: boolean\r\n  /** 创建时间 */\r\n  createdAt: Date\r\n  /** 最后更新时间 */\r\n  updatedAt: Date\r\n}\r\n\r\n/**\r\n * A/B测试配置\r\n */\r\ninterface ABTestConfig {\r\n  /** 测试ID */\r\n  testId: string\r\n  /** 测试名称 */\r\n  name: string\r\n  /** 控制组策略 */\r\n  controlStrategy: StrategyConfig\r\n  /** 实验组策略 */\r\n  experimentStrategy: StrategyConfig\r\n  /** 流量分配比例 */\r\n  trafficSplit: number\r\n  /** 测试持续时间(ms) */\r\n  duration: number\r\n  /** 开始时间 */\r\n  startTime: Date\r\n  /** 结束时间 */\r\n  endTime: Date\r\n  /** 是否活跃 */\r\n  isActive: boolean\r\n  /** 统计显著性阈值 */\r\n  significanceThreshold: number\r\n}\r\n\r\n/**\r\n * 测试结果\r\n */\r\ninterface ABTestResult {\r\n  /** 测试ID */\r\n  testId: string\r\n  /** 控制组指标 */\r\n  controlMetrics: StrategyMetrics\r\n  /** 实验组指标 */\r\n  experimentMetrics: StrategyMetrics\r\n  /** 改进百分比 */\r\n  improvement: {\r\n    hitRate: number\r\n    responseTime: number\r\n    memoryUsage: number\r\n    errorRate: number\r\n    overallScore: number\r\n  }\r\n  /** 统计显著性 */\r\n  significance: number\r\n  /** 是否显著 */\r\n  isSignificant: boolean\r\n  /** 建议 */\r\n  recommendation: 'adopt' | 'reject' | 'continue'\r\n  /** 置信度 */\r\n  confidence: number\r\n}\r\n\r\n/**\r\n * 机器学习模型接口\r\n */\r\ninterface MLModel {\r\n  /** 模型名称 */\r\n  name: string\r\n  /** 模型类型 */\r\n  type: 'regression' | 'classification' | 'clustering'\r\n  /** 训练数据 */\r\n  trainingData: any[]\r\n  /** 模型参数 */\r\n  parameters: any\r\n  /** 准确率 */\r\n  accuracy: number\r\n  /** 最后训练时间 */\r\n  lastTrainedAt: Date\r\n  /** 预测方法 */\r\n  predict(input: any): any\r\n  /** 训练方法 */\r\n  train(data: any[]): void\r\n}\r\n\r\n/**\r\n * 优化建议\r\n */\r\ninterface OptimizationRecommendation {\r\n  /** 建议ID */\r\n  id: string\r\n  /** 建议类型 */\r\n  type: 'strategy' | 'config' | 'architecture'\r\n  /** 优先级 */\r\n  priority: 'high' | 'medium' | 'low'\r\n  /** 标题 */\r\n  title: string\r\n  /** 描述 */\r\n  description: string\r\n  /** 预期改进 */\r\n  expectedImprovement: {\r\n    hitRate?: number\r\n    responseTime?: number\r\n    memoryUsage?: number\r\n    costReduction?: number\r\n  }\r\n  /** 实施难度 */\r\n  implementationDifficulty: 'easy' | 'medium' | 'hard'\r\n  /** 风险评估 */\r\n  riskAssessment: 'low' | 'medium' | 'high'\r\n  /** 建议的配置 */\r\n  suggestedConfig?: Partial<StrategyConfig>\r\n  /** 创建时间 */\r\n  createdAt: Date\r\n}\r\n\r\n/**\r\n * 缓存策略优化器类\r\n */\r\nexport class CacheStrategyOptimizer extends EventEmitter {\r\n  private strategies: Map<string, StrategyConfig> = new Map()\r\n  private activeTests: Map<string, ABTestConfig> = new Map()\r\n  private testResults: Map<string, ABTestResult> = new Map()\r\n  private mlModels: Map<string, MLModel> = new Map()\r\n  private recommendations: OptimizationRecommendation[] = []\r\n  private isOptimizing: boolean = false\r\n  private optimizationInterval: NodeJS.Timeout | null = null\r\n  private metricsHistory: StrategyMetrics[] = []\r\n  private currentStrategy: string = 'default'\r\n  private optimizationConfig: {\r\n    enabled: boolean\r\n    interval: number\r\n    minDataPoints: number\r\n    maxStrategies: number\r\n    autoApply: boolean\r\n  }\r\n\r\n  constructor() {\r\n    super()\r\n    \r\n    this.optimizationConfig = {\r\n      enabled: true,\r\n      interval: 300000, // 5分钟\r\n      minDataPoints: 100,\r\n      maxStrategies: 10,\r\n      autoApply: false\r\n    }\r\n    \r\n    this.initializeDefaultStrategies()\r\n    this.initializeMLModels()\r\n    \r\n    // 延迟设置事件监听器以避免循环依赖\r\n    process.nextTick(() => {\r\n      this.setupEventListeners()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 初始化默认策略\r\n   */\r\n  private initializeDefaultStrategies(): void {\r\n    const strategies: StrategyConfig[] = [\r\n      {\r\n        name: 'default',\r\n        type: OptimizationStrategy.BALANCED,\r\n        l1Config: {\r\n          maxSize: 1000,\r\n          ttl: 300000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        l2Config: {\r\n          maxSize: 10000,\r\n          ttl: 1800000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        weights: {\r\n          hitRate: 0.4,\r\n          responseTime: 0.3,\r\n          memoryUsage: 0.2,\r\n          errorRate: 0.1\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        name: 'performance',\r\n        type: OptimizationStrategy.PERFORMANCE,\r\n        l1Config: {\r\n          maxSize: 2000,\r\n          ttl: 600000,\r\n          strategy: CacheStrategy.LFU\r\n        },\r\n        l2Config: {\r\n          maxSize: 20000,\r\n          ttl: 3600000,\r\n          strategy: CacheStrategy.LFU\r\n        },\r\n        weights: {\r\n          hitRate: 0.5,\r\n          responseTime: 0.4,\r\n          memoryUsage: 0.05,\r\n          errorRate: 0.05\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        name: 'memory_optimized',\r\n        type: OptimizationStrategy.MEMORY,\r\n        l1Config: {\r\n          maxSize: 500,\r\n          ttl: 180000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        l2Config: {\r\n          maxSize: 5000,\r\n          ttl: 900000,\r\n          strategy: CacheStrategy.LRU\r\n        },\r\n        weights: {\r\n          hitRate: 0.2,\r\n          responseTime: 0.2,\r\n          memoryUsage: 0.5,\r\n          errorRate: 0.1\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      },\r\n      {\r\n        name: 'low_latency',\r\n        type: OptimizationStrategy.LATENCY,\r\n        l1Config: {\r\n          maxSize: 1500,\r\n          ttl: 450000,\r\n          strategy: CacheStrategy.ADAPTIVE\r\n        },\r\n        l2Config: {\r\n          maxSize: 15000,\r\n          ttl: 2700000,\r\n          strategy: CacheStrategy.ADAPTIVE\r\n        },\r\n        weights: {\r\n          hitRate: 0.3,\r\n          responseTime: 0.6,\r\n          memoryUsage: 0.05,\r\n          errorRate: 0.05\r\n        },\r\n        enabled: true,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      }\r\n    ]\r\n    \r\n    strategies.forEach(strategy => {\r\n      this.strategies.set(strategy.name, strategy)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 初始化机器学习模型\r\n   */\r\n  private initializeMLModels(): void {\r\n    // 性能预测模型\r\n    const performanceModel: MLModel = {\r\n      name: 'performance_predictor',\r\n      type: 'regression',\r\n      trainingData: [],\r\n      parameters: {\r\n        learningRate: 0.01,\r\n        epochs: 100,\r\n        hiddenLayers: [64, 32]\r\n      },\r\n      accuracy: 0,\r\n      lastTrainedAt: new Date(),\r\n      predict: (input: any) => {\r\n        // 简化的预测逻辑\r\n        return this.predictPerformance(input)\r\n      },\r\n      train: (data: any[]) => {\r\n        // 简化的训练逻辑\r\n        this.trainPerformanceModel(data)\r\n      }\r\n    }\r\n    \r\n    // 策略分类模型\r\n    const strategyModel: MLModel = {\r\n      name: 'strategy_classifier',\r\n      type: 'classification',\r\n      trainingData: [],\r\n      parameters: {\r\n        maxDepth: 10,\r\n        minSamples: 5\r\n      },\r\n      accuracy: 0,\r\n      lastTrainedAt: new Date(),\r\n      predict: (input: any) => {\r\n        return this.classifyOptimalStrategy(input)\r\n      },\r\n      train: (data: any[]) => {\r\n        this.trainStrategyModel(data)\r\n      }\r\n    }\r\n    \r\n    this.mlModels.set('performance_predictor', performanceModel)\r\n    this.mlModels.set('strategy_classifier', strategyModel)\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听缓存管理器事件\r\n    intelligentCacheManager.on('metrics-collected', (metrics) => {\r\n      this.handleMetricsUpdate(metrics)\r\n    })\r\n    \r\n    // 监听数据库监控事件\r\n    databaseMonitor.on('metrics', (dbMetrics) => {\r\n      this.handleDatabaseMetrics(dbMetrics)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 启动优化器\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isOptimizing) {\r\n      console.log('Cache strategy optimizer is already running')\r\n      return\r\n    }\r\n\r\n    console.log('Starting cache strategy optimizer')\r\n    \r\n    this.isOptimizing = true\r\n    \r\n    // 启动定期优化\r\n    if (this.optimizationConfig.enabled) {\r\n      this.optimizationInterval = setInterval(() => {\r\n        this.performOptimization()\r\n      }, this.optimizationConfig.interval)\r\n    }\r\n    \r\n    // 初始优化\r\n    await this.performOptimization()\r\n    \r\n    this.emit('optimizer-started')\r\n    console.log('Cache strategy optimizer started successfully')\r\n  }\r\n\r\n  /**\r\n   * 停止优化器\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (!this.isOptimizing) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping cache strategy optimizer')\r\n    \r\n    this.isOptimizing = false\r\n    \r\n    if (this.optimizationInterval) {\r\n      clearInterval(this.optimizationInterval)\r\n      this.optimizationInterval = null\r\n    }\r\n    \r\n    // 停止所有活跃的A/B测试\r\n    for (const test of this.activeTests.values()) {\r\n      await this.stopABTest(test.testId)\r\n    }\r\n    \r\n    this.emit('optimizer-stopped')\r\n  }\r\n\r\n  /**\r\n   * 执行优化\r\n   */\r\n  private async performOptimization(): Promise<void> {\r\n    try {\r\n      console.log('Performing cache strategy optimization...')\r\n      \r\n      // 收集当前指标\r\n      const currentMetrics = await this.collectCurrentMetrics()\r\n      this.metricsHistory.push(currentMetrics)\r\n      \r\n      // 保持历史记录在合理范围内\r\n      if (this.metricsHistory.length > 1000) {\r\n        this.metricsHistory = this.metricsHistory.slice(-1000)\r\n      }\r\n      \r\n      // 检查是否有足够的数据进行优化\r\n      if (this.metricsHistory.length < this.optimizationConfig.minDataPoints) {\r\n        console.log(`Insufficient data for optimization (${this.metricsHistory.length}/${this.optimizationConfig.minDataPoints})`)\r\n        return\r\n      }\r\n      \r\n      // 分析性能趋势\r\n      const trends = this.analyzePerformanceTrends()\r\n      \r\n      // 生成优化建议\r\n      const recommendations = await this.generateRecommendations(currentMetrics, trends)\r\n      \r\n      // 更新建议列表\r\n      this.recommendations = recommendations\r\n      \r\n      // 如果启用自动应用，执行最佳建议\r\n      if (this.optimizationConfig.autoApply && recommendations.length > 0) {\r\n        const bestRecommendation = recommendations.find(r => r.priority === 'high')\r\n        if (bestRecommendation && bestRecommendation.riskAssessment === 'low') {\r\n          await this.applyRecommendation(bestRecommendation)\r\n        }\r\n      }\r\n      \r\n      // 训练机器学习模型\r\n      await this.trainModels()\r\n      \r\n      this.emit('optimization-completed', {\r\n        metrics: currentMetrics,\r\n        recommendations: recommendations.length,\r\n        trends\r\n      })\r\n      \r\n    } catch (error) {\r\n      console.error('Optimization failed:', error)\r\n      this.emit('optimization-failed', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 收集当前指标\r\n   * \r\n   * @returns 当前指标\r\n   */\r\n  private async collectCurrentMetrics(): Promise<StrategyMetrics> {\r\n    const cacheStats = intelligentCacheManager.getStats()\r\n    \r\n    return {\r\n      hitRate: cacheStats.hitRate,\r\n      avgResponseTime: cacheStats.avgResponseTime,\r\n      memoryUsage: this.calculateMemoryUsage(),\r\n      errorRate: cacheStats.errors / Math.max(1, cacheStats.totalRequests),\r\n      throughput: this.calculateThroughput(),\r\n      costScore: this.calculateCostScore(),\r\n      overallScore: this.calculateOverallScore(cacheStats)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算内存使用率\r\n   * \r\n   * @returns 内存使用率\r\n   */\r\n  private calculateMemoryUsage(): number {\r\n    const stats = intelligentCacheManager.getStats()\r\n    const l1Usage = stats.levelStats.L1.memoryUsage\r\n    const l2Usage = stats.levelStats.L2.memoryUsage\r\n    \r\n    // 简化计算，实际应该基于系统总内存\r\n    const totalUsage = l1Usage + l2Usage\r\n    const maxMemory = 100 * 1024 * 1024 // 100MB假设值\r\n    \r\n    return Math.min(1, totalUsage / maxMemory)\r\n  }\r\n\r\n  /**\r\n   * 计算吞吐量\r\n   * \r\n   * @returns 吞吐量(请求/秒)\r\n   */\r\n  private calculateThroughput(): number {\r\n    if (this.metricsHistory.length < 2) {\r\n      return 0\r\n    }\r\n    \r\n    const recent = this.metricsHistory.slice(-10)\r\n    const timeSpan = 10 * (this.optimizationConfig.interval / 1000) // 转换为秒\r\n    \r\n    const totalRequests = recent.reduce((sum, metrics) => {\r\n      const stats = intelligentCacheManager.getStats()\r\n      return sum + stats.totalRequests\r\n    }, 0)\r\n    \r\n    return totalRequests / timeSpan\r\n  }\r\n\r\n  /**\r\n   * 计算成本评分\r\n   * \r\n   * @returns 成本评分\r\n   */\r\n  private calculateCostScore(): number {\r\n    const memoryUsage = this.calculateMemoryUsage()\r\n    const stats = intelligentCacheManager.getStats()\r\n    \r\n    // 基于内存使用和缓存大小的简化成本模型\r\n    const memoryCost = memoryUsage * 0.6\r\n    const sizeCost = (stats.levelStats.L1.size + stats.levelStats.L2.size) / 20000 * 0.4\r\n    \r\n    return Math.min(1, memoryCost + sizeCost)\r\n  }\r\n\r\n  /**\r\n   * 计算综合评分\r\n   * \r\n   * @param stats - 缓存统计\r\n   * @returns 综合评分\r\n   */\r\n  private calculateOverallScore(stats: any): number {\r\n    const strategy = this.strategies.get(this.currentStrategy)\r\n    if (!strategy) {\r\n      return 0\r\n    }\r\n    \r\n    const weights = strategy.weights\r\n    const memoryUsage = this.calculateMemoryUsage()\r\n    const errorRate = stats.errors / Math.max(1, stats.totalRequests)\r\n    \r\n    // 归一化响应时间(假设100ms为基准)\r\n    const normalizedResponseTime = Math.min(1, stats.avgResponseTime / 100)\r\n    \r\n    const score = \r\n      weights.hitRate * stats.hitRate +\r\n      weights.responseTime * (1 - normalizedResponseTime) +\r\n      weights.memoryUsage * (1 - memoryUsage) +\r\n      weights.errorRate * (1 - errorRate)\r\n    \r\n    return Math.max(0, Math.min(1, score))\r\n  }\r\n\r\n  /**\r\n   * 分析性能趋势\r\n   * \r\n   * @returns 性能趋势分析\r\n   */\r\n  private analyzePerformanceTrends(): {\r\n    hitRateTrend: 'improving' | 'declining' | 'stable'\r\n    responseTimeTrend: 'improving' | 'declining' | 'stable'\r\n    memoryTrend: 'improving' | 'declining' | 'stable'\r\n    overallTrend: 'improving' | 'declining' | 'stable'\r\n  } {\r\n    if (this.metricsHistory.length < 10) {\r\n      return {\r\n        hitRateTrend: 'stable',\r\n        responseTimeTrend: 'stable',\r\n        memoryTrend: 'stable',\r\n        overallTrend: 'stable'\r\n      }\r\n    }\r\n    \r\n    const recent = this.metricsHistory.slice(-10)\r\n    const older = this.metricsHistory.slice(-20, -10)\r\n    \r\n    const recentAvg = this.calculateAverageMetrics(recent)\r\n    const olderAvg = this.calculateAverageMetrics(older)\r\n    \r\n    return {\r\n      hitRateTrend: this.determineTrend(recentAvg.hitRate, olderAvg.hitRate),\r\n      responseTimeTrend: this.determineTrend(olderAvg.avgResponseTime, recentAvg.avgResponseTime), // 响应时间越低越好\r\n      memoryTrend: this.determineTrend(olderAvg.memoryUsage, recentAvg.memoryUsage), // 内存使用越低越好\r\n      overallTrend: this.determineTrend(recentAvg.overallScore, olderAvg.overallScore)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算平均指标\r\n   * \r\n   * @param metrics - 指标数组\r\n   * @returns 平均指标\r\n   */\r\n  private calculateAverageMetrics(metrics: StrategyMetrics[]): StrategyMetrics {\r\n    const count = metrics.length\r\n    \r\n    return {\r\n      hitRate: metrics.reduce((sum, m) => sum + m.hitRate, 0) / count,\r\n      avgResponseTime: metrics.reduce((sum, m) => sum + m.avgResponseTime, 0) / count,\r\n      memoryUsage: metrics.reduce((sum, m) => sum + m.memoryUsage, 0) / count,\r\n      errorRate: metrics.reduce((sum, m) => sum + m.errorRate, 0) / count,\r\n      throughput: metrics.reduce((sum, m) => sum + m.throughput, 0) / count,\r\n      costScore: metrics.reduce((sum, m) => sum + m.costScore, 0) / count,\r\n      overallScore: metrics.reduce((sum, m) => sum + m.overallScore, 0) / count\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 确定趋势\r\n   * \r\n   * @param current - 当前值\r\n   * @param previous - 之前值\r\n   * @returns 趋势\r\n   */\r\n  private determineTrend(current: number, previous: number): 'improving' | 'declining' | 'stable' {\r\n    const threshold = 0.05 // 5%阈值\r\n    const change = (current - previous) / previous\r\n    \r\n    if (change > threshold) {\r\n      return 'improving'\r\n    } else if (change < -threshold) {\r\n      return 'declining'\r\n    } else {\r\n      return 'stable'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成优化建议\r\n   * \r\n   * @param currentMetrics - 当前指标\r\n   * @param trends - 性能趋势\r\n   * @returns 优化建议数组\r\n   */\r\n  private async generateRecommendations(\r\n    currentMetrics: StrategyMetrics,\r\n    trends: any\r\n  ): Promise<OptimizationRecommendation[]> {\r\n    const recommendations: OptimizationRecommendation[] = []\r\n    \r\n    // 基于命中率的建议\r\n    if (currentMetrics.hitRate < 0.7) {\r\n      recommendations.push({\r\n        id: `hitrate_${Date.now()}`,\r\n        type: 'strategy',\r\n        priority: 'high',\r\n        title: '提升缓存命中率',\r\n        description: `当前命中率为 ${(currentMetrics.hitRate * 100).toFixed(1)}%，建议增加缓存大小或调整TTL策略`,\r\n        expectedImprovement: {\r\n          hitRate: 0.15,\r\n          responseTime: -20\r\n        },\r\n        implementationDifficulty: 'easy',\r\n        riskAssessment: 'low',\r\n        suggestedConfig: {\r\n          l1Config: {\r\n            maxSize: Math.floor(this.strategies.get(this.currentStrategy)!.l1Config.maxSize * 1.5),\r\n            ttl: this.strategies.get(this.currentStrategy)!.l1Config.ttl * 1.2,\r\n            strategy: CacheStrategy.LFU\r\n          }\r\n        },\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 基于响应时间的建议\r\n    if (currentMetrics.avgResponseTime > 50) {\r\n      recommendations.push({\r\n        id: `latency_${Date.now()}`,\r\n        type: 'config',\r\n        priority: 'medium',\r\n        title: '优化响应时间',\r\n        description: `平均响应时间为 ${currentMetrics.avgResponseTime.toFixed(1)}ms，建议优化缓存层级结构`,\r\n        expectedImprovement: {\r\n          responseTime: -30\r\n        },\r\n        implementationDifficulty: 'medium',\r\n        riskAssessment: 'low',\r\n        suggestedConfig: {\r\n          name: 'low_latency_optimized',\r\n          type: OptimizationStrategy.LATENCY\r\n        },\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 基于内存使用的建议\r\n    if (currentMetrics.memoryUsage > 0.8) {\r\n      recommendations.push({\r\n        id: `memory_${Date.now()}`,\r\n        type: 'strategy',\r\n        priority: 'high',\r\n        title: '优化内存使用',\r\n        description: `内存使用率为 ${(currentMetrics.memoryUsage * 100).toFixed(1)}%，建议减少缓存大小或启用更激进的清理策略`,\r\n        expectedImprovement: {\r\n          memoryUsage: -25\r\n        },\r\n        implementationDifficulty: 'easy',\r\n        riskAssessment: 'medium',\r\n        suggestedConfig: {\r\n          l1Config: {\r\n            maxSize: Math.floor(this.strategies.get(this.currentStrategy)!.l1Config.maxSize * 0.7),\r\n            ttl: this.strategies.get(this.currentStrategy)!.l1Config.ttl * 0.8,\r\n            strategy: CacheStrategy.LRU\r\n          }\r\n        },\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 基于趋势的建议\r\n    if (trends.hitRateTrend === 'declining') {\r\n      recommendations.push({\r\n        id: `trend_hitrate_${Date.now()}`,\r\n        type: 'strategy',\r\n        priority: 'medium',\r\n        title: '命中率下降趋势',\r\n        description: '检测到命中率持续下降，建议调整缓存策略或增加预热',\r\n        expectedImprovement: {\r\n          hitRate: 0.1\r\n        },\r\n        implementationDifficulty: 'medium',\r\n        riskAssessment: 'low',\r\n        createdAt: new Date()\r\n      })\r\n    }\r\n    \r\n    // 使用机器学习模型生成建议\r\n    const mlRecommendations = await this.generateMLRecommendations(currentMetrics)\r\n    recommendations.push(...mlRecommendations)\r\n    \r\n    // 按优先级排序\r\n    return recommendations.sort((a, b) => {\r\n      const priorityOrder = { high: 3, medium: 2, low: 1 }\r\n      return priorityOrder[b.priority] - priorityOrder[a.priority]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 使用机器学习生成建议\r\n   * \r\n   * @param currentMetrics - 当前指标\r\n   * @returns ML建议数组\r\n   */\r\n  private async generateMLRecommendations(currentMetrics: StrategyMetrics): Promise<OptimizationRecommendation[]> {\r\n    const recommendations: OptimizationRecommendation[] = []\r\n    \r\n    try {\r\n      // 使用策略分类模型\r\n      const strategyModel = this.mlModels.get('strategy_classifier')\r\n      if (strategyModel && strategyModel.accuracy > 0.7) {\r\n        const optimalStrategy = strategyModel.predict(currentMetrics)\r\n        \r\n        if (optimalStrategy && optimalStrategy !== this.currentStrategy) {\r\n          recommendations.push({\r\n            id: `ml_strategy_${Date.now()}`,\r\n            type: 'strategy',\r\n            priority: 'medium',\r\n            title: 'ML推荐策略切换',\r\n            description: `机器学习模型建议切换到 ${optimalStrategy} 策略以提升性能`,\r\n            expectedImprovement: {\r\n              overallScore: 0.15\r\n            },\r\n            implementationDifficulty: 'easy',\r\n            riskAssessment: 'low',\r\n            suggestedConfig: this.strategies.get(optimalStrategy),\r\n            createdAt: new Date()\r\n          })\r\n        }\r\n      }\r\n      \r\n      // 使用性能预测模型\r\n      const performanceModel = this.mlModels.get('performance_predictor')\r\n      if (performanceModel && performanceModel.accuracy > 0.6) {\r\n        const predictions = performanceModel.predict({\r\n          currentMetrics,\r\n          strategies: Array.from(this.strategies.values())\r\n        })\r\n        \r\n        if (predictions && predictions.bestStrategy) {\r\n          recommendations.push({\r\n            id: `ml_performance_${Date.now()}`,\r\n            type: 'config',\r\n            priority: 'low',\r\n            title: 'ML性能优化建议',\r\n            description: `预测模型建议的配置调整可提升 ${predictions.expectedImprovement}% 的性能`,\r\n            expectedImprovement: predictions.improvements,\r\n            implementationDifficulty: 'medium',\r\n            riskAssessment: 'medium',\r\n            createdAt: new Date()\r\n          })\r\n        }\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('ML recommendation generation failed:', error)\r\n    }\r\n    \r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 应用建议\r\n   * \r\n   * @param recommendation - 优化建议\r\n   */\r\n  private async applyRecommendation(recommendation: OptimizationRecommendation): Promise<void> {\r\n    try {\r\n      console.log(`Applying recommendation: ${recommendation.title}`)\r\n      \r\n      if (recommendation.suggestedConfig) {\r\n        if (recommendation.type === 'strategy') {\r\n          // 启动A/B测试来验证新策略\r\n          await this.startABTest(\r\n            `auto_${recommendation.id}`,\r\n            `Auto-applied: ${recommendation.title}`,\r\n            this.strategies.get(this.currentStrategy)!,\r\n            recommendation.suggestedConfig as StrategyConfig,\r\n            0.1, // 10%流量\r\n            3600000 // 1小时测试\r\n          )\r\n        } else {\r\n          // 直接应用配置更改\r\n          await this.updateCacheConfig(recommendation.suggestedConfig)\r\n        }\r\n      }\r\n      \r\n      this.emit('recommendation-applied', recommendation)\r\n      \r\n    } catch (error) {\r\n      console.error(`Failed to apply recommendation ${recommendation.id}:`, error)\r\n      this.emit('recommendation-failed', { recommendation, error })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新缓存配置\r\n   * \r\n   * @param config - 新配置\r\n   */\r\n  private async updateCacheConfig(config: any): Promise<void> {\r\n    const cacheConfig = intelligentCacheManager.getConfig()\r\n    \r\n    if (config.l1Config) {\r\n      Object.assign(cacheConfig.l1, config.l1Config)\r\n    }\r\n    \r\n    if (config.l2Config) {\r\n      Object.assign(cacheConfig.l2, config.l2Config)\r\n    }\r\n    \r\n    intelligentCacheManager.updateConfig(cacheConfig)\r\n  }\r\n\r\n  /**\r\n   * 启动A/B测试\r\n   * \r\n   * @param testId - 测试ID\r\n   * @param name - 测试名称\r\n   * @param controlStrategy - 控制组策略\r\n   * @param experimentStrategy - 实验组策略\r\n   * @param trafficSplit - 流量分配\r\n   * @param duration - 测试持续时间\r\n   */\r\n  async startABTest(\r\n    testId: string,\r\n    name: string,\r\n    controlStrategy: StrategyConfig,\r\n    experimentStrategy: StrategyConfig,\r\n    trafficSplit: number = 0.5,\r\n    duration: number = 3600000\r\n  ): Promise<void> {\r\n    const test: ABTestConfig = {\r\n      testId,\r\n      name,\r\n      controlStrategy,\r\n      experimentStrategy,\r\n      trafficSplit,\r\n      duration,\r\n      startTime: new Date(),\r\n      endTime: new Date(Date.now() + duration),\r\n      isActive: true,\r\n      significanceThreshold: 0.05\r\n    }\r\n    \r\n    this.activeTests.set(testId, test)\r\n    \r\n    // 设置测试结束定时器\r\n    setTimeout(() => {\r\n      this.stopABTest(testId)\r\n    }, duration)\r\n    \r\n    console.log(`Started A/B test: ${name} (${testId})`)\r\n    this.emit('ab-test-started', test)\r\n  }\r\n\r\n  /**\r\n   * 停止A/B测试\r\n   * \r\n   * @param testId - 测试ID\r\n   */\r\n  async stopABTest(testId: string): Promise<void> {\r\n    const test = this.activeTests.get(testId)\r\n    if (!test) {\r\n      return\r\n    }\r\n    \r\n    test.isActive = false\r\n    test.endTime = new Date()\r\n    \r\n    // 分析测试结果\r\n    const result = await this.analyzeABTestResult(test)\r\n    this.testResults.set(testId, result)\r\n    \r\n    this.activeTests.delete(testId)\r\n    \r\n    console.log(`Stopped A/B test: ${test.name} (${testId})`)\r\n    this.emit('ab-test-completed', { test, result })\r\n    \r\n    // 如果实验组显著更好，应用新策略\r\n    if (result.isSignificant && result.recommendation === 'adopt') {\r\n      await this.adoptStrategy(test.experimentStrategy)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 分析A/B测试结果\r\n   * \r\n   * @param test - 测试配置\r\n   * @returns 测试结果\r\n   */\r\n  private async analyzeABTestResult(test: ABTestConfig): Promise<ABTestResult> {\r\n    // 这里应该收集测试期间的实际指标数据\r\n    // 简化实现，使用模拟数据\r\n    const controlMetrics = await this.collectMetricsForStrategy(test.controlStrategy)\r\n    const experimentMetrics = await this.collectMetricsForStrategy(test.experimentStrategy)\r\n    \r\n    const improvement = {\r\n      hitRate: (experimentMetrics.hitRate - controlMetrics.hitRate) / controlMetrics.hitRate * 100,\r\n      responseTime: (controlMetrics.avgResponseTime - experimentMetrics.avgResponseTime) / controlMetrics.avgResponseTime * 100,\r\n      memoryUsage: (controlMetrics.memoryUsage - experimentMetrics.memoryUsage) / controlMetrics.memoryUsage * 100,\r\n      errorRate: (controlMetrics.errorRate - experimentMetrics.errorRate) / controlMetrics.errorRate * 100,\r\n      overallScore: (experimentMetrics.overallScore - controlMetrics.overallScore) / controlMetrics.overallScore * 100\r\n    }\r\n    \r\n    // 简化的统计显著性检验\r\n    const significance = this.calculateStatisticalSignificance(controlMetrics, experimentMetrics)\r\n    const isSignificant = significance < test.significanceThreshold\r\n    \r\n    let recommendation: 'adopt' | 'reject' | 'continue' = 'reject'\r\n    if (isSignificant && improvement.overallScore > 5) {\r\n      recommendation = 'adopt'\r\n    } else if (!isSignificant) {\r\n      recommendation = 'continue'\r\n    }\r\n    \r\n    return {\r\n      testId: test.testId,\r\n      controlMetrics,\r\n      experimentMetrics,\r\n      improvement,\r\n      significance,\r\n      isSignificant,\r\n      recommendation,\r\n      confidence: 1 - significance\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 收集策略指标\r\n   * \r\n   * @param strategy - 策略配置\r\n   * @returns 策略指标\r\n   */\r\n  private async collectMetricsForStrategy(strategy: StrategyConfig): Promise<StrategyMetrics> {\r\n    // 简化实现，实际应该基于真实的测试数据\r\n    const baseMetrics = await this.collectCurrentMetrics()\r\n    \r\n    // 根据策略类型调整指标\r\n    const adjustments = this.getStrategyAdjustments(strategy)\r\n    \r\n    return {\r\n      hitRate: Math.min(1, baseMetrics.hitRate * adjustments.hitRate),\r\n      avgResponseTime: baseMetrics.avgResponseTime * adjustments.responseTime,\r\n      memoryUsage: Math.min(1, baseMetrics.memoryUsage * adjustments.memoryUsage),\r\n      errorRate: Math.max(0, baseMetrics.errorRate * adjustments.errorRate),\r\n      throughput: baseMetrics.throughput * adjustments.throughput,\r\n      costScore: baseMetrics.costScore * adjustments.costScore,\r\n      overallScore: 0 // 将在后面计算\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取策略调整因子\r\n   * \r\n   * @param strategy - 策略配置\r\n   * @returns 调整因子\r\n   */\r\n  private getStrategyAdjustments(strategy: StrategyConfig): {\r\n    hitRate: number\r\n    responseTime: number\r\n    memoryUsage: number\r\n    errorRate: number\r\n    throughput: number\r\n    costScore: number\r\n  } {\r\n    switch (strategy.type) {\r\n      case OptimizationStrategy.PERFORMANCE:\r\n        return {\r\n          hitRate: 1.1,\r\n          responseTime: 0.8,\r\n          memoryUsage: 1.2,\r\n          errorRate: 0.9,\r\n          throughput: 1.15,\r\n          costScore: 1.1\r\n        }\r\n      case OptimizationStrategy.MEMORY:\r\n        return {\r\n          hitRate: 0.95,\r\n          responseTime: 1.1,\r\n          memoryUsage: 0.7,\r\n          errorRate: 1.0,\r\n          throughput: 0.9,\r\n          costScore: 0.8\r\n        }\r\n      case OptimizationStrategy.LATENCY:\r\n        return {\r\n          hitRate: 1.05,\r\n          responseTime: 0.7,\r\n          memoryUsage: 1.1,\r\n          errorRate: 0.95,\r\n          throughput: 1.1,\r\n          costScore: 1.05\r\n        }\r\n      default:\r\n        return {\r\n          hitRate: 1.0,\r\n          responseTime: 1.0,\r\n          memoryUsage: 1.0,\r\n          errorRate: 1.0,\r\n          throughput: 1.0,\r\n          costScore: 1.0\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算统计显著性\r\n   * \r\n   * @param control - 控制组指标\r\n   * @param experiment - 实验组指标\r\n   * @returns p值\r\n   */\r\n  private calculateStatisticalSignificance(control: StrategyMetrics, experiment: StrategyMetrics): number {\r\n    // 简化的t检验实现\r\n    const diff = experiment.overallScore - control.overallScore\r\n    const pooledStd = 0.1 // 假设标准差\r\n    const n = 100 // 假设样本大小\r\n    \r\n    const tStat = diff / (pooledStd * Math.sqrt(2 / n))\r\n    \r\n    // 简化的p值计算\r\n    return Math.max(0.001, 1 - Math.abs(tStat) / 3)\r\n  }\r\n\r\n  /**\r\n   * 采用新策略\r\n   * \r\n   * @param strategy - 新策略\r\n   */\r\n  private async adoptStrategy(strategy: StrategyConfig): Promise<void> {\r\n    console.log(`Adopting new strategy: ${strategy.name}`)\r\n    \r\n    this.currentStrategy = strategy.name\r\n    \r\n    // 更新缓存配置\r\n    await this.updateCacheConfig(strategy)\r\n    \r\n    this.emit('strategy-adopted', strategy)\r\n  }\r\n\r\n  /**\r\n   * 训练机器学习模型\r\n   */\r\n  private async trainModels(): Promise<void> {\r\n    if (this.metricsHistory.length < 50) {\r\n      return // 数据不足\r\n    }\r\n    \r\n    try {\r\n      // 训练性能预测模型\r\n      const performanceModel = this.mlModels.get('performance_predictor')\r\n      if (performanceModel) {\r\n        const trainingData = this.preparePerformanceTrainingData()\r\n        performanceModel.train(trainingData)\r\n        console.log('Performance prediction model trained')\r\n      }\r\n      \r\n      // 训练策略分类模型\r\n      const strategyModel = this.mlModels.get('strategy_classifier')\r\n      if (strategyModel) {\r\n        const trainingData = this.prepareStrategyTrainingData()\r\n        strategyModel.train(trainingData)\r\n        console.log('Strategy classification model trained')\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Model training failed:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 准备性能训练数据\r\n   * \r\n   * @returns 训练数据\r\n   */\r\n  private preparePerformanceTrainingData(): any[] {\r\n    return this.metricsHistory.map((metrics, index) => ({\r\n      input: {\r\n        hitRate: metrics.hitRate,\r\n        responseTime: metrics.avgResponseTime,\r\n        memoryUsage: metrics.memoryUsage,\r\n        errorRate: metrics.errorRate,\r\n        throughput: metrics.throughput\r\n      },\r\n      output: metrics.overallScore\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * 准备策略训练数据\r\n   * \r\n   * @returns 训练数据\r\n   */\r\n  private prepareStrategyTrainingData(): any[] {\r\n    const data: any[] = []\r\n    \r\n    // 基于历史数据和策略效果创建训练样本\r\n    for (const [strategyName, strategy] of this.strategies) {\r\n      const adjustments = this.getStrategyAdjustments(strategy)\r\n      \r\n      this.metricsHistory.forEach(metrics => {\r\n        data.push({\r\n          input: metrics,\r\n          output: strategyName,\r\n          performance: metrics.overallScore * adjustments.hitRate * (1 / adjustments.responseTime)\r\n        })\r\n      })\r\n    }\r\n    \r\n    return data\r\n  }\r\n\r\n  /**\r\n   * 预测性能\r\n   * \r\n   * @param input - 输入数据\r\n   * @returns 预测结果\r\n   */\r\n  private predictPerformance(input: any): any {\r\n    // 简化的线性回归预测\r\n    const weights = {\r\n      hitRate: 0.4,\r\n      responseTime: -0.3,\r\n      memoryUsage: -0.2,\r\n      errorRate: -0.1\r\n    }\r\n    \r\n    const score = \r\n      weights.hitRate * input.hitRate +\r\n      weights.responseTime * (1 / Math.max(1, input.responseTime / 100)) +\r\n      weights.memoryUsage * (1 - input.memoryUsage) +\r\n      weights.errorRate * (1 - input.errorRate)\r\n    \r\n    return {\r\n      expectedScore: Math.max(0, Math.min(1, score)),\r\n      confidence: 0.7\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 分类最优策略\r\n   * \r\n   * @param input - 输入指标\r\n   * @returns 最优策略名称\r\n   */\r\n  private classifyOptimalStrategy(input: StrategyMetrics): string {\r\n    // 简化的决策树逻辑\r\n    if (input.memoryUsage > 0.8) {\r\n      return 'memory_optimized'\r\n    } else if (input.avgResponseTime > 100) {\r\n      return 'low_latency'\r\n    } else if (input.hitRate < 0.6) {\r\n      return 'performance'\r\n    } else {\r\n      return 'default'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 训练性能模型\r\n   * \r\n   * @param data - 训练数据\r\n   */\r\n  private trainPerformanceModel(data: any[]): void {\r\n    // 简化的训练逻辑\r\n    const model = this.mlModels.get('performance_predictor')\r\n    if (model) {\r\n      model.trainingData = data\r\n      model.accuracy = Math.min(0.95, 0.5 + data.length / 1000)\r\n      model.lastTrainedAt = new Date()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 训练策略模型\r\n   * \r\n   * @param data - 训练数据\r\n   */\r\n  private trainStrategyModel(data: any[]): void {\r\n    // 简化的训练逻辑\r\n    const model = this.mlModels.get('strategy_classifier')\r\n    if (model) {\r\n      model.trainingData = data\r\n      model.accuracy = Math.min(0.9, 0.4 + data.length / 500)\r\n      model.lastTrainedAt = new Date()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理指标更新\r\n   * \r\n   * @param metrics - 缓存指标\r\n   */\r\n  private handleMetricsUpdate(metrics: any): void {\r\n    // 检查是否需要立即优化\r\n    if (metrics.hitRate < 0.5 || metrics.avgResponseTime > 200) {\r\n      console.log('Performance degradation detected, triggering immediate optimization')\r\n      this.performOptimization()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理数据库指标\r\n   * \r\n   * @param dbMetrics - 数据库指标\r\n   */\r\n  private handleDatabaseMetrics(dbMetrics: any): void {\r\n    // 根据数据库负载调整缓存策略\r\n    if (dbMetrics.connectionPoolUsage > 0.9) {\r\n      // 数据库连接池使用率高，增加缓存积极性\r\n      this.adjustCacheAggressiveness(1.2)\r\n    } else if (dbMetrics.connectionPoolUsage < 0.3) {\r\n      // 数据库负载低，可以减少缓存\r\n      this.adjustCacheAggressiveness(0.8)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 调整缓存积极性\r\n   * \r\n   * @param factor - 调整因子\r\n   */\r\n  private adjustCacheAggressiveness(factor: number): void {\r\n    const currentConfig = intelligentCacheManager.getConfig()\r\n    \r\n    const newConfig = {\r\n      ...currentConfig,\r\n      l1: {\r\n        ...currentConfig.l1,\r\n        ttl: Math.max(60000, currentConfig.l1.ttl * factor),\r\n        maxSize: Math.max(100, Math.floor(currentConfig.l1.maxSize * factor))\r\n      },\r\n      l2: {\r\n        ...currentConfig.l2,\r\n        ttl: Math.max(300000, currentConfig.l2.ttl * factor),\r\n        maxSize: Math.max(1000, Math.floor(currentConfig.l2.maxSize * factor))\r\n      }\r\n    }\r\n    \r\n    intelligentCacheManager.updateConfig(newConfig)\r\n    console.log(`Adjusted cache aggressiveness by factor ${factor}`)\r\n  }\r\n\r\n  /**\r\n   * 获取优化建议\r\n   * \r\n   * @returns 当前建议列表\r\n   */\r\n  getRecommendations(): OptimizationRecommendation[] {\r\n    return [...this.recommendations]\r\n  }\r\n\r\n  /**\r\n   * 获取活跃的A/B测试\r\n   * \r\n   * @returns 活跃测试列表\r\n   */\r\n  getActiveTests(): ABTestConfig[] {\r\n    return Array.from(this.activeTests.values())\r\n  }\r\n\r\n  /**\r\n   * 获取测试结果\r\n   * \r\n   * @returns 测试结果列表\r\n   */\r\n  getTestResults(): ABTestResult[] {\r\n    return Array.from(this.testResults.values())\r\n  }\r\n\r\n  /**\r\n   * 获取策略列表\r\n   * \r\n   * @returns 策略配置列表\r\n   */\r\n  getStrategies(): StrategyConfig[] {\r\n    return Array.from(this.strategies.values())\r\n  }\r\n\r\n  /**\r\n   * 获取当前策略\r\n   * \r\n   * @returns 当前策略名称\r\n   */\r\n  getCurrentStrategy(): string {\r\n    return this.currentStrategy\r\n  }\r\n\r\n  /**\r\n   * 获取机器学习模型状态\r\n   * \r\n   * @returns 模型状态\r\n   */\r\n  getMLModelStatus(): { name: string; accuracy: number; lastTrained: Date }[] {\r\n    return Array.from(this.mlModels.values()).map(model => ({\r\n      name: model.name,\r\n      accuracy: model.accuracy,\r\n      lastTrained: model.lastTrainedAt\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * 手动触发优化\r\n   */\r\n  async triggerOptimization(): Promise<void> {\r\n    await this.performOptimization()\r\n  }\r\n\r\n  /**\r\n   * 更新优化配置\r\n   * \r\n   * @param config - 新配置\r\n   */\r\n  updateOptimizationConfig(config: Partial<typeof this.optimizationConfig>): void {\r\n    Object.assign(this.optimizationConfig, config)\r\n    \r\n    // 重启优化间隔\r\n    if (this.optimizationInterval && config.interval) {\r\n      clearInterval(this.optimizationInterval)\r\n      this.optimizationInterval = setInterval(() => {\r\n        this.performOptimization()\r\n      }, this.optimizationConfig.interval)\r\n    }\r\n    \r\n    console.log('Optimization configuration updated')\r\n    this.emit('config-updated', this.optimizationConfig)\r\n  }\r\n\r\n  /**\r\n   * 生成优化报告\r\n   * \r\n   * @returns 优化报告\r\n   */\r\n  generateOptimizationReport(): {\r\n    summary: string\r\n    currentStrategy: string\r\n    recommendations: number\r\n    activeTests: number\r\n    modelAccuracy: any\r\n    performance: any\r\n  } {\r\n    const modelAccuracy = this.getMLModelStatus().reduce((acc, model) => {\r\n      acc[model.name] = model.accuracy\r\n      return acc\r\n    }, {} as any)\r\n    \r\n    const currentMetrics = this.metricsHistory[this.metricsHistory.length - 1]\r\n    \r\n    return {\r\n      summary: `\r\n缓存策略优化报告\r\n================\r\n生成时间: ${new Date().toISOString()}\r\n当前策略: ${this.currentStrategy}\r\n优化建议: ${this.recommendations.length} 条\r\n活跃测试: ${this.activeTests.size} 个\r\n历史数据: ${this.metricsHistory.length} 条记录\r\n模型准确率: ${Object.values(modelAccuracy).map(a => `${(a * 100).toFixed(1)}%`).join(', ')}\r\n      `.trim(),\r\n      currentStrategy: this.currentStrategy,\r\n      recommendations: this.recommendations.length,\r\n      activeTests: this.activeTests.size,\r\n      modelAccuracy,\r\n      performance: currentMetrics || {}\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const cacheStrategyOptimizer = new CacheStrategyOptimizer()\r\n\r\n// 导出类型\r\nexport type {\r\n  StrategyConfig,\r\n  StrategyMetrics,\r\n  ABTestConfig,\r\n  ABTestResult,\r\n  OptimizationRecommendation,\r\n  MLModel\r\n}\r\n\r\nexport { OptimizationStrategy }\r\n"],"mappings":"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","ignoreList":[]}