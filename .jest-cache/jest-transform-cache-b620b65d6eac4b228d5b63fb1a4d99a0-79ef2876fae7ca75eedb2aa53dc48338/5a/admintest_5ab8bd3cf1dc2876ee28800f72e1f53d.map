{"file":"E:\\zk-agent\\tests\\api\\routes\\admin.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\admin.test.ts"],"sourcesContent":["/**\n * 管理员API路由错误处理测试\n * 测试管理员功能端点的各种错误场景和权限控制\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '@/app/api/admin/route';\nimport { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\nimport { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';\nimport type { MockedFunction } from 'jest-mock';\n\n// Mock dependencies\njest.mock('../../../lib/services/admin-service', () => ({\n  getSystemStats: jest.fn(),\n  getUserManagement: jest.fn(),\n  updateSystemConfig: jest.fn(),\n  performMaintenance: jest.fn(),\n  getAuditLogs: jest.fn(),\n  managePermissions: jest.fn(),\n  backupSystem: jest.fn(),\n  restoreSystem: jest.fn()\n}));\n\njest.mock('../../../lib/auth/admin-auth', () => ({\n  validateAdminSession: jest.fn(),\n  checkSuperAdminPermissions: jest.fn(),\n  validateAdminToken: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\njest.mock('../../../lib/storage/audit-logger', () => ({\n  logSecurityEvent: jest.fn(),\n  logSystemChange: jest.fn(),\n  getAuditTrail: jest.fn()\n}));\n\ndescribe('Admin API Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('Authentication and Authorization', () => {\n    it('should handle missing admin authentication', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/stats');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n      expect(data.error.message).toContain('Admin authentication required');\n    });\n\n    it('should handle invalid admin token', async () => {\n      const { validateAdminToken } = require('../../../lib/auth/admin-auth');\n      validateAdminToken.mockRejectedValue(new Error('Invalid admin token'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer invalid-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Invalid admin token');\n    });\n\n    it('should handle expired admin session', async () => {\n      const { validateAdminSession } = require('../../../lib/auth/admin-auth');\n      validateAdminSession.mockRejectedValue(new Error('Admin session expired'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer expired-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Admin session expired');\n    });\n\n    it('should handle insufficient admin permissions', async () => {\n      const { checkSuperAdminPermissions } = require('../../../lib/auth/admin-auth');\n      checkSuperAdminPermissions.mockRejectedValue(new Error('Super admin permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer admin-token' },\n        body: JSON.stringify({ setting: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Super admin permissions required');\n    });\n\n    it('should handle role-based access control violations', async () => {\n      const { validateAdminSession } = require('../../../lib/auth/admin-auth');\n      validateAdminSession.mockResolvedValue({ role: 'moderator', permissions: ['read'] });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/delete', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer moderator-token' }\n      });\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Insufficient permissions');\n    });\n  });\n\n  describe('System Statistics Errors', () => {\n    it('should handle database connection failure for stats', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Database connection failed');\n    });\n\n    it('should handle metrics collection service unavailable', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Metrics service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Metrics service unavailable');\n    });\n\n    it('should handle partial stats collection failure', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockResolvedValue({\n        users: { total: 100, active: 80 },\n        system: null, // Failed to collect system stats\n        errors: ['Failed to collect system metrics']\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(206); // Partial content\n      expect(data.data.errors).toContain('Failed to collect system metrics');\n    });\n  });\n\n  describe('User Management Errors', () => {\n    it('should handle user not found for management operations', async () => {\n      const { getUserManagement } = require('../../../lib/services/admin-service');\n      getUserManagement.mockRejectedValue(new Error('User not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/nonexistent-id', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('User not found');\n    });\n\n    it('should handle invalid user ID format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/users/invalid-id-format', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid user ID format');\n    });\n\n    it('should handle attempt to modify super admin account', async () => {\n      const { getUserManagement } = require('../../../lib/services/admin-service');\n      getUserManagement.mockRejectedValue(new Error('Cannot modify super admin account'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/super-admin-id', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer admin-token' },\n        body: JSON.stringify({ role: 'user' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Cannot modify super admin account');\n    });\n\n    it('should handle bulk user operation failure', async () => {\n      const { getUserManagement } = require('../../../lib/services/admin-service');\n      getUserManagement.mockRejectedValue(new Error('Bulk operation failed: some users not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/bulk', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ userIds: ['id1', 'id2', 'id3'], action: 'suspend' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.error.message).toContain('Bulk operation failed');\n    });\n  });\n\n  describe('System Configuration Errors', () => {\n    it('should handle invalid configuration format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ invalidConfig: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid configuration format');\n    });\n\n    it('should handle configuration validation failure', async () => {\n      const { updateSystemConfig } = require('../../../lib/services/admin-service');\n      updateSystemConfig.mockRejectedValue(new Error('Configuration validation failed: invalid database URL'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ databaseUrl: 'invalid-url' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Configuration validation failed');\n    });\n\n    it('should handle configuration backup failure', async () => {\n      const { updateSystemConfig } = require('../../../lib/services/admin-service');\n      updateSystemConfig.mockRejectedValue(new Error('Failed to backup current configuration'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ setting: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to backup current configuration');\n    });\n\n    it('should handle configuration rollback on apply failure', async () => {\n      const { updateSystemConfig } = require('../../../lib/services/admin-service');\n      updateSystemConfig.mockRejectedValue(new Error('Configuration apply failed, rolled back to previous version'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ setting: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Configuration apply failed, rolled back');\n    });\n  });\n\n  describe('Maintenance Operations Errors', () => {\n    it('should handle maintenance mode activation failure', async () => {\n      const { performMaintenance } = require('../../../lib/services/admin-service');\n      performMaintenance.mockRejectedValue(new Error('Failed to activate maintenance mode'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/maintenance', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ action: 'enable', reason: 'System update' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to activate maintenance mode');\n    });\n\n    it('should handle database maintenance operation failure', async () => {\n      const { performMaintenance } = require('../../../lib/services/admin-service');\n      performMaintenance.mockRejectedValue(new Error('Database maintenance failed: table lock timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/maintenance/database', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ operation: 'optimize' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Database maintenance failed');\n    });\n\n    it('should handle cache clear operation failure', async () => {\n      const { performMaintenance } = require('../../../lib/services/admin-service');\n      performMaintenance.mockRejectedValue(new Error('Cache clear failed: Redis connection error'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/maintenance/cache', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ action: 'clear' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Cache clear failed');\n    });\n  });\n\n  describe('Audit Log Errors', () => {\n    it('should handle audit log retrieval failure', async () => {\n      const { getAuditLogs } = require('../../../lib/services/admin-service');\n      getAuditLogs.mockRejectedValue(new Error('Audit log service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/audit-logs', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Audit log service unavailable');\n    });\n\n    it('should handle invalid audit log query parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/audit-logs?startDate=invalid&endDate=also-invalid', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid date format');\n    });\n\n    it('should handle audit log export failure', async () => {\n      const { getAuditLogs } = require('../../../lib/services/admin-service');\n      getAuditLogs.mockRejectedValue(new Error('Export failed: insufficient disk space'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/audit-logs/export', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ format: 'csv', dateRange: '30d' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient storage\n      expect(data.error.message).toContain('insufficient disk space');\n    });\n  });\n\n  describe('Backup and Restore Errors', () => {\n    it('should handle backup creation failure', async () => {\n      const { backupSystem } = require('../../../lib/services/admin-service');\n      backupSystem.mockRejectedValue(new Error('Backup failed: storage quota exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/backup', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ type: 'full', compression: true })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507);\n      expect(data.error.message).toContain('storage quota exceeded');\n    });\n\n    it('should handle backup corruption detection', async () => {\n      const { backupSystem } = require('../../../lib/services/admin-service');\n      backupSystem.mockRejectedValue(new Error('Backup verification failed: data corruption detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/backup', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ type: 'incremental' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('data corruption detected');\n    });\n\n    it('should handle restore operation failure', async () => {\n      const { restoreSystem } = require('../../../lib/services/admin-service');\n      restoreSystem.mockRejectedValue(new Error('Restore failed: backup file not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/restore', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ backupId: 'backup-123' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.message).toContain('backup file not found');\n    });\n\n    it('should handle restore validation failure', async () => {\n      const { restoreSystem } = require('../../../lib/services/admin-service');\n      restoreSystem.mockRejectedValue(new Error('Restore validation failed: incompatible backup version'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/restore', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ backupId: 'backup-old-version' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('incompatible backup version');\n    });\n  });\n\n  describe('Permission Management Errors', () => {\n    it('should handle invalid permission assignment', async () => {\n      const { managePermissions } = require('../../../lib/services/admin-service');\n      managePermissions.mockRejectedValue(new Error('Invalid permission: NONEXISTENT_PERMISSION'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/permissions', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ userId: 'user-123', permissions: ['NONEXISTENT_PERMISSION'] })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid permission');\n    });\n\n    it('should handle circular role dependency', async () => {\n      const { managePermissions } = require('../../../lib/services/admin-service');\n      managePermissions.mockRejectedValue(new Error('Circular role dependency detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/roles', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ roleId: 'role-a', inheritsFrom: ['role-b'] })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Circular role dependency');\n    });\n\n    it('should handle permission escalation attempt', async () => {\n      const { managePermissions } = require('../../../lib/services/admin-service');\n      managePermissions.mockRejectedValue(new Error('Permission escalation not allowed'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/permissions', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer admin-token' },\n        body: JSON.stringify({ userId: 'user-123', permissions: ['SUPER_ADMIN'] })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Permission escalation not allowed');\n    });\n  });\n\n  describe('Security and Audit Logging', () => {\n    it('should log all admin actions for audit trail', async () => {\n      const { logAdminAction } = require('../../../lib/auth/admin-auth');\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockResolvedValue({ users: 100 });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      await GET(request);\n\n      expect(logAdminAction).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'VIEW_SYSTEM_STATS',\n          adminId: expect.any(String),\n          timestamp: expect.any(Date)\n        })\n      );\n    });\n\n    it('should log security violations', async () => {\n      const { logSecurityEvent } = require('../../../lib/storage/audit-logger');\n      \n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer invalid-token' }\n      });\n      await GET(request);\n\n      expect(logSecurityEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'UNAUTHORIZED_ADMIN_ACCESS',\n          severity: 'HIGH',\n          details: expect.any(Object)\n        })\n      );\n    });\n\n    it('should handle audit logging failure gracefully', async () => {\n      const { logAdminAction } = require('../../../lib/auth/admin-auth');\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      \n      logAdminAction.mockRejectedValue(new Error('Audit log service down'));\n      getSystemStats.mockResolvedValue({ users: 100 });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n\n      // Should still succeed even if audit logging fails\n      expect(response.status).toBe(200);\n    });\n  });\n\n  describe('Rate Limiting and DDoS Protection', () => {\n    it('should handle admin API rate limiting', async () => {\n      const requests = Array.from({ length: 20 }, () => \n        new NextRequest('http://localhost:3000/api/admin/stats', {\n          headers: { 'Authorization': 'Bearer valid-admin-token' }\n        })\n      );\n\n      const responses = await Promise.all(requests.map(req => GET(req)));\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n\n    it('should implement stricter rate limits for sensitive operations', async () => {\n      const sensitiveRequests = Array.from({ length: 5 }, () => \n        new NextRequest('http://localhost:3000/api/admin/system/config', {\n          method: 'PUT',\n          headers: { 'Authorization': 'Bearer valid-admin-token' },\n          body: JSON.stringify({ setting: 'value' })\n        })\n      );\n\n      const responses = await Promise.all(sensitiveRequests.map(req => PUT(req)));\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide detailed error context for debugging', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Database query timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('getSystemStats');\n      expect(data.error.context.timestamp).toBeDefined();\n    });\n\n    it('should include system health indicators in error responses', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Service degraded'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.systemHealth).toBeDefined();\n      expect(data.error.systemHealth.status).toBe('degraded');\n    });\n\n    it('should track admin error patterns for monitoring', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Repeated failure'));\n\n      // Simulate multiple failures\n      for (let i = 0; i < 3; i++) {\n        const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n          headers: { 'Authorization': 'Bearer valid-admin-token' }\n        });\n        await GET(request);\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n  });\n});"],"version":3}