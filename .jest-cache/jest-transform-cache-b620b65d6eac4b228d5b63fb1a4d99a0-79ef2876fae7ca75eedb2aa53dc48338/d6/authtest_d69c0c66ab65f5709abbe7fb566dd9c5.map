{"file":"E:\\zk-agent\\tests\\api\\routes\\auth.test.ts","mappings":";AAAA;;;;;GAKG;;AAEH,mCAAyE;AACzE,wCAA0C;AAC1C,sDAAkE;AAClE,yDAAwE;AAExE,wDAAqE;AACrE,gEAAqF;AAErF,gFAA2E;AAE3E,IAAA,iBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAI,YAAgC,CAAC;IAErC,IAAA,mBAAU,EAAC,GAAG,EAAE;QACd,YAAY,GAAG,yCAAkB,CAAC,WAAW,EAAE,CAAC;QAChD,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,WAAE,CAAC,aAAa,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAS,EAAC,GAAG,EAAE;QACb,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,+BAA+B,EAAE,GAAG,EAAE;QAC7C,IAAA,WAAE,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,sCAAsC,EAAE;gBACtE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAY,EAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,sCAAsC,EAAE;gBACtE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,KAAK,EAAE,qBAAqB;oBAC5B,QAAQ,EAAE,eAAe;iBAC1B,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAY,EAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,sCAAsC,EAAE;gBACtE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,cAAc;aACrB,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAY,EAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,sBAAsB;YACtB,WAAE,CAAC,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE,CAAC,CAAC;gBAC1C,OAAO,EAAE;oBACP,IAAI,EAAE;wBACJ,UAAU,EAAE,WAAE,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;qBAC/E;iBACF;aACF,CAAC,CAAC,CAAC;YAEJ,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,sCAAsC,EAAE;gBACtE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,KAAK,EAAE,kBAAkB;oBACzB,QAAQ,EAAE,aAAa;iBACxB,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAY,EAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,qCAAqC,EAAE,GAAG,EAAE;QACnD,IAAA,WAAE,EAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,yCAAyC,EAAE;gBACzE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,KAAK,EAAE,sBAAsB;oBAC7B,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE,WAAW;iBAClB,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAe,EAAC,OAAO,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,yCAAyC,EAAE;gBACzE,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,KAAK,EAAE,kBAAkB;oBACzB,QAAQ,EAAE,KAAK;oBACf,IAAI,EAAE,WAAW;iBAClB,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAe,EAAC,OAAO,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,mCAAmC,EAAE,GAAG,EAAE;QACjD,IAAA,WAAE,EAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,wCAAwC,EAAE;gBACxE,MAAM,EAAE,KAAK;aACd,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,WAAc,EAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,wCAAwC,EAAE;gBACxE,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE;oBACP,eAAe,EAAE,sBAAsB;iBACxC;aACF,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,WAAc,EAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,mDAAmD,EAAE,GAAG,EAAE;QACjE,IAAA,WAAE,EAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,gDAAgD,EAAE;gBAChF,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,WAAW,EAAE,gBAAgB;iBAC9B,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAqB,EAAC,OAAO,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAA,eAAM,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,gDAAgD,EAAE;gBAChF,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE;oBACP,cAAc,EAAE,kBAAkB;oBAClC,eAAe,EAAE,oBAAoB;iBACtC;gBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;oBACnB,eAAe,EAAE,eAAe;oBAChC,WAAW,EAAE,gBAAgB;iBAC9B,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,MAAM,IAAA,YAAqB,EAAC,OAAO,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEnC,IAAA,eAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,IAAA,eAAM,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAA,WAAE,EAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,0BAA0B;YAC1B,MAAM,QAAQ,GAAG;gBACf,IAAI,oBAAW,CAAC,sCAAsC,EAAE;oBACtD,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,cAAc;iBACrB,CAAC;gBACF,IAAI,oBAAW,CAAC,wCAAwC,EAAE;oBACxD,MAAM,EAAE,KAAK;iBACd,CAAC;gBACF,IAAI,oBAAW,CAAC,yCAAyC,EAAE;oBACzD,MAAM,EAAE,MAAM;oBACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;iBACzB,CAAC;aACH,CAAC;YAEF,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;gBAC/B,MAAM,IAAA,YAAY,EAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;YAC9C,CAAC;YAED,MAAM,KAAK,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;YAC3C,IAAA,eAAM,EAAC,KAAK,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,sCAAsC;YACtC,MAAM,iBAAiB,GAAG,YAAY,CAAC,gBAAgB,CAAC,CAAC;YACzD,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAEnC,IAAI,CAAC;gBACH,8CAA8C;gBAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC3B,MAAM,OAAO,GAAG,IAAI,oBAAW,CAAC,sCAAsC,EAAE;wBACtE,MAAM,EAAE,MAAM;wBACd,IAAI,EAAE,cAAc;qBACrB,CAAC,CAAC;oBACH,MAAM,IAAA,YAAY,EAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;gBAC9C,CAAC;gBAED,IAAA,eAAM,EAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzD,CAAC;oBAAS,CAAC;gBACT,YAAY,CAAC,gBAAgB,CAAC,GAAG,iBAAiB,CAAC;YACrD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\auth.test.ts"],"sourcesContent":["/**\n * @file auth.test.ts\n * @description 认证相关API路由错误处理测试\n * @author ZK-Agent Team\n * @date 2025-01-27\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { NextRequest } from 'next/server';\nimport { POST as loginHandler } from '@/app/api/auth/login/route';\nimport { POST as registerHandler } from '@/app/api/auth/register/route';\nimport { POST as logoutHandler } from '@/app/api/auth/logout/route';\nimport { GET as profileHandler } from '@/app/api/auth/profile/route';\nimport { POST as changePasswordHandler } from '@/app/api/auth/change-password/route';\nimport { POST as refreshHandler } from '@/app/api/auth/refresh/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n\ndescribe('Auth API Routes Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler.reset();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    errorHandler.reset();\n  });\n\n  describe('Login Route (/api/auth/login)', () => {\n    it('should handle missing credentials error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle invalid credentials error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'invalid@example.com',\n          password: 'wrongpassword'\n        })\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('AUTHENTICATION_ERROR');\n    });\n\n    it('should handle malformed JSON error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: 'invalid json'\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle database connection error', async () => {\n      // Mock database error\n      vi.mock('@/lib/database/connection', () => ({\n        default: {\n          user: {\n            findUnique: vi.fn().mockRejectedValue(new Error('Database connection failed'))\n          }\n        }\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123'\n        })\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('DATABASE_ERROR');\n    });\n  });\n\n  describe('Register Route (/api/auth/register)', () => {\n    it('should handle duplicate email error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'existing@example.com',\n          password: 'password123',\n          name: 'Test User'\n        })\n      });\n\n      const response = await registerHandler(request);\n      const data = await response.json();\n\n      expect([400, 409]).toContain(response.status);\n      expect(data.error).toBeDefined();\n    });\n\n    it('should handle weak password error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: '123',\n          name: 'Test User'\n        })\n      });\n\n      const response = await registerHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n  });\n\n  describe('Profile Route (/api/auth/profile)', () => {\n    it('should handle unauthorized access error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/profile', {\n        method: 'GET'\n      });\n\n      const response = await profileHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('AUTHENTICATION_ERROR');\n    });\n\n    it('should handle invalid token error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/profile', {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer invalid_token'\n        }\n      });\n\n      const response = await profileHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('AUTHENTICATION_ERROR');\n    });\n  });\n\n  describe('Change Password Route (/api/auth/change-password)', () => {\n    it('should handle missing current password error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/change-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          newPassword: 'newpassword123'\n        })\n      });\n\n      const response = await changePasswordHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle incorrect current password error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer valid_token'\n        },\n        body: JSON.stringify({\n          currentPassword: 'wrongpassword',\n          newPassword: 'newpassword123'\n        })\n      });\n\n      const response = await changePasswordHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n    });\n  });\n\n  describe('Error Handler Integration', () => {\n    it('should track error statistics across auth routes', async () => {\n      // Trigger multiple errors\n      const requests = [\n        new NextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: 'invalid json'\n        }),\n        new NextRequest('http://localhost:3000/api/auth/profile', {\n          method: 'GET'\n        }),\n        new NextRequest('http://localhost:3000/api/auth/register', {\n          method: 'POST',\n          body: JSON.stringify({})\n        })\n      ];\n\n      for (const request of requests) {\n        await loginHandler(request).catch(() => {});\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should trigger circuit breaker on repeated failures', async () => {\n      // Configure low threshold for testing\n      const originalThreshold = errorHandler['errorThreshold'];\n      errorHandler['errorThreshold'] = 2;\n\n      try {\n        // Trigger multiple errors to exceed threshold\n        for (let i = 0; i < 3; i++) {\n          const request = new NextRequest('http://localhost:3000/api/auth/login', {\n            method: 'POST',\n            body: 'invalid json'\n          });\n          await loginHandler(request).catch(() => {});\n        }\n\n        expect(errorHandler.isCircuitBreakerOpen()).toBe(true);\n      } finally {\n        errorHandler['errorThreshold'] = originalThreshold;\n      }\n    });\n  });\n});"],"version":3}