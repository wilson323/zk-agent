{"file":"E:\\zk-agent\\lib\\database\\enhanced-connection.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\enhanced-connection.ts"],"sourcesContent":["/**\n * @file Enhanced Database Connection Manager\n * @description 增强的数据库连接管理器，支持连接池优化、自动重连和错误恢复\n * @author ZK-Agent Team A\n * @date 2024-12-19\n */\n\nimport { PrismaClient } from '@prisma/client'\nimport { EventEmitter } from 'events'\nimport type { PoolConfiguration } from './pool-optimizer'\nimport type { RecoveryConfiguration } from './error-recovery'\n\n// 连接池配置接口\nexport interface ConnectionPoolConfig {\n  maxConnections: number\n  minConnections: number\n  acquireTimeoutMillis: number\n  createTimeoutMillis: number\n  destroyTimeoutMillis: number\n  idleTimeoutMillis: number\n  evictionRunIntervalMillis: number\n  connectTimeoutMillis: number\n  requestTimeoutMillis: number\n  cancelTimeoutMillis: number\n}\n\n// 重连配置接口\nexport interface ReconnectionConfig {\n  enabled: boolean\n  maxRetries: number\n  retryDelayMs: number\n  backoffMultiplier: number\n  maxRetryDelayMs: number\n  jitterMs: number\n}\n\n// 健康检查配置接口\nexport interface HealthCheckConfig {\n  enabled: boolean\n  intervalMs: number\n  timeoutMs: number\n  failureThreshold: number\n  recoveryThreshold: number\n}\n\n// 连接状态枚举\nexport enum ConnectionState {\n  DISCONNECTED = 'disconnected',\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  RECONNECTING = 'reconnecting',\n  FAILED = 'failed'\n}\n\n// 连接统计信息\nexport interface ConnectionStats {\n  state: ConnectionState\n  connectedAt?: Date\n  lastError?: Error\n  reconnectAttempts: number\n  totalQueries: number\n  failedQueries: number\n  avgLatency: number\n  uptime: number\n}\n\n// 数据库事件类型\nexport interface DatabaseEvents {\n  connected: () => void\n  disconnected: (error?: Error) => void\n  reconnecting: (attempt: number) => void\n  reconnected: () => void\n  error: (error: Error) => void\n  healthCheck: (healthy: boolean) => void\n}\n\n// 全局增强数据库连接实例\nexport const enhancedDb = new EnhancedDatabaseConnection()\n\n/**\n * 增强的数据库连接管理器\n */\nexport class EnhancedDatabaseConnection extends EventEmitter {\n  private prisma: PrismaClient | null = null\n  private state: ConnectionState = ConnectionState.DISCONNECTED\n  private reconnectTimer: NodeJS.Timeout | null = null\n  private healthCheckTimer: NodeJS.Timeout | null = null\n  private stats: ConnectionStats\n  private config: {\n    pool: ConnectionPoolConfig\n    reconnection: ReconnectionConfig\n    healthCheck: HealthCheckConfig\n  }\n  \n\n  constructor(\n    poolConfig?: Partial<ConnectionPoolConfig>,\n    reconnectionConfig?: Partial<ReconnectionConfig>,\n    healthCheckConfig?: Partial<HealthCheckConfig>\n  ) {\n    super()\n\n    // 默认配置\n    this.config = {\n      pool: {\n        maxConnections: parseInt(process.env.DB_POOL_MAX || '50'),\n        minConnections: parseInt(process.env.DB_POOL_MIN || '10'),\n        acquireTimeoutMillis: parseInt(process.env.DB_POOL_ACQUIRE || '60000'),\n        idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE || '20000'),\n        evictionRunIntervalMillis: parseInt(process.env.DB_POOL_EVICT || '1000'),\n        connectTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT || '20000'),\n        requestTimeoutMillis: parseInt(process.env.DB_REQUEST_TIMEOUT || '15000'),\n        cancelTimeoutMillis: parseInt(process.env.DB_CANCEL_TIMEOUT || '5000'),\n        ...poolConfig\n      },\n      reconnection: {\n        enabled: true,\n        maxRetries: 10,\n        retryDelayMs: 1000,\n        backoffMultiplier: 2,\n        maxRetryDelayMs: 30000,\n        jitterMs: 100,\n        ...reconnectionConfig\n      },\n      healthCheck: {\n        enabled: process.env.DB_HEALTH_CHECK === 'true',\n        intervalMs: parseInt(process.env.DB_HEALTH_CHECK_INTERVAL || '30000'),\n        timeoutMs: parseInt(process.env.DB_HEALTH_CHECK_TIMEOUT || '5000'),\n        failureThreshold: 3,\n        recoveryThreshold: 2,\n        ...healthCheckConfig\n      }\n    }\n\n    // 初始化统计信息\n    this.stats = {\n      state: ConnectionState.DISCONNECTED,\n      reconnectAttempts: 0,\n      totalQueries: 0,\n      failedQueries: 0,\n      avgLatency: 0,\n      uptime: 0\n    }\n\n    // 绑定事件处理器\n    this.setupEventHandlers()\n  }\n\n  /**\n   * 设置事件处理器\n   */\n  private setupEventHandlers(): void {\n    // 进程退出时清理连接\n    process.on('beforeExit', () => this.disconnect())\n    process.on('SIGINT', () => this.gracefulShutdown())\n    process.on('SIGTERM', () => this.gracefulShutdown())\n\n    // 未捕获异常处理\n    process.on('uncaughtException', (error) => {\n      console.error('Uncaught exception in database connection:', error)\n      this.handleConnectionError(error)\n    })\n\n    process.on('unhandledRejection', (reason) => {\n      console.error('Unhandled rejection in database connection:', reason)\n      if (reason instanceof Error) {\n        this.handleConnectionError(reason)\n      }\n    })\n  }\n\n  /**\n   * 连接到数据库\n   */\n  async connect(): Promise<void> {\n    if (this.state === ConnectionState.CONNECTED) {\n      return\n    }\n\n    this.setState(ConnectionState.CONNECTING)\n\n    try {\n      // 创建Prisma客户端\n      this.prisma = new PrismaClient({\n        log: process.env.NODE_ENV === 'development' \n          ? ['query', 'error', 'warn'] \n          : ['error'],\n        errorFormat: 'pretty',\n        datasources: {\n          db: {\n            url: process.env.DATABASE_URL\n          }\n        }\n      })\n\n      // 连接到数据库\n      await this.prisma.$connect()\n\n      // 验证连接\n      await this.validateConnection()\n\n      this.setState(ConnectionState.CONNECTED)\n      this.stats.connectedAt = new Date()\n      this.stats.reconnectAttempts = 0\n      this.stats.lastError = undefined\n\n      // 启动健康检查\n      if (this.config.healthCheck.enabled) {\n        this.startHealthCheck()\n      }\n\n      this.emit('connected')\n      console.log('Database connected successfully')\n\n    } catch (error) {\n      this.setState(ConnectionState.FAILED)\n      this.stats.lastError = error instanceof Error ? error : new Error(String(error))\n      \n      console.error('Database connection failed:', error)\n      this.emit('error', this.stats.lastError)\n\n      // 如果启用了重连，则尝试重连\n      if (this.config.reconnection.enabled) {\n        this.scheduleReconnect()\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * 验证数据库连接\n   */\n  private async validateConnection(): Promise<void> {\n    if (!this.prisma) {\n      throw new Error('Prisma client not initialized')\n    }\n\n    const startTime = Date.now()\n    \n    try {\n      // 执行简单查询验证连接\n      await this.prisma.$queryRaw`SELECT 1 as test`\n      \n      const latency = Date.now() - startTime\n      this.updateLatencyStats(latency)\n      \n    } catch (error) {\n      throw new Error(`Connection validation failed: ${error}`)\n    }\n  }\n\n  /**\n   * 断开数据库连接\n   */\n  async disconnect(): Promise<void> {\n    this.stopHealthCheck()\n    this.stopReconnectTimer()\n\n    if (this.prisma) {\n      try {\n        await this.prisma.$disconnect()\n        console.log('Database disconnected successfully')\n      } catch (error) {\n        console.error('Error disconnecting from database:', error)\n      } finally {\n        this.prisma = null\n      }\n    }\n\n    this.setState(ConnectionState.DISCONNECTED)\n    this.emit('disconnected')\n  }\n\n  /**\n   * 优雅关闭\n   */\n  async gracefulShutdown(): Promise<void> {\n    console.log('Initiating graceful database shutdown...')\n    \n    try {\n      await this.disconnect()\n      console.log('Database shutdown completed')\n    } catch (error) {\n      console.error('Error during graceful shutdown:', error)\n    } finally {\n      process.exit(0)\n    }\n  }\n\n  /**\n   * 重新连接数据库\n   */\n  async reconnect(): Promise<void> {\n    console.log('Attempting to reconnect to database...')\n    \n    this.setState(ConnectionState.RECONNECTING)\n    this.stats.reconnectAttempts++\n    \n    this.emit('reconnecting', this.stats.reconnectAttempts)\n\n    try {\n      // 先断开现有连接\n      if (this.prisma) {\n        await this.prisma.$disconnect()\n        this.prisma = null\n      }\n\n      // 重新连接\n      await this.connect()\n      \n      console.log('Database reconnected successfully')\n      this.emit('reconnected')\n      \n    } catch (error) {\n      console.error(`Reconnection attempt ${this.stats.reconnectAttempts} failed:`, error)\n      \n      // 如果还有重试次数，则继续尝试\n      if (this.stats.reconnectAttempts < this.config.reconnection.maxRetries) {\n        this.scheduleReconnect()\n      } else {\n        console.error('Max reconnection attempts reached. Giving up.')\n        this.setState(ConnectionState.FAILED)\n        this.emit('error', new Error('Max reconnection attempts reached'))\n      }\n    }\n  }\n\n  /**\n   * 安排重连\n   */\n  private scheduleReconnect(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer)\n    }\n\n    const delay = this.calculateReconnectDelay()\n    \n    console.log(`Scheduling reconnection in ${delay}ms (attempt ${this.stats.reconnectAttempts + 1})`)\n    \n    this.reconnectTimer = setTimeout(() => {\n      this.reconnect().catch(error => {\n        console.error('Scheduled reconnection failed:', error)\n      })\n    }, delay)\n  }\n\n  /**\n   * 计算重连延迟时间\n   */\n  private calculateReconnectDelay(): number {\n    const { retryDelayMs, backoffMultiplier, maxRetryDelayMs, jitterMs } = this.config.reconnection\n    \n    // 指数退避算法\n    const baseDelay = Math.min(\n      retryDelayMs * Math.pow(backoffMultiplier, this.stats.reconnectAttempts),\n      maxRetryDelayMs\n    )\n    \n    // 添加随机抖动避免雷群效应\n    const jitter = Math.random() * jitterMs\n    \n    return baseDelay + jitter\n  }\n\n  /**\n   * 停止重连定时器\n   */\n  private stopReconnectTimer(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer)\n      this.reconnectTimer = null\n    }\n  }\n\n  /**\n   * 启动健康检查\n   */\n  private startHealthCheck(): void {\n    if (this.healthCheckTimer) {\n      return\n    }\n\n    this.healthCheckTimer = setInterval(() => {\n      this.performHealthCheck().catch(error => {\n        console.error('Health check failed:', error)\n      })\n    }, this.config.healthCheck.intervalMs)\n  }\n\n  /**\n   * 停止健康检查\n   */\n  private stopHealthCheck(): void {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer)\n      this.healthCheckTimer = null\n    }\n  }\n\n  /**\n   * 执行健康检查\n   */\n  private async performHealthCheck(): Promise<boolean> {\n    if (!this.prisma || this.state !== ConnectionState.CONNECTED) {\n      return false\n    }\n\n    const startTime = Date.now()\n    \n    try {\n      // 设置健康检查超时\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Health check timeout')), this.config.healthCheck.timeoutMs)\n      })\n\n      // 执行健康检查查询\n      const healthCheckPromise = this.prisma.$queryRaw`SELECT 1 as health_check`\n      \n      await Promise.race([healthCheckPromise, timeoutPromise])\n      \n      const latency = Date.now() - startTime\n      this.updateLatencyStats(latency)\n      \n      this.emit('healthCheck', true)\n      return true\n      \n    } catch (error) {\n      console.error('Health check failed:', error)\n      this.emit('healthCheck', false)\n      \n      // 健康检查失败，可能需要重连\n      this.handleConnectionError(error instanceof Error ? error : new Error(String(error)))\n      \n      return false\n    }\n  }\n\n  /**\n   * 处理连接错误\n   */\n  private handleConnectionError(error: Error): void {\n    console.error('Database connection error:', error)\n    \n    this.stats.lastError = error\n    this.emit('error', error)\n    \n    // 如果当前是连接状态且启用了重连，则尝试重连\n    if (this.state === ConnectionState.CONNECTED && this.config.reconnection.enabled) {\n      this.setState(ConnectionState.DISCONNECTED)\n      this.scheduleReconnect()\n    }\n  }\n\n  /**\n   * 设置连接状态\n   */\n  private setState(state: ConnectionState): void {\n    const previousState = this.state\n    this.state = state\n    this.stats.state = state\n    \n    if (previousState !== state) {\n      console.log(`Database connection state changed: ${previousState} -> ${state}`)\n    }\n  }\n\n  /**\n   * 更新延迟统计\n   */\n  private updateLatencyStats(latency: number): void {\n    this.stats.totalQueries++\n    \n    // 计算平均延迟（简单移动平均）\n    if (this.stats.avgLatency === 0) {\n      this.stats.avgLatency = latency\n    } else {\n      this.stats.avgLatency = (this.stats.avgLatency * 0.9) + (latency * 0.1)\n    }\n  }\n\n  /**\n   * 执行数据库查询（带错误处理和统计）\n   */\n  async executeQuery<T>(queryFn: (prisma: PrismaClient) => Promise<T>): Promise<T> {\n    if (!this.prisma || this.state !== ConnectionState.CONNECTED) {\n      throw new Error('Database not connected')\n    }\n\n    const startTime = Date.now()\n    \n    try {\n      const result = await queryFn(this.prisma)\n      \n      const latency = Date.now() - startTime\n      this.updateLatencyStats(latency)\n      \n      return result\n      \n    } catch (error) {\n      this.stats.failedQueries++\n      \n      console.error('Query execution failed:', error)\n      \n      // 发出详细的错误事件\n      this.emit('error', error)\n      this.emit('queryFailed', {\n        error,\n        query: queryFn.toString(),\n        timestamp: new Date(),\n        totalFailures: this.stats.failedQueries\n      })\n      \n      // 检查是否是连接相关错误\n      if (this.isConnectionError(error)) {\n        this.handleConnectionError(error instanceof Error ? error : new Error(String(error)))\n      }\n      \n      throw error\n    }\n  }\n\n  /**\n   * 检查是否是连接相关错误\n   */\n  private isConnectionError(error: any): boolean {\n    if (!error) {return false}\n    \n    const errorMessage = error.message || error.toString()\n    const connectionErrorPatterns = [\n      'connection',\n      'timeout',\n      'network',\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'ETIMEDOUT',\n      'socket',\n      'server closed'\n    ]\n    \n    return connectionErrorPatterns.some(pattern => \n      errorMessage.toLowerCase().includes(pattern.toLowerCase())\n    )\n  }\n\n  /**\n   * 获取连接统计信息\n   */\n  getStats(): ConnectionStats {\n    const uptime = this.stats.connectedAt \n      ? Date.now() - this.stats.connectedAt.getTime() \n      : 0\n    \n    return {\n      ...this.stats,\n      uptime\n    }\n  }\n\n  /**\n   * 更新连接池配置\n   */\n  async updateConfiguration(config: Partial<PoolConfiguration>): Promise<void> {\n    try {\n      console.log('Updating database configuration:', config)\n      this.config.pool = { ...this.config.pool, ...config }\n      \n      // 在实际实现中，这里应该重新初始化连接池\n      // 由于Prisma的限制，我们只能记录配置变更\n      this.emit('configurationUpdated', { config, timestamp: new Date() })\n      \n    } catch (error) {\n      console.error('Failed to update database configuration:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 更新恢复配置\n   */\n  updateRecoveryConfiguration(config: Partial<RecoveryConfiguration>): void {\n    this.config.reconnection = { ...this.config.reconnection, ...config }\n    console.log('Recovery configuration updated:', config)\n    this.emit('recoveryConfigurationUpdated', { config, timestamp: new Date() })\n  }\n\n  /**\n   * 获取当前配置\n   */\n  getConfiguration(): {\n    pool: Partial<ConnectionPoolConfig>\n    recovery: Partial<RecoveryConfiguration>\n  } {\n    return {\n      pool: { ...this.config.pool },\n      recovery: { ...this.config.reconnection }\n    }\n  }\n\n  /**\n   * 强制健康检查\n   */\n  async forceHealthCheck(): Promise<boolean> {\n    return await this.performHealthCheck()\n  }\n\n  /**\n   * 获取详细的连接信息\n   */\n  getDetailedStats(): ConnectionStats & {\n    configuration: {\n      pool: Partial<ConnectionPoolConfig>\n      recovery: Partial<RecoveryConfiguration>\n    }\n    performance: {\n      successRate: number\n      queriesPerSecond: number\n      avgResponseTime: number\n    }\n  } {\n    const basicStats = this.getStats()\n    const successRate = this.stats.totalQueries > 0 \n      ? ((this.stats.totalQueries - this.stats.failedQueries) / this.stats.totalQueries) * 100\n      : 100\n    \n    const uptimeSeconds = basicStats.uptime / 1000\n    const queriesPerSecond = uptimeSeconds > 0 ? this.stats.totalQueries / uptimeSeconds : 0\n    \n    return {\n      ...basicStats,\n      configuration: this.getConfiguration(),\n      performance: {\n        successRate,\n        queriesPerSecond,\n        avgResponseTime: basicStats.avgLatency\n      }\n    }\n  }\n\n  /**\n   * 获取Prisma客户端实例\n   */\n  getClient(): PrismaClient | null {\n    return this.prisma\n  }\n\n  /**\n   * 检查连接状态\n   */\n  isConnected(): boolean {\n    return this.state === ConnectionState.CONNECTED && this.prisma !== null\n  }\n\n  /**\n   * 获取当前连接状态\n   */\n  getState(): ConnectionState {\n    return this.state\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(\n    poolConfig?: Partial<ConnectionPoolConfig>,\n    reconnectionConfig?: Partial<ReconnectionConfig>,\n    healthCheckConfig?: Partial<HealthCheckConfig>\n  ): void {\n    if (poolConfig) {\n      this.config.pool = { ...this.config.pool, ...poolConfig }\n    }\n    \n    if (reconnectionConfig) {\n      this.config.reconnection = { ...this.config.reconnection, ...reconnectionConfig }\n    }\n    \n    if (healthCheckConfig) {\n      this.config.healthCheck = { ...this.config.healthCheck, ...healthCheckConfig }\n      \n      // 如果健康检查配置改变，重启健康检查\n      if (this.state === ConnectionState.CONNECTED) {\n        this.stopHealthCheck()\n        if (this.config.healthCheck.enabled) {\n          this.startHealthCheck()\n        }\n      }\n    }\n  }\n}\n\n// 初始化监控和优化模块\nif (process.env.DB_MONITORING_ENABLED === 'true') {\n  // 延迟导入以避免循环依赖\n  import('./monitoring').then(({ databaseMonitor }) => {\n    databaseMonitor.startMonitoring()\n    console.log('Database monitoring started')\n  }).catch(console.error)\n}\n\nif (process.env.DB_POOL_OPTIMIZATION_ENABLED === 'true') {\n  import('./pool-optimizer').then(({ poolOptimizer }) => {\n    poolOptimizer.startOptimization()\n    console.log('Database pool optimization started')\n  }).catch(console.error)\n}\n\nif (process.env.DB_ERROR_RECOVERY_ENABLED === 'true') {\n  import('./error-recovery').then(({ errorRecovery }) => {\n    errorRecovery.start()\n    console.log('Database error recovery started')\n  }).catch(console.error)\n}\n\n// 导出便捷方法\nexport const connectDatabase = () => enhancedDb.connect()\nexport const disconnectDatabase = () => enhancedDb.disconnect()\nexport const getDatabaseStats = () => enhancedDb.getStats()\nexport const isDatabaseConnected = () => enhancedDb.isConnected()\nexport const executeQuery = <T>(queryFn: (prisma: PrismaClient) => Promise<T>) => \n  enhancedDb.executeQuery(queryFn)\n\n// 默认导出增强的数据库连接\nexport default enhancedDb"],"version":3}