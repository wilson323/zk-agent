62698f54b4e61bf80af41bafab468958
"use strict";
/**
 * @file auth.test.ts
 * @description 认证相关API路由错误处理测试
 * @author ZK-Agent Team
 * @date 2025-01-27
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vitest_1 = require("vitest");
const server_1 = require("next/server");
const route_1 = require("@/app/api/auth/login/route");
const route_2 = require("@/app/api/auth/register/route");
const route_3 = require("@/app/api/auth/profile/route");
const route_4 = require("@/app/api/auth/change-password/route");
const global_error_handler_1 = require("@/lib/middleware/global-error-handler");
(0, vitest_1.describe)('Auth API Routes Error Handling', () => {
    let errorHandler;
    (0, vitest_1.beforeEach)(() => {
        errorHandler = global_error_handler_1.GlobalErrorHandler.getInstance();
        errorHandler.reset();
        vitest_1.vi.clearAllMocks();
    });
    (0, vitest_1.afterEach)(() => {
        errorHandler.reset();
    });
    (0, vitest_1.describe)('Login Route (/api/auth/login)', () => {
        (0, vitest_1.it)('should handle missing credentials error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({})
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle invalid credentials error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: 'invalid@example.com',
                    password: 'wrongpassword'
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('AUTHENTICATION_ERROR');
        });
        (0, vitest_1.it)('should handle malformed JSON error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: 'invalid json'
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle database connection error', async () => {
            // Mock database error
            vitest_1.vi.mock('@/lib/database/connection', () => ({
                default: {
                    user: {
                        findUnique: vitest_1.vi.fn().mockRejectedValue(new Error('Database connection failed'))
                    }
                }
            }));
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'password123'
                })
            });
            const response = await (0, route_1.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(500);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('DATABASE_ERROR');
        });
    });
    (0, vitest_1.describe)('Register Route (/api/auth/register)', () => {
        (0, vitest_1.it)('should handle duplicate email error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: 'existing@example.com',
                    password: 'password123',
                    name: 'Test User'
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)([400, 409]).toContain(response.status);
            (0, vitest_1.expect)(data.error).toBeDefined();
        });
        (0, vitest_1.it)('should handle weak password error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: '123',
                    name: 'Test User'
                })
            });
            const response = await (0, route_2.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
    });
    (0, vitest_1.describe)('Profile Route (/api/auth/profile)', () => {
        (0, vitest_1.it)('should handle unauthorized access error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/profile', {
                method: 'GET'
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('AUTHENTICATION_ERROR');
        });
        (0, vitest_1.it)('should handle invalid token error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/profile', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer invalid_token'
                }
            });
            const response = await (0, route_3.GET)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(401);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('AUTHENTICATION_ERROR');
        });
    });
    (0, vitest_1.describe)('Change Password Route (/api/auth/change-password)', () => {
        (0, vitest_1.it)('should handle missing current password error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/change-password', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    newPassword: 'newpassword123'
                })
            });
            const response = await (0, route_4.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
            (0, vitest_1.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, vitest_1.it)('should handle incorrect current password error', async () => {
            const request = new server_1.NextRequest('http://localhost:3000/api/auth/change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer valid_token'
                },
                body: JSON.stringify({
                    currentPassword: 'wrongpassword',
                    newPassword: 'newpassword123'
                })
            });
            const response = await (0, route_4.POST)(request);
            const data = await response.json();
            (0, vitest_1.expect)(response.status).toBe(400);
            (0, vitest_1.expect)(data.error).toBeDefined();
        });
    });
    (0, vitest_1.describe)('Error Handler Integration', () => {
        (0, vitest_1.it)('should track error statistics across auth routes', async () => {
            // Trigger multiple errors
            const requests = [
                new server_1.NextRequest('http://localhost:3000/api/auth/login', {
                    method: 'POST',
                    body: 'invalid json'
                }),
                new server_1.NextRequest('http://localhost:3000/api/auth/profile', {
                    method: 'GET'
                }),
                new server_1.NextRequest('http://localhost:3000/api/auth/register', {
                    method: 'POST',
                    body: JSON.stringify({})
                })
            ];
            for (const request of requests) {
                await (0, route_1.POST)(request).catch(() => { });
            }
            const stats = errorHandler.getErrorStats();
            (0, vitest_1.expect)(stats.errorCount).toBeGreaterThan(0);
        });
        (0, vitest_1.it)('should trigger circuit breaker on repeated failures', async () => {
            // Configure low threshold for testing
            const originalThreshold = errorHandler['errorThreshold'];
            errorHandler['errorThreshold'] = 2;
            try {
                // Trigger multiple errors to exceed threshold
                for (let i = 0; i < 3; i++) {
                    const request = new server_1.NextRequest('http://localhost:3000/api/auth/login', {
                        method: 'POST',
                        body: 'invalid json'
                    });
                    await (0, route_1.POST)(request).catch(() => { });
                }
                (0, vitest_1.expect)(errorHandler.isCircuitBreakerOpen()).toBe(true);
            }
            finally {
                errorHandler['errorThreshold'] = originalThreshold;
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,