f5df00fa9e43ad7ddf9ad805974373a8
"use strict";

/* istanbul ignore next */
function cov_28li1h9z0o() {
  var path = "E:\\zk-agent\\lib\\utils\\production-toolkit.ts";
  var hash = "5b25cde2c4d79098fbd672976b077782b14408f5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\lib\\utils\\production-toolkit.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 343
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "5": {
        start: {
          line: 8,
          column: 14
        },
        end: {
          line: 8,
          column: 28
        }
      },
      "6": {
        start: {
          line: 9,
          column: 17
        },
        end: {
          line: 9,
          column: 51
        }
      },
      "7": {
        start: {
          line: 10,
          column: 18
        },
        end: {
          line: 10,
          column: 53
        }
      },
      "8": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 42
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 23
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "12": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "13": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 23
        }
      },
      "14": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 25
        }
      },
      "15": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 36
        }
      },
      "16": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 32,
          column: 38
        }
      },
      "17": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 23
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "19": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 37
        }
      },
      "20": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 40,
          column: 40
        }
      },
      "21": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 33
        }
      },
      "22": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "23": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "24": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "25": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 63
        }
      },
      "26": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 41
        }
      },
      "27": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 43
        }
      },
      "28": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 43
        }
      },
      "29": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 81
        }
      },
      "30": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 44
        }
      },
      "31": {
        start: {
          line: 99,
          column: 24
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "32": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "33": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 96
        }
      },
      "34": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 84
        }
      },
      "35": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 69
        }
      },
      "36": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "37": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 31
        }
      },
      "38": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 83
        }
      },
      "39": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "40": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 79
        }
      },
      "41": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 41
        }
      },
      "42": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 44
        }
      },
      "43": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 37
        }
      },
      "44": {
        start: {
          line: 135,
          column: 0
        },
        end: {
          line: 135,
          column: 44
        }
      },
      "45": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "46": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 64
        }
      },
      "47": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "48": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 100
        }
      },
      "49": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "50": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "51": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 88
        }
      },
      "52": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 159,
          column: 57
        }
      },
      "53": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "54": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 23
        }
      },
      "55": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "56": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 44
        }
      },
      "57": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 170,
          column: 9
        }
      },
      "58": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 23
        }
      },
      "59": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "60": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "61": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 102
        }
      },
      "62": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 62
        }
      },
      "63": {
        start: {
          line: 175,
          column: 35
        },
        end: {
          line: 175,
          column: 60
        }
      },
      "64": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "65": {
        start: {
          line: 178,
          column: 30
        },
        end: {
          line: 178,
          column: 32
        }
      },
      "66": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "67": {
        start: {
          line: 180,
          column: 37
        },
        end: {
          line: 180,
          column: 61
        }
      },
      "68": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 69
        }
      },
      "69": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 29
        }
      },
      "70": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 185,
          column: 19
        }
      },
      "71": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "72": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 38
        }
      },
      "73": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "74": {
        start: {
          line: 193,
          column: 35
        },
        end: {
          line: 193,
          column: 50
        }
      },
      "75": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 113
        }
      },
      "76": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 24
        }
      },
      "77": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "78": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 77
        }
      },
      "79": {
        start: {
          line: 204,
          column: 26
        },
        end: {
          line: 208,
          column: 30
        }
      },
      "80": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "81": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 77
        }
      },
      "82": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 25
        }
      },
      "83": {
        start: {
          line: 215,
          column: 0
        },
        end: {
          line: 215,
          column: 40
        }
      },
      "84": {
        start: {
          line: 216,
          column: 0
        },
        end: {
          line: 216,
          column: 41
        }
      },
      "85": {
        start: {
          line: 217,
          column: 0
        },
        end: {
          line: 217,
          column: 39
        }
      },
      "86": {
        start: {
          line: 218,
          column: 0
        },
        end: {
          line: 224,
          column: 2
        }
      },
      "87": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 261,
          column: 10
        }
      },
      "88": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 231,
          column: 43
        }
      },
      "89": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 34
        }
      },
      "90": {
        start: {
          line: 233,
          column: 32
        },
        end: {
          line: 233,
          column: 53
        }
      },
      "91": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "92": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "93": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 49
        }
      },
      "94": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 105
        }
      },
      "95": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "96": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 34
        }
      },
      "97": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 58
        }
      },
      "98": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 28
        }
      },
      "99": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 49
        }
      },
      "100": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "101": {
        start: {
          line: 248,
          column: 31
        },
        end: {
          line: 248,
          column: 61
        }
      },
      "102": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 253,
          column: 19
        }
      },
      "103": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 258,
          column: 19
        }
      },
      "104": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 19
        }
      },
      "105": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 268,
          column: 10
        }
      },
      "106": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 19
        }
      },
      "107": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 275,
          column: 11
        }
      },
      "108": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 283,
          column: 11
        }
      },
      "109": {
        start: {
          line: 286,
          column: 0
        },
        end: {
          line: 286,
          column: 34
        }
      },
      "110": {
        start: {
          line: 287,
          column: 0
        },
        end: {
          line: 287,
          column: 38
        }
      },
      "111": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 293,
          column: 29
        }
      },
      "112": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 53
        }
      },
      "113": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 337,
          column: 10
        }
      },
      "114": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "115": {
        start: {
          line: 299,
          column: 31
        },
        end: {
          line: 299,
          column: 54
        }
      },
      "116": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "117": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 305,
          column: 23
        }
      },
      "118": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 309,
          column: 23
        }
      },
      "119": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 322,
          column: 17
        }
      },
      "120": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 317,
          column: 23
        }
      },
      "121": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 321,
          column: 23
        }
      },
      "122": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 36
        }
      },
      "123": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 23
        }
      },
      "124": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 331,
          column: 19
        }
      },
      "125": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 335,
          column: 19
        }
      },
      "126": {
        start: {
          line: 341,
          column: 21
        },
        end: {
          line: 341,
          column: 52
        }
      },
      "127": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 345,
          column: 9
        }
      },
      "128": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 55
        }
      },
      "129": {
        start: {
          line: 346,
          column: 8
        },
        end: {
          line: 346,
          column: 30
        }
      },
      "130": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 351,
          column: 9
        }
      },
      "131": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 350,
          column: 25
        }
      },
      "132": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 49
        }
      },
      "133": {
        start: {
          line: 355,
          column: 27
        },
        end: {
          line: 355,
          column: 72
        }
      },
      "134": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 356,
          column: 40
        }
      },
      "135": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 79
        }
      },
      "136": {
        start: {
          line: 362,
          column: 0
        },
        end: {
          line: 362,
          column: 42
        }
      },
      "137": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 391,
          column: 11
        }
      },
      "138": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 399,
          column: 10
        }
      },
      "139": {
        start: {
          line: 395,
          column: 30
        },
        end: {
          line: 395,
          column: 102
        }
      },
      "140": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 52
        }
      },
      "141": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 47
        }
      },
      "142": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 19
        }
      },
      "143": {
        start: {
          line: 402,
          column: 23
        },
        end: {
          line: 402,
          column: 53
        }
      },
      "144": {
        start: {
          line: 403,
          column: 8
        },
        end: {
          line: 410,
          column: 10
        }
      },
      "145": {
        start: {
          line: 404,
          column: 30
        },
        end: {
          line: 404,
          column: 60
        }
      },
      "146": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 408,
          column: 15
        }
      },
      "147": {
        start: {
          line: 406,
          column: 33
        },
        end: {
          line: 406,
          column: 75
        }
      },
      "148": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 407,
          column: 54
        }
      },
      "149": {
        start: {
          line: 409,
          column: 12
        },
        end: {
          line: 409,
          column: 19
        }
      },
      "150": {
        start: {
          line: 413,
          column: 0
        },
        end: {
          line: 413,
          column: 48
        }
      },
      "151": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 63
        }
      },
      "152": {
        start: {
          line: 419,
          column: 38
        },
        end: {
          line: 419,
          column: 61
        }
      },
      "153": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 437,
          column: 11
        }
      },
      "154": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "155": {
        start: {
          line: 423,
          column: 31
        },
        end: {
          line: 423,
          column: 32
        }
      },
      "156": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 435,
          column: 17
        }
      },
      "157": {
        start: {
          line: 425,
          column: 35
        },
        end: {
          line: 425,
          column: 45
        }
      },
      "158": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 426,
          column: 36
        }
      },
      "159": {
        start: {
          line: 427,
          column: 20
        },
        end: {
          line: 427,
          column: 27
        }
      },
      "160": {
        start: {
          line: 430,
          column: 20
        },
        end: {
          line: 433,
          column: 21
        }
      },
      "161": {
        start: {
          line: 431,
          column: 24
        },
        end: {
          line: 431,
          column: 38
        }
      },
      "162": {
        start: {
          line: 432,
          column: 24
        },
        end: {
          line: 432,
          column: 31
        }
      },
      "163": {
        start: {
          line: 434,
          column: 20
        },
        end: {
          line: 434,
          column: 54
        }
      },
      "164": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 444,
          column: 10
        }
      },
      "165": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 442,
          column: 34
        }
      },
      "166": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 69
        }
      },
      "167": {
        start: {
          line: 443,
          column: 39
        },
        end: {
          line: 443,
          column: 61
        }
      },
      "168": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 454,
          column: 10
        }
      },
      "169": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 453,
          column: 13
        }
      },
      "170": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 39
        }
      },
      "171": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 451,
          column: 34
        }
      },
      "172": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 60
        }
      },
      "173": {
        start: {
          line: 452,
          column: 33
        },
        end: {
          line: 452,
          column: 51
        }
      },
      "174": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 459,
          column: 9
        }
      },
      "175": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 29
        }
      },
      "176": {
        start: {
          line: 460,
          column: 18
        },
        end: {
          line: 460,
          column: 22
        }
      },
      "177": {
        start: {
          line: 461,
          column: 19
        },
        end: {
          line: 461,
          column: 46
        }
      },
      "178": {
        start: {
          line: 462,
          column: 22
        },
        end: {
          line: 462,
          column: 79
        }
      },
      "179": {
        start: {
          line: 463,
          column: 18
        },
        end: {
          line: 463,
          column: 59
        }
      },
      "180": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 464,
          column: 81
        }
      },
      "181": {
        start: {
          line: 467,
          column: 27
        },
        end: {
          line: 467,
          column: 55
        }
      },
      "182": {
        start: {
          line: 468,
          column: 8
        },
        end: {
          line: 468,
          column: 38
        }
      },
      "183": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 477,
          column: 9
        }
      },
      "184": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 25
        }
      },
      "185": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 24
        }
      },
      "186": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 25
        }
      },
      "187": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 480,
          column: 65
        }
      },
      "188": {
        start: {
          line: 483,
          column: 27
        },
        end: {
          line: 483,
          column: 80
        }
      },
      "189": {
        start: {
          line: 484,
          column: 21
        },
        end: {
          line: 484,
          column: 99
        }
      },
      "190": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 485,
          column: 39
        }
      },
      "191": {
        start: {
          line: 488,
          column: 29
        },
        end: {
          line: 488,
          column: 54
        }
      },
      "192": {
        start: {
          line: 489,
          column: 24
        },
        end: {
          line: 489,
          column: 96
        }
      },
      "193": {
        start: {
          line: 490,
          column: 8
        },
        end: {
          line: 490,
          column: 32
        }
      },
      "194": {
        start: {
          line: 493,
          column: 0
        },
        end: {
          line: 493,
          column: 44
        }
      },
      "195": {
        start: {
          line: 497,
          column: 0
        },
        end: {
          line: 504,
          column: 2
        }
      },
      "196": {
        start: {
          line: 505,
          column: 0
        },
        end: {
          line: 510,
          column: 2
        }
      },
      "197": {
        start: {
          line: 511,
          column: 0
        },
        end: {
          line: 516,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 32
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 31
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 37
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 18
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 45
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 49,
            column: 206
          },
          end: {
            line: 49,
            column: 207
          }
        },
        loc: {
          start: {
            line: 49,
            column: 250
          },
          end: {
            line: 57,
            column: 13
          }
        },
        line: 49
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 25
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 80
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 5
          }
        },
        loc: {
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 86
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 27
          },
          end: {
            line: 91,
            column: 5
          }
        },
        line: 89
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        loc: {
          start: {
            line: 92,
            column: 35
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 92
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 28
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 95
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 35
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 98
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 47
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 116
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 17
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 131
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 140,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        loc: {
          start: {
            line: 140,
            column: 33
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 140
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 186,
            column: 5
          }
        },
        line: 161
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 175,
            column: 27
          },
          end: {
            line: 175,
            column: 28
          }
        },
        loc: {
          start: {
            line: 175,
            column: 35
          },
          end: {
            line: 175,
            column: 60
          }
        },
        line: 175
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 187,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        loc: {
          start: {
            line: 187,
            column: 40
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 187
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 38
          },
          end: {
            line: 213,
            column: 5
          }
        },
        line: 199
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 229,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        loc: {
          start: {
            line: 229,
            column: 41
          },
          end: {
            line: 262,
            column: 5
          }
        },
        line: 229
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 230,
            column: 15
          },
          end: {
            line: 230,
            column: 16
          }
        },
        loc: {
          start: {
            line: 230,
            column: 35
          },
          end: {
            line: 261,
            column: 9
          }
        },
        line: 230
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 34
          },
          end: {
            line: 269,
            column: 5
          }
        },
        line: 263
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 264,
            column: 15
          },
          end: {
            line: 264,
            column: 16
          }
        },
        loc: {
          start: {
            line: 264,
            column: 35
          },
          end: {
            line: 268,
            column: 9
          }
        },
        line: 264
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 30
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 270
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 31
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 277
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 24
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 292
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 17
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 296
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 297,
            column: 15
          },
          end: {
            line: 297,
            column: 16
          }
        },
        loc: {
          start: {
            line: 297,
            column: 35
          },
          end: {
            line: 337,
            column: 9
          }
        },
        line: 297
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 339,
            column: 5
          }
        },
        loc: {
          start: {
            line: 339,
            column: 23
          },
          end: {
            line: 347,
            column: 5
          }
        },
        line: 339
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 27
          },
          end: {
            line: 353,
            column: 5
          }
        },
        line: 348
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 354,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        loc: {
          start: {
            line: 354,
            column: 42
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 354
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 30
          },
          end: {
            line: 360,
            column: 5
          }
        },
        line: 358
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 367,
            column: 4
          },
          end: {
            line: 367,
            column: 5
          }
        },
        loc: {
          start: {
            line: 367,
            column: 38
          },
          end: {
            line: 392,
            column: 5
          }
        },
        line: 367
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 393,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        loc: {
          start: {
            line: 393,
            column: 23
          },
          end: {
            line: 400,
            column: 5
          }
        },
        line: 393
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 394,
            column: 15
          },
          end: {
            line: 394,
            column: 16
          }
        },
        loc: {
          start: {
            line: 394,
            column: 35
          },
          end: {
            line: 399,
            column: 9
          }
        },
        line: 394
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 32
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 401
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 403,
            column: 15
          },
          end: {
            line: 403,
            column: 16
          }
        },
        loc: {
          start: {
            line: 403,
            column: 35
          },
          end: {
            line: 410,
            column: 9
          }
        },
        line: 403
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 405,
            column: 29
          },
          end: {
            line: 405,
            column: 30
          }
        },
        loc: {
          start: {
            line: 405,
            column: 35
          },
          end: {
            line: 408,
            column: 13
          }
        },
        line: 405
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 21
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 418
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 419,
            column: 27
          },
          end: {
            line: 419,
            column: 28
          }
        },
        loc: {
          start: {
            line: 419,
            column: 38
          },
          end: {
            line: 419,
            column: 61
          }
        },
        line: 419
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 421,
            column: 4
          },
          end: {
            line: 421,
            column: 5
          }
        },
        loc: {
          start: {
            line: 421,
            column: 52
          },
          end: {
            line: 438,
            column: 5
          }
        },
        line: 421
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 422,
            column: 27
          },
          end: {
            line: 422,
            column: 28
          }
        },
        loc: {
          start: {
            line: 422,
            column: 54
          },
          end: {
            line: 437,
            column: 9
          }
        },
        line: 422
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 439,
            column: 4
          },
          end: {
            line: 439,
            column: 5
          }
        },
        loc: {
          start: {
            line: 439,
            column: 32
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 439
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 441,
            column: 15
          },
          end: {
            line: 441,
            column: 16
          }
        },
        loc: {
          start: {
            line: 441,
            column: 28
          },
          end: {
            line: 444,
            column: 9
          }
        },
        line: 441
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 443,
            column: 33
          },
          end: {
            line: 443,
            column: 34
          }
        },
        loc: {
          start: {
            line: 443,
            column: 39
          },
          end: {
            line: 443,
            column: 61
          }
        },
        line: 443
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 33
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 446
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 448,
            column: 15
          },
          end: {
            line: 448,
            column: 16
          }
        },
        loc: {
          start: {
            line: 448,
            column: 28
          },
          end: {
            line: 454,
            column: 9
          }
        },
        line: 448
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 452,
            column: 27
          },
          end: {
            line: 452,
            column: 28
          }
        },
        loc: {
          start: {
            line: 452,
            column: 33
          },
          end: {
            line: 452,
            column: 51
          }
        },
        line: 452
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 44
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 456
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 31
          },
          end: {
            line: 469,
            column: 5
          }
        },
        line: 466
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 470,
            column: 5
          }
        },
        loc: {
          start: {
            line: 470,
            column: 27
          },
          end: {
            line: 478,
            column: 5
          }
        },
        line: 470
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 479,
            column: 4
          },
          end: {
            line: 479,
            column: 5
          }
        },
        loc: {
          start: {
            line: 479,
            column: 44
          },
          end: {
            line: 481,
            column: 5
          }
        },
        line: 479
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 482,
            column: 4
          },
          end: {
            line: 482,
            column: 5
          }
        },
        loc: {
          start: {
            line: 482,
            column: 40
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 482
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 487,
            column: 4
          },
          end: {
            line: 487,
            column: 5
          }
        },
        loc: {
          start: {
            line: 487,
            column: 52
          },
          end: {
            line: 491,
            column: 5
          }
        },
        line: 487
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 19
          },
          end: {
            line: 48,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 19
          },
          end: {
            line: 48,
            column: 40
          }
        }, {
          start: {
            line: 48,
            column: 44
          },
          end: {
            line: 48,
            column: 50
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 33
          },
          end: {
            line: 55,
            column: 53
          }
        }, {
          start: {
            line: 55,
            column: 57
          },
          end: {
            line: 55,
            column: 70
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 60,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 60,
            column: 48
          }
        }, {
          start: {
            line: 60,
            column: 52
          },
          end: {
            line: 60,
            column: 59
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 93,
            column: 56
          },
          end: {
            line: 93,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 56
          },
          end: {
            line: 93,
            column: 68
          }
        }, {
          start: {
            line: 93,
            column: 72
          },
          end: {
            line: 93,
            column: 77
          }
        }],
        line: 93
      },
      "8": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: 111,
            column: 13
          },
          end: {
            line: 113,
            column: 9
          }
        }],
        line: 108
      },
      "9": {
        loc: {
          start: {
            line: 117,
            column: 24
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 24
          },
          end: {
            line: 117,
            column: 50
          }
        }, {
          start: {
            line: 117,
            column: 54
          },
          end: {
            line: 122,
            column: 9
          }
        }],
        line: 117
      },
      "10": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 127,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "11": {
        loc: {
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "15": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 162,
            column: 24
          }
        }, {
          start: {
            line: 162,
            column: 28
          },
          end: {
            line: 162,
            column: 45
          }
        }],
        line: 162
      },
      "16": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 167,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "17": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 170,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "18": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 168,
            column: 35
          }
        }, {
          start: {
            line: 168,
            column: 39
          },
          end: {
            line: 168,
            column: 63
          }
        }],
        line: 168
      },
      "19": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "20": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "21": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "22": {
        loc: {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 192
      },
      "23": {
        loc: {
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 8
          },
          end: {
            line: 202,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "24": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 21
          }
        }, {
          start: {
            line: 200,
            column: 25
          },
          end: {
            line: 200,
            column: 53
          }
        }],
        line: 200
      },
      "25": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 211,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "26": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 209,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 209,
            column: 22
          }
        }, {
          start: {
            line: 209,
            column: 26
          },
          end: {
            line: 209,
            column: 43
          }
        }],
        line: 209
      },
      "27": {
        loc: {
          start: {
            line: 231,
            column: 24
          },
          end: {
            line: 231,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 24
          },
          end: {
            line: 231,
            column: 30
          }
        }, {
          start: {
            line: 231,
            column: 34
          },
          end: {
            line: 231,
            column: 43
          }
        }],
        line: 231
      },
      "28": {
        loc: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "29": {
        loc: {
          start: {
            line: 240,
            column: 28
          },
          end: {
            line: 240,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 28
          },
          end: {
            line: 240,
            column: 55
          }
        }, {
          start: {
            line: 240,
            column: 59
          },
          end: {
            line: 240,
            column: 105
          }
        }],
        line: 240
      },
      "30": {
        loc: {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "31": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "32": {
        loc: {
          start: {
            line: 256,
            column: 29
          },
          end: {
            line: 256,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 29
          },
          end: {
            line: 256,
            column: 43
          }
        }, {
          start: {
            line: 256,
            column: 47
          },
          end: {
            line: 256,
            column: 91
          }
        }],
        line: 256
      },
      "33": {
        loc: {
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "34": {
        loc: {
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 322,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 322,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 311
      },
      "35": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 345,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "36": {
        loc: {
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 12
          },
          end: {
            line: 343,
            column: 19
          }
        }, {
          start: {
            line: 343,
            column: 23
          },
          end: {
            line: 343,
            column: 45
          }
        }],
        line: 343
      },
      "37": {
        loc: {
          start: {
            line: 346,
            column: 15
          },
          end: {
            line: 346,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 15
          },
          end: {
            line: 346,
            column: 21
          }
        }, {
          start: {
            line: 346,
            column: 25
          },
          end: {
            line: 346,
            column: 29
          }
        }],
        line: 346
      },
      "38": {
        loc: {
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 351,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "39": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 349,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 349,
            column: 33
          }
        }, {
          start: {
            line: 349,
            column: 37
          },
          end: {
            line: 349,
            column: 78
          }
        }],
        line: 349
      },
      "40": {
        loc: {
          start: {
            line: 354,
            column: 26
          },
          end: {
            line: 354,
            column: 40
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 354,
            column: 35
          },
          end: {
            line: 354,
            column: 40
          }
        }],
        line: 354
      },
      "41": {
        loc: {
          start: {
            line: 383,
            column: 18
          },
          end: {
            line: 387,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 383,
            column: 38
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: 387,
            column: 16
          },
          end: {
            line: 387,
            column: 21
          }
        }],
        line: 383
      },
      "42": {
        loc: {
          start: {
            line: 389,
            column: 24
          },
          end: {
            line: 389,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 389,
            column: 50
          },
          end: {
            line: 389,
            column: 68
          }
        }, {
          start: {
            line: 389,
            column: 71
          },
          end: {
            line: 389,
            column: 76
          }
        }],
        line: 389
      },
      "43": {
        loc: {
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 395,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 395,
            column: 53
          }
        }, {
          start: {
            line: 395,
            column: 57
          },
          end: {
            line: 395,
            column: 102
          }
        }],
        line: 395
      },
      "44": {
        loc: {
          start: {
            line: 421,
            column: 21
          },
          end: {
            line: 421,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 421,
            column: 35
          },
          end: {
            line: 421,
            column: 36
          }
        }],
        line: 421
      },
      "45": {
        loc: {
          start: {
            line: 421,
            column: 38
          },
          end: {
            line: 421,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 421,
            column: 46
          },
          end: {
            line: 421,
            column: 50
          }
        }],
        line: 421
      },
      "46": {
        loc: {
          start: {
            line: 430,
            column: 20
          },
          end: {
            line: 433,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 20
          },
          end: {
            line: 433,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "47": {
        loc: {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 453,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "48": {
        loc: {
          start: {
            line: 456,
            column: 30
          },
          end: {
            line: 456,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 456,
            column: 41
          },
          end: {
            line: 456,
            column: 42
          }
        }],
        line: 456
      },
      "49": {
        loc: {
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "50": {
        loc: {
          start: {
            line: 461,
            column: 19
          },
          end: {
            line: 461,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 461,
            column: 34
          },
          end: {
            line: 461,
            column: 35
          }
        }, {
          start: {
            line: 461,
            column: 38
          },
          end: {
            line: 461,
            column: 46
          }
        }],
        line: 461
      },
      "51": {
        loc: {
          start: {
            line: 479,
            column: 31
          },
          end: {
            line: 479,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 479,
            column: 40
          },
          end: {
            line: 479,
            column: 42
          }
        }],
        line: 479
      },
      "52": {
        loc: {
          start: {
            line: 483,
            column: 27
          },
          end: {
            line: 483,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 483,
            column: 27
          },
          end: {
            line: 483,
            column: 31
          }
        }, {
          start: {
            line: 483,
            column: 35
          },
          end: {
            line: 483,
            column: 80
          }
        }],
        line: 483
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0],
      "45": [0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0],
      "52": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\lib\\utils\\production-toolkit.ts",
      mappings: ";;;;;;AAAA,mCAAiD;AACjD,6BAAwB;AACxB,oDAA4B;AAE5B,sDAA8B;AAC9B,2CAAyC;AAEzC,+EAA+E;AAC/E,kEAAkE;AAElE,+EAA+E;AAC/E,QAAQ;AACR,+EAA+E;AAE/E,MAAa,eAAgB,SAAQ,KAAK;IACxC,YAAY,OAAe,EAAS,KAAc;QAChD,KAAK,CAAC,OAAO,CAAC,CAAC;QADmB,UAAK,GAAL,KAAK,CAAS;QAEhD,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;IAChC,CAAC;CACF;AALD,0CAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACtC,YAAY,OAAe,EAAS,IAAa;QAC/C,KAAK,CAAC,OAAO,CAAC,CAAC;QADmB,SAAI,GAAJ,IAAI,CAAS;QAE/C,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;IAC9B,CAAC;CACF;AALD,sCAKC;AAED,MAAa,cAAe,SAAQ,KAAK;IACvC,YAAY,OAAe,EAAS,UAAmB;QACrD,KAAK,CAAC,OAAO,CAAC,CAAC;QADmB,eAAU,GAAV,UAAU,CAAS;QAErD,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;IAC/B,CAAC;CACF;AALD,wCAKC;AA2DD,+EAA+E;AAC/E,WAAW;AACX,+EAA+E;AAE/E,MAAa,gBAAgB;IAK3B;QAFQ,YAAO,GAAoC,IAAI,GAAG,EAAE,CAAC;QAG3D,IAAI,CAAC,MAAM,GAAG,iBAAO,CAAC,YAAY,CAAC;YACjC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,MAAM;YACtC,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,iBAAO,CAAC,MAAM,CAAC,SAAS,EAAE,EAC1B,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EACtC,iBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,EACrB,iBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE;gBAC/D,OAAO,IAAI,CAAC,SAAS,CAAC;oBACpB,SAAS;oBACT,KAAK;oBACL,OAAO;oBACP,GAAG,IAAI;oBACP,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa;iBACnD,CAAC,CAAC;YACL,CAAC,CAAC,CACH;YACD,WAAW,EAAE;gBACX,OAAO,EAAE,UAAU;gBACnB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,OAAO;aAC5C;YACD,UAAU,EAAE;gBACV,IAAI,iBAAO,CAAC,UAAU,CAAC,OAAO,CAAC;oBAC7B,MAAM,EAAE,iBAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,iBAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EACzB,iBAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CACxB;iBACF,CAAC;gBACF,IAAI,iBAAO,CAAC,UAAU,CAAC,IAAI,CAAC;oBAC1B,QAAQ,EAAE,gBAAgB;oBAC1B,KAAK,EAAE,OAAO;oBACd,OAAO,EAAE,OAAO,EAAE,MAAM;oBACxB,QAAQ,EAAE,CAAC;iBACZ,CAAC;gBACF,IAAI,iBAAO,CAAC,UAAU,CAAC,IAAI,CAAC;oBAC1B,QAAQ,EAAE,mBAAmB;oBAC7B,OAAO,EAAE,OAAO,EAAE,MAAM;oBACxB,QAAQ,EAAE,CAAC;iBACZ,CAAC;aACH;SACF,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YAC/B,gBAAgB,CAAC,QAAQ,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACrD,CAAC;QACD,OAAO,gBAAgB,CAAC,QAAQ,CAAC;IACnC,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,OAAoB;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAEM,IAAI,CAAC,OAAe,EAAE,OAAoB;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,KAAa,EAAE,OAAoB;QAC/D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,IAAI,KAAK,EAAE,CAAC,CAAC;IAC3E,CAAC;IAEM,KAAK,CAAC,OAAe,EAAE,OAAoB;QAChD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAEM,UAAU,CAAC,GAAY,EAAE,GAAa,EAAE,QAAgB;QAC7D,MAAM,OAAO,GAAe;YAC1B,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,cAAc,CAAW;YAChD,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,GAAG,EAAE,GAAG,CAAC,GAAG;YACZ,EAAE,EAAE,GAAG,CAAC,EAAE;YACV,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;YAChC,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,QAAQ;SACT,CAAC;QAEF,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,UAAU,MAAM,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QACtF,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,MAAM,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC;QAC1E,CAAC;QAED,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC;IAC/D,CAAC;IAEO,aAAa,CAAC,QAAgB,EAAE,QAAgB,EAAE,OAAgB;QACxE,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI;YAC5C,YAAY,EAAE,CAAC;YACf,mBAAmB,EAAE,CAAC;YACtB,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,IAAI,IAAI,EAAE;SACxB,CAAC;QAEF,OAAO,CAAC,YAAY,EAAE,CAAC;QACvB,OAAO,CAAC,mBAAmB,GAAG,CAAC,OAAO,CAAC,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC3E,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,SAAS,GAAG,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC;QACrE,CAAC;QACD,OAAO,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;QAEjC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;CACF;AAhHD,4CAgHC;AAED,+EAA+E;AAC/E,WAAW;AACX,+EAA+E;AAE/E,MAAa,cAAc;IAWlB,MAAM,CAAC,cAAc,CAAC,KAAa;QACxC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,MAAM,IAAI,eAAe,CAAC,wBAAwB,CAAC,CAAC;QACtD,CAAC;QAED,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC1C,MAAM,IAAI,eAAe,CAAC,oCAAoC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;QAC1F,CAAC;QAED,SAAS;QACT,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC9C,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBACxB,MAAM,IAAI,aAAa,CAAC,8CAA8C,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;QAED,sDAAsD;QACtD,OAAO,KAAK;aACT,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC;aAC3C,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC;aAC3C,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC;aAC3C,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;aAC7B,OAAO,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB;IAC1E,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,GAAQ;QACnC,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;YACtC,OAAO,GAAG,CAAC;QACb,CAAC;QAED,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE,CAAC;YACxD,OAAO,GAAG,CAAC;QACb,CAAC;QAED,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YACvB,IAAI,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACvC,MAAM,IAAI,eAAe,CAAC,mCAAmC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;YACxF,CAAC;YACD,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;QACpD,CAAC;QAED,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YAC5B,MAAM,SAAS,GAAQ,EAAE,CAAC;YAC1B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC/C,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBAC9C,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACvD,CAAC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,cAAc,CAAI,IAAa,EAAE,MAAsB;QACnE,IAAI,CAAC;YACH,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,OAAC,CAAC,QAAQ,EAAE,CAAC;gBAChC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,IAAI,eAAe,CACvB,sBAAsB,UAAU,CAAC,OAAO,EAAE,EAC1C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAC1B,CAAC;YACJ,CAAC;YACD,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,QAAgB;QAC7C,IAAI,CAAC,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;YAC9C,MAAM,IAAI,eAAe,CAAC,qCAAqC,CAAC,CAAC;QACnE,CAAC;QAED,WAAW;QACX,MAAM,SAAS,GAAG,QAAQ;aACvB,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;aAC7B,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;aACtB,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;aACvB,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAErB,IAAI,CAAC,SAAS,IAAI,SAAS,KAAK,GAAG,EAAE,CAAC;YACpC,MAAM,IAAI,eAAe,CAAC,qCAAqC,CAAC,CAAC;QACnE,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;;AApGH,wCAqGC;AApGyB,gCAAiB,GAAG,KAAK,CAAC;AAC1B,+BAAgB,GAAG,IAAI,CAAC;AACxB,iCAAkB,GAAG;IAC3C,8BAA8B;IAC9B,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,aAAa;CACd,CAAC;AA8FJ,+EAA+E;AAC/E,QAAQ;AACR,+EAA+E;AAE/E,MAAa,WAAW;IAGf,MAAM,CAAC,qBAAqB,CAAC,MAAuB;QACzD,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACzD,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,IAAI,SAAS,CAAC;YAChC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACvB,MAAM,WAAW,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;YAE1C,oBAAoB;YACpB,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;gBAClD,IAAI,CAAC,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC;oBACtB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAE9F,IAAI,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC;gBAC5B,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC;gBAClB,OAAO,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC5C,CAAC;YAED,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAErC,IAAI,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC;gBAC/B,MAAM,MAAM,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC;gBAC9C,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE;oBACjC,EAAE,EAAE,GAAG,CAAC,EAAE;oBACV,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;oBAChC,GAAG,EAAE,GAAG,CAAC,GAAG;iBACb,CAAC,CAAC;gBAEH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,qBAAqB;oBAC5B,OAAO,EAAE,MAAM,CAAC,OAAO,IAAI,4CAA4C;oBACvE,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;iBACxD,CAAC,CAAC;YACL,CAAC;YAED,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,MAAsB;QACjD,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACzD,oDAAoD;YACpD,2DAA2D;YAC3D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,gBAAgB;QAC5B,OAAO,IAAI,CAAC,qBAAqB,CAAC;YAChC,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;YACvC,GAAG,EAAE,GAAG,EAAE,6CAA6C;YACvD,OAAO,EAAE,gDAAgD;SAC1D,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,iBAAiB;QAC7B,OAAO,IAAI,CAAC,qBAAqB,CAAC;YAChC,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;YACvC,GAAG,EAAE,CAAC,EAAE,gDAAgD;YACxD,OAAO,EAAE,2DAA2D;YACpE,sBAAsB,EAAE,IAAI;SAC7B,CAAC,CAAC;IACL,CAAC;;AApEH,kCAqEC;AApEgB,yBAAa,GAAG,IAAI,GAAG,EAAgD,CAAC;AAsEzF,+EAA+E;AAC/E,WAAW;AACX,+EAA+E;AAE/E,MAAa,eAAe;IAI1B,YAAY,MAAoB;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC;IAEM,UAAU;QACf,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACzD,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBAEvC,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;wBAClC,EAAE,EAAE,GAAG,CAAC,EAAE;wBACV,GAAG,EAAE,GAAG,CAAC,GAAG;wBACZ,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;qBACjC,CAAC,CAAC;oBACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,KAAK,EAAE,cAAc;wBACrB,OAAO,EAAE,qBAAqB;qBAC/B,CAAC,CAAC;gBACL,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;oBACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE;wBAClC,EAAE,EAAE,GAAG,CAAC,EAAE;wBACV,GAAG,EAAE,GAAG,CAAC,GAAG;wBACZ,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC;wBAChC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;qBAC7C,CAAC,CAAC;oBACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;wBAC1B,KAAK,EAAE,cAAc;wBACrB,OAAO,EAAE,iBAAiB;qBAC3B,CAAC,CAAC;gBACL,CAAC;gBAED,kBAAkB;gBACjB,GAAW,CAAC,MAAM,GAAG,MAAM,CAAC;gBAC7B,IAAI,EAAE,CAAC;YACT,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAc,EAAE;oBAC5D,EAAE,EAAE,GAAG,CAAC,EAAE;oBACV,GAAG,EAAE,GAAG,CAAC,GAAG;iBACb,CAAC,CAAC;gBACH,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;oBAC1B,KAAK,EAAE,uBAAuB;oBAC9B,OAAO,EAAE,2BAA2B;iBACrC,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IAEO,aAAa,CAAC,GAAY;QAChC,QAAQ;QACR,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAE7C,iBAAiB;QACjB,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YACtC,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAW,CAAC;QACvD,CAAC;QAED,OAAO,MAAM,IAAI,IAAI,CAAC;IACxB,CAAC;IAEO,cAAc,CAAC,MAAc;QACnC,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;YACvE,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,SAAiB,KAAK;QACjD,MAAM,UAAU,GAAG,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACnD,OAAO,GAAG,MAAM,GAAG,UAAU,EAAE,CAAC;IAClC,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,MAAc;QACrC,OAAO,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;CACF;AAnFD,0CAmFC;AAED,+EAA+E;AAC/E,QAAQ;AACR,+EAA+E;AAE/E,MAAa,kBAAkB;IACtB,MAAM,CAAC,kBAAkB,CAAC,MAAsB;QACrD,OAAO,IAAA,gBAAM,EAAC;YACZ,qBAAqB,EAAE;gBACrB,UAAU,EAAE;oBACV,UAAU,EAAE,CAAC,QAAQ,CAAC;oBACtB,QAAQ,EAAE,CAAC,QAAQ,EAAE,iBAAiB,CAAC;oBACvC,SAAS,EAAE,CAAC,QAAQ,CAAC;oBACrB,MAAM,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC;oBACrC,UAAU,EAAE,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,cAAc,CAAC;oBAChD,OAAO,EAAE,CAAC,QAAQ,CAAC;oBACnB,SAAS,EAAE,CAAC,QAAQ,CAAC;oBACrB,QAAQ,EAAE,CAAC,QAAQ,CAAC;oBACpB,QAAQ,EAAE,CAAC,QAAQ,CAAC;iBACrB;aACF;YACD,yBAAyB,EAAE,KAAK;YAChC,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBACxB,MAAM,EAAE,QAAQ;gBAChB,iBAAiB,EAAE,IAAI;gBACvB,OAAO,EAAE,IAAI;aACd,CAAC,CAAC,CAAC,KAAK;YACT,OAAO,EAAE,MAAM,CAAC,wBAAwB;YACxC,UAAU,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,KAAK;YAChE,SAAS,EAAE,MAAM,CAAC,SAAS;SAC5B,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,SAAS;QACrB,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACzD,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC7E,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;YACxC,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;YACnC,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,kBAAkB;QAC9B,MAAM,MAAM,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC;QAE9C,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YACzD,MAAM,SAAS,GAAG,wBAAW,CAAC,GAAG,EAAE,CAAC;YAEpC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;gBACpB,MAAM,QAAQ,GAAG,wBAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBAC/C,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;YAEH,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;IACJ,CAAC;CACF;AAnDD,gDAmDC;AAED,+EAA+E;AAC/E,OAAO;AACP,+EAA+E;AAE/E,MAAa,gBAAgB;IACpB,MAAM,CAAC,KAAK,CAAC,EAAU;QAC5B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,MAAM,CAAC,KAAK,CACjB,EAAoB,EACpB,cAAsB,CAAC,EACvB,QAAgB,IAAI;QAEpB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,IAAI,WAAW,EAAE,OAAO,EAAE,EAAE,CAAC;gBACxD,IAAI,CAAC;oBACH,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;oBAC1B,OAAO,CAAC,MAAM,CAAC,CAAC;oBAChB,OAAO;gBACT,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,OAAO,KAAK,WAAW,EAAE,CAAC;wBAC5B,MAAM,CAAC,KAAK,CAAC,CAAC;wBACd,OAAO;oBACT,CAAC;oBACD,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC;gBACpC,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,QAAQ,CACpB,IAAO,EACP,IAAY;QAEZ,IAAI,OAAuB,CAAC;QAC5B,OAAO,CAAC,GAAG,IAAmB,EAAE,EAAE;YAChC,YAAY,CAAC,OAAO,CAAC,CAAC;YACtB,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,QAAQ,CACpB,IAAO,EACP,KAAa;QAEb,IAAI,UAAmB,CAAC;QACxB,OAAO,CAAC,GAAG,IAAmB,EAAE,EAAE;YAChC,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvB,UAAU,GAAG,IAAI,CAAC;gBAClB,UAAU,CAAC,GAAG,EAAE,CAAC,UAAU,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,KAAa,EAAE,WAAmB,CAAC;QAC3D,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAAA,OAAO,SAAS,CAAC;QAAA,CAAC;QAEpC,MAAM,CAAC,GAAG,IAAI,CAAC;QACf,MAAM,EAAE,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;QACvC,MAAM,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAExE,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEpD,OAAO,UAAU,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3E,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,KAAa;QACtC,MAAM,UAAU,GAAG,4BAA4B,CAAC;QAChD,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAEM,MAAM,CAAC,UAAU,CAAC,GAAW;QAClC,IAAI,CAAC;YACH,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,mBAAmB,CAAC,SAAiB,EAAE;QACnD,OAAO,IAAA,oBAAW,EAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,QAAgB,EAAE,IAAa;QACxD,MAAM,UAAU,GAAG,IAAI,IAAI,IAAA,oBAAW,EAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC3D,MAAM,IAAI,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC9E,OAAO,GAAG,UAAU,IAAI,IAAI,EAAE,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,cAAc,CAAC,QAAgB,EAAE,cAAsB;QACnE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/C,MAAM,OAAO,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3E,OAAO,IAAI,KAAK,OAAO,CAAC;IAC1B,CAAC;CACF;AA7FD,4CA6FC;AAED,+EAA+E;AAC/E,SAAS;AACT,+EAA+E;AAElE,QAAA,uBAAuB,GAAmB;IACrD,SAAS,EAAE,IAAI;IACf,UAAU,EAAE,IAAI;IAChB,UAAU,EAAE,IAAI;IAChB,wBAAwB,EAAE,IAAI;IAC9B,gBAAgB,EAAE,IAAI;IACtB,cAAc,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;CACrD,CAAC;AAEW,QAAA,yBAAyB,GAAoB;IACxD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;IACvC,GAAG,EAAE,GAAG;IACR,eAAe,EAAE,IAAI;IACrB,aAAa,EAAE,KAAK;CACrB,CAAC;AAEW,QAAA,wBAAwB,GAAmB;IACtD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,aAAa;IACvC,UAAU,EAAE,EAAE;IACd,OAAO,EAAE,GAAG;IACZ,UAAU,EAAE,KAAK;CAClB,CAAC",
      names: [],
      sources: ["E:\\zk-agent\\lib\\utils\\production-toolkit.ts"],
      sourcesContent: ["import { createHash, randomBytes } from 'crypto';\nimport { z } from 'zod';\nimport helmet from 'helmet';\nimport { Request, Response, NextFunction } from 'express';\nimport winston from 'winston';\nimport { performance } from 'perf_hooks';\n\n// Note: DOMPurify, express-rate-limit, and express-slow-down are not available\n// These features will be implemented using alternative approaches\n\n// ============================================================================\n// \u9519\u8BEF\u7C7B\u5B9A\u4E49\n// ============================================================================\n\nexport class ValidationError extends Error {\n  constructor(message: string, public field?: string) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\nexport class SecurityError extends Error {\n  constructor(message: string, public code?: string) {\n    super(message);\n    this.name = 'SecurityError';\n  }\n}\n\nexport class RateLimitError extends Error {\n  constructor(message: string, public retryAfter?: number) {\n    super(message);\n    this.name = 'RateLimitError';\n  }\n}\n\n// ============================================================================\n// \u7C7B\u578B\u5B9A\u4E49\n// ============================================================================\n\nexport interface LogContext {\n  userId?: string;\n  requestId?: string;\n  ip?: string;\n  userAgent?: string;\n  method?: string;\n  url?: string;\n  statusCode?: number;\n  duration?: number;\n  error?: Error;\n  [key: string]: any;\n}\n\nexport interface SecurityConfig {\n  enableXSS: boolean;\n  enableCSRF: boolean;\n  enableHSTS: boolean;\n  enableContentTypeNoSniff: boolean;\n  enableFrameGuard: boolean;\n  trustedDomains: string[];\n}\n\nexport interface RateLimitConfig {\n  windowMs: number;\n  max: number;\n  message?: string;\n  standardHeaders?: boolean;\n  legacyHeaders?: boolean;\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n}\n\nexport interface SlowDownConfig {\n  windowMs: number;\n  delayAfter: number;\n  delayMs: number;\n  maxDelayMs?: number;\n}\n\nexport interface ApiKeyConfig {\n  headerName: string;\n  queryParam?: string;\n  validKeys: Set<string>;\n  keyPrefix?: string;\n}\n\nexport interface PerformanceMetrics {\n  requestCount: number;\n  averageResponseTime: number;\n  errorRate: number;\n  lastUpdated: Date;\n}\n\n// ============================================================================\n// \u751F\u4EA7\u7EA7\u65E5\u5FD7\u8BB0\u5F55\u5668\n// ============================================================================\n\nexport class ProductionLogger {\n  private static instance: ProductionLogger;\n  private logger: winston.Logger;\n  private metrics: Map<string, PerformanceMetrics> = new Map();\n\n  private constructor() {\n    this.logger = winston.createLogger({\n      level: process.env.LOG_LEVEL || 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json(),\n        winston.format.printf(({ timestamp, level, message, ...meta }) => {\n          return JSON.stringify({\n            timestamp,\n            level,\n            message,\n            ...meta,\n            environment: process.env.NODE_ENV || 'development'\n          });\n        })\n      ),\n      defaultMeta: {\n        service: 'zk-agent',\n        version: process.env.APP_VERSION || '1.0.0'\n      },\n      transports: [\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        }),\n        new winston.transports.File({\n          filename: 'logs/error.log',\n          level: 'error',\n          maxsize: 5242880, // 5MB\n          maxFiles: 5\n        }),\n        new winston.transports.File({\n          filename: 'logs/combined.log',\n          maxsize: 5242880, // 5MB\n          maxFiles: 5\n        })\n      ]\n    });\n  }\n\n  public static getInstance(): ProductionLogger {\n    if (!ProductionLogger.instance) {\n      ProductionLogger.instance = new ProductionLogger();\n    }\n    return ProductionLogger.instance;\n  }\n\n  public info(message: string, context?: LogContext): void {\n    this.logger.info(message, context);\n  }\n\n  public warn(message: string, context?: LogContext): void {\n    this.logger.warn(message, context);\n  }\n\n  public error(message: string, error?: Error, context?: LogContext): void {\n    this.logger.error(message, { ...context, error: error?.stack || error });\n  }\n\n  public debug(message: string, context?: LogContext): void {\n    this.logger.debug(message, context);\n  }\n\n  public logRequest(req: Request, res: Response, duration: number): void {\n    const context: LogContext = {\n      requestId: req.headers['x-request-id'] as string,\n      method: req.method,\n      url: req.url,\n      ip: req.ip,\n      userAgent: req.get('User-Agent'),\n      statusCode: res.statusCode,\n      duration\n    };\n\n    if (res.statusCode >= 400) {\n      this.error(`HTTP ${res.statusCode} - ${req.method} ${req.url}`, undefined, context);\n    } else {\n      this.info(`HTTP ${res.statusCode} - ${req.method} ${req.url}`, context);\n    }\n\n    this.updateMetrics(req.url, duration, res.statusCode >= 400);\n  }\n\n  private updateMetrics(endpoint: string, duration: number, isError: boolean): void {\n    const current = this.metrics.get(endpoint) || {\n      requestCount: 0,\n      averageResponseTime: 0,\n      errorRate: 0,\n      lastUpdated: new Date()\n    };\n\n    current.requestCount++;\n    current.averageResponseTime = (current.averageResponseTime + duration) / 2;\n    if (isError) {\n      current.errorRate = (current.errorRate + 1) / current.requestCount;\n    }\n    current.lastUpdated = new Date();\n\n    this.metrics.set(endpoint, current);\n  }\n\n  public getMetrics(): Map<string, PerformanceMetrics> {\n    return new Map(this.metrics);\n  }\n}\n\n// ============================================================================\n// \u8F93\u5165\u6E05\u7406\u548C\u9A8C\u8BC1\u5668\n// ============================================================================\n\nexport class InputSanitizer {\n  private static readonly MAX_STRING_LENGTH = 10000;\n  private static readonly MAX_ARRAY_LENGTH = 1000;\n  private static readonly DANGEROUS_PATTERNS = [\n    /<script[^>]*>.*?<\\/script>/gi,\n    /javascript:/gi,\n    /on\\w+\\s*=/gi,\n    /data:text\\/html/gi,\n    /vbscript:/gi\n  ];\n\n  public static sanitizeString(input: string): string {\n    if (typeof input !== 'string') {\n      throw new ValidationError('Input must be a string');\n    }\n\n    if (input.length > this.MAX_STRING_LENGTH) {\n      throw new ValidationError(`String length exceeds maximum of ${this.MAX_STRING_LENGTH}`);\n    }\n\n    // \u68C0\u67E5\u5371\u9669\u6A21\u5F0F\n    for (const pattern of this.DANGEROUS_PATTERNS) {\n      if (pattern.test(input)) {\n        throw new SecurityError('Input contains potentially dangerous content');\n      }\n    }\n\n    // Simple HTML sanitization (alternative to DOMPurify)\n    return input\n      .replace(/<script[^>]*>.*?<\\/script>/gi, '')\n      .replace(/<iframe[^>]*>.*?<\\/iframe>/gi, '')\n      .replace(/<object[^>]*>.*?<\\/object>/gi, '')\n      .replace(/<embed[^>]*>/gi, '')\n      .replace(/on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, ''); // Remove event handlers\n  }\n\n  public static sanitizeObject(obj: any): any {\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    if (typeof obj === 'string') {\n      return this.sanitizeString(obj);\n    }\n\n    if (typeof obj === 'number' || typeof obj === 'boolean') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      if (obj.length > this.MAX_ARRAY_LENGTH) {\n        throw new ValidationError(`Array length exceeds maximum of ${this.MAX_ARRAY_LENGTH}`);\n      }\n      return obj.map(item => this.sanitizeObject(item));\n    }\n\n    if (typeof obj === 'object') {\n      const sanitized: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        const sanitizedKey = this.sanitizeString(key);\n        sanitized[sanitizedKey] = this.sanitizeObject(value);\n      }\n      return sanitized;\n    }\n\n    return obj;\n  }\n\n  public static validateSchema<T>(data: unknown, schema: z.ZodSchema<T>): T {\n    try {\n      return schema.parse(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const firstError = error.errors[0];\n        throw new ValidationError(\n          `Validation failed: ${firstError.message}`,\n          firstError.path.join('.')\n        );\n      }\n      throw error;\n    }\n  }\n\n  public static sanitizeFilename(filename: string): string {\n    if (!filename || typeof filename !== 'string') {\n      throw new ValidationError('Filename must be a non-empty string');\n    }\n\n    // \u79FB\u9664\u8DEF\u5F84\u904D\u5386\u5B57\u7B26\n    const sanitized = filename\n      .replace(/[\\\\/:*?\"<>|]/g, '_')\n      .replace(/\\.\\.+/g, '_')\n      .replace(/^\\.|\\.$/, '_')\n      .substring(0, 255);\n\n    if (!sanitized || sanitized === '_') {\n      throw new ValidationError('Invalid filename after sanitization');\n    }\n\n    return sanitized;\n  }\n}\n\n// ============================================================================\n// \u901F\u7387\u9650\u5236\u5668\n// ============================================================================\n\nexport class RateLimiter {\n  private static requestCounts = new Map<string, { count: number; resetTime: number }>();\n\n  public static createStandardLimiter(config: RateLimitConfig) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const key = req.ip || 'unknown';\n      const now = Date.now();\n      const windowStart = now - config.windowMs;\n      \n      // Clean old entries\n      for (const [k, v] of this.requestCounts.entries()) {\n        if (v.resetTime < now) {\n          this.requestCounts.delete(k);\n        }\n      }\n      \n      const current = this.requestCounts.get(key) || { count: 0, resetTime: now + config.windowMs };\n      \n      if (current.resetTime < now) {\n        current.count = 0;\n        current.resetTime = now + config.windowMs;\n      }\n      \n      current.count++;\n      this.requestCounts.set(key, current);\n      \n      if (current.count > config.max) {\n        const logger = ProductionLogger.getInstance();\n        logger.warn('Rate limit exceeded', {\n          ip: req.ip,\n          userAgent: req.get('User-Agent'),\n          url: req.url\n        });\n        \n        return res.status(429).json({\n          error: 'Rate limit exceeded',\n          message: config.message || 'Too many requests, please try again later.',\n          retryAfter: Math.ceil((current.resetTime - now) / 1000)\n        });\n      }\n      \n      next();\n    };\n  }\n\n  public static createSlowDown(config: SlowDownConfig) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      // Simple implementation - just pass through for now\n      // In a real implementation, you would add delay logic here\n      next();\n    };\n  }\n\n  public static createApiLimiter() {\n    return this.createStandardLimiter({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 100, // limit each IP to 100 requests per windowMs\n      message: 'Too many API requests, please try again later.'\n    });\n  }\n\n  public static createAuthLimiter() {\n    return this.createStandardLimiter({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 5, // limit each IP to 5 auth requests per windowMs\n      message: 'Too many authentication attempts, please try again later.',\n      skipSuccessfulRequests: true\n    });\n  }\n}\n\n// ============================================================================\n// API\u5BC6\u94A5\u9A8C\u8BC1\u5668\n// ============================================================================\n\nexport class ApiKeyValidator {\n  private config: ApiKeyConfig;\n  private logger: ProductionLogger;\n\n  constructor(config: ApiKeyConfig) {\n    this.config = config;\n    this.logger = ProductionLogger.getInstance();\n  }\n\n  public middleware() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      try {\n        const apiKey = this.extractApiKey(req);\n        \n        if (!apiKey) {\n          this.logger.warn('Missing API key', {\n            ip: req.ip,\n            url: req.url,\n            userAgent: req.get('User-Agent')\n          });\n          return res.status(401).json({\n            error: 'Unauthorized',\n            message: 'API key is required'\n          });\n        }\n\n        if (!this.validateApiKey(apiKey)) {\n          this.logger.warn('Invalid API key', {\n            ip: req.ip,\n            url: req.url,\n            userAgent: req.get('User-Agent'),\n            apiKeyPrefix: apiKey.substring(0, 8) + '...'\n          });\n          return res.status(401).json({\n            error: 'Unauthorized',\n            message: 'Invalid API key'\n          });\n        }\n\n        // \u5C06API\u5BC6\u94A5\u4FE1\u606F\u6DFB\u52A0\u5230\u8BF7\u6C42\u5BF9\u8C61\n        (req as any).apiKey = apiKey;\n        next();\n      } catch (error) {\n        this.logger.error('API key validation error', error as Error, {\n          ip: req.ip,\n          url: req.url\n        });\n        return res.status(500).json({\n          error: 'Internal Server Error',\n          message: 'API key validation failed'\n        });\n      }\n    };\n  }\n\n  private extractApiKey(req: Request): string | null {\n    // \u4ECE\u5934\u90E8\u83B7\u53D6\n    let apiKey = req.get(this.config.headerName);\n    \n    // \u4ECE\u67E5\u8BE2\u53C2\u6570\u83B7\u53D6\uFF08\u5982\u679C\u914D\u7F6E\u4E86\uFF09\n    if (!apiKey && this.config.queryParam) {\n      apiKey = req.query[this.config.queryParam] as string;\n    }\n\n    return apiKey || null;\n  }\n\n  private validateApiKey(apiKey: string): boolean {\n    if (this.config.keyPrefix && !apiKey.startsWith(this.config.keyPrefix)) {\n      return false;\n    }\n\n    return this.config.validKeys.has(apiKey);\n  }\n\n  public static generateApiKey(prefix: string = 'zk_'): string {\n    const randomPart = randomBytes(32).toString('hex');\n    return `${prefix}${randomPart}`;\n  }\n\n  public static hashApiKey(apiKey: string): string {\n    return createHash('sha256').update(apiKey).digest('hex');\n  }\n}\n\n// ============================================================================\n// \u5B89\u5168\u4E2D\u95F4\u4EF6\n// ============================================================================\n\nexport class SecurityMiddleware {\n  public static createHelmetConfig(config: SecurityConfig) {\n    return helmet({\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n          scriptSrc: [\"'self'\"],\n          imgSrc: [\"'self'\", 'data:', 'https:'],\n          connectSrc: [\"'self'\", ...config.trustedDomains],\n          fontSrc: [\"'self'\"],\n          objectSrc: [\"'none'\"],\n          mediaSrc: [\"'self'\"],\n          frameSrc: [\"'none'\"]\n        }\n      },\n      crossOriginEmbedderPolicy: false,\n      hsts: config.enableHSTS ? {\n        maxAge: 31536000,\n        includeSubDomains: true,\n        preload: true\n      } : false,\n      noSniff: config.enableContentTypeNoSniff,\n      frameguard: config.enableFrameGuard ? { action: 'deny' } : false,\n      xssFilter: config.enableXSS\n    });\n  }\n\n  public static requestId() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const requestId = req.get('X-Request-ID') || randomBytes(16).toString('hex');\n      req.headers['x-request-id'] = requestId;\n      res.set('X-Request-ID', requestId);\n      next();\n    };\n  }\n\n  public static performanceMonitor() {\n    const logger = ProductionLogger.getInstance();\n    \n    return (req: Request, res: Response, next: NextFunction) => {\n      const startTime = performance.now();\n      \n      res.on('finish', () => {\n        const duration = performance.now() - startTime;\n        logger.logRequest(req, res, duration);\n      });\n      \n      next();\n    };\n  }\n}\n\n// ============================================================================\n// \u5DE5\u5177\u51FD\u6570\n// ============================================================================\n\nexport class UtilityFunctions {\n  public static sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  public static retry<T>(\n    fn: () => Promise<T>,\n    maxAttempts: number = 3,\n    delay: number = 1000\n  ): Promise<T> {\n    return new Promise(async (resolve, reject) => {\n      for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n        try {\n          const result = await fn();\n          resolve(result);\n          return;\n        } catch (error) {\n          if (attempt === maxAttempts) {\n            reject(error);\n            return;\n          }\n          await this.sleep(delay * attempt);\n        }\n      }\n    });\n  }\n\n  public static debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): (...args: Parameters<T>) => void {\n    let timeout: NodeJS.Timeout;\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(this, args), wait);\n    };\n  }\n\n  public static throttle<T extends (...args: any[]) => any>(\n    func: T,\n    limit: number\n  ): (...args: Parameters<T>) => void {\n    let inThrottle: boolean;\n    return (...args: Parameters<T>) => {\n      if (!inThrottle) {\n        func.apply(this, args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n\n  public static formatBytes(bytes: number, decimals: number = 2): string {\n    if (bytes === 0) {return '0 Bytes';}\n    \n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    \n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n\n  public static isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  public static isValidUrl(url: string): boolean {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  public static generateSecureToken(length: number = 32): string {\n    return randomBytes(length).toString('hex');\n  }\n\n  public static hashPassword(password: string, salt?: string): string {\n    const actualSalt = salt || randomBytes(16).toString('hex');\n    const hash = createHash('sha256').update(password + actualSalt).digest('hex');\n    return `${actualSalt}:${hash}`;\n  }\n\n  public static verifyPassword(password: string, hashedPassword: string): boolean {\n    const [salt, hash] = hashedPassword.split(':');\n    const newHash = createHash('sha256').update(password + salt).digest('hex');\n    return hash === newHash;\n  }\n}\n\n// ============================================================================\n// \u5BFC\u51FA\u9ED8\u8BA4\u914D\u7F6E\n// ============================================================================\n\nexport const DEFAULT_SECURITY_CONFIG: SecurityConfig = {\n  enableXSS: true,\n  enableCSRF: true,\n  enableHSTS: true,\n  enableContentTypeNoSniff: true,\n  enableFrameGuard: true,\n  trustedDomains: ['localhost:3000', 'localhost:3001']\n};\n\nexport const DEFAULT_RATE_LIMIT_CONFIG: RateLimitConfig = {\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100,\n  standardHeaders: true,\n  legacyHeaders: false\n};\n\nexport const DEFAULT_SLOW_DOWN_CONFIG: SlowDownConfig = {\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  delayAfter: 50,\n  delayMs: 500,\n  maxDelayMs: 20000\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5b25cde2c4d79098fbd672976b077782b14408f5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28li1h9z0o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28li1h9z0o();
var __importDefault =
/* istanbul ignore next */
(cov_28li1h9z0o().s[0]++,
/* istanbul ignore next */
(cov_28li1h9z0o().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_28li1h9z0o().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_28li1h9z0o().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_28li1h9z0o().f[0]++;
  cov_28li1h9z0o().s[1]++;
  return /* istanbul ignore next */(cov_28li1h9z0o().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_28li1h9z0o().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_28li1h9z0o().s[3]++;
exports.DEFAULT_SLOW_DOWN_CONFIG = exports.DEFAULT_RATE_LIMIT_CONFIG = exports.DEFAULT_SECURITY_CONFIG = exports.UtilityFunctions = exports.SecurityMiddleware = exports.ApiKeyValidator = exports.RateLimiter = exports.InputSanitizer = exports.ProductionLogger = exports.RateLimitError = exports.SecurityError = exports.ValidationError = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_28li1h9z0o().s[4]++, require("crypto"));
const zod_1 =
/* istanbul ignore next */
(cov_28li1h9z0o().s[5]++, require("zod"));
const helmet_1 =
/* istanbul ignore next */
(cov_28li1h9z0o().s[6]++, __importDefault(require("helmet")));
const winston_1 =
/* istanbul ignore next */
(cov_28li1h9z0o().s[7]++, __importDefault(require("winston")));
const perf_hooks_1 =
/* istanbul ignore next */
(cov_28li1h9z0o().s[8]++, require("perf_hooks"));
// Note: DOMPurify, express-rate-limit, and express-slow-down are not available
// These features will be implemented using alternative approaches
// ============================================================================
// 错误类定义
// ============================================================================
class ValidationError extends Error {
  constructor(message, field) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[1]++;
    cov_28li1h9z0o().s[9]++;
    super(message);
    /* istanbul ignore next */
    cov_28li1h9z0o().s[10]++;
    this.field = field;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[11]++;
    this.name = 'ValidationError';
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[12]++;
exports.ValidationError = ValidationError;
class SecurityError extends Error {
  constructor(message, code) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[2]++;
    cov_28li1h9z0o().s[13]++;
    super(message);
    /* istanbul ignore next */
    cov_28li1h9z0o().s[14]++;
    this.code = code;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[15]++;
    this.name = 'SecurityError';
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[16]++;
exports.SecurityError = SecurityError;
class RateLimitError extends Error {
  constructor(message, retryAfter) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[3]++;
    cov_28li1h9z0o().s[17]++;
    super(message);
    /* istanbul ignore next */
    cov_28li1h9z0o().s[18]++;
    this.retryAfter = retryAfter;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[19]++;
    this.name = 'RateLimitError';
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[20]++;
exports.RateLimitError = RateLimitError;
// ============================================================================
// 生产级日志记录器
// ============================================================================
class ProductionLogger {
  constructor() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[4]++;
    cov_28li1h9z0o().s[21]++;
    this.metrics = new Map();
    /* istanbul ignore next */
    cov_28li1h9z0o().s[22]++;
    this.logger = winston_1.default.createLogger({
      level:
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[3][0]++, process.env.LOG_LEVEL) ||
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[3][1]++, 'info'),
      format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.errors({
        stack: true
      }), winston_1.default.format.json(), winston_1.default.format.printf(({
        timestamp,
        level,
        message,
        ...meta
      }) => {
        /* istanbul ignore next */
        cov_28li1h9z0o().f[5]++;
        cov_28li1h9z0o().s[23]++;
        return JSON.stringify({
          timestamp,
          level,
          message,
          ...meta,
          environment:
          /* istanbul ignore next */
          (cov_28li1h9z0o().b[4][0]++, process.env.NODE_ENV) ||
          /* istanbul ignore next */
          (cov_28li1h9z0o().b[4][1]++, 'development')
        });
      })),
      defaultMeta: {
        service: 'zk-agent',
        version:
        /* istanbul ignore next */
        (cov_28li1h9z0o().b[5][0]++, process.env.APP_VERSION) ||
        /* istanbul ignore next */
        (cov_28li1h9z0o().b[5][1]++, '1.0.0')
      },
      transports: [new winston_1.default.transports.Console({
        format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple())
      }), new winston_1.default.transports.File({
        filename: 'logs/error.log',
        level: 'error',
        maxsize: 5242880,
        // 5MB
        maxFiles: 5
      }), new winston_1.default.transports.File({
        filename: 'logs/combined.log',
        maxsize: 5242880,
        // 5MB
        maxFiles: 5
      })]
    });
  }
  static getInstance() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[6]++;
    cov_28li1h9z0o().s[24]++;
    if (!ProductionLogger.instance) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[6][0]++;
      cov_28li1h9z0o().s[25]++;
      ProductionLogger.instance = new ProductionLogger();
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[6][1]++;
    }
    cov_28li1h9z0o().s[26]++;
    return ProductionLogger.instance;
  }
  info(message, context) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[7]++;
    cov_28li1h9z0o().s[27]++;
    this.logger.info(message, context);
  }
  warn(message, context) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[8]++;
    cov_28li1h9z0o().s[28]++;
    this.logger.warn(message, context);
  }
  error(message, error, context) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[9]++;
    cov_28li1h9z0o().s[29]++;
    this.logger.error(message, {
      ...context,
      error:
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[7][0]++, error?.stack) ||
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[7][1]++, error)
    });
  }
  debug(message, context) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[10]++;
    cov_28li1h9z0o().s[30]++;
    this.logger.debug(message, context);
  }
  logRequest(req, res, duration) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[11]++;
    const context =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[31]++, {
      requestId: req.headers['x-request-id'],
      method: req.method,
      url: req.url,
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      statusCode: res.statusCode,
      duration
    });
    /* istanbul ignore next */
    cov_28li1h9z0o().s[32]++;
    if (res.statusCode >= 400) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[8][0]++;
      cov_28li1h9z0o().s[33]++;
      this.error(`HTTP ${res.statusCode} - ${req.method} ${req.url}`, undefined, context);
    } else {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[8][1]++;
      cov_28li1h9z0o().s[34]++;
      this.info(`HTTP ${res.statusCode} - ${req.method} ${req.url}`, context);
    }
    /* istanbul ignore next */
    cov_28li1h9z0o().s[35]++;
    this.updateMetrics(req.url, duration, res.statusCode >= 400);
  }
  updateMetrics(endpoint, duration, isError) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[12]++;
    const current =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[36]++,
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[9][0]++, this.metrics.get(endpoint)) ||
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[9][1]++, {
      requestCount: 0,
      averageResponseTime: 0,
      errorRate: 0,
      lastUpdated: new Date()
    }));
    /* istanbul ignore next */
    cov_28li1h9z0o().s[37]++;
    current.requestCount++;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[38]++;
    current.averageResponseTime = (current.averageResponseTime + duration) / 2;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[39]++;
    if (isError) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[10][0]++;
      cov_28li1h9z0o().s[40]++;
      current.errorRate = (current.errorRate + 1) / current.requestCount;
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[10][1]++;
    }
    cov_28li1h9z0o().s[41]++;
    current.lastUpdated = new Date();
    /* istanbul ignore next */
    cov_28li1h9z0o().s[42]++;
    this.metrics.set(endpoint, current);
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[13]++;
    cov_28li1h9z0o().s[43]++;
    return new Map(this.metrics);
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[44]++;
exports.ProductionLogger = ProductionLogger;
// ============================================================================
// 输入清理和验证器
// ============================================================================
class InputSanitizer {
  static sanitizeString(input) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[14]++;
    cov_28li1h9z0o().s[45]++;
    if (typeof input !== 'string') {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[11][0]++;
      cov_28li1h9z0o().s[46]++;
      throw new ValidationError('Input must be a string');
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[11][1]++;
    }
    cov_28li1h9z0o().s[47]++;
    if (input.length > this.MAX_STRING_LENGTH) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[12][0]++;
      cov_28li1h9z0o().s[48]++;
      throw new ValidationError(`String length exceeds maximum of ${this.MAX_STRING_LENGTH}`);
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[12][1]++;
    }
    // 检查危险模式
    cov_28li1h9z0o().s[49]++;
    for (const pattern of this.DANGEROUS_PATTERNS) {
      /* istanbul ignore next */
      cov_28li1h9z0o().s[50]++;
      if (pattern.test(input)) {
        /* istanbul ignore next */
        cov_28li1h9z0o().b[13][0]++;
        cov_28li1h9z0o().s[51]++;
        throw new SecurityError('Input contains potentially dangerous content');
      } else
      /* istanbul ignore next */
      {
        cov_28li1h9z0o().b[13][1]++;
      }
    }
    // Simple HTML sanitization (alternative to DOMPurify)
    /* istanbul ignore next */
    cov_28li1h9z0o().s[52]++;
    return input.replace(/<script[^>]*>.*?<\/script>/gi, '').replace(/<iframe[^>]*>.*?<\/iframe>/gi, '').replace(/<object[^>]*>.*?<\/object>/gi, '').replace(/<embed[^>]*>/gi, '').replace(/on\w+\s*=\s*["'][^"']*["']/gi, ''); // Remove event handlers
  }
  static sanitizeObject(obj) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[15]++;
    cov_28li1h9z0o().s[53]++;
    if (
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[15][0]++, obj === null) ||
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[15][1]++, obj === undefined)) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[14][0]++;
      cov_28li1h9z0o().s[54]++;
      return obj;
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[14][1]++;
    }
    cov_28li1h9z0o().s[55]++;
    if (typeof obj === 'string') {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[16][0]++;
      cov_28li1h9z0o().s[56]++;
      return this.sanitizeString(obj);
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[16][1]++;
    }
    cov_28li1h9z0o().s[57]++;
    if (
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[18][0]++, typeof obj === 'number') ||
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[18][1]++, typeof obj === 'boolean')) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[17][0]++;
      cov_28li1h9z0o().s[58]++;
      return obj;
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[17][1]++;
    }
    cov_28li1h9z0o().s[59]++;
    if (Array.isArray(obj)) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[19][0]++;
      cov_28li1h9z0o().s[60]++;
      if (obj.length > this.MAX_ARRAY_LENGTH) {
        /* istanbul ignore next */
        cov_28li1h9z0o().b[20][0]++;
        cov_28li1h9z0o().s[61]++;
        throw new ValidationError(`Array length exceeds maximum of ${this.MAX_ARRAY_LENGTH}`);
      } else
      /* istanbul ignore next */
      {
        cov_28li1h9z0o().b[20][1]++;
      }
      cov_28li1h9z0o().s[62]++;
      return obj.map(item => {
        /* istanbul ignore next */
        cov_28li1h9z0o().f[16]++;
        cov_28li1h9z0o().s[63]++;
        return this.sanitizeObject(item);
      });
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[19][1]++;
    }
    cov_28li1h9z0o().s[64]++;
    if (typeof obj === 'object') {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[21][0]++;
      const sanitized =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[65]++, {});
      /* istanbul ignore next */
      cov_28li1h9z0o().s[66]++;
      for (const [key, value] of Object.entries(obj)) {
        const sanitizedKey =
        /* istanbul ignore next */
        (cov_28li1h9z0o().s[67]++, this.sanitizeString(key));
        /* istanbul ignore next */
        cov_28li1h9z0o().s[68]++;
        sanitized[sanitizedKey] = this.sanitizeObject(value);
      }
      /* istanbul ignore next */
      cov_28li1h9z0o().s[69]++;
      return sanitized;
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[21][1]++;
    }
    cov_28li1h9z0o().s[70]++;
    return obj;
  }
  static validateSchema(data, schema) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[17]++;
    cov_28li1h9z0o().s[71]++;
    try {
      /* istanbul ignore next */
      cov_28li1h9z0o().s[72]++;
      return schema.parse(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_28li1h9z0o().s[73]++;
      if (error instanceof zod_1.z.ZodError) {
        /* istanbul ignore next */
        cov_28li1h9z0o().b[22][0]++;
        const firstError =
        /* istanbul ignore next */
        (cov_28li1h9z0o().s[74]++, error.errors[0]);
        /* istanbul ignore next */
        cov_28li1h9z0o().s[75]++;
        throw new ValidationError(`Validation failed: ${firstError.message}`, firstError.path.join('.'));
      } else
      /* istanbul ignore next */
      {
        cov_28li1h9z0o().b[22][1]++;
      }
      cov_28li1h9z0o().s[76]++;
      throw error;
    }
  }
  static sanitizeFilename(filename) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[18]++;
    cov_28li1h9z0o().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[24][0]++, !filename) ||
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[24][1]++, typeof filename !== 'string')) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[23][0]++;
      cov_28li1h9z0o().s[78]++;
      throw new ValidationError('Filename must be a non-empty string');
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[23][1]++;
    }
    // 移除路径遍历字符
    const sanitized =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[79]++, filename.replace(/[\\/:*?"<>|]/g, '_').replace(/\.\.+/g, '_').replace(/^\.|\.$/, '_').substring(0, 255));
    /* istanbul ignore next */
    cov_28li1h9z0o().s[80]++;
    if (
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[26][0]++, !sanitized) ||
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[26][1]++, sanitized === '_')) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[25][0]++;
      cov_28li1h9z0o().s[81]++;
      throw new ValidationError('Invalid filename after sanitization');
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[25][1]++;
    }
    cov_28li1h9z0o().s[82]++;
    return sanitized;
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[83]++;
exports.InputSanitizer = InputSanitizer;
/* istanbul ignore next */
cov_28li1h9z0o().s[84]++;
InputSanitizer.MAX_STRING_LENGTH = 10000;
/* istanbul ignore next */
cov_28li1h9z0o().s[85]++;
InputSanitizer.MAX_ARRAY_LENGTH = 1000;
/* istanbul ignore next */
cov_28li1h9z0o().s[86]++;
InputSanitizer.DANGEROUS_PATTERNS = [/<script[^>]*>.*?<\/script>/gi, /javascript:/gi, /on\w+\s*=/gi, /data:text\/html/gi, /vbscript:/gi];
// ============================================================================
// 速率限制器
// ============================================================================
class RateLimiter {
  static createStandardLimiter(config) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[19]++;
    cov_28li1h9z0o().s[87]++;
    return (req, res, next) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[20]++;
      const key =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[88]++,
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[27][0]++, req.ip) ||
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[27][1]++, 'unknown'));
      const now =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[89]++, Date.now());
      const windowStart =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[90]++, now - config.windowMs);
      // Clean old entries
      /* istanbul ignore next */
      cov_28li1h9z0o().s[91]++;
      for (const [k, v] of this.requestCounts.entries()) {
        /* istanbul ignore next */
        cov_28li1h9z0o().s[92]++;
        if (v.resetTime < now) {
          /* istanbul ignore next */
          cov_28li1h9z0o().b[28][0]++;
          cov_28li1h9z0o().s[93]++;
          this.requestCounts.delete(k);
        } else
        /* istanbul ignore next */
        {
          cov_28li1h9z0o().b[28][1]++;
        }
      }
      const current =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[94]++,
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[29][0]++, this.requestCounts.get(key)) ||
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[29][1]++, {
        count: 0,
        resetTime: now + config.windowMs
      }));
      /* istanbul ignore next */
      cov_28li1h9z0o().s[95]++;
      if (current.resetTime < now) {
        /* istanbul ignore next */
        cov_28li1h9z0o().b[30][0]++;
        cov_28li1h9z0o().s[96]++;
        current.count = 0;
        /* istanbul ignore next */
        cov_28li1h9z0o().s[97]++;
        current.resetTime = now + config.windowMs;
      } else
      /* istanbul ignore next */
      {
        cov_28li1h9z0o().b[30][1]++;
      }
      cov_28li1h9z0o().s[98]++;
      current.count++;
      /* istanbul ignore next */
      cov_28li1h9z0o().s[99]++;
      this.requestCounts.set(key, current);
      /* istanbul ignore next */
      cov_28li1h9z0o().s[100]++;
      if (current.count > config.max) {
        /* istanbul ignore next */
        cov_28li1h9z0o().b[31][0]++;
        const logger =
        /* istanbul ignore next */
        (cov_28li1h9z0o().s[101]++, ProductionLogger.getInstance());
        /* istanbul ignore next */
        cov_28li1h9z0o().s[102]++;
        logger.warn('Rate limit exceeded', {
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          url: req.url
        });
        /* istanbul ignore next */
        cov_28li1h9z0o().s[103]++;
        return res.status(429).json({
          error: 'Rate limit exceeded',
          message:
          /* istanbul ignore next */
          (cov_28li1h9z0o().b[32][0]++, config.message) ||
          /* istanbul ignore next */
          (cov_28li1h9z0o().b[32][1]++, 'Too many requests, please try again later.'),
          retryAfter: Math.ceil((current.resetTime - now) / 1000)
        });
      } else
      /* istanbul ignore next */
      {
        cov_28li1h9z0o().b[31][1]++;
      }
      cov_28li1h9z0o().s[104]++;
      next();
    };
  }
  static createSlowDown(config) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[21]++;
    cov_28li1h9z0o().s[105]++;
    return (req, res, next) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[22]++;
      cov_28li1h9z0o().s[106]++;
      // Simple implementation - just pass through for now
      // In a real implementation, you would add delay logic here
      next();
    };
  }
  static createApiLimiter() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[23]++;
    cov_28li1h9z0o().s[107]++;
    return this.createStandardLimiter({
      windowMs: 15 * 60 * 1000,
      // 15 minutes
      max: 100,
      // limit each IP to 100 requests per windowMs
      message: 'Too many API requests, please try again later.'
    });
  }
  static createAuthLimiter() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[24]++;
    cov_28li1h9z0o().s[108]++;
    return this.createStandardLimiter({
      windowMs: 15 * 60 * 1000,
      // 15 minutes
      max: 5,
      // limit each IP to 5 auth requests per windowMs
      message: 'Too many authentication attempts, please try again later.',
      skipSuccessfulRequests: true
    });
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[109]++;
exports.RateLimiter = RateLimiter;
/* istanbul ignore next */
cov_28li1h9z0o().s[110]++;
RateLimiter.requestCounts = new Map();
// ============================================================================
// API密钥验证器
// ============================================================================
class ApiKeyValidator {
  constructor(config) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[25]++;
    cov_28li1h9z0o().s[111]++;
    this.config = config;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[112]++;
    this.logger = ProductionLogger.getInstance();
  }
  middleware() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[26]++;
    cov_28li1h9z0o().s[113]++;
    return (req, res, next) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[27]++;
      cov_28li1h9z0o().s[114]++;
      try {
        const apiKey =
        /* istanbul ignore next */
        (cov_28li1h9z0o().s[115]++, this.extractApiKey(req));
        /* istanbul ignore next */
        cov_28li1h9z0o().s[116]++;
        if (!apiKey) {
          /* istanbul ignore next */
          cov_28li1h9z0o().b[33][0]++;
          cov_28li1h9z0o().s[117]++;
          this.logger.warn('Missing API key', {
            ip: req.ip,
            url: req.url,
            userAgent: req.get('User-Agent')
          });
          /* istanbul ignore next */
          cov_28li1h9z0o().s[118]++;
          return res.status(401).json({
            error: 'Unauthorized',
            message: 'API key is required'
          });
        } else
        /* istanbul ignore next */
        {
          cov_28li1h9z0o().b[33][1]++;
        }
        cov_28li1h9z0o().s[119]++;
        if (!this.validateApiKey(apiKey)) {
          /* istanbul ignore next */
          cov_28li1h9z0o().b[34][0]++;
          cov_28li1h9z0o().s[120]++;
          this.logger.warn('Invalid API key', {
            ip: req.ip,
            url: req.url,
            userAgent: req.get('User-Agent'),
            apiKeyPrefix: apiKey.substring(0, 8) + '...'
          });
          /* istanbul ignore next */
          cov_28li1h9z0o().s[121]++;
          return res.status(401).json({
            error: 'Unauthorized',
            message: 'Invalid API key'
          });
        } else
        /* istanbul ignore next */
        {
          cov_28li1h9z0o().b[34][1]++;
        }
        // 将API密钥信息添加到请求对象
        cov_28li1h9z0o().s[122]++;
        req.apiKey = apiKey;
        /* istanbul ignore next */
        cov_28li1h9z0o().s[123]++;
        next();
      } catch (error) {
        /* istanbul ignore next */
        cov_28li1h9z0o().s[124]++;
        this.logger.error('API key validation error', error, {
          ip: req.ip,
          url: req.url
        });
        /* istanbul ignore next */
        cov_28li1h9z0o().s[125]++;
        return res.status(500).json({
          error: 'Internal Server Error',
          message: 'API key validation failed'
        });
      }
    };
  }
  extractApiKey(req) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[28]++;
    // 从头部获取
    let apiKey =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[126]++, req.get(this.config.headerName));
    // 从查询参数获取（如果配置了）
    /* istanbul ignore next */
    cov_28li1h9z0o().s[127]++;
    if (
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[36][0]++, !apiKey) &&
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[36][1]++, this.config.queryParam)) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[35][0]++;
      cov_28li1h9z0o().s[128]++;
      apiKey = req.query[this.config.queryParam];
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[35][1]++;
    }
    cov_28li1h9z0o().s[129]++;
    return /* istanbul ignore next */(cov_28li1h9z0o().b[37][0]++, apiKey) ||
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[37][1]++, null);
  }
  validateApiKey(apiKey) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[29]++;
    cov_28li1h9z0o().s[130]++;
    if (
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[39][0]++, this.config.keyPrefix) &&
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[39][1]++, !apiKey.startsWith(this.config.keyPrefix))) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[38][0]++;
      cov_28li1h9z0o().s[131]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[38][1]++;
    }
    cov_28li1h9z0o().s[132]++;
    return this.config.validKeys.has(apiKey);
  }
  static generateApiKey(prefix =
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[40][0]++, 'zk_')) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[30]++;
    const randomPart =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[133]++, (0, crypto_1.randomBytes)(32).toString('hex'));
    /* istanbul ignore next */
    cov_28li1h9z0o().s[134]++;
    return `${prefix}${randomPart}`;
  }
  static hashApiKey(apiKey) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[31]++;
    cov_28li1h9z0o().s[135]++;
    return (0, crypto_1.createHash)('sha256').update(apiKey).digest('hex');
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[136]++;
exports.ApiKeyValidator = ApiKeyValidator;
// ============================================================================
// 安全中间件
// ============================================================================
class SecurityMiddleware {
  static createHelmetConfig(config) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[32]++;
    cov_28li1h9z0o().s[137]++;
    return (0, helmet_1.default)({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", 'data:', 'https:'],
          connectSrc: ["'self'", ...config.trustedDomains],
          fontSrc: ["'self'"],
          objectSrc: ["'none'"],
          mediaSrc: ["'self'"],
          frameSrc: ["'none'"]
        }
      },
      crossOriginEmbedderPolicy: false,
      hsts: config.enableHSTS ?
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[41][0]++, {
        maxAge: 31536000,
        includeSubDomains: true,
        preload: true
      }) :
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[41][1]++, false),
      noSniff: config.enableContentTypeNoSniff,
      frameguard: config.enableFrameGuard ?
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[42][0]++, {
        action: 'deny'
      }) :
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[42][1]++, false),
      xssFilter: config.enableXSS
    });
  }
  static requestId() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[33]++;
    cov_28li1h9z0o().s[138]++;
    return (req, res, next) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[34]++;
      const requestId =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[139]++,
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[43][0]++, req.get('X-Request-ID')) ||
      /* istanbul ignore next */
      (cov_28li1h9z0o().b[43][1]++, (0, crypto_1.randomBytes)(16).toString('hex')));
      /* istanbul ignore next */
      cov_28li1h9z0o().s[140]++;
      req.headers['x-request-id'] = requestId;
      /* istanbul ignore next */
      cov_28li1h9z0o().s[141]++;
      res.set('X-Request-ID', requestId);
      /* istanbul ignore next */
      cov_28li1h9z0o().s[142]++;
      next();
    };
  }
  static performanceMonitor() {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[35]++;
    const logger =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[143]++, ProductionLogger.getInstance());
    /* istanbul ignore next */
    cov_28li1h9z0o().s[144]++;
    return (req, res, next) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[36]++;
      const startTime =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[145]++, perf_hooks_1.performance.now());
      /* istanbul ignore next */
      cov_28li1h9z0o().s[146]++;
      res.on('finish', () => {
        /* istanbul ignore next */
        cov_28li1h9z0o().f[37]++;
        const duration =
        /* istanbul ignore next */
        (cov_28li1h9z0o().s[147]++, perf_hooks_1.performance.now() - startTime);
        /* istanbul ignore next */
        cov_28li1h9z0o().s[148]++;
        logger.logRequest(req, res, duration);
      });
      /* istanbul ignore next */
      cov_28li1h9z0o().s[149]++;
      next();
    };
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[150]++;
exports.SecurityMiddleware = SecurityMiddleware;
// ============================================================================
// 工具函数
// ============================================================================
class UtilityFunctions {
  static sleep(ms) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[38]++;
    cov_28li1h9z0o().s[151]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[39]++;
      cov_28li1h9z0o().s[152]++;
      return setTimeout(resolve, ms);
    });
  }
  static retry(fn, maxAttempts =
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[44][0]++, 3), delay =
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[45][0]++, 1000)) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[40]++;
    cov_28li1h9z0o().s[153]++;
    return new Promise(async (resolve, reject) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[41]++;
      cov_28li1h9z0o().s[154]++;
      for (let attempt =
      /* istanbul ignore next */
      (cov_28li1h9z0o().s[155]++, 1); attempt <= maxAttempts; attempt++) {
        /* istanbul ignore next */
        cov_28li1h9z0o().s[156]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_28li1h9z0o().s[157]++, await fn());
          /* istanbul ignore next */
          cov_28li1h9z0o().s[158]++;
          resolve(result);
          /* istanbul ignore next */
          cov_28li1h9z0o().s[159]++;
          return;
        } catch (error) {
          /* istanbul ignore next */
          cov_28li1h9z0o().s[160]++;
          if (attempt === maxAttempts) {
            /* istanbul ignore next */
            cov_28li1h9z0o().b[46][0]++;
            cov_28li1h9z0o().s[161]++;
            reject(error);
            /* istanbul ignore next */
            cov_28li1h9z0o().s[162]++;
            return;
          } else
          /* istanbul ignore next */
          {
            cov_28li1h9z0o().b[46][1]++;
          }
          cov_28li1h9z0o().s[163]++;
          await this.sleep(delay * attempt);
        }
      }
    });
  }
  static debounce(func, wait) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[42]++;
    let timeout;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[164]++;
    return (...args) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[43]++;
      cov_28li1h9z0o().s[165]++;
      clearTimeout(timeout);
      /* istanbul ignore next */
      cov_28li1h9z0o().s[166]++;
      timeout = setTimeout(() => {
        /* istanbul ignore next */
        cov_28li1h9z0o().f[44]++;
        cov_28li1h9z0o().s[167]++;
        return func.apply(this, args);
      }, wait);
    };
  }
  static throttle(func, limit) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[45]++;
    let inThrottle;
    /* istanbul ignore next */
    cov_28li1h9z0o().s[168]++;
    return (...args) => {
      /* istanbul ignore next */
      cov_28li1h9z0o().f[46]++;
      cov_28li1h9z0o().s[169]++;
      if (!inThrottle) {
        /* istanbul ignore next */
        cov_28li1h9z0o().b[47][0]++;
        cov_28li1h9z0o().s[170]++;
        func.apply(this, args);
        /* istanbul ignore next */
        cov_28li1h9z0o().s[171]++;
        inThrottle = true;
        /* istanbul ignore next */
        cov_28li1h9z0o().s[172]++;
        setTimeout(() => {
          /* istanbul ignore next */
          cov_28li1h9z0o().f[47]++;
          cov_28li1h9z0o().s[173]++;
          return inThrottle = false;
        }, limit);
      } else
      /* istanbul ignore next */
      {
        cov_28li1h9z0o().b[47][1]++;
      }
    };
  }
  static formatBytes(bytes, decimals =
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[48][0]++, 2)) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[48]++;
    cov_28li1h9z0o().s[174]++;
    if (bytes === 0) {
      /* istanbul ignore next */
      cov_28li1h9z0o().b[49][0]++;
      cov_28li1h9z0o().s[175]++;
      return '0 Bytes';
    } else
    /* istanbul ignore next */
    {
      cov_28li1h9z0o().b[49][1]++;
    }
    const k =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[176]++, 1024);
    const dm =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[177]++, decimals < 0 ?
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[50][0]++, 0) :
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[50][1]++, decimals));
    const sizes =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[178]++, ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']);
    const i =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[179]++, Math.floor(Math.log(bytes) / Math.log(k)));
    /* istanbul ignore next */
    cov_28li1h9z0o().s[180]++;
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }
  static isValidEmail(email) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[49]++;
    const emailRegex =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[181]++, /^[^\s@]+@[^\s@]+\.[^\s@]+$/);
    /* istanbul ignore next */
    cov_28li1h9z0o().s[182]++;
    return emailRegex.test(email);
  }
  static isValidUrl(url) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[50]++;
    cov_28li1h9z0o().s[183]++;
    try {
      /* istanbul ignore next */
      cov_28li1h9z0o().s[184]++;
      new URL(url);
      /* istanbul ignore next */
      cov_28li1h9z0o().s[185]++;
      return true;
    } catch {
      /* istanbul ignore next */
      cov_28li1h9z0o().s[186]++;
      return false;
    }
  }
  static generateSecureToken(length =
  /* istanbul ignore next */
  (cov_28li1h9z0o().b[51][0]++, 32)) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[51]++;
    cov_28li1h9z0o().s[187]++;
    return (0, crypto_1.randomBytes)(length).toString('hex');
  }
  static hashPassword(password, salt) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[52]++;
    const actualSalt =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[188]++,
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[52][0]++, salt) ||
    /* istanbul ignore next */
    (cov_28li1h9z0o().b[52][1]++, (0, crypto_1.randomBytes)(16).toString('hex')));
    const hash =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[189]++, (0, crypto_1.createHash)('sha256').update(password + actualSalt).digest('hex'));
    /* istanbul ignore next */
    cov_28li1h9z0o().s[190]++;
    return `${actualSalt}:${hash}`;
  }
  static verifyPassword(password, hashedPassword) {
    /* istanbul ignore next */
    cov_28li1h9z0o().f[53]++;
    const [salt, hash] =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[191]++, hashedPassword.split(':'));
    const newHash =
    /* istanbul ignore next */
    (cov_28li1h9z0o().s[192]++, (0, crypto_1.createHash)('sha256').update(password + salt).digest('hex'));
    /* istanbul ignore next */
    cov_28li1h9z0o().s[193]++;
    return hash === newHash;
  }
}
/* istanbul ignore next */
cov_28li1h9z0o().s[194]++;
exports.UtilityFunctions = UtilityFunctions;
// ============================================================================
// 导出默认配置
// ============================================================================
/* istanbul ignore next */
cov_28li1h9z0o().s[195]++;
exports.DEFAULT_SECURITY_CONFIG = {
  enableXSS: true,
  enableCSRF: true,
  enableHSTS: true,
  enableContentTypeNoSniff: true,
  enableFrameGuard: true,
  trustedDomains: ['localhost:3000', 'localhost:3001']
};
/* istanbul ignore next */
cov_28li1h9z0o().s[196]++;
exports.DEFAULT_RATE_LIMIT_CONFIG = {
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  max: 100,
  standardHeaders: true,
  legacyHeaders: false
};
/* istanbul ignore next */
cov_28li1h9z0o().s[197]++;
exports.DEFAULT_SLOW_DOWN_CONFIG = {
  windowMs: 15 * 60 * 1000,
  // 15 minutes
  delayAfter: 50,
  delayMs: 500,
  maxDelayMs: 20000
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,