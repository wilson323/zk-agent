21dc0b7831621e8451efa03a3526c4d1
"use strict";

/**
 * @file app/api/admin/security/rules/[ruleId]/route.ts
 * @description API endpoints for individual security rule management
 * @author Security Team
 * @lastUpdate 2024-12-19
 */
/* istanbul ignore next */
function cov_2ku60v332o() {
  var path = "E:\\zk-agent\\app\\api\\admin\\security\\rules\\[ruleId]\\route.ts";
  var hash = "d78e3c892f3afbc4ab986fa9ed75c7727cc9907e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\admin\\security\\rules\\[ruleId]\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 18
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 22
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 24
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "5": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 73
        }
      },
      "6": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 14,
          column: 79
        }
      },
      "7": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 60
        }
      },
      "8": {
        start: {
          line: 16,
          column: 17
        },
        end: {
          line: 16,
          column: 46
        }
      },
      "9": {
        start: {
          line: 17,
          column: 15
        },
        end: {
          line: 17,
          column: 53
        }
      },
      "10": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 45,
          column: 5
        }
      },
      "11": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 21,
          column: 33
        }
      },
      "12": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 78
        }
      },
      "13": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 53
        }
      },
      "14": {
        start: {
          line: 23,
          column: 37
        },
        end: {
          line: 23,
          column: 52
        }
      },
      "15": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "16": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 28,
          column: 32
        }
      },
      "17": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 33,
          column: 11
        }
      },
      "18": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "19": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 44,
          column: 28
        }
      },
      "20": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      "21": {
        start: {
          line: 50,
          column: 27
        },
        end: {
          line: 50,
          column: 33
        }
      },
      "22": {
        start: {
          line: 51,
          column: 21
        },
        end: {
          line: 51,
          column: 41
        }
      },
      "23": {
        start: {
          line: 53,
          column: 25
        },
        end: {
          line: 55,
          column: 23
        }
      },
      "24": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 100
        }
      },
      "25": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "26": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 62,
          column: 32
        }
      },
      "27": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "28": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "29": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 85,
          column: 11
        }
      },
      "30": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "31": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 96,
          column: 28
        }
      },
      "32": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "33": {
        start: {
          line: 102,
          column: 27
        },
        end: {
          line: 102,
          column: 33
        }
      },
      "34": {
        start: {
          line: 104,
          column: 25
        },
        end: {
          line: 106,
          column: 23
        }
      },
      "35": {
        start: {
          line: 108,
          column: 22
        },
        end: {
          line: 108,
          column: 78
        }
      },
      "36": {
        start: {
          line: 109,
          column: 21
        },
        end: {
          line: 109,
          column: 53
        }
      },
      "37": {
        start: {
          line: 109,
          column: 37
        },
        end: {
          line: 109,
          column: 52
        }
      },
      "38": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "39": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 114,
          column: 32
        }
      },
      "40": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 122,
          column: 9
        }
      },
      "41": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 121,
          column: 32
        }
      },
      "42": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 99
        }
      },
      "43": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "44": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 143,
          column: 11
        }
      },
      "45": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "46": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "47": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 158,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "GET",
        decl: {
          start: {
            line: 19,
            column: 15
          },
          end: {
            line: 19,
            column: 18
          }
        },
        loc: {
          start: {
            line: 19,
            column: 40
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 19
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 32
          },
          end: {
            line: 23,
            column: 33
          }
        },
        loc: {
          start: {
            line: 23,
            column: 37
          },
          end: {
            line: 23,
            column: 52
          }
        },
        line: 23
      },
      "2": {
        name: "PATCH",
        decl: {
          start: {
            line: 48,
            column: 15
          },
          end: {
            line: 48,
            column: 20
          }
        },
        loc: {
          start: {
            line: 48,
            column: 42
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 48
      },
      "3": {
        name: "DELETE",
        decl: {
          start: {
            line: 100,
            column: 15
          },
          end: {
            line: 100,
            column: 21
          }
        },
        loc: {
          start: {
            line: 100,
            column: 43
          },
          end: {
            line: 160,
            column: 1
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 32
          },
          end: {
            line: 109,
            column: 33
          }
        },
        loc: {
          start: {
            line: 109,
            column: 37
          },
          end: {
            line: 109,
            column: 52
          }
        },
        line: 109
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 55,
            column: 23
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 25
          },
          end: {
            line: 53,
            column: 63
          }
        }, {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 54,
            column: 44
          }
        }, {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 23
          }
        }],
        line: 53
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 106,
            column: 23
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 25
          },
          end: {
            line: 104,
            column: 63
          }
        }, {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 44
          }
        }, {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 106,
            column: 23
          }
        }],
        line: 104
      },
      "4": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "5": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 122,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\admin\\security\\rules\\[ruleId]\\route.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\admin\\security\\rules\\[ruleId]\\route.ts"],
      sourcesContent: ["/**\n * @file app/api/admin/security/rules/[ruleId]/route.ts\n * @description API endpoints for individual security rule management\n * @author Security Team\n * @lastUpdate 2024-12-19\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { codeReviewSystem } from '@/lib/security/code-review-system';\nimport { securityAuditSystem, SecurityEventType, SecuritySeverity } from '@/lib/security/security-audit-system';\nimport { getErrorMessage } from '@/lib/utils/error-handler';\nimport { Logger } from '@/lib/utils/logger';\n\nconst logger = new Logger('SecurityRuleAPI');\n\n// GET /api/admin/security/rules/[ruleId] - Get specific security rule\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { ruleId: string } }\n) {\n  try {\n    const { ruleId } = params;\n    const rules = codeReviewSystem.getSecurityRules();\n    const rule = rules.find(r => r.id === ruleId);\n\n    if (!rule) {\n      return NextResponse.json({\n        success: false,\n        error: 'Security rule not found',\n      }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: rule,\n    });\n\n  } catch (error) {\n    logger.error('Failed to get security rule', {\n      ruleId: params.ruleId,\n      error: getErrorMessage(error),\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to get security rule',\n      details: getErrorMessage(error),\n    }, { status: 500 });\n  }\n}\n\n// PATCH /api/admin/security/rules/[ruleId] - Update security rule\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { ruleId: string } }\n) {\n  try {\n    const { ruleId } = params;\n    const body = await request.json();\n\n    // Get client IP for audit logging\n    const clientIP = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     '127.0.0.1';\n\n    // Update security rule\n    const success = await codeReviewSystem.updateSecurityRule(ruleId, body);\n\n    if (!success) {\n      return NextResponse.json({\n        success: false,\n        error: 'Security rule not found',\n      }, { status: 404 });\n    }\n\n    // Record security event\n    await securityAuditSystem.recordEvent({\n      type: SecurityEventType.ADMIN_ACTION,\n      severity: SecuritySeverity.MEDIUM,\n      ip: clientIP,\n      details: {\n        action: 'update_security_rule',\n        ruleId,\n        updates: Object.keys(body),\n        changes: body,\n      },\n      riskScore: 3,\n    });\n\n    logger.info('Security rule updated', {\n      ruleId,\n      updates: Object.keys(body),\n      clientIP,\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'Security rule updated successfully',\n    });\n\n  } catch (error) {\n    logger.error('Failed to update security rule', {\n      ruleId: params.ruleId,\n      error: getErrorMessage(error),\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to update security rule',\n      details: getErrorMessage(error),\n    }, { status: 500 });\n  }\n}\n\n// DELETE /api/admin/security/rules/[ruleId] - Delete security rule\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { ruleId: string } }\n) {\n  try {\n    const { ruleId } = params;\n\n    // Get client IP for audit logging\n    const clientIP = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     '127.0.0.1';\n\n    // Check if rule exists\n    const rules = codeReviewSystem.getSecurityRules();\n    const rule = rules.find(r => r.id === ruleId);\n\n    if (!rule) {\n      return NextResponse.json({\n        success: false,\n        error: 'Security rule not found',\n      }, { status: 404 });\n    }\n\n    // Prevent deletion of built-in rules\n    if (!ruleId.startsWith('custom_')) {\n      return NextResponse.json({\n        success: false,\n        error: 'Cannot delete built-in security rules',\n      }, { status: 403 });\n    }\n\n    // Delete security rule (Note: This would need to be implemented in the code review system)\n    // For now, we'll just disable it\n    await codeReviewSystem.updateSecurityRule(ruleId, { enabled: false });\n\n    // Record security event\n    await securityAuditSystem.recordEvent({\n      type: SecurityEventType.ADMIN_ACTION,\n      severity: SecuritySeverity.HIGH,\n      ip: clientIP,\n      details: {\n        action: 'delete_security_rule',\n        ruleId,\n        ruleName: rule.name,\n        category: rule.category,\n      },\n      riskScore: 5,\n    });\n\n    logger.info('Security rule deleted', {\n      ruleId,\n      ruleName: rule.name,\n      clientIP,\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: 'Security rule deleted successfully',\n    });\n\n  } catch (error) {\n    logger.error('Failed to delete security rule', {\n      ruleId: params.ruleId,\n      error: getErrorMessage(error),\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to delete security rule',\n      details: getErrorMessage(error),\n    }, { status: 500 });\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d78e3c892f3afbc4ab986fa9ed75c7727cc9907e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ku60v332o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ku60v332o();
cov_2ku60v332o().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2ku60v332o().s[1]++;
exports.GET = GET;
/* istanbul ignore next */
cov_2ku60v332o().s[2]++;
exports.PATCH = PATCH;
/* istanbul ignore next */
cov_2ku60v332o().s[3]++;
exports.DELETE = DELETE;
const server_1 =
/* istanbul ignore next */
(cov_2ku60v332o().s[4]++, require("next/server"));
const code_review_system_1 =
/* istanbul ignore next */
(cov_2ku60v332o().s[5]++, require("@/lib/security/code-review-system"));
const security_audit_system_1 =
/* istanbul ignore next */
(cov_2ku60v332o().s[6]++, require("@/lib/security/security-audit-system"));
const error_handler_1 =
/* istanbul ignore next */
(cov_2ku60v332o().s[7]++, require("@/lib/utils/error-handler"));
const logger_1 =
/* istanbul ignore next */
(cov_2ku60v332o().s[8]++, require("@/lib/utils/logger"));
const logger =
/* istanbul ignore next */
(cov_2ku60v332o().s[9]++, new logger_1.Logger('SecurityRuleAPI'));
// GET /api/admin/security/rules/[ruleId] - Get specific security rule
async function GET(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2ku60v332o().f[0]++;
  cov_2ku60v332o().s[10]++;
  try {
    const {
      ruleId
    } =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[11]++, params);
    const rules =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[12]++, code_review_system_1.codeReviewSystem.getSecurityRules());
    const rule =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[13]++, rules.find(r => {
      /* istanbul ignore next */
      cov_2ku60v332o().f[1]++;
      cov_2ku60v332o().s[14]++;
      return r.id === ruleId;
    }));
    /* istanbul ignore next */
    cov_2ku60v332o().s[15]++;
    if (!rule) {
      /* istanbul ignore next */
      cov_2ku60v332o().b[0][0]++;
      cov_2ku60v332o().s[16]++;
      return server_1.NextResponse.json({
        success: false,
        error: 'Security rule not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ku60v332o().b[0][1]++;
    }
    cov_2ku60v332o().s[17]++;
    return server_1.NextResponse.json({
      success: true,
      data: rule
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ku60v332o().s[18]++;
    logger.error('Failed to get security rule', {
      ruleId: params.ruleId,
      error: (0, error_handler_1.getErrorMessage)(error)
    });
    /* istanbul ignore next */
    cov_2ku60v332o().s[19]++;
    return server_1.NextResponse.json({
      success: false,
      error: 'Failed to get security rule',
      details: (0, error_handler_1.getErrorMessage)(error)
    }, {
      status: 500
    });
  }
}
// PATCH /api/admin/security/rules/[ruleId] - Update security rule
async function PATCH(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2ku60v332o().f[2]++;
  cov_2ku60v332o().s[20]++;
  try {
    const {
      ruleId
    } =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[21]++, params);
    const body =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[22]++, await request.json());
    // Get client IP for audit logging
    const clientIP =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[23]++,
    /* istanbul ignore next */
    (cov_2ku60v332o().b[1][0]++, request.headers.get('x-forwarded-for')) ||
    /* istanbul ignore next */
    (cov_2ku60v332o().b[1][1]++, request.headers.get('x-real-ip')) ||
    /* istanbul ignore next */
    (cov_2ku60v332o().b[1][2]++, '127.0.0.1'));
    // Update security rule
    const success =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[24]++, await code_review_system_1.codeReviewSystem.updateSecurityRule(ruleId, body));
    /* istanbul ignore next */
    cov_2ku60v332o().s[25]++;
    if (!success) {
      /* istanbul ignore next */
      cov_2ku60v332o().b[2][0]++;
      cov_2ku60v332o().s[26]++;
      return server_1.NextResponse.json({
        success: false,
        error: 'Security rule not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ku60v332o().b[2][1]++;
    }
    // Record security event
    cov_2ku60v332o().s[27]++;
    await security_audit_system_1.securityAuditSystem.recordEvent({
      type: security_audit_system_1.SecurityEventType.ADMIN_ACTION,
      severity: security_audit_system_1.SecuritySeverity.MEDIUM,
      ip: clientIP,
      details: {
        action: 'update_security_rule',
        ruleId,
        updates: Object.keys(body),
        changes: body
      },
      riskScore: 3
    });
    /* istanbul ignore next */
    cov_2ku60v332o().s[28]++;
    logger.info('Security rule updated', {
      ruleId,
      updates: Object.keys(body),
      clientIP
    });
    /* istanbul ignore next */
    cov_2ku60v332o().s[29]++;
    return server_1.NextResponse.json({
      success: true,
      message: 'Security rule updated successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ku60v332o().s[30]++;
    logger.error('Failed to update security rule', {
      ruleId: params.ruleId,
      error: (0, error_handler_1.getErrorMessage)(error)
    });
    /* istanbul ignore next */
    cov_2ku60v332o().s[31]++;
    return server_1.NextResponse.json({
      success: false,
      error: 'Failed to update security rule',
      details: (0, error_handler_1.getErrorMessage)(error)
    }, {
      status: 500
    });
  }
}
// DELETE /api/admin/security/rules/[ruleId] - Delete security rule
async function DELETE(request, {
  params
}) {
  /* istanbul ignore next */
  cov_2ku60v332o().f[3]++;
  cov_2ku60v332o().s[32]++;
  try {
    const {
      ruleId
    } =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[33]++, params);
    // Get client IP for audit logging
    const clientIP =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[34]++,
    /* istanbul ignore next */
    (cov_2ku60v332o().b[3][0]++, request.headers.get('x-forwarded-for')) ||
    /* istanbul ignore next */
    (cov_2ku60v332o().b[3][1]++, request.headers.get('x-real-ip')) ||
    /* istanbul ignore next */
    (cov_2ku60v332o().b[3][2]++, '127.0.0.1'));
    // Check if rule exists
    const rules =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[35]++, code_review_system_1.codeReviewSystem.getSecurityRules());
    const rule =
    /* istanbul ignore next */
    (cov_2ku60v332o().s[36]++, rules.find(r => {
      /* istanbul ignore next */
      cov_2ku60v332o().f[4]++;
      cov_2ku60v332o().s[37]++;
      return r.id === ruleId;
    }));
    /* istanbul ignore next */
    cov_2ku60v332o().s[38]++;
    if (!rule) {
      /* istanbul ignore next */
      cov_2ku60v332o().b[4][0]++;
      cov_2ku60v332o().s[39]++;
      return server_1.NextResponse.json({
        success: false,
        error: 'Security rule not found'
      }, {
        status: 404
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ku60v332o().b[4][1]++;
    }
    // Prevent deletion of built-in rules
    cov_2ku60v332o().s[40]++;
    if (!ruleId.startsWith('custom_')) {
      /* istanbul ignore next */
      cov_2ku60v332o().b[5][0]++;
      cov_2ku60v332o().s[41]++;
      return server_1.NextResponse.json({
        success: false,
        error: 'Cannot delete built-in security rules'
      }, {
        status: 403
      });
    } else
    /* istanbul ignore next */
    {
      cov_2ku60v332o().b[5][1]++;
    }
    // Delete security rule (Note: This would need to be implemented in the code review system)
    // For now, we'll just disable it
    cov_2ku60v332o().s[42]++;
    await code_review_system_1.codeReviewSystem.updateSecurityRule(ruleId, {
      enabled: false
    });
    // Record security event
    /* istanbul ignore next */
    cov_2ku60v332o().s[43]++;
    await security_audit_system_1.securityAuditSystem.recordEvent({
      type: security_audit_system_1.SecurityEventType.ADMIN_ACTION,
      severity: security_audit_system_1.SecuritySeverity.HIGH,
      ip: clientIP,
      details: {
        action: 'delete_security_rule',
        ruleId,
        ruleName: rule.name,
        category: rule.category
      },
      riskScore: 5
    });
    /* istanbul ignore next */
    cov_2ku60v332o().s[44]++;
    logger.info('Security rule deleted', {
      ruleId,
      ruleName: rule.name,
      clientIP
    });
    /* istanbul ignore next */
    cov_2ku60v332o().s[45]++;
    return server_1.NextResponse.json({
      success: true,
      message: 'Security rule deleted successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_2ku60v332o().s[46]++;
    logger.error('Failed to delete security rule', {
      ruleId: params.ruleId,
      error: (0, error_handler_1.getErrorMessage)(error)
    });
    /* istanbul ignore next */
    cov_2ku60v332o().s[47]++;
    return server_1.NextResponse.json({
      success: false,
      error: 'Failed to delete security rule',
      details: (0, error_handler_1.getErrorMessage)(error)
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,