{"file":"E:\\zk-agent\\tests\\middleware\\global-error-handler.test.ts","mappings":";AAAA,eAAe;AACf,0BAA0B;;AAE1B,mCAAyE;AAEzE,4BAA4B;AAC5B,MAAM,gBAAgB,GAAG;IACvB,IAAI,EAAE,WAAE,CAAC,EAAE,CAAC,CAAC,IAAS,EAAE,OAAa,EAAE,EAAE,CAAC,CAAC;QACzC,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI;QACtB,MAAM,EAAE,OAAO,EAAE,MAAM,IAAI,GAAG;QAC9B,OAAO,EAAE,OAAO,EAAE,OAAO,IAAI,EAAE;KAChC,CAAC,CAAC;CACJ,CAAC;AAEF,WAAE,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;IAC5B,YAAY,EAAE,gBAAgB;IAC9B,WAAW,EAAE,WAAE,CAAC,EAAE,EAAE;CACrB,CAAC,CAAC,CAAC;AAEJ,WAAE,CAAC,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE,CAAC,CAAC;IAC3C,SAAS,EAAE;QACT,KAAK,EAAE,WAAE,CAAC,EAAE,EAAE;QACd,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;QACb,IAAI,EAAE,WAAE,CAAC,EAAE,EAAE;KACd;CACF,CAAC,CAAC,CAAC;AAEJ,WAAE,CAAC,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE,CAAC,CAAC;IAC7C,SAAS,EAAE;QACT,gBAAgB,EAAE,kBAAkB;QACpC,aAAa,EAAE,eAAe;QAC9B,mBAAmB,EAAE,qBAAqB;QAC1C,cAAc,EAAE,gBAAgB;KACjC;CACF,CAAC,CAAC,CAAC;AAEJ,YAAY;AACZ,IAAK,cAKJ;AALD,WAAK,cAAc;IACjB,uDAAqC,CAAA;IACrC,iDAA+B,CAAA;IAC/B,+CAA6B,CAAA;IAC7B,6DAA2C,CAAA;AAC7C,CAAC,EALI,cAAc,KAAd,cAAc,QAKlB;AAED,iBAAiB;AACjB,MAAM,UAAW,SAAQ,KAAK;IAU5B,YACE,IAAoB,EACpB,OAAe,EACf,OAAa,EACb,UAAmB;QAEnB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAEO,oBAAoB,CAAC,IAAoB;QAC/C,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,cAAc,CAAC,gBAAgB;gBAClC,OAAO,GAAG,CAAC;YACb,KAAK,cAAc,CAAC,aAAa;gBAC/B,OAAO,GAAG,CAAC;YACb,KAAK,cAAc,CAAC,mBAAmB;gBACrC,OAAO,GAAG,CAAC;YACb;gBACE,OAAO,GAAG,CAAC;QACf,CAAC;IACH,CAAC;IAEO,cAAc,CAAC,IAAoB;QACzC,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,cAAc,CAAC,gBAAgB;gBAClC,OAAO,eAAe,CAAC;YACzB,KAAK,cAAc,CAAC,aAAa;gBAC/B,OAAO,cAAc,CAAC;YACxB,KAAK,cAAc,CAAC,mBAAmB;gBACrC,OAAO,eAAe,CAAC;YACzB;gBACE,OAAO,eAAe,CAAC;QAC3B,CAAC;IACH,CAAC;IAEO,gBAAgB,CAAC,IAAoB;QAC3C,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,cAAc,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3F,CAAC;CACF;AAED,aAAa;AACb,MAAM,kBAAkB;IAAxB;QAEU,eAAU,GAAG,CAAC,CAAC;QACf,kBAAa,GAAG,CAAC,CAAC;QAClB,uBAAkB,GAAG,KAAK,CAAC;QAClB,0BAAqB,GAAG,KAAK,CAAC;QAC9B,iBAAY,GAAG,KAAK,CAAC;QACrB,mBAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,IAAI,CAAC,CAAC;IAwJlF,CAAC;IArJC,MAAM,CAAC,WAAW;QAChB,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;YACjC,kBAAkB,CAAC,QAAQ,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACzD,CAAC;QACD,OAAO,kBAAkB,CAAC,QAAQ,CAAC;IACrC,CAAC;IAED,WAAW,CAAC,KAAyB,EAAE,OAAa;QAClD,IAAI,CAAC;YACH,IAAI,UAAsB,CAAC;YAE3B,IAAI,KAAK,YAAY,UAAU,EAAE,CAAC;gBAChC,UAAU,GAAG,KAAK,CAAC;YACrB,CAAC;iBAAM,CAAC;gBACN,SAAS;gBACT,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC5C,UAAU,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACjE,CAAC;YAED,OAAO;YACP,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAE7B,cAAc;YACd,IAAI,CAAC,6BAA6B,EAAE,CAAC;YAErC,QAAQ;YACR,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC3C,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,CAAC;YAED,OAAO,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QAC9C,CAAC;QAAC,OAAO,YAAY,EAAE,CAAC;YACtB,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,YAAY,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACvC,CAAC;IACH,CAAC;IAEO,aAAa,CAAC,KAAY;QAChC,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YAC7E,OAAO,cAAc,CAAC,gBAAgB,CAAC;QACzC,CAAC;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YACvE,OAAO,cAAc,CAAC,aAAa,CAAC;QACtC,CAAC;QACD,OAAO,cAAc,CAAC,YAAY,CAAC;IACrC,CAAC;IAEO,WAAW,CAAC,KAAiB;QACnC,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE;YAC/B,EAAE,EAAE,KAAK,CAAC,EAAE;YACZ,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,SAAS,EAAE,KAAK,CAAC,SAAS;SAC3B,CAAC,CAAC;IACL,CAAC;IAEO,gBAAgB;QACtB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;IAC3B,CAAC;IAEO,6BAA6B;QACnC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,aAAa;QACb,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YAC3E,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACtB,CAAC;QAED,OAAO;QACP,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;IAC3B,CAAC;IAEO,2BAA2B;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACjD,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;QAC3B,CAAC;QAED,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,cAAc,CAAC;IAChD,CAAC;IAEO,kBAAkB;QACxB,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAEjE,IAAI,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAClC,YAAY,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QAC9C,CAAC;QAED,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC,GAAG,EAAE;YAC9C,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QAC7D,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACjC,CAAC;IAEO,mBAAmB,CAAC,KAAiB;QAC3C,OAAO,gBAAgB,CAAC,IAAI,CAAC;YAC3B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE;gBACL,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,OAAO,EAAE,KAAK,CAAC,WAAW;gBAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;aACjB;YACD,SAAS,EAAE,KAAK,CAAC,EAAE;YACnB,SAAS,EAAE,KAAK,CAAC,SAAS;SAC3B,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC;IACnC,CAAC;IAEO,sBAAsB;QAC5B,OAAO,gBAAgB,CAAC,IAAI,CAAC;YAC3B,OAAO,EAAE,KAAK;YACd,KAAK,EAAE;gBACL,IAAI,EAAE,gBAAgB;gBACtB,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,cAAc;aACrB;YACD,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACtB,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED,aAAa;QACX,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,YAAY,EAAE,IAAI,CAAC,YAAY;SAChC,CAAC;IACJ,CAAC;IAED,aAAa;IACb,MAAM,CAAC,aAAa;QAClB,kBAAkB,CAAC,QAAQ,GAAG,SAAgB,CAAC;IACjD,CAAC;CACF;AAED,IAAA,iBAAQ,EAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,YAAgC,CAAC;IAErC,IAAA,mBAAU,EAAC,GAAG,EAAE;QACd,kBAAkB,CAAC,aAAa,EAAE,CAAC;QACnC,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAC;QAChD,OAAO,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;QACnC,WAAE,CAAC,aAAa,EAAE,CAAC;QACnB,WAAE,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACxD,WAAE,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QACvD,WAAE,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAS,EAAC,GAAG,EAAE;QACb,WAAE,CAAC,eAAe,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,WAAE,EAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAC;YACnD,MAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAC;YACnD,IAAA,eAAM,EAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,IAAA,WAAE,EAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,eAAe,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACvD,eAAe,CAAC,IAAI,GAAG,iBAAiB,CAAC;YAEzC,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;YACzD,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAA,eAAM,EAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YAClD,YAAY,CAAC,IAAI,GAAG,cAAc,CAAC;YAEnC,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;YACtD,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,UAAU,GAAG,IAAI,UAAU,CAC/B,cAAc,CAAC,gBAAgB,EAC/B,uBAAuB,EACvB,EAAE,KAAK,EAAE,OAAO,EAAE,CACnB,CAAC;YAEF,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACpD,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAA,WAAE,EAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5B,YAAY,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YACpD,CAAC;YAED,IAAA,eAAM,EAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,GAAG,CAAC;YAClC,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACnC,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAC;YAEhD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,YAAY,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;YACpD,CAAC;YAED,IAAA,eAAM,EAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,YAAY,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YAElD,MAAM,KAAK,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;YAC3C,IAAA,eAAM,EAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEjC,WAAE,CAAC,aAAa,EAAE,CAAC;YACnB,WAAE,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;YAE9B,YAAY,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YAErD,MAAM,QAAQ,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;YAC9C,IAAA,eAAM,EAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEpC,WAAE,CAAC,aAAa,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,IAAA,WAAE,EAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,YAAY,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;YAClD,IAAA,eAAM,EAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAExC,YAAY,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YAElD,MAAM,YAAY,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;YAClD,IAAA,eAAM,EAAC,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACxC,IAAA,eAAM,EAAC,YAAY,CAAC,aAAa,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAE,EAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,KAAK,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;YAC3C,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YAC/C,IAAA,eAAM,EAAC,KAAK,CAAC,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC7C,IAAA,eAAM,EAAC,KAAK,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,IAAA,WAAE,EAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,KAAK,GAAG,IAAI,UAAU,CAC1B,cAAc,CAAC,gBAAgB,EAC/B,uBAAuB,EACvB,EAAE,KAAK,EAAE,OAAO,EAAE,CACnB,CAAC;YAEF,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YAE3C,IAAA,eAAM,EAAC,YAAY,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACtD,IAAA,eAAM,EAAC,YAAY,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC7C,IAAA,eAAM,EAAC,YAAY,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACjD,IAAA,eAAM,EAAC,YAAY,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACjD,IAAA,eAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAClD,IAAA,eAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACrD,IAAA,eAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAA,WAAE,EAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,UAAU,GAAG,WAAE,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAE9C,MAAM,KAAK,GAAG,IAAI,UAAU,CAC1B,cAAc,CAAC,YAAY,EAC3B,mBAAmB,CACpB,CAAC;YAEF,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEhC,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC,oBAAoB,CACrC,iBAAiB,EACjB,eAAM,CAAC,gBAAgB,CAAC;gBACtB,EAAE,EAAE,eAAM,CAAC,GAAG,CAAC,MAAM,CAAC;gBACtB,IAAI,EAAE,cAAc,CAAC,YAAY;gBACjC,OAAO,EAAE,mBAAmB;gBAC5B,SAAS,EAAE,eAAM,CAAC,GAAG,CAAC,MAAM,CAAC;aAC9B,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,iBAAQ,EAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,IAAA,WAAE,EAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,cAAc;YACd,MAAM,mBAAmB,GAAI,YAAoB,CAAC,WAAW,CAAC;YAC7D,YAAoB,CAAC,WAAW,GAAG,GAAG,EAAE;gBACvC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACtC,CAAC,CAAC;YAEF,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YACjE,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAE7B,QAAQ;YACP,YAAoB,CAAC,WAAW,GAAG,mBAAmB,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,OAAO;AACP,IAAA,iBAAQ,EAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,IAAA,WAAE,EAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAC;QAEtD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAE/C,IAAA,eAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAA,eAAM,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;QAElD,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACzC,IAAA,eAAM,EAAC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,IAAA,eAAM,EAAC,YAAY,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACzC,IAAA,eAAM,EAAC,YAAY,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,8DAA8D,EAAE,GAAG,EAAE;QACtE,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,GAAG,CAAC;QAClC,kBAAkB,CAAC,aAAa,EAAE,CAAC;QACnC,MAAM,YAAY,GAAG,kBAAkB,CAAC,WAAW,EAAE,CAAC;QAEtD,QAAQ;QACR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,YAAY,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC;QAED,IAAA,eAAM,EAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvD,MAAM,KAAK,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;QAC3C,IAAA,eAAM,EAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAA,eAAM,EAAC,KAAK,CAAC,UAAU,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["E:\\zk-agent\\tests\\middleware\\global-error-handler.test.ts"],"sourcesContent":["// 简化的全局错误处理器测试\n// 避免Next.js依赖问题，专注于核心逻辑测试\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\n\n// Mock Next.js dependencies\nconst mockNextResponse = {\n  json: vi.fn((data: any, options?: any) => ({\n    json: async () => data,\n    status: options?.status || 200,\n    headers: options?.headers || {}\n  }))\n};\n\nvi.mock('next/server', () => ({\n  NextResponse: mockNextResponse,\n  NextRequest: vi.fn()\n}));\n\nvi.mock('../../lib/utils/api-logger', () => ({\n  ApiLogger: {\n    error: vi.fn(),\n    info: vi.fn(),\n    warn: vi.fn()\n  }\n}));\n\nvi.mock('../../lib/types/api-response', () => ({\n  ErrorCode: {\n    VALIDATION_ERROR: 'VALIDATION_ERROR',\n    NETWORK_ERROR: 'NETWORK_ERROR',\n    SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',\n    INTERNAL_ERROR: 'INTERNAL_ERROR'\n  }\n}));\n\n// 简化的错误类型定义\nenum AgentErrorType {\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  SYSTEM_ERROR = 'SYSTEM_ERROR',\n  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE'\n}\n\n// 简化的AgentError类\nclass AgentError extends Error {\n  public readonly id: string;\n  public readonly type: AgentErrorType;\n  public readonly statusCode: number;\n  public readonly userMessage: string;\n  public readonly retryable: boolean;\n  public readonly context?: any;\n  public readonly timestamp: string;\n  public override readonly stack?: string;\n\n  constructor(\n    type: AgentErrorType,\n    message: string,\n    context?: any,\n    statusCode?: number\n  ) {\n    super(message);\n    this.name = 'AgentError';\n    this.id = Math.random().toString(36).substr(2, 9);\n    this.type = type;\n    this.context = context;\n    this.timestamp = new Date().toISOString();\n    this.statusCode = statusCode || this.getDefaultStatusCode(type);\n    this.userMessage = this.getUserMessage(type);\n    this.retryable = this.isRetryableError(type);\n  }\n\n  private getDefaultStatusCode(type: AgentErrorType): number {\n    switch (type) {\n      case AgentErrorType.VALIDATION_ERROR:\n        return 400;\n      case AgentErrorType.NETWORK_ERROR:\n        return 502;\n      case AgentErrorType.SERVICE_UNAVAILABLE:\n        return 503;\n      default:\n        return 500;\n    }\n  }\n\n  private getUserMessage(type: AgentErrorType): string {\n    switch (type) {\n      case AgentErrorType.VALIDATION_ERROR:\n        return '请求参数有误，请检查后重试';\n      case AgentErrorType.NETWORK_ERROR:\n        return '网络连接异常，请稍后重试';\n      case AgentErrorType.SERVICE_UNAVAILABLE:\n        return '服务暂时不可用，请稍后重试';\n      default:\n        return '系统内部错误，请联系管理员';\n    }\n  }\n\n  private isRetryableError(type: AgentErrorType): boolean {\n    return [AgentErrorType.NETWORK_ERROR, AgentErrorType.SERVICE_UNAVAILABLE].includes(type);\n  }\n}\n\n// 简化的全局错误处理器\nclass GlobalErrorHandler {\n  private static instance: GlobalErrorHandler;\n  private errorCount = 0;\n  private lastErrorTime = 0;\n  private circuitBreakerOpen = false;\n  private readonly circuitBreakerTimeout = 60000;\n  private readonly timeWindowMs = 60000;\n  private readonly errorThreshold = parseInt(process.env.ERROR_THRESHOLD || '50');\n  private circuitBreakerResetTimer?: NodeJS.Timeout;\n\n  static getInstance(): GlobalErrorHandler {\n    if (!GlobalErrorHandler.instance) {\n      GlobalErrorHandler.instance = new GlobalErrorHandler();\n    }\n    return GlobalErrorHandler.instance;\n  }\n\n  handleError(error: Error | AgentError, context?: any): any {\n    try {\n      let agentError: AgentError;\n      \n      if (error instanceof AgentError) {\n        agentError = error;\n      } else {\n        // 分类普通错误\n        const errorType = this.classifyError(error);\n        agentError = new AgentError(errorType, error.message, context);\n      }\n\n      // 记录错误\n      this.recordError(agentError);\n      \n      // 检查时间窗口并更新统计\n      this.checkTimeWindowAndUpdateStats();\n      \n      // 检查断路器\n      if (this.errorCount >= this.errorThreshold) {\n        this.openCircuitBreaker();\n      }\n      \n      return this.createErrorResponse(agentError);\n    } catch (handlerError) {\n      console.error('Error in error handler:', handlerError);\n      return this.createFallbackResponse();\n    }\n  }\n\n  private classifyError(error: Error): AgentErrorType {\n    if (error.name === 'ValidationError' || error.message.includes('validation')) {\n      return AgentErrorType.VALIDATION_ERROR;\n    }\n    if (error.name === 'NetworkError' || error.message.includes('network')) {\n      return AgentErrorType.NETWORK_ERROR;\n    }\n    return AgentErrorType.SYSTEM_ERROR;\n  }\n\n  private recordError(error: AgentError): void {\n    console.error('Error recorded:', {\n      id: error.id,\n      type: error.type,\n      message: error.message,\n      timestamp: error.timestamp\n    });\n  }\n\n  private updateErrorStats(): void {\n    const now = Date.now();\n    this.errorCount++;\n    this.lastErrorTime = now;\n  }\n\n  private checkTimeWindowAndUpdateStats(): void {\n    const now = Date.now();\n    \n    // 检查时间窗口是否过期\n    if (this.lastErrorTime > 0 && now - this.lastErrorTime > this.timeWindowMs) {\n      this.errorCount = 0;\n    }\n    \n    // 更新统计\n    this.errorCount++;\n    this.lastErrorTime = now;\n  }\n\n  private shouldTriggerCircuitBreaker(): boolean {\n    const now = Date.now();\n    \n    if (now - this.lastErrorTime > this.timeWindowMs) {\n      this.errorCount = 0;\n      this.lastErrorTime = now;\n    }\n    \n    return this.errorCount >= this.errorThreshold;\n  }\n\n  private openCircuitBreaker(): void {\n    if (this.circuitBreakerOpen) {\n      return;\n    }\n    \n    this.circuitBreakerOpen = true;\n    console.warn('🚨 Circuit breaker opened due to high error rate');\n    \n    if (this.circuitBreakerResetTimer) {\n      clearTimeout(this.circuitBreakerResetTimer);\n    }\n    \n    this.circuitBreakerResetTimer = setTimeout(() => {\n      this.circuitBreakerOpen = false;\n      this.errorCount = 0;\n      this.lastErrorTime = 0;\n      console.info('✅ Circuit breaker closed, service restored');\n    }, this.circuitBreakerTimeout);\n  }\n\n  private createErrorResponse(error: AgentError): any {\n    return mockNextResponse.json({\n      success: false,\n      error: {\n        code: error.type,\n        message: error.userMessage,\n        type: error.type\n      },\n      requestId: error.id,\n      timestamp: error.timestamp\n    }, { status: error.statusCode });\n  }\n\n  private createFallbackResponse(): any {\n    return mockNextResponse.json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: '系统内部错误',\n        type: 'SYSTEM_ERROR'\n      },\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n\n  isCircuitBreakerOpen(): boolean {\n    return this.circuitBreakerOpen;\n  }\n\n  getErrorStats() {\n    return {\n      errorCount: this.errorCount,\n      lastErrorTime: this.lastErrorTime,\n      circuitBreakerOpen: this.circuitBreakerOpen,\n      errorThreshold: this.errorThreshold,\n      timeWindowMs: this.timeWindowMs\n    };\n  }\n\n  // 重置实例（用于测试）\n  static resetInstance(): void {\n    GlobalErrorHandler.instance = undefined as any;\n  }\n}\n\ndescribe('GlobalErrorHandler', () => {\n  let errorHandler: GlobalErrorHandler;\n  \n  beforeEach(() => {\n    GlobalErrorHandler.resetInstance();\n    errorHandler = GlobalErrorHandler.getInstance();\n    delete process.env.ERROR_THRESHOLD;\n    vi.clearAllMocks();\n    vi.spyOn(console, 'error').mockImplementation(() => {});\n    vi.spyOn(console, 'warn').mockImplementation(() => {});\n    vi.spyOn(console, 'info').mockImplementation(() => {});\n  });\n  \n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const instance1 = GlobalErrorHandler.getInstance();\n      const instance2 = GlobalErrorHandler.getInstance();\n      expect(instance1).toBe(instance2);\n    });\n  });\n\n  describe('Error Classification', () => {\n    it('should classify validation errors correctly', () => {\n      const validationError = new Error('Validation failed');\n      validationError.name = 'ValidationError';\n      \n      const result = errorHandler.handleError(validationError);\n      expect(result).toBeDefined();\n      expect(mockNextResponse.json).toHaveBeenCalled();\n    });\n\n    it('should classify network errors correctly', () => {\n      const networkError = new Error('Network timeout');\n      networkError.name = 'NetworkError';\n      \n      const result = errorHandler.handleError(networkError);\n      expect(result).toBeDefined();\n    });\n\n    it('should handle AgentError instances', () => {\n      const agentError = new AgentError(\n        AgentErrorType.VALIDATION_ERROR,\n        'Test validation error',\n        { field: 'email' }\n      );\n      \n      const result = errorHandler.handleError(agentError);\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('Circuit Breaker', () => {\n    it('should not trigger circuit breaker with few errors', () => {\n      for (let i = 0; i < 10; i++) {\n        errorHandler.handleError(new Error(`Error ${i}`));\n      }\n      \n      expect(errorHandler.isCircuitBreakerOpen()).toBe(false);\n    });\n\n    it('should trigger circuit breaker with many errors', () => {\n      process.env.ERROR_THRESHOLD = '5';\n      GlobalErrorHandler.resetInstance();\n      errorHandler = GlobalErrorHandler.getInstance();\n      \n      for (let i = 0; i < 6; i++) {\n        errorHandler.handleError(new Error(`Error ${i}`));\n      }\n      \n      expect(errorHandler.isCircuitBreakerOpen()).toBe(true);\n    });\n\n    it('should reset error count after time window', () => {\n      errorHandler.handleError(new Error('Test error'));\n      \n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBe(1);\n      \n      vi.useFakeTimers();\n      vi.advanceTimersByTime(61000);\n      \n      errorHandler.handleError(new Error('Another error'));\n      \n      const newStats = errorHandler.getErrorStats();\n      expect(newStats.errorCount).toBe(1);\n      \n      vi.useRealTimers();\n    });\n  });\n\n  describe('Error Statistics', () => {\n    it('should track error statistics correctly', () => {\n      const initialStats = errorHandler.getErrorStats();\n      expect(initialStats.errorCount).toBe(0);\n      \n      errorHandler.handleError(new Error('Test error'));\n      \n      const updatedStats = errorHandler.getErrorStats();\n      expect(updatedStats.errorCount).toBe(1);\n      expect(updatedStats.lastErrorTime).toBeGreaterThan(0);\n    });\n\n    it('should include configuration in stats', () => {\n      const stats = errorHandler.getErrorStats();\n      expect(stats).toHaveProperty('errorThreshold');\n      expect(stats).toHaveProperty('timeWindowMs');\n      expect(stats.timeWindowMs).toBe(60000);\n    });\n  });\n\n  describe('Error Response Format', () => {\n    it('should create properly formatted error responses', async () => {\n      const error = new AgentError(\n        AgentErrorType.VALIDATION_ERROR,\n        'Test validation error',\n        { field: 'email' }\n      );\n      \n      const response = errorHandler.handleError(error);\n      const responseBody = await response.json();\n      \n      expect(responseBody).toHaveProperty('success', false);\n      expect(responseBody).toHaveProperty('error');\n      expect(responseBody).toHaveProperty('requestId');\n      expect(responseBody).toHaveProperty('timestamp');\n      expect(responseBody.error).toHaveProperty('code');\n      expect(responseBody.error).toHaveProperty('message');\n      expect(responseBody.error).toHaveProperty('type');\n    });\n  });\n\n  describe('Error Recording', () => {\n    it('should record errors to monitoring system', () => {\n      const consoleSpy = vi.spyOn(console, 'error');\n      \n      const error = new AgentError(\n        AgentErrorType.SYSTEM_ERROR,\n        'Test system error'\n      );\n      \n      errorHandler.handleError(error);\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Error recorded:',\n        expect.objectContaining({\n          id: expect.any(String),\n          type: AgentErrorType.SYSTEM_ERROR,\n          message: 'Test system error',\n          timestamp: expect.any(String)\n        })\n      );\n    });\n  });\n\n  describe('Fallback Error Handling', () => {\n    it('should handle errors within the error handler', () => {\n      // 模拟错误处理器内部错误\n      const originalRecordError = (errorHandler as any).recordError;\n      (errorHandler as any).recordError = () => {\n        throw new Error('Recording failed');\n      };\n      \n      const result = errorHandler.handleError(new Error('Test error'));\n      expect(result).toBeDefined();\n      \n      // 恢复原方法\n      (errorHandler as any).recordError = originalRecordError;\n    });\n  });\n});\n\n// 集成测试\ndescribe('GlobalErrorHandler Integration', () => {\n  it('should handle complete error flow', async () => {\n    const errorHandler = GlobalErrorHandler.getInstance();\n    \n    const error = new Error('Database connection failed');\n    const result = errorHandler.handleError(error);\n    \n    expect(result).toBeDefined();\n    expect(result.status).toBeGreaterThanOrEqual(400);\n    \n    const responseBody = await result.json();\n    expect(responseBody.success).toBe(false);\n    expect(responseBody.error).toBeDefined();\n    expect(responseBody.requestId).toBeDefined();\n  });\n\n  it('should maintain circuit breaker state across multiple errors', () => {\n    process.env.ERROR_THRESHOLD = '3';\n    GlobalErrorHandler.resetInstance();\n    const errorHandler = GlobalErrorHandler.getInstance();\n    \n    // 触发断路器\n    for (let i = 0; i < 4; i++) {\n      errorHandler.handleError(new Error(`Error ${i}`));\n    }\n    \n    expect(errorHandler.isCircuitBreakerOpen()).toBe(true);\n    \n    const stats = errorHandler.getErrorStats();\n    expect(stats.circuitBreakerOpen).toBe(true);\n    expect(stats.errorCount).toBeGreaterThanOrEqual(3);\n  });\n});"],"version":3}