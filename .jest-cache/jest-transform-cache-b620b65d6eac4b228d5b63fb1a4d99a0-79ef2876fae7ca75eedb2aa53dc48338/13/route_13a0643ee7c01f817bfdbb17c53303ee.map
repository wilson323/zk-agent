{"version":3,"names":["cov_1h97lu4vqo","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","exports","POST","createApiRoute","RouteConfigs","protectedPost","req","params","validatedBody","validatedQuery","user","requestId","body","json","baseUrl","useProxy","apiKey","process","env","FASTGPT_API_KEY","apiUrl","FASTGPT_API_URL","endpoint","encodeURIComponent","replace","response","fetch","method","headers","Authorization","ok","rootEndpoint","rootResponse","errorData","catch","error","message","statusText","ApiResponseWrapper","success","status","rootData","data"],"sources":["E:\\zk-agent\\app\\api\\fastgpt\\test-connection\\route.ts"],"sourcesContent":["/**\n * @file fastgpt\\test-connection\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const body = await req.json()\n      const { baseUrl, useProxy } = body\n    \n      // Use server-side environment variable for API key\n      const apiKey = process.env.FASTGPT_API_KEY\n    \n      // Use server-side or provided API URL\n      const apiUrl = process.env.FASTGPT_API_URL || baseUrl || \"https://zktecoaihub.com\"\n    \n      // Determine the actual API endpoint for testing\n      const endpoint = useProxy\n        ? `/api/proxy?url=${encodeURIComponent(apiUrl.replace(/^https?:\\/\\//, \"\"))}/api/v1/models`\n        : `${apiUrl}/api/v1/models`\n    \n      // Make the request to test the connection\n      const response = await fetch(endpoint, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${apiKey}`,\n        },\n      })\n    \n      if (!response.ok) {\n        // Try with root endpoint if models endpoint fails\n        const rootEndpoint = useProxy\n          ? `/api/proxy?url=${encodeURIComponent(apiUrl.replace(/^https?:\\/\\//, \"\"))}`\n          : apiUrl\n    \n        const rootResponse = await fetch(rootEndpoint, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${apiKey}`,\n          },\n        })\n    \n        if (!rootResponse.ok) {\n          const errorData = await rootResponse.json().catch(() => ({ error: { message: rootResponse.statusText } }))\n          return ApiResponseWrapper.success({\n            success: false,\n            error: errorData.error || { message: rootResponse.statusText },\n            status: rootResponse.status,\n          })\n        }\n    \n        const rootData = await rootResponse.json().catch(() => ({}))\n        return ApiResponseWrapper.success({ success: true, data: rootData, useProxy })\n      }\n    \n      const data = await response.json()\n      return ApiResponseWrapper.success({ success: true, data, useProxy })\n    } catch (error) {\n      return ApiResponseWrapper.error('Internal server error', 500)\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}