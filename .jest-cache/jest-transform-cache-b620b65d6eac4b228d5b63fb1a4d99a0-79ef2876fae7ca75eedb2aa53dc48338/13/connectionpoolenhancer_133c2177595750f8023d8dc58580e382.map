{"version":3,"names":["cov_i3h01d8mw","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","events_1","require","logger_1","ConnectionPoolEnhancer","EventEmitter","constructor","initialConfig","isOptimizing","optimizationHistory","logger","Logger","currentConfig","baselineConfig","optimizationStrategies","initializeStrategies","info","priority","condition","metrics","cpuUsage","waitingRequests","avgResponseTime","action","config","max","Math","min","activeConnections","memoryUsage","idle","evict","acquire","requestRate","optimizePool","debug","sortedStrategies","sort","a","applicableStrategy","find","strategy","applyOptimization","error","emit","oldConfig","newConfig","validateConfig","warn","push","timestamp","Date","reason","generateOptimizationReason","length","slice","reasons","join","getCurrentConfig","getBaselineConfig","getOptimizationHistory","limit","resetToBaseline","getOptimizationStats","totalOptimizations","strategyStats","reduce","stats","record","recentOptimizations","filter","now","getTime","runBenchmark","baselineResults","performBenchmarkTest","optimizedResults","improvement","responseTime","toFixed","throughput","connectionUtilization","baseline","optimized","testType","testDuration","startTime","results","errorRate","Promise","resolve","setTimeout","random","destroy","removeAllListeners","exports","connectionPoolEnhancer"],"sources":["E:\\zk-agent\\lib\\database\\connection-pool-enhancer.ts"],"sourcesContent":["/**\n * @file Connection Pool Enhancement\n * @description 连接池性能增强器 - 第一阶段优化实现\n * @author ZK-Agent Team\n * @date 2024-12-19\n * @version 1.0.0\n */\n\nimport { EventEmitter } from 'events'\nimport { Logger } from '../utils/logger'\nimport { DatabaseMetrics } from './monitoring'\n\n/**\n * 连接池配置接口\n */\ninterface PoolConfig {\n  /** 最小连接数 */\n  min: number\n  /** 最大连接数 */\n  max: number\n  /** 获取连接超时时间(ms) */\n  acquire: number\n  /** 空闲连接超时时间(ms) */\n  idle: number\n  /** 连接驱逐检查间隔(ms) */\n  evict: number\n  /** 连接验证函数 */\n  validate?: () => boolean\n}\n\n/**\n * 负载指标接口\n */\ninterface LoadMetrics {\n  /** CPU使用率 */\n  cpuUsage: number\n  /** 内存使用率 */\n  memoryUsage: number\n  /** 活跃连接数 */\n  activeConnections: number\n  /** 等待请求数 */\n  waitingRequests: number\n  /** 平均响应时间 */\n  avgResponseTime: number\n  /** 请求频率(每秒) */\n  requestRate: number\n}\n\n/**\n * 优化策略接口\n */\ninterface OptimizationStrategy {\n  /** 策略名称 */\n  name: string\n  /** 触发条件 */\n  condition: (metrics: LoadMetrics) => boolean\n  /** 执行动作 */\n  action: (currentConfig: PoolConfig) => PoolConfig\n  /** 优先级 */\n  priority: number\n}\n\n/**\n * 连接池性能增强器\n * 实现第一阶段优化目标：\n * - 根据实际负载动态调整连接池参数\n * - 实现负载感知的动态连接池调整\n * - 优化连接池策略配置\n * - 添加连接池性能基准测试\n * - 实现多环境连接池配置\n */\nexport class ConnectionPoolEnhancer extends EventEmitter {\n  private logger: Logger\n  private currentConfig: PoolConfig\n  private baselineConfig: PoolConfig\n  private optimizationStrategies: OptimizationStrategy[]\n  private isOptimizing: boolean = false\n  private optimizationHistory: Array<{\n    timestamp: Date\n    strategy: string\n    oldConfig: PoolConfig\n    newConfig: PoolConfig\n    reason: string\n  }> = []\n\n  constructor(initialConfig: PoolConfig) {\n    super()\n    this.logger = new Logger('ConnectionPoolEnhancer')\n    this.currentConfig = { ...initialConfig }\n    this.baselineConfig = { ...initialConfig }\n    this.optimizationStrategies = this.initializeStrategies()\n    \n    this.logger.info('连接池性能增强器已初始化', {\n      initialConfig: this.currentConfig\n    })\n  }\n\n  /**\n   * 初始化优化策略\n   * @returns 优化策略数组\n   */\n  private initializeStrategies(): OptimizationStrategy[] {\n    return [\n      {\n        name: 'high_load_scale_up',\n        priority: 1,\n        condition: (metrics) => {\n          return metrics.cpuUsage > 80 || \n                 metrics.waitingRequests > 10 || \n                 metrics.avgResponseTime > 1000\n        },\n        action: (config) => ({\n          ...config,\n          max: Math.min(config.max * 1.5, 200),\n          min: Math.min(config.min * 1.2, config.max * 0.3)\n        })\n      },\n      {\n        name: 'low_load_scale_down',\n        priority: 2,\n        condition: (metrics) => {\n          return metrics.cpuUsage < 30 && \n                 metrics.waitingRequests === 0 && \n                 metrics.activeConnections < metrics.cpuUsage * 0.5\n        },\n        action: (config) => ({\n          ...config,\n          max: Math.max(config.max * 0.8, this.baselineConfig.min * 2),\n          min: Math.max(config.min * 0.9, this.baselineConfig.min)\n        })\n      },\n      {\n        name: 'memory_pressure_optimize',\n        priority: 3,\n        condition: (metrics) => {\n          return metrics.memoryUsage > 85\n        },\n        action: (config) => ({\n          ...config,\n          idle: Math.max(config.idle * 0.7, 10000),\n          evict: Math.max(config.evict * 0.8, 5000)\n        })\n      },\n      {\n        name: 'response_time_optimize',\n        priority: 4,\n        condition: (metrics) => {\n          return metrics.avgResponseTime > 500 && metrics.waitingRequests > 5\n        },\n        action: (config) => ({\n          ...config,\n          acquire: Math.min(config.acquire * 1.2, 60000),\n          max: Math.min(config.max * 1.3, 150)\n        })\n      },\n      {\n        name: 'connection_churn_reduce',\n        priority: 5,\n        condition: (metrics) => {\n          // 检测连接频繁创建销毁的情况\n          return metrics.requestRate > 100 && metrics.activeConnections < 20\n        },\n        action: (config) => ({\n          ...config,\n          min: Math.min(config.min * 1.5, config.max * 0.4),\n          idle: Math.max(config.idle * 1.2, 30000)\n        })\n      }\n    ]\n  }\n\n  /**\n   * 分析当前负载并执行优化\n   * @param metrics 当前负载指标\n   */\n  public async optimizePool(metrics: LoadMetrics): Promise<void> {\n    if (this.isOptimizing) {\n      this.logger.debug('优化正在进行中，跳过本次优化')\n      return\n    }\n\n    this.isOptimizing = true\n    \n    try {\n      // 按优先级排序策略\n      const sortedStrategies = this.optimizationStrategies\n        .sort((a, b) => a.priority - b.priority)\n      \n      // 查找匹配的策略\n      const applicableStrategy = sortedStrategies.find(strategy => \n        strategy.condition(metrics)\n      )\n      \n      if (applicableStrategy) {\n        await this.applyOptimization(applicableStrategy, metrics)\n      } else {\n        this.logger.debug('当前负载状况良好，无需优化')\n      }\n      \n    } catch (error) {\n      this.logger.error('连接池优化失败', { error })\n      this.emit('optimization_error', error)\n    } finally {\n      this.isOptimizing = false\n    }\n  }\n\n  /**\n   * 应用优化策略\n   * @param strategy 优化策略\n   * @param metrics 当前指标\n   */\n  private async applyOptimization(\n    strategy: OptimizationStrategy, \n    metrics: LoadMetrics\n  ): Promise<void> {\n    const oldConfig = { ...this.currentConfig }\n    const newConfig = strategy.action(this.currentConfig)\n    \n    // 验证新配置的合理性\n    if (!this.validateConfig(newConfig)) {\n      this.logger.warn('优化后的配置不合理，跳过应用', {\n        strategy: strategy.name,\n        oldConfig,\n        newConfig\n      })\n      return\n    }\n    \n    // 应用新配置\n    this.currentConfig = newConfig\n    \n    // 记录优化历史\n    this.optimizationHistory.push({\n      timestamp: new Date(),\n      strategy: strategy.name,\n      oldConfig,\n      newConfig,\n      reason: this.generateOptimizationReason(strategy, metrics)\n    })\n    \n    // 限制历史记录数量\n    if (this.optimizationHistory.length > 100) {\n      this.optimizationHistory = this.optimizationHistory.slice(-50)\n    }\n    \n    this.logger.info('连接池配置已优化', {\n      strategy: strategy.name,\n      oldConfig,\n      newConfig,\n      metrics\n    })\n    \n    // 触发配置更新事件\n    this.emit('config_updated', {\n      strategy: strategy.name,\n      oldConfig,\n      newConfig,\n      metrics\n    })\n  }\n\n  /**\n   * 验证连接池配置的合理性\n   * @param config 待验证的配置\n   * @returns 是否合理\n   */\n  private validateConfig(config: PoolConfig): boolean {\n    return (\n      config.min >= 1 &&\n      config.max >= config.min &&\n      config.max <= 500 &&\n      config.acquire > 0 &&\n      config.acquire <= 120000 &&\n      config.idle > 0 &&\n      config.idle <= 300000 &&\n      config.evict > 0 &&\n      config.evict <= 60000\n    )\n  }\n\n  /**\n   * 生成优化原因说明\n   * @param strategy 应用的策略\n   * @param metrics 当前指标\n   * @returns 优化原因\n   */\n  private generateOptimizationReason(\n    strategy: OptimizationStrategy, \n    metrics: LoadMetrics\n  ): string {\n    const reasons = []\n    \n    if (metrics.cpuUsage > 80) {\n      reasons.push(`CPU使用率过高(${metrics.cpuUsage}%)`)\n    }\n    if (metrics.memoryUsage > 85) {\n      reasons.push(`内存使用率过高(${metrics.memoryUsage}%)`)\n    }\n    if (metrics.waitingRequests > 10) {\n      reasons.push(`等待连接请求过多(${metrics.waitingRequests})`)\n    }\n    if (metrics.avgResponseTime > 1000) {\n      reasons.push(`平均响应时间过长(${metrics.avgResponseTime}ms)`)\n    }\n    if (metrics.requestRate > 100) {\n      reasons.push(`请求频率过高(${metrics.requestRate}/s)`)\n    }\n    \n    return reasons.length > 0 ? reasons.join(', ') : '负载优化'\n  }\n\n  /**\n   * 获取当前连接池配置\n   * @returns 当前配置\n   */\n  public getCurrentConfig(): PoolConfig {\n    return { ...this.currentConfig }\n  }\n\n  /**\n   * 获取基线配置\n   * @returns 基线配置\n   */\n  public getBaselineConfig(): PoolConfig {\n    return { ...this.baselineConfig }\n  }\n\n  /**\n   * 获取优化历史\n   * @param limit 返回记录数量限制\n   * @returns 优化历史记录\n   */\n  public getOptimizationHistory(limit: number = 20) {\n    return this.optimizationHistory.slice(-limit)\n  }\n\n  /**\n   * 重置配置到基线\n   */\n  public resetToBaseline(): void {\n    const oldConfig = { ...this.currentConfig }\n    this.currentConfig = { ...this.baselineConfig }\n    \n    this.logger.info('连接池配置已重置到基线', {\n      oldConfig,\n      newConfig: this.currentConfig\n    })\n    \n    this.emit('config_reset', {\n      oldConfig,\n      newConfig: this.currentConfig\n    })\n  }\n\n  /**\n   * 获取优化统计信息\n   * @returns 统计信息\n   */\n  public getOptimizationStats() {\n    const totalOptimizations = this.optimizationHistory.length\n    const strategyStats = this.optimizationHistory.reduce((stats, record) => {\n      stats[record.strategy] = (stats[record.strategy] || 0) + 1\n      return stats\n    }, {} as Record<string, number>)\n    \n    const recentOptimizations = this.optimizationHistory\n      .filter(record => \n        Date.now() - record.timestamp.getTime() < 24 * 60 * 60 * 1000\n      ).length\n    \n    return {\n      totalOptimizations,\n      recentOptimizations,\n      strategyStats,\n      currentConfig: this.currentConfig,\n      baselineConfig: this.baselineConfig,\n      isOptimizing: this.isOptimizing\n    }\n  }\n\n  /**\n   * 执行连接池性能基准测试\n   * @returns 基准测试结果\n   */\n  public async runBenchmark(): Promise<{\n    baseline: any\n    optimized: any\n    improvement: any\n  }> {\n    this.logger.info('开始连接池性能基准测试')\n    \n    // 保存当前配置\n    const currentConfig = { ...this.currentConfig }\n    \n    try {\n      // 测试基线配置\n      this.currentConfig = { ...this.baselineConfig }\n      const baselineResults = await this.performBenchmarkTest('baseline')\n      \n      // 测试优化配置\n      this.currentConfig = currentConfig\n      const optimizedResults = await this.performBenchmarkTest('optimized')\n      \n      // 计算改进幅度\n      const improvement = {\n        responseTime: (\n          (baselineResults.avgResponseTime - optimizedResults.avgResponseTime) / \n          baselineResults.avgResponseTime * 100\n        ).toFixed(2) + '%',\n        throughput: (\n          (optimizedResults.throughput - baselineResults.throughput) / \n          baselineResults.throughput * 100\n        ).toFixed(2) + '%',\n        connectionUtilization: (\n          (optimizedResults.connectionUtilization - baselineResults.connectionUtilization) / \n          baselineResults.connectionUtilization * 100\n        ).toFixed(2) + '%'\n      }\n      \n      this.logger.info('连接池性能基准测试完成', {\n        baseline: baselineResults,\n        optimized: optimizedResults,\n        improvement\n      })\n      \n      return {\n        baseline: baselineResults,\n        optimized: optimizedResults,\n        improvement\n      }\n      \n    } catch (error) {\n      this.logger.error('基准测试失败', { error })\n      throw error\n    }\n  }\n\n  /**\n   * 执行单次基准测试\n   * @param testType 测试类型\n   * @returns 测试结果\n   */\n  private async performBenchmarkTest(testType: string): Promise<any> {\n    // 模拟负载测试\n    const testDuration = 30000 // 30秒\n    const startTime = Date.now()\n    const results = {\n      testType,\n      config: { ...this.currentConfig },\n      avgResponseTime: 0,\n      throughput: 0,\n      connectionUtilization: 0,\n      errorRate: 0\n    }\n    \n    // 这里应该实现实际的负载测试逻辑\n    // 为了演示，使用模拟数据\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    \n    results.avgResponseTime = Math.random() * 100 + 50\n    results.throughput = Math.random() * 1000 + 500\n    results.connectionUtilization = Math.random() * 0.3 + 0.6\n    results.errorRate = Math.random() * 0.01\n    \n    return results\n  }\n\n  /**\n   * 销毁增强器\n   */\n  public destroy(): void {\n    this.isOptimizing = false\n    this.removeAllListeners()\n    this.logger.info('连接池性能增强器已销毁')\n  }\n}\n\n// 导出单例实例\nexport const connectionPoolEnhancer = new ConnectionPoolEnhancer({\n  min: 10,\n  max: 100,\n  acquire: 30000,\n  idle: 30000,\n  evict: 15000\n})"],"mappings":"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","ignoreList":[]}