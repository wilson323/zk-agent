ed9687209e2269b2cc676520afd0fd22
"use strict";

/**
 * @file fastgpt\test-connection\route.ts
 * @description Migrated API route with global error handling
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_1h97lu4vqo() {
  var path = "E:\\zk-agent\\app\\api\\fastgpt\\test-connection\\route.ts";
  var hash = "2b047a6e18162ae42fbd65086507097523558b5d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\fastgpt\\test-connection\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 22
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "4": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 59,
          column: 3
        }
      },
      "5": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "6": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 37
        }
      },
      "7": {
        start: {
          line: 15,
          column: 38
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "8": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 17,
          column: 50
        }
      },
      "9": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 19,
          column: 90
        }
      },
      "10": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 23,
          column: 39
        }
      },
      "11": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "12": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "13": {
        start: {
          line: 33,
          column: 33
        },
        end: {
          line: 35,
          column: 24
        }
      },
      "14": {
        start: {
          line: 36,
          column: 33
        },
        end: {
          line: 41,
          column: 14
        }
      },
      "15": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "16": {
        start: {
          line: 43,
          column: 34
        },
        end: {
          line: 43,
          column: 122
        }
      },
      "17": {
        start: {
          line: 43,
          column: 73
        },
        end: {
          line: 43,
          column: 120
        }
      },
      "18": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 48,
          column: 19
        }
      },
      "19": {
        start: {
          line: 50,
          column: 29
        },
        end: {
          line: 50,
          column: 72
        }
      },
      "20": {
        start: {
          line: 50,
          column: 68
        },
        end: {
          line: 50,
          column: 70
        }
      },
      "21": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 104
        }
      },
      "22": {
        start: {
          line: 53,
          column: 21
        },
        end: {
          line: 53,
          column: 42
        }
      },
      "23": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 90
        }
      },
      "24": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 83
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 105
          },
          end: {
            line: 12,
            column: 106
          }
        },
        loc: {
          start: {
            line: 12,
            column: 180
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 66
          },
          end: {
            line: 43,
            column: 67
          }
        },
        loc: {
          start: {
            line: 43,
            column: 73
          },
          end: {
            line: 43,
            column: 120
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 50,
            column: 61
          },
          end: {
            line: 50,
            column: 62
          }
        },
        loc: {
          start: {
            line: 50,
            column: 68
          },
          end: {
            line: 50,
            column: 70
          }
        },
        line: 50
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 19,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 19,
            column: 50
          }
        }, {
          start: {
            line: 19,
            column: 54
          },
          end: {
            line: 19,
            column: 61
          }
        }, {
          start: {
            line: 19,
            column: 65
          },
          end: {
            line: 19,
            column: 90
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 25
          },
          end: {
            line: 23,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 14
          },
          end: {
            line: 22,
            column: 102
          }
        }, {
          start: {
            line: 23,
            column: 14
          },
          end: {
            line: 23,
            column: 39
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 33
          },
          end: {
            line: 35,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 34,
            column: 18
          },
          end: {
            line: 34,
            column: 92
          }
        }, {
          start: {
            line: 35,
            column: 18
          },
          end: {
            line: 35,
            column: 24
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "5": {
        loc: {
          start: {
            line: 46,
            column: 27
          },
          end: {
            line: 46,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 27
          },
          end: {
            line: 46,
            column: 42
          }
        }, {
          start: {
            line: 46,
            column: 46
          },
          end: {
            line: 46,
            column: 82
          }
        }],
        line: 46
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\fastgpt\\test-connection\\route.ts",
      mappings: ";AAAA;;;;;GAKG;;;AAGH,0EAAqG;AACrG,uDAA4D;AAE/C,QAAA,IAAI,GAAG,IAAA,kCAAc,EAChC,gCAAY,CAAC,aAAa,EAAE,EAC5B,KAAK,EAAE,GAAgB,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;IACrF,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAA;QAC7B,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAA;QAElC,mDAAmD;QACnD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAA;QAE1C,sCAAsC;QACtC,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,OAAO,IAAI,yBAAyB,CAAA;QAElF,gDAAgD;QAChD,MAAM,QAAQ,GAAG,QAAQ;YACvB,CAAC,CAAC,kBAAkB,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,gBAAgB;YAC1F,CAAC,CAAC,GAAG,MAAM,gBAAgB,CAAA;QAE7B,0CAA0C;QAC1C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE;YACrC,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACP,aAAa,EAAE,UAAU,MAAM,EAAE;aAClC;SACF,CAAC,CAAA;QAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,kDAAkD;YAClD,MAAM,YAAY,GAAG,QAAQ;gBAC3B,CAAC,CAAC,kBAAkB,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,EAAE;gBAC5E,CAAC,CAAC,MAAM,CAAA;YAEV,MAAM,YAAY,GAAG,MAAM,KAAK,CAAC,YAAY,EAAE;gBAC7C,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE;oBACP,aAAa,EAAE,UAAU,MAAM,EAAE;iBAClC;aACF,CAAC,CAAA;YAEF,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,CAAC;gBACrB,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,CAAA;gBAC1G,OAAO,+BAAkB,CAAC,OAAO,CAAC;oBAChC,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,SAAS,CAAC,KAAK,IAAI,EAAE,OAAO,EAAE,YAAY,CAAC,UAAU,EAAE;oBAC9D,MAAM,EAAE,YAAY,CAAC,MAAM;iBAC5B,CAAC,CAAA;YACJ,CAAC;YAED,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC5D,OAAO,+BAAkB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAA;QAChF,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;QAClC,OAAO,+BAAkB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAA;IACtE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,+BAAkB,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAA;IAC/D,CAAC;AACH,CAAC,CACF,CAAC",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\fastgpt\\test-connection\\route.ts"],
      sourcesContent: ["/**\n * @file fastgpt\\test-connection\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const body = await req.json()\n      const { baseUrl, useProxy } = body\n    \n      // Use server-side environment variable for API key\n      const apiKey = process.env.FASTGPT_API_KEY\n    \n      // Use server-side or provided API URL\n      const apiUrl = process.env.FASTGPT_API_URL || baseUrl || \"https://zktecoaihub.com\"\n    \n      // Determine the actual API endpoint for testing\n      const endpoint = useProxy\n        ? `/api/proxy?url=${encodeURIComponent(apiUrl.replace(/^https?:\\/\\//, \"\"))}/api/v1/models`\n        : `${apiUrl}/api/v1/models`\n    \n      // Make the request to test the connection\n      const response = await fetch(endpoint, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${apiKey}`,\n        },\n      })\n    \n      if (!response.ok) {\n        // Try with root endpoint if models endpoint fails\n        const rootEndpoint = useProxy\n          ? `/api/proxy?url=${encodeURIComponent(apiUrl.replace(/^https?:\\/\\//, \"\"))}`\n          : apiUrl\n    \n        const rootResponse = await fetch(rootEndpoint, {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${apiKey}`,\n          },\n        })\n    \n        if (!rootResponse.ok) {\n          const errorData = await rootResponse.json().catch(() => ({ error: { message: rootResponse.statusText } }))\n          return ApiResponseWrapper.success({\n            success: false,\n            error: errorData.error || { message: rootResponse.statusText },\n            status: rootResponse.status,\n          })\n        }\n    \n        const rootData = await rootResponse.json().catch(() => ({}))\n        return ApiResponseWrapper.success({ success: true, data: rootData, useProxy })\n      }\n    \n      const data = await response.json()\n      return ApiResponseWrapper.success({ success: true, data, useProxy })\n    } catch (error) {\n      return ApiResponseWrapper.error('Internal server error', 500)\n    }\n  }\n);\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2b047a6e18162ae42fbd65086507097523558b5d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1h97lu4vqo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1h97lu4vqo();
cov_1h97lu4vqo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1h97lu4vqo().s[1]++;
exports.POST = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_1h97lu4vqo().s[2]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_1h97lu4vqo().s[3]++, require("@/lib/utils/api-helper"));
/* istanbul ignore next */
cov_1h97lu4vqo().s[4]++;
exports.POST = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPost(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_1h97lu4vqo().f[0]++;
  cov_1h97lu4vqo().s[5]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1h97lu4vqo().s[6]++, await req.json());
    const {
      baseUrl,
      useProxy
    } =
    /* istanbul ignore next */
    (cov_1h97lu4vqo().s[7]++, body);
    // Use server-side environment variable for API key
    const apiKey =
    /* istanbul ignore next */
    (cov_1h97lu4vqo().s[8]++, process.env.FASTGPT_API_KEY);
    // Use server-side or provided API URL
    const apiUrl =
    /* istanbul ignore next */
    (cov_1h97lu4vqo().s[9]++,
    /* istanbul ignore next */
    (cov_1h97lu4vqo().b[0][0]++, process.env.FASTGPT_API_URL) ||
    /* istanbul ignore next */
    (cov_1h97lu4vqo().b[0][1]++, baseUrl) ||
    /* istanbul ignore next */
    (cov_1h97lu4vqo().b[0][2]++, "https://zktecoaihub.com"));
    // Determine the actual API endpoint for testing
    const endpoint =
    /* istanbul ignore next */
    (cov_1h97lu4vqo().s[10]++, useProxy ?
    /* istanbul ignore next */
    (cov_1h97lu4vqo().b[1][0]++, `/api/proxy?url=${encodeURIComponent(apiUrl.replace(/^https?:\/\//, ""))}/api/v1/models`) :
    /* istanbul ignore next */
    (cov_1h97lu4vqo().b[1][1]++, `${apiUrl}/api/v1/models`));
    // Make the request to test the connection
    const response =
    /* istanbul ignore next */
    (cov_1h97lu4vqo().s[11]++, await fetch(endpoint, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${apiKey}`
      }
    }));
    /* istanbul ignore next */
    cov_1h97lu4vqo().s[12]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_1h97lu4vqo().b[2][0]++;
      // Try with root endpoint if models endpoint fails
      const rootEndpoint =
      /* istanbul ignore next */
      (cov_1h97lu4vqo().s[13]++, useProxy ?
      /* istanbul ignore next */
      (cov_1h97lu4vqo().b[3][0]++, `/api/proxy?url=${encodeURIComponent(apiUrl.replace(/^https?:\/\//, ""))}`) :
      /* istanbul ignore next */
      (cov_1h97lu4vqo().b[3][1]++, apiUrl));
      const rootResponse =
      /* istanbul ignore next */
      (cov_1h97lu4vqo().s[14]++, await fetch(rootEndpoint, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${apiKey}`
        }
      }));
      /* istanbul ignore next */
      cov_1h97lu4vqo().s[15]++;
      if (!rootResponse.ok) {
        /* istanbul ignore next */
        cov_1h97lu4vqo().b[4][0]++;
        const errorData =
        /* istanbul ignore next */
        (cov_1h97lu4vqo().s[16]++, await rootResponse.json().catch(() => {
          /* istanbul ignore next */
          cov_1h97lu4vqo().f[1]++;
          cov_1h97lu4vqo().s[17]++;
          return {
            error: {
              message: rootResponse.statusText
            }
          };
        }));
        /* istanbul ignore next */
        cov_1h97lu4vqo().s[18]++;
        return api_helper_1.ApiResponseWrapper.success({
          success: false,
          error:
          /* istanbul ignore next */
          (cov_1h97lu4vqo().b[5][0]++, errorData.error) ||
          /* istanbul ignore next */
          (cov_1h97lu4vqo().b[5][1]++, {
            message: rootResponse.statusText
          }),
          status: rootResponse.status
        });
      } else
      /* istanbul ignore next */
      {
        cov_1h97lu4vqo().b[4][1]++;
      }
      const rootData =
      /* istanbul ignore next */
      (cov_1h97lu4vqo().s[19]++, await rootResponse.json().catch(() => {
        /* istanbul ignore next */
        cov_1h97lu4vqo().f[2]++;
        cov_1h97lu4vqo().s[20]++;
        return {};
      }));
      /* istanbul ignore next */
      cov_1h97lu4vqo().s[21]++;
      return api_helper_1.ApiResponseWrapper.success({
        success: true,
        data: rootData,
        useProxy
      });
    } else
    /* istanbul ignore next */
    {
      cov_1h97lu4vqo().b[2][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_1h97lu4vqo().s[22]++, await response.json());
    /* istanbul ignore next */
    cov_1h97lu4vqo().s[23]++;
    return api_helper_1.ApiResponseWrapper.success({
      success: true,
      data,
      useProxy
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1h97lu4vqo().s[24]++;
    return api_helper_1.ApiResponseWrapper.error('Internal server error', 500);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,