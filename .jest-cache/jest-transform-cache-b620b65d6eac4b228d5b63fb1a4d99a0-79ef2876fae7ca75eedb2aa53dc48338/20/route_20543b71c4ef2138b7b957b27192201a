09f20c9913cf1d87a9b0ddd154510c82
"use strict";

/**
 * @file proxy\route.ts
 * @description Migrated API route with global error handling
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_21likxh9fg() {
  var path = "E:\\zk-agent\\app\\api\\proxy\\route.ts";
  var hash = "c42173bc680e1354ba0d440369f6b82e0bea59b7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\proxy\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "2": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 73
        }
      },
      "3": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 54
        }
      },
      "4": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "5": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "6": {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 39
        }
      },
      "7": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 18,
          column: 9
        }
      },
      "8": {
        start: {
          line: 17,
          column: 12
        },
        end: {
          line: 17,
          column: 116
        }
      },
      "9": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 71
        }
      },
      "10": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "11": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 37,
          column: 11
        }
      },
      "12": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 107
        }
      },
      "13": {
        start: {
          line: 43,
          column: 0
        },
        end: {
          line: 80,
          column: 3
        }
      },
      "14": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "15": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 36
        }
      },
      "16": {
        start: {
          line: 47,
          column: 21
        },
        end: {
          line: 47,
          column: 59
        }
      },
      "17": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 50
        }
      },
      "18": {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 50
        }
      },
      "19": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 53,
          column: 9
        }
      },
      "20": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 127
        }
      },
      "21": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 55,
          column: 55
        }
      },
      "22": {
        start: {
          line: 55,
          column: 51
        },
        end: {
          line: 55,
          column: 53
        }
      },
      "23": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 42
        }
      },
      "24": {
        start: {
          line: 59,
          column: 25
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "25": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "26": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 107
        }
      },
      "27": {
        start: {
          line: 81,
          column: 0
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "28": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "29": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 36
        }
      },
      "30": {
        start: {
          line: 85,
          column: 21
        },
        end: {
          line: 85,
          column: 59
        }
      },
      "31": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 50
        }
      },
      "32": {
        start: {
          line: 88,
          column: 23
        },
        end: {
          line: 88,
          column: 50
        }
      },
      "33": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "34": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 127
        }
      },
      "35": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 42
        }
      },
      "36": {
        start: {
          line: 95,
          column: 25
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "37": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 110,
          column: 11
        }
      },
      "38": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 107
        }
      },
      "39": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 153,
          column: 3
        }
      },
      "40": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "41": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 36
        }
      },
      "42": {
        start: {
          line: 120,
          column: 21
        },
        end: {
          line: 120,
          column: 59
        }
      },
      "43": {
        start: {
          line: 122,
          column: 23
        },
        end: {
          line: 122,
          column: 50
        }
      },
      "44": {
        start: {
          line: 123,
          column: 23
        },
        end: {
          line: 123,
          column: 50
        }
      },
      "45": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 126,
          column: 9
        }
      },
      "46": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 127
        }
      },
      "47": {
        start: {
          line: 128,
          column: 21
        },
        end: {
          line: 128,
          column: 55
        }
      },
      "48": {
        start: {
          line: 128,
          column: 51
        },
        end: {
          line: 128,
          column: 53
        }
      },
      "49": {
        start: {
          line: 130,
          column: 24
        },
        end: {
          line: 130,
          column: 42
        }
      },
      "50": {
        start: {
          line: 132,
          column: 25
        },
        end: {
          line: 139,
          column: 10
        }
      },
      "51": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 148,
          column: 11
        }
      },
      "52": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 107
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 100
          },
          end: {
            line: 12,
            column: 101
          }
        },
        loc: {
          start: {
            line: 12,
            column: 175
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 103
          },
          end: {
            line: 43,
            column: 104
          }
        },
        loc: {
          start: {
            line: 43,
            column: 178
          },
          end: {
            line: 80,
            column: 1
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 44
          },
          end: {
            line: 55,
            column: 45
          }
        },
        loc: {
          start: {
            line: 55,
            column: 51
          },
          end: {
            line: 55,
            column: 53
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 107
          },
          end: {
            line: 81,
            column: 108
          }
        },
        loc: {
          start: {
            line: 81,
            column: 182
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 116,
            column: 105
          },
          end: {
            line: 116,
            column: 106
          }
        },
        loc: {
          start: {
            line: 116,
            column: 180
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 116
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 128,
            column: 44
          },
          end: {
            line: 128,
            column: 45
          }
        },
        loc: {
          start: {
            line: 128,
            column: 51
          },
          end: {
            line: 128,
            column: 53
          }
        },
        line: 128
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 18,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 49
          },
          end: {
            line: 20,
            column: 52
          }
        }, {
          start: {
            line: 20,
            column: 55
          },
          end: {
            line: 20,
            column: 71
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 31
          },
          end: {
            line: 26,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 31
          },
          end: {
            line: 26,
            column: 63
          }
        }, {
          start: {
            line: 26,
            column: 67
          },
          end: {
            line: 26,
            column: 69
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 68
          }
        }, {
          start: {
            line: 34,
            column: 72
          },
          end: {
            line: 34,
            column: 90
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 53,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 19
          }
        }, {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 51,
            column: 30
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 32
          },
          end: {
            line: 72,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 32
          },
          end: {
            line: 72,
            column: 68
          }
        }, {
          start: {
            line: 72,
            column: 72
          },
          end: {
            line: 72,
            column: 90
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 89,
            column: 19
          }
        }, {
          start: {
            line: 89,
            column: 23
          },
          end: {
            line: 89,
            column: 30
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 32
          },
          end: {
            line: 107,
            column: 68
          }
        }, {
          start: {
            line: 107,
            column: 72
          },
          end: {
            line: 107,
            column: 90
          }
        }],
        line: 107
      },
      "10": {
        loc: {
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 8
          },
          end: {
            line: 126,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 19
          }
        }, {
          start: {
            line: 124,
            column: 23
          },
          end: {
            line: 124,
            column: 30
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 145,
            column: 32
          },
          end: {
            line: 145,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 32
          },
          end: {
            line: 145,
            column: 68
          }
        }, {
          start: {
            line: 145,
            column: 72
          },
          end: {
            line: 145,
            column: 90
          }
        }],
        line: 145
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\proxy\\route.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\proxy\\route.ts"],
      sourcesContent: ["/**\n * @file proxy\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // Get the URL from the query parameter\n      const url = validatedQuery?.url as string\n      \n      if (!url) {\n        return ApiResponseWrapper.error(\n          { message: 'URL parameter is required' },\n          { status: 400 }\n        )\n      }\n      \n      // Construct the full URL\n      const fullUrl = url.startsWith(\"http\") ? url : `https://${url}`\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: req.headers.get(\"Authorization\") || \"\",\n        },\n      })\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        { message: 'Proxy request failed' },\n        { status: 500 }\n      )\n    }\n  }\n);\n\nexport const PUT = createApiRoute(\n  RouteConfigs.protectedPut(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // \u83B7\u53D6\u8BF7\u6C42\u8DEF\u5F84\n      const url = new URL(req.url)\n      const path = url.pathname.replace(\"/api/proxy\", \"\")\n      \n      // \u83B7\u53D6\u73AF\u5883\u53D8\u91CF\n      const apiUrl = process.env.FASTGPT_API_URL\n      const apiKey = process.env.FASTGPT_API_KEY\n      \n      if (!apiUrl || !apiKey) {\n        return ApiResponseWrapper.error(\n          { message: 'FastGPT API configuration is missing' },\n          { status: 500 }\n        )\n      }\n      \n      // Get the request body\n      const body = await req.json().catch(() => ({}))\n      \n      // Construct the full URL\n      const fullUrl = `${apiUrl}${path}`\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify(body),\n      })\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        { message: 'Proxy request failed' },\n        { status: 500 }\n      )\n    }\n  }\n);\n\nexport const DELETE = createApiRoute(\n  RouteConfigs.admin('DELETE'),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // \u83B7\u53D6\u8BF7\u6C42\u8DEF\u5F84\n      const url = new URL(req.url)\n      const path = url.pathname.replace(\"/api/proxy\", \"\")\n      \n      // \u83B7\u53D6\u73AF\u5883\u53D8\u91CF\n      const apiUrl = process.env.FASTGPT_API_URL\n      const apiKey = process.env.FASTGPT_API_KEY\n      \n      if (!apiUrl || !apiKey) {\n        return ApiResponseWrapper.error(\n          { message: 'FastGPT API configuration is missing' },\n          { status: 500 }\n        )\n      }\n      \n      // Construct the full URL\n      const fullUrl = `${apiUrl}${path}`\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n      })\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        { message: 'Proxy request failed' },\n        { status: 500 }\n      )\n    }\n  }\n );\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      // \u83B7\u53D6\u8BF7\u6C42\u8DEF\u5F84\n      const url = new URL(req.url)\n      const path = url.pathname.replace(\"/api/proxy\", \"\")\n      \n      // \u83B7\u53D6\u73AF\u5883\u53D8\u91CF\n      const apiUrl = process.env.FASTGPT_API_URL\n      const apiKey = process.env.FASTGPT_API_KEY\n      \n      if (!apiUrl || !apiKey) {\n        return ApiResponseWrapper.error(\n          { message: 'FastGPT API configuration is missing' },\n          { status: 500 }\n        )\n      }\n      \n      // Get the request body\n      const body = await req.json().catch(() => ({}))\n      \n      // Construct the full URL\n      const fullUrl = `${apiUrl}${path}`\n      \n      // Forward the request to the target URL\n      const response = await fetch(fullUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${apiKey}`,\n        },\n        body: JSON.stringify(body),\n      })\n      \n      // Return the response from the target URL\n      return new Response(response.body, {\n        status: response.status,\n        statusText: response.statusText,\n        headers: {\n          \"Content-Type\": response.headers.get(\"Content-Type\") || \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      })\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        { message: 'Proxy request failed' },\n        { status: 500 }\n      )\n    }\n  }\n);\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c42173bc680e1354ba0d440369f6b82e0bea59b7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_21likxh9fg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_21likxh9fg();
cov_21likxh9fg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_21likxh9fg().s[1]++;
exports.POST = exports.DELETE = exports.PUT = exports.GET = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_21likxh9fg().s[2]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_21likxh9fg().s[3]++, require("@/lib/utils/api-helper"));
/* istanbul ignore next */
cov_21likxh9fg().s[4]++;
exports.GET = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.publicGet(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[0]++;
  cov_21likxh9fg().s[5]++;
  try {
    // Get the URL from the query parameter
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[6]++, validatedQuery?.url);
    /* istanbul ignore next */
    cov_21likxh9fg().s[7]++;
    if (!url) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[0][0]++;
      cov_21likxh9fg().s[8]++;
      return api_helper_1.ApiResponseWrapper.error({
        message: 'URL parameter is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[0][1]++;
    }
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[9]++, url.startsWith("http") ?
    /* istanbul ignore next */
    (cov_21likxh9fg().b[1][0]++, url) :
    /* istanbul ignore next */
    (cov_21likxh9fg().b[1][1]++, `https://${url}`));
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[10]++, await fetch(fullUrl, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization:
        /* istanbul ignore next */
        (cov_21likxh9fg().b[2][0]++, req.headers.get("Authorization")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[2][1]++, "")
      }
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[11]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[3][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[3][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[12]++;
    return api_helper_1.ApiResponseWrapper.error({
      message: 'Proxy request failed'
    }, {
      status: 500
    });
  }
});
/* istanbul ignore next */
cov_21likxh9fg().s[13]++;
exports.PUT = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPut(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[1]++;
  cov_21likxh9fg().s[14]++;
  try {
    // 获取请求路径
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[15]++, new URL(req.url));
    const path =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[16]++, url.pathname.replace("/api/proxy", ""));
    // 获取环境变量
    const apiUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[17]++, process.env.FASTGPT_API_URL);
    const apiKey =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[18]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_21likxh9fg().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_21likxh9fg().b[5][0]++, !apiUrl) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[5][1]++, !apiKey)) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[4][0]++;
      cov_21likxh9fg().s[20]++;
      return api_helper_1.ApiResponseWrapper.error({
        message: 'FastGPT API configuration is missing'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[4][1]++;
    }
    // Get the request body
    const body =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[21]++, await req.json().catch(() => {
      /* istanbul ignore next */
      cov_21likxh9fg().f[2]++;
      cov_21likxh9fg().s[22]++;
      return {};
    }));
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[23]++, `${apiUrl}${path}`);
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[24]++, await fetch(fullUrl, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify(body)
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[25]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[6][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[6][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[26]++;
    return api_helper_1.ApiResponseWrapper.error({
      message: 'Proxy request failed'
    }, {
      status: 500
    });
  }
});
/* istanbul ignore next */
cov_21likxh9fg().s[27]++;
exports.DELETE = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.admin('DELETE'), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[3]++;
  cov_21likxh9fg().s[28]++;
  try {
    // 获取请求路径
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[29]++, new URL(req.url));
    const path =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[30]++, url.pathname.replace("/api/proxy", ""));
    // 获取环境变量
    const apiUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[31]++, process.env.FASTGPT_API_URL);
    const apiKey =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[32]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_21likxh9fg().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_21likxh9fg().b[8][0]++, !apiUrl) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[8][1]++, !apiKey)) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[7][0]++;
      cov_21likxh9fg().s[34]++;
      return api_helper_1.ApiResponseWrapper.error({
        message: 'FastGPT API configuration is missing'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[7][1]++;
    }
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[35]++, `${apiUrl}${path}`);
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[36]++, await fetch(fullUrl, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      }
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[37]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[9][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[9][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[38]++;
    return api_helper_1.ApiResponseWrapper.error({
      message: 'Proxy request failed'
    }, {
      status: 500
    });
  }
});
/* istanbul ignore next */
cov_21likxh9fg().s[39]++;
exports.POST = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.protectedPost(), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_21likxh9fg().f[4]++;
  cov_21likxh9fg().s[40]++;
  try {
    // 获取请求路径
    const url =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[41]++, new URL(req.url));
    const path =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[42]++, url.pathname.replace("/api/proxy", ""));
    // 获取环境变量
    const apiUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[43]++, process.env.FASTGPT_API_URL);
    const apiKey =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[44]++, process.env.FASTGPT_API_KEY);
    /* istanbul ignore next */
    cov_21likxh9fg().s[45]++;
    if (
    /* istanbul ignore next */
    (cov_21likxh9fg().b[11][0]++, !apiUrl) ||
    /* istanbul ignore next */
    (cov_21likxh9fg().b[11][1]++, !apiKey)) {
      /* istanbul ignore next */
      cov_21likxh9fg().b[10][0]++;
      cov_21likxh9fg().s[46]++;
      return api_helper_1.ApiResponseWrapper.error({
        message: 'FastGPT API configuration is missing'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_21likxh9fg().b[10][1]++;
    }
    // Get the request body
    const body =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[47]++, await req.json().catch(() => {
      /* istanbul ignore next */
      cov_21likxh9fg().f[5]++;
      cov_21likxh9fg().s[48]++;
      return {};
    }));
    // Construct the full URL
    const fullUrl =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[49]++, `${apiUrl}${path}`);
    // Forward the request to the target URL
    const response =
    /* istanbul ignore next */
    (cov_21likxh9fg().s[50]++, await fetch(fullUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`
      },
      body: JSON.stringify(body)
    }));
    // Return the response from the target URL
    /* istanbul ignore next */
    cov_21likxh9fg().s[51]++;
    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: {
        "Content-Type":
        /* istanbul ignore next */
        (cov_21likxh9fg().b[12][0]++, response.headers.get("Content-Type")) ||
        /* istanbul ignore next */
        (cov_21likxh9fg().b[12][1]++, "application/json"),
        "Access-Control-Allow-Origin": "*"
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_21likxh9fg().s[52]++;
    return api_helper_1.ApiResponseWrapper.error({
      message: 'Proxy request failed'
    }, {
      status: 500
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjFsaWt4aDlmZyIsInBhdGgiLCJoYXNoIiwiZ2xvYmFsIiwiRnVuY3Rpb24iLCJnY3YiLCJjb3ZlcmFnZURhdGEiLCJzdGF0ZW1lbnRNYXAiLCJzdGFydCIsImxpbmUiLCJjb2x1bW4iLCJlbmQiLCJmbk1hcCIsIm5hbWUiLCJkZWNsIiwibG9jIiwiYnJhbmNoTWFwIiwidHlwZSIsImxvY2F0aW9ucyIsInVuZGVmaW5lZCIsInMiLCJmIiwiYiIsImlucHV0U291cmNlTWFwIiwiZmlsZSIsIm1hcHBpbmdzIiwibmFtZXMiLCJzb3VyY2VzIiwic291cmNlc0NvbnRlbnQiLCJ2ZXJzaW9uIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsImFwaV9yb3V0ZV93cmFwcGVyXzEiLCJyZXF1aXJlIiwiYXBpX2hlbHBlcl8xIiwiZXhwb3J0cyIsIkdFVCIsImNyZWF0ZUFwaVJvdXRlIiwiUm91dGVDb25maWdzIiwicHVibGljR2V0IiwicmVxIiwicGFyYW1zIiwidmFsaWRhdGVkQm9keSIsInZhbGlkYXRlZFF1ZXJ5IiwidXNlciIsInJlcXVlc3RJZCIsInVybCIsIkFwaVJlc3BvbnNlV3JhcHBlciIsImVycm9yIiwibWVzc2FnZSIsInN0YXR1cyIsImZ1bGxVcmwiLCJzdGFydHNXaXRoIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiZ2V0IiwiUmVzcG9uc2UiLCJib2R5Iiwic3RhdHVzVGV4dCIsIlBVVCIsInByb3RlY3RlZFB1dCIsIlVSTCIsInBhdGhuYW1lIiwicmVwbGFjZSIsImFwaVVybCIsInByb2Nlc3MiLCJlbnYiLCJGQVNUR1BUX0FQSV9VUkwiLCJhcGlLZXkiLCJGQVNUR1BUX0FQSV9LRVkiLCJqc29uIiwiY2F0Y2giLCJKU09OIiwic3RyaW5naWZ5IiwiREVMRVRFIiwiYWRtaW4iLCJQT1NUIiwicHJvdGVjdGVkUG9zdCJdLCJzb3VyY2VzIjpbIkU6XFx6ay1hZ2VudFxcYXBwXFxhcGlcXHByb3h5XFxyb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIHByb3h5XFxyb3V0ZS50c1xuICogQGRlc2NyaXB0aW9uIE1pZ3JhdGVkIEFQSSByb3V0ZSB3aXRoIGdsb2JhbCBlcnJvciBoYW5kbGluZ1xuICogQGF1dGhvciBaSy1BZ2VudCBUZWFtXG4gKiBAZGF0ZSAyMDI1LTA2LTI1XG4gKi9cblxuaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGNyZWF0ZUFwaVJvdXRlLCBSb3V0ZUNvbmZpZ3MsIENvbW1vblZhbGlkYXRpb25zIH0gZnJvbSAnQC9saWIvbWlkZGxld2FyZS9hcGktcm91dGUtd3JhcHBlcic7XG5pbXBvcnQgeyBBcGlSZXNwb25zZVdyYXBwZXIgfSBmcm9tICdAL2xpYi91dGlscy9hcGktaGVscGVyJztcblxuZXhwb3J0IGNvbnN0IEdFVCA9IGNyZWF0ZUFwaVJvdXRlKFxuICBSb3V0ZUNvbmZpZ3MucHVibGljR2V0KCksXG4gIGFzeW5jIChyZXE6IE5leHRSZXF1ZXN0LCB7IHBhcmFtcywgdmFsaWRhdGVkQm9keSwgdmFsaWRhdGVkUXVlcnksIHVzZXIsIHJlcXVlc3RJZCB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCB0aGUgVVJMIGZyb20gdGhlIHF1ZXJ5IHBhcmFtZXRlclxuICAgICAgY29uc3QgdXJsID0gdmFsaWRhdGVkUXVlcnk/LnVybCBhcyBzdHJpbmdcbiAgICAgIFxuICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgICB7IG1lc3NhZ2U6ICdVUkwgcGFyYW1ldGVyIGlzIHJlcXVpcmVkJyB9LFxuICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICApXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENvbnN0cnVjdCB0aGUgZnVsbCBVUkxcbiAgICAgIGNvbnN0IGZ1bGxVcmwgPSB1cmwuc3RhcnRzV2l0aChcImh0dHBcIikgPyB1cmwgOiBgaHR0cHM6Ly8ke3VybH1gXG4gICAgICBcbiAgICAgIC8vIEZvcndhcmQgdGhlIHJlcXVlc3QgdG8gdGhlIHRhcmdldCBVUkxcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZnVsbFVybCwge1xuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICBBdXRob3JpemF0aW9uOiByZXEuaGVhZGVycy5nZXQoXCJBdXRob3JpemF0aW9uXCIpIHx8IFwiXCIsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgXG4gICAgICAvLyBSZXR1cm4gdGhlIHJlc3BvbnNlIGZyb20gdGhlIHRhcmdldCBVUkxcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UocmVzcG9uc2UuYm9keSwge1xuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpIHx8IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgeyBtZXNzYWdlOiAnUHJveHkgcmVxdWVzdCBmYWlsZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgKVxuICAgIH1cbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IFBVVCA9IGNyZWF0ZUFwaVJvdXRlKFxuICBSb3V0ZUNvbmZpZ3MucHJvdGVjdGVkUHV0KCksXG4gIGFzeW5jIChyZXE6IE5leHRSZXF1ZXN0LCB7IHBhcmFtcywgdmFsaWRhdGVkQm9keSwgdmFsaWRhdGVkUXVlcnksIHVzZXIsIHJlcXVlc3RJZCB9KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIOiOt+WPluivt+axgui3r+W+hFxuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXEudXJsKVxuICAgICAgY29uc3QgcGF0aCA9IHVybC5wYXRobmFtZS5yZXBsYWNlKFwiL2FwaS9wcm94eVwiLCBcIlwiKVxuICAgICAgXG4gICAgICAvLyDojrflj5bnjq/looPlj5jph49cbiAgICAgIGNvbnN0IGFwaVVybCA9IHByb2Nlc3MuZW52LkZBU1RHUFRfQVBJX1VSTFxuICAgICAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuRkFTVEdQVF9BUElfS0VZXG4gICAgICBcbiAgICAgIGlmICghYXBpVXJsIHx8ICFhcGlLZXkpIHtcbiAgICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgICB7IG1lc3NhZ2U6ICdGYXN0R1BUIEFQSSBjb25maWd1cmF0aW9uIGlzIG1pc3NpbmcnIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gR2V0IHRoZSByZXF1ZXN0IGJvZHlcbiAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXEuanNvbigpLmNhdGNoKCgpID0+ICh7fSkpXG4gICAgICBcbiAgICAgIC8vIENvbnN0cnVjdCB0aGUgZnVsbCBVUkxcbiAgICAgIGNvbnN0IGZ1bGxVcmwgPSBgJHthcGlVcmx9JHtwYXRofWBcbiAgICAgIFxuICAgICAgLy8gRm9yd2FyZCB0aGUgcmVxdWVzdCB0byB0aGUgdGFyZ2V0IFVSTFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmdWxsVXJsLCB7XG4gICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthcGlLZXl9YCxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICB9KVxuICAgICAgXG4gICAgICAvLyBSZXR1cm4gdGhlIHJlc3BvbnNlIGZyb20gdGhlIHRhcmdldCBVUkxcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UocmVzcG9uc2UuYm9keSwge1xuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpIHx8IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgeyBtZXNzYWdlOiAnUHJveHkgcmVxdWVzdCBmYWlsZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgKVxuICAgIH1cbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IERFTEVURSA9IGNyZWF0ZUFwaVJvdXRlKFxuICBSb3V0ZUNvbmZpZ3MuYWRtaW4oJ0RFTEVURScpLFxuICBhc3luYyAocmVxOiBOZXh0UmVxdWVzdCwgeyBwYXJhbXMsIHZhbGlkYXRlZEJvZHksIHZhbGlkYXRlZFF1ZXJ5LCB1c2VyLCByZXF1ZXN0SWQgfSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyDojrflj5bor7fmsYLot6/lvoRcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxLnVybClcbiAgICAgIGNvbnN0IHBhdGggPSB1cmwucGF0aG5hbWUucmVwbGFjZShcIi9hcGkvcHJveHlcIiwgXCJcIilcbiAgICAgIFxuICAgICAgLy8g6I635Y+W546v5aKD5Y+Y6YePXG4gICAgICBjb25zdCBhcGlVcmwgPSBwcm9jZXNzLmVudi5GQVNUR1BUX0FQSV9VUkxcbiAgICAgIGNvbnN0IGFwaUtleSA9IHByb2Nlc3MuZW52LkZBU1RHUFRfQVBJX0tFWVxuICAgICAgXG4gICAgICBpZiAoIWFwaVVybCB8fCAhYXBpS2V5KSB7XG4gICAgICAgIHJldHVybiBBcGlSZXNwb25zZVdyYXBwZXIuZXJyb3IoXG4gICAgICAgICAgeyBtZXNzYWdlOiAnRmFzdEdQVCBBUEkgY29uZmlndXJhdGlvbiBpcyBtaXNzaW5nJyB9LFxuICAgICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgICApXG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENvbnN0cnVjdCB0aGUgZnVsbCBVUkxcbiAgICAgIGNvbnN0IGZ1bGxVcmwgPSBgJHthcGlVcmx9JHtwYXRofWBcbiAgICAgIFxuICAgICAgLy8gRm9yd2FyZCB0aGUgcmVxdWVzdCB0byB0aGUgdGFyZ2V0IFVSTFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmdWxsVXJsLCB7XG4gICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthcGlLZXl9YCxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIC8vIFJldHVybiB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgdGFyZ2V0IFVSTFxuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShyZXNwb25zZS5ib2R5LCB7XG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIikgfHwgXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogXCIqXCIsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLmVycm9yKFxuICAgICAgICB7IG1lc3NhZ2U6ICdQcm94eSByZXF1ZXN0IGZhaWxlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgICApXG4gICAgfVxuICB9XG4gKTtcblxuZXhwb3J0IGNvbnN0IFBPU1QgPSBjcmVhdGVBcGlSb3V0ZShcbiAgUm91dGVDb25maWdzLnByb3RlY3RlZFBvc3QoKSxcbiAgYXN5bmMgKHJlcTogTmV4dFJlcXVlc3QsIHsgcGFyYW1zLCB2YWxpZGF0ZWRCb2R5LCB2YWxpZGF0ZWRRdWVyeSwgdXNlciwgcmVxdWVzdElkIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8g6I635Y+W6K+35rGC6Lev5b6EXG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcS51cmwpXG4gICAgICBjb25zdCBwYXRoID0gdXJsLnBhdGhuYW1lLnJlcGxhY2UoXCIvYXBpL3Byb3h5XCIsIFwiXCIpXG4gICAgICBcbiAgICAgIC8vIOiOt+WPlueOr+Wig+WPmOmHj1xuICAgICAgY29uc3QgYXBpVXJsID0gcHJvY2Vzcy5lbnYuRkFTVEdQVF9BUElfVVJMXG4gICAgICBjb25zdCBhcGlLZXkgPSBwcm9jZXNzLmVudi5GQVNUR1BUX0FQSV9LRVlcbiAgICAgIFxuICAgICAgaWYgKCFhcGlVcmwgfHwgIWFwaUtleSkge1xuICAgICAgICByZXR1cm4gQXBpUmVzcG9uc2VXcmFwcGVyLmVycm9yKFxuICAgICAgICAgIHsgbWVzc2FnZTogJ0Zhc3RHUFQgQVBJIGNvbmZpZ3VyYXRpb24gaXMgbWlzc2luZycgfSxcbiAgICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBHZXQgdGhlIHJlcXVlc3QgYm9keVxuICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSlcbiAgICAgIFxuICAgICAgLy8gQ29uc3RydWN0IHRoZSBmdWxsIFVSTFxuICAgICAgY29uc3QgZnVsbFVybCA9IGAke2FwaVVybH0ke3BhdGh9YFxuICAgICAgXG4gICAgICAvLyBGb3J3YXJkIHRoZSByZXF1ZXN0IHRvIHRoZSB0YXJnZXQgVVJMXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGZ1bGxVcmwsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthcGlLZXl9YCxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgICB9KVxuICAgICAgXG4gICAgICAvLyBSZXR1cm4gdGhlIHJlc3BvbnNlIGZyb20gdGhlIHRhcmdldCBVUkxcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UocmVzcG9uc2UuYm9keSwge1xuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpIHx8IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIEFwaVJlc3BvbnNlV3JhcHBlci5lcnJvcihcbiAgICAgICAgeyBtZXNzYWdlOiAnUHJveHkgcmVxdWVzdCBmYWlsZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgKVxuICAgIH1cbiAgfVxuKTtcblxuIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFBQTtBQUFBLFNBQUFBLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7SUFBQTtJQUFBRSxLQUFBO01BQUE7UUFBQUMsSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQU8sU0FBQTtNQUFBO1FBQUFELEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7VUFBQVIsR0FBQTtZQUFBRixJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1FBQUE7UUFBQVYsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBLEVBQUFVLFNBQUE7WUFBQVQsTUFBQSxFQUFBUztVQUFBO1VBQUFSLEdBQUE7WUFBQUYsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtRQUFBO1FBQUFWLElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFNLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQU8sSUFBQTtRQUFBQyxTQUFBO1VBQUFWLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1VBQUFGLEtBQUE7WUFBQUMsSUFBQSxFQUFBVSxTQUFBO1lBQUFULE1BQUEsRUFBQVM7VUFBQTtVQUFBUixHQUFBO1lBQUFGLElBQUEsRUFBQVUsU0FBQTtZQUFBVCxNQUFBLEVBQUFTO1VBQUE7UUFBQTtRQUFBVixJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxjQUFBO01BQUFDLElBQUE7TUFBQUMsUUFBQTtNQUFBQyxLQUFBO01BQUFDLE9BQUE7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