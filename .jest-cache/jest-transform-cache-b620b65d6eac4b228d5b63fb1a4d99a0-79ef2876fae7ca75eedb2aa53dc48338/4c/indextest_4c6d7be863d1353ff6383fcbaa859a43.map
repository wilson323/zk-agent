{"file":"E:\\zk-agent\\__tests__\\lib\\database\\index.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\database\\index.test.ts"],"sourcesContent":["/**\n * 数据库服务测试\n * 测试database/index.ts中的DatabaseService类\n */\n\nimport { DatabaseService, prisma, cleanup } from '@/lib/database/index'\nimport { PrismaClient } from '@prisma/client'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\n\nconst mockPrismaInstance = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $queryRaw: jest.fn(),\n  $transaction: jest.fn(),\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrismaInstance as any)\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(),\n  error: jest.spyOn(console, 'error').mockImplementation(),\n}\n\ndescribe('DatabaseService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    consoleSpy.log.mockClear()\n    consoleSpy.error.mockClear()\n  })\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore()\n    consoleSpy.error.mockRestore()\n  })\n\n  describe('getInstance', () => {\n    it('应该返回Prisma客户端实例', () => {\n      const instance = DatabaseService.getInstance()\n      expect(instance).toBeDefined()\n      expect(PrismaClient).toHaveBeenCalled()\n    })\n\n    it('应该返回相同的实例（单例模式）', () => {\n      const instance1 = DatabaseService.getInstance()\n      const instance2 = DatabaseService.getInstance()\n      expect(instance1).toBe(instance2)\n    })\n  })\n\n  describe('connect', () => {\n    it('应该成功连接数据库', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n\n      await DatabaseService.connect()\n\n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n      expect(consoleSpy.log).toHaveBeenCalledWith('✅ Database connected successfully')\n    })\n\n    it('应该处理连接失败的情况', async () => {\n      const error = new Error('Connection failed')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n\n      await expect(DatabaseService.connect()).rejects.toThrow('Connection failed')\n      expect(consoleSpy.error).toHaveBeenCalledWith('❌ Database connection failed:', error)\n    })\n  })\n\n  describe('disconnect', () => {\n    it('应该成功断开数据库连接', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n\n      await DatabaseService.disconnect()\n\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(consoleSpy.log).toHaveBeenCalledWith('✅ Database disconnected successfully')\n    })\n\n    it('应该处理断开连接失败的情况', async () => {\n      const error = new Error('Disconnection failed')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n\n      await expect(DatabaseService.disconnect()).rejects.toThrow('Disconnection failed')\n      expect(consoleSpy.error).toHaveBeenCalledWith('❌ Database disconnection failed:', error)\n    })\n  })\n\n  describe('healthCheck', () => {\n    it('应该在数据库健康时返回true', async () => {\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ '1': 1 }])\n\n      const result = await DatabaseService.healthCheck()\n\n      expect(result).toBe(true)\n      expect(mockPrismaInstance.$queryRaw).toHaveBeenCalled()\n    })\n\n    it('应该在数据库不健康时返回false', async () => {\n      const error = new Error('Health check failed')\n      mockPrismaInstance.$queryRaw.mockRejectedValue(error)\n\n      const result = await DatabaseService.healthCheck()\n\n      expect(result).toBe(false)\n      expect(consoleSpy.error).toHaveBeenCalledWith('❌ Database health check failed:', error)\n    })\n  })\n\n  describe('runTransaction', () => {\n    it('应该成功执行事务', async () => {\n      const mockCallback = jest.fn().mockResolvedValue('transaction result')\n      mockPrismaInstance.$transaction.mockImplementation((callback) => callback(mockPrismaInstance))\n\n      const result = await DatabaseService.runTransaction(mockCallback)\n\n      expect(result).toBe('transaction result')\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n      expect(mockCallback).toHaveBeenCalledWith(mockPrismaInstance)\n    })\n\n    it('应该处理事务执行失败的情况', async () => {\n      const error = new Error('Transaction failed')\n      const mockCallback = jest.fn().mockRejectedValue(error)\n      mockPrismaInstance.$transaction.mockImplementation((callback) => callback(mockPrismaInstance))\n\n      await expect(DatabaseService.runTransaction(mockCallback)).rejects.toThrow('Transaction failed')\n    })\n  })\n\n  describe('cleanup', () => {\n    it('应该调用disconnect方法', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n\n      await cleanup()\n\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n    })\n  })\n\n  describe('prisma export', () => {\n    it('应该导出prisma实例', () => {\n      expect(prisma).toBeDefined()\n      expect(prisma).toBe(DatabaseService.getInstance())\n    })\n  })\n})\n\n// 测试进程事件监听器\ndescribe('Process Event Listeners', () => {\n  let originalProcess: NodeJS.Process\n\n  beforeAll(() => {\n    originalProcess = global.process\n  })\n\n  afterAll(() => {\n    global.process = originalProcess\n  })\n\n  it('应该注册进程退出事件监听器', () => {\n    const mockProcess = {\n      on: jest.fn(),\n    } as any\n\n    global.process = mockProcess\n\n    // 重新导入模块以触发事件监听器注册\n    jest.resetModules()\n    require('@/lib/database/index')\n\n    expect(mockProcess.on).toHaveBeenCalledWith('beforeExit', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGINT', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGTERM', expect.any(Function))\n  })\n})"],"version":3}