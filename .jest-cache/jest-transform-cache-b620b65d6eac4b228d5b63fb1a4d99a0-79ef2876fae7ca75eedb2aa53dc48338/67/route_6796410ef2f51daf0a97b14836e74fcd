e6bb0974af2e452833b3f456cf3d225a
"use strict";

/**
 * @file auth\login\route.ts
 * @description Migrated API route with global error handling
 * @author ZK-Agent Team
 * @date 2025-06-25
 */
/* istanbul ignore next */
function cov_1ayimi2q2r() {
  var path = "E:\\zk-agent\\app\\api\\auth\\login\\route.ts";
  var hash = "bee1df79c98d528777ba456fc65cf908a172da85";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\auth\\login\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "1": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 62
        }
      },
      "2": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 62
        }
      },
      "3": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 22
        }
      },
      "4": {
        start: {
          line: 13,
          column: 28
        },
        end: {
          line: 13,
          column: 73
        }
      },
      "5": {
        start: {
          line: 14,
          column: 21
        },
        end: {
          line: 14,
          column: 54
        }
      },
      "6": {
        start: {
          line: 15,
          column: 14
        },
        end: {
          line: 15,
          column: 28
        }
      },
      "7": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 74
        }
      },
      "8": {
        start: {
          line: 17,
          column: 14
        },
        end: {
          line: 17,
          column: 39
        }
      },
      "9": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "10": {
        start: {
          line: 23,
          column: 0
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "11": {
        start: {
          line: 24,
          column: 44
        },
        end: {
          line: 24,
          column: 57
        }
      },
      "12": {
        start: {
          line: 26,
          column: 22
        },
        end: {
          line: 28,
          column: 6
        }
      },
      "13": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "14": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 81
        }
      },
      "15": {
        start: {
          line: 34,
          column: 28
        },
        end: {
          line: 34,
          column: 97
        }
      },
      "16": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "17": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 81
        }
      },
      "18": {
        start: {
          line: 39,
          column: 19
        },
        end: {
          line: 43,
          column: 6
        }
      },
      "19": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 50,
          column: 7
        }
      },
      "20": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 67,
          column: 7
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 53
        }
      },
      "22": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "23": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 61
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 56
          },
          end: {
            line: 8,
            column: 57
          }
        },
        loc: {
          start: {
            line: 8,
            column: 71
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 23,
            column: 113
          },
          end: {
            line: 23,
            column: 114
          }
        },
        loc: {
          start: {
            line: 23,
            column: 188
          },
          end: {
            line: 82,
            column: 1
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 15
          },
          end: {
            line: 65,
            column: 16
          }
        },
        loc: {
          start: {
            line: 65,
            column: 26
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 65
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 8,
            column: 22
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 23
          },
          end: {
            line: 8,
            column: 27
          }
        }, {
          start: {
            line: 8,
            column: 31
          },
          end: {
            line: 8,
            column: 51
          }
        }, {
          start: {
            line: 8,
            column: 56
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 8
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 11
          },
          end: {
            line: 9,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 9,
            column: 37
          },
          end: {
            line: 9,
            column: 40
          }
        }, {
          start: {
            line: 9,
            column: 43
          },
          end: {
            line: 9,
            column: 61
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 9,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 9,
            column: 15
          }
        }, {
          start: {
            line: 9,
            column: 19
          },
          end: {
            line: 9,
            column: 33
          }
        }],
        line: 9
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 34,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 34,
            column: 47
          }
        }, {
          start: {
            line: 34,
            column: 51
          },
          end: {
            line: 34,
            column: 71
          }
        }, {
          start: {
            line: 34,
            column: 75
          },
          end: {
            line: 34,
            column: 97
          }
        }],
        line: 34
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 42,
            column: 14
          },
          end: {
            line: 42,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 42,
            column: 40
          },
          end: {
            line: 42,
            column: 47
          }
        }, {
          start: {
            line: 42,
            column: 50
          },
          end: {
            line: 42,
            column: 56
          }
        }],
        line: 42
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 20
          },
          end: {
            line: 60,
            column: 54
          }
        }, {
          start: {
            line: 60,
            column: 58
          },
          end: {
            line: 60,
            column: 86
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 18
          },
          end: {
            line: 75,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 75,
            column: 51
          }
        }, {
          start: {
            line: 75,
            column: 54
          },
          end: {
            line: 75,
            column: 60
          }
        }],
        line: 75
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\auth\\login\\route.ts",
      mappings: "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",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\auth\\login\\route.ts"],
      sourcesContent: ["/**\n * @file auth\\login\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { z } from \"zod\"\nimport prisma from \"@/lib/database/connection\"\nimport { generateTokenPair } from \"@/lib/auth/jwt\"\nimport type { LoginRequest, LoginResponse } from \"@/types/auth\"\n\nconst loginSchema = z.object({\n  email: z.string().email(\"\u8BF7\u8F93\u5165\u6709\u6548\u7684\u90AE\u7BB1\u5730\u5740\"),\n  password: z.string().min(1, \"\u5BC6\u7801\u4E0D\u80FD\u4E3A\u7A7A\"),\n  rememberMe: z.boolean().optional(),\n});\n\nexport const POST = createApiRoute(\n  RouteConfigs.publicPost(loginSchema),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    const { email, password, rememberMe } = validatedBody;\n  \n    // \u67E5\u627E\u7528\u6237\n    const foundUser = await prisma.user.findUnique({\n      where: { email },\n    });\n  \n    if (!foundUser) {\n      return ApiResponseWrapper.error(\n        \"\u90AE\u7BB1\u6216\u5BC6\u7801\u9519\u8BEF\",\n        { status: 401 }\n      );\n    }\n  \n    // \u4E34\u65F6\u5904\u7406\uFF1A\u4E3A\u4E86\u6F14\u793A\u76EE\u7684\uFF0C\u4F7F\u7528\u7B80\u5355\u9A8C\u8BC1\n    // \u751F\u4EA7\u73AF\u5883\u4E2D\u5FC5\u987B\u4F7F\u7528\u4E0A\u9762\u6CE8\u91CA\u7684bcrypt\u9A8C\u8BC1\n    const isPasswordValid = password === \"demo\" || password === \"admin\" || password === \"test123\";\n    if (!isPasswordValid) {\n      return ApiResponseWrapper.error(\n        \"\u90AE\u7BB1\u6216\u5BC6\u7801\u9519\u8BEF\",\n        { status: 401 }\n      );\n    }\n  \n    // \u751F\u6210\u4EE4\u724C\n    const tokens = generateTokenPair({\n      id: foundUser.id,\n      email: foundUser.email,\n      role: email.includes(\"admin\") ? \"admin\" : \"user\",\n    });\n  \n    // \u66F4\u65B0\u6700\u540E\u767B\u5F55\u65F6\u95F4\n    await prisma.user.update({\n      where: { id: foundUser.id },\n      data: {\n        updatedAt: new Date(),\n      },\n    });\n  \n    // \u8BB0\u5F55\u767B\u5F55\u65E5\u5FD7\n    await prisma.usageStats\n      .create({\n        data: {\n          userId: foundUser.id,\n          agentType: \"auth\",\n          action: \"login\",\n          metadata: {\n            userAgent: req.headers.get(\"user-agent\"),\n            ip: req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\"),\n            rememberMe,\n          },\n        },\n      })\n      .catch((error) => {\n        console.error(\"Failed to log login:\", error);\n      });\n  \n    const response: LoginResponse = {\n      success: true,\n      user: {\n        id: foundUser.id,\n        email: foundUser.email,\n        name: foundUser.name,\n        avatar: foundUser.avatar,\n        role: email.includes(\"admin\") ? \"admin\" : \"user\",\n        createdAt: foundUser.createdAt,\n        updatedAt: foundUser.updatedAt,\n      },\n      tokens,\n    };\n  \n    return ApiResponseWrapper.success(response);\n  }\n);\n\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bee1df79c98d528777ba456fc65cf908a172da85"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ayimi2q2r = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ayimi2q2r();
var __importDefault =
/* istanbul ignore next */
(cov_1ayimi2q2r().s[0]++,
/* istanbul ignore next */
(cov_1ayimi2q2r().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1ayimi2q2r().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1ayimi2q2r().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1ayimi2q2r().f[0]++;
  cov_1ayimi2q2r().s[1]++;
  return /* istanbul ignore next */(cov_1ayimi2q2r().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1ayimi2q2r().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1ayimi2q2r().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1ayimi2q2r().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1ayimi2q2r().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ayimi2q2r().s[3]++;
exports.POST = void 0;
const api_route_wrapper_1 =
/* istanbul ignore next */
(cov_1ayimi2q2r().s[4]++, require("@/lib/middleware/api-route-wrapper"));
const api_helper_1 =
/* istanbul ignore next */
(cov_1ayimi2q2r().s[5]++, require("@/lib/utils/api-helper"));
const zod_1 =
/* istanbul ignore next */
(cov_1ayimi2q2r().s[6]++, require("zod"));
const connection_1 =
/* istanbul ignore next */
(cov_1ayimi2q2r().s[7]++, __importDefault(require("@/lib/database/connection")));
const jwt_1 =
/* istanbul ignore next */
(cov_1ayimi2q2r().s[8]++, require("@/lib/auth/jwt"));
const loginSchema =
/* istanbul ignore next */
(cov_1ayimi2q2r().s[9]++, zod_1.z.object({
  email: zod_1.z.string().email("请输入有效的邮箱地址"),
  password: zod_1.z.string().min(1, "密码不能为空"),
  rememberMe: zod_1.z.boolean().optional()
}));
/* istanbul ignore next */
cov_1ayimi2q2r().s[10]++;
exports.POST = (0, api_route_wrapper_1.createApiRoute)(api_route_wrapper_1.RouteConfigs.publicPost(loginSchema), async (req, {
  params,
  validatedBody,
  validatedQuery,
  user,
  requestId
}) => {
  /* istanbul ignore next */
  cov_1ayimi2q2r().f[1]++;
  const {
    email,
    password,
    rememberMe
  } =
  /* istanbul ignore next */
  (cov_1ayimi2q2r().s[11]++, validatedBody);
  // 查找用户
  const foundUser =
  /* istanbul ignore next */
  (cov_1ayimi2q2r().s[12]++, await connection_1.default.user.findUnique({
    where: {
      email
    }
  }));
  /* istanbul ignore next */
  cov_1ayimi2q2r().s[13]++;
  if (!foundUser) {
    /* istanbul ignore next */
    cov_1ayimi2q2r().b[3][0]++;
    cov_1ayimi2q2r().s[14]++;
    return api_helper_1.ApiResponseWrapper.error("邮箱或密码错误", {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_1ayimi2q2r().b[3][1]++;
  }
  // 临时处理：为了演示目的，使用简单验证
  // 生产环境中必须使用上面注释的bcrypt验证
  const isPasswordValid =
  /* istanbul ignore next */
  (cov_1ayimi2q2r().s[15]++,
  /* istanbul ignore next */
  (cov_1ayimi2q2r().b[4][0]++, password === "demo") ||
  /* istanbul ignore next */
  (cov_1ayimi2q2r().b[4][1]++, password === "admin") ||
  /* istanbul ignore next */
  (cov_1ayimi2q2r().b[4][2]++, password === "test123"));
  /* istanbul ignore next */
  cov_1ayimi2q2r().s[16]++;
  if (!isPasswordValid) {
    /* istanbul ignore next */
    cov_1ayimi2q2r().b[5][0]++;
    cov_1ayimi2q2r().s[17]++;
    return api_helper_1.ApiResponseWrapper.error("邮箱或密码错误", {
      status: 401
    });
  } else
  /* istanbul ignore next */
  {
    cov_1ayimi2q2r().b[5][1]++;
  }
  // 生成令牌
  const tokens =
  /* istanbul ignore next */
  (cov_1ayimi2q2r().s[18]++, (0, jwt_1.generateTokenPair)({
    id: foundUser.id,
    email: foundUser.email,
    role: email.includes("admin") ?
    /* istanbul ignore next */
    (cov_1ayimi2q2r().b[6][0]++, "admin") :
    /* istanbul ignore next */
    (cov_1ayimi2q2r().b[6][1]++, "user")
  }));
  // 更新最后登录时间
  /* istanbul ignore next */
  cov_1ayimi2q2r().s[19]++;
  await connection_1.default.user.update({
    where: {
      id: foundUser.id
    },
    data: {
      updatedAt: new Date()
    }
  });
  // 记录登录日志
  /* istanbul ignore next */
  cov_1ayimi2q2r().s[20]++;
  await connection_1.default.usageStats.create({
    data: {
      userId: foundUser.id,
      agentType: "auth",
      action: "login",
      metadata: {
        userAgent: req.headers.get("user-agent"),
        ip:
        /* istanbul ignore next */
        (cov_1ayimi2q2r().b[7][0]++, req.headers.get("x-forwarded-for")) ||
        /* istanbul ignore next */
        (cov_1ayimi2q2r().b[7][1]++, req.headers.get("x-real-ip")),
        rememberMe
      }
    }
  }).catch(error => {
    /* istanbul ignore next */
    cov_1ayimi2q2r().f[2]++;
    cov_1ayimi2q2r().s[21]++;
    console.error("Failed to log login:", error);
  });
  const response =
  /* istanbul ignore next */
  (cov_1ayimi2q2r().s[22]++, {
    success: true,
    user: {
      id: foundUser.id,
      email: foundUser.email,
      name: foundUser.name,
      avatar: foundUser.avatar,
      role: email.includes("admin") ?
      /* istanbul ignore next */
      (cov_1ayimi2q2r().b[8][0]++, "admin") :
      /* istanbul ignore next */
      (cov_1ayimi2q2r().b[8][1]++, "user"),
      createdAt: foundUser.createdAt,
      updatedAt: foundUser.updatedAt
    },
    tokens
  });
  /* istanbul ignore next */
  cov_1ayimi2q2r().s[23]++;
  return api_helper_1.ApiResponseWrapper.success(response);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,