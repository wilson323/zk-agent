{"file":"E:\\zk-agent\\lib\\database\\intelligent-cache-manager.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\intelligent-cache-manager.ts"],"sourcesContent":["// @ts-nocheck\n/**\n * 智能缓存管理器\n * 多层级、自适应的数据库缓存系统\n * \n * 功能:\n * - 多层级缓存架构(L1内存缓存、L2Redis缓存)\n * - 智能缓存策略和自动失效\n * - 缓存预热和预测性加载\n * - 缓存性能监控和优化\n * - 分布式缓存一致性保证\n * \n * @author ZK-Agent Team\n * @version 1.0.0\n */\n\nimport { EventEmitter } from 'events'\nimport { LRUCache } from 'lru-cache'\nimport { databaseMonitor } from './monitoring'\nimport { queryPerformanceOptimizer } from './query-performance-optimizer'\n\n// 条件导入Redis，仅在服务器环境中使用\nlet Redis: any = null\nif (typeof window === 'undefined') {\n  try {\n    Redis = require('ioredis')\n  } catch (error: any) {\n    console.warn('Redis not available in this environment:', error)\n  }\n}\n\n/**\n * 缓存层级枚举\n */\nenum CacheLevel {\n  L1 = 'L1', // 内存缓存\n  L2 = 'L2', // Redis缓存\n  L3 = 'L3'  // 数据库缓存\n}\n\n/**\n * 缓存策略枚举\n */\nenum CacheStrategy {\n  LRU = 'lru',           // 最近最少使用\n  LFU = 'lfu',           // 最少使用频率\n  TTL = 'ttl',           // 基于时间\n  ADAPTIVE = 'adaptive'   // 自适应策略\n}\n\n/**\n * 缓存项接口\n */\ninterface CacheItem<T = any> {\n  /** 缓存键 */\n  key: string\n  /** 缓存值 */\n  value: T\n  /** 创建时间 */\n  createdAt: Date\n  /** 过期时间 */\n  expiresAt: Date\n  /** 访问次数 */\n  accessCount: number\n  /** 最后访问时间 */\n  lastAccessedAt: Date\n  /** 数据大小(bytes) */\n  size: number\n  /** 缓存层级 */\n  level: CacheLevel\n  /** 数据版本 */\n  version: number\n  /** 标签(用于批量失效) */\n  tags: string[]\n  /** 优先级 */\n  priority: number\n  /** 是否为热点数据 */\n  isHot: boolean\n}\n\n/**\n * 缓存配置接口\n */\ninterface CacheConfig {\n  /** L1缓存配置 */\n  l1: {\n    enabled: boolean\n    maxSize: number\n    ttl: number\n    strategy: CacheStrategy\n  }\n  /** L2缓存配置 */\n  l2: {\n    enabled: boolean\n    redis: {\n      host: string\n      port: number\n      password?: string\n      db: number\n      keyPrefix: string\n    }\n    maxSize: number\n    ttl: number\n    strategy: CacheStrategy\n  }\n  /** 预热配置 */\n  warmup: {\n    enabled: boolean\n    queries: string[]\n    schedule: string\n  }\n  /** 监控配置 */\n  monitoring: {\n    enabled: boolean\n    metricsInterval: number\n    alertThresholds: {\n      hitRateMin: number\n      memoryUsageMax: number\n      latencyMax: number\n    }\n  }\n}\n\n/**\n * 缓存统计接口\n */\ninterface CacheStats {\n  /** 总请求数 */\n  totalRequests: number\n  /** 命中次数 */\n  hits: number\n  /** 未命中次数 */\n  misses: number\n  /** 命中率 */\n  hitRate: number\n  /** 各层级统计 */\n  levelStats: {\n    [key in CacheLevel]: {\n      requests: number\n      hits: number\n      misses: number\n      hitRate: number\n      size: number\n      memoryUsage: number\n    }\n  }\n  /** 平均响应时间 */\n  avgResponseTime: number\n  /** 错误次数 */\n  errors: number\n  /** 失效次数 */\n  evictions: number\n}\n\n/**\n * 缓存事件接口\n */\ninterface CacheEvent {\n  type: 'hit' | 'miss' | 'set' | 'delete' | 'evict' | 'expire'\n  key: string\n  level: CacheLevel\n  timestamp: Date\n  metadata?: any\n}\n\n/**\n * 预测性加载配置\n */\ninterface PredictiveLoadConfig {\n  /** 是否启用 */\n  enabled: boolean\n  /** 预测算法 */\n  algorithm: 'pattern' | 'ml' | 'hybrid'\n  /** 预测窗口(ms) */\n  predictionWindow: number\n  /** 置信度阈值 */\n  confidenceThreshold: number\n  /** 最大预加载数量 */\n  maxPredictiveLoads: number\n}\n\n/**\n * 智能缓存管理器类\n */\nexport class IntelligentCacheManager extends EventEmitter {\n  private config: CacheConfig\n  private l1Cache: LRUCache<string, CacheItem>\n  private l2Cache: any | null = null\n  private stats: CacheStats\n  private isActive: boolean = false\n  private monitoringInterval: NodeJS.Timeout | null = null\n  private warmupInterval: NodeJS.Timeout | null = null\n  private predictiveConfig: PredictiveLoadConfig\n  private accessPatterns: Map<string, number[]> = new Map()\n  private hotKeys: Set<string> = new Set()\n  private keyVersions: Map<string, number> = new Map()\n\n  constructor(config: Partial<CacheConfig> = {}) {\n    super()\n    \n    // 初始化配置\n    this.config = this.mergeConfig(config)\n    \n    // 初始化L1缓存\n    this.l1Cache = new LRUCache({\n      max: this.config.l1.maxSize,\n      ttl: this.config.l1.ttl,\n      updateAgeOnGet: true,\n      allowStale: false\n    })\n    \n    // 初始化统计信息\n    this.stats = this.initializeStats()\n    \n    // 初始化预测性加载配置\n    this.predictiveConfig = {\n      enabled: true,\n      algorithm: 'hybrid',\n      predictionWindow: 300000, // 5分钟\n      confidenceThreshold: 0.7,\n      maxPredictiveLoads: 50\n    }\n    \n    this.setupEventListeners()\n  }\n\n  /**\n   * 合并配置\n   * \n   * @param userConfig - 用户配置\n   * @returns 合并后的配置\n   */\n  private mergeConfig(userConfig: Partial<CacheConfig>): CacheConfig {\n    const defaultConfig: CacheConfig = {\n      l1: {\n        enabled: true,\n        maxSize: 1000,\n        ttl: 300000, // 5分钟\n        strategy: CacheStrategy.LRU\n      },\n      l2: {\n        enabled: true,\n        redis: {\n          host: process.env.REDIS_HOST || 'localhost',\n          port: parseInt(process.env.REDIS_PORT || '6379'),\n          password: process.env.REDIS_PASSWORD,\n          db: parseInt(process.env.REDIS_DB || '0'),\n          keyPrefix: 'zk_cache:'\n        },\r\n        maxSize: 10000,\r\n        ttl: 1800000, // 30分钟\r\n        strategy: CacheStrategy.LRU\r\n      },\r\n      warmup: {\r\n        enabled: true,\r\n        queries: [],\r\n        schedule: '0 */6 * * *' // 每6小时\r\n      },\r\n      monitoring: {\r\n        enabled: true,\r\n        metricsInterval: 60000, // 1分钟\r\n        alertThresholds: {\r\n          hitRateMin: 0.8,\r\n          memoryUsageMax: 0.9,\r\n          latencyMax: 100\r\n        }\r\n      }\r\n    }\r\n    \r\n    return this.deepMerge(defaultConfig, userConfig)\r\n  }\r\n\r\n  /**\r\n   * 深度合并对象\r\n   * \r\n   * @param target - 目标对象\r\n   * @param source - 源对象\r\n   * @returns 合并后的对象\r\n   */\r\n  private deepMerge(target: any, source: any): any {\r\n    const result = { ...target }\r\n    \r\n    for (const key in source) {\r\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\r\n        result[key] = this.deepMerge(target[key] || {}, source[key])\r\n      } else {\r\n        result[key] = source[key]\r\n      }\r\n    }\r\n    \r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 初始化统计信息\r\n   * \r\n   * @returns 初始统计信息\r\n   */\r\n  private initializeStats(): CacheStats {\r\n    return {\r\n      totalRequests: 0,\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      levelStats: {\r\n        [CacheLevel.L1]: {\r\n          requests: 0,\r\n          hits: 0,\r\n          misses: 0,\r\n          hitRate: 0,\r\n          size: 0,\r\n          memoryUsage: 0\r\n        },\r\n        [CacheLevel.L2]: {\r\n          requests: 0,\r\n          hits: 0,\r\n          misses: 0,\r\n          hitRate: 0,\r\n          size: 0,\r\n          memoryUsage: 0\r\n        },\r\n        [CacheLevel.L3]: {\r\n          requests: 0,\r\n          hits: 0,\r\n          misses: 0,\r\n          hitRate: 0,\r\n          size: 0,\r\n          memoryUsage: 0\r\n        }\r\n      },\r\n      avgResponseTime: 0,\r\n      errors: 0,\r\n      evictions: 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听查询性能优化器事件\r\n    queryPerformanceOptimizer.on('query-completed', (stats: any) => {\r\n      this.handleQueryCompleted(stats)\r\n    })\r\n    \r\n    // 监听数据库监控事件\r\n    databaseMonitor.on('metrics', (metrics: any) => {\r\n      this.handleDatabaseMetrics(metrics)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 启动缓存管理器\r\n   */\r\n  async start(): Promise<void> {\r\n    if (this.isActive) {\r\n      console.log('Intelligent cache manager is already active')\r\n      return\r\n    }\r\n\r\n    console.log('Starting intelligent cache manager')\r\n    \r\n    try {\r\n      // 初始化L2缓存(Redis)\r\n      if (this.config.l2.enabled) {\r\n        await this.initializeL2Cache()\r\n      }\r\n      \r\n      // 启动监控\r\n      if (this.config.monitoring.enabled) {\r\n        this.startMonitoring()\r\n      }\r\n      \r\n      // 启动缓存预热\r\n      if (this.config.warmup.enabled) {\r\n        this.startWarmup()\r\n      }\r\n      \r\n      this.isActive = true\r\n      this.emit('cache-manager-started')\r\n      \r\n      console.log('Intelligent cache manager started successfully')\r\n      \r\n    } catch (error: any) {\r\n      console.error('Failed to start intelligent cache manager:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 停止缓存管理器\r\n   */\r\n  async stop(): Promise<void> {\r\n    if (!this.isActive) {\r\n      return\r\n    }\r\n\r\n    console.log('Stopping intelligent cache manager')\r\n    \r\n    this.isActive = false\r\n    \r\n    // 停止监控\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval)\r\n      this.monitoringInterval = null\r\n    }\r\n    \r\n    // 停止预热\r\n    if (this.warmupInterval) {\r\n      clearInterval(this.warmupInterval)\r\n      this.warmupInterval = null\r\n    }\r\n    \r\n    // 关闭Redis连接\r\n    if (this.l2Cache) {\r\n      await this.l2Cache.quit()\r\n      this.l2Cache = null\r\n    }\r\n    \r\n    // 清空L1缓存\r\n    this.l1Cache.clear()\r\n    \r\n    this.emit('cache-manager-stopped')\r\n  }\r\n\r\n  /**\r\n   * 初始化L2缓存\r\n   */\r\n  private async initializeL2Cache(): Promise<void> {\r\n    // 检查Redis是否可用\r\n    if (!Redis) {\r\n      console.warn('Redis not available, L2 cache disabled')\r\n      this.config.l2.enabled = false\r\n      return\r\n    }\r\n    \r\n    const redisConfig = this.config.l2.redis\r\n    \r\n    try {\r\n      this.l2Cache = new Redis({\r\n        host: redisConfig.host,\r\n        port: redisConfig.port,\r\n        password: redisConfig.password,\r\n        db: redisConfig.db,\r\n        keyPrefix: redisConfig.keyPrefix,\r\n        retryDelayOnFailover: 100,\r\n        maxRetriesPerRequest: 3,\r\n        lazyConnect: true\r\n      })\r\n      \r\n      // 设置Redis事件监听\r\n      this.l2Cache.on('connect', () => {\r\n        console.log('Connected to Redis cache')\r\n      })\r\n      \r\n      this.l2Cache.on('error', (error: any) => {\r\n        console.error('Redis cache error:', error)\r\n        this.stats.errors++\r\n      })\r\n      \r\n      // 测试连接\r\n      await this.l2Cache.ping()\r\n    } catch (error: any) {\r\n      console.warn('Failed to initialize Redis cache, falling back to L1 only:', error)\r\n      this.config.l2.enabled = false\r\n      this.l2Cache = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动监控\r\n   */\r\n  private startMonitoring(): void {\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.collectMetrics()\r\n      this.checkAlerts()\r\n      this.optimizeCache()\r\n    }, this.config.monitoring.metricsInterval)\r\n  }\r\n\r\n  /**\r\n   * 启动缓存预热\r\n   */\r\n  private startWarmup(): void {\r\n    // 立即执行一次预热\r\n    this.performWarmup()\r\n    \r\n    // 定期预热(这里简化为每小时一次)\r\n    this.warmupInterval = setInterval(() => {\r\n      this.performWarmup()\r\n    }, 3600000) // 1小时\r\n  }\r\n\r\n  /**\r\n   * 获取缓存数据\r\n   * \r\n   * @param key - 缓存键\r\n   * @param loader - 数据加载函数\r\n   * @param options - 选项\r\n   * @returns 缓存数据\r\n   */\r\n  async get<T>(\r\n    key: string, \r\n    loader?: () => Promise<T>, \r\n    options: {\r\n      ttl?: number\r\n      tags?: string[]\r\n      priority?: number\r\n      level?: CacheLevel\r\n    } = {}\r\n  ): Promise<T | null> {\r\n    const startTime = performance.now()\r\n    \r\n    try {\r\n      this.stats.totalRequests++\r\n      this.recordAccess(key)\r\n      \r\n      // 尝试从L1缓存获取\r\n      let result = await this.getFromL1(key)\r\n      if (result !== null) {\r\n        this.recordHit(CacheLevel.L1)\r\n        this.emit('cache-event', {\r\n          type: 'hit',\r\n          key,\r\n          level: CacheLevel.L1,\r\n          timestamp: new Date()\r\n        })\r\n        return result.value\r\n      }\r\n      \r\n      // 尝试从L2缓存获取\r\n      if (this.config.l2.enabled && this.l2Cache) {\r\n        result = await this.getFromL2(key)\r\n        if (result !== null) {\r\n          // 回写到L1缓存\r\n          await this.setToL1(key, result.value, options)\r\n          this.recordHit(CacheLevel.L2)\r\n          this.emit('cache-event', {\r\n            type: 'hit',\r\n            key,\r\n            level: CacheLevel.L2,\r\n            timestamp: new Date()\r\n          })\r\n          return result.value\r\n        }\r\n      }\r\n      \r\n      // 缓存未命中，使用loader加载数据\r\n      if (loader) {\r\n        const data = await loader()\r\n        if (data !== null && data !== undefined) {\r\n          await this.set(key, data, options)\r\n        }\r\n        this.recordMiss()\r\n        return data\r\n      }\r\n      \r\n      this.recordMiss()\r\n      return null\r\n      \r\n    } catch (error: any) {\r\n      console.error(`Cache get error for key ${key}:`, error)\r\n      this.stats.errors++\r\n      \r\n      // 如果有loader，尝试直接加载\r\n      if (loader) {\r\n        try {\r\n          return await loader()\r\n        } catch (loaderError: any) {\r\n          console.error(`Loader error for key ${key}:`, loaderError)\r\n          return null\r\n        }\r\n      }\r\n      \r\n      return null\r\n      \r\n    } finally {\r\n      const endTime = performance.now()\r\n      this.updateResponseTime(endTime - startTime)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置缓存数据\r\n   * \r\n   * @param key - 缓存键\r\n   * @param value - 缓存值\r\n   * @param options - 选项\r\n   */\r\n  async set<T>(\r\n    key: string, \r\n    value: T, \r\n    options: {\r\n      ttl?: number\r\n      tags?: string[]\r\n      priority?: number\r\n      level?: CacheLevel\r\n    } = {}\r\n  ): Promise<void> {\r\n    try {\r\n      const ttl = options.ttl || this.config.l1.ttl\r\n      const tags = options.tags || []\r\n      const priority = options.priority || 1\r\n      const targetLevel = options.level\r\n      \r\n      // 更新版本号\r\n      const version = this.incrementVersion(key)\r\n      \r\n      const cacheItem: CacheItem<T> = {\r\n        key,\r\n        value,\r\n        createdAt: new Date(),\r\n        expiresAt: new Date(Date.now() + ttl),\r\n        accessCount: 0,\r\n        lastAccessedAt: new Date(),\r\n        size: this.calculateSize(value),\r\n        level: CacheLevel.L1,\r\n        version,\r\n        tags,\r\n        priority,\r\n        isHot: this.hotKeys.has(key)\r\n      }\r\n      \r\n      // 设置到L1缓存\r\n      if (!targetLevel || targetLevel === CacheLevel.L1) {\r\n        await this.setToL1(key, value, options)\r\n      }\r\n      \r\n      // 设置到L2缓存\r\n      if (this.config.l2.enabled && this.l2Cache && (!targetLevel || targetLevel === CacheLevel.L2)) {\r\n        await this.setToL2(key, cacheItem)\r\n      }\r\n      \r\n      this.emit('cache-event', {\r\n        type: 'set',\r\n        key,\r\n        level: targetLevel || CacheLevel.L1,\r\n        timestamp: new Date(),\r\n        metadata: { size: cacheItem.size, ttl }\r\n      })\r\n      \r\n    } catch (error: any) {\r\n      console.error(`Cache set error for key ${key}:`, error)\r\n      this.stats.errors++\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除缓存数据\r\n   * \r\n   * @param key - 缓存键\r\n   */\r\n  async delete(key: string): Promise<void> {\r\n    try {\r\n      // 从L1缓存删除\r\n      this.l1Cache.delete(key)\r\n      \r\n      // 从L2缓存删除\r\n      if (this.config.l2.enabled && this.l2Cache) {\r\n        await this.l2Cache.del(key)\r\n      }\r\n      \r\n      // 清理相关数据\r\n      this.accessPatterns.delete(key)\r\n      this.hotKeys.delete(key)\r\n      this.keyVersions.delete(key)\r\n      \r\n      this.emit('cache-event', {\r\n        type: 'delete',\r\n        key,\r\n        level: CacheLevel.L1,\r\n        timestamp: new Date()\r\n      })\r\n      \r\n    } catch (error: any) {\r\n      console.error(`Cache delete error for key ${key}:`, error)\r\n      this.stats.errors++\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 批量删除缓存(按标签)\r\n   * \r\n   * @param tags - 标签数组\r\n   */\r\n  async deleteByTags(tags: string[]): Promise<void> {\r\n    try {\r\n      const keysToDelete: string[] = []\r\n      \r\n      // 从L1缓存中查找匹配的键\r\n      for (const [key, item] of this.l1Cache.entries()) {\r\n        if (item && item.tags && item.tags.some((tag: string) => tags.includes(tag))) {\r\n          keysToDelete.push(key)\r\n        }\r\n      }\r\n      \r\n      // 从L2缓存中查找匹配的键(如果启用)\r\n      if (this.config.l2.enabled && this.l2Cache) {\r\n        // 这里需要实现Redis中按标签查找的逻辑\r\n        // 可以使用Redis的SET数据结构来维护标签到键的映射\r\n      }\r\n      \r\n      // 批量删除\r\n      for (const key of keysToDelete) {\r\n        await this.delete(key)\r\n      }\r\n      \r\n      console.log(`Deleted ${keysToDelete.length} cache items by tags:`, tags)\r\n      \r\n    } catch (error: any) {\r\n      console.error('Cache delete by tags error:', error)\r\n      this.stats.errors++\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从L1缓存获取数据\r\n   * \r\n   * @param key - 缓存键\r\n   * @returns 缓存项\r\n   */\r\n  private async getFromL1(key: string): Promise<CacheItem | null> {\r\n    this.stats.levelStats[CacheLevel.L1].requests++\r\n    \r\n    const item = this.l1Cache.get(key)\r\n    if (item) {\r\n      item.accessCount++\r\n      item.lastAccessedAt = new Date()\r\n      return item\r\n    }\r\n    \r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 从L2缓存获取数据\r\n   * \r\n   * @param key - 缓存键\r\n   * @returns 缓存项\r\n   */\r\n  private async getFromL2(key: string): Promise<CacheItem | null> {\r\n    if (!this.l2Cache) {\r\n      return null\r\n    }\r\n    \r\n    this.stats.levelStats[CacheLevel.L2].requests++\r\n    \r\n    try {\r\n      const data = await this.l2Cache.get(key)\r\n      if (data) {\r\n        const item: CacheItem = JSON.parse(data)\r\n        \r\n        // 检查是否过期\r\n        if (new Date(item.expiresAt) > new Date()) {\r\n          item.accessCount++\r\n          item.lastAccessedAt = new Date()\r\n          \r\n          // 更新L2缓存中的访问信息\r\n          await this.l2Cache.set(key, JSON.stringify(item), 'PX', this.config.l2.ttl)\r\n          \r\n          return item\r\n        } else {\r\n          // 过期数据，删除\r\n          await this.l2Cache.del(key)\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      console.error(`L2 cache get error for key ${key}:`, error)\r\n    }\r\n    \r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 设置数据到L1缓存\r\n   * \r\n   * @param key - 缓存键\r\n   * @param value - 缓存值\r\n   * @param options - 选项\r\n   */\r\n  private async setToL1<T>(key: string, value: T, options: any = {}): Promise<void> {\r\n    const ttl = options.ttl || this.config.l1.ttl\r\n    const tags = options.tags || []\r\n    const priority = options.priority || 1\r\n    const version = this.getVersion(key)\r\n    \r\n    const cacheItem: CacheItem<T> = {\r\n      key,\r\n      value,\r\n      createdAt: new Date(),\r\n      expiresAt: new Date(Date.now() + ttl),\r\n      accessCount: 0,\r\n      lastAccessedAt: new Date(),\r\n      size: this.calculateSize(value),\r\n      level: CacheLevel.L1,\r\n      version,\r\n      tags,\r\n      priority,\r\n      isHot: this.hotKeys.has(key)\r\n    }\r\n    \r\n    this.l1Cache.set(key, cacheItem, { ttl })\r\n  }\r\n\r\n  /**\r\n   * 设置数据到L2缓存\r\n   * \r\n   * @param key - 缓存键\r\n   * @param item - 缓存项\r\n   */\r\n  private async setToL2(key: string, item: CacheItem): Promise<void> {\r\n    if (!this.l2Cache) {\r\n      return\r\n    }\r\n    \r\n    try {\r\n      const serializedItem = JSON.stringify(item)\r\n      await this.l2Cache.set(key, serializedItem, 'PX', this.config.l2.ttl)\r\n      \r\n      // 维护标签索引\r\n      if (item.tags && item.tags.length > 0) {\r\n        for (const tag of item.tags) {\r\n          await this.l2Cache.sadd(`tag:${tag}`, key)\r\n          await this.l2Cache.expire(`tag:${tag}`, Math.ceil(this.config.l2.ttl / 1000))\r\n        }\r\n      }\r\n      \r\n    } catch (error: any) {\r\n      console.error(`L2 cache set error for key ${key}:`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录访问模式\r\n   * \r\n   * @param key - 缓存键\r\n   */\r\n  private recordAccess(key: string): void {\r\n    const now = Date.now()\r\n    const pattern = this.accessPatterns.get(key) || []\r\n    \r\n    pattern.push(now)\r\n    \r\n    // 只保留最近的访问记录\r\n    const cutoff = now - this.predictiveConfig.predictionWindow\r\n    const recentAccesses = pattern.filter(time => time > cutoff)\r\n    \r\n    this.accessPatterns.set(key, recentAccesses)\r\n    \r\n    // 判断是否为热点数据\r\n    if (recentAccesses.length > 10) {\r\n      this.hotKeys.add(key)\r\n    } else if (recentAccesses.length < 3) {\r\n      this.hotKeys.delete(key)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录命中\r\n   * \r\n   * @param level - 缓存层级\r\n   */\r\n  private recordHit(level: CacheLevel): void {\r\n    this.stats.hits++\r\n    this.stats.levelStats[level].hits++\r\n    this.updateHitRate()\r\n  }\r\n\r\n  /**\r\n   * 记录未命中\r\n   */\r\n  private recordMiss(): void {\r\n    this.stats.misses++\r\n    this.updateHitRate()\r\n  }\r\n\r\n  /**\r\n   * 更新命中率\r\n   */\r\n  private updateHitRate(): void {\r\n    this.stats.hitRate = this.stats.hits / Math.max(1, this.stats.totalRequests)\r\n    \r\n    for (const level of Object.values(CacheLevel)) {\r\n      const levelStats = this.stats.levelStats[level]\r\n      levelStats.hitRate = levelStats.hits / Math.max(1, levelStats.requests)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新响应时间\r\n   * \r\n   * @param responseTime - 响应时间\r\n   */\r\n  private updateResponseTime(responseTime: number): void {\r\n    const totalTime = this.stats.avgResponseTime * (this.stats.totalRequests - 1) + responseTime\r\n    this.stats.avgResponseTime = totalTime / this.stats.totalRequests\r\n  }\r\n\r\n  /**\r\n   * 计算数据大小\r\n   * \r\n   * @param value - 数据值\r\n   * @returns 数据大小(bytes)\r\n   */\r\n  private calculateSize(value: any): number {\r\n    try {\r\n      return JSON.stringify(value).length * 2 // 粗略估算(UTF-16)\r\n    } catch {\r\n      return 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取版本号\r\n   * \r\n   * @param key - 缓存键\r\n   * @returns 版本号\r\n   */\r\n  private getVersion(key: string): number {\r\n    return this.keyVersions.get(key) || 1\r\n  }\r\n\r\n  /**\r\n   * 递增版本号\r\n   * \r\n   * @param key - 缓存键\r\n   * @returns 新版本号\r\n   */\r\n  private incrementVersion(key: string): number {\r\n    const currentVersion = this.getVersion(key)\r\n    const newVersion = currentVersion + 1\r\n    this.keyVersions.set(key, newVersion)\r\n    return newVersion\r\n  }\r\n\r\n  /**\r\n   * 处理查询完成事件\r\n   * \r\n   * @param stats - 查询统计\r\n   */\r\n  private handleQueryCompleted(stats: any): void {\r\n    // 基于查询统计进行预测性加载\r\n    if (this.predictiveConfig.enabled && stats.success) {\r\n      this.performPredictiveLoading(stats)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理数据库指标\r\n   * \r\n   * @param metrics - 数据库指标\r\n   */\r\n  private handleDatabaseMetrics(metrics: any): void {\r\n    // 根据数据库负载调整缓存策略\r\n    if (metrics.cpuUsage > 80) {\r\n      // 高CPU使用率时，增加缓存TTL\r\n      this.adjustCacheTTL(1.5)\r\n    } else if (metrics.cpuUsage < 30) {\r\n      // 低CPU使用率时，减少缓存TTL\r\n      this.adjustCacheTTL(0.8)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行预测性加载\r\n   * \r\n   * @param stats - 查询统计\r\n   */\r\n  private performPredictiveLoading(stats: any): void {\r\n    // 这里实现预测性加载逻辑\r\n    // 基于访问模式预测可能需要的数据\r\n    const relatedKeys = this.predictRelatedKeys(stats)\r\n    \r\n    relatedKeys.forEach(async (key) => {\r\n      if (!this.l1Cache.has(key) && !await this.hasInL2(key)) {\r\n        // 预加载数据\r\n        this.emit('predictive-load-needed', { key, stats })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 预测相关键\r\n   * \r\n   * @param stats - 查询统计\r\n   * @returns 相关键数组\r\n   */\r\n  private predictRelatedKeys(stats: any): string[] {\r\n    // 简单的预测逻辑，实际应用中可以使用更复杂的算法\r\n    const relatedKeys: string[] = []\r\n    \r\n    if (stats.tables) {\r\n      stats.tables.forEach((table: string) => {\r\n        // 预测同表的其他常用查询\r\n        relatedKeys.push(`${table}:popular_queries`)\r\n        relatedKeys.push(`${table}:recent_data`)\r\n      })\r\n    }\r\n    \r\n    return relatedKeys\r\n  }\r\n\r\n  /**\r\n   * 检查L2缓存中是否存在\r\n   * \r\n   * @param key - 缓存键\r\n   * @returns 是否存在\r\n   */\r\n  private async hasInL2(key: string): Promise<boolean> {\r\n    if (!this.l2Cache) {\r\n      return false\r\n    }\r\n    \r\n    try {\r\n      const exists = await this.l2Cache.exists(key)\r\n      return exists === 1\r\n    } catch (error: any) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 调整缓存TTL\r\n   * \r\n   * @param factor - 调整因子\r\n   */\r\n  private adjustCacheTTL(factor: number): void {\r\n    // 动态调整缓存TTL\r\n    const newL1TTL = Math.max(60000, this.config.l1.ttl * factor) // 最少1分钟\r\n    const newL2TTL = Math.max(300000, this.config.l2.ttl * factor) // 最少5分钟\r\n    \r\n    this.config.l1.ttl = newL1TTL\r\n    this.config.l2.ttl = newL2TTL\r\n    \r\n    console.log(`Adjusted cache TTL: L1=${newL1TTL}ms, L2=${newL2TTL}ms`)\r\n  }\r\n\r\n  /**\r\n   * 收集指标\r\n   */\r\n  private collectMetrics(): void {\r\n    // 更新L1缓存统计\r\n    this.stats.levelStats[CacheLevel.L1].size = this.l1Cache.size\r\n    this.stats.levelStats[CacheLevel.L1].memoryUsage = this.calculateL1MemoryUsage()\r\n    \r\n    // 发送指标事件\r\n    this.emit('metrics-collected', this.stats)\r\n  }\r\n\r\n  /**\r\n   * 计算L1缓存内存使用\r\n   * \r\n   * @returns 内存使用量(bytes)\r\n   */\r\n  private calculateL1MemoryUsage(): number {\r\n    let totalSize = 0\r\n    for (const item of this.l1Cache.values()) {\r\n      if (item) {\r\n        totalSize += item.size\r\n      }\r\n    }\r\n    return totalSize\r\n  }\r\n\r\n  /**\r\n   * 检查告警\r\n   */\r\n  private checkAlerts(): void {\r\n    const thresholds = this.config.monitoring.alertThresholds\r\n    \r\n    // 检查命中率\r\n    if (this.stats.hitRate < thresholds.hitRateMin) {\r\n      this.emit('alert', {\r\n        type: 'low-hit-rate',\r\n        message: `Cache hit rate is below threshold: ${this.stats.hitRate.toFixed(2)} < ${thresholds.hitRateMin}`,\r\n        severity: 'warning'\r\n      })\r\n    }\r\n    \r\n    // 检查内存使用\r\n    const memoryUsage = this.calculateL1MemoryUsage()\r\n    const maxMemory = this.config.l1.maxSize * 1024 // 假设每项平均1KB\r\n    if (memoryUsage / maxMemory > thresholds.memoryUsageMax) {\r\n      this.emit('alert', {\r\n        type: 'high-memory-usage',\r\n        message: `Cache memory usage is above threshold: ${(memoryUsage / maxMemory * 100).toFixed(2)}% > ${thresholds.memoryUsageMax * 100}%`,\r\n        severity: 'warning'\r\n      })\r\n    }\r\n    \r\n    // 检查响应时间\r\n    if (this.stats.avgResponseTime > thresholds.latencyMax) {\r\n      this.emit('alert', {\r\n        type: 'high-latency',\r\n        message: `Cache average response time is above threshold: ${this.stats.avgResponseTime.toFixed(2)}ms > ${thresholds.latencyMax}ms`,\r\n        severity: 'warning'\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 优化缓存\r\n   */\r\n  private optimizeCache(): void {\r\n    // 清理过期数据\r\n    this.cleanupExpiredItems()\r\n    \r\n    // 优化热点数据\r\n    this.optimizeHotData()\r\n    \r\n    // 调整缓存策略\r\n    this.adjustCacheStrategy()\r\n  }\r\n\r\n  /**\r\n   * 清理过期项\r\n   */\r\n  private cleanupExpiredItems(): void {\r\n    const now = new Date()\r\n    const expiredKeys: string[] = []\r\n    \r\n    for (const [key, item] of this.l1Cache.entries()) {\r\n      if (item && new Date(item.expiresAt) < now) {\r\n        expiredKeys.push(key)\r\n      }\r\n    }\r\n    \r\n    expiredKeys.forEach(key => {\r\n      this.l1Cache.delete(key)\r\n      this.stats.evictions++\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 优化热点数据\r\n   */\r\n  private optimizeHotData(): void {\r\n    // 将热点数据的TTL延长\r\n    for (const hotKey of this.hotKeys) {\r\n      const item = this.l1Cache.get(hotKey)\r\n      if (item) {\r\n        const extendedTTL = this.config.l1.ttl * 2\r\n        item.expiresAt = new Date(Date.now() + extendedTTL)\r\n        this.l1Cache.set(hotKey, item, { ttl: extendedTTL })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 调整缓存策略\r\n   */\r\n  private adjustCacheStrategy(): void {\r\n    // 根据命中率调整策略\r\n    if (this.stats.hitRate < 0.5) {\r\n      // 命中率低，增加缓存大小\r\n      if (this.l1Cache.max < 2000) {\r\n        this.l1Cache.resize(this.l1Cache.max * 1.2)\r\n        console.log(`Increased L1 cache size to ${this.l1Cache.max}`)\r\n      }\r\n    } else if (this.stats.hitRate > 0.9) {\r\n      // 命中率高，可以适当减少缓存大小\r\n      if (this.l1Cache.max > 500) {\r\n        this.l1Cache.resize(this.l1Cache.max * 0.9)\r\n        console.log(`Decreased L1 cache size to ${this.l1Cache.max}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行缓存预热\r\n   */\r\n  private async performWarmup(): Promise<void> {\r\n    console.log('Performing cache warmup...')\r\n    \r\n    const warmupQueries = this.config.warmup.queries\r\n    \r\n    for (const query of warmupQueries) {\r\n      try {\r\n        // 这里需要实际执行查询并缓存结果\r\n        // await this.executeAndCache(query)\r\n        console.log(`Warmed up query: ${query}`)\r\n      } catch (error: any) {\r\n        console.error(`Warmup failed for query ${query}:`, error)\r\n      }\r\n    }\r\n    \r\n    this.emit('warmup-completed', { queries: warmupQueries.length })\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计\r\n   * \r\n   * @returns 缓存统计\r\n   */\r\n  getStats(): CacheStats {\r\n    return { ...this.stats }\r\n  }\r\n\r\n  /**\r\n   * 获取热点键\r\n   * \r\n   * @returns 热点键数组\r\n   */\r\n  getHotKeys(): string[] {\r\n    return Array.from(this.hotKeys)\r\n  }\r\n\r\n  /**\r\n   * 获取缓存配置\r\n   * \r\n   * @returns 缓存配置\r\n   */\r\n  getConfig(): CacheConfig {\r\n    return { ...this.config }\r\n  }\r\n\r\n  /**\r\n   * 更新缓存配置\r\n   * \r\n   * @param newConfig - 新配置\r\n   */\r\n  updateConfig(newConfig: Partial<CacheConfig>): void {\r\n    this.config = this.mergeConfig(newConfig)\r\n    console.log('Cache configuration updated')\r\n    this.emit('config-updated', this.config)\r\n  }\r\n\r\n  /**\r\n   * 清空所有缓存\r\n   */\r\n  async clearAll(): Promise<void> {\r\n    // 清空L1缓存\r\n    this.l1Cache.clear()\r\n    \r\n    // 清空L2缓存\r\n    if (this.config.l2.enabled && this.l2Cache) {\r\n      await this.l2Cache.flushdb()\r\n    }\r\n    \r\n    // 重置统计\r\n    this.stats = this.initializeStats()\r\n    \r\n    // 清空辅助数据\r\n    this.accessPatterns.clear()\r\n    this.hotKeys.clear()\r\n    this.keyVersions.clear()\r\n    \r\n    console.log('All caches cleared')\r\n    this.emit('cache-cleared')\r\n  }\r\n\r\n  /**\r\n   * 生成缓存报告\r\n   * \r\n   * @returns 缓存报告\r\n   */\r\n  generateReport(): {\r\n    summary: string\r\n    performance: any\r\n    recommendations: string[]\r\n  } {\r\n    const recommendations: string[] = []\r\n    \r\n    if (this.stats.hitRate < 0.7) {\r\n      recommendations.push('缓存命中率较低，建议检查缓存策略和TTL设置')\r\n    }\r\n    \r\n    if (this.stats.avgResponseTime > 50) {\r\n      recommendations.push('缓存响应时间较高，建议优化缓存层级或增加内存')\r\n    }\r\n    \r\n    if (this.hotKeys.size > 100) {\r\n      recommendations.push('热点数据较多，建议考虑分片或专用缓存')\r\n    }\r\n    \r\n    return {\r\n      summary: `\r\n智能缓存管理报告\r\n================\r\n生成时间: ${new Date().toISOString()}\r\n总请求数: ${this.stats.totalRequests}\r\n命中率: ${(this.stats.hitRate * 100).toFixed(2)}%\r\n平均响应时间: ${this.stats.avgResponseTime.toFixed(2)}ms\r\nL1缓存大小: ${this.stats.levelStats[CacheLevel.L1].size}\r\nL2缓存启用: ${this.config.l2.enabled ? '是' : '否'}\r\n热点数据: ${this.hotKeys.size} 个\r\n错误次数: ${this.stats.errors}\r\n      `.trim(),\r\n      performance: {\r\n        hitRate: this.stats.hitRate,\r\n        avgResponseTime: this.stats.avgResponseTime,\r\n        levelStats: this.stats.levelStats,\r\n        hotKeysCount: this.hotKeys.size,\r\n        errorRate: this.stats.errors / Math.max(1, this.stats.totalRequests)\r\n      },\r\n      recommendations\r\n    }\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nexport const intelligentCacheManager = new IntelligentCacheManager()\r\n\r\n// 导出类型\r\nexport type {\r\n  CacheConfig,\r\n  CacheItem,\r\n  CacheStats,\r\n  CacheEvent,\r\n  PredictiveLoadConfig\r\n}\r\n\r\nexport { CacheLevel, CacheStrategy }"],"version":3}