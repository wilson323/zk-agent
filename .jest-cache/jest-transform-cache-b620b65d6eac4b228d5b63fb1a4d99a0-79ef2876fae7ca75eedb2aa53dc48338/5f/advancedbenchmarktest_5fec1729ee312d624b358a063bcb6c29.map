{"version":3,"names":["performance","require","fs","path","describe","test","start","now","Promise","resolve","setTimeout","end","duration","expect","toBeLessThan","testFile","join","__dirname","existsSync","promises","readFile","result","i","Math","sqrt","toBeGreaterThan","initialMemory","process","memoryUsage","objects","push","id","data","Array","fill","afterCreation","length","global","gc","afterCleanup","memoryGrowth","heapUsed","memoryGrowthMB","random","results","all","toHaveLength"],"sources":["advanced-benchmark.test.js"],"sourcesContent":["/**\n * @file Advanced Performance Benchmark Tests\n * @description 高级性能基准测试\n */\n\nconst { performance } = require('perf_hooks');\nconst fs = require('fs');\nconst path = require('path');\n\ndescribe('Advanced Performance Benchmarks', () => {\n  /**\n   * 测试数据库连接性能\n   */\n  test('数据库连接性能测试', async () => {\n    const start = performance.now();\n    \n    // 模拟数据库连接\n    await new Promise(resolve => setTimeout(resolve, 30));\n    \n    const end = performance.now();\n    const duration = end - start;\n    \n    // 数据库连接应在50ms内完成\n    expect(duration).toBeLessThan(50);\n  });\n  \n  /**\n   * 测试文件读取性能\n   */\n  test('文件读取性能测试', async () => {\n    const start = performance.now();\n    \n    // 模拟文件读取\n    const testFile = path.join(__dirname, '../basic.test.js');\n    if (fs.existsSync(testFile)) {\n      await fs.promises.readFile(testFile, 'utf8');\n    }\n    \n    const end = performance.now();\n    const duration = end - start;\n    \n    // 文件读取应在20ms内完成\n    expect(duration).toBeLessThan(20);\n  });\n  \n  /**\n   * 测试CPU密集型操作性能\n   */\n  test('CPU密集型操作性能测试', () => {\n    const start = performance.now();\n    \n    // 模拟CPU密集型计算\n    let result = 0;\n    for (let i = 0; i < 100000; i++) {\n      result += Math.sqrt(i);\n    }\n    \n    const end = performance.now();\n    const duration = end - start;\n    \n    // CPU计算应在100ms内完成\n    expect(duration).toBeLessThan(100);\n    expect(result).toBeGreaterThan(0);\n  });\n  \n  /**\n   * 测试内存泄漏检测\n   */\n  test('内存泄漏检测', () => {\n    const initialMemory = process.memoryUsage();\n    \n    // 创建大量对象\n    const objects = [];\n    for (let i = 0; i < 1000; i++) {\n      objects.push({ id: i, data: new Array(100).fill(i) });\n    }\n    \n    const afterCreation = process.memoryUsage();\n    \n    // 清理对象\n    objects.length = 0;\n    \n    // 强制垃圾回收（如果可用）\n    if (global.gc) {\n      global.gc();\n    }\n    \n    const afterCleanup = process.memoryUsage();\n    \n    // 内存增长应该是合理的\n    const memoryGrowth = afterCleanup.heapUsed - initialMemory.heapUsed;\n    const memoryGrowthMB = memoryGrowth / 1024 / 1024;\n    \n    expect(memoryGrowthMB).toBeLessThan(10); // 内存增长应小于10MB\n  });\n  \n  /**\n   * 测试并发处理性能\n   */\n  test('并发处理性能测试', async () => {\n    const start = performance.now();\n    \n    // 模拟并发操作\n    const promises = [];\n    for (let i = 0; i < 10; i++) {\n      promises.push(\n        new Promise(resolve => \n          setTimeout(() => resolve(i), Math.random() * 20)\n        )\n      );\n    }\n    \n    const results = await Promise.all(promises);\n    \n    const end = performance.now();\n    const duration = end - start;\n    \n    // 并发操作应在50ms内完成\n    expect(duration).toBeLessThan(50);\n    expect(results).toHaveLength(10);\n  });\n});"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAY,CAAC,GAAGC,OAAO,CAAC,YAAY,CAAC;AAC7C,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5BG,QAAQ,CAAC,iCAAiC,EAAE,MAAM;EAChD;AACF;AACA;EACEC,IAAI,CAAC,WAAW,EAAE,YAAY;IAC5B,MAAMC,KAAK,GAAGN,WAAW,CAACO,GAAG,CAAC,CAAC;;IAE/B;IACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,EAAE,CAAC,CAAC;IAErD,MAAME,GAAG,GAAGX,WAAW,CAACO,GAAG,CAAC,CAAC;IAC7B,MAAMK,QAAQ,GAAGD,GAAG,GAAGL,KAAK;;IAE5B;IACAO,MAAM,CAACD,QAAQ,CAAC,CAACE,YAAY,CAAC,EAAE,CAAC;EACnC,CAAC,CAAC;;EAEF;AACF;AACA;EACET,IAAI,CAAC,UAAU,EAAE,YAAY;IAC3B,MAAMC,KAAK,GAAGN,WAAW,CAACO,GAAG,CAAC,CAAC;;IAE/B;IACA,MAAMQ,QAAQ,GAAGZ,IAAI,CAACa,IAAI,CAACC,SAAS,EAAE,kBAAkB,CAAC;IACzD,IAAIf,EAAE,CAACgB,UAAU,CAACH,QAAQ,CAAC,EAAE;MAC3B,MAAMb,EAAE,CAACiB,QAAQ,CAACC,QAAQ,CAACL,QAAQ,EAAE,MAAM,CAAC;IAC9C;IAEA,MAAMJ,GAAG,GAAGX,WAAW,CAACO,GAAG,CAAC,CAAC;IAC7B,MAAMK,QAAQ,GAAGD,GAAG,GAAGL,KAAK;;IAE5B;IACAO,MAAM,CAACD,QAAQ,CAAC,CAACE,YAAY,CAAC,EAAE,CAAC;EACnC,CAAC,CAAC;;EAEF;AACF;AACA;EACET,IAAI,CAAC,cAAc,EAAE,MAAM;IACzB,MAAMC,KAAK,GAAGN,WAAW,CAACO,GAAG,CAAC,CAAC;;IAE/B;IACA,IAAIc,MAAM,GAAG,CAAC;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,MAAM,EAAEA,CAAC,EAAE,EAAE;MAC/BD,MAAM,IAAIE,IAAI,CAACC,IAAI,CAACF,CAAC,CAAC;IACxB;IAEA,MAAMX,GAAG,GAAGX,WAAW,CAACO,GAAG,CAAC,CAAC;IAC7B,MAAMK,QAAQ,GAAGD,GAAG,GAAGL,KAAK;;IAE5B;IACAO,MAAM,CAACD,QAAQ,CAAC,CAACE,YAAY,CAAC,GAAG,CAAC;IAClCD,MAAM,CAACQ,MAAM,CAAC,CAACI,eAAe,CAAC,CAAC,CAAC;EACnC,CAAC,CAAC;;EAEF;AACF;AACA;EACEpB,IAAI,CAAC,QAAQ,EAAE,MAAM;IACnB,MAAMqB,aAAa,GAAGC,OAAO,CAACC,WAAW,CAAC,CAAC;;IAE3C;IACA,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,EAAE,EAAE;MAC7BO,OAAO,CAACC,IAAI,CAAC;QAAEC,EAAE,EAAET,CAAC;QAAEU,IAAI,EAAE,IAAIC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAACZ,CAAC;MAAE,CAAC,CAAC;IACvD;IAEA,MAAMa,aAAa,GAAGR,OAAO,CAACC,WAAW,CAAC,CAAC;;IAE3C;IACAC,OAAO,CAACO,MAAM,GAAG,CAAC;;IAElB;IACA,IAAIC,MAAM,CAACC,EAAE,EAAE;MACbD,MAAM,CAACC,EAAE,CAAC,CAAC;IACb;IAEA,MAAMC,YAAY,GAAGZ,OAAO,CAACC,WAAW,CAAC,CAAC;;IAE1C;IACA,MAAMY,YAAY,GAAGD,YAAY,CAACE,QAAQ,GAAGf,aAAa,CAACe,QAAQ;IACnE,MAAMC,cAAc,GAAGF,YAAY,GAAG,IAAI,GAAG,IAAI;IAEjD3B,MAAM,CAAC6B,cAAc,CAAC,CAAC5B,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3C,CAAC,CAAC;;EAEF;AACF;AACA;EACET,IAAI,CAAC,UAAU,EAAE,YAAY;IAC3B,MAAMC,KAAK,GAAGN,WAAW,CAACO,GAAG,CAAC,CAAC;;IAE/B;IACA,MAAMY,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BH,QAAQ,CAACW,IAAI,CACX,IAAItB,OAAO,CAACC,OAAO,IACjBC,UAAU,CAAC,MAAMD,OAAO,CAACa,CAAC,CAAC,EAAEC,IAAI,CAACoB,MAAM,CAAC,CAAC,GAAG,EAAE,CACjD,CACF,CAAC;IACH;IAEA,MAAMC,OAAO,GAAG,MAAMpC,OAAO,CAACqC,GAAG,CAAC1B,QAAQ,CAAC;IAE3C,MAAMR,GAAG,GAAGX,WAAW,CAACO,GAAG,CAAC,CAAC;IAC7B,MAAMK,QAAQ,GAAGD,GAAG,GAAGL,KAAK;;IAE5B;IACAO,MAAM,CAACD,QAAQ,CAAC,CAACE,YAAY,CAAC,EAAE,CAAC;IACjCD,MAAM,CAAC+B,OAAO,CAAC,CAACE,YAAY,CAAC,EAAE,CAAC;EAClC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}