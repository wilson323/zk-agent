{"file":"E:\\zk-agent\\lib\\database\\pool-optimizer.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\lib\\database\\pool-optimizer.ts"],"sourcesContent":["/**\n * @file Database Connection Pool Optimizer\n * @description 数据库连接池动态优化器\n * @author ZK-Agent Team\n * @date 2024-12-19\n */\n\nimport { EventEmitter } from 'events'\nimport { enhancedDb } from './enhanced-connection'\nimport { databaseMonitor, DatabaseMetrics, AlertLevel } from './monitoring'\n\n// 连接池配置\nexport interface PoolConfiguration {\n  connectionLimit: number\n  acquireTimeoutMillis: number\n  createTimeoutMillis: number\n  destroyTimeoutMillis: number\n  idleTimeoutMillis: number\n  reapIntervalMillis: number\n  createRetryIntervalMillis: number\n  min: number\n  max: number\n}\n\n// 优化策略\nexport interface OptimizationStrategy {\n  name: string\n  description: string\n  enabled: boolean\n  priority: number\n  conditions: {\n    minMetricsCount: number\n    timeWindowMs: number\n    triggers: {\n      highLatency?: number\n      highFailureRate?: number\n      lowThroughput?: number\n      highCpuUsage?: number\n      highMemoryUsage?: number\n    }\n  }\n  actions: {\n    adjustConnectionLimit?: {\n      increment?: number\n      decrement?: number\n      maxLimit?: number\n      minLimit?: number\n    }\n    adjustTimeouts?: {\n      acquireTimeout?: number\n      createTimeout?: number\n      idleTimeout?: number\n    }\n    adjustPoolSize?: {\n      minConnections?: number\n      maxConnections?: number\n    }\n  }\n}\n\n// 优化结果\nexport interface OptimizationResult {\n  timestamp: Date\n  strategy: string\n  previousConfig: Partial<PoolConfiguration>\n  newConfig: Partial<PoolConfiguration>\n  reason: string\n  metrics: DatabaseMetrics\n  success: boolean\n  error?: string\n}\n\n/**\n * 数据库连接池优化器\n */\nexport class DatabasePoolOptimizer extends EventEmitter {\n  private isOptimizing: boolean = false\n  private optimizationInterval: NodeJS.Timeout | null = null\n  private optimizationHistory: OptimizationResult[] = []\n  private strategies: OptimizationStrategy[]\n  private currentConfig: PoolConfiguration\n  private intervalMs: number\n  private maxHistorySize: number\n  private lastOptimization: Date | null = null\n  private cooldownMs: number\n\n  constructor(\n    intervalMs: number = 60000, // 1分钟检查一次\n    maxHistorySize: number = 100,\n    cooldownMs: number = 300000 // 5分钟冷却期\n  ) {\n    super()\n\n    this.intervalMs = intervalMs\n    this.maxHistorySize = maxHistorySize\n    this.cooldownMs = cooldownMs\n\n    // 初始化当前配置\n    this.currentConfig = this.getDefaultConfiguration()\n\n    // 初始化优化策略\n    this.strategies = this.getDefaultStrategies()\n\n    // 监听数据库监控事件\n    this.setupMonitoringEventListeners()\n  }\n\n  /**\n   * 获取默认配置\n   */\n  private getDefaultConfiguration(): PoolConfiguration {\n    return {\n      connectionLimit: parseInt(process.env.DB_CONNECTION_LIMIT || '10'),\n      acquireTimeoutMillis: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000'),\n      createTimeoutMillis: parseInt(process.env.DB_CREATE_TIMEOUT || '30000'),\n      destroyTimeoutMillis: parseInt(process.env.DB_DESTROY_TIMEOUT || '5000'),\n      idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT || '300000'),\n      reapIntervalMillis: parseInt(process.env.DB_REAP_INTERVAL || '1000'),\n      createRetryIntervalMillis: parseInt(process.env.DB_CREATE_RETRY_INTERVAL || '200'),\n      min: parseInt(process.env.DB_MIN_CONNECTIONS || '2'),\n      max: parseInt(process.env.DB_MAX_CONNECTIONS || '20')\n    }\n  }\n\n  /**\n   * 获取默认优化策略\n   */\n  private getDefaultStrategies(): OptimizationStrategy[] {\n    return [\n      {\n        name: 'high_latency_scale_up',\n        description: '高延迟时增加连接数',\n        enabled: true,\n        priority: 1,\n        conditions: {\n          minMetricsCount: 5,\n          timeWindowMs: 300000, // 5分钟\n          triggers: {\n            highLatency: parseFloat(process.env.DB_HIGH_LATENCY_THRESHOLD || '1000')\n          }\n        },\n        actions: {\n          adjustConnectionLimit: {\n            increment: 2,\n            maxLimit: parseInt(process.env.DB_MAX_CONNECTIONS || '20')\n          },\n          adjustPoolSize: {\n            maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '20')\n          }\n        }\n      },\n      {\n        name: 'high_failure_rate_timeout_increase',\n        description: '高失败率时增加超时时间',\n        enabled: true,\n        priority: 2,\n        conditions: {\n          minMetricsCount: 3,\n          timeWindowMs: 180000, // 3分钟\n          triggers: {\n            highFailureRate: parseFloat(process.env.DB_HIGH_FAILURE_RATE_THRESHOLD || '5')\n          }\n        },\n        actions: {\n          adjustTimeouts: {\n            acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000') * 1.5,\n            createTimeout: parseInt(process.env.DB_CREATE_TIMEOUT || '30000') * 1.5\n          }\n        }\n      },\n      {\n        name: 'low_usage_scale_down',\n        description: '低使用率时减少连接数',\n        enabled: true,\n        priority: 3,\n        conditions: {\n          minMetricsCount: 10,\n          timeWindowMs: 600000, // 10分钟\n          triggers: {\n            lowThroughput: parseFloat(process.env.DB_LOW_THROUGHPUT_THRESHOLD || '0.1')\n          }\n        },\n        actions: {\n          adjustConnectionLimit: {\n            decrement: 1,\n            minLimit: parseInt(process.env.DB_MIN_CONNECTIONS || '2')\n          },\n          adjustPoolSize: {\n            minConnections: parseInt(process.env.DB_MIN_CONNECTIONS || '2')\n          }\n        }\n      },\n      {\n        name: 'high_memory_usage_optimize',\n        description: '高内存使用时优化连接池',\n        enabled: true,\n        priority: 4,\n        conditions: {\n          minMetricsCount: 3,\n          timeWindowMs: 180000,\n          triggers: {\n            highMemoryUsage: parseFloat(process.env.DB_HIGH_MEMORY_THRESHOLD || '80') // 80% 内存使用率\n          }\n        },\n        actions: {\n          adjustTimeouts: {\n            idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '300000') * 0.5 // 减少空闲超时\n          },\n          adjustConnectionLimit: {\n            decrement: 1,\n            minLimit: parseInt(process.env.DB_MIN_CONNECTIONS || '2')\n          }\n        }\n      },\n      {\n        name: 'connection_recovery',\n        description: '连接恢复优化',\n        enabled: true,\n        priority: 5,\n        conditions: {\n          minMetricsCount: 2,\n          timeWindowMs: 120000, // 2分钟\n          triggers: {\n            highFailureRate: 10 // 10% 失败率触发恢复\n          }\n        },\n        actions: {\n          adjustTimeouts: {\n            createTimeout: parseInt(process.env.DB_CREATE_TIMEOUT || '30000') * 2,\n            acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000') * 2\n          },\n          adjustPoolSize: {\n            minConnections: Math.max(1, parseInt(process.env.DB_MIN_CONNECTIONS || '2') - 1)\n          }\n        }\n      }\n    ]\n  }\n\n  /**\n   * 设置监控事件监听器\n   */\n  private setupMonitoringEventListeners(): void {\n    databaseMonitor.on('alert', (alert) => {\n      if (alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.ERROR) {\n        // 紧急情况下立即触发优化\n        this.triggerImmediateOptimization(alert.message)\n      }\n    })\n\n    databaseMonitor.on('metrics', (metrics) => {\n      // 定期检查是否需要优化\n      if (this.shouldTriggerOptimization(metrics)) {\n        this.performOptimization()\n      }\n    })\n  }\n\n  /**\n   * 开始优化\n   */\n  startOptimization(): void {\n    if (this.isOptimizing) {\n      console.log('Database pool optimization is already running')\n      return\n    }\n\n    console.log(`Starting database pool optimization (interval: ${this.intervalMs}ms)`)\n    this.isOptimizing = true\n\n    this.optimizationInterval = setInterval(() => {\n      this.performOptimization()\n    }, this.intervalMs)\n\n    // 立即执行一次优化检查\n    this.performOptimization()\n  }\n\n  /**\n   * 停止优化\n   */\n  stopOptimization(): void {\n    if (!this.isOptimizing) {\n      return\n    }\n\n    console.log('Stopping database pool optimization')\n    this.isOptimizing = false\n\n    if (this.optimizationInterval) {\n      clearInterval(this.optimizationInterval)\n      this.optimizationInterval = null\n    }\n  }\n\n  /**\n   * 判断是否应该触发优化\n   */\n  private shouldTriggerOptimization(metrics: DatabaseMetrics): boolean {\n    // 检查冷却期\n    if (this.lastOptimization && \n        Date.now() - this.lastOptimization.getTime() < this.cooldownMs) {\n      return false\n    }\n\n    // 检查是否有策略被触发\n    return this.strategies.some(strategy => \n      strategy.enabled && this.isStrategyTriggered(strategy, metrics)\n    )\n  }\n\n  /**\n   * 检查策略是否被触发\n   */\n  private isStrategyTriggered(strategy: OptimizationStrategy, currentMetrics: DatabaseMetrics): boolean {\n    const recentMetrics = databaseMonitor.getMetricsHistory()\n      .filter(m => Date.now() - m.timestamp.getTime() <= strategy.conditions.timeWindowMs)\n\n    if (recentMetrics.length < strategy.conditions.minMetricsCount) {\n      return false\n    }\n\n    const triggers = strategy.conditions.triggers\n\n    // 检查高延迟\n    if (triggers.highLatency !== undefined) {\n      const avgLatency = recentMetrics.reduce((sum, m) => sum + m.avgLatency, 0) / recentMetrics.length\n      if (avgLatency > triggers.highLatency) {\n        return true\n      }\n    }\n\n    // 检查高失败率\n    if (triggers.highFailureRate !== undefined) {\n      const avgFailureRate = recentMetrics.reduce((sum, m) => sum + (100 - m.successRate), 0) / recentMetrics.length\n      if (avgFailureRate > triggers.highFailureRate) {\n        return true\n      }\n    }\n\n    // 检查低吞吐量\n    if (triggers.lowThroughput !== undefined) {\n      const totalQueries = currentMetrics.totalQueries\n      const timeSpanMs = recentMetrics.length > 1 \n        ? recentMetrics[recentMetrics.length - 1].timestamp.getTime() - recentMetrics[0].timestamp.getTime()\n        : strategy.conditions.timeWindowMs\n      const throughput = totalQueries / (timeSpanMs / 1000) // 每秒查询数\n      if (throughput < triggers.lowThroughput) {\n        return true\n      }\n    }\n\n    // 检查高CPU使用率\n    if (triggers.highCpuUsage !== undefined) {\n      const avgCpuUsage = recentMetrics.reduce((sum, m) => sum + m.cpuUsage.user + m.cpuUsage.system, 0) / recentMetrics.length\n      if (avgCpuUsage > triggers.highCpuUsage) {\n        return true\n      }\n    }\n\n    // 检查高内存使用率\n    if (triggers.highMemoryUsage !== undefined) {\n      const avgMemoryUsage = recentMetrics.reduce((sum, m) => {\n        const usagePercent = (m.memoryUsage.heapUsed / m.memoryUsage.heapTotal) * 100\n        return sum + usagePercent\n      }, 0) / recentMetrics.length\n      if (avgMemoryUsage > triggers.highMemoryUsage) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * 执行优化\n   */\n  private async performOptimization(): Promise<void> {\n    try {\n      const currentMetrics = databaseMonitor.getMetricsHistory(1)[0]\n      if (!currentMetrics) {\n        return\n      }\n\n      // 找到优先级最高的被触发策略\n      const triggeredStrategies = this.strategies\n        .filter(strategy => strategy.enabled && this.isStrategyTriggered(strategy, currentMetrics))\n        .sort((a, b) => a.priority - b.priority)\n\n      if (triggeredStrategies.length === 0) {\n        return\n      }\n\n      const strategy = triggeredStrategies[0]\n      const previousConfig = { ...this.currentConfig }\n      const newConfig = this.applyStrategy(strategy, this.currentConfig)\n\n      if (this.hasConfigurationChanged(previousConfig, newConfig)) {\n        const result = await this.applyConfiguration(newConfig, strategy, currentMetrics, previousConfig)\n        this.addOptimizationResult(result)\n        this.lastOptimization = new Date()\n        \n        this.emit('optimization', result)\n        \n        if (result.success) {\n          this.currentConfig = { ...this.currentConfig, ...newConfig }\n          console.log(`Database pool optimized using strategy: ${strategy.name}`)\n        } else {\n          console.error(`Failed to apply optimization strategy: ${strategy.name}`, result.error)\n        }\n      }\n\n    } catch (error) {\n      console.error('Error during database pool optimization:', error)\n    }\n  }\n\n  /**\n   * 应用策略\n   */\n  private applyStrategy(strategy: OptimizationStrategy, currentConfig: PoolConfiguration): Partial<PoolConfiguration> {\n    const newConfig: Partial<PoolConfiguration> = {}\n\n    // 调整连接限制\n    if (strategy.actions.adjustConnectionLimit) {\n      const adjust = strategy.actions.adjustConnectionLimit\n      let newLimit = currentConfig.connectionLimit\n\n      if (adjust.increment) {\n        newLimit += adjust.increment\n      }\n      if (adjust.decrement) {\n        newLimit -= adjust.decrement\n      }\n      if (adjust.maxLimit) {\n        newLimit = Math.min(newLimit, adjust.maxLimit)\n      }\n      if (adjust.minLimit) {\n        newLimit = Math.max(newLimit, adjust.minLimit)\n      }\n\n      newConfig.connectionLimit = newLimit\n    }\n\n    // 调整超时时间\n    if (strategy.actions.adjustTimeouts) {\n      const timeouts = strategy.actions.adjustTimeouts\n      if (timeouts.acquireTimeout) {\n        newConfig.acquireTimeoutMillis = timeouts.acquireTimeout\n      }\n      if (timeouts.createTimeout) {\n        newConfig.createTimeoutMillis = timeouts.createTimeout\n      }\n      if (timeouts.idleTimeout) {\n        newConfig.idleTimeoutMillis = timeouts.idleTimeout\n      }\n    }\n\n    // 调整连接池大小\n    if (strategy.actions.adjustPoolSize) {\n      const poolSize = strategy.actions.adjustPoolSize\n      if (poolSize.minConnections) {\n        newConfig.min = poolSize.minConnections\n      }\n      if (poolSize.maxConnections) {\n        newConfig.max = poolSize.maxConnections\n      }\n    }\n\n    return newConfig\n  }\n\n  /**\n   * 检查配置是否有变化\n   */\n  private hasConfigurationChanged(oldConfig: PoolConfiguration, newConfig: Partial<PoolConfiguration>): boolean {\n    return Object.keys(newConfig).some(key => {\n      const configKey = key as keyof PoolConfiguration\n      return oldConfig[configKey] !== newConfig[configKey]\n    })\n  }\n\n  /**\n   * 应用配置\n   */\n  private async applyConfiguration(\n    newConfig: Partial<PoolConfiguration>,\n    strategy: OptimizationStrategy,\n    metrics: DatabaseMetrics,\n    previousConfig: PoolConfiguration\n  ): Promise<OptimizationResult> {\n    const result: OptimizationResult = {\n      timestamp: new Date(),\n      strategy: strategy.name,\n      previousConfig,\n      newConfig,\n      reason: strategy.description,\n      metrics,\n      success: false\n    }\n\n    try {\n      // 这里应该调用实际的配置更新方法\n      // 由于Prisma的连接池配置在初始化时设定，这里我们模拟配置更新\n      await this.updateDatabaseConfiguration(newConfig)\n      \n      result.success = true\n      console.log('Database configuration updated successfully:', newConfig)\n      \n    } catch (error) {\n      result.error = error instanceof Error ? error.message : String(error)\n      console.error('Failed to update database configuration:', error)\n    }\n\n    return result\n  }\n\n  /**\n   * 更新数据库配置（模拟实现）\n   */\n  private async updateDatabaseConfiguration(config: Partial<PoolConfiguration>): Promise<void> {\n    // 在实际实现中，这里应该：\n    // 1. 更新环境变量或配置文件\n    // 2. 重新初始化数据库连接池\n    // 3. 验证新配置是否生效\n    \n    // 模拟配置更新延迟\n    await new Promise(resolve => setTimeout(resolve, 100))\n    \n    // 这里可以调用enhancedDb的配置更新方法\n    if (enhancedDb && typeof enhancedDb.updateConfig === 'function') {\n      await enhancedDb.updateConfig(config)\n    }\n  }\n\n  /**\n   * 立即触发优化\n   */\n  private async triggerImmediateOptimization(reason: string): Promise<void> {\n    console.log(`Triggering immediate optimization due to: ${reason}`)\n    await this.performOptimization()\n  }\n\n  /**\n   * 添加优化结果到历史\n   */\n  private addOptimizationResult(result: OptimizationResult): void {\n    this.optimizationHistory.push(result)\n\n    // 限制历史记录大小\n    if (this.optimizationHistory.length > this.maxHistorySize) {\n      this.optimizationHistory = this.optimizationHistory.slice(-this.maxHistorySize)\n    }\n  }\n\n  /**\n   * 获取优化历史\n   */\n  getOptimizationHistory(limit?: number): OptimizationResult[] {\n    if (limit) {\n      return this.optimizationHistory.slice(-limit)\n    }\n    return [...this.optimizationHistory]\n  }\n\n  /**\n   * 获取当前配置\n   */\n  getCurrentConfiguration(): PoolConfiguration {\n    return { ...this.currentConfig }\n  }\n\n  /**\n   * 获取策略列表\n   */\n  getStrategies(): OptimizationStrategy[] {\n    return [...this.strategies]\n  }\n\n  /**\n   * 更新策略\n   */\n  updateStrategy(name: string, updates: Partial<OptimizationStrategy>): boolean {\n    const strategyIndex = this.strategies.findIndex(s => s.name === name)\n    if (strategyIndex === -1) {\n      return false\n    }\n\n    this.strategies[strategyIndex] = { ...this.strategies[strategyIndex], ...updates }\n    console.log(`Strategy '${name}' updated successfully`)\n    return true\n  }\n\n  /**\n   * 添加新策略\n   */\n  addStrategy(strategy: OptimizationStrategy): void {\n    // 检查策略名称是否已存在\n    if (this.strategies.some(s => s.name === strategy.name)) {\n      throw new Error(`Strategy with name '${strategy.name}' already exists`)\n    }\n\n    this.strategies.push(strategy)\n    console.log(`Strategy '${strategy.name}' added successfully`)\n  }\n\n  /**\n   * 删除策略\n   */\n  removeStrategy(name: string): boolean {\n    const strategyIndex = this.strategies.findIndex(s => s.name === name)\n    if (strategyIndex === -1) {\n      return false\n    }\n\n    this.strategies.splice(strategyIndex, 1)\n    console.log(`Strategy '${name}' removed successfully`)\n    return true\n  }\n\n  /**\n   * 获取优化统计\n   */\n  getOptimizationStats(): {\n    totalOptimizations: number\n    successfulOptimizations: number\n    failedOptimizations: number\n    successRate: number\n    lastOptimization: Date | null\n    strategiesUsed: { [key: string]: number }\n  } {\n    const total = this.optimizationHistory.length\n    const successful = this.optimizationHistory.filter(r => r.success).length\n    const failed = total - successful\n    \n    const strategiesUsed: { [key: string]: number } = {}\n    this.optimizationHistory.forEach(result => {\n      strategiesUsed[result.strategy] = (strategiesUsed[result.strategy] || 0) + 1\n    })\n\n    return {\n      totalOptimizations: total,\n      successfulOptimizations: successful,\n      failedOptimizations: failed,\n      successRate: total > 0 ? (successful / total) * 100 : 0,\n      lastOptimization: this.lastOptimization,\n      strategiesUsed\n    }\n  }\n\n  /**\n   * 重置优化器\n   */\n  reset(): void {\n    this.stopOptimization()\n    this.optimizationHistory = []\n    this.lastOptimization = null\n    this.currentConfig = this.getDefaultConfiguration()\n    this.strategies = this.getDefaultStrategies()\n    console.log('Database pool optimizer reset successfully')\n  }\n}\n\n// 创建全局优化器实例\nexport const poolOptimizer = new DatabasePoolOptimizer()\n\n// 如果启用了优化，自动开始优化\nif (process.env.DB_POOL_OPTIMIZATION_ENABLED === 'true') {\n  poolOptimizer.startOptimization()\n  \n  // 监听优化事件\n  poolOptimizer.on('optimization', (result: OptimizationResult) => {\n    console.log('Database pool optimization completed:', {\n      strategy: result.strategy,\n      success: result.success,\n      changes: result.newConfig\n    })\n  })\n}\n\n// 导出便捷函数\nexport const startPoolOptimization = () => poolOptimizer.startOptimization()\nexport const stopPoolOptimization = () => poolOptimizer.stopOptimization()\nexport const getPoolConfiguration = () => poolOptimizer.getCurrentConfiguration()\nexport const getOptimizationHistory = (limit?: number) => poolOptimizer.getOptimizationHistory(limit)\nexport const getOptimizationStats = () => poolOptimizer.getOptimizationStats()\n\n// 默认导出优化器\nexport default poolOptimizer"],"version":3}