{"file":"E:\\zk-agent\\__tests__\\lib\\database\\connection.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\__tests__\\lib\\database\\connection.test.ts"],"sourcesContent":["/**\n * 数据库连接测试\n * 测试database/connection.ts中的所有功能\n */\n\nimport {\n  checkDatabaseConnection,\n  performDatabaseHealthCheck,\n  closeDatabaseConnection,\n  reconnectDatabase,\n  getDatabasePoolStatus,\n  prisma,\n  DatabaseStatus,\n  DatabaseHealthCheck,\n} from '@/lib/database/connection'\nimport { PrismaClient } from '@prisma/client'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\n\nconst mockPrismaInstance = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $queryRaw: jest.fn(),\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrismaInstance as any)\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(),\n  error: jest.spyOn(console, 'error').mockImplementation(),\n  warn: jest.spyOn(console, 'warn').mockImplementation(),\n}\n\n// Mock Date.now for consistent timing tests\nconst mockDateNow = jest.spyOn(Date, 'now')\n\ndescribe('Database Connection', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    consoleSpy.log.mockClear()\n    consoleSpy.error.mockClear()\n    consoleSpy.warn.mockClear()\n    mockDateNow.mockReturnValue(1000)\n  })\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore()\n    consoleSpy.error.mockRestore()\n    consoleSpy.warn.mockRestore()\n    mockDateNow.mockRestore()\n  })\n\n  describe('checkDatabaseConnection', () => {\n    it('应该成功检查数据库连接', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      // Mock version query\n      mockPrismaInstance.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // First call for connection test\n        .mockResolvedValueOnce([{ version: 'PostgreSQL 14.0' }]) // Second call for version\n\n      mockDateNow\n        .mockReturnValueOnce(1000) // Start time\n        .mockReturnValueOnce(1050) // End time\n\n      const result = await checkDatabaseConnection()\n\n      expect(result.connected).toBe(true)\n      expect(result.latency).toBe(50)\n      expect(result.version).toBe('PostgreSQL 14.0')\n      expect(result.timestamp).toBeInstanceOf(Date)\n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n    })\n\n    it('应该处理连接失败的情况', async () => {\n      const error = new Error('Connection failed')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n      \n      mockDateNow\n        .mockReturnValueOnce(1000) // Start time\n        .mockReturnValueOnce(1100) // End time\n\n      const result = await checkDatabaseConnection()\n\n      expect(result.connected).toBe(false)\n      expect(result.error).toBe('Connection failed')\n      expect(result.latency).toBe(100)\n      expect(consoleSpy.error).toHaveBeenCalledWith('Database connection check failed:', error)\n    })\n\n    it('应该处理版本查询失败的情况', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // Connection test succeeds\n        .mockRejectedValueOnce(new Error('Version query failed')) // Version query fails\n\n      const result = await checkDatabaseConnection()\n\n      expect(result.connected).toBe(true)\n      expect(result.version).toBeUndefined()\n      expect(consoleSpy.warn).toHaveBeenCalledWith(\n        'Failed to get database version:',\n        expect.any(Error)\n      )\n    })\n  })\n\n  describe('performDatabaseHealthCheck', () => {\n    beforeEach(() => {\n      // Mock successful connection by default\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n    })\n\n    it('应该返回健康状态', async () => {\n      const result = await performDatabaseHealthCheck()\n\n      expect(result.status).toBe('healthy')\n      expect(result.checks.connection.connected).toBe(true)\n      expect(result.checks.queries.read).toBe(true)\n      expect(result.checks.queries.write).toBe(true)\n      expect(result.checks.migrations.pending).toBe(0)\n      expect(result.timestamp).toBeInstanceOf(Date)\n    })\n\n    it('应该返回不健康状态当连接失败时', async () => {\n      mockPrismaInstance.$connect.mockRejectedValue(new Error('Connection failed'))\n\n      const result = await performDatabaseHealthCheck()\n\n      expect(result.status).toBe('unhealthy')\n      expect(result.checks.connection.connected).toBe(false)\n    })\n\n    it('应该处理健康检查异常', async () => {\n      // Mock an error that occurs during health check setup\n      mockPrismaInstance.$connect.mockImplementation(() => {\n        throw new Error('Unexpected error')\n      })\n\n      const result = await performDatabaseHealthCheck()\n\n      expect(result.status).toBe('unhealthy')\n      expect(result.checks.connection.connected).toBe(false)\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Database health check failed:',\n        expect.any(Error)\n      )\n    })\n  })\n\n  describe('closeDatabaseConnection', () => {\n    it('应该成功关闭数据库连接', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n\n      await closeDatabaseConnection()\n\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(consoleSpy.log).toHaveBeenCalledWith('Database connection closed successfully')\n    })\n\n    it('应该处理关闭连接时的错误', async () => {\n      const error = new Error('Disconnect failed')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n\n      await closeDatabaseConnection()\n\n      expect(consoleSpy.error).toHaveBeenCalledWith('Error closing database connection:', error)\n    })\n  })\n\n  describe('reconnectDatabase', () => {\n    it('应该成功重新连接数据库', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n\n      const result = await reconnectDatabase()\n\n      expect(result).toBe(true)\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n    })\n\n    it('应该处理重连失败的情况', async () => {\n      const error = new Error('Reconnection failed')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n\n      const result = await reconnectDatabase()\n\n      expect(result).toBe(false)\n      expect(consoleSpy.error).toHaveBeenCalledWith('Database reconnection failed:', error)\n    })\n  })\n\n  describe('getDatabasePoolStatus', () => {\n    it('应该返回连接池状态', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      mockDateNow\n        .mockReturnValueOnce(1000)\n        .mockReturnValueOnce(1050)\n\n      const result = await getDatabasePoolStatus()\n\n      expect(result.connected).toBe(true)\n      expect(result.latency).toBe(50)\n      expect(result.pool.active).toBe(1)\n      expect(result.pool.idle).toBe(0)\n      expect(result.pool.total).toBe(1)\n    })\n\n    it('应该处理连接池状态检查失败', async () => {\n      mockPrismaInstance.$connect.mockRejectedValue(new Error('Pool status failed'))\n\n      const result = await getDatabasePoolStatus()\n\n      expect(result.connected).toBe(false)\n      expect(result.error).toBe('Pool status failed')\n      expect(result.pool.active).toBe(0)\n      expect(result.pool.total).toBe(0)\n    })\n  })\n\n  describe('prisma export', () => {\n    it('应该导出prisma实例', () => {\n      expect(prisma).toBeDefined()\n    })\n  })\n})\n\n// 测试进程事件监听器\ndescribe('Process Event Listeners', () => {\n  let originalProcess: NodeJS.Process\n  let mockExit: jest.SpyInstance\n\n  beforeAll(() => {\n    originalProcess = global.process\n    mockExit = jest.spyOn(process, 'exit').mockImplementation(() => {\n      throw new Error('process.exit called')\n    })\n  })\n\n  afterAll(() => {\n    global.process = originalProcess\n    mockExit.mockRestore()\n  })\n\n  it('应该注册进程退出事件监听器', () => {\n    const mockProcess = {\n      on: jest.fn(),\n    } as any\n\n    global.process = mockProcess\n\n    // 重新导入模块以触发事件监听器注册\n    jest.resetModules()\n    require('@/lib/database/connection')\n\n    expect(mockProcess.on).toHaveBeenCalledWith('beforeExit', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGINT', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGTERM', expect.any(Function))\n  })\n})"],"version":3}