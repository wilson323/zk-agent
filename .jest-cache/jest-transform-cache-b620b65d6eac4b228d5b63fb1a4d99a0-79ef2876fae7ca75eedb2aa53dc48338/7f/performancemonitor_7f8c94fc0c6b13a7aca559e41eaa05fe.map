{"version":3,"names":["EventEmitter","require","fs","promises","path","DatabasePerformanceMonitor","constructor","options","enableMetrics","process","env","ENABLE_METRICS","metricsRetentionDays","parseInt","METRICS_RETENTION_DAYS","slowQueryThreshold","SLOW_QUERY_THRESHOLD","alertThreshold","connectionCount","ALERT_CONNECTION_COUNT","avgResponseTime","ALERT_AVG_RESPONSE_TIME","errorRate","parseFloat","ALERT_ERROR_RATE","metrics","queries","connections","errors","performance","totalQueries","slowQueries","totalErrors","peakConnections","startTime","Date","now","cleanupInterval","startCleanupScheduler","recordQuery","queryInfo","timestamp","duration","record","query","params","success","error","connectionId","push","emit","console","warn","recordError","updateAverageResponseTime","checkAlerts","recordConnection","connectionInfo","action","poolStatus","totalCount","type","message","stack","code","severity","getErrorSeverity","criticalCodes","warningCodes","includes","currentAvg","perf","thresholds","value","threshold","toFixed","getPerformanceStats","uptime","oneHourAgo","recentQueries","filter","q","recentErrors","e","recentAvgResponseTime","length","reduce","sum","recentErrorRate","overall","recent","queriesLastHour","errorsLastHour","avgResponseTimeLastHour","errorRateLastHour","getSlowQueries","getRecentErrors","limit","sort","a","b","slice","map","toISOString","substring","exportReport","filePath","stats","report","generatedAt","writeFile","JSON","stringify","log","cleanupOldData","cutoffTime","beforeQueries","beforeConnections","beforeErrors","c","cleanedQueries","cleanedConnections","cleanedErrors","setInterval","stop","clearInterval","removeAllListeners","reset","performanceMonitor","module","exports"],"sources":["performance-monitor.js"],"sourcesContent":["/**\n * @file performance-monitor.js\n * @description 数据库性能监控和分析模块\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nconst EventEmitter = require('events');\nconst fs = require('fs').promises;\nconst path = require('path');\n\n/**\n * 数据库性能监控器\n */\nclass DatabasePerformanceMonitor extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    \n    this.options = {\n      enableMetrics: process.env.ENABLE_METRICS === 'true',\n      metricsRetentionDays: parseInt(process.env.METRICS_RETENTION_DAYS) || 30,\n      slowQueryThreshold: parseInt(process.env.SLOW_QUERY_THRESHOLD) || 1000, // 1秒\n      alertThreshold: {\n        connectionCount: parseInt(process.env.ALERT_CONNECTION_COUNT) || 40,\n        avgResponseTime: parseInt(process.env.ALERT_AVG_RESPONSE_TIME) || 500,\n        errorRate: parseFloat(process.env.ALERT_ERROR_RATE) || 0.05 // 5%\n      },\n      ...options\n    };\n    \n    this.metrics = {\n      queries: [],\n      connections: [],\n      errors: [],\n      performance: {\n        totalQueries: 0,\n        slowQueries: 0,\n        totalErrors: 0,\n        avgResponseTime: 0,\n        peakConnections: 0\n      }\n    };\n    \n    this.startTime = Date.now();\n    this.cleanupInterval = null;\n    \n    if (this.options.enableMetrics) {\n      this.startCleanupScheduler();\n    }\n  }\n\n  /**\n   * 记录查询性能\n   */\n  recordQuery(queryInfo) {\n    if (!this.options.enableMetrics) {return;}\n    \n    const timestamp = Date.now();\n    const duration = queryInfo.duration || 0;\n    \n    const record = {\n      timestamp,\n      query: queryInfo.query,\n      duration,\n      params: queryInfo.params,\n      success: queryInfo.success !== false,\n      error: queryInfo.error,\n      connectionId: queryInfo.connectionId\n    };\n    \n    this.metrics.queries.push(record);\n    this.metrics.performance.totalQueries++;\n    \n    // 检查慢查询\n    if (duration > this.options.slowQueryThreshold) {\n      this.metrics.performance.slowQueries++;\n      this.emit('slowQuery', record);\n      console.warn(`慢查询检测: ${duration}ms - ${queryInfo.query}`);\n    }\n    \n    // 记录错误\n    if (!record.success) {\n      this.metrics.performance.totalErrors++;\n      this.recordError(queryInfo.error, 'query');\n    }\n    \n    // 更新平均响应时间\n    this.updateAverageResponseTime(duration);\n    \n    // 检查告警阈值\n    this.checkAlerts();\n  }\n\n  /**\n   * 记录连接信息\n   */\n  recordConnection(connectionInfo) {\n    if (!this.options.enableMetrics) {return;}\n    \n    const timestamp = Date.now();\n    \n    const record = {\n      timestamp,\n      action: connectionInfo.action, // 'connect', 'disconnect', 'error'\n      connectionId: connectionInfo.connectionId,\n      poolStatus: connectionInfo.poolStatus,\n      duration: connectionInfo.duration\n    };\n    \n    this.metrics.connections.push(record);\n    \n    // 更新峰值连接数\n    if (connectionInfo.poolStatus && connectionInfo.poolStatus.totalCount > this.metrics.performance.peakConnections) {\n      this.metrics.performance.peakConnections = connectionInfo.poolStatus.totalCount;\n    }\n    \n    this.emit('connectionEvent', record);\n  }\n\n  /**\n   * 记录错误\n   */\n  recordError(error, type = 'general') {\n    if (!this.options.enableMetrics) {return;}\n    \n    const timestamp = Date.now();\n    \n    const record = {\n      timestamp,\n      type,\n      message: error.message,\n      stack: error.stack,\n      code: error.code,\n      severity: this.getErrorSeverity(error)\n    };\n    \n    this.metrics.errors.push(record);\n    this.emit('error', record);\n    \n    // 严重错误立即告警\n    if (record.severity === 'critical') {\n      this.emit('criticalError', record);\n    }\n  }\n\n  /**\n   * 获取错误严重程度\n   */\n  getErrorSeverity(error) {\n    const criticalCodes = ['ECONNREFUSED', 'ENOTFOUND', 'ETIMEDOUT', 'ECONNRESET'];\n    const warningCodes = ['23505', '23503', '23502']; // PostgreSQL约束错误\n    \n    if (criticalCodes.includes(error.code)) {\n      return 'critical';\n    } else if (warningCodes.includes(error.code)) {\n      return 'warning';\n    } else {\n      return 'info';\n    }\n  }\n\n  /**\n   * 更新平均响应时间\n   */\n  updateAverageResponseTime(duration) {\n    const totalQueries = this.metrics.performance.totalQueries;\n    const currentAvg = this.metrics.performance.avgResponseTime;\n    \n    this.metrics.performance.avgResponseTime = \n      ((currentAvg * (totalQueries - 1)) + duration) / totalQueries;\n  }\n\n  /**\n   * 检查告警阈值\n   */\n  checkAlerts() {\n    const perf = this.metrics.performance;\n    const thresholds = this.options.alertThreshold;\n    \n    // 检查平均响应时间\n    if (perf.avgResponseTime > thresholds.avgResponseTime) {\n      this.emit('alert', {\n        type: 'high_response_time',\n        value: perf.avgResponseTime,\n        threshold: thresholds.avgResponseTime,\n        message: `平均响应时间过高: ${perf.avgResponseTime.toFixed(2)}ms`\n      });\n    }\n    \n    // 检查错误率\n    const errorRate = perf.totalQueries > 0 ? perf.totalErrors / perf.totalQueries : 0;\n    if (errorRate > thresholds.errorRate) {\n      this.emit('alert', {\n        type: 'high_error_rate',\n        value: errorRate,\n        threshold: thresholds.errorRate,\n        message: `错误率过高: ${(errorRate * 100).toFixed(2)}%`\n      });\n    }\n  }\n\n  /**\n   * 获取性能统计\n   */\n  getPerformanceStats() {\n    const now = Date.now();\n    const uptime = now - this.startTime;\n    \n    // 计算最近1小时的统计\n    const oneHourAgo = now - (60 * 60 * 1000);\n    const recentQueries = this.metrics.queries.filter(q => q.timestamp > oneHourAgo);\n    const recentErrors = this.metrics.errors.filter(e => e.timestamp > oneHourAgo);\n    \n    const recentAvgResponseTime = recentQueries.length > 0 \n      ? recentQueries.reduce((sum, q) => sum + q.duration, 0) / recentQueries.length \n      : 0;\n    \n    const recentErrorRate = recentQueries.length > 0 \n      ? recentErrors.length / recentQueries.length \n      : 0;\n    \n    return {\n      uptime,\n      overall: {\n        totalQueries: this.metrics.performance.totalQueries,\n        slowQueries: this.metrics.performance.slowQueries,\n        totalErrors: this.metrics.performance.totalErrors,\n        avgResponseTime: this.metrics.performance.avgResponseTime,\n        peakConnections: this.metrics.performance.peakConnections,\n        errorRate: this.metrics.performance.totalQueries > 0 \n          ? this.metrics.performance.totalErrors / this.metrics.performance.totalQueries \n          : 0\n      },\n      recent: {\n        queriesLastHour: recentQueries.length,\n        errorsLastHour: recentErrors.length,\n        avgResponseTimeLastHour: recentAvgResponseTime,\n        errorRateLastHour: recentErrorRate\n      },\n      slowQueries: this.getSlowQueries(10),\n      recentErrors: this.getRecentErrors(10)\n    };\n  }\n\n  /**\n   * 获取慢查询列表\n   */\n  getSlowQueries(limit = 10) {\n    return this.metrics.queries\n      .filter(q => q.duration > this.options.slowQueryThreshold)\n      .sort((a, b) => b.duration - a.duration)\n      .slice(0, limit)\n      .map(q => ({\n        timestamp: new Date(q.timestamp).toISOString(),\n        query: q.query.substring(0, 100) + (q.query.length > 100 ? '...' : ''),\n        duration: q.duration\n      }));\n  }\n\n  /**\n   * 获取最近错误列表\n   */\n  getRecentErrors(limit = 10) {\n    return this.metrics.errors\n      .sort((a, b) => b.timestamp - a.timestamp)\n      .slice(0, limit)\n      .map(e => ({\n        timestamp: new Date(e.timestamp).toISOString(),\n        type: e.type,\n        message: e.message,\n        severity: e.severity\n      }));\n  }\n\n  /**\n   * 导出性能报告\n   */\n  async exportReport(filePath) {\n    try {\n      const stats = this.getPerformanceStats();\n      const report = {\n        generatedAt: new Date().toISOString(),\n        ...stats\n      };\n      \n      await fs.writeFile(filePath, JSON.stringify(report, null, 2));\n      console.log(`性能报告已导出到: ${filePath}`);\n      \n      return report;\n    } catch (error) {\n      console.error('导出性能报告失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 清理过期数据\n   */\n  cleanupOldData() {\n    const cutoffTime = Date.now() - (this.options.metricsRetentionDays * 24 * 60 * 60 * 1000);\n    \n    const beforeQueries = this.metrics.queries.length;\n    const beforeConnections = this.metrics.connections.length;\n    const beforeErrors = this.metrics.errors.length;\n    \n    this.metrics.queries = this.metrics.queries.filter(q => q.timestamp > cutoffTime);\n    this.metrics.connections = this.metrics.connections.filter(c => c.timestamp > cutoffTime);\n    this.metrics.errors = this.metrics.errors.filter(e => e.timestamp > cutoffTime);\n    \n    const cleanedQueries = beforeQueries - this.metrics.queries.length;\n    const cleanedConnections = beforeConnections - this.metrics.connections.length;\n    const cleanedErrors = beforeErrors - this.metrics.errors.length;\n    \n    if (cleanedQueries > 0 || cleanedConnections > 0 || cleanedErrors > 0) {\n      console.log(`清理过期数据: 查询${cleanedQueries}条, 连接${cleanedConnections}条, 错误${cleanedErrors}条`);\n    }\n  }\n\n  /**\n   * 启动清理调度器\n   */\n  startCleanupScheduler() {\n    // 每小时清理一次过期数据\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupOldData();\n    }, 60 * 60 * 1000);\n  }\n\n  /**\n   * 停止监控\n   */\n  stop() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    \n    this.removeAllListeners();\n    console.log('数据库性能监控已停止');\n  }\n\n  /**\n   * 重置统计数据\n   */\n  reset() {\n    this.metrics = {\n      queries: [],\n      connections: [],\n      errors: [],\n      performance: {\n        totalQueries: 0,\n        slowQueries: 0,\n        totalErrors: 0,\n        avgResponseTime: 0,\n        peakConnections: 0\n      }\n    };\n    \n    this.startTime = Date.now();\n    console.log('性能监控统计数据已重置');\n  }\n}\n\n// 单例实例\nconst performanceMonitor = new DatabasePerformanceMonitor();\n\nmodule.exports = {\n  DatabasePerformanceMonitor,\n  performanceMonitor\n};"],"mappings":"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","ignoreList":[]}