{"file":"E:\\zk-agent\\tests\\api\\routes\\ai-models.test.ts","mappings":"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","names":[],"sources":["E:\\zk-agent\\tests\\api\\routes\\ai-models.test.ts"],"sourcesContent":["/**\n * AI模型API路由错误处理测试\n * 测试AI模型管理端点的各种错误场景和恢复机制\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '@/app/api/ai-models/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\nimport { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\nimport type { MockedFunction } from 'jest-mock';\n\n// Mock dependencies\njest.mock('../../../lib/services/ai-model-manager', () => ({\n  listModels: jest.fn(),\n  getModel: jest.fn(),\n  createModel: jest.fn(),\n  updateModel: jest.fn(),\n  deleteModel: jest.fn(),\n  validateModelConfig: jest.fn(),\n  testModelConnection: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkAdminPermissions: jest.fn()\n}));\n\njest.mock('../../../lib/storage/model-registry', () => ({\n  registerModel: jest.fn(),\n  unregisterModel: jest.fn(),\n  getModelMetadata: jest.fn()\n}));\n\ndescribe('AI Models API Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/ai-models - List Models', () => {\n    it('should handle database connection failure', async () => {\n      const { listModels } = require('../../../lib/services/ai-model-manager');\n      listModels.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n      expect(data.error.message).toContain('Database connection failed');\n    });\n\n    it('should handle model registry service unavailable', async () => {\n      const { listModels } = require('../../../lib/services/ai-model-manager');\n      listModels.mockRejectedValue(new Error('Model registry service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Model registry service unavailable');\n    });\n\n    it('should handle pagination parameter validation errors', async () => {\n      const request = new NextRequest('http://localhost:3000/api/ai-models?page=-1&limit=abc');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid pagination parameters');\n    });\n\n    it('should handle authentication failure', async () => {\n      const { validateSession } = require('../../../lib/auth/session');\n      validateSession.mockRejectedValue(new Error('Invalid session'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n    });\n  });\n\n  describe('POST /api/ai-models - Create Model', () => {\n    let validModelData: any;\n\n    beforeEach(() => {\n      validModelData = {\n        name: 'test-model',\n        type: 'chat',\n        provider: 'openai',\n        config: {\n          apiKey: 'test-key',\n          model: 'gpt-3.5-turbo',\n          maxTokens: 4096\n        },\n        description: 'Test model'\n      };\n    });\n\n    it('should handle missing required fields', async () => {\n      const invalidData = { name: 'test-model' }; // Missing required fields\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify(invalidData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('type');\n      expect(data.error.details).toContain('provider');\n    });\n\n    it('should handle invalid model configuration', async () => {\n      const { validateModelConfig } = require('../../../lib/services/ai-model-manager');\n      validateModelConfig.mockRejectedValue(new Error('Invalid API key format'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify(validModelData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid API key format');\n    });\n\n    it('should handle model connection test failure', async () => {\n      const { testModelConnection } = require('../../../lib/services/ai-model-manager');\n      testModelConnection.mockRejectedValue(new Error('Connection test failed: Invalid credentials'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify(validModelData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Connection test failed');\n    });\n\n    it('should handle duplicate model name', async () => {\n      const { createModel } = require('../../../lib/services/ai-model-manager');\n      createModel.mockRejectedValue(new Error('Model name already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify(validModelData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Model name already exists');\n    });\n\n    it('should handle insufficient admin permissions', async () => {\n      const { checkAdminPermissions } = require('../../../lib/auth/session');\n      checkAdminPermissions.mockRejectedValue(new Error('Admin permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify(validModelData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle model registry registration failure', async () => {\n      const { registerModel } = require('../../../lib/storage/model-registry');\n      registerModel.mockRejectedValue(new Error('Registry service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify(validModelData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Registry service unavailable');\n    });\n\n    it('should handle malformed JSON request', async () => {\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: '{invalid json}',\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid JSON');\n    });\n  });\n\n  describe('PUT /api/ai-models/[id] - Update Model', () => {\n    it('should handle model not found', async () => {\n      const { getModel } = require('../../../lib/services/ai-model-manager');\n      getModel.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/nonexistent-id', {\n        method: 'PUT',\n        body: JSON.stringify({ name: 'updated-name' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Model not found');\n    });\n\n    it('should handle invalid model ID format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/ai-models/invalid-id-format', {\n        method: 'PUT',\n        body: JSON.stringify({ name: 'updated-name' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid model ID format');\n    });\n\n    it('should handle model in use error', async () => {\n      const { updateModel } = require('../../../lib/services/ai-model-manager');\n      updateModel.mockRejectedValue(new Error('Cannot update model: currently in use'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/model-123', {\n        method: 'PUT',\n        body: JSON.stringify({ name: 'updated-name' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('currently in use');\n    });\n\n    it('should handle configuration validation failure', async () => {\n      const { validateModelConfig } = require('../../../lib/services/ai-model-manager');\n      validateModelConfig.mockRejectedValue(new Error('Invalid configuration: missing required parameter'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/model-123', {\n        method: 'PUT',\n        body: JSON.stringify({ config: { invalidParam: 'value' } }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid configuration');\n    });\n  });\n\n  describe('DELETE /api/ai-models/[id] - Delete Model', () => {\n    it('should handle model not found', async () => {\n      const { getModel } = require('../../../lib/services/ai-model-manager');\n      getModel.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/nonexistent-id', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n    });\n\n    it('should handle model deletion with active dependencies', async () => {\n      const { deleteModel } = require('../../../lib/services/ai-model-manager');\n      deleteModel.mockRejectedValue(new Error('Cannot delete model: has active dependencies'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/model-123', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('has active dependencies');\n    });\n\n    it('should handle registry unregistration failure', async () => {\n      const { unregisterModel } = require('../../../lib/storage/model-registry');\n      unregisterModel.mockRejectedValue(new Error('Failed to unregister from registry'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/model-123', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to unregister');\n    });\n\n    it('should handle cascade deletion failure', async () => {\n      const { deleteModel } = require('../../../lib/services/ai-model-manager');\n      deleteModel.mockRejectedValue(new Error('Failed to delete associated resources'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/model-123', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to delete associated resources');\n    });\n  });\n\n  describe('Provider-Specific Errors', () => {\n    it('should handle OpenAI API key validation failure', async () => {\n      const { testModelConnection } = require('../../../lib/services/ai-model-manager');\n      testModelConnection.mockRejectedValue(new Error('OpenAI API key is invalid'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'openai-model',\n          type: 'chat',\n          provider: 'openai',\n          config: { apiKey: 'invalid-key' }\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('OpenAI API key is invalid');\n    });\n\n    it('should handle Azure OpenAI endpoint configuration error', async () => {\n      const { testModelConnection } = require('../../../lib/services/ai-model-manager');\n      testModelConnection.mockRejectedValue(new Error('Azure endpoint URL is invalid'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'azure-model',\n          type: 'chat',\n          provider: 'azure-openai',\n          config: { endpoint: 'invalid-url' }\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Azure endpoint URL is invalid');\n    });\n\n    it('should handle Anthropic API quota exceeded', async () => {\n      const { testModelConnection } = require('../../../lib/services/ai-model-manager');\n      testModelConnection.mockRejectedValue(new Error('Anthropic API quota exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({\n          name: 'claude-model',\n          type: 'chat',\n          provider: 'anthropic',\n          config: { apiKey: 'test-key' }\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.message).toContain('API quota exceeded');\n    });\n  });\n\n  describe('Rate Limiting and Throttling', () => {\n    it('should handle rate limit exceeded for model operations', async () => {\n      // Simulate multiple rapid requests\n      const requests = Array.from({ length: 10 }, () => \n        new NextRequest('http://localhost:3000/api/ai-models', {\n          method: 'POST',\n          body: JSON.stringify({ name: 'test-model', type: 'chat', provider: 'openai' }),\n          headers: { 'Content-Type': 'application/json' }\n        })\n      );\n\n      const responses = await Promise.all(requests.map(req => POST(req)));\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n\n    it('should include retry-after header in rate limit response', async () => {\n      const { createModel } = require('../../../lib/services/ai-model-manager');\n      createModel.mockRejectedValue(new Error('Rate limit exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({ name: 'test-model', type: 'chat', provider: 'openai' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n\n      expect(response.status).toBe(429);\n      expect(response.headers.get('Retry-After')).toBeDefined();\n    });\n  });\n\n  describe('Concurrent Operations', () => {\n    it('should handle concurrent model creation conflicts', async () => {\n      const { createModel } = require('../../../lib/services/ai-model-manager');\n      createModel.mockRejectedValue(new Error('Concurrent modification detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({ name: 'test-model', type: 'chat', provider: 'openai' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Concurrent modification detected');\n    });\n\n    it('should handle database lock timeout', async () => {\n      const { updateModel } = require('../../../lib/services/ai-model-manager');\n      updateModel.mockRejectedValue(new Error('Database lock timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models/model-123', {\n        method: 'PUT',\n        body: JSON.stringify({ name: 'updated-name' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Database lock timeout');\n    });\n  });\n\n  describe('Error Recovery and Cleanup', () => {\n    it('should clean up partial model creation on failure', async () => {\n      const { createModel, deleteModel } = require('../../../lib/services/ai-model-manager');\n      createModel.mockRejectedValue(new Error('Creation failed after partial setup'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({ name: 'test-model', type: 'chat', provider: 'openai' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      await POST(request);\n\n      // Verify cleanup was attempted\n      expect(deleteModel).toHaveBeenCalled();\n    });\n\n    it('should provide recovery suggestions in error response', async () => {\n      const { testModelConnection } = require('../../../lib/services/ai-model-manager');\n      testModelConnection.mockRejectedValue(new Error('Network timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({ name: 'test-model', type: 'chat', provider: 'openai' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Check network connectivity');\n    });\n  });\n\n  describe('Monitoring and Metrics', () => {\n    it('should track error metrics for model operations', async () => {\n      const { createModel } = require('../../../lib/services/ai-model-manager');\n      createModel.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({ name: 'test-model', type: 'chat', provider: 'openai' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      await POST(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include correlation ID in error responses', async () => {\n      const { createModel } = require('../../../lib/services/ai-model-manager');\n      createModel.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/ai-models', {\n        method: 'POST',\n        body: JSON.stringify({ name: 'test-model', type: 'chat', provider: 'openai' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.correlationId).toBeDefined();\n      expect(typeof data.error.correlationId).toBe('string');\n    });\n  });\n});"],"version":3}