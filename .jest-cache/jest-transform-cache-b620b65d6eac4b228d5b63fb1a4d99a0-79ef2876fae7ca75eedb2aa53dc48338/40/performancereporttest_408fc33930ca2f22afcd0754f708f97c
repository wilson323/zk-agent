c95d3903cb20c5732850b2fcbe497cdd
/**
 * @file Performance Report Generator
 * @description ÊÄßËÉΩÊµãËØïÊä•ÂëäÁîüÊàêÂô®
 */

const {
  performance
} = require('perf_hooks');
const fs = require('fs');
const path = require('path');
describe('Performance Report', () => {
  let performanceData = {
    timestamp: new Date().toISOString(),
    testResults: [],
    systemInfo: {
      nodeVersion: process.version,
      platform: process.platform,
      arch: process.arch,
      memory: process.memoryUsage()
    }
  };

  /**
   * Êî∂ÈõÜAPIÂìçÂ∫îÊó∂Èó¥Êï∞ÊçÆ
   */
  test('Êî∂ÈõÜAPIÂìçÂ∫îÊó∂Èó¥Êï∞ÊçÆ', async () => {
    const iterations = 5;
    const times = [];
    for (let i = 0; i < iterations; i++) {
      const start = performance.now();
      await new Promise(resolve => setTimeout(resolve, 30 + Math.random() * 20));
      const end = performance.now();
      times.push(end - start);
    }
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);
    performanceData.testResults.push({
      testName: 'APIÂìçÂ∫îÊó∂Èó¥',
      average: avgTime,
      min: minTime,
      max: maxTime,
      iterations: iterations,
      unit: 'ms'
    });
    expect(avgTime).toBeLessThan(100);
  });

  /**
   * Êî∂ÈõÜÂÜÖÂ≠ò‰ΩøÁî®Êï∞ÊçÆ
   */
  test('Êî∂ÈõÜÂÜÖÂ≠ò‰ΩøÁî®Êï∞ÊçÆ', () => {
    const memUsage = process.memoryUsage();
    performanceData.testResults.push({
      testName: 'ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ',
      heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100,
      heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024 * 100) / 100,
      external: Math.round(memUsage.external / 1024 / 1024 * 100) / 100,
      rss: Math.round(memUsage.rss / 1024 / 1024 * 100) / 100,
      unit: 'MB'
    });
    expect(memUsage.heapUsed / 1024 / 1024).toBeLessThan(100);
  });

  /**
   * Êî∂ÈõÜCPUÊÄßËÉΩÊï∞ÊçÆ
   */
  test('Êî∂ÈõÜCPUÊÄßËÉΩÊï∞ÊçÆ', () => {
    const iterations = 3;
    const times = [];
    for (let i = 0; i < iterations; i++) {
      const start = performance.now();

      // CPUÂØÜÈõÜÂûãËÆ°ÁÆó
      let result = 0;
      for (let j = 0; j < 50000; j++) {
        result += Math.sqrt(j) * Math.sin(j);
      }
      const end = performance.now();
      times.push(end - start);
    }
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    performanceData.testResults.push({
      testName: 'CPUËÆ°ÁÆóÊÄßËÉΩ',
      average: avgTime,
      iterations: iterations,
      unit: 'ms'
    });
    expect(avgTime).toBeLessThan(200);
  });

  /**
   * ÁîüÊàêÊÄßËÉΩÊä•Âëä
   */
  test('ÁîüÊàêÊÄßËÉΩÊä•Âëä', () => {
    const reportDir = path.join(__dirname, '../../reports');
    const reportFile = path.join(reportDir, 'performance-report.json');

    // Á°Æ‰øùÊä•ÂëäÁõÆÂΩïÂ≠òÂú®
    if (!fs.existsSync(reportDir)) {
      fs.mkdirSync(reportDir, {
        recursive: true
      });
    }

    // ÂÜôÂÖ•ÊÄßËÉΩÊä•Âëä
    fs.writeFileSync(reportFile, JSON.stringify(performanceData, null, 2));

    // ÁîüÊàêÁÆÄÂåñÁöÑÊñáÊú¨Êä•Âëä
    const textReport = generateTextReport(performanceData);
    const textReportFile = path.join(reportDir, 'performance-summary.txt');
    fs.writeFileSync(textReportFile, textReport);
    console.log('\nüìä ÊÄßËÉΩÊµãËØïÊä•ÂëäÂ∑≤ÁîüÊàê:');
    console.log(`   ËØ¶ÁªÜÊä•Âëä: ${reportFile}`);
    console.log(`   ÊëòË¶ÅÊä•Âëä: ${textReportFile}`);
    expect(fs.existsSync(reportFile)).toBe(true);
    expect(fs.existsSync(textReportFile)).toBe(true);
  });
});

/**
 * ÁîüÊàêÊñáÊú¨Ê†ºÂºèÁöÑÊÄßËÉΩÊä•Âëä
 * @param {Object} data - ÊÄßËÉΩÊï∞ÊçÆ
 * @returns {string} ÊñáÊú¨Êä•Âëä
 */
function generateTextReport(data) {
  let report = `ZK-Agent ÊÄßËÉΩÊµãËØïÊä•Âëä\n`;
  report += `ÁîüÊàêÊó∂Èó¥: ${data.timestamp}\n`;
  report += `Node.jsÁâàÊú¨: ${data.systemInfo.nodeVersion}\n`;
  report += `Âπ≥Âè∞: ${data.systemInfo.platform} ${data.systemInfo.arch}\n\n`;
  report += `ÊµãËØïÁªìÊûú:\n`;
  report += `${'='.repeat(50)}\n`;
  data.testResults.forEach(result => {
    report += `\n${result.testName}:\n`;
    if (result.testName === 'ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ') {
      report += `  Â†ÜÂÜÖÂ≠ò‰ΩøÁî®: ${result.heapUsed} ${result.unit}\n`;
      report += `  Â†ÜÂÜÖÂ≠òÊÄªËÆ°: ${result.heapTotal} ${result.unit}\n`;
      report += `  Â§ñÈÉ®ÂÜÖÂ≠ò: ${result.external} ${result.unit}\n`;
      report += `  RSSÂÜÖÂ≠ò: ${result.rss} ${result.unit}\n`;
    } else {
      report += `  Âπ≥ÂùáÊó∂Èó¥: ${result.average?.toFixed(2)} ${result.unit}\n`;
      if (result.min !== undefined) {
        report += `  ÊúÄÁü≠Êó∂Èó¥: ${result.min.toFixed(2)} ${result.unit}\n`;
        report += `  ÊúÄÈïøÊó∂Èó¥: ${result.max.toFixed(2)} ${result.unit}\n`;
      }
      if (result.iterations) {
        report += `  ÊµãËØïÊ¨°Êï∞: ${result.iterations}\n`;
      }
    }
  });
  report += `\n${'='.repeat(50)}\n`;
  report += `ÊµãËØïÂÆåÊàêÊó∂Èó¥: ${new Date().toLocaleString()}\n`;
  return report;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,