{"version":3,"names":["cov_1q7nkmot50","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","model_manager_1","exports","GET","createApiRoute","RouteConfigs","publicGet","req","params","validatedBody","validatedQuery","user","requestId","routeParams","model","aiModelManager","getModel","id","ApiResponseWrapper","error","status","success","data","PUT","method","requireAuth","timeout","json","updateModel","message","DELETE","deleteModel"],"sources":["E:\\zk-agent\\app\\api\\ai-models\\[id]\\route.ts"],"sourcesContent":["/**\n * @file ai-models\\[id]\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { aiModelManager } from \"@/lib/ai-models/model-manager\"\n\nexport const GET = createApiRoute(\n  RouteConfigs.publicGet(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const routeParams = await params;\n      \n      const model = aiModelManager.getModel(routeParams.id);\n    \n      if (!model) {\n        return ApiResponseWrapper.error(\n          \"Model not found\",\n          { status: 404 }\n        );\n      }\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        data: model,\n      });\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        \"Failed to get AI model\",\n        { status: 500 }\n      );\n    }\n  }\n);\n\nexport const PUT = createApiRoute(\n  { method: 'PUT', requireAuth: true, timeout: 60000 },\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const routeParams = await params;\n      const data = await req.json();\n    \n      const model = await aiModelManager.updateModel(routeParams.id, data);\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        data: model,\n        message: \"Model updated successfully\",\n      });\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        \"Failed to update AI model\",\n        { status: 400 }\n      );\n    }\n  }\n);\n\nexport const DELETE = createApiRoute(\n  { method: 'DELETE', requireAuth: true, timeout: 60000 },\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const routeParams = await params;\n      \n      await aiModelManager.deleteModel(routeParams.id);\n    \n      return ApiResponseWrapper.success({\n        success: true,\n        message: \"Model deleted successfully\",\n      });\n    } catch (error) {\n      return ApiResponseWrapper.error(\n        \"Failed to delete AI model\",\n        { status: 400 }\n      );\n    }\n  }\n);\n\n"],"mappings":"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","ignoreList":[]}