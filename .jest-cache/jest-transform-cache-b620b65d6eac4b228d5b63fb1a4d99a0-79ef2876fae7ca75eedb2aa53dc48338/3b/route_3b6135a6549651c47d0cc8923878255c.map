{"version":3,"names":["cov_8zqxi6uzw","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","core_1","zod_1","registerSchema","z","object","email","string","password","min","optional","inviteCode","exports","POST","createApiRoute","method","requireAuth","rateLimit","requests","windowMs","validation","body","timeout","req","params","validatedBody","validatedQuery","user","requestId","length","ApiResponseWrapper","error","ErrorCode","VALIDATION_ERROR","newUser","id","Date","now","split","avatar","role","createdAt","toISOString","updatedAt","tokens","accessToken","refreshToken","expiresIn","console","log","userId","timestamp","response","success","INTERNAL_SERVER_ERROR"],"sources":["E:\\zk-agent\\app\\api\\auth\\register\\route.ts"],"sourcesContent":["/**\n * @file auth\\register\\route.ts\n * @description User registration API route\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest } from 'next/server';\nimport { createApiRoute, RouteConfigs } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\nimport { ErrorCode } from '@/types/core';\nimport { z } from 'zod';\n\nconst registerSchema = z.object({\n  email: z.string().email(\"请输入有效的邮箱地址\"),\n  password: z.string().min(8, \"密码至少需要8个字符\"),\n  name: z.string().optional(),\n  inviteCode: z.string().optional()\n});\n\nexport const POST = createApiRoute(\n  {\n    method: 'POST',\n    requireAuth: false,\n    rateLimit: { requests: 100, windowMs: 60000 }, // 每分钟100次\n    validation: { body: registerSchema },\n    timeout: 60000\n  },\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const { email, password, name, inviteCode } = validatedBody;\n      \n      // 模拟密码强度验证\n      if (password.length < 8) {\n        return ApiResponseWrapper.error(ErrorCode.VALIDATION_ERROR, '密码至少需要8个字符', null, 400);\n      }\n      \n      // 模拟检查邮箱是否已存在\n      if (email === 'existing@example.com') {\n        return ApiResponseWrapper.error(ErrorCode.VALIDATION_ERROR, '邮箱已被注册', null, 400);\n      }\n      \n      // 模拟用户注册\n      const newUser = {\n        id: `user_${Date.now()}`,\n        email,\n        name: name || email.split('@')[0],\n        avatar: null,\n        role: 'user',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      \n      // 模拟生成令牌\n      const tokens = {\n        accessToken: `access_token_${Date.now()}`,\n        refreshToken: `refresh_token_${Date.now()}`,\n        expiresIn: 3600\n      };\n      \n      // 模拟记录使用统计\n      console.log('User registered:', {\n        userId: newUser.id,\n        email,\n        inviteCode,\n        timestamp: new Date().toISOString(),\n      });\n      \n      const response = {\n        success: true,\n        user: newUser,\n        tokens,\n      };\n      \n      return ApiResponseWrapper.success(response);\n    } catch (error) {\n      console.error('Registration error:', error);\n      return ApiResponseWrapper.error(ErrorCode.INTERNAL_SERVER_ERROR, 'Internal server error', null, 500);\n    }\n  }\n);\n"],"mappings":"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","ignoreList":[]}