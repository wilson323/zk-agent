b0d3f72284bb7354b5536d84bc172fc5
"use strict";
/**
 * @file 依赖注入容器测试
 * @description 测试依赖注入容器的功能
 * @author ZK-Agent Team
 * @date 2024-12-20
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const container_1 = require("../../../lib/di/container");
class TestService {
    getValue() {
        return 'test-value';
    }
}
class TestDependency {
    getName() {
        return 'test-dependency';
    }
}
// 带依赖的服务
class ServiceWithDependency {
    constructor(dependency) {
        this.dependency = dependency;
    }
    getDependencyName() {
        return this.dependency.getName();
    }
}
// 使用装饰器的服务
let DecoratedService = class DecoratedService {
    constructor(dependency) {
        this.dependency = dependency;
    }
    getDependencyName() {
        return this.dependency.getName();
    }
};
DecoratedService = __decorate([
    (0, container_1.injectable)(),
    __param(0, (0, container_1.inject)(Symbol.for('TestDependency'))),
    __metadata("design:paramtypes", [Object])
], DecoratedService);
describe('Container', () => {
    let testContainer;
    beforeEach(() => {
        // 创建新的容器实例，避免测试间相互影响
        testContainer = new container_1.Container();
    });
    afterEach(() => {
        // 清理容器
        testContainer.dispose();
    });
    test('应该能够注册和解析单例服务', () => {
        // 注册服务
        const serviceToken = Symbol.for('TestService');
        testContainer.registerSingleton(serviceToken, () => new TestService());
        // 解析服务
        const service1 = testContainer.resolve(serviceToken);
        const service2 = testContainer.resolve(serviceToken);
        // 验证服务实例
        expect(service1).toBeDefined();
        expect(service1.getValue()).toBe('test-value');
        // 验证单例行为
        expect(service1).toBe(service2);
    });
    test('应该能够注册和解析瞬态服务', () => {
        // 注册服务
        const serviceToken = Symbol.for('TestService');
        testContainer.registerTransient(serviceToken, () => new TestService());
        // 解析服务
        const service1 = testContainer.resolve(serviceToken);
        const service2 = testContainer.resolve(serviceToken);
        // 验证服务实例
        expect(service1).toBeDefined();
        expect(service1.getValue()).toBe('test-value');
        // 验证瞬态行为
        expect(service1).not.toBe(service2);
    });
    test('应该能够解析带依赖的服务', () => {
        // 注册依赖
        const dependencyToken = Symbol.for('TestDependency');
        testContainer.registerSingleton(dependencyToken, () => new TestDependency());
        // 注册带依赖的服务
        const serviceToken = Symbol.for('ServiceWithDependency');
        testContainer.registerSingleton(serviceToken, (container) => {
            const dependency = container.resolve(dependencyToken);
            return new ServiceWithDependency(dependency);
        });
        // 解析服务
        const service = testContainer.resolve(serviceToken);
        // 验证服务实例
        expect(service).toBeDefined();
        expect(service.getDependencyName()).toBe('test-dependency');
    });
    test('当服务未注册时应该抛出错误', () => {
        // 尝试解析未注册的服务
        const unknownToken = Symbol.for('UnknownService');
        // 验证抛出错误
        expect(() => {
            testContainer.resolve(unknownToken);
        }).toThrow();
    });
    test('应该能够检查服务是否已注册', () => {
        // 注册服务
        const serviceToken = Symbol.for('TestService');
        testContainer.registerSingleton(serviceToken, () => new TestService());
        // 验证注册状态
        expect(testContainer.isRegistered(serviceToken)).toBe(true);
        expect(testContainer.isRegistered(Symbol.for('UnknownService'))).toBe(false);
    });
    test('应该能够使用装饰器注入依赖', () => {
        // 注册依赖
        const dependencyToken = Symbol.for('TestDependency');
        testContainer.registerSingleton(dependencyToken, () => new TestDependency());
        // 创建使用装饰器的服务实例
        const decoratedService = new DecoratedService(testContainer.resolve(dependencyToken));
        // 验证依赖注入
        expect(decoratedService.getDependencyName()).toBe('test-dependency');
    });
});
describe('全局容器和装饰器', () => {
    // 在测试前备份原始TYPES
    const originalTypes = { ...container_1.TYPES };
    beforeAll(() => {
        // 添加测试类型
        container_1.TYPES.TestDependency = Symbol.for('TestDependency');
        container_1.TYPES.DecoratedServiceWithToken = Symbol.for('DecoratedServiceWithToken');
    });
    afterAll(() => {
        // 恢复原始TYPES
        Object.keys(container_1.TYPES).forEach(key => {
            if (!originalTypes.hasOwnProperty(key)) {
                delete container_1.TYPES[key];
            }
        });
        // 清理容器
        container_1.container.dispose();
    });
    test('应该能够使用全局容器注册和解析服务', () => {
        // 注册服务到全局容器
        container_1.container.registerSingleton(container_1.TYPES.TestDependency, () => new TestDependency());
        // 解析服务
        const dependency = container_1.container.resolve(container_1.TYPES.TestDependency);
        // 验证服务实例
        expect(dependency).toBeDefined();
        expect(dependency.getName()).toBe('test-dependency');
    });
    test('应该能够使用injectable装饰器自动注册服务', () => {
        // 使用装饰器自动注册的服务
        let DecoratedServiceWithToken = class DecoratedServiceWithToken {
            constructor(dependency) {
                this.dependency = dependency;
            }
            getDependencyName() {
                return this.dependency.getName();
            }
        };
        DecoratedServiceWithToken = __decorate([
            (0, container_1.injectable)(container_1.TYPES.DecoratedServiceWithToken),
            __param(0, (0, container_1.inject)(container_1.TYPES.TestDependency)),
            __metadata("design:paramtypes", [Object])
        ], DecoratedServiceWithToken);
        // 解析服务
        const service = container_1.container.resolve(container_1.TYPES.DecoratedServiceWithToken);
        // 验证服务实例
        expect(service).toBeDefined();
        expect(service.getDependencyName()).toBe('test-dependency');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,