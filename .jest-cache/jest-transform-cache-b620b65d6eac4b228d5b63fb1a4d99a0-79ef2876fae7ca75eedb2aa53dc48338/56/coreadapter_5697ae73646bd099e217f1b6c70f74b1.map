{"version":3,"names":["cov_155oxohehp","actualCoverage","s","rxjs_1","require","AgUICoreAdapter","constructor","options","b","f","eventSubject","Subject","messageIdCounter","toolCallIdCounter","state","threadId","Date","now","debug","proxyUrl","getEventStream","asObservable","initializeSession","appId","chatId","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","updateState","welcomeMessage","systemPrompt","variables","suggestedQuestions","emitEvent","type","snapshot","timestamp","messageId","role","delta","error","console","handleChatCompletion","messages","runId","stream","detail","system","Observable","observer","reader","getReader","decoder","TextDecoder","buffer","fullContent","processChunk","done","value","read","chunk","next","text","isEnd","fetchSuggestedQuestions","catch","complete","decode","boundary","indexOf","part","substring","trim","startsWith","jsonStr","parse","choices","tool_calls","handleToolCall","content","e","cancel","err","message","code","toolCall","toolCallId","toolCallName","function","name","parentMessageId","arguments","fetchChatHistory","questions","submitFeedback","feedback","comment","success","generateLongImage","includeWelcome","imageUrl","batchForward","sourceAppId","sourceChatId","targetAppIds","messageIds","results","newState","event","exports"],"sources":["E:\\zk-agent\\lib\\ag-ui\\core-adapter.ts"],"sourcesContent":["// @ts-nocheck\nimport { Observable, Subject } from \"rxjs\"\nimport type {\n  BaseEvent,\n  TextMessageStartEvent,\n  TextMessageContentEvent,\n  TextMessageEndEvent,\n  RunStartedEvent,\n  RunFinishedEvent,\n  StateSnapshotEvent,\n  ToolCallStartEvent,\n  ToolCallArgsEvent,\n  ToolCallEndEvent,\n  CustomEvent,\n} from \"./types\"\n\n/**\n * AG-UI核心适配器 - 将FastGPT的所有功能转换为AG-UI事件流\n */\nexport class AgUICoreAdapter {\n  private eventSubject = new Subject<BaseEvent>()\n  private messageIdCounter = 0\n  private toolCallIdCounter = 0\n  private state: Record<string, any> = {}\n\n  constructor(\n    private options: {\n      debug?: boolean\n      threadId?: string\n      proxyUrl?: string\n    } = {},\n  ) {\n    this.options.threadId = this.options.threadId || `thread-${Date.now()}`\n    this.options.debug = this.options.debug || false\n    this.options.proxyUrl = this.options.proxyUrl || \"/api/proxy\"\n  }\n\n  /**\n   * 获取事件流Observable\n   */\n  public getEventStream(): Observable<BaseEvent> {\n    return this.eventSubject.asObservable()\n  }\n\n  /**\n   * 初始化会话\n   * 处理FastGPT初始化会话接口，包括全局变量处理\n   */\n  public async initializeSession(appId: string, chatId?: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/init-chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ appId, chatId }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to initialize session: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n\n      // 更新状态，包括全局变量\n      this.updateState({\n        appId,\n        chatId: chatId || data.chatId,\n        welcomeMessage: data.welcomeMessage,\n        systemPrompt: data.systemPrompt,\n        variables: data.variables || {},\n        suggestedQuestions: data.suggestedQuestions || [],\n      })\n\n      // 发送状态快照事件\n      this.emitEvent({\n        type: \"STATE_SNAPSHOT\",\n        snapshot: this.state,\n        timestamp: Date.now(),\n      } as StateSnapshotEvent)\n\n      // 如果有欢迎消息，发送文本消息事件\n      if (data.welcomeMessage) {\n        const messageId = `msg-${++this.messageIdCounter}`\n\n        this.emitEvent({\n          type: \"TEXT_MESSAGE_START\",\n          messageId,\n          role: \"assistant\",\n          timestamp: Date.now(),\n        } as TextMessageStartEvent)\n\n        this.emitEvent({\n          type: \"TEXT_MESSAGE_CONTENT\",\n          messageId,\n          delta: data.welcomeMessage,\n          timestamp: Date.now(),\n        } as TextMessageContentEvent)\n\n        this.emitEvent({\n          type: \"TEXT_MESSAGE_END\",\n          messageId,\n          timestamp: Date.now(),\n        } as TextMessageEndEvent)\n      }\n\n      return data\n    } catch (error) {\n      console.error(\"Error initializing session:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * 处理来自FastGPT的流式响应\n   * 将其转换为AG-UI事件流\n   */\n  public async handleChatCompletion(\n    appId: string,\n    chatId: string,\n    messages: Array<{ role: string; content: string }>,\n    systemPrompt?: string,\n    variables?: Record<string, any>,\n  ): Promise<Observable<any>> {\n    // 生成唯一消息ID和运行ID\n    const messageId = `msg-${++this.messageIdCounter}`\n    const runId = `run-${Date.now()}`\n\n    // 更新状态\n    if (variables) {\n      this.updateState({ variables })\n    }\n\n    // 发送运行开始事件\n    this.emitEvent({\n      type: \"RUN_STARTED\",\n      threadId: this.options.threadId,\n      runId,\n      timestamp: Date.now(),\n    } as RunStartedEvent)\n\n    try {\n      // 调用FastGPT API\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/chat`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          appId,\n          chatId,\n          messages,\n          stream: true,\n          detail: true,\n          system: systemPrompt,\n          variables,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`FastGPT API error: ${response.statusText}`)\n      }\n\n      // 发送消息开始事件\n      this.emitEvent({\n        type: \"TEXT_MESSAGE_START\",\n        messageId,\n        role: \"assistant\",\n        timestamp: Date.now(),\n      } as TextMessageStartEvent)\n\n      // 创建一个新的Observable来处理流式响应\n      return new Observable<any>((observer) => {\n        // 处理流式响应\n        const reader = response.body!.getReader()\n        const decoder = new TextDecoder()\n        let buffer = \"\"\n        let fullContent = \"\"\n\n        const processChunk = async () => {\n          try {\n            const { done, value } = await reader.read()\n\n            if (done) {\n              // 处理缓冲区中剩余的数据\n              if (buffer) {\n                const chunk = buffer\n                buffer = \"\"\n                observer.next({ text: chunk, isEnd: true })\n              }\n\n              // 发送消息结束事件\n              this.emitEvent({\n                type: \"TEXT_MESSAGE_END\",\n                messageId,\n                timestamp: Date.now(),\n              } as TextMessageEndEvent)\n\n              // 发送运行结束事件\n              this.emitEvent({\n                type: \"RUN_FINISHED\",\n                threadId: this.options.threadId,\n                runId,\n                timestamp: Date.now(),\n              } as RunFinishedEvent)\n\n              // 尝试获取建议问题\n              this.fetchSuggestedQuestions(appId, chatId).catch(console.error)\n\n              observer.complete()\n              return\n            }\n\n            // 解码二进制数据\n            const chunk = decoder.decode(value, { stream: true })\n            buffer += chunk\n\n            // 处理完整的JSON对象\n            let boundary = buffer.indexOf(\"\\n\")\n            while (boundary !== -1) {\n              const part = buffer.substring(0, boundary)\n              buffer = buffer.substring(boundary + 1)\n\n              if (part.trim()) {\n                try {\n                  // 处理SSE格式数据\n                  if (part.startsWith(\"data: \")) {\n                    const jsonStr = part.substring(6)\n\n                    if (jsonStr === \"[DONE]\") {\n                      continue\n                    }\n\n                    const data = JSON.parse(jsonStr)\n\n                    // 处理工具调用\n                    if (data.choices && data.choices[0].delta && data.choices[0].delta.tool_calls) {\n                      this.handleToolCall(data.choices[0].delta.tool_calls[0], runId)\n                    }\n\n                    // 处理文本内容\n                    if (data.choices && data.choices[0].delta && data.choices[0].delta.content) {\n                      const content = data.choices[0].delta.content\n                      fullContent += content\n\n                      // 发送消息内容事件\n                      this.emitEvent({\n                        type: \"TEXT_MESSAGE_CONTENT\",\n                        messageId,\n                        delta: content,\n                        timestamp: Date.now(),\n                      } as TextMessageContentEvent)\n\n                      // 将原始数据传递给观察者\n                      observer.next({ text: content })\n                    }\n                  } else {\n                    const data = JSON.parse(part)\n                    observer.next(data)\n                  }\n                } catch (e) {\n                  if (this.options.debug) {\n                    console.error(\"Failed to parse JSON:\", part, e)\n                  }\n                }\n              }\n\n              boundary = buffer.indexOf(\"\\n\")\n            }\n\n            // 继续处理下一个块\n            processChunk()\n          } catch (error) {\n            if (this.options.debug) {\n              console.error(\"Error processing stream:\", error)\n            }\n            observer.error(error)\n          }\n        }\n\n        processChunk()\n\n        // 返回清理函数\n        return () => {\n          reader.cancel().catch((err) => {\n            if (this.options.debug) {\n              console.error(\"Error cancelling reader:\", err)\n            }\n          })\n        }\n      })\n    } catch (error) {\n      console.error(\"Error in chat completion:\", error)\n\n      // 发送错误事件\n      this.emitEvent({\n        type: \"RUN_ERROR\",\n        message: error instanceof Error ? error.message : \"Unknown error\",\n        code: 500,\n        timestamp: Date.now(),\n      })\n\n      // 发送消息结束和运行结束事件\n      this.emitEvent({\n        type: \"TEXT_MESSAGE_END\",\n        messageId,\n        timestamp: Date.now(),\n      } as TextMessageEndEvent)\n\n      this.emitEvent({\n        type: \"RUN_FINISHED\",\n        threadId: this.options.threadId,\n        runId,\n        timestamp: Date.now(),\n      } as RunFinishedEvent)\n\n      throw error\n    }\n  }\n\n  /**\n   * 处理工具调用\n   */\n  private handleToolCall(toolCall: any, runId: string) {\n    const toolCallId = `tool-${++this.toolCallIdCounter}`\n\n    // 发送工具调用开始事件\n    this.emitEvent({\n      type: \"TOOL_CALL_START\",\n      toolCallId,\n      toolCallName: toolCall.function?.name || \"unknown\",\n      parentMessageId: `msg-${this.messageIdCounter}`,\n      timestamp: Date.now(),\n    } as ToolCallStartEvent)\n\n    // 发送工具调用参数事件\n    if (toolCall.function?.arguments) {\n      this.emitEvent({\n        type: \"TOOL_CALL_ARGS\",\n        toolCallId,\n        delta: toolCall.function.arguments,\n        timestamp: Date.now(),\n      } as ToolCallArgsEvent)\n    }\n\n    // 发送工具调用结束事件\n    this.emitEvent({\n      type: \"TOOL_CALL_END\",\n      toolCallId,\n      timestamp: Date.now(),\n    } as ToolCallEndEvent)\n  }\n\n  /**\n   * 获取聊天历史记录\n   */\n  public async fetchChatHistory(appId: string, chatId: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/chat-history`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ appId, chatId }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch chat history: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n\n      // 发送消息快照事件\n      this.emitEvent({\n        type: \"MESSAGES_SNAPSHOT\",\n        messages: data.messages || [],\n        timestamp: Date.now(),\n      })\n\n      return data\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * 获取建议问题\n   */\n  public async fetchSuggestedQuestions(appId: string, chatId: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/suggested-questions`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ appId, chatId }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch suggested questions: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      const questions = data.questions || []\n\n      // 更新状态\n      this.updateState({ suggestedQuestions: questions })\n\n      // 发送自定义事件\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"suggested_questions\",\n        value: questions,\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return questions\n    } catch (error) {\n      console.error(\"Error fetching suggested questions:\", error)\n      return []\n    }\n  }\n\n  /**\n   * 提交消息反馈（点赞/点踩）\n   */\n  public async submitFeedback(\n    appId: string,\n    chatId: string,\n    messageId: string,\n    feedback: \"like\" | \"dislike\",\n    comment?: string,\n  ): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/feedback`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          appId,\n          chatId,\n          messageId,\n          feedback,\n          comment,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to submit feedback: ${response.statusText}`)\n      }\n\n      // 发送自定义事件\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"message_feedback\",\n        value: {\n          messageId,\n          feedback,\n          comment,\n          success: true,\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return true\n    } catch (error) {\n      console.error(\"Error submitting feedback:\", error)\n\n      // 发送自定义事件\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"message_feedback\",\n        value: {\n          messageId,\n          feedback,\n          comment,\n          success: false,\n          error: error instanceof Error ? error.message : \"Unknown error\",\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return false\n    }\n  }\n\n  /**\n   * 生成长图\n   */\n  public async generateLongImage(appId: string, chatId: string, includeWelcome = true): Promise<string> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/generate-image`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          appId,\n          chatId,\n          includeWelcome,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to generate long image: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n      const imageUrl = data.imageUrl\n\n      // 发送自定义事件\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"long_image_generated\",\n        value: {\n          imageUrl,\n          chatId,\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return imageUrl\n    } catch (error) {\n      console.error(\"Error generating long image:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * 批量转发消息\n   */\n  public async batchForward(\n    sourceAppId: string,\n    sourceChatId: string,\n    targetAppIds: string[],\n    messageIds: string[],\n  ): Promise<any> {\n    try {\n      const response = await fetch(`${this.options.proxyUrl}/fastgpt/batch-forward`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          sourceAppId,\n          sourceChatId,\n          targetAppIds,\n          messageIds,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to batch forward: ${response.statusText}`)\n      }\n\n      const data = await response.json()\n\n      // 发送自定义事件\n      this.emitEvent({\n        type: \"CUSTOM\",\n        name: \"batch_forward_completed\",\n        value: {\n          results: data.results,\n          success: data.success,\n        },\n        timestamp: Date.now(),\n      } as CustomEvent)\n\n      return data\n    } catch (error) {\n      console.error(\"Error in batch forward:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * 更新状态\n   */\n  private updateState(newState: Record<string, any>): void {\n    this.state = {\n      ...this.state,\n      ...newState,\n    }\n  }\n\n  /**\n   * 发送事件到事件流\n   */\n  private emitEvent(event: BaseEvent): void {\n    if (this.options.debug) {\n      console.debug(\"AG-UI Event:\", event)\n    }\n    this.eventSubject.next(event)\n  }\n}\n"],"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","ignoreList":[]}