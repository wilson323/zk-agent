27b7eed4dcb5d8bd0b9f0c89bffbad1b
"use strict";

/**
 * @file app/api/admin/security/scan/route.ts
 * @description API endpoints for security code scanning
 * @author Security Team
 * @lastUpdate 2024-12-19
 */
/* istanbul ignore next */
function cov_25i9jhz0yq() {
  var path = "E:\\zk-agent\\app\\api\\admin\\security\\scan\\route.ts";
  var hash = "bb48c3f75fa9a2b6dc64d33a67bc5bf60348e9b7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "E:\\zk-agent\\app\\api\\admin\\security\\scan\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 20
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 18
        }
      },
      "3": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 39
        }
      },
      "4": {
        start: {
          line: 12,
          column: 28
        },
        end: {
          line: 12,
          column: 71
        }
      },
      "5": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 79
        }
      },
      "6": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 14,
          column: 60
        }
      },
      "7": {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 46
        }
      },
      "8": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 53
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "10": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "11": {
        start: {
          line: 21,
          column: 84
        },
        end: {
          line: 21,
          column: 88
        }
      },
      "12": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "13": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 32,
          column: 10
        }
      },
      "14": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "15": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 51,
          column: 11
        }
      },
      "16": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 56,
          column: 11
        }
      },
      "17": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "18": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 66,
          column: 28
        }
      },
      "19": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "20": {
        start: {
          line: 72,
          column: 33
        },
        end: {
          line: 72,
          column: 53
        }
      },
      "21": {
        start: {
          line: 73,
          column: 22
        },
        end: {
          line: 73,
          column: 47
        }
      },
      "22": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "23": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 76,
          column: 78
        }
      },
      "24": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "25": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 81,
          column: 36
        }
      },
      "26": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 86,
          column: 15
        }
      },
      "27": {
        start: {
          line: 90,
          column: 28
        },
        end: {
          line: 90,
          column: 81
        }
      },
      "28": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 94,
          column: 15
        }
      },
      "29": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 100,
          column: 11
        }
      },
      "30": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 105,
          column: 28
        }
      }
    },
    fnMap: {
      "0": {
        name: "POST",
        decl: {
          start: {
            line: 18,
            column: 15
          },
          end: {
            line: 18,
            column: 19
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "GET",
        decl: {
          start: {
            line: 70,
            column: 15
          },
          end: {
            line: 70,
            column: 18
          }
        },
        loc: {
          start: {
            line: 70,
            column: 28
          },
          end: {
            line: 107,
            column: 1
          }
        },
        line: 70
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 60
          },
          end: {
            line: 21,
            column: 79
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 21,
            column: 74
          },
          end: {
            line: 21,
            column: 79
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 25,
            column: 23
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 25
          },
          end: {
            line: 23,
            column: 63
          }
        }, {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 24,
            column: 44
          }
        }, {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 25,
            column: 23
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 95,
            column: 9
          }
        }, {
          start: {
            line: 88,
            column: 13
          },
          end: {
            line: 95,
            column: 9
          }
        }],
        line: 74
      },
      "3": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "E:\\zk-agent\\app\\api\\admin\\security\\scan\\route.ts",
      mappings: ";AAAA;;;;;GAKG;;AAWH,oBAwDC;AAGD,kBAyCC;AA7GD,wCAAwD;AACxD,wEAAoE;AACpE,gFAAgH;AAChH,6DAA4D;AAC5D,+CAA4C;AAE5C,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,iBAAiB,CAAC,CAAC;AAE7C,sDAAsD;AAC/C,KAAK,UAAU,IAAI,CAAC,OAAoB;IAC7C,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;QAClC,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,eAAe,EAAE,WAAW,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC;QAEjF,kCAAkC;QAClC,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;YACtC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;YAChC,WAAW,CAAC;QAE7B,sBAAsB;QACtB,MAAM,KAAK,GAAG,MAAM,oCAAgB,CAAC,cAAc,CAAC;YAClD,QAAQ;YACR,eAAe;YACf,eAAe;YACf,WAAW;SACZ,CAAC,CAAC;QAEH,wBAAwB;QACxB,MAAM,2CAAmB,CAAC,WAAW,CAAC;YACpC,IAAI,EAAE,yCAAiB,CAAC,aAAa;YACrC,QAAQ,EAAE,wCAAgB,CAAC,GAAG;YAC9B,EAAE,EAAE,QAAQ;YACZ,OAAO,EAAE;gBACP,MAAM,EAAE,gBAAgB;gBACxB,KAAK;gBACL,QAAQ;gBACR,WAAW;aACZ;YACD,SAAS,EAAE,CAAC;SACb,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,iCAAiC,EAAE;YAC7C,KAAK;YACL,QAAQ;YACR,WAAW;YACX,QAAQ;SACT,CAAC,CAAC;QAEH,OAAO,qBAAY,CAAC,IAAI,CAAC;YACvB,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,EAAE,KAAK,EAAE;YACf,OAAO,EAAE,oCAAoC;SAC9C,CAAC,CAAC;IAEL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE;YAC5C,KAAK,EAAE,IAAA,+BAAe,EAAC,KAAK,CAAC;SAC9B,CAAC,CAAC;QAEH,OAAO,qBAAY,CAAC,IAAI,CAAC;YACvB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,+BAA+B;YACtC,OAAO,EAAE,IAAA,+BAAe,EAAC,KAAK,CAAC;SAChC,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACtB,CAAC;AACH,CAAC;AAED,iDAAiD;AAC1C,KAAK,UAAU,GAAG,CAAC,OAAoB;IAC5C,IAAI,CAAC;QACH,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAExC,IAAI,KAAK,EAAE,CAAC;YACV,wBAAwB;YACxB,MAAM,GAAG,GAAG,oCAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAE/C,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,OAAO,qBAAY,CAAC,IAAI,CAAC;oBACvB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,oBAAoB;iBAC5B,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;YACtB,CAAC;YAED,OAAO,qBAAY,CAAC,IAAI,CAAC;gBACvB,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,GAAG;aACV,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,8BAA8B;YAC9B,MAAM,OAAO,GAAG,oCAAgB,CAAC,cAAc,EAAE,CAAC;YAElD,OAAO,qBAAY,CAAC,IAAI,CAAC;gBACvB,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,OAAO;aACd,CAAC,CAAC;QACL,CAAC;IAEH,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE;YAC7C,KAAK,EAAE,IAAA,+BAAe,EAAC,KAAK,CAAC;SAC9B,CAAC,CAAC;QAEH,OAAO,qBAAY,CAAC,IAAI,CAAC;YACvB,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,gCAAgC;YACvC,OAAO,EAAE,IAAA,+BAAe,EAAC,KAAK,CAAC;SAChC,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;IACtB,CAAC;AACH,CAAC",
      names: [],
      sources: ["E:\\zk-agent\\app\\api\\admin\\security\\scan\\route.ts"],
      sourcesContent: ["/**\n * @file app/api/admin/security/scan/route.ts\n * @description API endpoints for security code scanning\n * @author Security Team\n * @lastUpdate 2024-12-19\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { automatedScanner } from '@/lib/security/automated-scanner';\nimport { securityAuditSystem, SecurityEventType, SecuritySeverity } from '@/lib/security/security-audit-system';\nimport { getErrorMessage } from '@/lib/utils/error-handler';\nimport { Logger } from '@/lib/utils/logger';\n\nconst logger = new Logger('SecurityScanAPI');\n\n// POST /api/admin/security/scan - Start security scan\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { configId, includePatterns, excludePatterns, triggeredBy = 'api' } = body;\n\n    // Get client IP for audit logging\n    const clientIP = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     '127.0.0.1';\n\n    // Start security scan\n    const jobId = await automatedScanner.scanRepository({\n      configId,\n      includePatterns,\n      excludePatterns,\n      triggeredBy,\n    });\n\n    // Record security event\n    await securityAuditSystem.recordEvent({\n      type: SecurityEventType.SECURITY_SCAN,\n      severity: SecuritySeverity.LOW,\n      ip: clientIP,\n      details: {\n        action: 'scan_initiated',\n        jobId,\n        configId,\n        triggeredBy,\n      },\n      riskScore: 1,\n    });\n\n    logger.info('Security scan initiated via API', {\n      jobId,\n      configId,\n      triggeredBy,\n      clientIP,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: { jobId },\n      message: 'Security scan started successfully',\n    });\n\n  } catch (error) {\n    logger.error('Failed to start security scan', {\n      error: getErrorMessage(error),\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to start security scan',\n      details: getErrorMessage(error),\n    }, { status: 500 });\n  }\n}\n\n// GET /api/admin/security/scan - Get scan status\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const jobId = searchParams.get('jobId');\n\n    if (jobId) {\n      // Get specific scan job\n      const job = automatedScanner.getScanJob(jobId);\n      \n      if (!job) {\n        return NextResponse.json({\n          success: false,\n          error: 'Scan job not found',\n        }, { status: 404 });\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: job,\n      });\n    } else {\n      // Get all scan configurations\n      const configs = automatedScanner.getScanConfigs();\n      \n      return NextResponse.json({\n        success: true,\n        data: configs,\n      });\n    }\n\n  } catch (error) {\n    logger.error('Failed to get scan information', {\n      error: getErrorMessage(error),\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to get scan information',\n      details: getErrorMessage(error),\n    }, { status: 500 });\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bb48c3f75fa9a2b6dc64d33a67bc5bf60348e9b7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_25i9jhz0yq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_25i9jhz0yq();
cov_25i9jhz0yq().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_25i9jhz0yq().s[1]++;
exports.POST = POST;
/* istanbul ignore next */
cov_25i9jhz0yq().s[2]++;
exports.GET = GET;
const server_1 =
/* istanbul ignore next */
(cov_25i9jhz0yq().s[3]++, require("next/server"));
const automated_scanner_1 =
/* istanbul ignore next */
(cov_25i9jhz0yq().s[4]++, require("@/lib/security/automated-scanner"));
const security_audit_system_1 =
/* istanbul ignore next */
(cov_25i9jhz0yq().s[5]++, require("@/lib/security/security-audit-system"));
const error_handler_1 =
/* istanbul ignore next */
(cov_25i9jhz0yq().s[6]++, require("@/lib/utils/error-handler"));
const logger_1 =
/* istanbul ignore next */
(cov_25i9jhz0yq().s[7]++, require("@/lib/utils/logger"));
const logger =
/* istanbul ignore next */
(cov_25i9jhz0yq().s[8]++, new logger_1.Logger('SecurityScanAPI'));
// POST /api/admin/security/scan - Start security scan
async function POST(request) {
  /* istanbul ignore next */
  cov_25i9jhz0yq().f[0]++;
  cov_25i9jhz0yq().s[9]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_25i9jhz0yq().s[10]++, await request.json());
    const {
      configId,
      includePatterns,
      excludePatterns,
      triggeredBy =
      /* istanbul ignore next */
      (cov_25i9jhz0yq().b[0][0]++, 'api')
    } =
    /* istanbul ignore next */
    (cov_25i9jhz0yq().s[11]++, body);
    // Get client IP for audit logging
    const clientIP =
    /* istanbul ignore next */
    (cov_25i9jhz0yq().s[12]++,
    /* istanbul ignore next */
    (cov_25i9jhz0yq().b[1][0]++, request.headers.get('x-forwarded-for')) ||
    /* istanbul ignore next */
    (cov_25i9jhz0yq().b[1][1]++, request.headers.get('x-real-ip')) ||
    /* istanbul ignore next */
    (cov_25i9jhz0yq().b[1][2]++, '127.0.0.1'));
    // Start security scan
    const jobId =
    /* istanbul ignore next */
    (cov_25i9jhz0yq().s[13]++, await automated_scanner_1.automatedScanner.scanRepository({
      configId,
      includePatterns,
      excludePatterns,
      triggeredBy
    }));
    // Record security event
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[14]++;
    await security_audit_system_1.securityAuditSystem.recordEvent({
      type: security_audit_system_1.SecurityEventType.SECURITY_SCAN,
      severity: security_audit_system_1.SecuritySeverity.LOW,
      ip: clientIP,
      details: {
        action: 'scan_initiated',
        jobId,
        configId,
        triggeredBy
      },
      riskScore: 1
    });
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[15]++;
    logger.info('Security scan initiated via API', {
      jobId,
      configId,
      triggeredBy,
      clientIP
    });
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[16]++;
    return server_1.NextResponse.json({
      success: true,
      data: {
        jobId
      },
      message: 'Security scan started successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[17]++;
    logger.error('Failed to start security scan', {
      error: (0, error_handler_1.getErrorMessage)(error)
    });
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[18]++;
    return server_1.NextResponse.json({
      success: false,
      error: 'Failed to start security scan',
      details: (0, error_handler_1.getErrorMessage)(error)
    }, {
      status: 500
    });
  }
}
// GET /api/admin/security/scan - Get scan status
async function GET(request) {
  /* istanbul ignore next */
  cov_25i9jhz0yq().f[1]++;
  cov_25i9jhz0yq().s[19]++;
  try {
    const {
      searchParams
    } =
    /* istanbul ignore next */
    (cov_25i9jhz0yq().s[20]++, new URL(request.url));
    const jobId =
    /* istanbul ignore next */
    (cov_25i9jhz0yq().s[21]++, searchParams.get('jobId'));
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[22]++;
    if (jobId) {
      /* istanbul ignore next */
      cov_25i9jhz0yq().b[2][0]++;
      // Get specific scan job
      const job =
      /* istanbul ignore next */
      (cov_25i9jhz0yq().s[23]++, automated_scanner_1.automatedScanner.getScanJob(jobId));
      /* istanbul ignore next */
      cov_25i9jhz0yq().s[24]++;
      if (!job) {
        /* istanbul ignore next */
        cov_25i9jhz0yq().b[3][0]++;
        cov_25i9jhz0yq().s[25]++;
        return server_1.NextResponse.json({
          success: false,
          error: 'Scan job not found'
        }, {
          status: 404
        });
      } else
      /* istanbul ignore next */
      {
        cov_25i9jhz0yq().b[3][1]++;
      }
      cov_25i9jhz0yq().s[26]++;
      return server_1.NextResponse.json({
        success: true,
        data: job
      });
    } else {
      /* istanbul ignore next */
      cov_25i9jhz0yq().b[2][1]++;
      // Get all scan configurations
      const configs =
      /* istanbul ignore next */
      (cov_25i9jhz0yq().s[27]++, automated_scanner_1.automatedScanner.getScanConfigs());
      /* istanbul ignore next */
      cov_25i9jhz0yq().s[28]++;
      return server_1.NextResponse.json({
        success: true,
        data: configs
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[29]++;
    logger.error('Failed to get scan information', {
      error: (0, error_handler_1.getErrorMessage)(error)
    });
    /* istanbul ignore next */
    cov_25i9jhz0yq().s[30]++;
    return server_1.NextResponse.json({
      success: false,
      error: 'Failed to get scan information',
      details: (0, error_handler_1.getErrorMessage)(error)
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,