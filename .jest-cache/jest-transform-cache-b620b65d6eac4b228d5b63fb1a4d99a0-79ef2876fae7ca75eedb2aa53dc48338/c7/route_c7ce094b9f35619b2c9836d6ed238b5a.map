{"version":3,"names":["cov_25i9jhz0yq","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","POST","GET","server_1","require","automated_scanner_1","security_audit_system_1","error_handler_1","logger_1","logger","Logger","request","body","json","configId","includePatterns","excludePatterns","triggeredBy","clientIP","headers","get","jobId","automatedScanner","scanRepository","securityAuditSystem","recordEvent","SecurityEventType","SECURITY_SCAN","severity","SecuritySeverity","LOW","ip","details","action","riskScore","info","NextResponse","success","data","message","error","getErrorMessage","status","searchParams","URL","url","job","getScanJob","configs","getScanConfigs"],"sources":["E:\\zk-agent\\app\\api\\admin\\security\\scan\\route.ts"],"sourcesContent":["/**\n * @file app/api/admin/security/scan/route.ts\n * @description API endpoints for security code scanning\n * @author Security Team\n * @lastUpdate 2024-12-19\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { automatedScanner } from '@/lib/security/automated-scanner';\nimport { securityAuditSystem, SecurityEventType, SecuritySeverity } from '@/lib/security/security-audit-system';\nimport { getErrorMessage } from '@/lib/utils/error-handler';\nimport { Logger } from '@/lib/utils/logger';\n\nconst logger = new Logger('SecurityScanAPI');\n\n// POST /api/admin/security/scan - Start security scan\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { configId, includePatterns, excludePatterns, triggeredBy = 'api' } = body;\n\n    // Get client IP for audit logging\n    const clientIP = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     '127.0.0.1';\n\n    // Start security scan\n    const jobId = await automatedScanner.scanRepository({\n      configId,\n      includePatterns,\n      excludePatterns,\n      triggeredBy,\n    });\n\n    // Record security event\n    await securityAuditSystem.recordEvent({\n      type: SecurityEventType.SECURITY_SCAN,\n      severity: SecuritySeverity.LOW,\n      ip: clientIP,\n      details: {\n        action: 'scan_initiated',\n        jobId,\n        configId,\n        triggeredBy,\n      },\n      riskScore: 1,\n    });\n\n    logger.info('Security scan initiated via API', {\n      jobId,\n      configId,\n      triggeredBy,\n      clientIP,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: { jobId },\n      message: 'Security scan started successfully',\n    });\n\n  } catch (error) {\n    logger.error('Failed to start security scan', {\n      error: getErrorMessage(error),\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to start security scan',\n      details: getErrorMessage(error),\n    }, { status: 500 });\n  }\n}\n\n// GET /api/admin/security/scan - Get scan status\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const jobId = searchParams.get('jobId');\n\n    if (jobId) {\n      // Get specific scan job\n      const job = automatedScanner.getScanJob(jobId);\n      \n      if (!job) {\n        return NextResponse.json({\n          success: false,\n          error: 'Scan job not found',\n        }, { status: 404 });\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: job,\n      });\n    } else {\n      // Get all scan configurations\n      const configs = automatedScanner.getScanConfigs();\n      \n      return NextResponse.json({\n        success: true,\n        data: configs,\n      });\n    }\n\n  } catch (error) {\n    logger.error('Failed to get scan information', {\n      error: getErrorMessage(error),\n    });\n\n    return NextResponse.json({\n      success: false,\n      error: 'Failed to get scan information',\n      details: getErrorMessage(error),\n    }, { status: 500 });\n  }\n}"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UA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","ignoreList":[]}