{"version":3,"names":["cov_2ftsdgrvv0","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","api_route_wrapper_1","require","api_helper_1","exports","POST","createApiRoute","RouteConfigs","protectedPost","req","params","validatedBody","validatedQuery","user","requestId","FASTGPT_API_URL","process","env","FASTGPT_API_KEY","ApiResponseWrapper","error","status","body","json","response","fetch","method","headers","Authorization","JSON","stringify","stream","ReadableStream","controller","reader","getReader","close","done","value","read","enqueue","releaseLock","Response","Connection","data","success","console"],"sources":["E:\\zk-agent\\app\\api\\fastgpt\\api\\v1\\chat\\completions\\route.ts"],"sourcesContent":["/**\n * @file fastgpt\\api\\v1\\chat\\completions\\route.ts\n * @description Migrated API route with global error handling\n * @author ZK-Agent Team\n * @date 2025-06-25\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createApiRoute, RouteConfigs, CommonValidations } from '@/lib/middleware/api-route-wrapper';\nimport { ApiResponseWrapper } from '@/lib/utils/api-helper';\n\nexport const POST = createApiRoute(\n  RouteConfigs.protectedPost(),\n  async (req: NextRequest, { params, validatedBody, validatedQuery, user, requestId }) => {\n    try {\n      const FASTGPT_API_URL = process.env.FASTGPT_API_URL\n      const FASTGPT_API_KEY = process.env.FASTGPT_API_KEY\n      \n      if (!FASTGPT_API_URL || !FASTGPT_API_KEY) {\n        return ApiResponseWrapper.error('FastGPT配置缺失', { status: 500 })\n      }\n      \n      const body = await req.json()\n      \n      const response = await fetch(`${FASTGPT_API_URL}/api/v1/chat/completions`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${FASTGPT_API_KEY}`,\n        },\n        body: JSON.stringify(body),\n      })\n  \n      // For streaming responses, we need to return the response as is\n      if (body.stream) {\n        // Create a new readable stream\n        const stream = new ReadableStream({\n          async start(controller) {\n            // Get the response body as a reader\n            const reader = response.body?.getReader()\n            if (!reader) {\n              controller.close()\n              return\n            }\n  \n            try {\n              while (true) {\n                const { done, value } = await reader.read()\n                if (done) {\n                  break\n                }\n                // Push the chunk to the new stream\n                controller.enqueue(value)\n              }\n            } finally {\n              controller.close()\n              reader.releaseLock()\n            }\n          },\n        })\n  \n        // Return the stream with the appropriate headers\n        return new Response(stream, {\n          headers: {\n            \"Content-Type\": \"text/event-stream\",\n            \"Cache-Control\": \"no-cache\",\n            Connection: \"keep-alive\",\n          },\n        })\n      }\n  \n      // For non-streaming responses, return the JSON\n      const data = await response.json()\n      return ApiResponseWrapper.success(data, { status: response.status })\n    } catch (error) {\n      console.error('FastGPT API error:', error)\n      return ApiResponseWrapper.error('FastGPT API调用失败', { status: 500 })\n    }\n  }\n);\n\n"],"mappings":";;AAAA;;;;;;AAAA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UA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","ignoreList":[]}