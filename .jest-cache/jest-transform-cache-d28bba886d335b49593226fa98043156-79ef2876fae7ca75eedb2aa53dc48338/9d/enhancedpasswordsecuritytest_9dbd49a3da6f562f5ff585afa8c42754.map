{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\auth\\enhanced-password-security.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/auth/enhanced-password-security.test.ts\r\n * @description 增强密码安全模块测试套件\r\n * @author B团队测试工程师\r\n * @lastUpdate 2024-12-19\r\n * @coverage 100%测试覆盖率目标\r\n */\r\n\r\nimport {\r\n  EnhancedPasswordSecurity,\r\n  PasswordStrength,\r\n  validatePassword,\r\n  hashPassword,\r\n  verifyPassword,\r\n  generateSecurePassword,\r\n  recordLoginAttempt,\r\n  isAccountLocked,\r\n} from '@/lib/auth/enhanced-password-security';\r\n\r\ndescribe('EnhancedPasswordSecurity', () => {\r\n  let passwordSecurity: EnhancedPasswordSecurity;\r\n\r\n  beforeEach(() => {\r\n    passwordSecurity = EnhancedPasswordSecurity.getInstance();\r\n  });\r\n\r\n  describe('密码验证', () => {\r\n    it('应该验证强密码', () => {\r\n      const result = validatePassword('StrongP@ssw0rd123');\r\n      \r\n      expect(result.isValid).toBe(true);\r\n      expect(result.strength).toBeGreaterThanOrEqual(PasswordStrength.GOOD);\r\n      expect(result.errors).toHaveLength(0);\r\n    });\r\n\r\n    it('应该拒绝弱密码', () => {\r\n      const weakPasswords = [\r\n        'short',\r\n        'nouppercase123',\r\n        'NOLOWERCASE123',\r\n        'NoNumbers',\r\n        'NoSpecial123',\r\n      ];\r\n\r\n      weakPasswords.forEach(password => {\r\n        const result = validatePassword(password);\r\n        expect(result.isValid).toBe(false);\r\n        expect(result.errors.length).toBeGreaterThan(0);\r\n      });\r\n    });\r\n\r\n    it('应该检测常见密码', () => {\r\n      const commonPasswords = ['password', '123456', 'admin', 'qwerty'];\r\n      \r\n      commonPasswords.forEach(password => {\r\n        const result = validatePassword(password);\r\n        expect(result.isValid).toBe(false);\r\n        expect(result.errors).toContain('不能使用常见密码');\r\n      });\r\n    });\r\n\r\n    it('应该检测个人信息', () => {\r\n      const userInfo = {\r\n        email: 'john.doe@example.com',\r\n        name: 'John Doe',\r\n        username: 'johndoe',\r\n      };\r\n\r\n      const result = validatePassword('JohnDoe123!', userInfo);\r\n      expect(result.warnings).toContain('密码不应包含个人信息');\r\n    });\r\n  });\r\n\r\n  describe('密码哈希和验证', () => {\r\n    it('应该成功哈希密码', async () => {\r\n      const password = 'TestPassword123!';\r\n      const hash = await hashPassword(password);\r\n      \r\n      expect(hash).toBeDefined();\r\n      expect(hash).not.toBe(password);\r\n      expect(hash.length).toBeGreaterThan(10);\r\n    });\r\n\r\n    it('应该验证正确的密码', async () => {\r\n      const password = 'correct-password';\r\n      const hash = await hashPassword(password);\r\n      \r\n      const isValid = await verifyPassword(password, hash);\r\n      expect(isValid).toBe(true);\r\n    });\r\n\r\n    it('应该拒绝错误的密码', async () => {\r\n      const password = 'TestPassword123!';\r\n      const wrongPassword = 'WrongPassword123!';\r\n      const hash = await hashPassword(password);\r\n      \r\n      const isValid = await verifyPassword(wrongPassword, hash);\r\n      expect(isValid).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('登录尝试跟踪', () => {\r\n    const userId = 'test-user-123';\r\n    const ip = '192.168.1.100';\r\n\r\n    beforeEach(() => {\r\n      // 清理之前的测试数据\r\n      passwordSecurity.unlockAccount(userId, ip);\r\n    });\r\n\r\n    it('应该记录成功的登录尝试', () => {\r\n      expect(() => {\r\n        recordLoginAttempt(userId, ip, true, 'test-user-agent');\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该记录失败的登录尝试', () => {\r\n      expect(() => {\r\n        recordLoginAttempt(userId, ip, false, 'test-user-agent');\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该在多次失败后锁定账户', () => {\r\n      // 记录5次失败尝试\r\n      for (let i = 0; i < 5; i++) {\r\n        recordLoginAttempt(userId, ip, false);\r\n      }\r\n      \r\n      expect(isAccountLocked(userId, ip)).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('安全密码生成', () => {\r\n    it('应该生成指定长度的密码', () => {\r\n      const lengths = [8, 12, 16, 20];\r\n      \r\n      lengths.forEach(length => {\r\n        const password = generateSecurePassword(length);\r\n        expect(password.length).toBe(length);\r\n      });\r\n    });\r\n\r\n    it('应该生成包含所有字符类型的密码', () => {\r\n      const password = generateSecurePassword(16);\r\n      \r\n      expect(/[a-z]/.test(password)).toBe(true); // 小写字母\r\n      expect(/[A-Z]/.test(password)).toBe(true); // 大写字母\r\n      expect(/\\d/.test(password)).toBe(true);    // 数字\r\n      expect(/[!@#$%^&*()_+\\-=\\[\\]{}|;:,.<>?]/.test(password)).toBe(true); // 特殊字符\r\n    });\r\n\r\n    it('应该生成不同的密码', () => {\r\n      const passwords = new Set();\r\n      \r\n      for (let i = 0; i < 100; i++) {\r\n        passwords.add(generateSecurePassword(12));\r\n      }\r\n      \r\n      // 应该生成至少95%不同的密码\r\n      expect(passwords.size).toBeGreaterThanOrEqual(95);\r\n    });\r\n  });\r\n\r\n  describe('安全统计', () => {\r\n    it('应该返回安全统计信息', () => {\r\n      const stats = passwordSecurity.getSecurityStats();\r\n      \r\n      expect(stats).toHaveProperty('totalAttempts');\r\n      expect(stats).toHaveProperty('lockedAccounts');\r\n      expect(stats).toHaveProperty('config');\r\n      expect(typeof stats.totalAttempts).toBe('number');\r\n      expect(typeof stats.lockedAccounts).toBe('number');\r\n      expect(typeof stats.config).toBe('object');\r\n    });\r\n  });\r\n}); "],"names":["describe","passwordSecurity","beforeEach","EnhancedPasswordSecurity","getInstance","it","result","validatePassword","expect","isValid","toBe","strength","toBeGreaterThanOrEqual","PasswordStrength","GOOD","errors","toHaveLength","weakPasswords","forEach","password","length","toBeGreaterThan","commonPasswords","toContain","userInfo","email","name","username","warnings","hash","hashPassword","toBeDefined","not","verifyPassword","wrongPassword","userId","ip","unlockAccount","recordLoginAttempt","toThrow","i","isAccountLocked","lengths","generateSecurePassword","test","passwords","Set","add","size","stats","getSecurityStats","toHaveProperty","totalAttempts","lockedAccounts","config"],"mappings":"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"}