8c42a1747ab282cf4a59101d63d9a9d4
// @ts-nocheck
/**
 * @file lib/validation/schemas.ts
 * @description 基于Zod的统一数据验证模块 - 多智能体平台数据验证中心
 * @author zk-agent开发团队
 * @lastUpdate 2024-12-19
 * @updateLog
 *   - 2024-12-19 创建基于zod的统一验证系统
 * 
 * 🔤 命名规范说明：
 * - Schema名称：PascalCase + Schema后缀（如：UserInputSchema）
 * - 验证函数：validate + 对象名称（如：validateCADFile）
 * - 错误类型：ValidationError + 具体类型（如：CADValidationError）
 * - 配置常量：VALIDATION_ + 大写描述（如：VALIDATION_LIMITS）
 * 
 * ⚠️ 本模块为现有系统的增强，保持向后兼容性
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    APIRequestSchema: function() {
        return APIRequestSchema;
    },
    AgentConfigSchema: function() {
        return AgentConfigSchema;
    },
    BaseFileSchema: function() {
        return BaseFileSchema;
    },
    CADAnalysisConfigSchema: function() {
        return CADAnalysisConfigSchema;
    },
    CADFileSchema: function() {
        return CADFileSchema;
    },
    ChatMessageSchema: function() {
        return ChatMessageSchema;
    },
    ResponsiveConfigSchema: function() {
        return ResponsiveConfigSchema;
    },
    UserInputSchema: function() {
        return UserInputSchema;
    },
    VALIDATION_LIMITS: function() {
        return VALIDATION_LIMITS;
    },
    createValidator: function() {
        return createValidator;
    },
    sanitizeAndValidate: function() {
        return sanitizeAndValidate;
    },
    validateAgentConfig: function() {
        return validateAgentConfig;
    },
    validateCADFile: function() {
        return validateCADFile;
    },
    validateChatMessage: function() {
        return validateChatMessage;
    },
    validateUserInput: function() {
        return validateUserInput;
    }
});
const _zod = require("zod");
const VALIDATION_LIMITS = {
    // 文件上传限制
    MAX_FILE_SIZE: 100 * 1024 * 1024,
    MAX_FILENAME_LENGTH: 255,
    // 文本内容限制
    MAX_MESSAGE_LENGTH: 4000,
    MAX_USER_NAME_LENGTH: 100,
    MIN_PASSWORD_LENGTH: 8,
    // CAD文件特定限制
    MAX_CAD_ENTITIES: 10000,
    MAX_ANALYSIS_TIMEOUT: 300000,
    // 智能体配置限制
    MAX_AGENT_NAME_LENGTH: 50,
    MAX_AGENT_DESCRIPTION_LENGTH: 500,
    MAX_CAPABILITIES_COUNT: 20
};
const BaseFileSchema = _zod.z.object({
    name: _zod.z.string().min(1, '文件名不能为空').max(VALIDATION_LIMITS.MAX_FILENAME_LENGTH, `文件名不能超过${VALIDATION_LIMITS.MAX_FILENAME_LENGTH}个字符`).regex(/^[^<>:"/\\|?*]+$/, '文件名包含非法字符'),
    size: _zod.z.number().min(1, '文件大小必须大于0').max(VALIDATION_LIMITS.MAX_FILE_SIZE, `文件大小不能超过${VALIDATION_LIMITS.MAX_FILE_SIZE / 1024 / 1024}MB`),
    type: _zod.z.string().min(1, '文件类型不能为空'),
    lastModified: _zod.z.number().optional()
});
const CADFileSchema = BaseFileSchema.extend({
    name: _zod.z.string().regex(/\.(dwg|dxf|step|stp|iges|igs|stl|obj|gltf|glb)$/i, '不支持的CAD文件格式'),
    type: _zod.z.enum([
        'application/octet-stream',
        'application/x-dwg',
        'application/x-dxf',
        'application/step',
        'application/iges',
        'model/stl',
        'model/obj',
        'model/gltf+json',
        'model/gltf-binary'
    ], {
        errorMap: ()=>({
                message: '不支持的CAD文件MIME类型'
            })
    })
});
const CADAnalysisConfigSchema = _zod.z.object({
    precision: _zod.z.enum([
        'low',
        'standard',
        'high',
        'ultra'
    ], {
        errorMap: ()=>({
                message: '分析精度必须是 low, standard, high, ultra 之一'
            })
    }).default('standard'),
    enableAI: _zod.z.boolean().default(true),
    enableDeviceDetection: _zod.z.boolean().default(true),
    enableRiskAssessment: _zod.z.boolean().default(true),
    enableManufacturingAnalysis: _zod.z.boolean().default(false),
    enableCostEstimation: _zod.z.boolean().default(false),
    timeout: _zod.z.number().min(1000, '超时时间不能少于1秒').max(VALIDATION_LIMITS.MAX_ANALYSIS_TIMEOUT, '超时时间不能超过5分钟').default(60000),
    maxEntities: _zod.z.number().min(1, '最大实体数不能少于1').max(VALIDATION_LIMITS.MAX_CAD_ENTITIES, `最大实体数不能超过${VALIDATION_LIMITS.MAX_CAD_ENTITIES}`).default(5000)
});
const UserInputSchema = _zod.z.object({
    email: _zod.z.string().email('邮箱格式不正确').max(254, '邮箱地址过长'),
    name: _zod.z.string().min(1, '姓名不能为空').max(VALIDATION_LIMITS.MAX_USER_NAME_LENGTH, `姓名不能超过${VALIDATION_LIMITS.MAX_USER_NAME_LENGTH}个字符`).regex(/^[\u4e00-\u9fff\u3400-\u4dbfa-zA-Z\s]+$/, '姓名只能包含中文、英文和空格'),
    password: _zod.z.string().min(VALIDATION_LIMITS.MIN_PASSWORD_LENGTH, `密码不能少于${VALIDATION_LIMITS.MIN_PASSWORD_LENGTH}个字符`).regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, '密码必须包含大小写字母和数字')
});
const ChatMessageSchema = _zod.z.object({
    content: _zod.z.string().min(1, '消息内容不能为空').max(VALIDATION_LIMITS.MAX_MESSAGE_LENGTH, `消息内容不能超过${VALIDATION_LIMITS.MAX_MESSAGE_LENGTH}个字符`).refine((content)=>!/<script|javascript:|data:|vbscript:|onload|onerror/i.test(content), '消息内容包含潜在的安全风险'),
    type: _zod.z.enum([
        'text',
        'file',
        'image',
        'system'
    ], {
        errorMap: ()=>({
                message: '消息类型必须是 text, file, image, system 之一'
            })
    }).default('text'),
    role: _zod.z.enum([
        'user',
        'assistant',
        'system',
        'tool'
    ], {
        errorMap: ()=>({
                message: '消息角色必须是 user, assistant, system, tool 之一'
            })
    }).default('user'),
    timestamp: _zod.z.date().default(()=>new Date()),
    metadata: _zod.z.record(_zod.z.unknown()).optional()
});
const AgentConfigSchema = _zod.z.object({
    id: _zod.z.string().min(1, '智能体ID不能为空').regex(/^[a-zA-Z0-9_-]+$/, '智能体ID只能包含字母、数字、下划线和连字符'),
    name: _zod.z.string().min(1, '智能体名称不能为空').max(VALIDATION_LIMITS.MAX_AGENT_NAME_LENGTH, `智能体名称不能超过${VALIDATION_LIMITS.MAX_AGENT_NAME_LENGTH}个字符`),
    description: _zod.z.string().max(VALIDATION_LIMITS.MAX_AGENT_DESCRIPTION_LENGTH, `智能体描述不能超过${VALIDATION_LIMITS.MAX_AGENT_DESCRIPTION_LENGTH}个字符`).optional(),
    type: _zod.z.enum([
        'fastgpt',
        'cad',
        'poster',
        'custom'
    ], {
        errorMap: ()=>({
                message: '智能体类型必须是 fastgpt, cad, poster, custom 之一'
            })
    }),
    capabilities: _zod.z.array(_zod.z.string()).max(VALIDATION_LIMITS.MAX_CAPABILITIES_COUNT, `智能体能力不能超过${VALIDATION_LIMITS.MAX_CAPABILITIES_COUNT}个`).default([]),
    config: _zod.z.record(_zod.z.unknown()).default({}),
    enabled: _zod.z.boolean().default(true),
    priority: _zod.z.number().min(0, '优先级不能小于0').max(100, '优先级不能大于100').default(50)
});
const APIRequestSchema = _zod.z.object({
    method: _zod.z.enum([
        'GET',
        'POST',
        'PUT',
        'DELETE',
        'PATCH'
    ], {
        errorMap: ()=>({
                message: 'HTTP方法不支持'
            })
    }),
    headers: _zod.z.record(_zod.z.string()).optional(),
    query: _zod.z.record(_zod.z.union([
        _zod.z.string(),
        _zod.z.array(_zod.z.string())
    ])).optional(),
    body: _zod.z.unknown().optional(),
    timeout: _zod.z.number().min(1000, '请求超时时间不能少于1秒').max(300000, '请求超时时间不能超过5分钟').default(30000)
});
const ResponsiveConfigSchema = _zod.z.object({
    breakpoint: _zod.z.enum([
        'xs',
        'sm',
        'md',
        'lg',
        'xl',
        '2xl',
        '3xl',
        '4xl',
        '5xl',
        '6xl'
    ], {
        errorMap: ()=>({
                message: '断点配置不正确'
            })
    }),
    width: _zod.z.number().min(320, '屏幕宽度不能小于320px'),
    height: _zod.z.number().min(240, '屏幕高度不能小于240px'),
    deviceType: _zod.z.enum([
        'mobile',
        'tablet',
        'desktop',
        'tv'
    ], {
        errorMap: ()=>({
                message: '设备类型必须是 mobile, tablet, desktop, tv 之一'
            })
    }),
    touchOptimized: _zod.z.boolean().default(false),
    performance: _zod.z.object({
        level: _zod.z.enum([
            'low',
            'medium',
            'high'
        ]).default('medium'),
        memory: _zod.z.number().min(1).default(4),
        cores: _zod.z.number().min(1).default(4)
    }).optional()
});
const validateCADFile = (file)=>{
    try {
        const data = CADFileSchema.parse(file);
        return {
            success: true,
            data
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            return {
                success: false,
                error: {
                    message: 'CAD文件验证失败',
                    issues: error.issues.map((issue)=>({
                            path: issue.path,
                            message: issue.message,
                            code: issue.code
                        }))
                }
            };
        }
        return {
            success: false,
            error: {
                message: '未知验证错误',
                issues: []
            }
        };
    }
};
const validateChatMessage = (message)=>{
    try {
        const data = ChatMessageSchema.parse(message);
        return {
            success: true,
            data
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            return {
                success: false,
                error: {
                    message: '聊天消息验证失败',
                    issues: error.issues.map((issue)=>({
                            path: issue.path,
                            message: issue.message,
                            code: issue.code
                        }))
                }
            };
        }
        return {
            success: false,
            error: {
                message: '未知验证错误',
                issues: []
            }
        };
    }
};
const validateAgentConfig = (config)=>{
    try {
        const data = AgentConfigSchema.parse(config);
        return {
            success: true,
            data
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            return {
                success: false,
                error: {
                    message: '智能体配置验证失败',
                    issues: error.issues.map((issue)=>({
                            path: issue.path,
                            message: issue.message,
                            code: issue.code
                        }))
                }
            };
        }
        return {
            success: false,
            error: {
                message: '未知验证错误',
                issues: []
            }
        };
    }
};
const validateUserInput = (input)=>{
    try {
        const data = UserInputSchema.parse(input);
        return {
            success: true,
            data
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            return {
                success: false,
                error: {
                    message: '用户输入验证失败',
                    issues: error.issues.map((issue)=>({
                            path: issue.path,
                            message: issue.message,
                            code: issue.code
                        }))
                }
            };
        }
        return {
            success: false,
            error: {
                message: '未知验证错误',
                issues: []
            }
        };
    }
};
const createValidator = (schema, errorMessage)=>{
    return (data)=>{
        try {
            const validData = schema.parse(data);
            return {
                success: true,
                data: validData
            };
        } catch (error) {
            if (error instanceof _zod.z.ZodError) {
                return {
                    success: false,
                    error: {
                        message: errorMessage,
                        issues: error.issues.map((issue)=>({
                                path: issue.path,
                                message: issue.message,
                                code: issue.code
                            }))
                    }
                };
            }
            return {
                success: false,
                error: {
                    message: '未知验证错误',
                    issues: []
                }
            };
        }
    };
};
const sanitizeAndValidate = (schema, data, sanitizers)=>{
    try {
        let sanitizedData = data;
        // 应用清理函数
        if (sanitizers) {
            for (const sanitizer of sanitizers){
                sanitizedData = sanitizer(sanitizedData);
            }
        }
        const validData = schema.parse(sanitizedData);
        return {
            success: true,
            data: validData
        };
    } catch (error) {
        if (error instanceof _zod.z.ZodError) {
            return {
                success: false,
                error: {
                    message: '数据验证失败',
                    issues: error.issues.map((issue)=>({
                            path: issue.path,
                            message: issue.message,
                            code: issue.code
                        }))
                }
            };
        }
        return {
            success: false,
            error: {
                message: '未知验证错误',
                issues: []
            }
        };
    }
};

//# sourceMappingURL=data:application/json;base64,