{"version":3,"sources":["E:\\zk-agent\\lib\\database\\connection.ts"],"sourcesContent":["// @ts-nocheck\n/**\n * @file Database Connection\n * @description 数据库连接管理和健康检查\n * @author ZK-Agent Team A\n * @date 2024-12-19\n */\n\nimport { PrismaClient } from '@prisma/client'\n\n// 数据库连接状态\nexport interface DatabaseStatus {\n  connected: boolean\n  message: string\n  timestamp: Date\n  version?: string\n  latency?: number\n  error?: string\n  stats?: {\n    totalQueries: number\n    failedQueries: number\n    avgLatency: number\n    reconnectAttempts: number\n  }\n}\n\n// 数据库健康检查结果\nexport interface DatabaseHealthCheck {\n  status: 'healthy' | 'unhealthy' | 'degraded'\n  checks: {\n    connection: DatabaseStatus\n    queries: {\n      read: boolean\n      write: boolean\n      latency: number\n    }\n    migrations: {\n      pending: number\n      applied: number\n    }\n  }\n  timestamp: Date\n}\n\nimport { enhancedDb, EnhancedDatabaseConnection, ConnectionState } from './enhanced-connection'\n\n// 全局 Prisma 客户端实例\nlet prisma: PrismaClient | null = null\n\n/**\n * 获取 Prisma 客户端实例\n * @returns {PrismaClient} Prisma 客户端实例\n */\nexport function getPrismaClient(): PrismaClient {\n  // 优先使用增强连接管理器的客户端\n  const enhancedClient = enhancedDb.getClient()\n  if (enhancedClient && enhancedDb.isConnected()) {\n    return enhancedClient\n  }\n\n  // 回退到传统连接方式\n  if (!prisma) {\n    prisma = new PrismaClient({\n      log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n      errorFormat: 'pretty',\n    })\n  }\n  return prisma\n}\n\n// 获取Prisma客户端实例\nexport const prisma = getPrismaClient()\n\n/**\n * 检查数据库连接状态\n * @returns {Promise<DatabaseStatus>} 数据库连接状态\n */\nexport async function checkDatabaseConnection(): Promise<DatabaseStatus> {\n  try {\n    // 优先使用增强连接管理器\n    if (enhancedDb.isConnected()) {\n      const stats = enhancedDb.getStats()\n      \n      // 执行健康检查查询\n      const result = await enhancedDb.executeQuery(async (client) => {\n        const versionResult = await client.$queryRaw<Array<{ version: string }>>`SELECT version()`\n        return versionResult[0]?.version || 'Unknown'\n      })\n      \n      return {\n        connected: true,\n        message: `Enhanced database connection active (uptime: ${Math.round(stats.uptime / 1000)}s)`,\n        version: result,\n        timestamp: new Date(),\n        stats: {\n          totalQueries: stats.totalQueries,\n          failedQueries: stats.failedQueries,\n          avgLatency: Math.round(stats.avgLatency),\n          reconnectAttempts: stats.reconnectAttempts\n        }\n      }\n    }\n    \n    // 回退到传统连接检查\n    const client = getPrismaClient()\n    await client.$connect()\n    \n    // 执行简单查询测试连接\n    await client.$queryRaw`SELECT 1`\n    \n    // 获取数据库版本信息\n    const result = await client.$queryRaw<Array<{ version: string }>>`SELECT version()`\n    const version = result[0]?.version || 'Unknown'\n    \n    return {\n      connected: true,\n      message: 'Database connection successful (fallback mode)',\n      version,\n      timestamp: new Date()\n    }\n  } catch (error) {\n    console.error('Database connection failed:', error)\n    \n    // 如果增强连接管理器未连接，尝试连接\n    if (!enhancedDb.isConnected()) {\n      try {\n        await enhancedDb.connect()\n        return await checkDatabaseConnection() // 递归重试\n      } catch (connectError) {\n        console.error('Enhanced connection failed:', connectError)\n      }\n    }\n    \n    return {\n      connected: false,\n      message: error instanceof Error ? error.message : 'Unknown database error',\n      timestamp: new Date()\n    }\n  }\n}\n\n/**\n * 执行完整的数据库健康检查\n */\nexport async function performDatabaseHealthCheck(): Promise<DatabaseHealthCheck> {\n  const timestamp = new Date()\n  \n  try {\n    // 检查基本连接\n    const connectionStatus = await checkDatabaseConnection()\n    \n    // 检查读写操作\n    const queryChecks = await checkDatabaseQueries()\n    \n    // 检查迁移状态\n    const migrationChecks = await checkMigrationStatus()\n    \n    // 确定整体健康状态\n    let status: DatabaseHealthCheck['status'] = 'healthy'\n    \n    if (!connectionStatus.connected || !queryChecks.read) {\n      status = 'unhealthy'\n    } else if (!queryChecks.write || migrationChecks.pending > 0) {\n      status = 'degraded'\n    }\n    \n    return {\n      status,\n      checks: {\n        connection: connectionStatus,\n        queries: queryChecks,\n        migrations: migrationChecks\n      },\n      timestamp\n    }\n  } catch (error) {\n    console.error('Database health check failed:', error)\n    \n    return {\n      status: 'unhealthy',\n      checks: {\n        connection: {\n          connected: false,\n          error: error instanceof Error ? error.message : 'Health check failed',\n          timestamp\n        },\n        queries: {\n          read: false,\n          write: false,\n          latency: 0\n        },\n        migrations: {\n          pending: 0,\n          applied: 0\n        }\n      },\n      timestamp\n    }\n  }\n}\n\n/**\n * 检查数据库查询操作\n */\nasync function checkDatabaseQueries(): Promise<{\n  read: boolean\n  write: boolean\n  latency: number\n}> {\n  const startTime = Date.now()\n  \n  try {\n    // 测试读操作\n    let readSuccess = false\n    try {\n      await prisma.$queryRaw`SELECT 1 as test`\n      readSuccess = true\n    } catch (error) {\n      console.error('Database read test failed:', error)\n    }\n    \n    // 测试写操作（如果有测试表的话）\n    let writeSuccess = false\n    try {\n      // 尝试创建一个临时记录来测试写操作\n      // 这里需要根据实际的数据库schema来调整\n      // 暂时假设写操作成功\n      writeSuccess = true\n    } catch (error) {\n      console.error('Database write test failed:', error)\n    }\n    \n    const latency = Date.now() - startTime\n    \n    return {\n      read: readSuccess,\n      write: writeSuccess,\n      latency\n    }\n  } catch (error) {\n    return {\n      read: false,\n      write: false,\n      latency: Date.now() - startTime\n    }\n  }\n}\n\n/**\n * 检查数据库迁移状态\n */\nasync function checkMigrationStatus(): Promise<{\n  pending: number\n  applied: number\n}> {\n  try {\n    // 这里需要根据实际的迁移管理方式来实现\n    // Prisma的迁移状态检查\n    \n    // 暂时返回默认值\n    return {\n      pending: 0,\n      applied: 0\n    }\n  } catch (error) {\n    console.error('Migration status check failed:', error)\n    return {\n      pending: 0,\n      applied: 0\n    }\n  }\n}\n\n/**\n * 关闭数据库连接\n * @returns {Promise<void>}\n */\nexport async function closeDatabaseConnection(): Promise<void> {\n  try {\n    // 优先使用增强连接管理器\n    if (enhancedDb.isConnected()) {\n      await enhancedDb.disconnect()\n      console.log('Enhanced database connection closed successfully')\n      return\n    }\n    \n    // 回退到传统方式\n    const client = getPrismaClient()\n    await client.$disconnect()\n    console.log('Database connection closed successfully')\n  } catch (error) {\n    console.error('Error closing database connection:', error)\n    throw error\n  }\n}\n\n/**\n * 重新连接数据库\n * @returns {Promise<DatabaseStatus>}\n */\nexport async function reconnectDatabase(): Promise<DatabaseStatus> {\n  try {\n    // 优先使用增强连接管理器\n    if (enhancedDb.getState() !== ConnectionState.DISCONNECTED) {\n      await enhancedDb.reconnect()\n      return await checkDatabaseConnection()\n    }\n    \n    // 回退到传统重连方式\n    await closeDatabaseConnection()\n    \n    // 等待一小段时间\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    \n    // 重新检查连接\n    return await checkDatabaseConnection()\n  } catch (error) {\n    console.error('Database reconnection failed:', error)\n    throw error\n  }\n}\n\n/**\n * 获取数据库连接池状态\n * @returns {Promise<any>} 连接池状态信息\n */\nexport async function getDatabasePoolStatus(): Promise<any> {\n  try {\n    // 优先使用增强连接管理器的统计信息\n    if (enhancedDb.isConnected()) {\n      const stats = enhancedDb.getStats()\n      const status = await checkDatabaseConnection()\n      \n      return {\n        connected: status.connected,\n        timestamp: status.timestamp,\n        version: status.version,\n        enhanced: true,\n        connectionState: stats.state,\n        uptime: Math.round(stats.uptime / 1000),\n        performance: {\n          totalQueries: stats.totalQueries,\n          failedQueries: stats.failedQueries,\n          successRate: stats.totalQueries > 0 \n            ? ((stats.totalQueries - stats.failedQueries) / stats.totalQueries * 100).toFixed(2) + '%'\n            : '100%',\n          avgLatency: Math.round(stats.avgLatency),\n          reconnectAttempts: stats.reconnectAttempts\n        },\n        pool: {\n          maxConnections: parseInt(process.env.DB_POOL_MAX || '50'),\n          minConnections: parseInt(process.env.DB_POOL_MIN || '10'),\n          active: status.connected ? 1 : 0,\n          acquireTimeout: parseInt(process.env.DB_POOL_ACQUIRE || '60000'),\n          idleTimeout: parseInt(process.env.DB_POOL_IDLE || '20000')\n        }\n      }\n    }\n    \n    // 回退到传统状态检查\n    const status = await checkDatabaseConnection()\n    \n    return {\n      connected: status.connected,\n      timestamp: status.timestamp,\n      version: status.version,\n      latency: status.latency,\n      enhanced: false,\n      // 模拟连接池信息（实际需要根据具体数据库驱动获取）\n      pool: {\n        total: parseInt(process.env.DB_POOL_MAX || '10'),\n        active: status.connected ? 1 : 0,\n        idle: status.connected ? parseInt(process.env.DB_POOL_MAX || '10') - 1 : 0,\n        waiting: 0\n      }\n    }\n  } catch (error) {\n    console.error('Failed to get database pool status:', error)\n    throw error\n  }\n}\n\n// 进程退出时清理连接\nprocess.on('beforeExit', async () => {\n  try {\n    // 优先使用增强连接管理器的优雅关闭\n    if (enhancedDb.isConnected()) {\n      await enhancedDb.gracefulShutdown()\n    } else {\n      await closeDatabaseConnection()\n    }\n  } catch (error) {\n    console.error('Error during database cleanup:', error)\n  }\n})\n\nprocess.on('SIGINT', async () => {\n  try {\n    console.log('Received SIGINT, initiating graceful shutdown...')\n    \n    // 优先使用增强连接管理器的优雅关闭\n    if (enhancedDb.isConnected()) {\n      await enhancedDb.gracefulShutdown()\n    } else {\n      await closeDatabaseConnection()\n      process.exit(0)\n    }\n  } catch (error) {\n    console.error('Error during graceful shutdown:', error)\n    process.exit(1)\n  }\n})\n\nprocess.on('SIGTERM', async () => {\n  try {\n    console.log('Received SIGTERM, initiating graceful shutdown...')\n    \n    // 优先使用增强连接管理器的优雅关闭\n    if (enhancedDb.isConnected()) {\n      await enhancedDb.gracefulShutdown()\n    } else {\n      await closeDatabaseConnection()\n      process.exit(0)\n    }\n  } catch (error) {\n    console.error('Error during graceful shutdown:', error)\n    process.exit(1)\n  }\n})\n\n// 导出增强连接管理器实例和相关功能\nexport { \n  enhancedDb, \n  EnhancedDatabaseConnection, \n  ConnectionState,\n  connectDatabase,\n  disconnectDatabase,\n  getDatabaseStats,\n  isDatabaseConnected,\n  executeQuery\n} from './enhanced-connection'\n\n// 初始化增强数据库连接（如果环境变量启用）\nif (process.env.ENHANCED_DB_CONNECTION === 'true') {\n  enhancedDb.connect().catch(error => {\n    console.error('Failed to initialize enhanced database connection:', error)\n  })\n}\n\n// 默认导出Prisma客户端\nexport default prisma\n\n// 导出类型\nexport type { DatabaseStatus, DatabaseHealthCheck }\n"],"names":["ConnectionState","EnhancedDatabaseConnection","checkDatabaseConnection","closeDatabaseConnection","connectDatabase","disconnectDatabase","enhancedDb","executeQuery","getDatabasePoolStatus","getDatabaseStats","getPrismaClient","isDatabaseConnected","performDatabaseHealthCheck","prisma","reconnectDatabase","enhancedClient","getClient","isConnected","PrismaClient","log","process","env","NODE_ENV","errorFormat","stats","getStats","result","client","versionResult","$queryRaw","version","connected","message","Math","round","uptime","timestamp","Date","totalQueries","failedQueries","avgLatency","reconnectAttempts","$connect","error","console","connect","connectError","Error","connectionStatus","queryChecks","checkDatabaseQueries","migrationChecks","checkMigrationStatus","status","read","write","pending","checks","connection","queries","migrations","latency","applied","startTime","now","readSuccess","writeSuccess","disconnect","$disconnect","getState","DISCONNECTED","reconnect","Promise","resolve","setTimeout","enhanced","connectionState","state","performance","successRate","toFixed","pool","maxConnections","parseInt","DB_POOL_MAX","minConnections","DB_POOL_MIN","active","acquireTimeout","DB_POOL_ACQUIRE","idleTimeout","DB_POOL_IDLE","total","idle","waiting","on","gracefulShutdown","exit","ENHANCED_DB_CONNECTION","catch"],"mappings":"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"}