e14335ec82152baa6e10d5f00929714d
// @ts-nocheck
/**
 * @file Error Retry Manager
 * @description 错误重试管理器，提供智能重试策略和错误处理
 * @author ZK-Agent Team A
 * @date 2024-12-19
 */ // 错误类型枚举
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ErrorRetryManager: function() {
        return ErrorRetryManager;
    },
    ErrorType: function() {
        return ErrorType;
    },
    errorRetryManager: function() {
        return errorRetryManager;
    },
    retry: function() {
        return retry;
    }
});
var ErrorType = /*#__PURE__*/ function(ErrorType) {
    ErrorType["NETWORK"] = "network";
    ErrorType["TIMEOUT"] = "timeout";
    ErrorType["RATE_LIMIT"] = "rate_limit";
    ErrorType["AUTH"] = "auth";
    ErrorType["SERVER"] = "server";
    ErrorType["CLIENT"] = "client";
    ErrorType["UNKNOWN"] = "unknown";
    return ErrorType;
}({});
class ErrorRetryManager {
    constructor(defaultStrategy){
        this.defaultStrategy = {
            maxRetries: 3,
            baseDelay: 1000,
            maxDelay: 30000,
            backoffMultiplier: 2,
            jitter: true,
            retryableErrors: [
                "network",
                "timeout",
                "rate_limit",
                "server"
            ]
        };
        this.errorStats = new Map();
        if (defaultStrategy) {
            this.defaultStrategy = {
                ...this.defaultStrategy,
                ...defaultStrategy
            };
        }
    }
    /**
   * 执行带重试的异步操作
   */ async executeWithRetry(operation, config = {}) {
        const strategy = {
            ...this.defaultStrategy,
            ...config.strategy
        };
        const startTime = Date.now();
        const attempts = [];
        let lastError;
        for(let attempt = 0; attempt <= strategy.maxRetries; attempt++){
            const attemptStartTime = Date.now();
            try {
                const result = await operation();
                const duration = Date.now() - attemptStartTime;
                attempts.push({
                    attempt: attempt + 1,
                    duration,
                    timestamp: new Date()
                });
                // 记录成功
                if (config.onSuccess) {
                    config.onSuccess(result, attempt + 1);
                }
                // 更新统计
                this.updateSuccessStats(operation.name || 'anonymous', attempt);
                return {
                    success: true,
                    data: result,
                    totalRetries: attempt,
                    totalDuration: Date.now() - startTime,
                    attempts
                };
            } catch (error) {
                const duration = Date.now() - attemptStartTime;
                const errorInfo = this.parseError(error, attempt);
                attempts.push({
                    attempt: attempt + 1,
                    error: errorInfo,
                    duration,
                    timestamp: new Date()
                });
                lastError = errorInfo;
                // 更新错误统计
                this.updateErrorStats(operation.name || 'anonymous', errorInfo);
                // 检查是否应该重试
                const shouldRetry = this.shouldRetry(errorInfo, attempt, strategy, config.shouldRetry);
                if (!shouldRetry || attempt >= strategy.maxRetries) {
                    break;
                }
                // 执行重试回调
                if (config.onRetry) {
                    config.onRetry(errorInfo, attempt + 1);
                }
                // 等待重试延迟
                const delay = this.calculateDelay(attempt, strategy);
                await this.sleep(delay);
            }
        }
        // 执行失败回调
        if (config.onFailure && lastError) {
            config.onFailure(lastError, attempts.length);
        }
        return {
            success: false,
            error: lastError,
            totalRetries: attempts.length - 1,
            totalDuration: Date.now() - startTime,
            attempts
        };
    }
    /**
   * 创建重试装饰器
   */ createRetryDecorator(config = {}) {
        return (target, propertyKey, descriptor)=>{
            const originalMethod = descriptor.value;
            descriptor.value = async function(...args) {
                const result = await this.executeWithRetry(()=>originalMethod.apply(this, args), config);
                if (result.success) {
                    return result.data;
                } else {
                    throw result.error;
                }
            };
            return descriptor;
        };
    }
    /**
   * 批量重试操作
   */ async executeBatch(operations, config = {}) {
        const { concurrency = 3, failFast = false } = config;
        const results = [];
        // 分批执行
        for(let i = 0; i < operations.length; i += concurrency){
            const batch = operations.slice(i, i + concurrency);
            const batchPromises = batch.map((operation)=>this.executeWithRetry(operation, config));
            const batchResults = await Promise.allSettled(batchPromises);
            for (const result of batchResults){
                if (result.status === 'fulfilled') {
                    results.push(result.value);
                    // 如果启用快速失败且有失败，停止执行
                    if (failFast && !result.value.success) {
                        return results;
                    }
                } else {
                    // Promise被拒绝，创建失败结果
                    results.push({
                        success: false,
                        error: this.parseError(result.reason, 0),
                        totalRetries: 0,
                        totalDuration: 0,
                        attempts: []
                    });
                    if (failFast) {
                        return results;
                    }
                }
            }
        }
        return results;
    }
    /**
   * 获取错误统计
   */ getErrorStats(operationName) {
        if (operationName) {
            return this.errorStats.get(operationName);
        }
        return Object.fromEntries(this.errorStats.entries());
    }
    /**
   * 获取所有操作的统计信息
   */ getAllStats() {
        return this.errorStats;
    }
    /**
   * 清除错误统计
   */ clearErrorStats(operationName) {
        if (operationName) {
            this.errorStats.delete(operationName);
        } else {
            this.errorStats.clear();
        }
    }
    /**
   * 创建断路器模式
   */ createCircuitBreaker(config) {
        let state = 'closed';
        let failureCount = 0;
        let lastFailureTime = 0;
        let successCount = 0;
        return async (operation)=>{
            const now = Date.now();
            // 检查是否应该重置
            if (state === 'open' && now - lastFailureTime > config.resetTimeout) {
                state = 'half-open';
                successCount = 0;
            }
            // 如果断路器开启，直接抛出错误
            if (state === 'open') {
                throw new Error('Circuit breaker is open');
            }
            try {
                const result = await operation();
                // 成功执行
                if (state === 'half-open') {
                    successCount++;
                    if (successCount >= 3) {
                        state = 'closed';
                        failureCount = 0;
                    }
                } else {
                    failureCount = 0;
                }
                return result;
            } catch (error) {
                failureCount++;
                lastFailureTime = now;
                if (failureCount >= config.failureThreshold) {
                    state = 'open';
                }
                throw error;
            }
        };
    }
    // 私有方法
    parseError(error, retryCount) {
        let type = "unknown";
        let message = 'Unknown error';
        let code;
        let statusCode;
        if (error instanceof Error) {
            message = error.message;
            // 根据错误消息判断类型
            if (error.message.includes('network') || error.message.includes('fetch')) {
                type = "network";
            } else if (error.message.includes('timeout')) {
                type = "timeout";
            } else if (error.message.includes('401') || error.message.includes('unauthorized')) {
                type = "auth";
            }
        }
        // 处理HTTP错误
        if (error.response) {
            statusCode = error.response.status;
            if (statusCode && statusCode >= 400 && statusCode < 500) {
                type = statusCode === 401 ? "auth" : "client";
            } else if (statusCode && statusCode >= 500) {
                type = "server";
            } else if (statusCode === 429) {
                type = "rate_limit";
            }
        }
        // 处理网络错误
        if (error.code) {
            code = error.code;
            if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
                type = "network";
            } else if (error.code === 'ETIMEDOUT') {
                type = "timeout";
            }
        }
        const isRetryable = this.defaultStrategy.retryableErrors.includes(type);
        return {
            type,
            message,
            code,
            statusCode,
            timestamp: new Date(),
            retryCount,
            isRetryable,
            metadata: {
                originalError: error
            }
        };
    }
    shouldRetry(error, attempt, strategy, customShouldRetry) {
        // 如果有自定义重试逻辑，优先使用
        if (customShouldRetry) {
            return customShouldRetry(error);
        }
        // 检查是否达到最大重试次数
        if (attempt >= strategy.maxRetries) {
            return false;
        }
        // 检查错误类型是否可重试
        return strategy.retryableErrors.includes(error.type);
    }
    calculateDelay(attempt, strategy) {
        let delay = strategy.baseDelay * Math.pow(strategy.backoffMultiplier, attempt);
        // 限制最大延迟
        delay = Math.min(delay, strategy.maxDelay);
        // 添加抖动
        if (strategy.jitter) {
            delay = delay * (0.5 + Math.random() * 0.5);
        }
        return Math.floor(delay);
    }
    sleep(ms) {
        return new Promise((resolve)=>setTimeout(resolve, ms));
    }
    updateErrorStats(operationName, error) {
        const stats = this.errorStats.get(operationName) || {
            count: 0,
            lastOccurred: new Date(),
            successRate: 1.0,
            averageRetries: 0
        };
        stats.count++;
        stats.lastOccurred = error.timestamp;
        stats.averageRetries = (stats.averageRetries * (stats.count - 1) + error.retryCount) / stats.count;
        this.errorStats.set(operationName, stats);
    }
    updateSuccessStats(operationName, retries) {
        const stats = this.errorStats.get(operationName) || {
            count: 0,
            lastOccurred: new Date(),
            successRate: 1.0,
            averageRetries: 0
        };
        // 更新成功率（简化计算）
        const totalOperations = stats.count + 1;
        stats.successRate = (stats.successRate * stats.count + 1) / totalOperations;
        stats.averageRetries = (stats.averageRetries * stats.count + retries) / totalOperations;
        this.errorStats.set(operationName, stats);
    }
}
const errorRetryManager = new ErrorRetryManager();
const retry = (config)=>errorRetryManager.createRetryDecorator(config);

//# sourceMappingURL=data:application/json;base64,