d27ade597565787f28cf5dcc98a6861c
// @ts-nocheck
/**
 * @file lib/database/index.ts
 * @description 数据库连接管理和Prisma客户端初始化
 * @author zk-agent开发团队
 * @lastUpdate 2024-12-19
 * @updateLog
 *   - 2024-12-19 初始创建数据库连接服务
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DatabaseService: function() {
        return DatabaseService;
    },
    cleanup: function() {
        return cleanup;
    },
    prisma: function() {
        return prisma;
    }
});
const _client = require("@prisma/client");
// 创建Prisma客户端实例
class DatabaseService {
    static getInstance() {
        if (!DatabaseService.instance) {
            DatabaseService.instance = globalThis.__prisma ?? new _client.PrismaClient({
                log: process.env.NODE_ENV === 'development' ? [
                    'query',
                    'error',
                    'warn'
                ] : [
                    'error'
                ],
                errorFormat: 'pretty'
            });
            if (process.env.NODE_ENV !== 'production') {
                globalThis.__prisma = DatabaseService.instance;
            }
        }
        return DatabaseService.instance;
    }
    static async connect() {
        try {
            await DatabaseService.getInstance().$connect();
            console.log('✅ Database connected successfully');
        } catch (error) {
            console.error('❌ Database connection failed:', error);
            throw error;
        }
    }
    static async disconnect() {
        try {
            await DatabaseService.getInstance().$disconnect();
            console.log('✅ Database disconnected successfully');
        } catch (error) {
            console.error('❌ Database disconnection failed:', error);
            throw error;
        }
    }
    static async healthCheck() {
        try {
            await DatabaseService.getInstance().$queryRaw`SELECT 1`;
            return true;
        } catch (error) {
            console.error('❌ Database health check failed:', error);
            return false;
        }
    }
    static async runTransaction(callback) {
        const prisma = DatabaseService.getInstance();
        return await prisma.$transaction(callback);
    }
}
const prisma = DatabaseService.getInstance();
const cleanup = async ()=>{
    await DatabaseService.disconnect();
};
// 进程退出时自动清理
if (typeof process !== 'undefined') {
    process.on('beforeExit', cleanup);
    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6XFx6ay1hZ2VudFxcbGliXFxkYXRhYmFzZVxcaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLW5vY2hlY2tcbi8qKlxyXG4gKiBAZmlsZSBsaWIvZGF0YWJhc2UvaW5kZXgudHNcclxuICogQGRlc2NyaXB0aW9uIOaVsOaNruW6k+i/nuaOpeeuoeeQhuWSjFByaXNtYeWuouaIt+err+WIneWni+WMllxyXG4gKiBAYXV0aG9yIHprLWFnZW505byA5Y+R5Zui6ZifXHJcbiAqIEBsYXN0VXBkYXRlIDIwMjQtMTItMTlcclxuICogQHVwZGF0ZUxvZ1xyXG4gKiAgIC0gMjAyNC0xMi0xOSDliJ3lp4vliJvlu7rmlbDmja7lupPov57mjqXmnI3liqFcclxuICovXHJcblxyXG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XHJcblxyXG4vLyDlhajlsYBQcmlzbWHlrqLmiLfnq6/nsbvlnovlo7DmmI5cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIHZhciBfX3ByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG4vLyDliJvlu7pQcmlzbWHlrqLmiLfnq6/lrp7kvotcclxuY2xhc3MgRGF0YWJhc2VTZXJ2aWNlIHtcclxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUHJpc21hQ2xpZW50O1xyXG5cclxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogUHJpc21hQ2xpZW50IHtcclxuICAgIGlmICghRGF0YWJhc2VTZXJ2aWNlLmluc3RhbmNlKSB7XHJcbiAgICAgIERhdGFiYXNlU2VydmljZS5pbnN0YW5jZSA9IGdsb2JhbFRoaXMuX19wcmlzbWEgPz8gbmV3IFByaXNtYUNsaWVudCh7XHJcbiAgICAgICAgbG9nOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IFsncXVlcnknLCAnZXJyb3InLCAnd2FybiddIDogWydlcnJvciddLFxyXG4gICAgICAgIGVycm9yRm9ybWF0OiAncHJldHR5JyxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIGdsb2JhbFRoaXMuX19wcmlzbWEgPSBEYXRhYmFzZVNlcnZpY2UuaW5zdGFuY2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gRGF0YWJhc2VTZXJ2aWNlLmluc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGNvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBEYXRhYmFzZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS4kY29ubmVjdCgpO1xyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIERhdGFiYXNlIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHknKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGRpc2Nvbm5lY3QoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBEYXRhYmFzZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS4kZGlzY29ubmVjdCgpO1xyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIERhdGFiYXNlIGRpc2Nvbm5lY3RlZCBzdWNjZXNzZnVsbHknKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBEYXRhYmFzZSBkaXNjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGhlYWx0aENoZWNrKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgRGF0YWJhc2VTZXJ2aWNlLmdldEluc3RhbmNlKCkuJHF1ZXJ5UmF3YFNFTEVDVCAxYDtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRGF0YWJhc2UgaGVhbHRoIGNoZWNrIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBydW5UcmFuc2FjdGlvbjxUPihcclxuICAgIGNhbGxiYWNrOiAocHJpc21hOiBQcmlzbWFDbGllbnQpID0+IFByb21pc2U8VD5cclxuICApOiBQcm9taXNlPFQ+IHtcclxuICAgIGNvbnN0IHByaXNtYSA9IERhdGFiYXNlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgcmV0dXJuIGF3YWl0IHByaXNtYS4kdHJhbnNhY3Rpb24oY2FsbGJhY2spO1xyXG4gIH1cclxufVxyXG5cclxuLy8g5a+85Ye6UHJpc21h5a6i5oi356uv5a6e5L6LXHJcbmV4cG9ydCBjb25zdCBwcmlzbWEgPSBEYXRhYmFzZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbi8vIOWvvOWHuuaVsOaNruW6k+acjeWKoVxyXG5leHBvcnQgeyBEYXRhYmFzZVNlcnZpY2UgfTtcclxuXHJcbi8vIOa4heeQhuWHveaVsO+8iOWcqOW6lOeUqOWFs+mXreaXtuiwg+eUqO+8iVxyXG5leHBvcnQgY29uc3QgY2xlYW51cCA9IGFzeW5jICgpID0+IHtcclxuICBhd2FpdCBEYXRhYmFzZVNlcnZpY2UuZGlzY29ubmVjdCgpO1xyXG59O1xyXG5cclxuLy8g6L+b56iL6YCA5Ye65pe26Ieq5Yqo5riF55CGXHJcbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgY2xlYW51cCk7XHJcbiAgcHJvY2Vzcy5vbignU0lHSU5UJywgY2xlYW51cCk7XHJcbiAgcHJvY2Vzcy5vbignU0lHVEVSTScsIGNsZWFudXApO1xyXG59ICJdLCJuYW1lcyI6WyJEYXRhYmFzZVNlcnZpY2UiLCJjbGVhbnVwIiwicHJpc21hIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsImdsb2JhbFRoaXMiLCJfX3ByaXNtYSIsIlByaXNtYUNsaWVudCIsImxvZyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImVycm9yRm9ybWF0IiwiY29ubmVjdCIsIiRjb25uZWN0IiwiY29uc29sZSIsImVycm9yIiwiZGlzY29ubmVjdCIsIiRkaXNjb25uZWN0IiwiaGVhbHRoQ2hlY2siLCIkcXVlcnlSYXciLCJydW5UcmFuc2FjdGlvbiIsImNhbGxiYWNrIiwiJHRyYW5zYWN0aW9uIiwib24iXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFDZDs7Ozs7OztDQU9DOzs7Ozs7Ozs7OztJQXNFUUEsZUFBZTtlQUFmQTs7SUFHSUMsT0FBTztlQUFQQTs7SUFOQUMsTUFBTTtlQUFOQTs7O3dCQWpFZ0I7QUFPN0IsZ0JBQWdCO0FBQ2hCLE1BQU1GO0lBR0osT0FBT0csY0FBNEI7UUFDakMsSUFBSSxDQUFDSCxnQkFBZ0JJLFFBQVEsRUFBRTtZQUM3QkosZ0JBQWdCSSxRQUFRLEdBQUdDLFdBQVdDLFFBQVEsSUFBSSxJQUFJQyxvQkFBWSxDQUFDO2dCQUNqRUMsS0FBS0MsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssZ0JBQWdCO29CQUFDO29CQUFTO29CQUFTO2lCQUFPLEdBQUc7b0JBQUM7aUJBQVE7Z0JBQ3BGQyxhQUFhO1lBQ2Y7WUFFQSxJQUFJSCxRQUFRQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxjQUFjO2dCQUN6Q04sV0FBV0MsUUFBUSxHQUFHTixnQkFBZ0JJLFFBQVE7WUFDaEQ7UUFDRjtRQUVBLE9BQU9KLGdCQUFnQkksUUFBUTtJQUNqQztJQUVBLGFBQWFTLFVBQXlCO1FBQ3BDLElBQUk7WUFDRixNQUFNYixnQkFBZ0JHLFdBQVcsR0FBR1csUUFBUTtZQUM1Q0MsUUFBUVAsR0FBRyxDQUFDO1FBQ2QsRUFBRSxPQUFPUSxPQUFPO1lBQ2RELFFBQVFDLEtBQUssQ0FBQyxpQ0FBaUNBO1lBQy9DLE1BQU1BO1FBQ1I7SUFDRjtJQUVBLGFBQWFDLGFBQTRCO1FBQ3ZDLElBQUk7WUFDRixNQUFNakIsZ0JBQWdCRyxXQUFXLEdBQUdlLFdBQVc7WUFDL0NILFFBQVFQLEdBQUcsQ0FBQztRQUNkLEVBQUUsT0FBT1EsT0FBTztZQUNkRCxRQUFRQyxLQUFLLENBQUMsb0NBQW9DQTtZQUNsRCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQSxhQUFhRyxjQUFnQztRQUMzQyxJQUFJO1lBQ0YsTUFBTW5CLGdCQUFnQkcsV0FBVyxHQUFHaUIsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUN2RCxPQUFPO1FBQ1QsRUFBRSxPQUFPSixPQUFPO1lBQ2RELFFBQVFDLEtBQUssQ0FBQyxtQ0FBbUNBO1lBQ2pELE9BQU87UUFDVDtJQUNGO0lBRUEsYUFBYUssZUFDWEMsUUFBOEMsRUFDbEM7UUFDWixNQUFNcEIsU0FBU0YsZ0JBQWdCRyxXQUFXO1FBQzFDLE9BQU8sTUFBTUQsT0FBT3FCLFlBQVksQ0FBQ0Q7SUFDbkM7QUFDRjtBQUdPLE1BQU1wQixTQUFTRixnQkFBZ0JHLFdBQVc7QUFNMUMsTUFBTUYsVUFBVTtJQUNyQixNQUFNRCxnQkFBZ0JpQixVQUFVO0FBQ2xDO0FBRUEsWUFBWTtBQUNaLElBQUksT0FBT1IsWUFBWSxhQUFhO0lBQ2xDQSxRQUFRZSxFQUFFLENBQUMsY0FBY3ZCO0lBQ3pCUSxRQUFRZSxFQUFFLENBQUMsVUFBVXZCO0lBQ3JCUSxRQUFRZSxFQUFFLENBQUMsV0FBV3ZCO0FBQ3hCIn0=