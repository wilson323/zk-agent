{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\poster.test.ts"],"sourcesContent":["/**\n * 海报生成API路由错误处理测试\n * 测试海报生成端点的各种错误场景和恢复机制\n */\n\nimport { NextRequest } from 'next/server';\nimport { POST } from '../../../app/api/poster/generate/route';\nimport { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\nimport { PosterGenerationFailed, PosterResourceLimit } from '../../../lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/poster-generator', () => ({\n  generatePoster: jest.fn(),\n  validateTemplate: jest.fn(),\n  checkResourceLimits: jest.fn()\n}));\n\njest.mock('../../../lib/storage/file-manager', () => ({\n  uploadFile: jest.fn(),\n  deleteFile: jest.fn(),\n  getFileUrl: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  getUserLimits: jest.fn()\n}));\n\ndescribe('Poster Generation API Error Handling', () => {\n  let mockRequest: NextRequest;\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    const requestBody = {\n      template: 'security-awareness',\n      title: 'Test Poster',\n      content: 'Test content',\n      style: {\n        theme: 'corporate',\n        colors: ['#1f2937', '#3b82f6']\n      }\n    };\n    \n    mockRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer valid-token'\n      }\n    });\n    \n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('Template Validation Errors', () => {\n    it('should handle invalid template format', async () => {\n      const { validateTemplate } = require('../../../lib/services/poster-generator');\n      validateTemplate.mockRejectedValue(new Error('Invalid template format'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid template format');\n    });\n\n    it('should handle missing required template fields', async () => {\n      const invalidRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({ template: 'security-awareness' }), // Missing required fields\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(invalidRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('title');\n    });\n\n    it('should handle unsupported template type', async () => {\n      const { validateTemplate } = require('../../../lib/services/poster-generator');\n      validateTemplate.mockRejectedValue(new Error('Template type not supported'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Template type not supported');\n    });\n  });\n\n  describe('Resource Limit Errors', () => {\n    it('should handle memory limit exceeded', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const resourceError = new PosterResourceLimit(\n        'Memory limit exceeded during poster generation',\n        { memoryUsage: '512MB', limit: '256MB' }\n      );\n      generatePoster.mockRejectedValue(resourceError);\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.code).toBe('POSTER_RESOURCE_LIMIT');\n      expect(data.error.message).toContain('Memory limit exceeded');\n      expect(data.error.retryAfter).toBeDefined();\n    });\n\n    it('should handle concurrent generation limit', async () => {\n      const { checkResourceLimits } = require('../../../lib/services/poster-generator');\n      checkResourceLimits.mockRejectedValue(new Error('Too many concurrent poster generations'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.message).toContain('Too many concurrent');\n    });\n\n    it('should handle storage quota exceeded', async () => {\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      uploadFile.mockRejectedValue(new Error('Storage quota exceeded'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(413);\n      expect(data.error.message).toContain('Storage quota exceeded');\n    });\n  });\n\n  describe('Generation Process Errors', () => {\n    it('should handle poster generation timeout', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Generation timeout')), 100)\n        )\n      );\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Generation timeout');\n    });\n\n    it('should handle rendering engine failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const generationError = new PosterGenerationFailed(\n        'Rendering engine crashed',\n        new Error('Canvas rendering failed'),\n        { template: 'security-awareness', step: 'rendering' }\n      );\n      generatePoster.mockRejectedValue(generationError);\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.code).toBe('POSTER_GENERATION_FAILED');\n      expect(data.error.message).toContain('Rendering engine crashed');\n    });\n\n    it('should handle image processing failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Image processing failed'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Image processing failed');\n    });\n\n    it('should handle font loading failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Failed to load custom font'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to load custom font');\n    });\n  });\n\n  describe('Authentication and Authorization Errors', () => {\n    it('should handle missing authentication token', async () => {\n      const unauthRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({ template: 'test' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(unauthRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n    });\n\n    it('should handle invalid authentication token', async () => {\n      const { validateSession } = require('../../../lib/auth/session');\n      validateSession.mockRejectedValue(new Error('Invalid token'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Invalid token');\n    });\n\n    it('should handle expired authentication token', async () => {\n      const { validateSession } = require('../../../lib/auth/session');\n      validateSession.mockRejectedValue(new Error('Token expired'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Token expired');\n    });\n\n    it('should handle insufficient permissions', async () => {\n      const { getUserLimits } = require('../../../lib/auth/session');\n      getUserLimits.mockResolvedValue({ canGeneratePosters: false });\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n  });\n\n  describe('File Storage Errors', () => {\n    it('should handle file upload failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      \n      generatePoster.mockResolvedValue({ imageBuffer: Buffer.from('test') });\n      uploadFile.mockRejectedValue(new Error('Upload failed'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Upload failed');\n    });\n\n    it('should handle storage service unavailable', async () => {\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      uploadFile.mockRejectedValue(new Error('Storage service unavailable'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Storage service unavailable');\n    });\n\n    it('should handle file corruption during upload', async () => {\n      const { uploadFile } = require('../../../lib/storage/file-manager');\n      uploadFile.mockRejectedValue(new Error('File corruption detected'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('File corruption detected');\n    });\n  });\n\n  describe('Input Validation Errors', () => {\n    it('should handle malformed JSON request', async () => {\n      const malformedRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: '{invalid json}',\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(malformedRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid JSON');\n    });\n\n    it('should handle oversized request payload', async () => {\n      const largeContent = 'x'.repeat(10000000); // 10MB string\n      const largeRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({ template: 'test', content: largeContent }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(largeRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(413);\n      expect(data.error.message).toContain('Payload too large');\n    });\n\n    it('should handle invalid color format', async () => {\n      const invalidColorRequest = new NextRequest('http://localhost:3000/api/poster/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          template: 'security-awareness',\n          title: 'Test',\n          content: 'Test',\n          style: { colors: ['invalid-color'] }\n        }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(invalidColorRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid color format');\n    });\n  });\n\n  describe('Error Recovery and Retry Logic', () => {\n    it('should implement exponential backoff for retries', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      let attemptCount = 0;\n      generatePoster.mockImplementation(() => {\n        attemptCount++;\n        if (attemptCount < 3) {\n          return Promise.reject(new Error('Temporary failure'));\n        }\n        return Promise.resolve({ imageBuffer: Buffer.from('success') });\n      });\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(attemptCount).toBe(3);\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n    });\n\n    it('should provide fallback template on generation failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Template rendering failed'));\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data.fallbackUsed).toBe(true);\n    });\n\n    it('should clean up resources on failure', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      const { deleteFile } = require('../../../lib/storage/file-manager');\n      \n      generatePoster.mockRejectedValue(new Error('Generation failed'));\n\n      await POST(mockRequest);\n\n      expect(deleteFile).toHaveBeenCalled();\n    });\n  });\n\n  describe('Circuit Breaker Integration', () => {\n    it('should trigger circuit breaker after multiple failures', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockRejectedValue(new Error('Service failure'));\n\n      // Simulate multiple failures\n      for (let i = 0; i < 5; i++) {\n        await POST(mockRequest);\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should return circuit breaker response when open', async () => {\n      // Force circuit breaker to open state\n      errorHandler['circuitBreakerOpen'] = true;\n      errorHandler['circuitBreakerOpen'] = true;\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.code).toBe('CIRCUIT_BREAKER_OPEN');\n    });\n  });\n\n  describe('Performance and Monitoring', () => {\n    it('should include generation metrics in response', async () => {\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      generatePoster.mockResolvedValue({\n        imageBuffer: Buffer.from('test'),\n        metrics: {\n          generationTime: 1500,\n          memoryUsed: '128MB',\n          templateComplexity: 'medium'\n        }\n      });\n\n      const response = await POST(mockRequest);\n      const data = await response.json();\n\n      expect(data.data.metrics).toBeDefined();\n      expect(data.data.metrics.generationTime).toBe(1500);\n    });\n\n    it('should log performance warnings for slow generation', async () => {\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n      const { generatePoster } = require('../../../lib/services/poster-generator');\n      \n      generatePoster.mockImplementation(() => \n        new Promise(resolve => \n          setTimeout(() => resolve({ imageBuffer: Buffer.from('test') }), 5000)\n        )\n      );\n\n      await POST(mockRequest);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Slow poster generation detected')\n      );\n      consoleSpy.mockRestore();\n    });\n  });\n});"],"names":["jest","mock","generatePoster","fn","validateTemplate","checkResourceLimits","uploadFile","deleteFile","getFileUrl","validateSession","getUserLimits","describe","mockRequest","errorHandler","beforeEach","requestBody","template","title","content","style","theme","colors","NextRequest","method","body","JSON","stringify","headers","GlobalErrorHandler","getInstance","clearAllMocks","it","require","mockRejectedValue","Error","response","POST","data","json","expect","status","toBe","success","error","code","message","toContain","invalidRequest","details","resourceError","PosterResourceLimit","memoryUsage","limit","retryAfter","toBeDefined","mockImplementation","Promise","_","reject","setTimeout","generationError","PosterGenerationFailed","step","unauthRequest","mockResolvedValue","canGeneratePosters","imageBuffer","Buffer","from","malformedRequest","largeContent","repeat","largeRequest","invalidColorRequest","attemptCount","resolve","fallbackUsed","toHaveBeenCalled","i","stats","getErrorStats","errorCount","toBeGreaterThan","metrics","generationTime","memoryUsed","templateComplexity","consoleSpy","spyOn","console","toHaveBeenCalledWith","stringContaining","mockRestore"],"mappings":"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"}