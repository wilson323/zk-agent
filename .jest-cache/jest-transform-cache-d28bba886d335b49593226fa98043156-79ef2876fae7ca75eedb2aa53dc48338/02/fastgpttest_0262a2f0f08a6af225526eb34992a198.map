{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\fastgpt.test.ts"],"sourcesContent":["/**\n * @file fastgpt.test.ts\n * @description FastGPT相关API路由错误处理测试\n * @author ZK-Agent Team\n * @date 2025-01-27\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { NextRequest } from 'next/server';\nimport { POST as chatHandler } from '@/app/api/fastgpt/chat/route';\nimport { POST as testConnectionHandler } from '@/app/api/fastgpt/test-connection/route';\nimport { GET as healthHandler } from '@/app/api/fastgpt/health/route';\nimport { POST as initChatHandler } from '@/app/api/fastgpt/init-chat/route';\nimport { POST as feedbackHandler } from '@/app/api/fastgpt/feedback/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n\ndescribe('FastGPT API Routes Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    (errorHandler as any).reset?.();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    (errorHandler as any).reset?.();\n  });\n\n  describe('Chat Route (/api/fastgpt/chat)', () => {\n    it('should handle missing API key error', async () => {\n      // Mock missing API key\n      const originalApiKey = process.env['FASTGPT_API_KEY'];\n      delete process.env['FASTGPT_API_KEY'];\n\n      try {\n        const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            messages: [{ role: 'user', content: 'Hello' }]\n          })\n        });\n\n        const response = await chatHandler(request);\n        const data = await response.json();\n\n        expect(response.status).toBe(500);\n        expect(data.error).toBeDefined();\n        expect(data.code).toBe('CONFIGURATION_ERROR');\n      } finally {\n        if (originalApiKey) {\n          process.env['FASTGPT_API_KEY'] = originalApiKey;\n        }\n      }\n    });\n\n    it('should handle invalid message format error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          messages: 'invalid format'\n        })\n      });\n\n      const response = await chatHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle FastGPT API timeout error', async () => {\n      // Mock fetch to simulate timeout\n      global.fetch = vi.fn().mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Request timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          messages: [{ role: 'user', content: 'Hello' }]\n        })\n      });\n\n      const response = await chatHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('TIMEOUT_ERROR');\n    });\n\n    it('should handle FastGPT API rate limit error', async () => {\n      // Mock fetch to simulate rate limit\n      global.fetch = vi.fn().mockResolvedValue({\n        ok: false,\n        status: 429,\n        json: () => Promise.resolve({ error: 'Rate limit exceeded' })\n      } as Response);\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          messages: [{ role: 'user', content: 'Hello' }]\n        })\n      });\n\n      const response = await chatHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('RATE_LIMIT_ERROR');\n    });\n\n    it('should handle FastGPT API server error', async () => {\n      // Mock fetch to simulate server error\n      global.fetch = vi.fn().mockResolvedValue({\n        ok: false,\n        status: 500,\n        json: () => Promise.resolve({ error: 'Internal server error' })\n      } as Response);\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          messages: [{ role: 'user', content: 'Hello' }]\n        })\n      });\n\n      const response = await chatHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(502);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('EXTERNAL_API_ERROR');\n    });\n  });\n\n  describe('Test Connection Route (/api/fastgpt/test-connection)', () => {\n    it('should handle missing base URL error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/test-connection', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          useProxy: false\n        })\n      });\n\n      const response = await testConnectionHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle invalid URL format error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/test-connection', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          baseUrl: 'invalid-url',\n          useProxy: false\n        })\n      });\n\n      const response = await testConnectionHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle connection refused error', async () => {\n      // Mock fetch to simulate connection refused\n      global.fetch = vi.fn().mockRejectedValue(new Error('ECONNREFUSED'));\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/test-connection', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          baseUrl: 'https://unreachable-server.com',\n          useProxy: false\n        })\n      });\n\n      const response = await testConnectionHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('CONNECTION_ERROR');\n    });\n  });\n\n  describe('Health Route (/api/fastgpt/health)', () => {\n    it('should handle service unavailable error', async () => {\n      // Mock fetch to simulate service unavailable\n      global.fetch = vi.fn().mockResolvedValue({\n        ok: false,\n        status: 503,\n        json: () => Promise.resolve({ error: 'Service unavailable' })\n      } as Response);\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/health', {\n        method: 'GET'\n      });\n\n      const response = await healthHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('SERVICE_UNAVAILABLE');\n    });\n  });\n\n  describe('Init Chat Route (/api/fastgpt/init-chat)', () => {\n    it('should handle missing chat configuration error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/init-chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n\n      const response = await initChatHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n  });\n\n  describe('Feedback Route (/api/fastgpt/feedback)', () => {\n    it('should handle missing feedback data error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/feedback', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n\n      const response = await feedbackHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle invalid rating value error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/feedback', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          rating: 10, // Invalid rating (should be 1-5)\n          comment: 'Test feedback'\n        })\n      });\n\n      const response = await feedbackHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n  });\n\n  describe('Error Recovery and Retry Logic', () => {\n    it('should implement exponential backoff for retries', async () => {\n      let callCount = 0;\n      global.fetch = vi.fn().mockImplementation(() => {\n        callCount++;\n        if (callCount < 3) {\n          return Promise.reject(new Error('Temporary failure'));\n        }\n        return Promise.resolve({\n          ok: true,\n          json: () => Promise.resolve({ success: true })\n        } as Response);\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          messages: [{ role: 'user', content: 'Hello' }]\n        })\n      });\n\n      const response = await chatHandler(request);\n      \n      expect(callCount).toBe(3);\n      expect(response.status).toBe(200);\n    });\n\n    it('should fallback to cached response on API failure', async () => {\n      // Mock persistent API failure\n      global.fetch = vi.fn().mockRejectedValue(new Error('API unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          messages: [{ role: 'user', content: 'Hello' }]\n        })\n      });\n\n      const response = await chatHandler(request);\n      const data = await response.json();\n\n      // Should return fallback response instead of error\n      expect(response.status).toBe(200);\n      expect(data.fallback).toBe(true);\n    });\n  });\n\n  describe('Circuit Breaker Integration', () => {\n    it('should open circuit breaker after consecutive failures', async () => {\n      // Configure low threshold for testing\n      const originalThreshold = (errorHandler as any).errorThreshold;\n      Object.defineProperty(errorHandler, 'errorThreshold', { value: 2, writable: true, configurable: true });\n\n      try {\n        // Mock persistent failures\n        global.fetch = vi.fn().mockRejectedValue(new Error('API failure'));\n\n        // Trigger multiple failures\n        for (let i = 0; i < 3; i++) {\n          const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              messages: [{ role: 'user', content: 'Hello' }]\n            })\n          });\n          await chatHandler(request).catch(() => {});\n        }\n\n        expect(errorHandler.isCircuitBreakerOpen()).toBe(true);\n      } finally {\n        Object.defineProperty(errorHandler, 'errorThreshold', { value: originalThreshold, writable: true, configurable: true });\n      }\n    });\n\n    it('should return circuit breaker response when open', async () => {\n      // Open circuit breaker\n      Object.defineProperty(errorHandler, 'circuitBreakerOpen', { value: true, writable: true, configurable: true });\n\n      const request = new NextRequest('http://localhost:3000/api/fastgpt/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          messages: [{ role: 'user', content: 'Hello' }]\n        })\n      });\n\n      const response = await chatHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('CIRCUIT_BREAKER_OPEN');\n    });\n  });\n});"],"names":["describe","errorHandler","beforeEach","GlobalErrorHandler","getInstance","reset","vi","clearAllMocks","afterEach","it","originalApiKey","process","env","request","NextRequest","method","headers","body","JSON","stringify","messages","role","content","response","chatHandler","data","json","expect","status","toBe","error","toBeDefined","code","global","fetch","fn","mockImplementation","Promise","_","reject","setTimeout","Error","mockResolvedValue","ok","resolve","useProxy","testConnectionHandler","baseUrl","mockRejectedValue","healthHandler","initChatHandler","feedbackHandler","rating","comment","callCount","success","fallback","originalThreshold","errorThreshold","Object","defineProperty","value","writable","configurable","i","catch","isCircuitBreakerOpen"],"mappings":"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"}