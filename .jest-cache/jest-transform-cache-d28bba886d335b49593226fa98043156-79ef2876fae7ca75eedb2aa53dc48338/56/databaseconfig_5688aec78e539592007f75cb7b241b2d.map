{"version":3,"sources":["E:\\zk-agent\\config\\database.config.js"],"sourcesContent":["/**\r\n * @file database.config.js\r\n * @description 数据库配置 - 支持生产和测试环境\r\n * @author ZK-Agent Team\r\n * @date 2025-05-25\r\n */\r\n\r\nconst databaseConfig = {\r\n  // 生产数据库配置 (zkagent1)\r\n  production: {\r\n    host: validateEnvVar('DB_HOST', 'localhost'),\r\n    port: parseInt(validateEnvVar('DB_PORT', '5432')),\r\n    database: validateEnvVar('DB_NAME', 'zkagent_dev'),\r\n    username: validateEnvVar('DB_USER', 'postgres'),\r\n    password: validateEnvVar('DB_PASSWORD', '123456'),\r\n    dialect: 'postgresql',\r\n    logging: process.env.NODE_ENV === 'production' ? false : console.log,\r\n    pool: {\r\n      max: parseInt(process.env.DB_POOL_MAX) || 50,\r\n      min: parseInt(process.env.DB_POOL_MIN) || 10,\r\n      acquire: parseInt(process.env.DB_POOL_ACQUIRE) || 60000,\r\n      idle: parseInt(process.env.DB_POOL_IDLE) || 20000,\r\n      evict: parseInt(process.env.DB_POOL_EVICT) || 1000,\r\n      handleDisconnects: true\r\n    },\r\n    ssl: process.env.DB_SSL === 'true' ? {\r\n      rejectUnauthorized: process.env.DB_SSL_REJECT_UNAUTHORIZED !== 'false',\r\n      ca: process.env.DB_SSL_CA,\r\n      cert: process.env.DB_SSL_CERT,\r\n      key: process.env.DB_SSL_KEY\r\n    } : false,\r\n    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:123456@localhost:5432/zkagent1',\r\n    // 连接超时和重试配置\r\n    connectTimeout: parseInt(process.env.DB_CONNECT_TIMEOUT) || 20000,\r\n    requestTimeout: parseInt(process.env.DB_REQUEST_TIMEOUT) || 15000,\r\n    cancelTimeout: parseInt(process.env.DB_CANCEL_TIMEOUT) || 5000,\r\n    // 健康检查配置\r\n    healthCheck: {\r\n      enabled: process.env.DB_HEALTH_CHECK !== 'false',\r\n      interval: parseInt(process.env.DB_HEALTH_CHECK_INTERVAL) || 30000,\r\n      timeout: parseInt(process.env.DB_HEALTH_CHECK_TIMEOUT) || 5000\r\n    }\r\n  },\r\n\r\n  // 测试数据库配置 (zkagent2)\r\n  test: {\r\n    host: 'localhost',\r\n    port: 5432,\r\n    database: 'zkagent2',\r\n    username: 'postgres',\r\n    password: '123456',\r\n    dialect: 'postgresql',\r\n    logging: false,\r\n    pool: {\r\n      max: 10,\r\n      min: 2,\r\n      acquire: 30000,\r\n      idle: 10000\r\n    },\r\n    ssl: false,\r\n    connectionString: 'postgresql://postgres:123456@localhost:5432/zkagent2'\r\n  },\r\n\r\n  // 开发环境配置\r\n  development: {\r\n    host: 'localhost',\r\n    port: 5432,\r\n    database: 'zkagent_dev',\r\n    username: 'postgres',\r\n    password: '123456',\r\n    dialect: 'postgresql',\r\n    logging: console.log,\r\n    pool: {\r\n      max: 5,\r\n      min: 1,\r\n      acquire: 30000,\r\n      idle: 10000\r\n    },\r\n    ssl: false,\r\n    connectionString: 'postgresql://postgres:123456@localhost:5432/zkagent_dev'\r\n  }\r\n};\r\n\r\n/**\r\n * 获取当前环境的数据库配置\r\n * @returns {Object} 数据库配置对象\r\n */\r\nfunction getDatabaseConfig() {\r\n  const env = process.env.NODE_ENV || 'development';\r\n  const config = databaseConfig[env];\r\n  \r\n  if (!config) {\r\n    throw new Error(`未找到环境 ${env} 的数据库配置`);\r\n  }\r\n  \r\n  return config;\r\n}\r\n\r\n/**\r\n * 获取数据库连接字符串\r\n * @param {string} environment - 环境名称 (production, test, development)\r\n * @returns {string} 数据库连接字符串\r\n */\r\nfunction getDatabaseUrl(environment = null) {\r\n  const env = environment || process.env.NODE_ENV || 'development';\r\n  const config = databaseConfig[env];\r\n  \r\n  if (!config) {\r\n    throw new Error(`未找到环境 ${env} 的数据库配置`);\r\n  }\r\n  \r\n  return config.connectionString;\r\n}\r\n\r\n/**\r\n * 验证数据库连接配置\r\n * @param {string} environment - 环境名称\r\n * @returns {boolean} 配置是否有效\r\n */\r\nfunction validateDatabaseConfig(environment) {\r\n  try {\r\n    const config = databaseConfig[environment];\r\n    return !!(config && config.host && config.port && config.database && config.username);\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  databaseConfig,\r\n  getDatabaseConfig,\r\n  getDatabaseUrl,\r\n  validateDatabaseConfig\r\n};"],"names":["databaseConfig","production","host","validateEnvVar","port","parseInt","database","username","password","dialect","logging","process","env","NODE_ENV","console","log","pool","max","DB_POOL_MAX","min","DB_POOL_MIN","acquire","DB_POOL_ACQUIRE","idle","DB_POOL_IDLE","evict","DB_POOL_EVICT","handleDisconnects","ssl","DB_SSL","rejectUnauthorized","DB_SSL_REJECT_UNAUTHORIZED","ca","DB_SSL_CA","cert","DB_SSL_CERT","key","DB_SSL_KEY","connectionString","DATABASE_URL","connectTimeout","DB_CONNECT_TIMEOUT","requestTimeout","DB_REQUEST_TIMEOUT","cancelTimeout","DB_CANCEL_TIMEOUT","healthCheck","enabled","DB_HEALTH_CHECK","interval","DB_HEALTH_CHECK_INTERVAL","timeout","DB_HEALTH_CHECK_TIMEOUT","test","development","getDatabaseConfig","config","Error","getDatabaseUrl","environment","validateDatabaseConfig","error","module","exports"],"mappings":"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"}