{"version":3,"sources":["E:\\zk-agent\\lib\\database\\enhanced-connection.ts"],"sourcesContent":["/**\n * @file Enhanced Database Connection Manager\n * @description 增强的数据库连接管理器，支持连接池优化、自动重连和错误恢复\n * @author ZK-Agent Team A\n * @date 2024-12-19\n */\n\nimport { PrismaClient } from '@prisma/client'\nimport { EventEmitter } from 'events'\nimport type { PoolConfiguration } from './pool-optimizer'\nimport type { RecoveryConfiguration } from './error-recovery'\n\n// 连接池配置接口\nexport interface ConnectionPoolConfig {\n  maxConnections: number\n  minConnections: number\n  acquireTimeoutMillis: number\n  idleTimeoutMillis: number\n  evictionRunIntervalMillis: number\n  connectTimeoutMillis: number\n  requestTimeoutMillis: number\n  cancelTimeoutMillis: number\n}\n\n// 重连配置接口\nexport interface ReconnectionConfig {\n  enabled: boolean\n  maxRetries: number\n  retryDelayMs: number\n  backoffMultiplier: number\n  maxRetryDelayMs: number\n  jitterMs: number\n}\n\n// 健康检查配置接口\nexport interface HealthCheckConfig {\n  enabled: boolean\n  intervalMs: number\n  timeoutMs: number\n  failureThreshold: number\n  recoveryThreshold: number\n}\n\n// 连接状态枚举\nexport enum ConnectionState {\n  DISCONNECTED = 'disconnected',\n  CONNECTING = 'connecting',\n  CONNECTED = 'connected',\n  RECONNECTING = 'reconnecting',\n  FAILED = 'failed'\n}\n\n// 连接统计信息\nexport interface ConnectionStats {\n  state: ConnectionState\n  connectedAt?: Date\n  lastError?: Error\n  reconnectAttempts: number\n  totalQueries: number\n  failedQueries: number\n  avgLatency: number\n  uptime: number\n}\n\n// 数据库事件类型\nexport interface DatabaseEvents {\n  connected: () => void\n  disconnected: (error?: Error) => void\n  reconnecting: (attempt: number) => void\n  reconnected: () => void\n  error: (error: Error) => void\n  healthCheck: (healthy: boolean) => void\n}\n\n/**\n * 增强的数据库连接管理器\n */\nexport class EnhancedDatabaseConnection extends EventEmitter {\n  private prisma: PrismaClient | null = null\n  private state: ConnectionState = ConnectionState.DISCONNECTED\n  private reconnectTimer: NodeJS.Timeout | null = null\n  private healthCheckTimer: NodeJS.Timeout | null = null\n  private stats: ConnectionStats\n  private config: {\n    pool: ConnectionPoolConfig\n    reconnection: ReconnectionConfig\n    healthCheck: HealthCheckConfig\n  }\n  private poolConfig: Partial<PoolConfiguration> = {}\n  private recoveryConfig: Partial<RecoveryConfiguration> = {}\n\n  constructor(\n    poolConfig?: Partial<ConnectionPoolConfig>,\n    reconnectionConfig?: Partial<ReconnectionConfig>,\n    healthCheckConfig?: Partial<HealthCheckConfig>\n  ) {\n    super()\n\n    // 默认配置\n    this.config = {\n      pool: {\n        maxConnections: parseInt(process.env.DB_POOL_MAX || '50'),\n        minConnections: parseInt(process.env.DB_POOL_MIN || '10'),\n        acquireTimeoutMillis: parseInt(process.env.DB_POOL_ACQUIRE || '60000'),\n        idleTimeoutMillis: parseInt(process.env.DB_POOL_IDLE || '20000'),\n        evictionRunIntervalMillis: parseInt(process.env.DB_POOL_EVICT || '1000'),\n        connectTimeoutMillis: parseInt(process.env.DB_CONNECT_TIMEOUT || '20000'),\n        requestTimeoutMillis: parseInt(process.env.DB_REQUEST_TIMEOUT || '15000'),\n        cancelTimeoutMillis: parseInt(process.env.DB_CANCEL_TIMEOUT || '5000'),\n        ...poolConfig\n      },\n      reconnection: {\n        enabled: true,\n        maxRetries: 10,\n        retryDelayMs: 1000,\n        backoffMultiplier: 2,\n        maxRetryDelayMs: 30000,\n        jitterMs: 100,\n        ...reconnectionConfig\n      },\n      healthCheck: {\n        enabled: process.env.DB_HEALTH_CHECK === 'true',\n        intervalMs: parseInt(process.env.DB_HEALTH_CHECK_INTERVAL || '30000'),\n        timeoutMs: parseInt(process.env.DB_HEALTH_CHECK_TIMEOUT || '5000'),\n        failureThreshold: 3,\n        recoveryThreshold: 2,\n        ...healthCheckConfig\n      }\n    }\n\n    // 初始化统计信息\n    this.stats = {\n      state: ConnectionState.DISCONNECTED,\n      reconnectAttempts: 0,\n      totalQueries: 0,\n      failedQueries: 0,\n      avgLatency: 0,\n      uptime: 0\n    }\n\n    // 绑定事件处理器\n    this.setupEventHandlers()\n  }\n\n  /**\n   * 设置事件处理器\n   */\n  private setupEventHandlers(): void {\n    // 进程退出时清理连接\n    process.on('beforeExit', () => this.disconnect())\n    process.on('SIGINT', () => this.gracefulShutdown())\n    process.on('SIGTERM', () => this.gracefulShutdown())\n\n    // 未捕获异常处理\n    process.on('uncaughtException', (error) => {\n      console.error('Uncaught exception in database connection:', error)\n      this.handleConnectionError(error)\n    })\n\n    process.on('unhandledRejection', (reason) => {\n      console.error('Unhandled rejection in database connection:', reason)\n      if (reason instanceof Error) {\n        this.handleConnectionError(reason)\n      }\n    })\n  }\n\n  /**\n   * 连接到数据库\n   */\n  async connect(): Promise<void> {\n    if (this.state === ConnectionState.CONNECTED) {\n      return\n    }\n\n    this.setState(ConnectionState.CONNECTING)\n\n    try {\n      // 创建Prisma客户端\n      this.prisma = new PrismaClient({\n        log: process.env.NODE_ENV === 'development' \n          ? ['query', 'error', 'warn'] \n          : ['error'],\n        errorFormat: 'pretty',\n        datasources: {\n          db: {\n            url: process.env.DATABASE_URL\n          }\n        }\n      })\n\n      // 连接到数据库\n      await this.prisma.$connect()\n\n      // 验证连接\n      await this.validateConnection()\n\n      this.setState(ConnectionState.CONNECTED)\n      this.stats.connectedAt = new Date()\n      this.stats.reconnectAttempts = 0\n      this.stats.lastError = undefined\n\n      // 启动健康检查\n      if (this.config.healthCheck.enabled) {\n        this.startHealthCheck()\n      }\n\n      this.emit('connected')\n      console.log('Database connected successfully')\n\n    } catch (error) {\n      this.setState(ConnectionState.FAILED)\n      this.stats.lastError = error instanceof Error ? error : new Error(String(error))\n      \n      console.error('Database connection failed:', error)\n      this.emit('error', this.stats.lastError)\n\n      // 如果启用了重连，则尝试重连\n      if (this.config.reconnection.enabled) {\n        this.scheduleReconnect()\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * 验证数据库连接\n   */\n  private async validateConnection(): Promise<void> {\n    if (!this.prisma) {\n      throw new Error('Prisma client not initialized')\n    }\n\n    const startTime = Date.now()\n    \n    try {\n      // 执行简单查询验证连接\n      await this.prisma.$queryRaw`SELECT 1 as test`\n      \n      const latency = Date.now() - startTime\n      this.updateLatencyStats(latency)\n      \n    } catch (error) {\n      throw new Error(`Connection validation failed: ${error}`)\n    }\n  }\n\n  /**\n   * 断开数据库连接\n   */\n  async disconnect(): Promise<void> {\n    this.stopHealthCheck()\n    this.stopReconnectTimer()\n\n    if (this.prisma) {\n      try {\n        await this.prisma.$disconnect()\n        console.log('Database disconnected successfully')\n      } catch (error) {\n        console.error('Error disconnecting from database:', error)\n      } finally {\n        this.prisma = null\n      }\n    }\n\n    this.setState(ConnectionState.DISCONNECTED)\n    this.emit('disconnected')\n  }\n\n  /**\n   * 优雅关闭\n   */\n  async gracefulShutdown(): Promise<void> {\n    console.log('Initiating graceful database shutdown...')\n    \n    try {\n      await this.disconnect()\n      console.log('Database shutdown completed')\n    } catch (error) {\n      console.error('Error during graceful shutdown:', error)\n    } finally {\n      process.exit(0)\n    }\n  }\n\n  /**\n   * 重新连接数据库\n   */\n  async reconnect(): Promise<void> {\n    console.log('Attempting to reconnect to database...')\n    \n    this.setState(ConnectionState.RECONNECTING)\n    this.stats.reconnectAttempts++\n    \n    this.emit('reconnecting', this.stats.reconnectAttempts)\n\n    try {\n      // 先断开现有连接\n      if (this.prisma) {\n        await this.prisma.$disconnect()\n        this.prisma = null\n      }\n\n      // 重新连接\n      await this.connect()\n      \n      console.log('Database reconnected successfully')\n      this.emit('reconnected')\n      \n    } catch (error) {\n      console.error(`Reconnection attempt ${this.stats.reconnectAttempts} failed:`, error)\n      \n      // 如果还有重试次数，则继续尝试\n      if (this.stats.reconnectAttempts < this.config.reconnection.maxRetries) {\n        this.scheduleReconnect()\n      } else {\n        console.error('Max reconnection attempts reached. Giving up.')\n        this.setState(ConnectionState.FAILED)\n        this.emit('error', new Error('Max reconnection attempts reached'))\n      }\n    }\n  }\n\n  /**\n   * 安排重连\n   */\n  private scheduleReconnect(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer)\n    }\n\n    const delay = this.calculateReconnectDelay()\n    \n    console.log(`Scheduling reconnection in ${delay}ms (attempt ${this.stats.reconnectAttempts + 1})`)\n    \n    this.reconnectTimer = setTimeout(() => {\n      this.reconnect().catch(error => {\n        console.error('Scheduled reconnection failed:', error)\n      })\n    }, delay)\n  }\n\n  /**\n   * 计算重连延迟时间\n   */\n  private calculateReconnectDelay(): number {\n    const { retryDelayMs, backoffMultiplier, maxRetryDelayMs, jitterMs } = this.config.reconnection\n    \n    // 指数退避算法\n    const baseDelay = Math.min(\n      retryDelayMs * Math.pow(backoffMultiplier, this.stats.reconnectAttempts),\n      maxRetryDelayMs\n    )\n    \n    // 添加随机抖动避免雷群效应\n    const jitter = Math.random() * jitterMs\n    \n    return baseDelay + jitter\n  }\n\n  /**\n   * 停止重连定时器\n   */\n  private stopReconnectTimer(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer)\n      this.reconnectTimer = null\n    }\n  }\n\n  /**\n   * 启动健康检查\n   */\n  private startHealthCheck(): void {\n    if (this.healthCheckTimer) {\n      return\n    }\n\n    this.healthCheckTimer = setInterval(() => {\n      this.performHealthCheck().catch(error => {\n        console.error('Health check failed:', error)\n      })\n    }, this.config.healthCheck.intervalMs)\n  }\n\n  /**\n   * 停止健康检查\n   */\n  private stopHealthCheck(): void {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer)\n      this.healthCheckTimer = null\n    }\n  }\n\n  /**\n   * 执行健康检查\n   */\n  private async performHealthCheck(): Promise<boolean> {\n    if (!this.prisma || this.state !== ConnectionState.CONNECTED) {\n      return false\n    }\n\n    const startTime = Date.now()\n    \n    try {\n      // 设置健康检查超时\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Health check timeout')), this.config.healthCheck.timeoutMs)\n      })\n\n      // 执行健康检查查询\n      const healthCheckPromise = this.prisma.$queryRaw`SELECT 1 as health_check`\n      \n      await Promise.race([healthCheckPromise, timeoutPromise])\n      \n      const latency = Date.now() - startTime\n      this.updateLatencyStats(latency)\n      \n      this.emit('healthCheck', true)\n      return true\n      \n    } catch (error) {\n      console.error('Health check failed:', error)\n      this.emit('healthCheck', false)\n      \n      // 健康检查失败，可能需要重连\n      this.handleConnectionError(error instanceof Error ? error : new Error(String(error)))\n      \n      return false\n    }\n  }\n\n  /**\n   * 处理连接错误\n   */\n  private handleConnectionError(error: Error): void {\n    console.error('Database connection error:', error)\n    \n    this.stats.lastError = error\n    this.emit('error', error)\n    \n    // 如果当前是连接状态且启用了重连，则尝试重连\n    if (this.state === ConnectionState.CONNECTED && this.config.reconnection.enabled) {\n      this.setState(ConnectionState.DISCONNECTED)\n      this.scheduleReconnect()\n    }\n  }\n\n  /**\n   * 设置连接状态\n   */\n  private setState(state: ConnectionState): void {\n    const previousState = this.state\n    this.state = state\n    this.stats.state = state\n    \n    if (previousState !== state) {\n      console.log(`Database connection state changed: ${previousState} -> ${state}`)\n    }\n  }\n\n  /**\n   * 更新延迟统计\n   */\n  private updateLatencyStats(latency: number): void {\n    this.stats.totalQueries++\n    \n    // 计算平均延迟（简单移动平均）\n    if (this.stats.avgLatency === 0) {\n      this.stats.avgLatency = latency\n    } else {\n      this.stats.avgLatency = (this.stats.avgLatency * 0.9) + (latency * 0.1)\n    }\n  }\n\n  /**\n   * 执行数据库查询（带错误处理和统计）\n   */\n  async executeQuery<T>(queryFn: (prisma: PrismaClient) => Promise<T>): Promise<T> {\n    if (!this.prisma || this.state !== ConnectionState.CONNECTED) {\n      throw new Error('Database not connected')\n    }\n\n    const startTime = Date.now()\n    \n    try {\n      const result = await queryFn(this.prisma)\n      \n      const latency = Date.now() - startTime\n      this.updateLatencyStats(latency)\n      \n      return result\n      \n    } catch (error) {\n      this.stats.failedQueries++\n      \n      console.error('Query execution failed:', error)\n      \n      // 发出详细的错误事件\n      this.emit('error', error)\n      this.emit('queryFailed', {\n        error,\n        query: queryFn.toString(),\n        timestamp: new Date(),\n        totalFailures: this.stats.failedQueries\n      })\n      \n      // 检查是否是连接相关错误\n      if (this.isConnectionError(error)) {\n        this.handleConnectionError(error instanceof Error ? error : new Error(String(error)))\n      }\n      \n      throw error\n    }\n  }\n\n  /**\n   * 检查是否是连接相关错误\n   */\n  private isConnectionError(error: any): boolean {\n    if (!error) return false\n    \n    const errorMessage = error.message || error.toString()\n    const connectionErrorPatterns = [\n      'connection',\n      'timeout',\n      'network',\n      'ECONNREFUSED',\n      'ENOTFOUND',\n      'ETIMEDOUT',\n      'socket',\n      'server closed'\n    ]\n    \n    return connectionErrorPatterns.some(pattern => \n      errorMessage.toLowerCase().includes(pattern.toLowerCase())\n    )\n  }\n\n  /**\n   * 获取连接统计信息\n   */\n  getStats(): ConnectionStats {\n    const uptime = this.stats.connectedAt \n      ? Date.now() - this.stats.connectedAt.getTime() \n      : 0\n    \n    return {\n      ...this.stats,\n      uptime\n    }\n  }\n\n  /**\n   * 更新连接池配置\n   */\n  async updateConfiguration(config: Partial<PoolConfiguration>): Promise<void> {\n    try {\n      console.log('Updating database configuration:', config)\n      this.poolConfig = { ...this.poolConfig, ...config }\n      \n      // 在实际实现中，这里应该重新初始化连接池\n      // 由于Prisma的限制，我们只能记录配置变更\n      this.emit('configurationUpdated', { config, timestamp: new Date() })\n      \n    } catch (error) {\n      console.error('Failed to update database configuration:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 更新恢复配置\n   */\n  updateRecoveryConfiguration(config: Partial<RecoveryConfiguration>): void {\n    this.recoveryConfig = { ...this.recoveryConfig, ...config }\n    console.log('Recovery configuration updated:', config)\n    this.emit('recoveryConfigurationUpdated', { config, timestamp: new Date() })\n  }\n\n  /**\n   * 获取当前配置\n   */\n  getConfiguration(): {\n    pool: Partial<PoolConfiguration>\n    recovery: Partial<RecoveryConfiguration>\n  } {\n    return {\n      pool: { ...this.poolConfig },\n      recovery: { ...this.recoveryConfig }\n    }\n  }\n\n  /**\n   * 强制健康检查\n   */\n  async forceHealthCheck(): Promise<boolean> {\n    return await this.performHealthCheck()\n  }\n\n  /**\n   * 获取详细的连接信息\n   */\n  getDetailedStats(): ConnectionStats & {\n    configuration: {\n      pool: Partial<PoolConfiguration>\n      recovery: Partial<RecoveryConfiguration>\n    }\n    performance: {\n      successRate: number\n      queriesPerSecond: number\n      avgResponseTime: number\n    }\n  } {\n    const basicStats = this.getStats()\n    const successRate = this.stats.totalQueries > 0 \n      ? ((this.stats.totalQueries - this.stats.failedQueries) / this.stats.totalQueries) * 100\n      : 100\n    \n    const uptimeSeconds = basicStats.uptime / 1000\n    const queriesPerSecond = uptimeSeconds > 0 ? this.stats.totalQueries / uptimeSeconds : 0\n    \n    return {\n      ...basicStats,\n      configuration: this.getConfiguration(),\n      performance: {\n        successRate,\n        queriesPerSecond,\n        avgResponseTime: basicStats.avgLatency\n      }\n    }\n  }\n\n  /**\n   * 获取Prisma客户端实例\n   */\n  getClient(): PrismaClient | null {\n    return this.prisma\n  }\n\n  /**\n   * 检查连接状态\n   */\n  isConnected(): boolean {\n    return this.state === ConnectionState.CONNECTED && this.prisma !== null\n  }\n\n  /**\n   * 获取当前连接状态\n   */\n  getState(): ConnectionState {\n    return this.state\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfig(\n    poolConfig?: Partial<ConnectionPoolConfig>,\n    reconnectionConfig?: Partial<ReconnectionConfig>,\n    healthCheckConfig?: Partial<HealthCheckConfig>\n  ): void {\n    if (poolConfig) {\n      this.config.pool = { ...this.config.pool, ...poolConfig }\n    }\n    \n    if (reconnectionConfig) {\n      this.config.reconnection = { ...this.config.reconnection, ...reconnectionConfig }\n    }\n    \n    if (healthCheckConfig) {\n      this.config.healthCheck = { ...this.config.healthCheck, ...healthCheckConfig }\n      \n      // 如果健康检查配置改变，重启健康检查\n      if (this.state === ConnectionState.CONNECTED) {\n        this.stopHealthCheck()\n        if (this.config.healthCheck.enabled) {\n          this.startHealthCheck()\n        }\n      }\n    }\n  }\n}\n\n// 全局增强数据库连接实例\nexport const enhancedDb = new EnhancedDatabaseConnection()\n\n// 初始化监控和优化模块\nif (process.env.DB_MONITORING_ENABLED === 'true') {\n  // 延迟导入以避免循环依赖\n  import('./monitoring').then(({ databaseMonitor }) => {\n    databaseMonitor.start()\n    console.log('Database monitoring started')\n  }).catch(console.error)\n}\n\nif (process.env.DB_POOL_OPTIMIZATION_ENABLED === 'true') {\n  import('./pool-optimizer').then(({ poolOptimizer }) => {\n    poolOptimizer.start()\n    console.log('Database pool optimization started')\n  }).catch(console.error)\n}\n\nif (process.env.DB_ERROR_RECOVERY_ENABLED === 'true') {\n  import('./error-recovery').then(({ errorRecovery }) => {\n    errorRecovery.start()\n    console.log('Database error recovery started')\n  }).catch(console.error)\n}\n\n// 导出便捷方法\nexport const connectDatabase = () => enhancedDb.connect()\nexport const disconnectDatabase = () => enhancedDb.disconnect()\nexport const getDatabaseStats = () => enhancedDb.getStats()\nexport const isDatabaseConnected = () => enhancedDb.isConnected()\nexport const executeQuery = <T>(queryFn: (prisma: PrismaClient) => Promise<T>) => \n  enhancedDb.executeQuery(queryFn)\n\n// 默认导出增强的数据库连接\nexport default enhancedDb"],"names":["ConnectionState","EnhancedDatabaseConnection","connectDatabase","disconnectDatabase","enhancedDb","executeQuery","getDatabaseStats","isDatabaseConnected","EventEmitter","constructor","poolConfig","reconnectionConfig","healthCheckConfig","prisma","state","reconnectTimer","healthCheckTimer","recoveryConfig","config","pool","maxConnections","parseInt","process","env","DB_POOL_MAX","minConnections","DB_POOL_MIN","acquireTimeoutMillis","DB_POOL_ACQUIRE","idleTimeoutMillis","DB_POOL_IDLE","evictionRunIntervalMillis","DB_POOL_EVICT","connectTimeoutMillis","DB_CONNECT_TIMEOUT","requestTimeoutMillis","DB_REQUEST_TIMEOUT","cancelTimeoutMillis","DB_CANCEL_TIMEOUT","reconnection","enabled","maxRetries","retryDelayMs","backoffMultiplier","maxRetryDelayMs","jitterMs","healthCheck","DB_HEALTH_CHECK","intervalMs","DB_HEALTH_CHECK_INTERVAL","timeoutMs","DB_HEALTH_CHECK_TIMEOUT","failureThreshold","recoveryThreshold","stats","reconnectAttempts","totalQueries","failedQueries","avgLatency","uptime","setupEventHandlers","on","disconnect","gracefulShutdown","error","console","handleConnectionError","reason","Error","connect","setState","PrismaClient","log","NODE_ENV","errorFormat","datasources","db","url","DATABASE_URL","$connect","validateConnection","connectedAt","Date","lastError","undefined","startHealthCheck","emit","String","scheduleReconnect","startTime","now","$queryRaw","latency","updateLatencyStats","stopHealthCheck","stopReconnectTimer","$disconnect","exit","reconnect","clearTimeout","delay","calculateReconnectDelay","setTimeout","catch","baseDelay","Math","min","pow","jitter","random","setInterval","performHealthCheck","clearInterval","timeoutPromise","Promise","_","reject","healthCheckPromise","race","previousState","queryFn","result","query","toString","timestamp","totalFailures","isConnectionError","errorMessage","message","connectionErrorPatterns","some","pattern","toLowerCase","includes","getStats","getTime","updateConfiguration","updateRecoveryConfiguration","getConfiguration","recovery","forceHealthCheck","getDetailedStats","basicStats","successRate","uptimeSeconds","queriesPerSecond","configuration","performance","avgResponseTime","getClient","isConnected","getState","updateConfig","DB_MONITORING_ENABLED","then","databaseMonitor","start","DB_POOL_OPTIMIZATION_ENABLED","poolOptimizer","DB_ERROR_RECOVERY_ENABLED","errorRecovery"],"mappings":"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"}