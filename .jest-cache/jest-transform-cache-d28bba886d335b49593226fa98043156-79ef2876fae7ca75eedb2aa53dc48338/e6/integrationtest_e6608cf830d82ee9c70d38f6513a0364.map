{"version":3,"sources":["E:\\zk-agent\\tests\\database\\integration.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach, afterEach, jest } from '@jest/globals'\nimport { enhancedDb } from '../../lib/database/enhanced-connection'\nimport { databaseMonitor } from '../../lib/database/monitoring'\nimport { poolOptimizer } from '../../lib/database/pool-optimizer'\nimport { errorRecovery } from '../../lib/database/error-recovery'\nimport { checkDatabaseConnection, getDatabasePoolStatus } from '../../lib/database/connection'\n\n// Mock environment variables\nprocess.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test_db'\nprocess.env.ENHANCED_DB_CONNECTION = 'true'\nprocess.env.DB_MONITORING_ENABLED = 'true'\nprocess.env.DB_POOL_OPTIMIZATION_ENABLED = 'true'\nprocess.env.DB_ERROR_RECOVERY_ENABLED = 'true'\n\ndescribe('Database Integration Tests', () => {\n  beforeAll(async () => {\n    // 确保所有模块都已初始化\n    await new Promise(resolve => setTimeout(resolve, 1000))\n  })\n\n  afterAll(async () => {\n    // 清理所有连接和监控\n    await enhancedDb.disconnect()\n    databaseMonitor.stop()\n    poolOptimizer.stop()\n    errorRecovery.stop()\n  })\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Enhanced Database Connection Integration', () => {\n    it('should connect and provide basic functionality', async () => {\n      const isConnected = await enhancedDb.connect()\n      expect(isConnected).toBe(true)\n      expect(enhancedDb.isConnected()).toBe(true)\n\n      const stats = enhancedDb.getStats()\n      expect(stats.state).toBe('connected')\n      expect(stats.isHealthy).toBe(true)\n    })\n\n    it('should handle configuration updates', async () => {\n      const newConfig = {\n        maxConnections: 15,\n        minConnections: 3,\n        connectionTimeout: 8000\n      }\n\n      await enhancedDb.updateConfiguration(newConfig)\n      const config = enhancedDb.getConfiguration()\n      expect(config.pool).toMatchObject(newConfig)\n    })\n\n    it('should provide detailed statistics', () => {\n      const detailedStats = enhancedDb.getDetailedStats()\n      \n      expect(detailedStats).toHaveProperty('state')\n      expect(detailedStats).toHaveProperty('uptime')\n      expect(detailedStats).toHaveProperty('configuration')\n      expect(detailedStats).toHaveProperty('performance')\n      expect(detailedStats.performance).toHaveProperty('successRate')\n      expect(detailedStats.performance).toHaveProperty('queriesPerSecond')\n      expect(detailedStats.performance).toHaveProperty('avgResponseTime')\n    })\n  })\n\n  describe('Database Monitoring Integration', () => {\n    it('should start monitoring and collect metrics', async () => {\n      databaseMonitor.start()\n      \n      // 等待监控收集一些数据\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      const metrics = databaseMonitor.getMetrics()\n      expect(metrics).toHaveProperty('timestamp')\n      expect(metrics).toHaveProperty('connections')\n      expect(metrics).toHaveProperty('performance')\n      expect(metrics).toHaveProperty('system')\n    })\n\n    it('should detect performance issues', async () => {\n      const alertSpy = jest.fn()\n      databaseMonitor.on('alert', alertSpy)\n\n      // 模拟性能问题\n      const mockMetrics = {\n        timestamp: new Date(),\n        connections: {\n          active: 18, // 超过阈值\n          idle: 2,\n          total: 20\n        },\n        performance: {\n          avgLatency: 1200, // 超过阈值\n          queryRate: 50,\n          errorRate: 0.05\n        },\n        system: {\n          cpuUsage: 85, // 超过阈值\n          memoryUsage: 90,\n          diskUsage: 60\n        }\n      }\n\n      // 手动触发性能检查\n      databaseMonitor['checkPerformanceThresholds'](mockMetrics)\n      \n      // 验证是否生成了警报\n      expect(alertSpy).toHaveBeenCalled()\n    })\n  })\n\n  describe('Pool Optimizer Integration', () => {\n    it('should start optimization and evaluate strategies', async () => {\n      poolOptimizer.start()\n      \n      // 等待优化器运行\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      const history = poolOptimizer.getOptimizationHistory()\n      expect(Array.isArray(history)).toBe(true)\n    })\n\n    it('should respond to performance alerts', async () => {\n      const optimizationSpy = jest.fn()\n      poolOptimizer.on('optimizationApplied', optimizationSpy)\n\n      // 模拟性能警报\n      const alert = {\n        id: 'test-alert',\n        type: 'performance' as const,\n        severity: 'high' as const,\n        message: 'High connection usage detected',\n        timestamp: new Date(),\n        metrics: {\n          connections: { active: 18, idle: 2, total: 20 },\n          performance: { avgLatency: 800, queryRate: 100, errorRate: 0.02 }\n        }\n      }\n\n      // 手动触发警报处理\n      poolOptimizer['handleAlert'](alert)\n      \n      // 验证是否应用了优化\n      expect(optimizationSpy).toHaveBeenCalled()\n    })\n  })\n\n  describe('Error Recovery Integration', () => {\n    it('should start error recovery system', () => {\n      errorRecovery.start()\n      \n      const stats = errorRecovery.getStats()\n      expect(stats).toHaveProperty('totalErrors')\n      expect(stats).toHaveProperty('recoveryAttempts')\n      expect(stats).toHaveProperty('circuitBreakerState')\n    })\n\n    it('should handle database errors', async () => {\n      const recoverySpy = jest.fn()\n      errorRecovery.on('recoveryExecuted', recoverySpy)\n\n      // 模拟数据库错误\n      const error = new Error('Connection timeout')\n      error.name = 'ConnectionError'\n\n      // 手动触发错误处理\n      await errorRecovery.handleError(error)\n      \n      // 验证是否执行了恢复策略\n      expect(recoverySpy).toHaveBeenCalled()\n    })\n\n    it('should update circuit breaker state', async () => {\n      // 模拟多次错误以触发断路器\n      for (let i = 0; i < 6; i++) {\n        const error = new Error(`Error ${i}`)\n        await errorRecovery.handleError(error)\n      }\n\n      const stats = errorRecovery.getStats()\n      expect(stats.circuitBreakerState).toBe('open')\n    })\n  })\n\n  describe('Legacy Connection Integration', () => {\n    it('should work with existing connection functions', async () => {\n      const connectionStatus = await checkDatabaseConnection()\n      \n      expect(connectionStatus).toHaveProperty('connected')\n      expect(connectionStatus).toHaveProperty('message')\n      expect(connectionStatus).toHaveProperty('stats')\n      \n      if (connectionStatus.connected) {\n        expect(connectionStatus.stats).toHaveProperty('totalQueries')\n        expect(connectionStatus.stats).toHaveProperty('failedQueries')\n        expect(connectionStatus.stats).toHaveProperty('avgLatency')\n      }\n    })\n\n    it('should provide enhanced pool status', async () => {\n      const poolStatus = await getDatabasePoolStatus()\n      \n      expect(poolStatus).toHaveProperty('status')\n      expect(poolStatus).toHaveProperty('connections')\n      expect(poolStatus).toHaveProperty('performance')\n      \n      if (enhancedDb.isConnected()) {\n        expect(poolStatus.performance).toHaveProperty('successRate')\n        expect(poolStatus.performance).toHaveProperty('avgLatency')\n        expect(poolStatus.connections).toHaveProperty('reconnectAttempts')\n      }\n    })\n  })\n\n  describe('End-to-End Workflow', () => {\n    it('should handle complete error recovery workflow', async () => {\n      // 1. 连接数据库\n      await enhancedDb.connect()\n      expect(enhancedDb.isConnected()).toBe(true)\n\n      // 2. 启动所有监控系统\n      databaseMonitor.start()\n      poolOptimizer.start()\n      errorRecovery.start()\n\n      // 3. 模拟查询执行\n      try {\n        await enhancedDb.executeQuery(async (prisma) => {\n          // 模拟简单查询\n          return { result: 'success' }\n        })\n      } catch (error) {\n        // 预期可能的错误\n      }\n\n      // 4. 检查统计信息\n      const stats = enhancedDb.getDetailedStats()\n      expect(stats.totalQueries).toBeGreaterThan(0)\n\n      // 5. 验证监控数据\n      const metrics = databaseMonitor.getMetrics()\n      expect(metrics.timestamp).toBeInstanceOf(Date)\n\n      // 6. 验证错误恢复状态\n      const errorStats = errorRecovery.getStats()\n      expect(errorStats).toHaveProperty('totalErrors')\n\n      // 7. 清理\n      databaseMonitor.stop()\n      poolOptimizer.stop()\n      errorRecovery.stop()\n      await enhancedDb.disconnect()\n    })\n\n    it('should maintain system stability under load', async () => {\n      await enhancedDb.connect()\n      \n      // 启动监控\n      databaseMonitor.start()\n      errorRecovery.start()\n\n      // 模拟并发查询\n      const queries = Array.from({ length: 10 }, (_, i) => \n        enhancedDb.executeQuery(async () => ({ id: i, result: 'test' }))\n          .catch(error => ({ error: error.message }))\n      )\n\n      const results = await Promise.all(queries)\n      \n      // 验证系统仍然稳定\n      expect(enhancedDb.isConnected()).toBe(true)\n      expect(results.length).toBe(10)\n\n      // 检查性能指标\n      const detailedStats = enhancedDb.getDetailedStats()\n      expect(detailedStats.performance.successRate).toBeGreaterThan(0)\n\n      // 清理\n      databaseMonitor.stop()\n      errorRecovery.stop()\n      await enhancedDb.disconnect()\n    })\n  })\n\n  describe('Configuration Management', () => {\n    it('should handle dynamic configuration updates', async () => {\n      await enhancedDb.connect()\n\n      // 更新连接池配置\n      const poolConfig = {\n        maxConnections: 25,\n        minConnections: 5,\n        connectionTimeout: 10000\n      }\n      \n      await enhancedDb.updateConfiguration(poolConfig)\n      \n      // 更新恢复配置\n      const recoveryConfig = {\n        maxRetries: 5,\n        retryDelay: 2000,\n        circuitBreakerThreshold: 8\n      }\n      \n      enhancedDb.updateRecoveryConfiguration(recoveryConfig)\n      \n      // 验证配置已更新\n      const currentConfig = enhancedDb.getConfiguration()\n      expect(currentConfig.pool).toMatchObject(poolConfig)\n      expect(currentConfig.recovery).toMatchObject(recoveryConfig)\n    })\n  })\n})"],"names":["process","env","DATABASE_URL","ENHANCED_DB_CONNECTION","DB_MONITORING_ENABLED","DB_POOL_OPTIMIZATION_ENABLED","DB_ERROR_RECOVERY_ENABLED","describe","beforeAll","Promise","resolve","setTimeout","afterAll","enhancedDb","disconnect","databaseMonitor","stop","poolOptimizer","errorRecovery","beforeEach","jest","clearAllMocks","it","isConnected","connect","expect","toBe","stats","getStats","state","isHealthy","newConfig","maxConnections","minConnections","connectionTimeout","updateConfiguration","config","getConfiguration","pool","toMatchObject","detailedStats","getDetailedStats","toHaveProperty","performance","start","metrics","getMetrics","alertSpy","fn","on","mockMetrics","timestamp","Date","connections","active","idle","total","avgLatency","queryRate","errorRate","system","cpuUsage","memoryUsage","diskUsage","toHaveBeenCalled","history","getOptimizationHistory","Array","isArray","optimizationSpy","alert","id","type","severity","message","recoverySpy","error","Error","name","handleError","i","circuitBreakerState","connectionStatus","checkDatabaseConnection","connected","poolStatus","getDatabasePoolStatus","executeQuery","prisma","result","totalQueries","toBeGreaterThan","toBeInstanceOf","errorStats","queries","from","length","_","catch","results","all","successRate","poolConfig","recoveryConfig","maxRetries","retryDelay","circuitBreakerThreshold","updateRecoveryConfiguration","currentConfig","recovery"],"mappings":"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"}