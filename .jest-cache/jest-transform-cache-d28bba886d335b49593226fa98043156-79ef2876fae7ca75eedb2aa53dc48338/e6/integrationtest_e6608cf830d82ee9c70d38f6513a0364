8b530aaff75375b0bac16983740d615b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _enhancedconnection = require("../../lib/database/enhanced-connection");
const _monitoring = require("../../lib/database/monitoring");
const _pooloptimizer = require("../../lib/database/pool-optimizer");
const _errorrecovery = require("../../lib/database/error-recovery");
const _connection = require("../../lib/database/connection");
// Mock environment variables
process.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/test_db';
process.env.ENHANCED_DB_CONNECTION = 'true';
process.env.DB_MONITORING_ENABLED = 'true';
process.env.DB_POOL_OPTIMIZATION_ENABLED = 'true';
process.env.DB_ERROR_RECOVERY_ENABLED = 'true';
(0, _globals.describe)('Database Integration Tests', ()=>{
    (0, _globals.beforeAll)(async ()=>{
        // 确保所有模块都已初始化
        await new Promise((resolve)=>setTimeout(resolve, 1000));
    });
    (0, _globals.afterAll)(async ()=>{
        // 清理所有连接和监控
        await _enhancedconnection.enhancedDb.disconnect();
        _monitoring.databaseMonitor.stop();
        _pooloptimizer.poolOptimizer.stop();
        _errorrecovery.errorRecovery.stop();
    });
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('Enhanced Database Connection Integration', ()=>{
        (0, _globals.it)('should connect and provide basic functionality', async ()=>{
            const isConnected = await _enhancedconnection.enhancedDb.connect();
            (0, _globals.expect)(isConnected).toBe(true);
            (0, _globals.expect)(_enhancedconnection.enhancedDb.isConnected()).toBe(true);
            const stats = _enhancedconnection.enhancedDb.getStats();
            (0, _globals.expect)(stats.state).toBe('connected');
            (0, _globals.expect)(stats.isHealthy).toBe(true);
        });
        (0, _globals.it)('should handle configuration updates', async ()=>{
            const newConfig = {
                maxConnections: 15,
                minConnections: 3,
                connectionTimeout: 8000
            };
            await _enhancedconnection.enhancedDb.updateConfiguration(newConfig);
            const config = _enhancedconnection.enhancedDb.getConfiguration();
            (0, _globals.expect)(config.pool).toMatchObject(newConfig);
        });
        (0, _globals.it)('should provide detailed statistics', ()=>{
            const detailedStats = _enhancedconnection.enhancedDb.getDetailedStats();
            (0, _globals.expect)(detailedStats).toHaveProperty('state');
            (0, _globals.expect)(detailedStats).toHaveProperty('uptime');
            (0, _globals.expect)(detailedStats).toHaveProperty('configuration');
            (0, _globals.expect)(detailedStats).toHaveProperty('performance');
            (0, _globals.expect)(detailedStats.performance).toHaveProperty('successRate');
            (0, _globals.expect)(detailedStats.performance).toHaveProperty('queriesPerSecond');
            (0, _globals.expect)(detailedStats.performance).toHaveProperty('avgResponseTime');
        });
    });
    (0, _globals.describe)('Database Monitoring Integration', ()=>{
        (0, _globals.it)('should start monitoring and collect metrics', async ()=>{
            _monitoring.databaseMonitor.start();
            // 等待监控收集一些数据
            await new Promise((resolve)=>setTimeout(resolve, 2000));
            const metrics = _monitoring.databaseMonitor.getMetrics();
            (0, _globals.expect)(metrics).toHaveProperty('timestamp');
            (0, _globals.expect)(metrics).toHaveProperty('connections');
            (0, _globals.expect)(metrics).toHaveProperty('performance');
            (0, _globals.expect)(metrics).toHaveProperty('system');
        });
        (0, _globals.it)('should detect performance issues', async ()=>{
            const alertSpy = _globals.jest.fn();
            _monitoring.databaseMonitor.on('alert', alertSpy);
            // 模拟性能问题
            const mockMetrics = {
                timestamp: new Date(),
                connections: {
                    active: 18,
                    idle: 2,
                    total: 20
                },
                performance: {
                    avgLatency: 1200,
                    queryRate: 50,
                    errorRate: 0.05
                },
                system: {
                    cpuUsage: 85,
                    memoryUsage: 90,
                    diskUsage: 60
                }
            };
            // 手动触发性能检查
            _monitoring.databaseMonitor['checkPerformanceThresholds'](mockMetrics);
            // 验证是否生成了警报
            (0, _globals.expect)(alertSpy).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Pool Optimizer Integration', ()=>{
        (0, _globals.it)('should start optimization and evaluate strategies', async ()=>{
            _pooloptimizer.poolOptimizer.start();
            // 等待优化器运行
            await new Promise((resolve)=>setTimeout(resolve, 1000));
            const history = _pooloptimizer.poolOptimizer.getOptimizationHistory();
            (0, _globals.expect)(Array.isArray(history)).toBe(true);
        });
        (0, _globals.it)('should respond to performance alerts', async ()=>{
            const optimizationSpy = _globals.jest.fn();
            _pooloptimizer.poolOptimizer.on('optimizationApplied', optimizationSpy);
            // 模拟性能警报
            const alert = {
                id: 'test-alert',
                type: 'performance',
                severity: 'high',
                message: 'High connection usage detected',
                timestamp: new Date(),
                metrics: {
                    connections: {
                        active: 18,
                        idle: 2,
                        total: 20
                    },
                    performance: {
                        avgLatency: 800,
                        queryRate: 100,
                        errorRate: 0.02
                    }
                }
            };
            // 手动触发警报处理
            _pooloptimizer.poolOptimizer['handleAlert'](alert);
            // 验证是否应用了优化
            (0, _globals.expect)(optimizationSpy).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Error Recovery Integration', ()=>{
        (0, _globals.it)('should start error recovery system', ()=>{
            _errorrecovery.errorRecovery.start();
            const stats = _errorrecovery.errorRecovery.getStats();
            (0, _globals.expect)(stats).toHaveProperty('totalErrors');
            (0, _globals.expect)(stats).toHaveProperty('recoveryAttempts');
            (0, _globals.expect)(stats).toHaveProperty('circuitBreakerState');
        });
        (0, _globals.it)('should handle database errors', async ()=>{
            const recoverySpy = _globals.jest.fn();
            _errorrecovery.errorRecovery.on('recoveryExecuted', recoverySpy);
            // 模拟数据库错误
            const error = new Error('Connection timeout');
            error.name = 'ConnectionError';
            // 手动触发错误处理
            await _errorrecovery.errorRecovery.handleError(error);
            // 验证是否执行了恢复策略
            (0, _globals.expect)(recoverySpy).toHaveBeenCalled();
        });
        (0, _globals.it)('should update circuit breaker state', async ()=>{
            // 模拟多次错误以触发断路器
            for(let i = 0; i < 6; i++){
                const error = new Error(`Error ${i}`);
                await _errorrecovery.errorRecovery.handleError(error);
            }
            const stats = _errorrecovery.errorRecovery.getStats();
            (0, _globals.expect)(stats.circuitBreakerState).toBe('open');
        });
    });
    (0, _globals.describe)('Legacy Connection Integration', ()=>{
        (0, _globals.it)('should work with existing connection functions', async ()=>{
            const connectionStatus = await (0, _connection.checkDatabaseConnection)();
            (0, _globals.expect)(connectionStatus).toHaveProperty('connected');
            (0, _globals.expect)(connectionStatus).toHaveProperty('message');
            (0, _globals.expect)(connectionStatus).toHaveProperty('stats');
            if (connectionStatus.connected) {
                (0, _globals.expect)(connectionStatus.stats).toHaveProperty('totalQueries');
                (0, _globals.expect)(connectionStatus.stats).toHaveProperty('failedQueries');
                (0, _globals.expect)(connectionStatus.stats).toHaveProperty('avgLatency');
            }
        });
        (0, _globals.it)('should provide enhanced pool status', async ()=>{
            const poolStatus = await (0, _connection.getDatabasePoolStatus)();
            (0, _globals.expect)(poolStatus).toHaveProperty('status');
            (0, _globals.expect)(poolStatus).toHaveProperty('connections');
            (0, _globals.expect)(poolStatus).toHaveProperty('performance');
            if (_enhancedconnection.enhancedDb.isConnected()) {
                (0, _globals.expect)(poolStatus.performance).toHaveProperty('successRate');
                (0, _globals.expect)(poolStatus.performance).toHaveProperty('avgLatency');
                (0, _globals.expect)(poolStatus.connections).toHaveProperty('reconnectAttempts');
            }
        });
    });
    (0, _globals.describe)('End-to-End Workflow', ()=>{
        (0, _globals.it)('should handle complete error recovery workflow', async ()=>{
            // 1. 连接数据库
            await _enhancedconnection.enhancedDb.connect();
            (0, _globals.expect)(_enhancedconnection.enhancedDb.isConnected()).toBe(true);
            // 2. 启动所有监控系统
            _monitoring.databaseMonitor.start();
            _pooloptimizer.poolOptimizer.start();
            _errorrecovery.errorRecovery.start();
            // 3. 模拟查询执行
            try {
                await _enhancedconnection.enhancedDb.executeQuery(async (prisma)=>{
                    // 模拟简单查询
                    return {
                        result: 'success'
                    };
                });
            } catch (error) {
            // 预期可能的错误
            }
            // 4. 检查统计信息
            const stats = _enhancedconnection.enhancedDb.getDetailedStats();
            (0, _globals.expect)(stats.totalQueries).toBeGreaterThan(0);
            // 5. 验证监控数据
            const metrics = _monitoring.databaseMonitor.getMetrics();
            (0, _globals.expect)(metrics.timestamp).toBeInstanceOf(Date);
            // 6. 验证错误恢复状态
            const errorStats = _errorrecovery.errorRecovery.getStats();
            (0, _globals.expect)(errorStats).toHaveProperty('totalErrors');
            // 7. 清理
            _monitoring.databaseMonitor.stop();
            _pooloptimizer.poolOptimizer.stop();
            _errorrecovery.errorRecovery.stop();
            await _enhancedconnection.enhancedDb.disconnect();
        });
        (0, _globals.it)('should maintain system stability under load', async ()=>{
            await _enhancedconnection.enhancedDb.connect();
            // 启动监控
            _monitoring.databaseMonitor.start();
            _errorrecovery.errorRecovery.start();
            // 模拟并发查询
            const queries = Array.from({
                length: 10
            }, (_, i)=>_enhancedconnection.enhancedDb.executeQuery(async ()=>({
                        id: i,
                        result: 'test'
                    })).catch((error)=>({
                        error: error.message
                    })));
            const results = await Promise.all(queries);
            // 验证系统仍然稳定
            (0, _globals.expect)(_enhancedconnection.enhancedDb.isConnected()).toBe(true);
            (0, _globals.expect)(results.length).toBe(10);
            // 检查性能指标
            const detailedStats = _enhancedconnection.enhancedDb.getDetailedStats();
            (0, _globals.expect)(detailedStats.performance.successRate).toBeGreaterThan(0);
            // 清理
            _monitoring.databaseMonitor.stop();
            _errorrecovery.errorRecovery.stop();
            await _enhancedconnection.enhancedDb.disconnect();
        });
    });
    (0, _globals.describe)('Configuration Management', ()=>{
        (0, _globals.it)('should handle dynamic configuration updates', async ()=>{
            await _enhancedconnection.enhancedDb.connect();
            // 更新连接池配置
            const poolConfig = {
                maxConnections: 25,
                minConnections: 5,
                connectionTimeout: 10000
            };
            await _enhancedconnection.enhancedDb.updateConfiguration(poolConfig);
            // 更新恢复配置
            const recoveryConfig = {
                maxRetries: 5,
                retryDelay: 2000,
                circuitBreakerThreshold: 8
            };
            _enhancedconnection.enhancedDb.updateRecoveryConfiguration(recoveryConfig);
            // 验证配置已更新
            const currentConfig = _enhancedconnection.enhancedDb.getConfiguration();
            (0, _globals.expect)(currentConfig.pool).toMatchObject(poolConfig);
            (0, _globals.expect)(currentConfig.recovery).toMatchObject(recoveryConfig);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,