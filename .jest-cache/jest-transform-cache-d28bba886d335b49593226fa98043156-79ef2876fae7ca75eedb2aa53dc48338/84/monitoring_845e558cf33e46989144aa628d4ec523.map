{"version":3,"sources":["E:\\zk-agent\\lib\\database\\monitoring.ts"],"sourcesContent":["/**\n * @file Database Connection Monitoring\n * @description 数据库连接监控和指标收集工具\n * @author ZK-Agent Team\n * @date 2024-12-19\n */\n\nimport { EventEmitter } from 'events'\nimport { enhancedDb, ConnectionState } from './enhanced-connection'\n\n// 监控指标接口\nexport interface DatabaseMetrics {\n  timestamp: Date\n  connectionState: ConnectionState\n  uptime: number\n  totalQueries: number\n  failedQueries: number\n  successRate: number\n  avgLatency: number\n  reconnectAttempts: number\n  memoryUsage: {\n    rss: number\n    heapUsed: number\n    heapTotal: number\n    external: number\n  }\n  cpuUsage: {\n    user: number\n    system: number\n  }\n}\n\n// 性能阈值配置\nexport interface PerformanceThresholds {\n  maxLatency: number // 最大延迟（毫秒）\n  maxFailureRate: number // 最大失败率（百分比）\n  maxReconnectAttempts: number // 最大重连尝试次数\n  minUptime: number // 最小运行时间（毫秒）\n}\n\n// 告警级别\nexport enum AlertLevel {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical'\n}\n\n// 告警信息\nexport interface Alert {\n  level: AlertLevel\n  message: string\n  timestamp: Date\n  metrics: DatabaseMetrics\n  threshold?: any\n}\n\n/**\n * 数据库监控器\n */\nexport class DatabaseMonitor extends EventEmitter {\n  private isMonitoring: boolean = false\n  private monitoringInterval: NodeJS.Timeout | null = null\n  private metricsHistory: DatabaseMetrics[] = []\n  private alerts: Alert[] = []\n  private thresholds: PerformanceThresholds\n  private intervalMs: number\n  private maxHistorySize: number\n  private lastCpuUsage: NodeJS.CpuUsage | null = null\n\n  constructor(\n    thresholds?: Partial<PerformanceThresholds>,\n    intervalMs: number = 30000,\n    maxHistorySize: number = 100\n  ) {\n    super()\n\n    // 默认性能阈值\n    this.thresholds = {\n      maxLatency: parseInt(process.env.DB_MAX_LATENCY || '1000'),\n      maxFailureRate: parseFloat(process.env.DB_MAX_FAILURE_RATE || '5'),\n      maxReconnectAttempts: parseInt(process.env.DB_MAX_RECONNECT_ATTEMPTS || '5'),\n      minUptime: parseInt(process.env.DB_MIN_UPTIME || '60000'),\n      ...thresholds\n    }\n\n    this.intervalMs = intervalMs\n    this.maxHistorySize = maxHistorySize\n\n    // 监听数据库事件\n    this.setupDatabaseEventListeners()\n  }\n\n  /**\n   * 设置数据库事件监听器\n   */\n  private setupDatabaseEventListeners(): void {\n    enhancedDb.on('connected', () => {\n      this.createAlert(AlertLevel.INFO, '数据库连接成功建立')\n    })\n\n    enhancedDb.on('disconnected', (error) => {\n      const message = error ? `数据库连接断开: ${error.message}` : '数据库连接断开'\n      this.createAlert(AlertLevel.WARNING, message)\n    })\n\n    enhancedDb.on('reconnecting', (attempt) => {\n      this.createAlert(AlertLevel.WARNING, `数据库重连中 (第${attempt}次尝试)`)\n    })\n\n    enhancedDb.on('reconnected', () => {\n      this.createAlert(AlertLevel.INFO, '数据库重连成功')\n    })\n\n    enhancedDb.on('error', (error) => {\n      this.createAlert(AlertLevel.ERROR, `数据库错误: ${error.message}`)\n    })\n\n    enhancedDb.on('healthCheck', (healthy) => {\n      if (!healthy) {\n        this.createAlert(AlertLevel.WARNING, '数据库健康检查失败')\n      }\n    })\n  }\n\n  /**\n   * 开始监控\n   */\n  startMonitoring(): void {\n    if (this.isMonitoring) {\n      console.log('Database monitoring is already running')\n      return\n    }\n\n    console.log(`Starting database monitoring (interval: ${this.intervalMs}ms)`)\n    this.isMonitoring = true\n    this.lastCpuUsage = process.cpuUsage()\n\n    this.monitoringInterval = setInterval(() => {\n      this.collectMetrics()\n    }, this.intervalMs)\n\n    // 立即收集一次指标\n    this.collectMetrics()\n  }\n\n  /**\n   * 停止监控\n   */\n  stopMonitoring(): void {\n    if (!this.isMonitoring) {\n      return\n    }\n\n    console.log('Stopping database monitoring')\n    this.isMonitoring = false\n\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval)\n      this.monitoringInterval = null\n    }\n  }\n\n  /**\n   * 收集指标\n   */\n  private collectMetrics(): void {\n    try {\n      const stats = enhancedDb.getStats()\n      const memUsage = process.memoryUsage()\n      const cpuUsage = process.cpuUsage(this.lastCpuUsage || undefined)\n      this.lastCpuUsage = process.cpuUsage()\n\n      const metrics: DatabaseMetrics = {\n        timestamp: new Date(),\n        connectionState: stats.state,\n        uptime: stats.uptime,\n        totalQueries: stats.totalQueries,\n        failedQueries: stats.failedQueries,\n        successRate: stats.totalQueries > 0 \n          ? ((stats.totalQueries - stats.failedQueries) / stats.totalQueries) * 100\n          : 100,\n        avgLatency: stats.avgLatency,\n        reconnectAttempts: stats.reconnectAttempts,\n        memoryUsage: {\n          rss: memUsage.rss,\n          heapUsed: memUsage.heapUsed,\n          heapTotal: memUsage.heapTotal,\n          external: memUsage.external\n        },\n        cpuUsage: {\n          user: cpuUsage.user / 1000, // 转换为毫秒\n          system: cpuUsage.system / 1000\n        }\n      }\n\n      // 添加到历史记录\n      this.addMetricsToHistory(metrics)\n\n      // 检查性能阈值\n      this.checkPerformanceThresholds(metrics)\n\n      // 触发指标收集事件\n      this.emit('metrics', metrics)\n\n    } catch (error) {\n      console.error('Failed to collect database metrics:', error)\n      this.createAlert(AlertLevel.ERROR, `指标收集失败: ${error}`)\n    }\n  }\n\n  /**\n   * 添加指标到历史记录\n   */\n  private addMetricsToHistory(metrics: DatabaseMetrics): void {\n    this.metricsHistory.push(metrics)\n\n    // 限制历史记录大小\n    if (this.metricsHistory.length > this.maxHistorySize) {\n      this.metricsHistory = this.metricsHistory.slice(-this.maxHistorySize)\n    }\n  }\n\n  /**\n   * 检查性能阈值\n   */\n  private checkPerformanceThresholds(metrics: DatabaseMetrics): void {\n    // 检查延迟\n    if (metrics.avgLatency > this.thresholds.maxLatency) {\n      this.createAlert(\n        AlertLevel.WARNING,\n        `数据库平均延迟过高: ${metrics.avgLatency.toFixed(2)}ms (阈值: ${this.thresholds.maxLatency}ms)`,\n        metrics,\n        { threshold: this.thresholds.maxLatency, actual: metrics.avgLatency }\n      )\n    }\n\n    // 检查失败率\n    if (metrics.successRate < (100 - this.thresholds.maxFailureRate)) {\n      this.createAlert(\n        AlertLevel.ERROR,\n        `数据库查询失败率过高: ${(100 - metrics.successRate).toFixed(2)}% (阈值: ${this.thresholds.maxFailureRate}%)`,\n        metrics,\n        { threshold: this.thresholds.maxFailureRate, actual: 100 - metrics.successRate }\n      )\n    }\n\n    // 检查重连次数\n    if (metrics.reconnectAttempts > this.thresholds.maxReconnectAttempts) {\n      this.createAlert(\n        AlertLevel.CRITICAL,\n        `数据库重连次数过多: ${metrics.reconnectAttempts} (阈值: ${this.thresholds.maxReconnectAttempts})`,\n        metrics,\n        { threshold: this.thresholds.maxReconnectAttempts, actual: metrics.reconnectAttempts }\n      )\n    }\n\n    // 检查运行时间（如果连接状态为已连接但运行时间过短）\n    if (metrics.connectionState === ConnectionState.CONNECTED && \n        metrics.uptime < this.thresholds.minUptime) {\n      this.createAlert(\n        AlertLevel.WARNING,\n        `数据库连接运行时间过短: ${(metrics.uptime / 1000).toFixed(2)}s (阈值: ${this.thresholds.minUptime / 1000}s)`,\n        metrics,\n        { threshold: this.thresholds.minUptime, actual: metrics.uptime }\n      )\n    }\n\n    // 检查连接状态\n    if (metrics.connectionState === ConnectionState.FAILED || \n        metrics.connectionState === ConnectionState.DISCONNECTED) {\n      this.createAlert(\n        AlertLevel.CRITICAL,\n        `数据库连接状态异常: ${metrics.connectionState}`,\n        metrics\n      )\n    }\n  }\n\n  /**\n   * 创建告警\n   */\n  private createAlert(\n    level: AlertLevel, \n    message: string, \n    metrics?: DatabaseMetrics,\n    threshold?: any\n  ): void {\n    const alert: Alert = {\n      level,\n      message,\n      timestamp: new Date(),\n      metrics: metrics || this.getCurrentMetrics(),\n      threshold\n    }\n\n    this.alerts.push(alert)\n\n    // 限制告警历史大小\n    if (this.alerts.length > 1000) {\n      this.alerts = this.alerts.slice(-1000)\n    }\n\n    // 触发告警事件\n    this.emit('alert', alert)\n\n    // 根据级别输出日志\n    switch (level) {\n      case AlertLevel.INFO:\n        console.info(`[DB Monitor] ${message}`)\n        break\n      case AlertLevel.WARNING:\n        console.warn(`[DB Monitor] ${message}`)\n        break\n      case AlertLevel.ERROR:\n        console.error(`[DB Monitor] ${message}`)\n        break\n      case AlertLevel.CRITICAL:\n        console.error(`[DB Monitor] CRITICAL: ${message}`)\n        break\n    }\n  }\n\n  /**\n   * 获取当前指标\n   */\n  private getCurrentMetrics(): DatabaseMetrics {\n    const stats = enhancedDb.getStats()\n    const memUsage = process.memoryUsage()\n    const cpuUsage = process.cpuUsage()\n\n    return {\n      timestamp: new Date(),\n      connectionState: stats.state,\n      uptime: stats.uptime,\n      totalQueries: stats.totalQueries,\n      failedQueries: stats.failedQueries,\n      successRate: stats.totalQueries > 0 \n        ? ((stats.totalQueries - stats.failedQueries) / stats.totalQueries) * 100\n        : 100,\n      avgLatency: stats.avgLatency,\n      reconnectAttempts: stats.reconnectAttempts,\n      memoryUsage: {\n        rss: memUsage.rss,\n        heapUsed: memUsage.heapUsed,\n        heapTotal: memUsage.heapTotal,\n        external: memUsage.external\n      },\n      cpuUsage: {\n        user: cpuUsage.user / 1000,\n        system: cpuUsage.system / 1000\n      }\n    }\n  }\n\n  /**\n   * 获取指标历史\n   */\n  getMetricsHistory(limit?: number): DatabaseMetrics[] {\n    if (limit) {\n      return this.metricsHistory.slice(-limit)\n    }\n    return [...this.metricsHistory]\n  }\n\n  /**\n   * 获取告警历史\n   */\n  getAlerts(level?: AlertLevel, limit?: number): Alert[] {\n    let alerts = level \n      ? this.alerts.filter(alert => alert.level === level)\n      : [...this.alerts]\n\n    if (limit) {\n      alerts = alerts.slice(-limit)\n    }\n\n    return alerts\n  }\n\n  /**\n   * 获取性能统计\n   */\n  getPerformanceStats(timeRangeMs?: number): {\n    avgLatency: number\n    maxLatency: number\n    minLatency: number\n    successRate: number\n    totalQueries: number\n    failedQueries: number\n    uptimePercentage: number\n  } {\n    let metrics = this.metricsHistory\n\n    // 如果指定了时间范围，过滤指标\n    if (timeRangeMs) {\n      const cutoffTime = new Date(Date.now() - timeRangeMs)\n      metrics = metrics.filter(m => m.timestamp >= cutoffTime)\n    }\n\n    if (metrics.length === 0) {\n      return {\n        avgLatency: 0,\n        maxLatency: 0,\n        minLatency: 0,\n        successRate: 100,\n        totalQueries: 0,\n        failedQueries: 0,\n        uptimePercentage: 0\n      }\n    }\n\n    const latencies = metrics.map(m => m.avgLatency).filter(l => l > 0)\n    const totalQueries = metrics[metrics.length - 1].totalQueries - (metrics[0].totalQueries || 0)\n    const failedQueries = metrics[metrics.length - 1].failedQueries - (metrics[0].failedQueries || 0)\n    const connectedMetrics = metrics.filter(m => m.connectionState === ConnectionState.CONNECTED)\n\n    return {\n      avgLatency: latencies.length > 0 ? latencies.reduce((a, b) => a + b, 0) / latencies.length : 0,\n      maxLatency: latencies.length > 0 ? Math.max(...latencies) : 0,\n      minLatency: latencies.length > 0 ? Math.min(...latencies) : 0,\n      successRate: totalQueries > 0 ? ((totalQueries - failedQueries) / totalQueries) * 100 : 100,\n      totalQueries,\n      failedQueries,\n      uptimePercentage: (connectedMetrics.length / metrics.length) * 100\n    }\n  }\n\n  /**\n   * 更新性能阈值\n   */\n  updateThresholds(thresholds: Partial<PerformanceThresholds>): void {\n    this.thresholds = { ...this.thresholds, ...thresholds }\n    console.log('Database monitoring thresholds updated:', this.thresholds)\n  }\n\n  /**\n   * 清除历史数据\n   */\n  clearHistory(): void {\n    this.metricsHistory = []\n    this.alerts = []\n    console.log('Database monitoring history cleared')\n  }\n\n  /**\n   * 获取监控状态\n   */\n  getMonitoringStatus(): {\n    isMonitoring: boolean\n    intervalMs: number\n    metricsCount: number\n    alertsCount: number\n    thresholds: PerformanceThresholds\n  } {\n    return {\n      isMonitoring: this.isMonitoring,\n      intervalMs: this.intervalMs,\n      metricsCount: this.metricsHistory.length,\n      alertsCount: this.alerts.length,\n      thresholds: this.thresholds\n    }\n  }\n\n  /**\n   * 导出监控数据\n   */\n  exportData(): {\n    metrics: DatabaseMetrics[]\n    alerts: Alert[]\n    thresholds: PerformanceThresholds\n    exportedAt: Date\n  } {\n    return {\n      metrics: this.getMetricsHistory(),\n      alerts: this.getAlerts(),\n      thresholds: this.thresholds,\n      exportedAt: new Date()\n    }\n  }\n}\n\n// 创建全局监控实例\nexport const databaseMonitor = new DatabaseMonitor()\n\n// 如果启用了监控，自动开始监控\nif (process.env.DB_MONITORING_ENABLED === 'true') {\n  databaseMonitor.startMonitoring()\n  \n  // 监听告警事件\n  databaseMonitor.on('alert', (alert: Alert) => {\n    // 这里可以集成外部告警系统，如邮件、Slack、钉钉等\n    if (alert.level === AlertLevel.CRITICAL) {\n      console.error('CRITICAL DATABASE ALERT:', alert.message)\n      // 可以在这里发送紧急通知\n    }\n  })\n  \n  // 监听指标事件\n  databaseMonitor.on('metrics', (metrics: DatabaseMetrics) => {\n    // 这里可以将指标发送到外部监控系统，如Prometheus、InfluxDB等\n    if (process.env.DB_METRICS_COLLECTION === 'true') {\n      // 发送指标到外部系统\n    }\n  })\n}\n\n// 导出便捷函数\nexport const startDatabaseMonitoring = () => databaseMonitor.startMonitoring()\nexport const stopDatabaseMonitoring = () => databaseMonitor.stopMonitoring()\nexport const getDatabaseMetrics = () => databaseMonitor.getMetricsHistory(1)[0]\nexport const getDatabaseAlerts = (level?: AlertLevel) => databaseMonitor.getAlerts(level)\nexport const getDatabasePerformanceStats = (timeRangeMs?: number) => \n  databaseMonitor.getPerformanceStats(timeRangeMs)\n\n// 默认导出监控器\nexport default databaseMonitor"],"names":["AlertLevel","DatabaseMonitor","databaseMonitor","getDatabaseAlerts","getDatabaseMetrics","getDatabasePerformanceStats","startDatabaseMonitoring","stopDatabaseMonitoring","EventEmitter","constructor","thresholds","intervalMs","maxHistorySize","isMonitoring","monitoringInterval","metricsHistory","alerts","lastCpuUsage","maxLatency","parseInt","process","env","DB_MAX_LATENCY","maxFailureRate","parseFloat","DB_MAX_FAILURE_RATE","maxReconnectAttempts","DB_MAX_RECONNECT_ATTEMPTS","minUptime","DB_MIN_UPTIME","setupDatabaseEventListeners","enhancedDb","on","createAlert","error","message","attempt","healthy","startMonitoring","console","log","cpuUsage","setInterval","collectMetrics","stopMonitoring","clearInterval","stats","getStats","memUsage","memoryUsage","undefined","metrics","timestamp","Date","connectionState","state","uptime","totalQueries","failedQueries","successRate","avgLatency","reconnectAttempts","rss","heapUsed","heapTotal","external","user","system","addMetricsToHistory","checkPerformanceThresholds","emit","push","length","slice","toFixed","threshold","actual","ConnectionState","CONNECTED","FAILED","DISCONNECTED","level","alert","getCurrentMetrics","info","warn","getMetricsHistory","limit","getAlerts","filter","getPerformanceStats","timeRangeMs","cutoffTime","now","m","minLatency","uptimePercentage","latencies","map","l","connectedMetrics","reduce","a","b","Math","max","min","updateThresholds","clearHistory","getMonitoringStatus","metricsCount","alertsCount","exportData","exportedAt","DB_MONITORING_ENABLED","DB_METRICS_COLLECTION"],"mappings":"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"}