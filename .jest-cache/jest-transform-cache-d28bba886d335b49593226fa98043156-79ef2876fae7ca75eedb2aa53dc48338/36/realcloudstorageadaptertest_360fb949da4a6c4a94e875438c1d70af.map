{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\storage\\real-cloud-storage-adapter.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/storage/real-cloud-storage-adapter.test.ts\r\n * @description 真实云存储适配器测试 - 无模拟数据的真实测试\r\n * @author B团队测试工程师\r\n * @lastUpdate 2024-12-19\r\n */\r\n\r\nimport { \r\n  RealCloudStorageAdapter, \r\n  CloudProvider,\r\n  realCloudStorageAdapter,\r\n  uploadFile,\r\n  downloadFile,\r\n  deleteFile,\r\n  fileExists,\r\n  getFileInfo,\r\n  listFiles,\r\n  getSignedUrl\r\n} from '@/lib/storage/real-cloud-storage-adapter';\r\nimport { Logger } from '@/lib/utils/logger';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n// 测试配置\r\nconst TEST_UPLOAD_DIR = path.join(process.cwd(), 'test-uploads');\r\nconst TEST_FILE_KEY = 'test-files/sample.txt';\r\nconst TEST_FILE_CONTENT = Buffer.from('This is a test file for real cloud storage adapter');\r\n\r\ndescribe('RealCloudStorageAdapter', () => {\r\n  let adapter: RealCloudStorageAdapter;\r\n\r\n  beforeAll(async () => {\r\n    // 设置测试环境变量\r\n    process.env.UPLOAD_DIR = TEST_UPLOAD_DIR;\r\n    \r\n    // 确保测试目录存在\r\n    if (!fs.existsSync(TEST_UPLOAD_DIR)) {\r\n      fs.mkdirSync(TEST_UPLOAD_DIR, { recursive: true });\r\n    }\r\n\r\n    adapter = RealCloudStorageAdapter.getInstance();\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // 清理测试文件\r\n    try {\r\n      if (fs.existsSync(TEST_UPLOAD_DIR)) {\r\n        fs.rmSync(TEST_UPLOAD_DIR, { recursive: true, force: true });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to cleanup test directory:', error.message);\r\n    }\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    // 清理可能存在的测试文件\r\n    try {\r\n      await adapter.delete(TEST_FILE_KEY);\r\n    } catch (error) {\r\n      // 忽略删除不存在文件的错误\r\n    }\r\n  });\r\n\r\n  describe('单例模式', () => {\r\n    it('应该返回同一个实例', () => {\r\n      const instance1 = RealCloudStorageAdapter.getInstance();\r\n      const instance2 = RealCloudStorageAdapter.getInstance();\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n\r\n    it('应该与导出的单例实例相同', () => {\r\n      const instance = RealCloudStorageAdapter.getInstance();\r\n      expect(instance).toBe(realCloudStorageAdapter);\r\n    });\r\n  });\r\n\r\n  describe('本地存储功能', () => {\r\n    it('应该成功上传文件到本地存储', async () => {\r\n      const result = await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      expect(result).toMatchObject({\r\n        key: TEST_FILE_KEY,\r\n        size: TEST_FILE_CONTENT.length,\r\n      });\r\n      expect(result.url).toContain('file://');\r\n      expect(result.etag).toBeDefined();\r\n      expect(typeof result.etag).toBe('string');\r\n    });\r\n\r\n    it('应该成功下载已上传的文件', async () => {\r\n      // 先上传文件\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 然后下载文件\r\n      const downloadedContent = await adapter.download({\r\n        key: TEST_FILE_KEY,\r\n      });\r\n\r\n      expect(downloadedContent).toEqual(TEST_FILE_CONTENT);\r\n    });\r\n\r\n    it('应该正确检查文件是否存在', async () => {\r\n      // 检查不存在的文件\r\n      const existsBefore = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsBefore).toBe(false);\r\n\r\n      // 上传文件\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 检查存在的文件\r\n      const existsAfter = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsAfter).toBe(true);\r\n    });\r\n\r\n    it('应该成功删除文件', async () => {\r\n      // 先上传文件\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 确认文件存在\r\n      const existsBefore = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsBefore).toBe(true);\r\n\r\n      // 删除文件\r\n      await adapter.delete(TEST_FILE_KEY);\r\n\r\n      // 确认文件已删除\r\n      const existsAfter = await adapter.exists(TEST_FILE_KEY);\r\n      expect(existsAfter).toBe(false);\r\n    });\r\n\r\n    it('应该获取正确的文件信息', async () => {\r\n      // 上传文件\r\n      const uploadResult = await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 获取文件信息\r\n      const fileInfo = await adapter.getFileInfo(TEST_FILE_KEY);\r\n\r\n      expect(fileInfo).toMatchObject({\r\n        key: TEST_FILE_KEY,\r\n        size: TEST_FILE_CONTENT.length,\r\n        etag: uploadResult.etag,\r\n      });\r\n             expect(fileInfo.lastModified).toBeDefined();\r\n       expect(fileInfo.lastModified instanceof Date).toBe(true);\r\n      expect(fileInfo.url).toContain('file://');\r\n    });\r\n\r\n    it('应该列出文件', async () => {\r\n      // 上传多个测试文件\r\n      const testFiles = [\r\n        { key: 'test-files/file1.txt', content: Buffer.from('File 1 content') },\r\n        { key: 'test-files/file2.txt', content: Buffer.from('File 2 content') },\r\n        { key: 'other/file3.txt', content: Buffer.from('File 3 content') },\r\n      ];\r\n\r\n      for (const file of testFiles) {\r\n        await adapter.upload(file.content, {\r\n          key: file.key,\r\n          contentType: 'text/plain',\r\n        });\r\n      }\r\n\r\n      // 列出所有文件\r\n      const allFiles = await adapter.listFiles();\r\n      expect(allFiles.length).toBeGreaterThanOrEqual(testFiles.length);\r\n\r\n      // 列出特定前缀的文件\r\n      const testPrefixFiles = await adapter.listFiles('test-files/');\r\n      expect(testPrefixFiles.length).toBe(2);\r\n      expect(testPrefixFiles.every(file => file.key.startsWith('test-files/'))).toBe(true);\r\n\r\n      // 清理测试文件\r\n      for (const file of testFiles) {\r\n        await adapter.delete(file.key);\r\n      }\r\n    });\r\n\r\n    it('应该生成签名URL', async () => {\r\n      const signedUrl = await adapter.getSignedUrl(TEST_FILE_KEY, 'get');\r\n      expect(signedUrl).toContain('file://');\r\n      expect(signedUrl).toContain(TEST_FILE_KEY);\r\n    });\r\n\r\n    it('应该获取存储统计信息', async () => {\r\n      // 上传一些测试文件\r\n      const testFiles = [\r\n        { key: 'stats-test/file1.txt', content: Buffer.from('Content 1') },\r\n        { key: 'stats-test/file2.txt', content: Buffer.from('Content 2') },\r\n      ];\r\n\r\n      for (const file of testFiles) {\r\n        await adapter.upload(file.content, {\r\n          key: file.key,\r\n          contentType: 'text/plain',\r\n        });\r\n      }\r\n\r\n      const stats = await adapter.getStats();\r\n      expect(stats).toMatchObject({\r\n        totalFiles: expect.any(Number),\r\n        totalSize: expect.any(Number),\r\n        usedQuota: expect.any(Number),\r\n        availableQuota: expect.any(Number),\r\n      });\r\n      expect(stats.totalFiles).toBeGreaterThanOrEqual(testFiles.length);\r\n      expect(stats.totalSize).toBeGreaterThan(0);\r\n\r\n      // 清理测试文件\r\n      for (const file of testFiles) {\r\n        await adapter.delete(file.key);\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理下载不存在文件的情况', async () => {\r\n      await expect(adapter.download({\r\n        key: 'non-existent-file.txt',\r\n      })).rejects.toThrow();\r\n    });\r\n\r\n    it('应该处理获取不存在文件信息的情况', async () => {\r\n      await expect(adapter.getFileInfo('non-existent-file.txt')).rejects.toThrow();\r\n    });\r\n\r\n    it('应该安全处理删除不存在文件的情况', async () => {\r\n      // 删除不存在的文件不应该抛出错误\r\n      await expect(adapter.delete('non-existent-file.txt')).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('便捷方法', () => {\r\n    it('uploadFile 方法应该正常工作', async () => {\r\n      const result = await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      expect(result.key).toBe(TEST_FILE_KEY);\r\n      expect(result.size).toBe(TEST_FILE_CONTENT.length);\r\n    });\r\n\r\n    it('downloadFile 方法应该正常工作', async () => {\r\n      // 先上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 然后下载文件\r\n      const content = await downloadFile({ key: TEST_FILE_KEY });\r\n      expect(content).toEqual(TEST_FILE_CONTENT);\r\n    });\r\n\r\n    it('fileExists 方法应该正常工作', async () => {\r\n      // 检查不存在的文件\r\n      const existsBefore = await fileExists(TEST_FILE_KEY);\r\n      expect(existsBefore).toBe(false);\r\n\r\n      // 上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 检查存在的文件\r\n      const existsAfter = await fileExists(TEST_FILE_KEY);\r\n      expect(existsAfter).toBe(true);\r\n    });\r\n\r\n    it('deleteFile 方法应该正常工作', async () => {\r\n      // 先上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 删除文件\r\n      await deleteFile(TEST_FILE_KEY);\r\n\r\n      // 确认文件已删除\r\n      const exists = await fileExists(TEST_FILE_KEY);\r\n      expect(exists).toBe(false);\r\n    });\r\n\r\n    it('getFileInfo 方法应该正常工作', async () => {\r\n      // 先上传文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 获取文件信息\r\n      const info = await getFileInfo(TEST_FILE_KEY);\r\n      expect(info.key).toBe(TEST_FILE_KEY);\r\n      expect(info.size).toBe(TEST_FILE_CONTENT.length);\r\n    });\r\n\r\n    it('listFiles 方法应该正常工作', async () => {\r\n      // 上传测试文件\r\n      await uploadFile(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      // 列出文件\r\n      const files = await listFiles('test-files/');\r\n      expect(files.length).toBeGreaterThanOrEqual(1);\r\n      expect(files.some(file => file.key === TEST_FILE_KEY)).toBe(true);\r\n    });\r\n\r\n    it('getSignedUrl 方法应该正常工作', async () => {\r\n      const url = await getSignedUrl(TEST_FILE_KEY, 'get');\r\n      expect(url).toContain('file://');\r\n      expect(url).toContain(TEST_FILE_KEY);\r\n    });\r\n  });\r\n\r\n  describe('AWS S3 集成检查', () => {\r\n    it('应该在没有AWS凭证时使用本地存储', () => {\r\n      // 确保没有设置AWS环境变量\r\n      delete process.env.AWS_ACCESS_KEY_ID;\r\n      delete process.env.AWS_SECRET_ACCESS_KEY;\r\n\r\n      // 创建新实例应该默认使用本地存储\r\n      const newAdapter = new (RealCloudStorageAdapter as any)();\r\n      expect(newAdapter).toBeDefined();\r\n    });\r\n\r\n    it('应该在有AWS凭证时尝试初始化AWS S3', () => {\r\n      // 设置模拟的AWS环境变量\r\n      process.env.AWS_ACCESS_KEY_ID = 'test-key';\r\n      process.env.AWS_SECRET_ACCESS_KEY = 'test-secret';\r\n      process.env.AWS_REGION = 'us-east-1';\r\n      process.env.AWS_S3_BUCKET = 'test-bucket';\r\n\r\n      // 由于没有真实的AWS SDK，这应该会回退到本地存储\r\n      const newAdapter = new (RealCloudStorageAdapter as any)();\r\n      expect(newAdapter).toBeDefined();\r\n\r\n      // 清理环境变量\r\n      delete process.env.AWS_ACCESS_KEY_ID;\r\n      delete process.env.AWS_SECRET_ACCESS_KEY;\r\n      delete process.env.AWS_REGION;\r\n      delete process.env.AWS_S3_BUCKET;\r\n    });\r\n  });\r\n\r\n  describe('性能测试', () => {\r\n    it('应该在合理时间内完成文件操作', async () => {\r\n      const startTime = Date.now();\r\n\r\n      // 执行一系列文件操作\r\n      await adapter.upload(TEST_FILE_CONTENT, {\r\n        key: TEST_FILE_KEY,\r\n        contentType: 'text/plain',\r\n      });\r\n\r\n      const exists = await adapter.exists(TEST_FILE_KEY);\r\n      expect(exists).toBe(true);\r\n\r\n      const content = await adapter.download({ key: TEST_FILE_KEY });\r\n      expect(content).toEqual(TEST_FILE_CONTENT);\r\n\r\n      await adapter.delete(TEST_FILE_KEY);\r\n\r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 所有操作应该在5秒内完成\r\n      expect(duration).toBeLessThan(5000);\r\n    });\r\n\r\n    it('应该高效处理多个小文件', async () => {\r\n      const fileCount = 10;\r\n      const files = Array.from({ length: fileCount }, (_, i) => ({\r\n        key: `perf-test/file-${i}.txt`,\r\n        content: Buffer.from(`Content for file ${i}`),\r\n      }));\r\n\r\n      const startTime = Date.now();\r\n\r\n      // 并发上传文件\r\n      await Promise.all(files.map(file => \r\n        adapter.upload(file.content, {\r\n          key: file.key,\r\n          contentType: 'text/plain',\r\n        })\r\n      ));\r\n\r\n      // 并发下载文件\r\n      const downloadedContents = await Promise.all(files.map(file =>\r\n        adapter.download({ key: file.key })\r\n      ));\r\n\r\n      // 验证下载的内容\r\n      downloadedContents.forEach((content, i) => {\r\n        expect(content).toEqual(files[i].content);\r\n      });\r\n\r\n      // 清理文件\r\n      await Promise.all(files.map(file => adapter.delete(file.key)));\r\n\r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 操作应该在合理时间内完成\r\n      expect(duration).toBeLessThan(10000);\r\n    });\r\n  });\r\n}); "],"names":["TEST_UPLOAD_DIR","path","join","process","cwd","TEST_FILE_KEY","TEST_FILE_CONTENT","Buffer","from","describe","adapter","beforeAll","env","UPLOAD_DIR","fs","existsSync","mkdirSync","recursive","RealCloudStorageAdapter","getInstance","afterAll","rmSync","force","error","console","warn","message","beforeEach","delete","it","instance1","instance2","expect","toBe","instance","realCloudStorageAdapter","result","upload","key","contentType","toMatchObject","size","length","url","toContain","etag","toBeDefined","downloadedContent","download","toEqual","existsBefore","exists","existsAfter","uploadResult","fileInfo","getFileInfo","lastModified","Date","testFiles","content","file","allFiles","listFiles","toBeGreaterThanOrEqual","testPrefixFiles","every","startsWith","signedUrl","getSignedUrl","stats","getStats","totalFiles","any","Number","totalSize","usedQuota","availableQuota","toBeGreaterThan","rejects","toThrow","resolves","not","uploadFile","downloadFile","fileExists","deleteFile","info","files","some","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","newAdapter","AWS_REGION","AWS_S3_BUCKET","startTime","now","endTime","duration","toBeLessThan","fileCount","Array","_","i","Promise","all","map","downloadedContents","forEach"],"mappings":"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"}