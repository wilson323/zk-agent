{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\admin.test.ts"],"sourcesContent":["/**\n * 管理员API路由错误处理测试\n * 测试管理员功能端点的各种错误场景和权限控制\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '../../../app/api/admin/route';\nimport { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\nimport { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/admin-service', () => ({\n  getSystemStats: jest.fn(),\n  getUserManagement: jest.fn(),\n  updateSystemConfig: jest.fn(),\n  performMaintenance: jest.fn(),\n  getAuditLogs: jest.fn(),\n  managePermissions: jest.fn(),\n  backupSystem: jest.fn(),\n  restoreSystem: jest.fn()\n}));\n\njest.mock('../../../lib/auth/admin-auth', () => ({\n  validateAdminSession: jest.fn(),\n  checkSuperAdminPermissions: jest.fn(),\n  validateAdminToken: jest.fn(),\n  logAdminAction: jest.fn()\n}));\n\njest.mock('../../../lib/storage/audit-logger', () => ({\n  logSecurityEvent: jest.fn(),\n  logSystemChange: jest.fn(),\n  getAuditTrail: jest.fn()\n}));\n\ndescribe('Admin API Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('Authentication and Authorization', () => {\n    it('should handle missing admin authentication', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/stats');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n      expect(data.error.message).toContain('Admin authentication required');\n    });\n\n    it('should handle invalid admin token', async () => {\n      const { validateAdminToken } = require('../../../lib/auth/admin-auth');\n      validateAdminToken.mockRejectedValue(new Error('Invalid admin token'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer invalid-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Invalid admin token');\n    });\n\n    it('should handle expired admin session', async () => {\n      const { validateAdminSession } = require('../../../lib/auth/admin-auth');\n      validateAdminSession.mockRejectedValue(new Error('Admin session expired'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer expired-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Admin session expired');\n    });\n\n    it('should handle insufficient admin permissions', async () => {\n      const { checkSuperAdminPermissions } = require('../../../lib/auth/admin-auth');\n      checkSuperAdminPermissions.mockRejectedValue(new Error('Super admin permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer admin-token' },\n        body: JSON.stringify({ setting: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Super admin permissions required');\n    });\n\n    it('should handle role-based access control violations', async () => {\n      const { validateAdminSession } = require('../../../lib/auth/admin-auth');\n      validateAdminSession.mockResolvedValue({ role: 'moderator', permissions: ['read'] });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/delete', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer moderator-token' }\n      });\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Insufficient permissions');\n    });\n  });\n\n  describe('System Statistics Errors', () => {\n    it('should handle database connection failure for stats', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Database connection failed');\n    });\n\n    it('should handle metrics collection service unavailable', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Metrics service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Metrics service unavailable');\n    });\n\n    it('should handle partial stats collection failure', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockResolvedValue({\n        users: { total: 100, active: 80 },\n        system: null, // Failed to collect system stats\n        errors: ['Failed to collect system metrics']\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(206); // Partial content\n      expect(data.data.errors).toContain('Failed to collect system metrics');\n    });\n  });\n\n  describe('User Management Errors', () => {\n    it('should handle user not found for management operations', async () => {\n      const { getUserManagement } = require('../../../lib/services/admin-service');\n      getUserManagement.mockRejectedValue(new Error('User not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/nonexistent-id', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('User not found');\n    });\n\n    it('should handle invalid user ID format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/users/invalid-id-format', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid user ID format');\n    });\n\n    it('should handle attempt to modify super admin account', async () => {\n      const { getUserManagement } = require('../../../lib/services/admin-service');\n      getUserManagement.mockRejectedValue(new Error('Cannot modify super admin account'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/super-admin-id', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer admin-token' },\n        body: JSON.stringify({ role: 'user' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Cannot modify super admin account');\n    });\n\n    it('should handle bulk user operation failure', async () => {\n      const { getUserManagement } = require('../../../lib/services/admin-service');\n      getUserManagement.mockRejectedValue(new Error('Bulk operation failed: some users not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/users/bulk', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ userIds: ['id1', 'id2', 'id3'], action: 'suspend' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.error.message).toContain('Bulk operation failed');\n    });\n  });\n\n  describe('System Configuration Errors', () => {\n    it('should handle invalid configuration format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ invalidConfig: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid configuration format');\n    });\n\n    it('should handle configuration validation failure', async () => {\n      const { updateSystemConfig } = require('../../../lib/services/admin-service');\n      updateSystemConfig.mockRejectedValue(new Error('Configuration validation failed: invalid database URL'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ databaseUrl: 'invalid-url' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Configuration validation failed');\n    });\n\n    it('should handle configuration backup failure', async () => {\n      const { updateSystemConfig } = require('../../../lib/services/admin-service');\n      updateSystemConfig.mockRejectedValue(new Error('Failed to backup current configuration'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ setting: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to backup current configuration');\n    });\n\n    it('should handle configuration rollback on apply failure', async () => {\n      const { updateSystemConfig } = require('../../../lib/services/admin-service');\n      updateSystemConfig.mockRejectedValue(new Error('Configuration apply failed, rolled back to previous version'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/system/config', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ setting: 'value' })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Configuration apply failed, rolled back');\n    });\n  });\n\n  describe('Maintenance Operations Errors', () => {\n    it('should handle maintenance mode activation failure', async () => {\n      const { performMaintenance } = require('../../../lib/services/admin-service');\n      performMaintenance.mockRejectedValue(new Error('Failed to activate maintenance mode'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/maintenance', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ action: 'enable', reason: 'System update' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to activate maintenance mode');\n    });\n\n    it('should handle database maintenance operation failure', async () => {\n      const { performMaintenance } = require('../../../lib/services/admin-service');\n      performMaintenance.mockRejectedValue(new Error('Database maintenance failed: table lock timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/maintenance/database', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ operation: 'optimize' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Database maintenance failed');\n    });\n\n    it('should handle cache clear operation failure', async () => {\n      const { performMaintenance } = require('../../../lib/services/admin-service');\n      performMaintenance.mockRejectedValue(new Error('Cache clear failed: Redis connection error'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/maintenance/cache', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ action: 'clear' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Cache clear failed');\n    });\n  });\n\n  describe('Audit Log Errors', () => {\n    it('should handle audit log retrieval failure', async () => {\n      const { getAuditLogs } = require('../../../lib/services/admin-service');\n      getAuditLogs.mockRejectedValue(new Error('Audit log service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/audit-logs', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Audit log service unavailable');\n    });\n\n    it('should handle invalid audit log query parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/admin/audit-logs?startDate=invalid&endDate=also-invalid', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid date format');\n    });\n\n    it('should handle audit log export failure', async () => {\n      const { getAuditLogs } = require('../../../lib/services/admin-service');\n      getAuditLogs.mockRejectedValue(new Error('Export failed: insufficient disk space'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/audit-logs/export', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ format: 'csv', dateRange: '30d' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient storage\n      expect(data.error.message).toContain('insufficient disk space');\n    });\n  });\n\n  describe('Backup and Restore Errors', () => {\n    it('should handle backup creation failure', async () => {\n      const { backupSystem } = require('../../../lib/services/admin-service');\n      backupSystem.mockRejectedValue(new Error('Backup failed: storage quota exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/backup', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ type: 'full', compression: true })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507);\n      expect(data.error.message).toContain('storage quota exceeded');\n    });\n\n    it('should handle backup corruption detection', async () => {\n      const { backupSystem } = require('../../../lib/services/admin-service');\n      backupSystem.mockRejectedValue(new Error('Backup verification failed: data corruption detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/backup', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ type: 'incremental' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('data corruption detected');\n    });\n\n    it('should handle restore operation failure', async () => {\n      const { restoreSystem } = require('../../../lib/services/admin-service');\n      restoreSystem.mockRejectedValue(new Error('Restore failed: backup file not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/restore', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ backupId: 'backup-123' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.message).toContain('backup file not found');\n    });\n\n    it('should handle restore validation failure', async () => {\n      const { restoreSystem } = require('../../../lib/services/admin-service');\n      restoreSystem.mockRejectedValue(new Error('Restore validation failed: incompatible backup version'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/restore', {\n        method: 'POST',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ backupId: 'backup-old-version' })\n      });\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('incompatible backup version');\n    });\n  });\n\n  describe('Permission Management Errors', () => {\n    it('should handle invalid permission assignment', async () => {\n      const { managePermissions } = require('../../../lib/services/admin-service');\n      managePermissions.mockRejectedValue(new Error('Invalid permission: NONEXISTENT_PERMISSION'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/permissions', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ userId: 'user-123', permissions: ['NONEXISTENT_PERMISSION'] })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid permission');\n    });\n\n    it('should handle circular role dependency', async () => {\n      const { managePermissions } = require('../../../lib/services/admin-service');\n      managePermissions.mockRejectedValue(new Error('Circular role dependency detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/roles', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer valid-admin-token' },\n        body: JSON.stringify({ roleId: 'role-a', inheritsFrom: ['role-b'] })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Circular role dependency');\n    });\n\n    it('should handle permission escalation attempt', async () => {\n      const { managePermissions } = require('../../../lib/services/admin-service');\n      managePermissions.mockRejectedValue(new Error('Permission escalation not allowed'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/permissions', {\n        method: 'PUT',\n        headers: { 'Authorization': 'Bearer admin-token' },\n        body: JSON.stringify({ userId: 'user-123', permissions: ['SUPER_ADMIN'] })\n      });\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Permission escalation not allowed');\n    });\n  });\n\n  describe('Security and Audit Logging', () => {\n    it('should log all admin actions for audit trail', async () => {\n      const { logAdminAction } = require('../../../lib/auth/admin-auth');\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockResolvedValue({ users: 100 });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      await GET(request);\n\n      expect(logAdminAction).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'VIEW_SYSTEM_STATS',\n          adminId: expect.any(String),\n          timestamp: expect.any(Date)\n        })\n      );\n    });\n\n    it('should log security violations', async () => {\n      const { logSecurityEvent } = require('../../../lib/storage/audit-logger');\n      \n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer invalid-token' }\n      });\n      await GET(request);\n\n      expect(logSecurityEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'UNAUTHORIZED_ADMIN_ACCESS',\n          severity: 'HIGH',\n          details: expect.any(Object)\n        })\n      );\n    });\n\n    it('should handle audit logging failure gracefully', async () => {\n      const { logAdminAction } = require('../../../lib/auth/admin-auth');\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      \n      logAdminAction.mockRejectedValue(new Error('Audit log service down'));\n      getSystemStats.mockResolvedValue({ users: 100 });\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n\n      // Should still succeed even if audit logging fails\n      expect(response.status).toBe(200);\n    });\n  });\n\n  describe('Rate Limiting and DDoS Protection', () => {\n    it('should handle admin API rate limiting', async () => {\n      const requests = Array.from({ length: 20 }, () => \n        new NextRequest('http://localhost:3000/api/admin/stats', {\n          headers: { 'Authorization': 'Bearer valid-admin-token' }\n        })\n      );\n\n      const responses = await Promise.all(requests.map(req => GET(req)));\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n\n    it('should implement stricter rate limits for sensitive operations', async () => {\n      const sensitiveRequests = Array.from({ length: 5 }, () => \n        new NextRequest('http://localhost:3000/api/admin/system/config', {\n          method: 'PUT',\n          headers: { 'Authorization': 'Bearer valid-admin-token' },\n          body: JSON.stringify({ setting: 'value' })\n        })\n      );\n\n      const responses = await Promise.all(sensitiveRequests.map(req => PUT(req)));\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide detailed error context for debugging', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Database query timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('getSystemStats');\n      expect(data.error.context.timestamp).toBeDefined();\n    });\n\n    it('should include system health indicators in error responses', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Service degraded'));\n\n      const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n        headers: { 'Authorization': 'Bearer valid-admin-token' }\n      });\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.systemHealth).toBeDefined();\n      expect(data.error.systemHealth.status).toBe('degraded');\n    });\n\n    it('should track admin error patterns for monitoring', async () => {\n      const { getSystemStats } = require('../../../lib/services/admin-service');\n      getSystemStats.mockRejectedValue(new Error('Repeated failure'));\n\n      // Simulate multiple failures\n      for (let i = 0; i < 3; i++) {\n        const request = new NextRequest('http://localhost:3000/api/admin/stats', {\n          headers: { 'Authorization': 'Bearer valid-admin-token' }\n        });\n        await GET(request);\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.adminErrorCount).toBeGreaterThan(0);\n    });\n  });\n});"],"names":["jest","mock","getSystemStats","fn","getUserManagement","updateSystemConfig","performMaintenance","getAuditLogs","managePermissions","backupSystem","restoreSystem","validateAdminSession","checkSuperAdminPermissions","validateAdminToken","logAdminAction","logSecurityEvent","logSystemChange","getAuditTrail","describe","errorHandler","beforeEach","GlobalErrorHandler","getInstance","clearAllMocks","it","request","NextRequest","response","GET","data","json","expect","status","toBe","error","code","message","toContain","require","mockRejectedValue","Error","headers","method","body","JSON","stringify","setting","PUT","mockResolvedValue","role","permissions","DELETE","users","total","active","system","errors","userIds","action","invalidConfig","databaseUrl","reason","POST","operation","format","dateRange","type","compression","backupId","userId","roleId","inheritsFrom","toHaveBeenCalledWith","objectContaining","adminId","any","String","timestamp","Date","severity","details","Object","requests","Array","from","length","responses","Promise","all","map","req","rateLimitedResponses","filter","res","toBeGreaterThan","sensitiveRequests","context","toBeDefined","systemHealth","i","stats","getErrorStats","adminErrorCount"],"mappings":"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"}