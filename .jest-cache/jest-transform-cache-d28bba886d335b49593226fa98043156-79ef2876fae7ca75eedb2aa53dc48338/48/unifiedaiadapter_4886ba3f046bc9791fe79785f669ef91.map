{"version":3,"sources":["E:\\zk-agent\\lib\\ai\\unified-ai-adapter.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file lib/ai/unified-ai-adapter.ts\r\n * @description 统一AI服务适配器 - B团队核心组件\r\n * @author B团队AI集成架构师\r\n * @lastUpdate 2024-12-19\r\n * @integrations FastGPT、千问、硅基流动标准化适配器\r\n */\r\n\r\nimport { Logger } from '@/lib/utils/logger';\r\nimport { performanceMonitor } from '@/lib/middleware/performance-monitor';\r\n\r\n// AI服务提供商枚举\r\nexport enum AIProvider {\r\n  FASTGPT = 'fastgpt',\r\n  QIANWEN = 'qianwen',\r\n  SILICONFLOW = 'siliconflow',\r\n}\r\n\r\n// 统一的AI请求接口\r\nexport interface AIRequest {\r\n  messages: Array<{\r\n    role: 'system' | 'user' | 'assistant';\r\n    content: string;\r\n  }>;\r\n  model?: string;\r\n  temperature?: number;\r\n  maxTokens?: number;\r\n  stream?: boolean;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// 统一的AI响应接口\r\nexport interface AIResponse {\r\n  success: boolean;\r\n  data?: {\r\n    content: string;\r\n    usage?: {\r\n      promptTokens: number;\r\n      completionTokens: number;\r\n      totalTokens: number;\r\n    };\r\n    model: string;\r\n    finishReason?: string;\r\n  };\r\n  error?: string;\r\n  provider: AIProvider;\r\n  requestId: string;\r\n  latency: number;\r\n}\r\n\r\n// AI服务配置接口\r\nexport interface AIServiceConfig {\r\n  provider: AIProvider;\r\n  baseUrl: string;\r\n  apiKey: string;\r\n  model: string;\r\n  timeout?: number;\r\n  retryAttempts?: number;\r\n  circuitBreakerThreshold?: number;\r\n}\r\n\r\n// 熔断器状态\r\nenum CircuitBreakerState {\r\n  CLOSED = 'closed',\r\n  OPEN = 'open',\r\n  HALF_OPEN = 'half_open',\r\n}\r\n\r\n// 熔断器类\r\nclass CircuitBreaker {\r\n  private state = CircuitBreakerState.CLOSED;\r\n  private failureCount = 0;\r\n  private lastFailureTime = 0;\r\n  private readonly threshold: number;\r\n  private readonly timeout: number;\r\n\r\n  constructor(threshold = 5, timeout = 60000) {\r\n    this.threshold = threshold;\r\n    this.timeout = timeout;\r\n  }\r\n\r\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\r\n    if (this.state === CircuitBreakerState.OPEN) {\r\n      if (Date.now() - this.lastFailureTime > this.timeout) {\r\n        this.state = CircuitBreakerState.HALF_OPEN;\r\n      } else {\r\n        throw new Error('Circuit breaker is OPEN');\r\n      }\r\n    }\r\n\r\n    try {\r\n      const result = await operation();\r\n      this.onSuccess();\r\n      return result;\r\n    } catch (error) {\r\n      this.onFailure();\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private onSuccess(): void {\r\n    this.failureCount = 0;\r\n    this.state = CircuitBreakerState.CLOSED;\r\n  }\r\n\r\n  private onFailure(): void {\r\n    this.failureCount++;\r\n    this.lastFailureTime = Date.now();\r\n    \r\n    if (this.failureCount >= this.threshold) {\r\n      this.state = CircuitBreakerState.OPEN;\r\n    }\r\n  }\r\n\r\n  getState(): CircuitBreakerState {\r\n    return this.state;\r\n  }\r\n}\r\n\r\n// 统一AI适配器类\r\nexport class UnifiedAIAdapter {\r\n  private logger = new Logger('UnifiedAIAdapter');\r\n  private circuitBreakers = new Map<AIProvider, CircuitBreaker>();\r\n  private configs = new Map<AIProvider, AIServiceConfig>();\r\n\r\n  constructor() {\r\n    // 初始化熔断器\r\n    Object.values(AIProvider).forEach(provider => {\r\n      this.circuitBreakers.set(provider, new CircuitBreaker());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册AI服务配置\r\n   */\r\n  registerService(config: AIServiceConfig): void {\r\n    this.configs.set(config.provider, config);\r\n    this.logger.info('AI service registered', {\r\n      provider: config.provider,\r\n      model: config.model,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 统一的AI调用接口\r\n   */\r\n  async call(\r\n    provider: AIProvider,\r\n    request: AIRequest\r\n  ): Promise<AIResponse> {\r\n    const requestId = this.generateRequestId();\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const config = this.configs.get(provider);\r\n      if (!config) {\r\n        throw new Error(`AI service not configured: ${provider}`);\r\n      }\r\n\r\n      const circuitBreaker = this.circuitBreakers.get(provider)!;\r\n      \r\n      const response = await circuitBreaker.execute(async () => {\r\n        return await this.executeRequest(config, request, requestId);\r\n      });\r\n\r\n      const latency = Date.now() - startTime;\r\n\r\n      this.logger.info('AI request completed', {\r\n        provider,\r\n        requestId,\r\n        latency,\r\n        model: config.model,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: response,\r\n        provider,\r\n        requestId,\r\n        latency,\r\n      };\r\n\r\n    } catch (error) {\r\n      const latency = Date.now() - startTime;\r\n      \r\n      this.logger.error('AI request failed', {\r\n        provider,\r\n        requestId,\r\n        latency,\r\n        error: error.message,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        provider,\r\n        requestId,\r\n        latency,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行具体的AI请求\r\n   */\r\n  private async executeRequest(\r\n    config: AIServiceConfig,\r\n    request: AIRequest,\r\n    requestId: string\r\n  ): Promise<any> {\r\n    switch (config.provider) {\r\n      case AIProvider.FASTGPT:\r\n        return await this.callFastGPT(config, request, requestId);\r\n      case AIProvider.QIANWEN:\r\n        return await this.callQianwen(config, request, requestId);\r\n      case AIProvider.SILICONFLOW:\r\n        return await this.callSiliconFlow(config, request, requestId);\r\n      default:\r\n        throw new Error(`Unsupported provider: ${config.provider}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * FastGPT API调用\r\n   */\r\n  private async callFastGPT(\r\n    config: AIServiceConfig,\r\n    request: AIRequest,\r\n    requestId: string\r\n  ): Promise<any> {\r\n    const response = await fetch(`${config.baseUrl}/api/v1/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${config.apiKey}`,\r\n        'X-Request-ID': requestId,\r\n      },\r\n      body: JSON.stringify({\r\n        messages: request.messages,\r\n        model: request.model || config.model,\r\n        temperature: request.temperature || 0.7,\r\n        max_tokens: request.maxTokens || 2048,\r\n        stream: request.stream || false,\r\n      }),\r\n      signal: AbortSignal.timeout(config.timeout || 30000),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`FastGPT API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    return {\r\n      content: data.choices?.[0]?.message?.content || '',\r\n      usage: data.usage,\r\n      model: data.model,\r\n      finishReason: data.choices?.[0]?.finish_reason,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 千问API调用\r\n   */\r\n  private async callQianwen(\r\n    config: AIServiceConfig,\r\n    request: AIRequest,\r\n    requestId: string\r\n  ): Promise<any> {\r\n    const response = await fetch(`${config.baseUrl}/services/aigc/text-generation/generation`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${config.apiKey}`,\r\n        'X-DashScope-SSE': request.stream ? 'enable' : 'disable',\r\n        'X-Request-ID': requestId,\r\n      },\r\n      body: JSON.stringify({\r\n        model: request.model || config.model,\r\n        input: {\r\n          messages: request.messages,\r\n        },\r\n        parameters: {\r\n          temperature: request.temperature || 0.7,\r\n          max_tokens: request.maxTokens || 2048,\r\n          result_format: 'message',\r\n        },\r\n      }),\r\n      signal: AbortSignal.timeout(config.timeout || 30000),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Qianwen API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    if (data.code && data.code !== '200') {\r\n      throw new Error(`Qianwen API error: ${data.message}`);\r\n    }\r\n\r\n    return {\r\n      content: data.output?.choices?.[0]?.message?.content || '',\r\n      usage: data.usage,\r\n      model: data.model,\r\n      finishReason: data.output?.choices?.[0]?.finish_reason,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 硅基流动API调用\r\n   */\r\n  private async callSiliconFlow(\r\n    config: AIServiceConfig,\r\n    request: AIRequest,\r\n    requestId: string\r\n  ): Promise<any> {\r\n    const response = await fetch(`${config.baseUrl}/v1/chat/completions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${config.apiKey}`,\r\n        'X-Request-ID': requestId,\r\n      },\r\n      body: JSON.stringify({\r\n        model: request.model || config.model,\r\n        messages: request.messages,\r\n        temperature: request.temperature || 0.7,\r\n        max_tokens: request.maxTokens || 2048,\r\n        stream: request.stream || false,\r\n      }),\r\n      signal: AbortSignal.timeout(config.timeout || 30000),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`SiliconFlow API error: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    return {\r\n      content: data.choices?.[0]?.message?.content || '',\r\n      usage: data.usage,\r\n      model: data.model,\r\n      finishReason: data.choices?.[0]?.finish_reason,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 批量调用（负载均衡）\r\n   */\r\n  async callWithLoadBalancing(\r\n    providers: AIProvider[],\r\n    request: AIRequest\r\n  ): Promise<AIResponse> {\r\n    const availableProviders = providers.filter(provider => {\r\n      const circuitBreaker = this.circuitBreakers.get(provider);\r\n      return circuitBreaker?.getState() !== CircuitBreakerState.OPEN;\r\n    });\r\n\r\n    if (availableProviders.length === 0) {\r\n      throw new Error('No available AI providers');\r\n    }\r\n\r\n    // 简单的轮询负载均衡\r\n    const selectedProvider = availableProviders[\r\n      Math.floor(Math.random() * availableProviders.length)\r\n    ];\r\n\r\n    return await this.call(selectedProvider, request);\r\n  }\r\n\r\n  /**\r\n   * 获取服务健康状态\r\n   */\r\n  async getHealthStatus(): Promise<Record<AIProvider, any>> {\r\n    const status: Record<string, any> = {};\r\n\r\n    for (const [provider, config] of this.configs.entries()) {\r\n      const circuitBreaker = this.circuitBreakers.get(provider)!;\r\n      \r\n      try {\r\n        const startTime = Date.now();\r\n        const response = await fetch(`${config.baseUrl}/health`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${config.apiKey}`,\r\n          },\r\n          signal: AbortSignal.timeout(5000),\r\n        });\r\n\r\n        const latency = Date.now() - startTime;\r\n\r\n        status[provider] = {\r\n          healthy: response.ok,\r\n          latency,\r\n          circuitBreakerState: circuitBreaker.getState(),\r\n          lastChecked: new Date().toISOString(),\r\n        };\r\n      } catch (error) {\r\n        status[provider] = {\r\n          healthy: false,\r\n          error: error.message,\r\n          circuitBreakerState: circuitBreaker.getState(),\r\n          lastChecked: new Date().toISOString(),\r\n        };\r\n      }\r\n    }\r\n\r\n    return status as Record<AIProvider, any>;\r\n  }\r\n\r\n  /**\r\n   * 生成请求ID\r\n   */\r\n  private generateRequestId(): string {\r\n    return `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * 获取配置的服务列表\r\n   */\r\n  getConfiguredServices(): AIProvider[] {\r\n    return Array.from(this.configs.keys());\r\n  }\r\n\r\n  /**\r\n   * 重置熔断器\r\n   */\r\n  resetCircuitBreaker(provider: AIProvider): void {\r\n    const circuitBreaker = this.circuitBreakers.get(provider);\r\n    if (circuitBreaker) {\r\n      // 重新创建熔断器实例来重置状态\r\n      this.circuitBreakers.set(provider, new CircuitBreaker());\r\n      this.logger.info('Circuit breaker reset', { provider });\r\n    }\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const unifiedAIAdapter = new UnifiedAIAdapter();\r\n\r\n// 初始化默认配置\r\nexport function initializeAIServices(): void {\r\n  // FastGPT配置\r\n  if (process.env.FASTGPT_API_URL && process.env.FASTGPT_API_KEY) {\r\n    unifiedAIAdapter.registerService({\r\n      provider: AIProvider.FASTGPT,\r\n      baseUrl: process.env.FASTGPT_API_URL,\r\n      apiKey: process.env.FASTGPT_API_KEY,\r\n      model: 'gpt-3.5-turbo',\r\n      timeout: 30000,\r\n    });\r\n  }\r\n\r\n  // 千问配置\r\n  if (process.env.QWEN_BASE_URL && process.env.QWEN_API_KEY) {\r\n    unifiedAIAdapter.registerService({\r\n      provider: AIProvider.QIANWEN,\r\n      baseUrl: process.env.QWEN_BASE_URL,\r\n      apiKey: process.env.QWEN_API_KEY,\r\n      model: 'qwen-turbo',\r\n      timeout: 30000,\r\n    });\r\n  }\r\n\r\n  // 硅基流动配置\r\n  if (process.env.SILICONFLOW_BASE_URL && process.env.SILICONFLOW_API_KEY) {\r\n    unifiedAIAdapter.registerService({\r\n      provider: AIProvider.SILICONFLOW,\r\n      baseUrl: process.env.SILICONFLOW_BASE_URL,\r\n      apiKey: process.env.SILICONFLOW_API_KEY,\r\n      model: 'deepseek-chat',\r\n      timeout: 30000,\r\n    });\r\n  }\r\n} "],"names":["AIProvider","UnifiedAIAdapter","initializeAIServices","unifiedAIAdapter","CircuitBreakerState","CircuitBreaker","constructor","threshold","timeout","state","failureCount","lastFailureTime","execute","operation","Date","now","Error","result","onSuccess","error","onFailure","getState","logger","Logger","circuitBreakers","Map","configs","Object","values","forEach","provider","set","registerService","config","info","model","call","request","requestId","generateRequestId","startTime","get","circuitBreaker","response","executeRequest","latency","success","data","message","callFastGPT","callQianwen","callSiliconFlow","fetch","baseUrl","method","headers","apiKey","body","JSON","stringify","messages","temperature","max_tokens","maxTokens","stream","signal","AbortSignal","ok","status","statusText","json","content","choices","usage","finishReason","finish_reason","input","parameters","result_format","code","output","callWithLoadBalancing","providers","availableProviders","filter","length","selectedProvider","Math","floor","random","getHealthStatus","entries","healthy","circuitBreakerState","lastChecked","toISOString","toString","substr","getConfiguredServices","Array","from","keys","resetCircuitBreaker","process","env","FASTGPT_API_URL","FASTGPT_API_KEY","QWEN_BASE_URL","QWEN_API_KEY","SILICONFLOW_BASE_URL","SILICONFLOW_API_KEY"],"mappings":"AAAA,cAAc;AACd;;;;;;CAMC;;;;;;;;;;;IAMWA,UAAU;eAAVA;;IA4GCC,gBAAgB;eAAhBA;;IAmUGC,oBAAoB;eAApBA;;IAHHC,gBAAgB;eAAhBA;;;wBAhbU;AAIhB,IAAA,AAAKH,oCAAAA;;;;WAAAA;;AAiDZ,QAAQ;AACR,IAAA,AAAKI,6CAAAA;;;;WAAAA;EAAAA;AAML,OAAO;AACP,MAAMC;IAOJC,YAAYC,YAAY,CAAC,EAAEC,UAAU,KAAK,CAAE;aANpCC;aACAC,eAAe;aACfC,kBAAkB;QAKxB,IAAI,CAACJ,SAAS,GAAGA;QACjB,IAAI,CAACC,OAAO,GAAGA;IACjB;IAEA,MAAMI,QAAWC,SAA2B,EAAc;QACxD,IAAI,IAAI,CAACJ,KAAK,aAA+B;YAC3C,IAAIK,KAAKC,GAAG,KAAK,IAAI,CAACJ,eAAe,GAAG,IAAI,CAACH,OAAO,EAAE;gBACpD,IAAI,CAACC,KAAK;YACZ,OAAO;gBACL,MAAM,IAAIO,MAAM;YAClB;QACF;QAEA,IAAI;YACF,MAAMC,SAAS,MAAMJ;YACrB,IAAI,CAACK,SAAS;YACd,OAAOD;QACT,EAAE,OAAOE,OAAO;YACd,IAAI,CAACC,SAAS;YACd,MAAMD;QACR;IACF;IAEQD,YAAkB;QACxB,IAAI,CAACR,YAAY,GAAG;QACpB,IAAI,CAACD,KAAK;IACZ;IAEQW,YAAkB;QACxB,IAAI,CAACV,YAAY;QACjB,IAAI,CAACC,eAAe,GAAGG,KAAKC,GAAG;QAE/B,IAAI,IAAI,CAACL,YAAY,IAAI,IAAI,CAACH,SAAS,EAAE;YACvC,IAAI,CAACE,KAAK;QACZ;IACF;IAEAY,WAAgC;QAC9B,OAAO,IAAI,CAACZ,KAAK;IACnB;AACF;AAGO,MAAMR;IAKXK,aAAc;aAJNgB,SAAS,IAAIC,cAAM,CAAC;aACpBC,kBAAkB,IAAIC;aACtBC,UAAU,IAAID;QAGpB,SAAS;QACTE,OAAOC,MAAM,CAAC5B,YAAY6B,OAAO,CAACC,CAAAA;YAChC,IAAI,CAACN,eAAe,CAACO,GAAG,CAACD,UAAU,IAAIzB;QACzC;IACF;IAEA;;GAEC,GACD2B,gBAAgBC,MAAuB,EAAQ;QAC7C,IAAI,CAACP,OAAO,CAACK,GAAG,CAACE,OAAOH,QAAQ,EAAEG;QAClC,IAAI,CAACX,MAAM,CAACY,IAAI,CAAC,yBAAyB;YACxCJ,UAAUG,OAAOH,QAAQ;YACzBK,OAAOF,OAAOE,KAAK;QACrB;IACF;IAEA;;GAEC,GACD,MAAMC,KACJN,QAAoB,EACpBO,OAAkB,EACG;QACrB,MAAMC,YAAY,IAAI,CAACC,iBAAiB;QACxC,MAAMC,YAAY1B,KAAKC,GAAG;QAE1B,IAAI;YACF,MAAMkB,SAAS,IAAI,CAACP,OAAO,CAACe,GAAG,CAACX;YAChC,IAAI,CAACG,QAAQ;gBACX,MAAM,IAAIjB,MAAM,CAAC,2BAA2B,EAAEc,UAAU;YAC1D;YAEA,MAAMY,iBAAiB,IAAI,CAAClB,eAAe,CAACiB,GAAG,CAACX;YAEhD,MAAMa,WAAW,MAAMD,eAAe9B,OAAO,CAAC;gBAC5C,OAAO,MAAM,IAAI,CAACgC,cAAc,CAACX,QAAQI,SAASC;YACpD;YAEA,MAAMO,UAAU/B,KAAKC,GAAG,KAAKyB;YAE7B,IAAI,CAAClB,MAAM,CAACY,IAAI,CAAC,wBAAwB;gBACvCJ;gBACAQ;gBACAO;gBACAV,OAAOF,OAAOE,KAAK;YACrB;YAEA,OAAO;gBACLW,SAAS;gBACTC,MAAMJ;gBACNb;gBACAQ;gBACAO;YACF;QAEF,EAAE,OAAO1B,OAAO;YACd,MAAM0B,UAAU/B,KAAKC,GAAG,KAAKyB;YAE7B,IAAI,CAAClB,MAAM,CAACH,KAAK,CAAC,qBAAqB;gBACrCW;gBACAQ;gBACAO;gBACA1B,OAAOA,MAAM6B,OAAO;YACtB;YAEA,OAAO;gBACLF,SAAS;gBACT3B,OAAOA,MAAM6B,OAAO;gBACpBlB;gBACAQ;gBACAO;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAcD,eACZX,MAAuB,EACvBI,OAAkB,EAClBC,SAAiB,EACH;QACd,OAAQL,OAAOH,QAAQ;YACrB;gBACE,OAAO,MAAM,IAAI,CAACmB,WAAW,CAAChB,QAAQI,SAASC;YACjD;gBACE,OAAO,MAAM,IAAI,CAACY,WAAW,CAACjB,QAAQI,SAASC;YACjD;gBACE,OAAO,MAAM,IAAI,CAACa,eAAe,CAAClB,QAAQI,SAASC;YACrD;gBACE,MAAM,IAAItB,MAAM,CAAC,sBAAsB,EAAEiB,OAAOH,QAAQ,EAAE;QAC9D;IACF;IAEA;;GAEC,GACD,MAAcmB,YACZhB,MAAuB,EACvBI,OAAkB,EAClBC,SAAiB,EACH;QACd,MAAMK,WAAW,MAAMS,MAAM,GAAGnB,OAAOoB,OAAO,CAAC,wBAAwB,CAAC,EAAE;YACxEC,QAAQ;YACRC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAEtB,OAAOuB,MAAM,EAAE;gBAC1C,gBAAgBlB;YAClB;YACAmB,MAAMC,KAAKC,SAAS,CAAC;gBACnBC,UAAUvB,QAAQuB,QAAQ;gBAC1BzB,OAAOE,QAAQF,KAAK,IAAIF,OAAOE,KAAK;gBACpC0B,aAAaxB,QAAQwB,WAAW,IAAI;gBACpCC,YAAYzB,QAAQ0B,SAAS,IAAI;gBACjCC,QAAQ3B,QAAQ2B,MAAM,IAAI;YAC5B;YACAC,QAAQC,YAAY1D,OAAO,CAACyB,OAAOzB,OAAO,IAAI;QAChD;QAEA,IAAI,CAACmC,SAASwB,EAAE,EAAE;YAChB,MAAM,IAAInD,MAAM,CAAC,mBAAmB,EAAE2B,SAASyB,MAAM,CAAC,CAAC,EAAEzB,SAAS0B,UAAU,EAAE;QAChF;QAEA,MAAMtB,OAAO,MAAMJ,SAAS2B,IAAI;QAEhC,OAAO;YACLC,SAASxB,KAAKyB,OAAO,EAAE,CAAC,EAAE,EAAExB,SAASuB,WAAW;YAChDE,OAAO1B,KAAK0B,KAAK;YACjBtC,OAAOY,KAAKZ,KAAK;YACjBuC,cAAc3B,KAAKyB,OAAO,EAAE,CAAC,EAAE,EAAEG;QACnC;IACF;IAEA;;GAEC,GACD,MAAczB,YACZjB,MAAuB,EACvBI,OAAkB,EAClBC,SAAiB,EACH;QACd,MAAMK,WAAW,MAAMS,MAAM,GAAGnB,OAAOoB,OAAO,CAAC,yCAAyC,CAAC,EAAE;YACzFC,QAAQ;YACRC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAEtB,OAAOuB,MAAM,EAAE;gBAC1C,mBAAmBnB,QAAQ2B,MAAM,GAAG,WAAW;gBAC/C,gBAAgB1B;YAClB;YACAmB,MAAMC,KAAKC,SAAS,CAAC;gBACnBxB,OAAOE,QAAQF,KAAK,IAAIF,OAAOE,KAAK;gBACpCyC,OAAO;oBACLhB,UAAUvB,QAAQuB,QAAQ;gBAC5B;gBACAiB,YAAY;oBACVhB,aAAaxB,QAAQwB,WAAW,IAAI;oBACpCC,YAAYzB,QAAQ0B,SAAS,IAAI;oBACjCe,eAAe;gBACjB;YACF;YACAb,QAAQC,YAAY1D,OAAO,CAACyB,OAAOzB,OAAO,IAAI;QAChD;QAEA,IAAI,CAACmC,SAASwB,EAAE,EAAE;YAChB,MAAM,IAAInD,MAAM,CAAC,mBAAmB,EAAE2B,SAASyB,MAAM,CAAC,CAAC,EAAEzB,SAAS0B,UAAU,EAAE;QAChF;QAEA,MAAMtB,OAAO,MAAMJ,SAAS2B,IAAI;QAEhC,IAAIvB,KAAKgC,IAAI,IAAIhC,KAAKgC,IAAI,KAAK,OAAO;YACpC,MAAM,IAAI/D,MAAM,CAAC,mBAAmB,EAAE+B,KAAKC,OAAO,EAAE;QACtD;QAEA,OAAO;YACLuB,SAASxB,KAAKiC,MAAM,EAAER,SAAS,CAAC,EAAE,EAAExB,SAASuB,WAAW;YACxDE,OAAO1B,KAAK0B,KAAK;YACjBtC,OAAOY,KAAKZ,KAAK;YACjBuC,cAAc3B,KAAKiC,MAAM,EAAER,SAAS,CAAC,EAAE,EAAEG;QAC3C;IACF;IAEA;;GAEC,GACD,MAAcxB,gBACZlB,MAAuB,EACvBI,OAAkB,EAClBC,SAAiB,EACH;QACd,MAAMK,WAAW,MAAMS,MAAM,GAAGnB,OAAOoB,OAAO,CAAC,oBAAoB,CAAC,EAAE;YACpEC,QAAQ;YACRC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB,CAAC,OAAO,EAAEtB,OAAOuB,MAAM,EAAE;gBAC1C,gBAAgBlB;YAClB;YACAmB,MAAMC,KAAKC,SAAS,CAAC;gBACnBxB,OAAOE,QAAQF,KAAK,IAAIF,OAAOE,KAAK;gBACpCyB,UAAUvB,QAAQuB,QAAQ;gBAC1BC,aAAaxB,QAAQwB,WAAW,IAAI;gBACpCC,YAAYzB,QAAQ0B,SAAS,IAAI;gBACjCC,QAAQ3B,QAAQ2B,MAAM,IAAI;YAC5B;YACAC,QAAQC,YAAY1D,OAAO,CAACyB,OAAOzB,OAAO,IAAI;QAChD;QAEA,IAAI,CAACmC,SAASwB,EAAE,EAAE;YAChB,MAAM,IAAInD,MAAM,CAAC,uBAAuB,EAAE2B,SAASyB,MAAM,CAAC,CAAC,EAAEzB,SAAS0B,UAAU,EAAE;QACpF;QAEA,MAAMtB,OAAO,MAAMJ,SAAS2B,IAAI;QAEhC,OAAO;YACLC,SAASxB,KAAKyB,OAAO,EAAE,CAAC,EAAE,EAAExB,SAASuB,WAAW;YAChDE,OAAO1B,KAAK0B,KAAK;YACjBtC,OAAOY,KAAKZ,KAAK;YACjBuC,cAAc3B,KAAKyB,OAAO,EAAE,CAAC,EAAE,EAAEG;QACnC;IACF;IAEA;;GAEC,GACD,MAAMM,sBACJC,SAAuB,EACvB7C,OAAkB,EACG;QACrB,MAAM8C,qBAAqBD,UAAUE,MAAM,CAACtD,CAAAA;YAC1C,MAAMY,iBAAiB,IAAI,CAAClB,eAAe,CAACiB,GAAG,CAACX;YAChD,OAAOY,gBAAgBrB;QACzB;QAEA,IAAI8D,mBAAmBE,MAAM,KAAK,GAAG;YACnC,MAAM,IAAIrE,MAAM;QAClB;QAEA,YAAY;QACZ,MAAMsE,mBAAmBH,kBAAkB,CACzCI,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAKN,mBAAmBE,MAAM,EACrD;QAED,OAAO,MAAM,IAAI,CAACjD,IAAI,CAACkD,kBAAkBjD;IAC3C;IAEA;;GAEC,GACD,MAAMqD,kBAAoD;QACxD,MAAMtB,SAA8B,CAAC;QAErC,KAAK,MAAM,CAACtC,UAAUG,OAAO,IAAI,IAAI,CAACP,OAAO,CAACiE,OAAO,GAAI;YACvD,MAAMjD,iBAAiB,IAAI,CAAClB,eAAe,CAACiB,GAAG,CAACX;YAEhD,IAAI;gBACF,MAAMU,YAAY1B,KAAKC,GAAG;gBAC1B,MAAM4B,WAAW,MAAMS,MAAM,GAAGnB,OAAOoB,OAAO,CAAC,OAAO,CAAC,EAAE;oBACvDC,QAAQ;oBACRC,SAAS;wBACP,iBAAiB,CAAC,OAAO,EAAEtB,OAAOuB,MAAM,EAAE;oBAC5C;oBACAS,QAAQC,YAAY1D,OAAO,CAAC;gBAC9B;gBAEA,MAAMqC,UAAU/B,KAAKC,GAAG,KAAKyB;gBAE7B4B,MAAM,CAACtC,SAAS,GAAG;oBACjB8D,SAASjD,SAASwB,EAAE;oBACpBtB;oBACAgD,qBAAqBnD,eAAerB,QAAQ;oBAC5CyE,aAAa,IAAIhF,OAAOiF,WAAW;gBACrC;YACF,EAAE,OAAO5E,OAAO;gBACdiD,MAAM,CAACtC,SAAS,GAAG;oBACjB8D,SAAS;oBACTzE,OAAOA,MAAM6B,OAAO;oBACpB6C,qBAAqBnD,eAAerB,QAAQ;oBAC5CyE,aAAa,IAAIhF,OAAOiF,WAAW;gBACrC;YACF;QACF;QAEA,OAAO3B;IACT;IAEA;;GAEC,GACD,AAAQ7B,oBAA4B;QAClC,OAAO,CAAC,GAAG,EAAEzB,KAAKC,GAAG,GAAG,CAAC,EAAEwE,KAAKE,MAAM,GAAGO,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;IACtE;IAEA;;GAEC,GACDC,wBAAsC;QACpC,OAAOC,MAAMC,IAAI,CAAC,IAAI,CAAC1E,OAAO,CAAC2E,IAAI;IACrC;IAEA;;GAEC,GACDC,oBAAoBxE,QAAoB,EAAQ;QAC9C,MAAMY,iBAAiB,IAAI,CAAClB,eAAe,CAACiB,GAAG,CAACX;QAChD,IAAIY,gBAAgB;YAClB,iBAAiB;YACjB,IAAI,CAAClB,eAAe,CAACO,GAAG,CAACD,UAAU,IAAIzB;YACvC,IAAI,CAACiB,MAAM,CAACY,IAAI,CAAC,yBAAyB;gBAAEJ;YAAS;QACvD;IACF;AACF;AAGO,MAAM3B,mBAAmB,IAAIF;AAG7B,SAASC;IACd,YAAY;IACZ,IAAIqG,QAAQC,GAAG,CAACC,eAAe,IAAIF,QAAQC,GAAG,CAACE,eAAe,EAAE;QAC9DvG,iBAAiB6B,eAAe,CAAC;YAC/BF,QAAQ;YACRuB,SAASkD,QAAQC,GAAG,CAACC,eAAe;YACpCjD,QAAQ+C,QAAQC,GAAG,CAACE,eAAe;YACnCvE,OAAO;YACP3B,SAAS;QACX;IACF;IAEA,OAAO;IACP,IAAI+F,QAAQC,GAAG,CAACG,aAAa,IAAIJ,QAAQC,GAAG,CAACI,YAAY,EAAE;QACzDzG,iBAAiB6B,eAAe,CAAC;YAC/BF,QAAQ;YACRuB,SAASkD,QAAQC,GAAG,CAACG,aAAa;YAClCnD,QAAQ+C,QAAQC,GAAG,CAACI,YAAY;YAChCzE,OAAO;YACP3B,SAAS;QACX;IACF;IAEA,SAAS;IACT,IAAI+F,QAAQC,GAAG,CAACK,oBAAoB,IAAIN,QAAQC,GAAG,CAACM,mBAAmB,EAAE;QACvE3G,iBAAiB6B,eAAe,CAAC;YAC/BF,QAAQ;YACRuB,SAASkD,QAAQC,GAAG,CAACK,oBAAoB;YACzCrD,QAAQ+C,QAAQC,GAAG,CAACM,mBAAmB;YACvC3E,OAAO;YACP3B,SAAS;QACX;IACF;AACF"}