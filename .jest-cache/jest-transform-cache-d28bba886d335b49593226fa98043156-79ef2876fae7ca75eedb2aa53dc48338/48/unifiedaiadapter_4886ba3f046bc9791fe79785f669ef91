e8a8291a09c18f2860e3d08f5366a490
// @ts-nocheck
/**
 * @file lib/ai/unified-ai-adapter.ts
 * @description 统一AI服务适配器 - B团队核心组件
 * @author B团队AI集成架构师
 * @lastUpdate 2024-12-19
 * @integrations FastGPT、千问、硅基流动标准化适配器
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AIProvider: function() {
        return AIProvider;
    },
    UnifiedAIAdapter: function() {
        return UnifiedAIAdapter;
    },
    initializeAIServices: function() {
        return initializeAIServices;
    },
    unifiedAIAdapter: function() {
        return unifiedAIAdapter;
    }
});
const _logger = require("../utils/logger");
var AIProvider = /*#__PURE__*/ function(AIProvider) {
    AIProvider["FASTGPT"] = "fastgpt";
    AIProvider["QIANWEN"] = "qianwen";
    AIProvider["SILICONFLOW"] = "siliconflow";
    return AIProvider;
}({});
// 熔断器状态
var CircuitBreakerState = /*#__PURE__*/ function(CircuitBreakerState) {
    CircuitBreakerState["CLOSED"] = "closed";
    CircuitBreakerState["OPEN"] = "open";
    CircuitBreakerState["HALF_OPEN"] = "half_open";
    return CircuitBreakerState;
}(CircuitBreakerState || {});
// 熔断器类
class CircuitBreaker {
    constructor(threshold = 5, timeout = 60000){
        this.state = "closed";
        this.failureCount = 0;
        this.lastFailureTime = 0;
        this.threshold = threshold;
        this.timeout = timeout;
    }
    async execute(operation) {
        if (this.state === "open") {
            if (Date.now() - this.lastFailureTime > this.timeout) {
                this.state = "half_open";
            } else {
                throw new Error('Circuit breaker is OPEN');
            }
        }
        try {
            const result = await operation();
            this.onSuccess();
            return result;
        } catch (error) {
            this.onFailure();
            throw error;
        }
    }
    onSuccess() {
        this.failureCount = 0;
        this.state = "closed";
    }
    onFailure() {
        this.failureCount++;
        this.lastFailureTime = Date.now();
        if (this.failureCount >= this.threshold) {
            this.state = "open";
        }
    }
    getState() {
        return this.state;
    }
}
class UnifiedAIAdapter {
    constructor(){
        this.logger = new _logger.Logger('UnifiedAIAdapter');
        this.circuitBreakers = new Map();
        this.configs = new Map();
        // 初始化熔断器
        Object.values(AIProvider).forEach((provider)=>{
            this.circuitBreakers.set(provider, new CircuitBreaker());
        });
    }
    /**
   * 注册AI服务配置
   */ registerService(config) {
        this.configs.set(config.provider, config);
        this.logger.info('AI service registered', {
            provider: config.provider,
            model: config.model
        });
    }
    /**
   * 统一的AI调用接口
   */ async call(provider, request) {
        const requestId = this.generateRequestId();
        const startTime = Date.now();
        try {
            const config = this.configs.get(provider);
            if (!config) {
                throw new Error(`AI service not configured: ${provider}`);
            }
            const circuitBreaker = this.circuitBreakers.get(provider);
            const response = await circuitBreaker.execute(async ()=>{
                return await this.executeRequest(config, request, requestId);
            });
            const latency = Date.now() - startTime;
            this.logger.info('AI request completed', {
                provider,
                requestId,
                latency,
                model: config.model
            });
            return {
                success: true,
                data: response,
                provider,
                requestId,
                latency
            };
        } catch (error) {
            const latency = Date.now() - startTime;
            this.logger.error('AI request failed', {
                provider,
                requestId,
                latency,
                error: error.message
            });
            return {
                success: false,
                error: error.message,
                provider,
                requestId,
                latency
            };
        }
    }
    /**
   * 执行具体的AI请求
   */ async executeRequest(config, request, requestId) {
        switch(config.provider){
            case "fastgpt":
                return await this.callFastGPT(config, request, requestId);
            case "qianwen":
                return await this.callQianwen(config, request, requestId);
            case "siliconflow":
                return await this.callSiliconFlow(config, request, requestId);
            default:
                throw new Error(`Unsupported provider: ${config.provider}`);
        }
    }
    /**
   * FastGPT API调用
   */ async callFastGPT(config, request, requestId) {
        const response = await fetch(`${config.baseUrl}/api/v1/chat/completions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${config.apiKey}`,
                'X-Request-ID': requestId
            },
            body: JSON.stringify({
                messages: request.messages,
                model: request.model || config.model,
                temperature: request.temperature || 0.7,
                max_tokens: request.maxTokens || 2048,
                stream: request.stream || false
            }),
            signal: AbortSignal.timeout(config.timeout || 30000)
        });
        if (!response.ok) {
            throw new Error(`FastGPT API error: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        return {
            content: data.choices?.[0]?.message?.content || '',
            usage: data.usage,
            model: data.model,
            finishReason: data.choices?.[0]?.finish_reason
        };
    }
    /**
   * 千问API调用
   */ async callQianwen(config, request, requestId) {
        const response = await fetch(`${config.baseUrl}/services/aigc/text-generation/generation`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${config.apiKey}`,
                'X-DashScope-SSE': request.stream ? 'enable' : 'disable',
                'X-Request-ID': requestId
            },
            body: JSON.stringify({
                model: request.model || config.model,
                input: {
                    messages: request.messages
                },
                parameters: {
                    temperature: request.temperature || 0.7,
                    max_tokens: request.maxTokens || 2048,
                    result_format: 'message'
                }
            }),
            signal: AbortSignal.timeout(config.timeout || 30000)
        });
        if (!response.ok) {
            throw new Error(`Qianwen API error: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        if (data.code && data.code !== '200') {
            throw new Error(`Qianwen API error: ${data.message}`);
        }
        return {
            content: data.output?.choices?.[0]?.message?.content || '',
            usage: data.usage,
            model: data.model,
            finishReason: data.output?.choices?.[0]?.finish_reason
        };
    }
    /**
   * 硅基流动API调用
   */ async callSiliconFlow(config, request, requestId) {
        const response = await fetch(`${config.baseUrl}/v1/chat/completions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${config.apiKey}`,
                'X-Request-ID': requestId
            },
            body: JSON.stringify({
                model: request.model || config.model,
                messages: request.messages,
                temperature: request.temperature || 0.7,
                max_tokens: request.maxTokens || 2048,
                stream: request.stream || false
            }),
            signal: AbortSignal.timeout(config.timeout || 30000)
        });
        if (!response.ok) {
            throw new Error(`SiliconFlow API error: ${response.status} ${response.statusText}`);
        }
        const data = await response.json();
        return {
            content: data.choices?.[0]?.message?.content || '',
            usage: data.usage,
            model: data.model,
            finishReason: data.choices?.[0]?.finish_reason
        };
    }
    /**
   * 批量调用（负载均衡）
   */ async callWithLoadBalancing(providers, request) {
        const availableProviders = providers.filter((provider)=>{
            const circuitBreaker = this.circuitBreakers.get(provider);
            return circuitBreaker?.getState() !== "open";
        });
        if (availableProviders.length === 0) {
            throw new Error('No available AI providers');
        }
        // 简单的轮询负载均衡
        const selectedProvider = availableProviders[Math.floor(Math.random() * availableProviders.length)];
        return await this.call(selectedProvider, request);
    }
    /**
   * 获取服务健康状态
   */ async getHealthStatus() {
        const status = {};
        for (const [provider, config] of this.configs.entries()){
            const circuitBreaker = this.circuitBreakers.get(provider);
            try {
                const startTime = Date.now();
                const response = await fetch(`${config.baseUrl}/health`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    signal: AbortSignal.timeout(5000)
                });
                const latency = Date.now() - startTime;
                status[provider] = {
                    healthy: response.ok,
                    latency,
                    circuitBreakerState: circuitBreaker.getState(),
                    lastChecked: new Date().toISOString()
                };
            } catch (error) {
                status[provider] = {
                    healthy: false,
                    error: error.message,
                    circuitBreakerState: circuitBreaker.getState(),
                    lastChecked: new Date().toISOString()
                };
            }
        }
        return status;
    }
    /**
   * 生成请求ID
   */ generateRequestId() {
        return `ai_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
   * 获取配置的服务列表
   */ getConfiguredServices() {
        return Array.from(this.configs.keys());
    }
    /**
   * 重置熔断器
   */ resetCircuitBreaker(provider) {
        const circuitBreaker = this.circuitBreakers.get(provider);
        if (circuitBreaker) {
            // 重新创建熔断器实例来重置状态
            this.circuitBreakers.set(provider, new CircuitBreaker());
            this.logger.info('Circuit breaker reset', {
                provider
            });
        }
    }
}
const unifiedAIAdapter = new UnifiedAIAdapter();
function initializeAIServices() {
    // FastGPT配置
    if (process.env.FASTGPT_API_URL && process.env.FASTGPT_API_KEY) {
        unifiedAIAdapter.registerService({
            provider: "fastgpt",
            baseUrl: process.env.FASTGPT_API_URL,
            apiKey: process.env.FASTGPT_API_KEY,
            model: 'gpt-3.5-turbo',
            timeout: 30000
        });
    }
    // 千问配置
    if (process.env.QWEN_BASE_URL && process.env.QWEN_API_KEY) {
        unifiedAIAdapter.registerService({
            provider: "qianwen",
            baseUrl: process.env.QWEN_BASE_URL,
            apiKey: process.env.QWEN_API_KEY,
            model: 'qwen-turbo',
            timeout: 30000
        });
    }
    // 硅基流动配置
    if (process.env.SILICONFLOW_BASE_URL && process.env.SILICONFLOW_API_KEY) {
        unifiedAIAdapter.registerService({
            provider: "siliconflow",
            baseUrl: process.env.SILICONFLOW_BASE_URL,
            apiKey: process.env.SILICONFLOW_API_KEY,
            model: 'deepseek-chat',
            timeout: 30000
        });
    }
}

//# sourceMappingURL=data:application/json;base64,