5e72352c3fb6fced3821eb2a8347737f
/**
 * @file auth.test.ts
 * @description 认证相关API路由错误处理测试
 * @author ZK-Agent Team
 * @date 2025-01-27
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _vitest = require("vitest");
const _server = require("next/server");
const _route = require("../../../app/api/auth/login/route");
const _route1 = require("../../../app/api/auth/register/route");
const _route2 = require("../../../app/api/auth/profile/route");
const _route3 = require("../../../app/api/auth/change-password/route");
const _globalerrorhandler = require("../../../lib/middleware/global-error-handler");
(0, _vitest.describe)('Auth API Routes Error Handling', ()=>{
    let errorHandler;
    (0, _vitest.beforeEach)(()=>{
        errorHandler = _globalerrorhandler.GlobalErrorHandler.getInstance();
        errorHandler.reset();
        _vitest.vi.clearAllMocks();
    });
    (0, _vitest.afterEach)(()=>{
        errorHandler.reset();
    });
    (0, _vitest.describe)('Login Route (/api/auth/login)', ()=>{
        (0, _vitest.it)('should handle missing credentials error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({})
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, _vitest.it)('should handle invalid credentials error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: 'invalid@example.com',
                    password: 'wrongpassword'
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(401);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('AUTHENTICATION_ERROR');
        });
        (0, _vitest.it)('should handle malformed JSON error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: 'invalid json'
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, _vitest.it)('should handle database connection error', async ()=>{
            // Mock database error
            _vitest.vi.mock('@/lib/database/connection', ()=>({
                    default: {
                        user: {
                            findUnique: _vitest.vi.fn().mockRejectedValue(new Error('Database connection failed'))
                        }
                    }
                }));
            const request = new _server.NextRequest('http://localhost:3000/api/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'password123'
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(500);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('DATABASE_ERROR');
        });
    });
    (0, _vitest.describe)('Register Route (/api/auth/register)', ()=>{
        (0, _vitest.it)('should handle duplicate email error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: 'existing@example.com',
                    password: 'password123',
                    name: 'Test User'
                })
            });
            const response = await (0, _route1.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)([
                400,
                409
            ]).toContain(response.status);
            (0, _vitest.expect)(data.error).toBeDefined();
        });
        (0, _vitest.it)('should handle weak password error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: '123',
                    name: 'Test User'
                })
            });
            const response = await (0, _route1.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
    });
    (0, _vitest.describe)('Profile Route (/api/auth/profile)', ()=>{
        (0, _vitest.it)('should handle unauthorized access error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/profile', {
                method: 'GET'
            });
            const response = await (0, _route2.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(401);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('AUTHENTICATION_ERROR');
        });
        (0, _vitest.it)('should handle invalid token error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/profile', {
                method: 'GET',
                headers: {
                    'Authorization': 'Bearer invalid_token'
                }
            });
            const response = await (0, _route2.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(401);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('AUTHENTICATION_ERROR');
        });
    });
    (0, _vitest.describe)('Change Password Route (/api/auth/change-password)', ()=>{
        (0, _vitest.it)('should handle missing current password error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    newPassword: 'newpassword123'
                })
            });
            const response = await (0, _route3.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, _vitest.it)('should handle incorrect current password error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/auth/change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer valid_token'
                },
                body: JSON.stringify({
                    currentPassword: 'wrongpassword',
                    newPassword: 'newpassword123'
                })
            });
            const response = await (0, _route3.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
        });
    });
    (0, _vitest.describe)('Error Handler Integration', ()=>{
        (0, _vitest.it)('should track error statistics across auth routes', async ()=>{
            // Trigger multiple errors
            const requests = [
                new _server.NextRequest('http://localhost:3000/api/auth/login', {
                    method: 'POST',
                    body: 'invalid json'
                }),
                new _server.NextRequest('http://localhost:3000/api/auth/profile', {
                    method: 'GET'
                }),
                new _server.NextRequest('http://localhost:3000/api/auth/register', {
                    method: 'POST',
                    body: JSON.stringify({})
                })
            ];
            for (const request of requests){
                await (0, _route.POST)(request).catch(()=>{});
            }
            const stats = errorHandler.getErrorStats();
            (0, _vitest.expect)(stats.errorCount).toBeGreaterThan(0);
        });
        (0, _vitest.it)('should trigger circuit breaker on repeated failures', async ()=>{
            // Configure low threshold for testing
            const originalThreshold = errorHandler['errorThreshold'];
            errorHandler['errorThreshold'] = 2;
            try {
                // Trigger multiple errors to exceed threshold
                for(let i = 0; i < 3; i++){
                    const request = new _server.NextRequest('http://localhost:3000/api/auth/login', {
                        method: 'POST',
                        body: 'invalid json'
                    });
                    await (0, _route.POST)(request).catch(()=>{});
                }
                (0, _vitest.expect)(errorHandler.isCircuitBreakerOpen()).toBe(true);
            } finally{
                errorHandler['errorThreshold'] = originalThreshold;
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,