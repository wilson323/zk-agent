31a66ebe24e0db75d52352df18abf948
// @ts-nocheck
/**
 * @file 日志管理工具
 * @description 统一的日志记录和管理
 * @author ZK-Agent Team
 * @date 2024-01-20
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LogLevel: function() {
        return LogLevel;
    },
    Logger: function() {
        return Logger;
    },
    default: function() {
        return _default;
    },
    defaultLogger: function() {
        return defaultLogger;
    },
    log: function() {
        return log;
    }
});
const _winston = /*#__PURE__*/ _interop_require_default(require("winston"));
const _env = require("../../config/env");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// 确保日志目录存在
const logDir = _env.monitoringConfig.logFilePath;
if (!_fs.default.existsSync(logDir)) {
    _fs.default.mkdirSync(logDir, {
        recursive: true
    });
}
// 自定义日志格式
const logFormat = _winston.default.format.combine(_winston.default.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss'
}), _winston.default.format.errors({
    stack: true
}), _winston.default.format.json(), _winston.default.format.printf(({ timestamp, level, message, stack, ...meta })=>{
    let log = `${timestamp} [${level.toUpperCase()}]: ${message}`;
    if (Object.keys(meta).length > 0) {
        log += ` ${JSON.stringify(meta)}`;
    }
    if (stack) {
        log += `\n${stack}`;
    }
    return log;
}));
// 控制台格式（开发环境）
const consoleFormat = _winston.default.format.combine(_winston.default.format.colorize(), _winston.default.format.simple(), _winston.default.format.printf(({ timestamp, level, message, stack })=>{
    let log = `${timestamp} ${level}: ${message}`;
    if (stack) {
        log += `\n${stack}`;
    }
    return log;
}));
// 创建传输器
const transports = [];
// 控制台输出（开发环境）
if (_env.isDevelopment) {
    transports.push(new _winston.default.transports.Console({
        format: consoleFormat,
        level: 'debug'
    }));
}
// 文件输出（生产环境）
if (_env.isProduction) {
    // 错误日志
    transports.push(new _winston.default.transports.File({
        filename: _path.default.join(logDir, 'error.log'),
        level: 'error',
        format: logFormat,
        maxsize: 10 * 1024 * 1024,
        maxFiles: 5
    }));
    // 组合日志
    transports.push(new _winston.default.transports.File({
        filename: _path.default.join(logDir, 'combined.log'),
        format: logFormat,
        maxsize: 10 * 1024 * 1024,
        maxFiles: 10
    }));
    // 访问日志
    transports.push(new _winston.default.transports.File({
        filename: _path.default.join(logDir, 'access.log'),
        level: 'info',
        format: logFormat,
        maxsize: 10 * 1024 * 1024,
        maxFiles: 10
    }));
}
// 创建 logger 实例
const logger = _winston.default.createLogger({
    level: _env.monitoringConfig.logLevel,
    format: logFormat,
    transports,
    exitOnError: false
});
var LogLevel = /*#__PURE__*/ function(LogLevel) {
    LogLevel["ERROR"] = "error";
    LogLevel["WARN"] = "warn";
    LogLevel["INFO"] = "info";
    LogLevel["DEBUG"] = "debug";
    return LogLevel;
}({});
class Logger {
    constructor(context = {}){
        if (typeof context === 'string') {
            this.context = {
                component: context
            };
        } else {
            this.context = context;
        }
    }
    /**
   * 创建带上下文的日志实例
   */ static withContext(context) {
        return new Logger(context);
    }
    /**
   * 记录错误日志
   */ error(message, error, meta = {}) {
        const logMeta = {
            ...this.context,
            ...meta
        };
        if (error instanceof Error) {
            logMeta.stack = error.stack;
            logMeta.errorName = error.name;
            logMeta.errorMessage = error.message;
        } else if (error) {
            logMeta.error = error;
        }
        logger.error(message, logMeta);
    }
    /**
   * 记录警告日志
   */ warn(message, meta = {}) {
        logger.warn(message, {
            ...this.context,
            ...meta
        });
    }
    /**
   * 记录信息日志
   */ info(message, meta = {}) {
        logger.info(message, {
            ...this.context,
            ...meta
        });
    }
    /**
   * 记录调试日志
   */ debug(message, meta = {}) {
        logger.debug(message, {
            ...this.context,
            ...meta
        });
    }
    /**
   * 记录API访问日志
   */ access(meta) {
        const { method, url, statusCode, duration, userId, ip } = meta;
        const message = `${method} ${url} ${statusCode} ${duration}ms`;
        this.info(message, {
            type: 'access',
            userId,
            ip,
            ...meta
        });
    }
    /**
   * 记录业务操作日志
   */ business(action, meta = {}) {
        this.info(`业务操作: ${action}`, {
            type: 'business',
            action,
            ...this.context,
            ...meta
        });
    }
    /**
   * 记录安全事件日志
   */ security(event, meta = {}) {
        this.warn(`安全事件: ${event}`, {
            type: 'security',
            event,
            ...this.context,
            ...meta
        });
    }
    /**
   * 记录性能日志
   */ performance(operation, duration, meta = {}) {
        const level = duration > 1000 ? 'warn' : 'info';
        const message = `性能监控: ${operation} 耗时 ${duration}ms`;
        logger.log(level, message, {
            type: 'performance',
            operation,
            duration,
            ...this.context,
            ...meta
        });
    }
}
const defaultLogger = new Logger();
const log = {
    error: (message, error, meta)=>defaultLogger.error(message, error, meta),
    warn: (message, meta)=>defaultLogger.warn(message, meta),
    info: (message, meta)=>defaultLogger.info(message, meta),
    debug: (message, meta)=>defaultLogger.debug(message, meta),
    access: (meta)=>defaultLogger.access(meta),
    business: (action, meta)=>defaultLogger.business(action, meta),
    security: (event, meta)=>defaultLogger.security(event, meta),
    performance: (operation, duration, meta)=>defaultLogger.performance(operation, duration, meta)
};
const _default = logger;

//# sourceMappingURL=data:application/json;base64,