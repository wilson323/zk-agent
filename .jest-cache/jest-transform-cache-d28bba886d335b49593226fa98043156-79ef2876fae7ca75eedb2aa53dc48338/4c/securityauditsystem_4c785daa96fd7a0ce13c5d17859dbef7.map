{"version":3,"sources":["E:\\zk-agent\\lib\\security\\security-audit-system.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file lib/security/security-audit-system.ts\r\n * @description 安全审计系统 - 解决核查报告中的安全问题\r\n * @author B团队安全架构师\r\n * @lastUpdate 2024-12-19\r\n * @security 生产级安全审计实现\r\n */\r\n\r\nimport { Logger } from '@/lib/utils/logger';\r\nimport { enhancedCacheManager } from '@/lib/cache/enhanced-cache-manager';\r\nimport { getErrorMessage, getErrorCode, isFileNotFoundError } from '@/lib/utils/error-handler';\r\nimport { enhancedPasswordSecurity } from '@/lib/auth/enhanced-password-security';\r\n\r\nconst logger = new Logger('SecurityAuditSystem');\r\n\r\n// 安全事件类型\r\nexport enum SecurityEventType {\r\n  LOGIN_SUCCESS = 'login_success',\r\n  LOGIN_FAILURE = 'login_failure',\r\n  PASSWORD_CHANGE = 'password_change',\r\n  ACCOUNT_LOCKED = 'account_locked',\r\n  SUSPICIOUS_ACTIVITY = 'suspicious_activity',\r\n  FILE_UPLOAD = 'file_upload',\r\n  FILE_DOWNLOAD = 'file_download',\r\n  API_ACCESS = 'api_access',\r\n  PERMISSION_DENIED = 'permission_denied',\r\n  DATA_EXPORT = 'data_export',\r\n  ADMIN_ACTION = 'admin_action',\r\n  SECURITY_SCAN = 'security_scan',\r\n  MALWARE_DETECTED = 'malware_detected',\r\n  SQL_INJECTION_ATTEMPT = 'sql_injection_attempt',\r\n  XSS_ATTEMPT = 'xss_attempt',\r\n  CSRF_ATTEMPT = 'csrf_attempt',\r\n  BRUTE_FORCE_ATTACK = 'brute_force_attack',\r\n  DDoS_ATTEMPT = 'ddos_attempt',\r\n  UNAUTHORIZED_ACCESS = 'unauthorized_access',\r\n  PRIVILEGE_ESCALATION = 'privilege_escalation',\r\n}\r\n\r\n// 安全事件严重级别\r\nexport enum SecuritySeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical',\r\n}\r\n\r\n// 安全事件接口\r\nexport interface SecurityEvent {\r\n  id: string;\r\n  type: SecurityEventType;\r\n  severity: SecuritySeverity;\r\n  timestamp: Date;\r\n  userId?: string;\r\n  ip: string;\r\n  userAgent?: string;\r\n  details: Record<string, any>;\r\n  riskScore: number;\r\n  resolved: boolean;\r\n  resolvedBy?: string;\r\n  resolvedAt?: Date;\r\n  location?: {\r\n    country?: string;\r\n    city?: string;\r\n    coordinates?: [number, number];\r\n  };\r\n}\r\n\r\n// 威胁检测规则\r\ninterface ThreatRule {\r\n  id: string;\r\n  name: string;\r\n  type: SecurityEventType;\r\n  condition: (event: SecurityEvent, history: SecurityEvent[]) => boolean;\r\n  severity: SecuritySeverity;\r\n  action: 'log' | 'alert' | 'block' | 'quarantine';\r\n  enabled: boolean;\r\n}\r\n\r\n// 文件安全检查结果\r\nexport interface FileSecurityResult {\r\n  safe: boolean;\r\n  threats: string[];\r\n  fileType: string;\r\n  size: number;\r\n  hash: string;\r\n  scanTime: number;\r\n}\r\n\r\n// 用户行为分析结果\r\ninterface UserBehaviorAnalysis {\r\n  userId: string;\r\n  riskScore: number;\r\n  anomalies: string[];\r\n  patterns: {\r\n    loginTimes: number[];\r\n    locations: string[];\r\n    devices: string[];\r\n    activities: string[];\r\n  };\r\n  recommendations: string[];\r\n}\r\n\r\nexport class SecurityAuditSystem {\r\n  private static instance: SecurityAuditSystem;\r\n  private events: Map<string, SecurityEvent> = new Map();\r\n  private threatRules: Map<string, ThreatRule> = new Map();\r\n  private blockedIPs: Set<string> = new Set();\r\n  private quarantinedFiles: Set<string> = new Set();\r\n  private userBehaviorCache: Map<string, UserBehaviorAnalysis> = new Map();\r\n\r\n  private constructor() {\r\n    this.initializeThreatRules();\r\n    this.startBackgroundTasks();\r\n  }\r\n\r\n  public static getInstance(): SecurityAuditSystem {\r\n    if (!SecurityAuditSystem.instance) {\r\n      SecurityAuditSystem.instance = new SecurityAuditSystem();\r\n    }\r\n    return SecurityAuditSystem.instance;\r\n  }\r\n\r\n  /**\r\n   * 记录安全事件\r\n   */\r\n  async recordEvent(eventData: Omit<SecurityEvent, 'id' | 'timestamp' | 'resolved'>): Promise<string> {\r\n    const event: SecurityEvent = {\r\n      id: this.generateEventId(),\r\n      timestamp: new Date(),\r\n      resolved: false,\r\n      ...eventData,\r\n    };\r\n\r\n    // 增强地理位置信息\r\n    if (event.ip) {\r\n      event.location = await this.getLocationFromIP(event.ip);\r\n    }\r\n\r\n    // 计算风险评分\r\n    event.riskScore = this.calculateRiskScore(event);\r\n\r\n    // 存储事件\r\n    this.events.set(event.id, event);\r\n\r\n    // 检查威胁规则\r\n    await this.checkThreatRules(event);\r\n\r\n    // 更新用户行为分析\r\n    if (event.userId) {\r\n      await this.updateUserBehaviorAnalysis(event.userId, event);\r\n    }\r\n\r\n    // 缓存高风险事件\r\n    if (event.riskScore >= 7) {\r\n      await enhancedCacheManager.set(\r\n        `security:high-risk:${event.id}`,\r\n        event,\r\n        { ttl: 86400000, tags: ['security', 'high-risk'] }\r\n      );\r\n    }\r\n\r\n    logger.info('Security event recorded', {\r\n      eventId: event.id,\r\n      type: event.type,\r\n      severity: event.severity,\r\n      riskScore: event.riskScore,\r\n      userId: event.userId,\r\n      ip: event.ip,\r\n    });\r\n\r\n    return event.id;\r\n  }\r\n\r\n  /**\r\n   * 文件安全检查\r\n   */\r\n  async scanFile(filePath: string, fileBuffer: Buffer, metadata: {\r\n    originalName: string;\r\n    mimeType: string;\r\n    size: number;\r\n  }): Promise<FileSecurityResult> {\r\n    const startTime = Date.now();\r\n    const hash = this.calculateFileHash(fileBuffer);\r\n    \r\n    const result: FileSecurityResult = {\r\n      safe: true,\r\n      threats: [],\r\n      fileType: metadata.mimeType,\r\n      size: metadata.size,\r\n      hash,\r\n      scanTime: 0,\r\n    };\r\n\r\n    try {\r\n      // 1. 文件类型验证\r\n      const allowedTypes = this.getAllowedFileTypes();\r\n      if (!allowedTypes.includes(metadata.mimeType)) {\r\n        result.safe = false;\r\n        result.threats.push(`不允许的文件类型: ${metadata.mimeType}`);\r\n      }\r\n\r\n      // 2. 文件大小检查\r\n      const maxSize = this.getMaxFileSize(metadata.mimeType);\r\n      if (metadata.size > maxSize) {\r\n        result.safe = false;\r\n        result.threats.push(`文件大小超限: ${metadata.size} > ${maxSize}`);\r\n      }\r\n\r\n      // 3. 文件名安全检查\r\n      if (this.hasUnsafeFileName(metadata.originalName)) {\r\n        result.safe = false;\r\n        result.threats.push('文件名包含危险字符');\r\n      }\r\n\r\n      // 4. 文件内容扫描\r\n      const contentThreats = await this.scanFileContent(fileBuffer, metadata.mimeType);\r\n      if (contentThreats.length > 0) {\r\n        result.safe = false;\r\n        result.threats.push(...contentThreats);\r\n      }\r\n\r\n      // 5. 恶意软件检查\r\n      const malwareCheck = await this.checkMalware(hash, fileBuffer);\r\n      if (!malwareCheck.safe) {\r\n        result.safe = false;\r\n        result.threats.push(...malwareCheck.threats);\r\n      }\r\n\r\n      // 6. 记录扫描事件\r\n      await this.recordEvent({\r\n        type: SecurityEventType.SECURITY_SCAN,\r\n        severity: result.safe ? SecuritySeverity.LOW : SecuritySeverity.HIGH,\r\n        ip: '127.0.0.1', // 系统内部扫描\r\n        details: {\r\n          fileName: metadata.originalName,\r\n          fileSize: metadata.size,\r\n          fileType: metadata.mimeType,\r\n          hash,\r\n          threats: result.threats,\r\n          safe: result.safe,\r\n        },\r\n        riskScore: result.safe ? 1 : 8,\r\n      });\r\n\r\n      result.scanTime = Date.now() - startTime;\r\n\r\n      logger.info('File security scan completed', {\r\n        fileName: metadata.originalName,\r\n        safe: result.safe,\r\n        threats: result.threats.length,\r\n        scanTime: result.scanTime,\r\n      });\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error('File security scan failed', {\r\n        fileName: metadata.originalName,\r\n        error: error.message,\r\n      });\r\n\r\n      result.safe = false;\r\n      result.threats.push('扫描过程中发生错误');\r\n      result.scanTime = Date.now() - startTime;\r\n      \r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实时威胁检测\r\n   */\r\n  async detectThreats(request: {\r\n    ip: string;\r\n    userAgent?: string;\r\n    path: string;\r\n    method: string;\r\n    headers: Record<string, string>;\r\n    body?: any;\r\n  }): Promise<{\r\n    blocked: boolean;\r\n    threats: string[];\r\n    riskScore: number;\r\n  }> {\r\n    const threats: string[] = [];\r\n    let riskScore = 0;\r\n\r\n    // 1. IP黑名单检查\r\n    if (this.blockedIPs.has(request.ip)) {\r\n      threats.push('IP已被封禁');\r\n      riskScore += 10;\r\n    }\r\n\r\n    // 2. SQL注入检测\r\n    const sqlInjectionRisk = this.detectSQLInjection(request);\r\n    if (sqlInjectionRisk > 0) {\r\n      threats.push('疑似SQL注入攻击');\r\n      riskScore += sqlInjectionRisk;\r\n    }\r\n\r\n    // 3. XSS攻击检测\r\n    const xssRisk = this.detectXSS(request);\r\n    if (xssRisk > 0) {\r\n      threats.push('疑似XSS攻击');\r\n      riskScore += xssRisk;\r\n    }\r\n\r\n    // 4. 暴力破解检测\r\n    const bruteForceRisk = await this.detectBruteForce(request.ip);\r\n    if (bruteForceRisk > 0) {\r\n      threats.push('疑似暴力破解攻击');\r\n      riskScore += bruteForceRisk;\r\n    }\r\n\r\n    // 5. 异常User-Agent检测\r\n    const userAgentRisk = this.detectSuspiciousUserAgent(request.userAgent);\r\n    if (userAgentRisk > 0) {\r\n      threats.push('异常User-Agent');\r\n      riskScore += userAgentRisk;\r\n    }\r\n\r\n    // 6. 频率限制检查\r\n    const rateLimitRisk = await this.checkRateLimit(request.ip, request.path);\r\n    if (rateLimitRisk > 0) {\r\n      threats.push('请求频率过高');\r\n      riskScore += rateLimitRisk;\r\n    }\r\n\r\n    const blocked = riskScore >= 7;\r\n\r\n    // 记录威胁检测事件\r\n    if (threats.length > 0) {\r\n      await this.recordEvent({\r\n        type: riskScore >= 7 ? SecurityEventType.SUSPICIOUS_ACTIVITY : SecurityEventType.API_ACCESS,\r\n        severity: riskScore >= 7 ? SecuritySeverity.HIGH : SecuritySeverity.LOW,\r\n        ip: request.ip,\r\n        userAgent: request.userAgent,\r\n        details: {\r\n          path: request.path,\r\n          method: request.method,\r\n          threats,\r\n          riskScore,\r\n          blocked,\r\n        },\r\n        riskScore,\r\n      });\r\n    }\r\n\r\n    return { blocked, threats, riskScore };\r\n  }\r\n\r\n  /**\r\n   * 用户行为分析\r\n   */\r\n  async analyzeUserBehavior(userId: string): Promise<UserBehaviorAnalysis> {\r\n    const cached = this.userBehaviorCache.get(userId);\r\n    if (cached && Date.now() - cached.patterns.loginTimes[0] < 3600000) {\r\n      return cached;\r\n    }\r\n\r\n    const userEvents = Array.from(this.events.values())\r\n      .filter(event => event.userId === userId)\r\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\r\n      .slice(0, 100); // 最近100个事件\r\n\r\n    const analysis: UserBehaviorAnalysis = {\r\n      userId,\r\n      riskScore: 0,\r\n      anomalies: [],\r\n      patterns: {\r\n        loginTimes: [],\r\n        locations: [],\r\n        devices: [],\r\n        activities: [],\r\n      },\r\n      recommendations: [],\r\n    };\r\n\r\n    // 分析登录时间模式\r\n    const loginEvents = userEvents.filter(e => e.type === SecurityEventType.LOGIN_SUCCESS);\r\n    analysis.patterns.loginTimes = loginEvents.map(e => e.timestamp.getHours());\r\n\r\n    // 分析地理位置模式\r\n    const locations = userEvents\r\n      .filter(e => e.location?.city)\r\n      .map(e => e.location!.city!)\r\n      .filter((city, index, arr) => arr.indexOf(city) === index);\r\n    analysis.patterns.locations = locations;\r\n\r\n    // 分析设备模式\r\n    const devices = userEvents\r\n      .filter(e => e.userAgent)\r\n      .map(e => this.extractDeviceInfo(e.userAgent!))\r\n      .filter((device, index, arr) => arr.indexOf(device) === index);\r\n    analysis.patterns.devices = devices;\r\n\r\n    // 分析活动模式\r\n    const activities = userEvents\r\n      .map(e => e.type)\r\n      .filter((type, index, arr) => arr.indexOf(type) === index);\r\n    analysis.patterns.activities = activities;\r\n\r\n    // 检测异常\r\n    if (locations.length > 5) {\r\n      analysis.anomalies.push('多地登录');\r\n      analysis.riskScore += 2;\r\n    }\r\n\r\n    if (devices.length > 3) {\r\n      analysis.anomalies.push('多设备访问');\r\n      analysis.riskScore += 1;\r\n    }\r\n\r\n    const failedLogins = userEvents.filter(e => e.type === SecurityEventType.LOGIN_FAILURE);\r\n    if (failedLogins.length > 5) {\r\n      analysis.anomalies.push('频繁登录失败');\r\n      analysis.riskScore += 3;\r\n    }\r\n\r\n    // 生成建议\r\n    if (analysis.riskScore > 3) {\r\n      analysis.recommendations.push('建议启用双因素认证');\r\n    }\r\n\r\n    if (locations.length > 3) {\r\n      analysis.recommendations.push('建议设置登录地点白名单');\r\n    }\r\n\r\n    // 缓存分析结果\r\n    this.userBehaviorCache.set(userId, analysis);\r\n\r\n    return analysis;\r\n  }\r\n\r\n  /**\r\n   * 生成安全报告\r\n   */\r\n  async generateSecurityReport(timeRange: {\r\n    start: Date;\r\n    end: Date;\r\n  }): Promise<{\r\n    summary: {\r\n      totalEvents: number;\r\n      highRiskEvents: number;\r\n      blockedAttacks: number;\r\n      resolvedIncidents: number;\r\n    };\r\n    topThreats: Array<{\r\n      type: SecurityEventType;\r\n      count: number;\r\n      severity: SecuritySeverity;\r\n    }>;\r\n    riskTrends: Array<{\r\n      date: string;\r\n      riskScore: number;\r\n      eventCount: number;\r\n    }>;\r\n    recommendations: string[];\r\n  }> {\r\n    const events = Array.from(this.events.values())\r\n      .filter(event => \r\n        event.timestamp >= timeRange.start && \r\n        event.timestamp <= timeRange.end\r\n      );\r\n\r\n    const summary = {\r\n      totalEvents: events.length,\r\n      highRiskEvents: events.filter(e => e.riskScore >= 7).length,\r\n      blockedAttacks: events.filter(e => e.severity === SecuritySeverity.CRITICAL).length,\r\n      resolvedIncidents: events.filter(e => e.resolved).length,\r\n    };\r\n\r\n    // 统计威胁类型\r\n    const threatCounts = new Map<SecurityEventType, number>();\r\n    events.forEach(event => {\r\n      threatCounts.set(event.type, (threatCounts.get(event.type) || 0) + 1);\r\n    });\r\n\r\n    const topThreats = Array.from(threatCounts.entries())\r\n      .map(([type, count]) => ({\r\n        type,\r\n        count,\r\n        severity: this.getEventTypeSeverity(type),\r\n      }))\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 10);\r\n\r\n    // 风险趋势分析\r\n    const riskTrends = this.calculateRiskTrends(events, timeRange);\r\n\r\n    // 生成建议\r\n    const recommendations = this.generateSecurityRecommendations(events);\r\n\r\n    return {\r\n      summary,\r\n      topThreats,\r\n      riskTrends,\r\n      recommendations,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 私有方法：初始化威胁规则\r\n   */\r\n  private initializeThreatRules(): void {\r\n    const rules: ThreatRule[] = [\r\n      {\r\n        id: 'brute-force-detection',\r\n        name: '暴力破解检测',\r\n        type: SecurityEventType.LOGIN_FAILURE,\r\n        condition: (event, history) => {\r\n          const recentFailures = history.filter(e => \r\n            e.type === SecurityEventType.LOGIN_FAILURE &&\r\n            e.ip === event.ip &&\r\n            Date.now() - e.timestamp.getTime() < 300000 // 5分钟内\r\n          );\r\n          return recentFailures.length >= 5;\r\n        },\r\n        severity: SecuritySeverity.HIGH,\r\n        action: 'block',\r\n        enabled: true,\r\n      },\r\n      {\r\n        id: 'suspicious-location',\r\n        name: '异常地理位置',\r\n        type: SecurityEventType.LOGIN_SUCCESS,\r\n        condition: (event, history) => {\r\n          if (!event.location || !event.userId) return false;\r\n          \r\n          const recentLogins = history.filter(e =>\r\n            e.type === SecurityEventType.LOGIN_SUCCESS &&\r\n            e.userId === event.userId &&\r\n            e.location &&\r\n            Date.now() - e.timestamp.getTime() < 86400000 // 24小时内\r\n          );\r\n\r\n          const locations = recentLogins.map(e => e.location!.country).filter(Boolean);\r\n          const uniqueCountries = new Set(locations);\r\n          \r\n          return uniqueCountries.size > 2; // 24小时内从超过2个国家登录\r\n        },\r\n        severity: SecuritySeverity.MEDIUM,\r\n        action: 'alert',\r\n        enabled: true,\r\n      },\r\n      {\r\n        id: 'malware-upload',\r\n        name: '恶意文件上传',\r\n        type: SecurityEventType.FILE_UPLOAD,\r\n        condition: (event) => {\r\n          return event.details.threats && event.details.threats.length > 0;\r\n        },\r\n        severity: SecuritySeverity.CRITICAL,\r\n        action: 'quarantine',\r\n        enabled: true,\r\n      },\r\n    ];\r\n\r\n    rules.forEach(rule => {\r\n      this.threatRules.set(rule.id, rule);\r\n    });\r\n\r\n    logger.info('Threat rules initialized', { count: rules.length });\r\n  }\r\n\r\n  /**\r\n   * 私有方法：检查威胁规则\r\n   */\r\n  private async checkThreatRules(event: SecurityEvent): Promise<void> {\r\n    const history = Array.from(this.events.values())\r\n      .filter(e => e.timestamp.getTime() > Date.now() - 86400000) // 24小时历史\r\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n\r\n    for (const rule of this.threatRules.values()) {\r\n      if (!rule.enabled) continue;\r\n\r\n      try {\r\n        if (rule.condition(event, history)) {\r\n          await this.executeRuleAction(rule, event);\r\n          \r\n          logger.warn('Threat rule triggered', {\r\n            ruleId: rule.id,\r\n            ruleName: rule.name,\r\n            eventId: event.id,\r\n            action: rule.action,\r\n          });\r\n        }\r\n      } catch (error) {\r\n        logger.error('Threat rule execution failed', {\r\n          ruleId: rule.id,\r\n          error: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 私有方法：执行规则动作\r\n   */\r\n  private async executeRuleAction(rule: ThreatRule, event: SecurityEvent): Promise<void> {\r\n    switch (rule.action) {\r\n      case 'log':\r\n        // 已经记录了事件，无需额外操作\r\n        break;\r\n\r\n      case 'alert':\r\n        await this.sendSecurityAlert(rule, event);\r\n        break;\r\n\r\n      case 'block':\r\n        if (event.ip) {\r\n          this.blockedIPs.add(event.ip);\r\n          await enhancedCacheManager.set(\r\n            `security:blocked-ip:${event.ip}`,\r\n            { blockedAt: new Date(), reason: rule.name },\r\n            { ttl: 3600000 } // 1小时封禁\r\n          );\r\n        }\r\n        break;\r\n\r\n      case 'quarantine':\r\n        if (event.details.filePath) {\r\n          this.quarantinedFiles.add(event.details.filePath);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 私有方法：发送安全警报\r\n   */\r\n  private async sendSecurityAlert(rule: ThreatRule, event: SecurityEvent): Promise<void> {\r\n    // 这里可以集成邮件、短信、Slack等通知方式\r\n    logger.warn('Security alert triggered', {\r\n      ruleName: rule.name,\r\n      eventType: event.type,\r\n      severity: event.severity,\r\n      riskScore: event.riskScore,\r\n      details: event.details,\r\n    });\r\n\r\n    // 缓存警报以避免重复发送\r\n    await enhancedCacheManager.set(\r\n      `security:alert:${rule.id}:${event.ip}`,\r\n      { alertSent: true },\r\n      { ttl: 300000 } // 5分钟内不重复发送\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 私有方法：计算风险评分\r\n   */\r\n  private calculateRiskScore(event: SecurityEvent): number {\r\n    let score = 0;\r\n\r\n    // 基础评分\r\n    switch (event.severity) {\r\n      case SecuritySeverity.LOW:\r\n        score += 1;\r\n        break;\r\n      case SecuritySeverity.MEDIUM:\r\n        score += 3;\r\n        break;\r\n      case SecuritySeverity.HIGH:\r\n        score += 6;\r\n        break;\r\n      case SecuritySeverity.CRITICAL:\r\n        score += 10;\r\n        break;\r\n    }\r\n\r\n    // 事件类型评分\r\n    switch (event.type) {\r\n      case SecurityEventType.LOGIN_FAILURE:\r\n        score += 2;\r\n        break;\r\n      case SecurityEventType.SUSPICIOUS_ACTIVITY:\r\n        score += 5;\r\n        break;\r\n      case SecurityEventType.MALWARE_DETECTED:\r\n        score += 8;\r\n        break;\r\n      case SecurityEventType.SQL_INJECTION_ATTEMPT:\r\n        score += 7;\r\n        break;\r\n      case SecurityEventType.BRUTE_FORCE_ATTACK:\r\n        score += 6;\r\n        break;\r\n    }\r\n\r\n    // IP信誉评分\r\n    if (this.isKnownMaliciousIP(event.ip)) {\r\n      score += 5;\r\n    }\r\n\r\n    return Math.min(score, 10); // 最高10分\r\n  }\r\n\r\n  /**\r\n   * 私有方法：获取IP地理位置\r\n   */\r\n  private async getLocationFromIP(ip: string): Promise<{\r\n    country?: string;\r\n    city?: string;\r\n    coordinates?: [number, number];\r\n  }> {\r\n    try {\r\n      // 检查是否为本地IP\r\n      if (ip === '127.0.0.1' || ip === 'localhost' || ip.startsWith('192.168.') || ip.startsWith('10.')) {\r\n        return {\r\n          country: 'Local',\r\n          city: 'Local Network',\r\n          coordinates: [0, 0],\r\n        };\r\n      }\r\n\r\n      // 这里应该集成真实的IP地理位置服务，如：\r\n      // - MaxMind GeoIP2\r\n      // - IP2Location\r\n      // - ipapi.co\r\n      // - ipgeolocation.io\r\n      \r\n      // 示例：使用免费的ipapi.co服务\r\n      // const response = await fetch(`https://ipapi.co/${ip}/json/`);\r\n      // const data = await response.json();\r\n      // return {\r\n      //   country: data.country_name,\r\n      //   city: data.city,\r\n      //   coordinates: [data.latitude, data.longitude],\r\n      // };\r\n\r\n      // 暂时返回空对象，避免使用模拟数据\r\n      logger.warn('IP geolocation service not configured', { ip });\r\n      return {};\r\n\r\n    } catch (error) {\r\n      logger.error('Failed to get location from IP', { ip, error: error.message });\r\n      return {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 私有方法：文件内容扫描\r\n   */\r\n  private async scanFileContent(buffer: Buffer, mimeType: string): Promise<string[]> {\r\n    const threats: string[] = [];\r\n\r\n    try {\r\n      // 1. 检查文件头\r\n      const fileHeader = buffer.slice(0, 16).toString('hex');\r\n      if (this.isSuspiciousFileHeader(fileHeader, mimeType)) {\r\n        threats.push('文件头与声明类型不匹配');\r\n      }\r\n\r\n      // 2. 扫描恶意模式\r\n      const content = buffer.toString('utf8', 0, Math.min(buffer.length, 1024 * 1024)); // 只扫描前1MB\r\n      const maliciousPatterns = [\r\n        /eval\\s*\\(/gi,\r\n        /exec\\s*\\(/gi,\r\n        /system\\s*\\(/gi,\r\n        /<script[^>]*>/gi,\r\n        /javascript:/gi,\r\n        /vbscript:/gi,\r\n        /onload\\s*=/gi,\r\n        /onerror\\s*=/gi,\r\n      ];\r\n\r\n      for (const pattern of maliciousPatterns) {\r\n        if (pattern.test(content)) {\r\n          threats.push(`检测到恶意模式: ${pattern.source}`);\r\n        }\r\n      }\r\n\r\n      // 3. 检查嵌入的可执行文件\r\n      if (this.hasEmbeddedExecutable(buffer)) {\r\n        threats.push('文件包含嵌入的可执行代码');\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('File content scan failed', { error: error.message });\r\n      threats.push('文件内容扫描失败');\r\n    }\r\n\r\n    return threats;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：恶意软件检查\r\n   */\r\n  private async checkMalware(hash: string, buffer: Buffer): Promise<{\r\n    safe: boolean;\r\n    threats: string[];\r\n  }> {\r\n    const result = { safe: true, threats: [] as string[] };\r\n\r\n    try {\r\n      // 1. 检查已知恶意文件哈希\r\n      const knownMalwareHashes = await this.getKnownMalwareHashes();\r\n      if (knownMalwareHashes.has(hash)) {\r\n        result.safe = false;\r\n        result.threats.push('文件哈希匹配已知恶意软件');\r\n        return result;\r\n      }\r\n\r\n      // 2. 启发式检测\r\n      const heuristicThreats = this.heuristicMalwareDetection(buffer);\r\n      if (heuristicThreats.length > 0) {\r\n        result.safe = false;\r\n        result.threats.push(...heuristicThreats);\r\n      }\r\n\r\n      // 3. 行为分析（模拟）\r\n      const behaviorThreats = this.analyzeSuspiciousBehavior(buffer);\r\n      if (behaviorThreats.length > 0) {\r\n        result.safe = false;\r\n        result.threats.push(...behaviorThreats);\r\n      }\r\n\r\n    } catch (error) {\r\n      logger.error('Malware check failed', { hash, error: error.message });\r\n      result.safe = false;\r\n      result.threats.push('恶意软件检查失败');\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：SQL注入检测\r\n   */\r\n  private detectSQLInjection(request: any): number {\r\n    const sqlPatterns = [\r\n      /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)/gi,\r\n      /(\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+)/gi,\r\n      /(\\'|\\\"|;|--|\\*|\\|)/g,\r\n      /(\\bUNION\\b.*\\bSELECT\\b)/gi,\r\n      /(\\b(EXEC|EXECUTE)\\b.*\\b(SP_|XP_))/gi,\r\n    ];\r\n\r\n    const testStrings = [\r\n      JSON.stringify(request.body || {}),\r\n      request.path,\r\n      Object.values(request.headers).join(' '),\r\n    ];\r\n\r\n    let riskScore = 0;\r\n    for (const testString of testStrings) {\r\n      for (const pattern of sqlPatterns) {\r\n        if (pattern.test(testString)) {\r\n          riskScore += 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    return Math.min(riskScore, 8);\r\n  }\r\n\r\n  /**\r\n   * 私有方法：XSS检测\r\n   */\r\n  private detectXSS(request: any): number {\r\n    const xssPatterns = [\r\n      /<script[^>]*>.*?<\\/script>/gi,\r\n      /javascript:/gi,\r\n      /vbscript:/gi,\r\n      /on\\w+\\s*=/gi,\r\n      /<iframe[^>]*>/gi,\r\n      /<object[^>]*>/gi,\r\n      /<embed[^>]*>/gi,\r\n      /eval\\s*\\(/gi,\r\n    ];\r\n\r\n    const testStrings = [\r\n      JSON.stringify(request.body || {}),\r\n      request.path,\r\n      Object.values(request.headers).join(' '),\r\n    ];\r\n\r\n    let riskScore = 0;\r\n    for (const testString of testStrings) {\r\n      for (const pattern of xssPatterns) {\r\n        if (pattern.test(testString)) {\r\n          riskScore += 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    return Math.min(riskScore, 6);\r\n  }\r\n\r\n  /**\r\n   * 私有方法：暴力破解检测\r\n   */\r\n  private async detectBruteForce(ip: string): Promise<number> {\r\n    const cacheKey = `security:brute-force:${ip}`;\r\n    const attempts = await enhancedCacheManager.get<number>(cacheKey) || 0;\r\n    \r\n    if (attempts >= 10) {\r\n      return 8; // 高风险\r\n    } else if (attempts >= 5) {\r\n      return 4; // 中等风险\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：可疑User-Agent检测\r\n   */\r\n  private detectSuspiciousUserAgent(userAgent?: string): number {\r\n    if (!userAgent) return 1;\r\n\r\n    const suspiciousPatterns = [\r\n      /bot|crawler|spider/i,\r\n      /curl|wget|python|java/i,\r\n      /scanner|exploit|hack/i,\r\n      /^.{0,10}$/, // 过短的User-Agent\r\n      /^.{200,}$/, // 过长的User-Agent\r\n    ];\r\n\r\n    for (const pattern of suspiciousPatterns) {\r\n      if (pattern.test(userAgent)) {\r\n        return 2;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：频率限制检查\r\n   */\r\n  private async checkRateLimit(ip: string, path: string): Promise<number> {\r\n    const cacheKey = `security:rate-limit:${ip}:${path}`;\r\n    const requests = await enhancedCacheManager.get<number>(cacheKey) || 0;\r\n    \r\n    // 每分钟最多100个请求\r\n    if (requests > 100) {\r\n      return 6;\r\n    } else if (requests > 50) {\r\n      return 3;\r\n    }\r\n    \r\n    // 更新计数器\r\n    await enhancedCacheManager.set(cacheKey, requests + 1, { ttl: 60000 });\r\n    \r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：生成事件ID\r\n   */\r\n  private generateEventId(): string {\r\n    return `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：计算文件哈希\r\n   */\r\n  private calculateFileHash(buffer: Buffer): string {\r\n    const crypto = require('crypto');\r\n    return crypto.createHash('sha256').update(buffer).digest('hex');\r\n  }\r\n\r\n  /**\r\n   * 私有方法：获取允许的文件类型\r\n   */\r\n  private getAllowedFileTypes(): string[] {\r\n    return [\r\n      'image/jpeg',\r\n      'image/png',\r\n      'image/gif',\r\n      'image/webp',\r\n      'application/pdf',\r\n      'text/plain',\r\n      'application/json',\r\n      'application/xml',\r\n      'application/dwg',\r\n      'application/dxf',\r\n      'application/step',\r\n      'application/iges',\r\n      'model/obj',\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * 私有方法：获取文件大小限制\r\n   */\r\n  private getMaxFileSize(mimeType: string): number {\r\n    const limits: Record<string, number> = {\r\n      'image/jpeg': 10 * 1024 * 1024, // 10MB\r\n      'image/png': 10 * 1024 * 1024,\r\n      'application/pdf': 50 * 1024 * 1024, // 50MB\r\n      'application/dwg': 100 * 1024 * 1024, // 100MB\r\n      'application/dxf': 100 * 1024 * 1024,\r\n    };\r\n\r\n    return limits[mimeType] || 5 * 1024 * 1024; // 默认5MB\r\n  }\r\n\r\n  /**\r\n   * 私有方法：检查不安全的文件名\r\n   */\r\n  private hasUnsafeFileName(fileName: string): boolean {\r\n    const unsafePatterns = [\r\n      /\\.\\./,\r\n      /[<>:\"|?*]/,\r\n      /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i,\r\n      /\\.(exe|bat|cmd|scr|pif|com|dll|vbs|js|jar)$/i,\r\n    ];\r\n\r\n    return unsafePatterns.some(pattern => pattern.test(fileName));\r\n  }\r\n\r\n  /**\r\n   * 私有方法：启动后台任务\r\n   */\r\n  private startBackgroundTasks(): void {\r\n    // 定期清理过期事件\r\n    setInterval(() => {\r\n      this.cleanupExpiredEvents();\r\n    }, 3600000); // 每小时清理一次\r\n\r\n    // 定期更新威胁情报\r\n    setInterval(() => {\r\n      this.updateThreatIntelligence();\r\n    }, 86400000); // 每天更新一次\r\n\r\n    logger.info('Security audit background tasks started');\r\n  }\r\n\r\n  /**\r\n   * 私有方法：清理过期事件\r\n   */\r\n  private cleanupExpiredEvents(): void {\r\n    const cutoffTime = Date.now() - 30 * 24 * 3600000; // 30天前\r\n    let cleanedCount = 0;\r\n\r\n    for (const [id, event] of this.events.entries()) {\r\n      if (event.timestamp.getTime() < cutoffTime) {\r\n        this.events.delete(id);\r\n        cleanedCount++;\r\n      }\r\n    }\r\n\r\n    if (cleanedCount > 0) {\r\n      logger.info('Expired security events cleaned', { count: cleanedCount });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 私有方法：更新威胁情报\r\n   */\r\n  private async updateThreatIntelligence(): Promise<void> {\r\n    try {\r\n      // 这里可以集成第三方威胁情报服务\r\n      logger.info('Threat intelligence updated');\r\n    } catch (error) {\r\n      logger.error('Failed to update threat intelligence', { error: error.message });\r\n    }\r\n  }\r\n\r\n  // 其他辅助方法...\r\n  private isSuspiciousFileHeader(header: string, mimeType: string): boolean {\r\n    // 实现文件头检查逻辑\r\n    return false;\r\n  }\r\n\r\n  private hasEmbeddedExecutable(buffer: Buffer): boolean {\r\n    // 实现嵌入可执行文件检查\r\n    return false;\r\n  }\r\n\r\n  private async getKnownMalwareHashes(): Promise<Set<string>> {\r\n    // 返回已知恶意软件哈希集合\r\n    return new Set();\r\n  }\r\n\r\n  private heuristicMalwareDetection(buffer: Buffer): string[] {\r\n    // 实现启发式恶意软件检测\r\n    return [];\r\n  }\r\n\r\n  private analyzeSuspiciousBehavior(buffer: Buffer): string[] {\r\n    // 实现可疑行为分析\r\n    return [];\r\n  }\r\n\r\n  private isKnownMaliciousIP(ip: string): boolean {\r\n    // 检查IP是否在恶意IP列表中\r\n    return false;\r\n  }\r\n\r\n  private extractDeviceInfo(userAgent: string): string {\r\n    // 从User-Agent提取设备信息\r\n    return userAgent.split(' ')[0] || 'Unknown';\r\n  }\r\n\r\n  private getEventTypeSeverity(type: SecurityEventType): SecuritySeverity {\r\n    const severityMap: Record<SecurityEventType, SecuritySeverity> = {\r\n      [SecurityEventType.LOGIN_SUCCESS]: SecuritySeverity.LOW,\r\n      [SecurityEventType.LOGIN_FAILURE]: SecuritySeverity.MEDIUM,\r\n      [SecurityEventType.MALWARE_DETECTED]: SecuritySeverity.CRITICAL,\r\n      [SecurityEventType.SQL_INJECTION_ATTEMPT]: SecuritySeverity.HIGH,\r\n      [SecurityEventType.BRUTE_FORCE_ATTACK]: SecuritySeverity.HIGH,\r\n      // ... 其他映射\r\n    } as any;\r\n\r\n    return severityMap[type] || SecuritySeverity.MEDIUM;\r\n  }\r\n\r\n  private calculateRiskTrends(events: SecurityEvent[], timeRange: { start: Date; end: Date }): Array<{\r\n    date: string;\r\n    riskScore: number;\r\n    eventCount: number;\r\n  }> {\r\n    // 实现风险趋势计算\r\n    return [];\r\n  }\r\n\r\n  private generateSecurityRecommendations(events: SecurityEvent[]): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    const highRiskEvents = events.filter(e => e.riskScore >= 7);\r\n    if (highRiskEvents.length > 10) {\r\n      recommendations.push('建议加强安全监控和防护措施');\r\n    }\r\n\r\n    const loginFailures = events.filter(e => e.type === SecurityEventType.LOGIN_FAILURE);\r\n    if (loginFailures.length > 50) {\r\n      recommendations.push('建议实施更严格的密码策略');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  private async updateUserBehaviorAnalysis(userId: string, event: SecurityEvent): Promise<void> {\r\n    // 更新用户行为分析缓存\r\n    const analysis = await this.analyzeUserBehavior(userId);\r\n    this.userBehaviorCache.set(userId, analysis);\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const securityAuditSystem = SecurityAuditSystem.getInstance();\r\n\r\n// 导出便捷方法\r\nexport const recordSecurityEvent = securityAuditSystem.recordEvent.bind(securityAuditSystem);\r\nexport const scanFile = securityAuditSystem.scanFile.bind(securityAuditSystem);\r\nexport const detectThreats = securityAuditSystem.detectThreats.bind(securityAuditSystem);\r\nexport const analyzeUserBehavior = securityAuditSystem.analyzeUserBehavior.bind(securityAuditSystem);\r\nexport const generateSecurityReport = securityAuditSystem.generateSecurityReport.bind(securityAuditSystem); "],"names":["SecurityAuditSystem","SecurityEventType","SecuritySeverity","analyzeUserBehavior","detectThreats","generateSecurityReport","recordSecurityEvent","scanFile","securityAuditSystem","logger","Logger","events","Map","threatRules","blockedIPs","Set","quarantinedFiles","userBehaviorCache","initializeThreatRules","startBackgroundTasks","getInstance","instance","recordEvent","eventData","event","id","generateEventId","timestamp","Date","resolved","ip","location","getLocationFromIP","riskScore","calculateRiskScore","set","checkThreatRules","userId","updateUserBehaviorAnalysis","enhancedCacheManager","ttl","tags","info","eventId","type","severity","filePath","fileBuffer","metadata","startTime","now","hash","calculateFileHash","result","safe","threats","fileType","mimeType","size","scanTime","allowedTypes","getAllowedFileTypes","includes","push","maxSize","getMaxFileSize","hasUnsafeFileName","originalName","contentThreats","scanFileContent","length","malwareCheck","checkMalware","details","fileName","fileSize","error","message","request","has","sqlInjectionRisk","detectSQLInjection","xssRisk","detectXSS","bruteForceRisk","detectBruteForce","userAgentRisk","detectSuspiciousUserAgent","userAgent","rateLimitRisk","checkRateLimit","path","blocked","method","cached","get","patterns","loginTimes","userEvents","Array","from","values","filter","sort","a","b","getTime","slice","analysis","anomalies","locations","devices","activities","recommendations","loginEvents","e","map","getHours","city","index","arr","indexOf","extractDeviceInfo","device","failedLogins","timeRange","start","end","summary","totalEvents","highRiskEvents","blockedAttacks","resolvedIncidents","threatCounts","forEach","topThreats","entries","count","getEventTypeSeverity","riskTrends","calculateRiskTrends","generateSecurityRecommendations","rules","name","condition","history","recentFailures","action","enabled","recentLogins","country","Boolean","uniqueCountries","rule","executeRuleAction","warn","ruleId","ruleName","sendSecurityAlert","add","blockedAt","reason","eventType","alertSent","score","isKnownMaliciousIP","Math","min","startsWith","coordinates","buffer","fileHeader","toString","isSuspiciousFileHeader","content","maliciousPatterns","pattern","test","source","hasEmbeddedExecutable","knownMalwareHashes","getKnownMalwareHashes","heuristicThreats","heuristicMalwareDetection","behaviorThreats","analyzeSuspiciousBehavior","sqlPatterns","testStrings","JSON","stringify","body","Object","headers","join","testString","xssPatterns","cacheKey","attempts","suspiciousPatterns","requests","random","substr","crypto","require","createHash","update","digest","limits","unsafePatterns","some","setInterval","cleanupExpiredEvents","updateThreatIntelligence","cutoffTime","cleanedCount","delete","header","split","severityMap","loginFailures","bind"],"mappings":"AAAA,cAAc;AACd;;;;;;CAMC;;;;;;;;;;;IAiGYA,mBAAmB;eAAnBA;;IAvFDC,iBAAiB;eAAjBA;;IAwBAC,gBAAgB;eAAhBA;;IAulCCC,mBAAmB;eAAnBA;;IADAC,aAAa;eAAbA;;IAEAC,sBAAsB;eAAtBA;;IAJAC,mBAAmB;eAAnBA;;IACAC,QAAQ;eAARA;;IAJAC,mBAAmB;eAAnBA;;;wBAjnCU;sCACc;AAIrC,MAAMC,SAAS,IAAIC,cAAM,CAAC;AAGnB,IAAA,AAAKT,2CAAAA;;;;;;;;;;;;;;;;;;;;;WAAAA;;AAwBL,IAAA,AAAKC,0CAAAA;;;;;WAAAA;;AA+DL,MAAMF;IAQX,aAAsB;aANdW,SAAqC,IAAIC;aACzCC,cAAuC,IAAID;aAC3CE,aAA0B,IAAIC;aAC9BC,mBAAgC,IAAID;aACpCE,oBAAuD,IAAIL;QAGjE,IAAI,CAACM,qBAAqB;QAC1B,IAAI,CAACC,oBAAoB;IAC3B;IAEA,OAAcC,cAAmC;QAC/C,IAAI,CAACpB,oBAAoBqB,QAAQ,EAAE;YACjCrB,oBAAoBqB,QAAQ,GAAG,IAAIrB;QACrC;QACA,OAAOA,oBAAoBqB,QAAQ;IACrC;IAEA;;GAEC,GACD,MAAMC,YAAYC,SAA+D,EAAmB;QAClG,MAAMC,QAAuB;YAC3BC,IAAI,IAAI,CAACC,eAAe;YACxBC,WAAW,IAAIC;YACfC,UAAU;YACV,GAAGN,SAAS;QACd;QAEA,WAAW;QACX,IAAIC,MAAMM,EAAE,EAAE;YACZN,MAAMO,QAAQ,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACR,MAAMM,EAAE;QACxD;QAEA,SAAS;QACTN,MAAMS,SAAS,GAAG,IAAI,CAACC,kBAAkB,CAACV;QAE1C,OAAO;QACP,IAAI,CAACb,MAAM,CAACwB,GAAG,CAACX,MAAMC,EAAE,EAAED;QAE1B,SAAS;QACT,MAAM,IAAI,CAACY,gBAAgB,CAACZ;QAE5B,WAAW;QACX,IAAIA,MAAMa,MAAM,EAAE;YAChB,MAAM,IAAI,CAACC,0BAA0B,CAACd,MAAMa,MAAM,EAAEb;QACtD;QAEA,UAAU;QACV,IAAIA,MAAMS,SAAS,IAAI,GAAG;YACxB,MAAMM,0CAAoB,CAACJ,GAAG,CAC5B,CAAC,mBAAmB,EAAEX,MAAMC,EAAE,EAAE,EAChCD,OACA;gBAAEgB,KAAK;gBAAUC,MAAM;oBAAC;oBAAY;iBAAY;YAAC;QAErD;QAEAhC,OAAOiC,IAAI,CAAC,2BAA2B;YACrCC,SAASnB,MAAMC,EAAE;YACjBmB,MAAMpB,MAAMoB,IAAI;YAChBC,UAAUrB,MAAMqB,QAAQ;YACxBZ,WAAWT,MAAMS,SAAS;YAC1BI,QAAQb,MAAMa,MAAM;YACpBP,IAAIN,MAAMM,EAAE;QACd;QAEA,OAAON,MAAMC,EAAE;IACjB;IAEA;;GAEC,GACD,MAAMlB,SAASuC,QAAgB,EAAEC,UAAkB,EAAEC,QAIpD,EAA+B;QAC9B,MAAMC,YAAYrB,KAAKsB,GAAG;QAC1B,MAAMC,OAAO,IAAI,CAACC,iBAAiB,CAACL;QAEpC,MAAMM,SAA6B;YACjCC,MAAM;YACNC,SAAS,EAAE;YACXC,UAAUR,SAASS,QAAQ;YAC3BC,MAAMV,SAASU,IAAI;YACnBP;YACAQ,UAAU;QACZ;QAEA,IAAI;YACF,YAAY;YACZ,MAAMC,eAAe,IAAI,CAACC,mBAAmB;YAC7C,IAAI,CAACD,aAAaE,QAAQ,CAACd,SAASS,QAAQ,GAAG;gBAC7CJ,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,CAAC,CAAC,UAAU,EAAEf,SAASS,QAAQ,EAAE;YACtD;YAEA,YAAY;YACZ,MAAMO,UAAU,IAAI,CAACC,cAAc,CAACjB,SAASS,QAAQ;YACrD,IAAIT,SAASU,IAAI,GAAGM,SAAS;gBAC3BX,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,CAAC,CAAC,QAAQ,EAAEf,SAASU,IAAI,CAAC,GAAG,EAAEM,SAAS;YAC7D;YAEA,aAAa;YACb,IAAI,IAAI,CAACE,iBAAiB,CAAClB,SAASmB,YAAY,GAAG;gBACjDd,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,CAAC;YACtB;YAEA,YAAY;YACZ,MAAMK,iBAAiB,MAAM,IAAI,CAACC,eAAe,CAACtB,YAAYC,SAASS,QAAQ;YAC/E,IAAIW,eAAeE,MAAM,GAAG,GAAG;gBAC7BjB,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,IAAIK;YACzB;YAEA,YAAY;YACZ,MAAMG,eAAe,MAAM,IAAI,CAACC,YAAY,CAACrB,MAAMJ;YACnD,IAAI,CAACwB,aAAajB,IAAI,EAAE;gBACtBD,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,IAAIQ,aAAahB,OAAO;YAC7C;YAEA,YAAY;YACZ,MAAM,IAAI,CAACjC,WAAW,CAAC;gBACrBsB,IAAI;gBACJC,UAAUQ,OAAOC,IAAI;gBACrBxB,IAAI;gBACJ2C,SAAS;oBACPC,UAAU1B,SAASmB,YAAY;oBAC/BQ,UAAU3B,SAASU,IAAI;oBACvBF,UAAUR,SAASS,QAAQ;oBAC3BN;oBACAI,SAASF,OAAOE,OAAO;oBACvBD,MAAMD,OAAOC,IAAI;gBACnB;gBACArB,WAAWoB,OAAOC,IAAI,GAAG,IAAI;YAC/B;YAEAD,OAAOM,QAAQ,GAAG/B,KAAKsB,GAAG,KAAKD;YAE/BxC,OAAOiC,IAAI,CAAC,gCAAgC;gBAC1CgC,UAAU1B,SAASmB,YAAY;gBAC/Bb,MAAMD,OAAOC,IAAI;gBACjBC,SAASF,OAAOE,OAAO,CAACe,MAAM;gBAC9BX,UAAUN,OAAOM,QAAQ;YAC3B;YAEA,OAAON;QAET,EAAE,OAAOuB,OAAO;YACdnE,OAAOmE,KAAK,CAAC,6BAA6B;gBACxCF,UAAU1B,SAASmB,YAAY;gBAC/BS,OAAOA,MAAMC,OAAO;YACtB;YAEAxB,OAAOC,IAAI,GAAG;YACdD,OAAOE,OAAO,CAACQ,IAAI,CAAC;YACpBV,OAAOM,QAAQ,GAAG/B,KAAKsB,GAAG,KAAKD;YAE/B,OAAOI;QACT;IACF;IAEA;;GAEC,GACD,MAAMjD,cAAc0E,OAOnB,EAIE;QACD,MAAMvB,UAAoB,EAAE;QAC5B,IAAItB,YAAY;QAEhB,aAAa;QACb,IAAI,IAAI,CAACnB,UAAU,CAACiE,GAAG,CAACD,QAAQhD,EAAE,GAAG;YACnCyB,QAAQQ,IAAI,CAAC;YACb9B,aAAa;QACf;QAEA,aAAa;QACb,MAAM+C,mBAAmB,IAAI,CAACC,kBAAkB,CAACH;QACjD,IAAIE,mBAAmB,GAAG;YACxBzB,QAAQQ,IAAI,CAAC;YACb9B,aAAa+C;QACf;QAEA,aAAa;QACb,MAAME,UAAU,IAAI,CAACC,SAAS,CAACL;QAC/B,IAAII,UAAU,GAAG;YACf3B,QAAQQ,IAAI,CAAC;YACb9B,aAAaiD;QACf;QAEA,YAAY;QACZ,MAAME,iBAAiB,MAAM,IAAI,CAACC,gBAAgB,CAACP,QAAQhD,EAAE;QAC7D,IAAIsD,iBAAiB,GAAG;YACtB7B,QAAQQ,IAAI,CAAC;YACb9B,aAAamD;QACf;QAEA,oBAAoB;QACpB,MAAME,gBAAgB,IAAI,CAACC,yBAAyB,CAACT,QAAQU,SAAS;QACtE,IAAIF,gBAAgB,GAAG;YACrB/B,QAAQQ,IAAI,CAAC;YACb9B,aAAaqD;QACf;QAEA,YAAY;QACZ,MAAMG,gBAAgB,MAAM,IAAI,CAACC,cAAc,CAACZ,QAAQhD,EAAE,EAAEgD,QAAQa,IAAI;QACxE,IAAIF,gBAAgB,GAAG;YACrBlC,QAAQQ,IAAI,CAAC;YACb9B,aAAawD;QACf;QAEA,MAAMG,UAAU3D,aAAa;QAE7B,WAAW;QACX,IAAIsB,QAAQe,MAAM,GAAG,GAAG;YACtB,MAAM,IAAI,CAAChD,WAAW,CAAC;gBACrBsB,MAAMX,aAAa;gBACnBY,UAAUZ,aAAa;gBACvBH,IAAIgD,QAAQhD,EAAE;gBACd0D,WAAWV,QAAQU,SAAS;gBAC5Bf,SAAS;oBACPkB,MAAMb,QAAQa,IAAI;oBAClBE,QAAQf,QAAQe,MAAM;oBACtBtC;oBACAtB;oBACA2D;gBACF;gBACA3D;YACF;QACF;QAEA,OAAO;YAAE2D;YAASrC;YAAStB;QAAU;IACvC;IAEA;;GAEC,GACD,MAAM9B,oBAAoBkC,MAAc,EAAiC;QACvE,MAAMyD,SAAS,IAAI,CAAC7E,iBAAiB,CAAC8E,GAAG,CAAC1D;QAC1C,IAAIyD,UAAUlE,KAAKsB,GAAG,KAAK4C,OAAOE,QAAQ,CAACC,UAAU,CAAC,EAAE,GAAG,SAAS;YAClE,OAAOH;QACT;QAEA,MAAMI,aAAaC,MAAMC,IAAI,CAAC,IAAI,CAACzF,MAAM,CAAC0F,MAAM,IAC7CC,MAAM,CAAC9E,CAAAA,QAASA,MAAMa,MAAM,KAAKA,QACjCkE,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAE9E,SAAS,CAAC+E,OAAO,KAAKF,EAAE7E,SAAS,CAAC+E,OAAO,IAC1DC,KAAK,CAAC,GAAG,MAAM,WAAW;QAE7B,MAAMC,WAAiC;YACrCvE;YACAJ,WAAW;YACX4E,WAAW,EAAE;YACbb,UAAU;gBACRC,YAAY,EAAE;gBACda,WAAW,EAAE;gBACbC,SAAS,EAAE;gBACXC,YAAY,EAAE;YAChB;YACAC,iBAAiB,EAAE;QACrB;QAEA,WAAW;QACX,MAAMC,cAAchB,WAAWI,MAAM,CAACa,CAAAA,IAAKA,EAAEvE,IAAI;QACjDgE,SAASZ,QAAQ,CAACC,UAAU,GAAGiB,YAAYE,GAAG,CAACD,CAAAA,IAAKA,EAAExF,SAAS,CAAC0F,QAAQ;QAExE,WAAW;QACX,MAAMP,YAAYZ,WACfI,MAAM,CAACa,CAAAA,IAAKA,EAAEpF,QAAQ,EAAEuF,MACxBF,GAAG,CAACD,CAAAA,IAAKA,EAAEpF,QAAQ,CAAEuF,IAAI,EACzBhB,MAAM,CAAC,CAACgB,MAAMC,OAAOC,MAAQA,IAAIC,OAAO,CAACH,UAAUC;QACtDX,SAASZ,QAAQ,CAACc,SAAS,GAAGA;QAE9B,SAAS;QACT,MAAMC,UAAUb,WACbI,MAAM,CAACa,CAAAA,IAAKA,EAAE3B,SAAS,EACvB4B,GAAG,CAACD,CAAAA,IAAK,IAAI,CAACO,iBAAiB,CAACP,EAAE3B,SAAS,GAC3Cc,MAAM,CAAC,CAACqB,QAAQJ,OAAOC,MAAQA,IAAIC,OAAO,CAACE,YAAYJ;QAC1DX,SAASZ,QAAQ,CAACe,OAAO,GAAGA;QAE5B,SAAS;QACT,MAAMC,aAAad,WAChBkB,GAAG,CAACD,CAAAA,IAAKA,EAAEvE,IAAI,EACf0D,MAAM,CAAC,CAAC1D,MAAM2E,OAAOC,MAAQA,IAAIC,OAAO,CAAC7E,UAAU2E;QACtDX,SAASZ,QAAQ,CAACgB,UAAU,GAAGA;QAE/B,OAAO;QACP,IAAIF,UAAUxC,MAAM,GAAG,GAAG;YACxBsC,SAASC,SAAS,CAAC9C,IAAI,CAAC;YACxB6C,SAAS3E,SAAS,IAAI;QACxB;QAEA,IAAI8E,QAAQzC,MAAM,GAAG,GAAG;YACtBsC,SAASC,SAAS,CAAC9C,IAAI,CAAC;YACxB6C,SAAS3E,SAAS,IAAI;QACxB;QAEA,MAAM2F,eAAe1B,WAAWI,MAAM,CAACa,CAAAA,IAAKA,EAAEvE,IAAI;QAClD,IAAIgF,aAAatD,MAAM,GAAG,GAAG;YAC3BsC,SAASC,SAAS,CAAC9C,IAAI,CAAC;YACxB6C,SAAS3E,SAAS,IAAI;QACxB;QAEA,OAAO;QACP,IAAI2E,SAAS3E,SAAS,GAAG,GAAG;YAC1B2E,SAASK,eAAe,CAAClD,IAAI,CAAC;QAChC;QAEA,IAAI+C,UAAUxC,MAAM,GAAG,GAAG;YACxBsC,SAASK,eAAe,CAAClD,IAAI,CAAC;QAChC;QAEA,SAAS;QACT,IAAI,CAAC9C,iBAAiB,CAACkB,GAAG,CAACE,QAAQuE;QAEnC,OAAOA;IACT;IAEA;;GAEC,GACD,MAAMvG,uBAAuBwH,SAG5B,EAkBE;QACD,MAAMlH,SAASwF,MAAMC,IAAI,CAAC,IAAI,CAACzF,MAAM,CAAC0F,MAAM,IACzCC,MAAM,CAAC9E,CAAAA,QACNA,MAAMG,SAAS,IAAIkG,UAAUC,KAAK,IAClCtG,MAAMG,SAAS,IAAIkG,UAAUE,GAAG;QAGpC,MAAMC,UAAU;YACdC,aAAatH,OAAO2D,MAAM;YAC1B4D,gBAAgBvH,OAAO2F,MAAM,CAACa,CAAAA,IAAKA,EAAElF,SAAS,IAAI,GAAGqC,MAAM;YAC3D6D,gBAAgBxH,OAAO2F,MAAM,CAACa,CAAAA,IAAKA,EAAEtE,QAAQ,iBAAgCyB,MAAM;YACnF8D,mBAAmBzH,OAAO2F,MAAM,CAACa,CAAAA,IAAKA,EAAEtF,QAAQ,EAAEyC,MAAM;QAC1D;QAEA,SAAS;QACT,MAAM+D,eAAe,IAAIzH;QACzBD,OAAO2H,OAAO,CAAC9G,CAAAA;YACb6G,aAAalG,GAAG,CAACX,MAAMoB,IAAI,EAAE,AAACyF,CAAAA,aAAatC,GAAG,CAACvE,MAAMoB,IAAI,KAAK,CAAA,IAAK;QACrE;QAEA,MAAM2F,aAAapC,MAAMC,IAAI,CAACiC,aAAaG,OAAO,IAC/CpB,GAAG,CAAC,CAAC,CAACxE,MAAM6F,MAAM,GAAM,CAAA;gBACvB7F;gBACA6F;gBACA5F,UAAU,IAAI,CAAC6F,oBAAoB,CAAC9F;YACtC,CAAA,GACC2D,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAEgC,KAAK,GAAGjC,EAAEiC,KAAK,EAChC9B,KAAK,CAAC,GAAG;QAEZ,SAAS;QACT,MAAMgC,aAAa,IAAI,CAACC,mBAAmB,CAACjI,QAAQkH;QAEpD,OAAO;QACP,MAAMZ,kBAAkB,IAAI,CAAC4B,+BAA+B,CAAClI;QAE7D,OAAO;YACLqH;YACAO;YACAI;YACA1B;QACF;IACF;IAEA;;GAEC,GACD,AAAQ/F,wBAA8B;QACpC,MAAM4H,QAAsB;YAC1B;gBACErH,IAAI;gBACJsH,MAAM;gBACNnG,IAAI;gBACJoG,WAAW,CAACxH,OAAOyH;oBACjB,MAAMC,iBAAiBD,QAAQ3C,MAAM,CAACa,CAAAA,IACpCA,EAAEvE,IAAI,wBACNuE,EAAErF,EAAE,KAAKN,MAAMM,EAAE,IACjBF,KAAKsB,GAAG,KAAKiE,EAAExF,SAAS,CAAC+E,OAAO,KAAK,OAAO,OAAO;;oBAErD,OAAOwC,eAAe5E,MAAM,IAAI;gBAClC;gBACAzB,QAAQ;gBACRsG,QAAQ;gBACRC,SAAS;YACX;YACA;gBACE3H,IAAI;gBACJsH,MAAM;gBACNnG,IAAI;gBACJoG,WAAW,CAACxH,OAAOyH;oBACjB,IAAI,CAACzH,MAAMO,QAAQ,IAAI,CAACP,MAAMa,MAAM,EAAE,OAAO;oBAE7C,MAAMgH,eAAeJ,QAAQ3C,MAAM,CAACa,CAAAA,IAClCA,EAAEvE,IAAI,wBACNuE,EAAE9E,MAAM,KAAKb,MAAMa,MAAM,IACzB8E,EAAEpF,QAAQ,IACVH,KAAKsB,GAAG,KAAKiE,EAAExF,SAAS,CAAC+E,OAAO,KAAK,SAAS,QAAQ;;oBAGxD,MAAMI,YAAYuC,aAAajC,GAAG,CAACD,CAAAA,IAAKA,EAAEpF,QAAQ,CAAEuH,OAAO,EAAEhD,MAAM,CAACiD;oBACpE,MAAMC,kBAAkB,IAAIzI,IAAI+F;oBAEhC,OAAO0C,gBAAgB9F,IAAI,GAAG,GAAG,iBAAiB;gBACpD;gBACAb,QAAQ;gBACRsG,QAAQ;gBACRC,SAAS;YACX;YACA;gBACE3H,IAAI;gBACJsH,MAAM;gBACNnG,IAAI;gBACJoG,WAAW,CAACxH;oBACV,OAAOA,MAAMiD,OAAO,CAAClB,OAAO,IAAI/B,MAAMiD,OAAO,CAAClB,OAAO,CAACe,MAAM,GAAG;gBACjE;gBACAzB,QAAQ;gBACRsG,QAAQ;gBACRC,SAAS;YACX;SACD;QAEDN,MAAMR,OAAO,CAACmB,CAAAA;YACZ,IAAI,CAAC5I,WAAW,CAACsB,GAAG,CAACsH,KAAKhI,EAAE,EAAEgI;QAChC;QAEAhJ,OAAOiC,IAAI,CAAC,4BAA4B;YAAE+F,OAAOK,MAAMxE,MAAM;QAAC;IAChE;IAEA;;GAEC,GACD,MAAclC,iBAAiBZ,KAAoB,EAAiB;QAClE,MAAMyH,UAAU9C,MAAMC,IAAI,CAAC,IAAI,CAACzF,MAAM,CAAC0F,MAAM,IAC1CC,MAAM,CAACa,CAAAA,IAAKA,EAAExF,SAAS,CAAC+E,OAAO,KAAK9E,KAAKsB,GAAG,KAAK,UAAU,SAAS;SACpEqD,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAE9E,SAAS,CAAC+E,OAAO,KAAKF,EAAE7E,SAAS,CAAC+E,OAAO;QAE7D,KAAK,MAAM+C,QAAQ,IAAI,CAAC5I,WAAW,CAACwF,MAAM,GAAI;YAC5C,IAAI,CAACoD,KAAKL,OAAO,EAAE;YAEnB,IAAI;gBACF,IAAIK,KAAKT,SAAS,CAACxH,OAAOyH,UAAU;oBAClC,MAAM,IAAI,CAACS,iBAAiB,CAACD,MAAMjI;oBAEnCf,OAAOkJ,IAAI,CAAC,yBAAyB;wBACnCC,QAAQH,KAAKhI,EAAE;wBACfoI,UAAUJ,KAAKV,IAAI;wBACnBpG,SAASnB,MAAMC,EAAE;wBACjB0H,QAAQM,KAAKN,MAAM;oBACrB;gBACF;YACF,EAAE,OAAOvE,OAAO;gBACdnE,OAAOmE,KAAK,CAAC,gCAAgC;oBAC3CgF,QAAQH,KAAKhI,EAAE;oBACfmD,OAAOA,MAAMC,OAAO;gBACtB;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAc6E,kBAAkBD,IAAgB,EAAEjI,KAAoB,EAAiB;QACrF,OAAQiI,KAAKN,MAAM;YACjB,KAAK;gBAEH;YAEF,KAAK;gBACH,MAAM,IAAI,CAACW,iBAAiB,CAACL,MAAMjI;gBACnC;YAEF,KAAK;gBACH,IAAIA,MAAMM,EAAE,EAAE;oBACZ,IAAI,CAAChB,UAAU,CAACiJ,GAAG,CAACvI,MAAMM,EAAE;oBAC5B,MAAMS,0CAAoB,CAACJ,GAAG,CAC5B,CAAC,oBAAoB,EAAEX,MAAMM,EAAE,EAAE,EACjC;wBAAEkI,WAAW,IAAIpI;wBAAQqI,QAAQR,KAAKV,IAAI;oBAAC,GAC3C;wBAAEvG,KAAK;oBAAQ,EAAE,QAAQ;;gBAE7B;gBACA;YAEF,KAAK;gBACH,IAAIhB,MAAMiD,OAAO,CAAC3B,QAAQ,EAAE;oBAC1B,IAAI,CAAC9B,gBAAgB,CAAC+I,GAAG,CAACvI,MAAMiD,OAAO,CAAC3B,QAAQ;gBAClD;gBACA;QACJ;IACF;IAEA;;GAEC,GACD,MAAcgH,kBAAkBL,IAAgB,EAAEjI,KAAoB,EAAiB;QACrF,yBAAyB;QACzBf,OAAOkJ,IAAI,CAAC,4BAA4B;YACtCE,UAAUJ,KAAKV,IAAI;YACnBmB,WAAW1I,MAAMoB,IAAI;YACrBC,UAAUrB,MAAMqB,QAAQ;YACxBZ,WAAWT,MAAMS,SAAS;YAC1BwC,SAASjD,MAAMiD,OAAO;QACxB;QAEA,cAAc;QACd,MAAMlC,0CAAoB,CAACJ,GAAG,CAC5B,CAAC,eAAe,EAAEsH,KAAKhI,EAAE,CAAC,CAAC,EAAED,MAAMM,EAAE,EAAE,EACvC;YAAEqI,WAAW;QAAK,GAClB;YAAE3H,KAAK;QAAO,EAAE,YAAY;;IAEhC;IAEA;;GAEC,GACD,AAAQN,mBAAmBV,KAAoB,EAAU;QACvD,IAAI4I,QAAQ;QAEZ,OAAO;QACP,OAAQ5I,MAAMqB,QAAQ;YACpB;gBACEuH,SAAS;gBACT;YACF;gBACEA,SAAS;gBACT;YACF;gBACEA,SAAS;gBACT;YACF;gBACEA,SAAS;gBACT;QACJ;QAEA,SAAS;QACT,OAAQ5I,MAAMoB,IAAI;YAChB;gBACEwH,SAAS;gBACT;YACF;gBACEA,SAAS;gBACT;YACF;gBACEA,SAAS;gBACT;YACF;gBACEA,SAAS;gBACT;YACF;gBACEA,SAAS;gBACT;QACJ;QAEA,SAAS;QACT,IAAI,IAAI,CAACC,kBAAkB,CAAC7I,MAAMM,EAAE,GAAG;YACrCsI,SAAS;QACX;QAEA,OAAOE,KAAKC,GAAG,CAACH,OAAO,KAAK,QAAQ;IACtC;IAEA;;GAEC,GACD,MAAcpI,kBAAkBF,EAAU,EAIvC;QACD,IAAI;YACF,YAAY;YACZ,IAAIA,OAAO,eAAeA,OAAO,eAAeA,GAAG0I,UAAU,CAAC,eAAe1I,GAAG0I,UAAU,CAAC,QAAQ;gBACjG,OAAO;oBACLlB,SAAS;oBACThC,MAAM;oBACNmD,aAAa;wBAAC;wBAAG;qBAAE;gBACrB;YACF;YAEA,uBAAuB;YACvB,mBAAmB;YACnB,gBAAgB;YAChB,aAAa;YACb,qBAAqB;YAErB,qBAAqB;YACrB,gEAAgE;YAChE,sCAAsC;YACtC,WAAW;YACX,gCAAgC;YAChC,qBAAqB;YACrB,kDAAkD;YAClD,KAAK;YAEL,mBAAmB;YACnBhK,OAAOkJ,IAAI,CAAC,yCAAyC;gBAAE7H;YAAG;YAC1D,OAAO,CAAC;QAEV,EAAE,OAAO8C,OAAO;YACdnE,OAAOmE,KAAK,CAAC,kCAAkC;gBAAE9C;gBAAI8C,OAAOA,MAAMC,OAAO;YAAC;YAC1E,OAAO,CAAC;QACV;IACF;IAEA;;GAEC,GACD,MAAcR,gBAAgBqG,MAAc,EAAEjH,QAAgB,EAAqB;QACjF,MAAMF,UAAoB,EAAE;QAE5B,IAAI;YACF,WAAW;YACX,MAAMoH,aAAaD,OAAO/D,KAAK,CAAC,GAAG,IAAIiE,QAAQ,CAAC;YAChD,IAAI,IAAI,CAACC,sBAAsB,CAACF,YAAYlH,WAAW;gBACrDF,QAAQQ,IAAI,CAAC;YACf;YAEA,YAAY;YACZ,MAAM+G,UAAUJ,OAAOE,QAAQ,CAAC,QAAQ,GAAGN,KAAKC,GAAG,CAACG,OAAOpG,MAAM,EAAE,OAAO,QAAQ,UAAU;YAC5F,MAAMyG,oBAAoB;gBACxB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YAED,KAAK,MAAMC,WAAWD,kBAAmB;gBACvC,IAAIC,QAAQC,IAAI,CAACH,UAAU;oBACzBvH,QAAQQ,IAAI,CAAC,CAAC,SAAS,EAAEiH,QAAQE,MAAM,EAAE;gBAC3C;YACF;YAEA,gBAAgB;YAChB,IAAI,IAAI,CAACC,qBAAqB,CAACT,SAAS;gBACtCnH,QAAQQ,IAAI,CAAC;YACf;QAEF,EAAE,OAAOa,OAAO;YACdnE,OAAOmE,KAAK,CAAC,4BAA4B;gBAAEA,OAAOA,MAAMC,OAAO;YAAC;YAChEtB,QAAQQ,IAAI,CAAC;QACf;QAEA,OAAOR;IACT;IAEA;;GAEC,GACD,MAAciB,aAAarB,IAAY,EAAEuH,MAAc,EAGpD;QACD,MAAMrH,SAAS;YAAEC,MAAM;YAAMC,SAAS,EAAE;QAAa;QAErD,IAAI;YACF,gBAAgB;YAChB,MAAM6H,qBAAqB,MAAM,IAAI,CAACC,qBAAqB;YAC3D,IAAID,mBAAmBrG,GAAG,CAAC5B,OAAO;gBAChCE,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,CAAC;gBACpB,OAAOV;YACT;YAEA,WAAW;YACX,MAAMiI,mBAAmB,IAAI,CAACC,yBAAyB,CAACb;YACxD,IAAIY,iBAAiBhH,MAAM,GAAG,GAAG;gBAC/BjB,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,IAAIuH;YACzB;YAEA,cAAc;YACd,MAAME,kBAAkB,IAAI,CAACC,yBAAyB,CAACf;YACvD,IAAIc,gBAAgBlH,MAAM,GAAG,GAAG;gBAC9BjB,OAAOC,IAAI,GAAG;gBACdD,OAAOE,OAAO,CAACQ,IAAI,IAAIyH;YACzB;QAEF,EAAE,OAAO5G,OAAO;YACdnE,OAAOmE,KAAK,CAAC,wBAAwB;gBAAEzB;gBAAMyB,OAAOA,MAAMC,OAAO;YAAC;YAClExB,OAAOC,IAAI,GAAG;YACdD,OAAOE,OAAO,CAACQ,IAAI,CAAC;QACtB;QAEA,OAAOV;IACT;IAEA;;GAEC,GACD,AAAQ4B,mBAAmBH,OAAY,EAAU;QAC/C,MAAM4G,cAAc;YAClB;YACA;YACA;YACA;YACA;SACD;QAED,MAAMC,cAAc;YAClBC,KAAKC,SAAS,CAAC/G,QAAQgH,IAAI,IAAI,CAAC;YAChChH,QAAQa,IAAI;YACZoG,OAAO1F,MAAM,CAACvB,QAAQkH,OAAO,EAAEC,IAAI,CAAC;SACrC;QAED,IAAIhK,YAAY;QAChB,KAAK,MAAMiK,cAAcP,YAAa;YACpC,KAAK,MAAMX,WAAWU,YAAa;gBACjC,IAAIV,QAAQC,IAAI,CAACiB,aAAa;oBAC5BjK,aAAa;gBACf;YACF;QACF;QAEA,OAAOqI,KAAKC,GAAG,CAACtI,WAAW;IAC7B;IAEA;;GAEC,GACD,AAAQkD,UAAUL,OAAY,EAAU;QACtC,MAAMqH,cAAc;YAClB;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QAED,MAAMR,cAAc;YAClBC,KAAKC,SAAS,CAAC/G,QAAQgH,IAAI,IAAI,CAAC;YAChChH,QAAQa,IAAI;YACZoG,OAAO1F,MAAM,CAACvB,QAAQkH,OAAO,EAAEC,IAAI,CAAC;SACrC;QAED,IAAIhK,YAAY;QAChB,KAAK,MAAMiK,cAAcP,YAAa;YACpC,KAAK,MAAMX,WAAWmB,YAAa;gBACjC,IAAInB,QAAQC,IAAI,CAACiB,aAAa;oBAC5BjK,aAAa;gBACf;YACF;QACF;QAEA,OAAOqI,KAAKC,GAAG,CAACtI,WAAW;IAC7B;IAEA;;GAEC,GACD,MAAcoD,iBAAiBvD,EAAU,EAAmB;QAC1D,MAAMsK,WAAW,CAAC,qBAAqB,EAAEtK,IAAI;QAC7C,MAAMuK,WAAW,MAAM9J,0CAAoB,CAACwD,GAAG,CAASqG,aAAa;QAErE,IAAIC,YAAY,IAAI;YAClB,OAAO,GAAG,MAAM;QAClB,OAAO,IAAIA,YAAY,GAAG;YACxB,OAAO,GAAG,OAAO;QACnB;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,AAAQ9G,0BAA0BC,SAAkB,EAAU;QAC5D,IAAI,CAACA,WAAW,OAAO;QAEvB,MAAM8G,qBAAqB;YACzB;YACA;YACA;YACA;YACA;SACD;QAED,KAAK,MAAMtB,WAAWsB,mBAAoB;YACxC,IAAItB,QAAQC,IAAI,CAACzF,YAAY;gBAC3B,OAAO;YACT;QACF;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,MAAcE,eAAe5D,EAAU,EAAE6D,IAAY,EAAmB;QACtE,MAAMyG,WAAW,CAAC,oBAAoB,EAAEtK,GAAG,CAAC,EAAE6D,MAAM;QACpD,MAAM4G,WAAW,MAAMhK,0CAAoB,CAACwD,GAAG,CAASqG,aAAa;QAErE,cAAc;QACd,IAAIG,WAAW,KAAK;YAClB,OAAO;QACT,OAAO,IAAIA,WAAW,IAAI;YACxB,OAAO;QACT;QAEA,QAAQ;QACR,MAAMhK,0CAAoB,CAACJ,GAAG,CAACiK,UAAUG,WAAW,GAAG;YAAE/J,KAAK;QAAM;QAEpE,OAAO;IACT;IAEA;;GAEC,GACD,AAAQd,kBAA0B;QAChC,OAAO,CAAC,IAAI,EAAEE,KAAKsB,GAAG,GAAG,CAAC,EAAEoH,KAAKkC,MAAM,GAAG5B,QAAQ,CAAC,IAAI6B,MAAM,CAAC,GAAG,IAAI;IACvE;IAEA;;GAEC,GACD,AAAQrJ,kBAAkBsH,MAAc,EAAU;QAChD,MAAMgC,SAASC,QAAQ;QACvB,OAAOD,OAAOE,UAAU,CAAC,UAAUC,MAAM,CAACnC,QAAQoC,MAAM,CAAC;IAC3D;IAEA;;GAEC,GACD,AAAQjJ,sBAAgC;QACtC,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;IACH;IAEA;;GAEC,GACD,AAAQI,eAAeR,QAAgB,EAAU;QAC/C,MAAMsJ,SAAiC;YACrC,cAAc,KAAK,OAAO;YAC1B,aAAa,KAAK,OAAO;YACzB,mBAAmB,KAAK,OAAO;YAC/B,mBAAmB,MAAM,OAAO;YAChC,mBAAmB,MAAM,OAAO;QAClC;QAEA,OAAOA,MAAM,CAACtJ,SAAS,IAAI,IAAI,OAAO,MAAM,QAAQ;IACtD;IAEA;;GAEC,GACD,AAAQS,kBAAkBQ,QAAgB,EAAW;QACnD,MAAMsI,iBAAiB;YACrB;YACA;YACA;YACA;SACD;QAED,OAAOA,eAAeC,IAAI,CAACjC,CAAAA,UAAWA,QAAQC,IAAI,CAACvG;IACrD;IAEA;;GAEC,GACD,AAAQvD,uBAA6B;QACnC,WAAW;QACX+L,YAAY;YACV,IAAI,CAACC,oBAAoB;QAC3B,GAAG,UAAU,UAAU;QAEvB,WAAW;QACXD,YAAY;YACV,IAAI,CAACE,wBAAwB;QAC/B,GAAG,WAAW,SAAS;QAEvB3M,OAAOiC,IAAI,CAAC;IACd;IAEA;;GAEC,GACD,AAAQyK,uBAA6B;QACnC,MAAME,aAAazL,KAAKsB,GAAG,KAAK,KAAK,KAAK,SAAS,OAAO;QAC1D,IAAIoK,eAAe;QAEnB,KAAK,MAAM,CAAC7L,IAAID,MAAM,IAAI,IAAI,CAACb,MAAM,CAAC6H,OAAO,GAAI;YAC/C,IAAIhH,MAAMG,SAAS,CAAC+E,OAAO,KAAK2G,YAAY;gBAC1C,IAAI,CAAC1M,MAAM,CAAC4M,MAAM,CAAC9L;gBACnB6L;YACF;QACF;QAEA,IAAIA,eAAe,GAAG;YACpB7M,OAAOiC,IAAI,CAAC,mCAAmC;gBAAE+F,OAAO6E;YAAa;QACvE;IACF;IAEA;;GAEC,GACD,MAAcF,2BAA0C;QACtD,IAAI;YACF,kBAAkB;YAClB3M,OAAOiC,IAAI,CAAC;QACd,EAAE,OAAOkC,OAAO;YACdnE,OAAOmE,KAAK,CAAC,wCAAwC;gBAAEA,OAAOA,MAAMC,OAAO;YAAC;QAC9E;IACF;IAEA,YAAY;IACJgG,uBAAuB2C,MAAc,EAAE/J,QAAgB,EAAW;QACxE,YAAY;QACZ,OAAO;IACT;IAEQ0H,sBAAsBT,MAAc,EAAW;QACrD,cAAc;QACd,OAAO;IACT;IAEA,MAAcW,wBAA8C;QAC1D,eAAe;QACf,OAAO,IAAItK;IACb;IAEQwK,0BAA0Bb,MAAc,EAAY;QAC1D,cAAc;QACd,OAAO,EAAE;IACX;IAEQe,0BAA0Bf,MAAc,EAAY;QAC1D,WAAW;QACX,OAAO,EAAE;IACX;IAEQL,mBAAmBvI,EAAU,EAAW;QAC9C,iBAAiB;QACjB,OAAO;IACT;IAEQ4F,kBAAkBlC,SAAiB,EAAU;QACnD,oBAAoB;QACpB,OAAOA,UAAUiI,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;IACpC;IAEQ/E,qBAAqB9F,IAAuB,EAAoB;QACtE,MAAM8K,cAA2D;YAC/D,iBAAiC;YACjC,iBAAiC;YACjC,oBAAoC;YACpC,yBAAyC;YACzC,sBAAsC;QAExC;QAEA,OAAOA,WAAW,CAAC9K,KAAK;IAC1B;IAEQgG,oBAAoBjI,MAAuB,EAAEkH,SAAqC,EAIvF;QACD,WAAW;QACX,OAAO,EAAE;IACX;IAEQgB,gCAAgClI,MAAuB,EAAY;QACzE,MAAMsG,kBAA4B,EAAE;QAEpC,MAAMiB,iBAAiBvH,OAAO2F,MAAM,CAACa,CAAAA,IAAKA,EAAElF,SAAS,IAAI;QACzD,IAAIiG,eAAe5D,MAAM,GAAG,IAAI;YAC9B2C,gBAAgBlD,IAAI,CAAC;QACvB;QAEA,MAAM4J,gBAAgBhN,OAAO2F,MAAM,CAACa,CAAAA,IAAKA,EAAEvE,IAAI;QAC/C,IAAI+K,cAAcrJ,MAAM,GAAG,IAAI;YAC7B2C,gBAAgBlD,IAAI,CAAC;QACvB;QAEA,OAAOkD;IACT;IAEA,MAAc3E,2BAA2BD,MAAc,EAAEb,KAAoB,EAAiB;QAC5F,aAAa;QACb,MAAMoF,WAAW,MAAM,IAAI,CAACzG,mBAAmB,CAACkC;QAChD,IAAI,CAACpB,iBAAiB,CAACkB,GAAG,CAACE,QAAQuE;IACrC;AACF;AAGO,MAAMpG,sBAAsBR,oBAAoBoB,WAAW;AAG3D,MAAMd,sBAAsBE,oBAAoBc,WAAW,CAACsM,IAAI,CAACpN;AACjE,MAAMD,WAAWC,oBAAoBD,QAAQ,CAACqN,IAAI,CAACpN;AACnD,MAAMJ,gBAAgBI,oBAAoBJ,aAAa,CAACwN,IAAI,CAACpN;AAC7D,MAAML,sBAAsBK,oBAAoBL,mBAAmB,CAACyN,IAAI,CAACpN;AACzE,MAAMH,yBAAyBG,oBAAoBH,sBAAsB,CAACuN,IAAI,CAACpN"}