{"version":3,"sources":["E:\\zk-agent\\tests\\middleware\\global-error-handler.test.ts"],"sourcesContent":["// 简化的全局错误处理器测试\n// 避免Next.js依赖问题，专注于核心逻辑测试\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\n\n// Mock Next.js dependencies\nconst mockNextResponse = {\n  json: vi.fn((data: any, options?: any) => ({\n    json: async () => data,\n    status: options?.status || 200,\n    headers: options?.headers || {}\n  }))\n};\n\nvi.mock('next/server', () => ({\n  NextResponse: mockNextResponse,\n  NextRequest: vi.fn()\n}));\n\nvi.mock('../../lib/utils/api-logger', () => ({\n  ApiLogger: {\n    error: vi.fn(),\n    info: vi.fn(),\n    warn: vi.fn()\n  }\n}));\n\nvi.mock('../../lib/types/api-response', () => ({\n  ErrorCode: {\n    VALIDATION_ERROR: 'VALIDATION_ERROR',\n    NETWORK_ERROR: 'NETWORK_ERROR',\n    SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',\n    INTERNAL_ERROR: 'INTERNAL_ERROR'\n  }\n}));\n\n// 简化的错误类型定义\nenum AgentErrorType {\n  VALIDATION_ERROR = 'VALIDATION_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  SYSTEM_ERROR = 'SYSTEM_ERROR',\n  SERVICE_UNAVAILABLE = 'SERVICE_UNAVAILABLE'\n}\n\n// 简化的AgentError类\nclass AgentError extends Error {\n  public readonly id: string;\n  public readonly type: AgentErrorType;\n  public readonly statusCode: number;\n  public readonly userMessage: string;\n  public readonly retryable: boolean;\n  public readonly context?: any;\n  public readonly timestamp: string;\n  public readonly stack?: string;\n\n  constructor(\n    type: AgentErrorType,\n    message: string,\n    context?: any,\n    statusCode?: number\n  ) {\n    super(message);\n    this.name = 'AgentError';\n    this.id = Math.random().toString(36).substr(2, 9);\n    this.type = type;\n    this.context = context;\n    this.timestamp = new Date().toISOString();\n    this.statusCode = statusCode || this.getDefaultStatusCode(type);\n    this.userMessage = this.getUserMessage(type);\n    this.retryable = this.isRetryableError(type);\n  }\n\n  private getDefaultStatusCode(type: AgentErrorType): number {\n    switch (type) {\n      case AgentErrorType.VALIDATION_ERROR:\n        return 400;\n      case AgentErrorType.NETWORK_ERROR:\n        return 502;\n      case AgentErrorType.SERVICE_UNAVAILABLE:\n        return 503;\n      default:\n        return 500;\n    }\n  }\n\n  private getUserMessage(type: AgentErrorType): string {\n    switch (type) {\n      case AgentErrorType.VALIDATION_ERROR:\n        return '请求参数有误，请检查后重试';\n      case AgentErrorType.NETWORK_ERROR:\n        return '网络连接异常，请稍后重试';\n      case AgentErrorType.SERVICE_UNAVAILABLE:\n        return '服务暂时不可用，请稍后重试';\n      default:\n        return '系统内部错误，请联系管理员';\n    }\n  }\n\n  private isRetryableError(type: AgentErrorType): boolean {\n    return [AgentErrorType.NETWORK_ERROR, AgentErrorType.SERVICE_UNAVAILABLE].includes(type);\n  }\n}\n\n// 简化的全局错误处理器\nclass GlobalErrorHandler {\n  private static instance: GlobalErrorHandler;\n  private errorCount = 0;\n  private lastErrorTime = 0;\n  private circuitBreakerOpen = false;\n  private readonly circuitBreakerTimeout = 60000;\n  private readonly timeWindowMs = 60000;\n  private readonly errorThreshold = parseInt(process.env.ERROR_THRESHOLD || '50');\n  private circuitBreakerResetTimer?: NodeJS.Timeout;\n\n  static getInstance(): GlobalErrorHandler {\n    if (!GlobalErrorHandler.instance) {\n      GlobalErrorHandler.instance = new GlobalErrorHandler();\n    }\n    return GlobalErrorHandler.instance;\n  }\n\n  handleError(error: Error | AgentError, context?: any): any {\n    try {\n      let agentError: AgentError;\n      \n      if (error instanceof AgentError) {\n        agentError = error;\n      } else {\n        // 分类普通错误\n        const errorType = this.classifyError(error);\n        agentError = new AgentError(errorType, error.message, context);\n      }\n\n      // 记录错误\n      this.recordError(agentError);\n      \n      // 检查时间窗口并更新统计\n      this.checkTimeWindowAndUpdateStats();\n      \n      // 检查断路器\n      if (this.errorCount >= this.errorThreshold) {\n        this.openCircuitBreaker();\n      }\n      \n      return this.createErrorResponse(agentError);\n    } catch (handlerError) {\n      console.error('Error in error handler:', handlerError);\n      return this.createFallbackResponse();\n    }\n  }\n\n  private classifyError(error: Error): AgentErrorType {\n    if (error.name === 'ValidationError' || error.message.includes('validation')) {\n      return AgentErrorType.VALIDATION_ERROR;\n    }\n    if (error.name === 'NetworkError' || error.message.includes('network')) {\n      return AgentErrorType.NETWORK_ERROR;\n    }\n    return AgentErrorType.SYSTEM_ERROR;\n  }\n\n  private recordError(error: AgentError): void {\n    console.error('Error recorded:', {\n      id: error.id,\n      type: error.type,\n      message: error.message,\n      timestamp: error.timestamp\n    });\n  }\n\n  private updateErrorStats(): void {\n    const now = Date.now();\n    this.errorCount++;\n    this.lastErrorTime = now;\n  }\n\n  private checkTimeWindowAndUpdateStats(): void {\n    const now = Date.now();\n    \n    // 检查时间窗口是否过期\n    if (this.lastErrorTime > 0 && now - this.lastErrorTime > this.timeWindowMs) {\n      this.errorCount = 0;\n    }\n    \n    // 更新统计\n    this.errorCount++;\n    this.lastErrorTime = now;\n  }\n\n  private shouldTriggerCircuitBreaker(): boolean {\n    const now = Date.now();\n    \n    if (now - this.lastErrorTime > this.timeWindowMs) {\n      this.errorCount = 0;\n      this.lastErrorTime = now;\n    }\n    \n    return this.errorCount >= this.errorThreshold;\n  }\n\n  private openCircuitBreaker(): void {\n    if (this.circuitBreakerOpen) {\n      return;\n    }\n    \n    this.circuitBreakerOpen = true;\n    console.warn('🚨 Circuit breaker opened due to high error rate');\n    \n    if (this.circuitBreakerResetTimer) {\n      clearTimeout(this.circuitBreakerResetTimer);\n    }\n    \n    this.circuitBreakerResetTimer = setTimeout(() => {\n      this.circuitBreakerOpen = false;\n      this.errorCount = 0;\n      this.lastErrorTime = 0;\n      console.info('✅ Circuit breaker closed, service restored');\n    }, this.circuitBreakerTimeout);\n  }\n\n  private createErrorResponse(error: AgentError): any {\n    return mockNextResponse.json({\n      success: false,\n      error: {\n        code: error.type,\n        message: error.userMessage,\n        type: error.type\n      },\n      requestId: error.id,\n      timestamp: error.timestamp\n    }, { status: error.statusCode });\n  }\n\n  private createFallbackResponse(): any {\n    return mockNextResponse.json({\n      success: false,\n      error: {\n        code: 'INTERNAL_ERROR',\n        message: '系统内部错误',\n        type: 'SYSTEM_ERROR'\n      },\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n\n  isCircuitBreakerOpen(): boolean {\n    return this.circuitBreakerOpen;\n  }\n\n  getErrorStats() {\n    return {\n      errorCount: this.errorCount,\n      lastErrorTime: this.lastErrorTime,\n      circuitBreakerOpen: this.circuitBreakerOpen,\n      errorThreshold: this.errorThreshold,\n      timeWindowMs: this.timeWindowMs\n    };\n  }\n\n  // 重置实例（用于测试）\n  static resetInstance(): void {\n    GlobalErrorHandler.instance = undefined as any;\n  }\n}\n\ndescribe('GlobalErrorHandler', () => {\n  let errorHandler: GlobalErrorHandler;\n  \n  beforeEach(() => {\n    GlobalErrorHandler.resetInstance();\n    errorHandler = GlobalErrorHandler.getInstance();\n    delete process.env.ERROR_THRESHOLD;\n    vi.clearAllMocks();\n    vi.spyOn(console, 'error').mockImplementation(() => {});\n    vi.spyOn(console, 'warn').mockImplementation(() => {});\n    vi.spyOn(console, 'info').mockImplementation(() => {});\n  });\n  \n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('Singleton Pattern', () => {\n    it('should return the same instance', () => {\n      const instance1 = GlobalErrorHandler.getInstance();\n      const instance2 = GlobalErrorHandler.getInstance();\n      expect(instance1).toBe(instance2);\n    });\n  });\n\n  describe('Error Classification', () => {\n    it('should classify validation errors correctly', () => {\n      const validationError = new Error('Validation failed');\n      validationError.name = 'ValidationError';\n      \n      const result = errorHandler.handleError(validationError);\n      expect(result).toBeDefined();\n      expect(mockNextResponse.json).toHaveBeenCalled();\n    });\n\n    it('should classify network errors correctly', () => {\n      const networkError = new Error('Network timeout');\n      networkError.name = 'NetworkError';\n      \n      const result = errorHandler.handleError(networkError);\n      expect(result).toBeDefined();\n    });\n\n    it('should handle AgentError instances', () => {\n      const agentError = new AgentError(\n        AgentErrorType.VALIDATION_ERROR,\n        'Test validation error',\n        { field: 'email' }\n      );\n      \n      const result = errorHandler.handleError(agentError);\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('Circuit Breaker', () => {\n    it('should not trigger circuit breaker with few errors', () => {\n      for (let i = 0; i < 10; i++) {\n        errorHandler.handleError(new Error(`Error ${i}`));\n      }\n      \n      expect(errorHandler.isCircuitBreakerOpen()).toBe(false);\n    });\n\n    it('should trigger circuit breaker with many errors', () => {\n      process.env.ERROR_THRESHOLD = '5';\n      GlobalErrorHandler.resetInstance();\n      errorHandler = GlobalErrorHandler.getInstance();\n      \n      for (let i = 0; i < 6; i++) {\n        errorHandler.handleError(new Error(`Error ${i}`));\n      }\n      \n      expect(errorHandler.isCircuitBreakerOpen()).toBe(true);\n    });\n\n    it('should reset error count after time window', () => {\n      errorHandler.handleError(new Error('Test error'));\n      \n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBe(1);\n      \n      vi.useFakeTimers();\n      vi.advanceTimersByTime(61000);\n      \n      errorHandler.handleError(new Error('Another error'));\n      \n      const newStats = errorHandler.getErrorStats();\n      expect(newStats.errorCount).toBe(1);\n      \n      vi.useRealTimers();\n    });\n  });\n\n  describe('Error Statistics', () => {\n    it('should track error statistics correctly', () => {\n      const initialStats = errorHandler.getErrorStats();\n      expect(initialStats.errorCount).toBe(0);\n      \n      errorHandler.handleError(new Error('Test error'));\n      \n      const updatedStats = errorHandler.getErrorStats();\n      expect(updatedStats.errorCount).toBe(1);\n      expect(updatedStats.lastErrorTime).toBeGreaterThan(0);\n    });\n\n    it('should include configuration in stats', () => {\n      const stats = errorHandler.getErrorStats();\n      expect(stats).toHaveProperty('errorThreshold');\n      expect(stats).toHaveProperty('timeWindowMs');\n      expect(stats.timeWindowMs).toBe(60000);\n    });\n  });\n\n  describe('Error Response Format', () => {\n    it('should create properly formatted error responses', async () => {\n      const error = new AgentError(\n        AgentErrorType.VALIDATION_ERROR,\n        'Test validation error',\n        { field: 'email' }\n      );\n      \n      const response = errorHandler.handleError(error);\n      const responseBody = await response.json();\n      \n      expect(responseBody).toHaveProperty('success', false);\n      expect(responseBody).toHaveProperty('error');\n      expect(responseBody).toHaveProperty('requestId');\n      expect(responseBody).toHaveProperty('timestamp');\n      expect(responseBody.error).toHaveProperty('code');\n      expect(responseBody.error).toHaveProperty('message');\n      expect(responseBody.error).toHaveProperty('type');\n    });\n  });\n\n  describe('Error Recording', () => {\n    it('should record errors to monitoring system', () => {\n      const consoleSpy = vi.spyOn(console, 'error');\n      \n      const error = new AgentError(\n        AgentErrorType.SYSTEM_ERROR,\n        'Test system error'\n      );\n      \n      errorHandler.handleError(error);\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Error recorded:',\n        expect.objectContaining({\n          id: expect.any(String),\n          type: AgentErrorType.SYSTEM_ERROR,\n          message: 'Test system error',\n          timestamp: expect.any(String)\n        })\n      );\n    });\n  });\n\n  describe('Fallback Error Handling', () => {\n    it('should handle errors within the error handler', () => {\n      // 模拟错误处理器内部错误\n      const originalRecordError = (errorHandler as any).recordError;\n      (errorHandler as any).recordError = () => {\n        throw new Error('Recording failed');\n      };\n      \n      const result = errorHandler.handleError(new Error('Test error'));\n      expect(result).toBeDefined();\n      \n      // 恢复原方法\n      (errorHandler as any).recordError = originalRecordError;\n    });\n  });\n});\n\n// 集成测试\ndescribe('GlobalErrorHandler Integration', () => {\n  it('should handle complete error flow', async () => {\n    const errorHandler = GlobalErrorHandler.getInstance();\n    \n    const error = new Error('Database connection failed');\n    const result = errorHandler.handleError(error);\n    \n    expect(result).toBeDefined();\n    expect(result.status).toBeGreaterThanOrEqual(400);\n    \n    const responseBody = await result.json();\n    expect(responseBody.success).toBe(false);\n    expect(responseBody.error).toBeDefined();\n    expect(responseBody.requestId).toBeDefined();\n  });\n\n  it('should maintain circuit breaker state across multiple errors', () => {\n    process.env.ERROR_THRESHOLD = '3';\n    GlobalErrorHandler.resetInstance();\n    const errorHandler = GlobalErrorHandler.getInstance();\n    \n    // 触发断路器\n    for (let i = 0; i < 4; i++) {\n      errorHandler.handleError(new Error(`Error ${i}`));\n    }\n    \n    expect(errorHandler.isCircuitBreakerOpen()).toBe(true);\n    \n    const stats = errorHandler.getErrorStats();\n    expect(stats.circuitBreakerOpen).toBe(true);\n    expect(stats.errorCount).toBeGreaterThanOrEqual(3);\n  });\n});"],"names":["mockNextResponse","json","vi","fn","data","options","status","headers","mock","NextResponse","NextRequest","ApiLogger","error","info","warn","ErrorCode","VALIDATION_ERROR","NETWORK_ERROR","SERVICE_UNAVAILABLE","INTERNAL_ERROR","AgentErrorType","AgentError","Error","constructor","type","message","context","statusCode","name","id","Math","random","toString","substr","timestamp","Date","toISOString","getDefaultStatusCode","userMessage","getUserMessage","retryable","isRetryableError","includes","GlobalErrorHandler","getInstance","instance","handleError","agentError","errorType","classifyError","recordError","checkTimeWindowAndUpdateStats","errorCount","errorThreshold","openCircuitBreaker","createErrorResponse","handlerError","console","createFallbackResponse","updateErrorStats","now","lastErrorTime","timeWindowMs","shouldTriggerCircuitBreaker","circuitBreakerOpen","circuitBreakerResetTimer","clearTimeout","setTimeout","circuitBreakerTimeout","success","code","requestId","isCircuitBreakerOpen","getErrorStats","resetInstance","undefined","parseInt","process","env","ERROR_THRESHOLD","describe","errorHandler","beforeEach","clearAllMocks","spyOn","mockImplementation","afterEach","restoreAllMocks","it","instance1","instance2","expect","toBe","validationError","result","toBeDefined","toHaveBeenCalled","networkError","field","i","stats","useFakeTimers","advanceTimersByTime","newStats","useRealTimers","initialStats","updatedStats","toBeGreaterThan","toHaveProperty","response","responseBody","consoleSpy","toHaveBeenCalledWith","objectContaining","any","String","originalRecordError","toBeGreaterThanOrEqual"],"mappings":"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"}