{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\database\\poster-db.test.ts"],"sourcesContent":["/**\n * 海报数据库操作测试\n * 测试poster-db.ts中的所有方法\n */\n\nimport { PosterDatabase } from '@/lib/database/poster-db'\nimport { PrismaClient } from '@prisma/client'\nimport type { PosterStyle, PosterSize, ColorPalette, PosterTask } from '@/types/poster'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\nconst mockPrisma = {\n  posterStyle: {\n    findMany: jest.fn(),\n  },\n  posterSize: {\n    findMany: jest.fn(),\n  },\n  colorPalette: {\n    findMany: jest.fn(),\n  },\n  posterTask: {\n    create: jest.fn(),\n    update: jest.fn(),\n    findMany: jest.fn(),\n    findUnique: jest.fn(),\n  },\n  posterGenerationHistory: {\n    create: jest.fn(),\n    findMany: jest.fn(),\n  },\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrisma as any)\n\ndescribe('PosterDatabase', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('getStyles', () => {\n    it('应该成功获取海报风格列表', async () => {\n      const mockStyles = [\n        {\n          id: '1',\n          name: '现代简约',\n          description: '简洁现代的设计风格',\n          category: 'modern',\n          previewUrl: 'https://example.com/preview1.jpg',\n          isActive: true,\n          order: 1,\n        },\n        {\n          id: '2',\n          name: '复古经典',\n          description: '经典复古的设计风格',\n          category: 'vintage',\n          previewUrl: 'https://example.com/preview2.jpg',\n          isActive: true,\n          order: 2,\n        },\n      ]\n\n      mockPrisma.posterStyle.findMany.mockResolvedValue(mockStyles)\n\n      const result = await PosterDatabase.getStyles()\n\n      expect(mockPrisma.posterStyle.findMany).toHaveBeenCalledWith({\n        where: { isActive: true },\n        orderBy: { order: 'asc' },\n      })\n\n      expect(result).toEqual([\n        {\n          id: '1',\n          name: '现代简约',\n          description: '简洁现代的设计风格',\n          category: 'modern',\n          previewUrl: 'https://example.com/preview1.jpg',\n        },\n        {\n          id: '2',\n          name: '复古经典',\n          description: '经典复古的设计风格',\n          category: 'vintage',\n          previewUrl: 'https://example.com/preview2.jpg',\n        },\n      ])\n    })\n\n    it('应该处理获取风格时的错误', async () => {\n      mockPrisma.posterStyle.findMany.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.getStyles()).rejects.toThrow('获取海报风格失败')\n    })\n  })\n\n  describe('getSizes', () => {\n    it('应该成功获取海报尺寸列表', async () => {\n      const mockSizes = [\n        {\n          id: '1',\n          name: 'A4',\n          dimensions: '210x297mm',\n          ratio: '1:1.414',\n          width: 210,\n          height: 297,\n          isActive: true,\n          order: 1,\n        },\n      ]\n\n      mockPrisma.posterSize.findMany.mockResolvedValue(mockSizes)\n\n      const result = await PosterDatabase.getSizes()\n\n      expect(mockPrisma.posterSize.findMany).toHaveBeenCalledWith({\n        where: { isActive: true },\n        orderBy: { order: 'asc' },\n      })\n\n      expect(result).toEqual([\n        {\n          id: '1',\n          name: 'A4',\n          dimensions: '210x297mm',\n          ratio: '1:1.414',\n          height: 297,\n        },\n      ])\n    })\n\n    it('应该处理获取尺寸时的错误', async () => {\n      mockPrisma.posterSize.findMany.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.getSizes()).rejects.toThrow('获取海报尺寸失败')\n    })\n  })\n\n  describe('getColorPalettes', () => {\n    it('应该成功获取配色方案列表', async () => {\n      const mockPalettes = [\n        {\n          id: '1',\n          name: '清新蓝绿',\n          colors: ['#00BCD4', '#4CAF50', '#8BC34A'],\n          description: '清新自然的蓝绿配色',\n          isActive: true,\n          order: 1,\n        },\n      ]\n\n      mockPrisma.colorPalette.findMany.mockResolvedValue(mockPalettes)\n\n      const result = await PosterDatabase.getColorPalettes()\n\n      expect(mockPrisma.colorPalette.findMany).toHaveBeenCalledWith({\n        where: { isActive: true },\n        orderBy: { order: 'asc' },\n      })\n\n      expect(result).toEqual([\n        {\n          id: '1',\n          name: '清新蓝绿',\n          colors: ['#00BCD4', '#4CAF50', '#8BC34A'],\n          description: '清新自然的蓝绿配色',\n        },\n      ])\n    })\n\n    it('应该处理获取配色方案时的错误', async () => {\n      mockPrisma.colorPalette.findMany.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.getColorPalettes()).rejects.toThrow('获取配色方案失败')\n    })\n  })\n\n  describe('createPosterTask', () => {\n    it('应该成功创建海报任务', async () => {\n      const taskData = {\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n        referenceImageUrl: 'https://example.com/ref.jpg',\n        templateId: 'template1',\n      }\n\n      const mockCreatedTask = {\n        id: 'task123',\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n        referenceImageUrl: 'https://example.com/ref.jpg',\n        resultImageUrl: '',\n        createdAt: new Date('2024-01-01'),\n        templateId: 'template1',\n        status: 'pending',\n        updatedAt: new Date('2024-01-01'),\n      }\n\n      mockPrisma.posterTask.create.mockResolvedValue(mockCreatedTask)\n\n      const result = await PosterDatabase.createPosterTask(taskData)\n\n      expect(mockPrisma.posterTask.create).toHaveBeenCalledWith({\n        data: {\n          userId: 'user123',\n          description: '创建一个现代风格的海报',\n          style: 'modern',\n          size: 'A4',\n          palette: 'blue-green',\n          referenceImageUrl: 'https://example.com/ref.jpg',\n          templateId: 'template1',\n          resultImageUrl: '',\n          status: 'pending',\n        },\n      })\n\n      expect(result).toEqual({\n        id: 'task123',\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n        referenceImageUrl: 'https://example.com/ref.jpg',\n        resultImageUrl: '',\n        createdAt: new Date('2024-01-01'),\n      })\n    })\n\n    it('应该处理创建任务时的错误', async () => {\n      const taskData = {\n        userId: 'user123',\n        description: '创建一个现代风格的海报',\n        style: 'modern',\n        size: 'A4',\n        palette: 'blue-green',\n      }\n\n      mockPrisma.posterTask.create.mockRejectedValue(new Error('Database error'))\n\n      await expect(PosterDatabase.createPosterTask(taskData)).rejects.toThrow('创建海报任务失败')\n    })\n  })\n\n  describe('updatePosterTaskResult', () => {\n    it('应该成功更新海报任务结果', async () => {\n      const taskId = 'task123'\n      const resultImageUrl = 'https://example.com/result.jpg'\n\n      mockPrisma.posterTask.update.mockResolvedValue({})\n\n      await PosterDatabase.updatePosterTaskResult(taskId, resultImageUrl)\n\n      expect(mockPrisma.posterTask.update).toHaveBeenCalledWith({\n        where: { id: taskId },\n        data: {\n          resultImageUrl,\n          status: 'completed',\n          updatedAt: expect.any(Date),\n        },\n      })\n    })\n\n    it('应该处理更新任务结果时的错误', async () => {\n      mockPrisma.posterTask.update.mockRejectedValue(new Error('Database error'))\n\n      await expect(\n        PosterDatabase.updatePosterTaskResult('task123', 'https://example.com/result.jpg')\n      ).rejects.toThrow('更新海报任务结果失败')\n    })\n  })\n})"],"names":["jest","mock","mockPrisma","posterStyle","findMany","fn","posterSize","colorPalette","posterTask","create","update","findUnique","posterGenerationHistory","PrismaClient","mockImplementation","describe","beforeEach","clearAllMocks","it","mockStyles","id","name","description","category","previewUrl","isActive","order","mockResolvedValue","result","PosterDatabase","getStyles","expect","toHaveBeenCalledWith","where","orderBy","toEqual","mockRejectedValue","Error","rejects","toThrow","mockSizes","dimensions","ratio","width","height","getSizes","mockPalettes","colors","getColorPalettes","taskData","userId","style","size","palette","referenceImageUrl","templateId","mockCreatedTask","resultImageUrl","createdAt","Date","status","updatedAt","createPosterTask","data","taskId","updatePosterTaskResult","any"],"mappings":"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"}