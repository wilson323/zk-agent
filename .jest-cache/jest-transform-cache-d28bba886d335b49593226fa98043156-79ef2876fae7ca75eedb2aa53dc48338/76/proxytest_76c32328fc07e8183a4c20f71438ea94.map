{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\proxy.test.ts"],"sourcesContent":["/**\n * 代理API路由错误处理测试\n * 测试代理服务、请求转发、响应处理等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '@/app/api/proxy/route';\n// import { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/proxy-manager', () => ({\n  forwardRequest: jest.fn(),\n  validateProxyTarget: jest.fn(),\n  checkProxyPermissions: jest.fn(),\n  transformRequest: jest.fn(),\n  transformResponse: jest.fn(),\n  getProxyConfiguration: jest.fn(),\n  updateProxyRules: jest.fn(),\n  logProxyActivity: jest.fn()\n}));\n\njest.mock('../../../lib/security/proxy-security', () => ({\n  validateTargetUrl: jest.fn(),\n  checkRateLimits: jest.fn(),\n  sanitizeHeaders: jest.fn(),\n  validateRequestBody: jest.fn(),\n  checkBlacklist: jest.fn(),\n  enforceSecurityPolicies: jest.fn()\n}));\n\njest.mock('../../../lib/cache/proxy-cache', () => ({\n  getCachedResponse: jest.fn(),\n  setCachedResponse: jest.fn(),\n  invalidateCache: jest.fn(),\n  checkCachePolicy: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkProxyPermissions: jest.fn()\n}));\n\ndescribe('Proxy API Error Handling', () => {\n  let errorHandler: any;\n\n  beforeEach(() => {\n    // errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler = { errorCount: 0, circuitBreakerOpen: false };\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/proxy - Forward GET Requests', () => {\n    it('should handle invalid target URL', async () => {\n      const { validateTargetUrl } = require('../../../lib/security/proxy-security');\n      validateTargetUrl.mockRejectedValue(new Error('Invalid target URL format'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=invalid-url');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid target URL format');\n    });\n\n    it('should handle missing target parameter', async () => {\n      const request = new NextRequest('http://localhost:3000/api/proxy');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Target URL is required');\n    });\n\n    it('should handle blacklisted target URL', async () => {\n      const { checkBlacklist } = require('../../../lib/security/proxy-security');\n      checkBlacklist.mockRejectedValue(new Error('Target URL is blacklisted'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://blacklisted.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Target URL is blacklisted');\n    });\n\n    it('should handle proxy rate limit exceeded', async () => {\n      const { checkRateLimits } = require('../../../lib/security/proxy-security');\n      checkRateLimits.mockRejectedValue(new Error('Proxy rate limit exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://api.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.code).toBe('RATE_LIMIT_ERROR');\n      expect(data.error.message).toContain('Proxy rate limit exceeded');\n    });\n\n    it('should handle target server connection timeout', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Connection timeout to target server'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://slow.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504); // Gateway timeout\n      expect(data.error.message).toContain('Connection timeout to target server');\n    });\n\n    it('should handle target server unavailable', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Target server unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://down.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(502); // Bad gateway\n      expect(data.error.message).toContain('Target server unavailable');\n    });\n\n    it('should handle DNS resolution failure', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('DNS resolution failed for target'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://nonexistent.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(502);\n      expect(data.error.message).toContain('DNS resolution failed');\n    });\n\n    it('should handle SSL certificate verification failure', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('SSL certificate verification failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://invalid-ssl.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(502);\n      expect(data.error.message).toContain('SSL certificate verification failed');\n    });\n\n    it('should handle insufficient proxy permissions', async () => {\n      const { checkProxyPermissions } = require('../../../lib/auth/session');\n      checkProxyPermissions.mockRejectedValue(new Error('Insufficient proxy permissions'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://restricted.example.com', {\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle proxy configuration not found', async () => {\n      const { getProxyConfiguration } = require('../../../lib/services/proxy-manager');\n      getProxyConfiguration.mockRejectedValue(new Error('Proxy configuration not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://unconfigured.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Proxy configuration not found');\n    });\n  });\n\n  describe('POST /api/proxy - Forward POST Requests', () => {\n    let validRequestBody: any;\n\n    beforeEach(() => {\n      validRequestBody = {\n        target: 'https://api.example.com/data',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer target-token'\n        },\n        body: {\n          data: 'test data'\n        }\n      };\n    });\n\n    it('should handle invalid request body format', async () => {\n      const { validateRequestBody } = require('../../../lib/security/proxy-security');\n      validateRequestBody.mockRejectedValue(new Error('Invalid request body format'));\n\n      const invalidBody = 'invalid json';\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: invalidBody,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid request body format');\n    });\n\n    it('should handle malicious headers injection', async () => {\n      const { sanitizeHeaders } = require('../../../lib/security/proxy-security');\n      sanitizeHeaders.mockRejectedValue(new Error('Malicious headers detected'));\n\n      const maliciousBody = {\n        ...validRequestBody,\n        headers: {\n          'X-Forwarded-For': '127.0.0.1; rm -rf /',\n          'Host': 'evil.com'\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: JSON.stringify(maliciousBody),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Malicious headers detected');\n    });\n\n    it('should handle request body size limit exceeded', async () => {\n      const { validateRequestBody } = require('../../../lib/security/proxy-security');\n      validateRequestBody.mockRejectedValue(new Error('Request body size limit exceeded'));\n\n      const largeBody = {\n        ...validRequestBody,\n        body: 'x'.repeat(10 * 1024 * 1024) // 10MB\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: JSON.stringify(largeBody),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(413); // Payload too large\n      expect(data.error.message).toContain('Request body size limit exceeded');\n    });\n\n    it('should handle target server authentication failure', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Target server authentication failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: JSON.stringify(validRequestBody),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Target server authentication failed');\n    });\n\n    it('should handle target server validation error', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Target server validation error: Invalid data format'));\n\n      const invalidDataBody = {\n        ...validRequestBody,\n        body: { invalid: 'data' }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: JSON.stringify(invalidDataBody),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Target server validation error');\n    });\n\n    it('should handle request transformation failure', async () => {\n      const { transformRequest } = require('../../../lib/services/proxy-manager');\n      transformRequest.mockRejectedValue(new Error('Request transformation failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: JSON.stringify(validRequestBody),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Request transformation failed');\n    });\n\n    it('should handle response transformation failure', async () => {\n      const { transformResponse } = require('../../../lib/services/proxy-manager');\n      transformResponse.mockRejectedValue(new Error('Response transformation failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: JSON.stringify(validRequestBody),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Response transformation failed');\n    });\n\n    it('should handle concurrent proxy request limit', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Concurrent proxy request limit exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy', {\n        method: 'POST',\n        body: JSON.stringify(validRequestBody),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Concurrent proxy request limit exceeded');\n    });\n  });\n\n  describe('PUT /api/proxy/config - Update Proxy Configuration', () => {\n    let validProxyConfig: any;\n\n    beforeEach(() => {\n      validProxyConfig = {\n        rules: [\n          {\n            pattern: '/api/external/*',\n            target: 'https://external-api.example.com',\n            methods: ['GET', 'POST'],\n            headers: {\n              'X-API-Key': 'secret-key'\n            },\n            timeout: 30000,\n            retries: 3\n          }\n        ],\n        security: {\n          rateLimits: {\n            requests: 100,\n            window: 3600\n          },\n          blacklist: ['malicious.com'],\n          whitelist: ['trusted.com']\n        }\n      };\n    });\n\n    it('should handle invalid proxy configuration format', async () => {\n      const { updateProxyRules } = require('../../../lib/services/proxy-manager');\n      updateProxyRules.mockRejectedValue(new Error('Invalid proxy configuration format'));\n\n      const invalidConfig = { rules: 'invalid' };\n      const request = new NextRequest('http://localhost:3000/api/proxy/config', {\n        method: 'PUT',\n        body: JSON.stringify(invalidConfig),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid proxy configuration format');\n    });\n\n    it('should handle conflicting proxy rules', async () => {\n      const { updateProxyRules } = require('../../../lib/services/proxy-manager');\n      updateProxyRules.mockRejectedValue(new Error('Conflicting proxy rules detected'));\n\n      const conflictingConfig = {\n        rules: [\n          { pattern: '/api/*', target: 'https://api1.example.com' },\n          { pattern: '/api/*', target: 'https://api2.example.com' }\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/proxy/config', {\n        method: 'PUT',\n        body: JSON.stringify(conflictingConfig),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Conflicting proxy rules detected');\n    });\n\n    it('should handle invalid target URL in configuration', async () => {\n      const { updateProxyRules } = require('../../../lib/services/proxy-manager');\n      updateProxyRules.mockRejectedValue(new Error('Invalid target URL in proxy rule'));\n\n      const invalidTargetConfig = {\n        rules: [\n          { pattern: '/api/*', target: 'invalid-url' }\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/proxy/config', {\n        method: 'PUT',\n        body: JSON.stringify(invalidTargetConfig),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid target URL in proxy rule');\n    });\n\n    it('should handle proxy configuration save failure', async () => {\n      const { updateProxyRules } = require('../../../lib/services/proxy-manager');\n      updateProxyRules.mockRejectedValue(new Error('Failed to save proxy configuration'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy/config', {\n        method: 'PUT',\n        body: JSON.stringify(validProxyConfig),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to save proxy configuration');\n    });\n\n    it('should handle insufficient permissions for configuration update', async () => {\n      const { checkProxyPermissions } = require('../../../lib/auth/session');\n      checkProxyPermissions.mockRejectedValue(new Error('Admin permissions required for proxy configuration'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy/config', {\n        method: 'PUT',\n        body: JSON.stringify(validProxyConfig),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n  });\n\n  describe('DELETE /api/proxy/cache - Clear Proxy Cache', () => {\n    it('should handle cache invalidation failure', async () => {\n      const { invalidateCache } = require('../../../lib/cache/proxy-cache');\n      invalidateCache.mockRejectedValue(new Error('Cache invalidation failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy/cache', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Cache invalidation failed');\n    });\n\n    it('should handle cache service unavailable', async () => {\n      const { invalidateCache } = require('../../../lib/cache/proxy-cache');\n      invalidateCache.mockRejectedValue(new Error('Cache service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy/cache', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Cache service unavailable');\n    });\n\n    it('should handle partial cache invalidation', async () => {\n      const { invalidateCache } = require('../../../lib/cache/proxy-cache');\n      invalidateCache.mockRejectedValue(new Error('Partial cache invalidation: some entries could not be cleared'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy/cache?pattern=/api/external/*', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.error.message).toContain('Partial cache invalidation');\n    });\n  });\n\n  describe('Proxy Security Enforcement', () => {\n    it('should handle security policy violation', async () => {\n      const { enforceSecurityPolicies } = require('../../../lib/security/proxy-security');\n      enforceSecurityPolicies.mockRejectedValue(new Error('Security policy violation: SSRF attempt detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=http://localhost:22');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Security policy violation');\n    });\n\n    it('should handle suspicious request pattern', async () => {\n      const { enforceSecurityPolicies } = require('../../../lib/security/proxy-security');\n      enforceSecurityPolicies.mockRejectedValue(new Error('Suspicious request pattern detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://api.example.com/../../../etc/passwd');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Suspicious request pattern detected');\n    });\n\n    it('should handle IP address restriction violation', async () => {\n      const { enforceSecurityPolicies } = require('../../../lib/security/proxy-security');\n      enforceSecurityPolicies.mockRejectedValue(new Error('IP address not allowed for proxy requests'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://restricted.example.com', {\n        headers: { 'X-Forwarded-For': '192.168.1.100' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('IP address not allowed');\n    });\n  });\n\n  describe('Proxy Cache Management', () => {\n    it('should handle cache policy validation failure', async () => {\n      const { checkCachePolicy } = require('../../../lib/cache/proxy-cache');\n      checkCachePolicy.mockRejectedValue(new Error('Invalid cache policy for target'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://no-cache.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid cache policy');\n    });\n\n    it('should handle cache storage failure', async () => {\n      const { setCachedResponse } = require('../../../lib/cache/proxy-cache');\n      setCachedResponse.mockRejectedValue(new Error('Cache storage failure'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://cacheable.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Cache storage failure');\n    });\n\n    it('should handle corrupted cache data', async () => {\n      const { getCachedResponse } = require('../../../lib/cache/proxy-cache');\n      getCachedResponse.mockRejectedValue(new Error('Corrupted cache data detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://cached.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Corrupted cache data detected');\n    });\n  });\n\n  describe('Proxy Activity Logging', () => {\n    it('should handle logging service failure', async () => {\n      const { logProxyActivity } = require('../../../lib/services/proxy-manager');\n      logProxyActivity.mockRejectedValue(new Error('Proxy activity logging failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://api.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      // Should not fail the main request, but log the tracking error\n      expect(response.status).not.toBe(500);\n      expect(data).toBeDefined();\n    });\n\n    it('should handle log storage capacity exceeded', async () => {\n      const { logProxyActivity } = require('../../../lib/services/proxy-manager');\n      logProxyActivity.mockRejectedValue(new Error('Log storage capacity exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://api.example.com');\n      await GET(request);\n\n      // Should continue processing despite logging failure\n      expect(logProxyActivity).toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide proxy operation recovery suggestions', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Temporary proxy service outage'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://api.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry proxy request');\n    });\n\n    it('should track proxy operation performance', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://api.example.com');\n      await GET(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include proxy context in error responses', async () => {\n      const { forwardRequest } = require('../../../lib/services/proxy-manager');\n      forwardRequest.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/proxy?target=https://api.example.com');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('forwardRequest');\n      expect(data.error.context.targetUrl).toBe('https://api.example.com');\n    });\n  });\n});"],"names":["jest","mock","forwardRequest","fn","validateProxyTarget","checkProxyPermissions","transformRequest","transformResponse","getProxyConfiguration","updateProxyRules","logProxyActivity","validateTargetUrl","checkRateLimits","sanitizeHeaders","validateRequestBody","checkBlacklist","enforceSecurityPolicies","getCachedResponse","setCachedResponse","invalidateCache","checkCachePolicy","validateSession","describe","errorHandler","beforeEach","errorCount","circuitBreakerOpen","clearAllMocks","it","require","mockRejectedValue","Error","request","NextRequest","response","GET","data","json","expect","status","toBe","success","error","code","message","toContain","headers","validRequestBody","target","method","body","invalidBody","POST","maliciousBody","JSON","stringify","largeBody","repeat","invalidDataBody","invalid","validProxyConfig","rules","pattern","methods","timeout","retries","security","rateLimits","requests","window","blacklist","whitelist","invalidConfig","PUT","conflictingConfig","invalidTargetConfig","DELETE","not","toBeDefined","toHaveBeenCalled","recovery","suggestions","stats","getErrorStats","toBeGreaterThan","context","operation","targetUrl"],"mappings":"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"}