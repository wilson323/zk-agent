{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\images.test.ts"],"sourcesContent":["/**\n * 图片处理API路由错误处理测试\n * 测试图片上传、处理、存储等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '../../../app/api/images/temp/[filename]/route';\n// import { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/image-processor', () => ({\n  processImage: jest.fn(),\n  validateImageFormat: jest.fn(),\n  compressImage: jest.fn(),\n  generateThumbnail: jest.fn(),\n  extractMetadata: jest.fn(),\n  detectImageType: jest.fn(),\n  optimizeImage: jest.fn()\n}));\n\njest.mock('../../../lib/storage/image-store', () => ({\n  uploadImage: jest.fn(),\n  downloadImage: jest.fn(),\n  deleteImage: jest.fn(),\n  getImageMetadata: jest.fn(),\n  checkStorageQuota: jest.fn(),\n  generateImageUrl: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkUploadPermissions: jest.fn()\n}));\n\njest.mock('../../../lib/utils/file-validator', () => ({\n  validateFileSize: jest.fn(),\n  validateFileType: jest.fn(),\n  scanForMalware: jest.fn()\n}));\n\ndescribe('Images API Error Handling', () => {\n  let errorHandler: any;\n\n  beforeEach(() => {\n    // errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler = { errorCount: 0, circuitBreakerOpen: false };\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/images - Upload Image', () => {\n    let validImageData: FormData;\n\n    beforeEach(() => {\n      validImageData = new FormData();\n      const mockFile = new File(['test image data'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n      validImageData.append('category', 'poster');\n      validImageData.append('description', 'Test image');\n    });\n\n    it('should handle file size limit exceeded', async () => {\n      const { validateFileSize } = require('../../../lib/utils/file-validator');\n      validateFileSize.mockRejectedValue(new Error('File size exceeds 10MB limit'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(413); // Payload too large\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('File size exceeds');\n    });\n\n    it('should handle unsupported image format', async () => {\n      const { validateFileType } = require('../../../lib/utils/file-validator');\n      validateFileType.mockRejectedValue(new Error('Unsupported file type: .bmp'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(415); // Unsupported media type\n      expect(data.error.message).toContain('Unsupported file type');\n    });\n\n    it('should handle corrupted image file', async () => {\n      const { validateImageFormat } = require('../../../lib/services/image-processor');\n      validateImageFormat.mockRejectedValue(new Error('Image file is corrupted or invalid'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Image file is corrupted');\n    });\n\n    it('should handle malware detection', async () => {\n      const { scanForMalware } = require('../../../lib/utils/file-validator');\n      scanForMalware.mockRejectedValue(new Error('Malware detected in uploaded file'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Malware detected');\n    });\n\n    it('should handle storage quota exceeded', async () => {\n      const { checkStorageQuota } = require('../../../lib/storage/image-store');\n      checkStorageQuota.mockRejectedValue(new Error('Storage quota exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient storage\n      expect(data.error.message).toContain('Storage quota exceeded');\n    });\n\n    it('should handle upload service unavailable', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Image storage service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Image storage service unavailable');\n    });\n\n    it('should handle missing required fields', async () => {\n      const incompleteData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      incompleteData.append('image', mockFile);\n      // Missing category and description\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: incompleteData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('category');\n    });\n\n    it('should handle insufficient upload permissions', async () => {\n      const { checkUploadPermissions } = require('../../../lib/auth/session');\n      checkUploadPermissions.mockRejectedValue(new Error('Upload permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData,\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle image processing timeout', async () => {\n      const { processImage } = require('../../../lib/services/image-processor');\n      processImage.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Image processing timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Image processing timeout');\n    });\n\n    it('should handle duplicate image upload', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Image with same hash already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Image with same hash already exists');\n    });\n  });\n\n  describe('GET /api/images/[id] - Get Image', () => {\n    it('should handle image not found', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/images/nonexistent-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Image not found');\n    });\n\n    it('should handle corrupted image data', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockRejectedValue(new Error('Image data corrupted'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Image data corrupted');\n    });\n\n    it('should handle storage service unavailable', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockRejectedValue(new Error('Storage service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Storage service unavailable');\n    });\n\n    it('should handle access denied for private images', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockRejectedValue(new Error('Access denied: private image'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/private-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Access denied');\n    });\n\n    it('should handle image download timeout', async () => {\n      const { downloadImage } = require('../../../lib/storage/image-store');\n      downloadImage.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Download timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Download timeout');\n    });\n  });\n\n  describe('PUT /api/images/[id] - Update Image', () => {\n    it('should handle image not found for update', async () => {\n      const { getImageMetadata } = require('../../../lib/storage/image-store');\n      getImageMetadata.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/images/nonexistent-id', {\n        method: 'PUT',\n        body: JSON.stringify({ description: 'Updated description' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n    });\n\n    it('should handle invalid metadata update', async () => {\n      const request = new NextRequest('http://localhost:3000/api/images/test-id', {\n        method: 'PUT',\n        body: JSON.stringify({ invalidField: 'value' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid metadata');\n    });\n\n    it('should handle concurrent update conflict', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Concurrent modification detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id', {\n        method: 'PUT',\n        body: JSON.stringify({ description: 'Updated' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Concurrent modification detected');\n    });\n\n    it('should handle insufficient permissions for update', async () => {\n      const { checkUploadPermissions } = require('../../../lib/auth/session');\n      checkUploadPermissions.mockRejectedValue(new Error('Update permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id', {\n        method: 'PUT',\n        body: JSON.stringify({ description: 'Updated' }),\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n  });\n\n  describe('DELETE /api/images/[id] - Delete Image', () => {\n    it('should handle image not found for deletion', async () => {\n      const { getImageMetadata } = require('../../../lib/storage/image-store');\n      getImageMetadata.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost:3000/api/images/nonexistent-id', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n    });\n\n    it('should handle image in use by other resources', async () => {\n      const { deleteImage } = require('../../../lib/storage/image-store');\n      deleteImage.mockRejectedValue(new Error('Image is referenced by active posters'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Image is referenced by active posters');\n    });\n\n    it('should handle storage deletion failure', async () => {\n      const { deleteImage } = require('../../../lib/storage/image-store');\n      deleteImage.mockRejectedValue(new Error('Failed to delete from storage'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to delete from storage');\n    });\n\n    it('should handle insufficient permissions for deletion', async () => {\n      const { checkUploadPermissions } = require('../../../lib/auth/session');\n      checkUploadPermissions.mockRejectedValue(new Error('Delete permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n  });\n\n  describe('Image Processing Errors', () => {\n    it('should handle thumbnail generation failure', async () => {\n      const { generateThumbnail } = require('../../../lib/services/image-processor');\n      generateThumbnail.mockRejectedValue(new Error('Thumbnail generation failed'));\n\n      const validImageData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n      validImageData.append('generateThumbnail', 'true');\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Thumbnail generation failed');\n    });\n\n    it('should handle image compression failure', async () => {\n      const { compressImage } = require('../../../lib/services/image-processor');\n      compressImage.mockRejectedValue(new Error('Image compression failed'));\n\n      const validImageData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n      validImageData.append('compress', 'true');\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Image compression failed');\n    });\n\n    it('should handle metadata extraction failure', async () => {\n      const { extractMetadata } = require('../../../lib/services/image-processor');\n      extractMetadata.mockRejectedValue(new Error('Failed to extract image metadata'));\n\n      const validImageData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to extract image metadata');\n    });\n\n    it('should handle image optimization failure', async () => {\n      const { optimizeImage } = require('../../../lib/services/image-processor');\n      optimizeImage.mockRejectedValue(new Error('Image optimization failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id/optimize', {\n        method: 'POST'\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Image optimization failed');\n    });\n\n    it('should handle unsupported image dimensions', async () => {\n      const { validateImageFormat } = require('../../../lib/services/image-processor');\n      validateImageFormat.mockRejectedValue(new Error('Image dimensions exceed maximum allowed size'));\n\n      const validImageData = new FormData();\n      const mockFile = new File(['test'], 'large.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Image dimensions exceed maximum');\n    });\n  });\n\n  describe('Image URL Generation Errors', () => {\n    it('should handle URL generation failure', async () => {\n      const { generateImageUrl } = require('../../../lib/storage/image-store');\n      generateImageUrl.mockRejectedValue(new Error('Failed to generate image URL'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id/url');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to generate image URL');\n    });\n\n    it('should handle expired URL access', async () => {\n      const { generateImageUrl } = require('../../../lib/storage/image-store');\n      generateImageUrl.mockRejectedValue(new Error('Image URL has expired'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id/url');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(410); // Gone\n      expect(data.error.message).toContain('Image URL has expired');\n    });\n\n    it('should handle CDN service unavailable', async () => {\n      const { generateImageUrl } = require('../../../lib/storage/image-store');\n      generateImageUrl.mockRejectedValue(new Error('CDN service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/images/test-id/url');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('CDN service unavailable');\n    });\n  });\n\n  describe('Batch Image Operations', () => {\n    it('should handle batch upload with partial failures', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockImplementation((file: any) => {\n        if (file.name === 'fail.jpg') {\n          throw new Error('Upload failed for this file');\n        }\n        return Promise.resolve({ id: 'success-id', url: 'test-url' });\n      });\n\n      const batchData = new FormData();\n      const file1 = new File(['test1'], 'success.jpg', { type: 'image/jpeg' });\n      const file2 = new File(['test2'], 'fail.jpg', { type: 'image/jpeg' });\n      batchData.append('images', file1);\n      batchData.append('images', file2);\n\n      const request = new NextRequest('http://localhost:3000/api/images/batch', {\n        method: 'POST',\n        body: batchData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n\n    it('should handle batch delete with dependency conflicts', async () => {\n      const { deleteImage } = require('../../../lib/storage/image-store');\n      deleteImage.mockImplementation((id: any) => {\n        if (id === 'in-use-id') {\n          throw new Error('Image is in use and cannot be deleted');\n        }\n        return Promise.resolve();\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/images/batch', {\n        method: 'DELETE',\n        body: JSON.stringify({ imageIds: ['deletable-id', 'in-use-id'] }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207);\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide image operation recovery suggestions', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Temporary storage service outage'));\n\n      const validImageData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry upload');\n    });\n\n    it('should track image operation metrics', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Test error'));\n\n      const validImageData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      await POST(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include image context in error responses', async () => {\n      const { uploadImage } = require('../../../lib/storage/image-store');\n      uploadImage.mockRejectedValue(new Error('Test error'));\n\n      const validImageData = new FormData();\n      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });\n      validImageData.append('image', mockFile);\n\n      const request = new NextRequest('http://localhost:3000/api/images', {\n        method: 'POST',\n        body: validImageData\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('uploadImage');\n      expect(data.error.context.fileType).toBe('image/jpeg');\n    });\n  });\n});"],"names":["jest","mock","processImage","fn","validateImageFormat","compressImage","generateThumbnail","extractMetadata","detectImageType","optimizeImage","uploadImage","downloadImage","deleteImage","getImageMetadata","checkStorageQuota","generateImageUrl","validateSession","checkUploadPermissions","validateFileSize","validateFileType","scanForMalware","describe","errorHandler","beforeEach","errorCount","circuitBreakerOpen","clearAllMocks","validImageData","FormData","mockFile","File","type","append","it","require","mockRejectedValue","Error","request","NextRequest","method","body","response","POST","data","json","expect","status","toBe","error","code","message","toContain","incompleteData","details","headers","mockImplementation","Promise","_","reject","setTimeout","mockResolvedValue","GET","JSON","stringify","description","PUT","invalidField","DELETE","file","name","resolve","id","url","batchData","file1","file2","results","toBeDefined","errors","imageIds","recovery","suggestions","stats","getErrorStats","toBeGreaterThan","context","operation","fileType"],"mappings":"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"}