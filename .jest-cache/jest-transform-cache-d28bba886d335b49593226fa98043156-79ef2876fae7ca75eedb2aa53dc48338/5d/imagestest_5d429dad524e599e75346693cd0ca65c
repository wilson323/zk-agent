55e9a590460e2834e1cd9b4806e69812
/**
 * 图片处理API路由错误处理测试
 * 测试图片上传、处理、存储等各种错误场景
 */ "use strict";
// import { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';
// import { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';
// Mock dependencies
jest.mock('../../../lib/services/image-processor', ()=>({
        processImage: jest.fn(),
        validateImageFormat: jest.fn(),
        compressImage: jest.fn(),
        generateThumbnail: jest.fn(),
        extractMetadata: jest.fn(),
        detectImageType: jest.fn(),
        optimizeImage: jest.fn()
    }));
jest.mock('../../../lib/storage/image-store', ()=>({
        uploadImage: jest.fn(),
        downloadImage: jest.fn(),
        deleteImage: jest.fn(),
        getImageMetadata: jest.fn(),
        checkStorageQuota: jest.fn(),
        generateImageUrl: jest.fn()
    }));
jest.mock('../../../lib/auth/session', ()=>({
        validateSession: jest.fn(),
        checkUploadPermissions: jest.fn()
    }));
jest.mock('../../../lib/utils/file-validator', ()=>({
        validateFileSize: jest.fn(),
        validateFileType: jest.fn(),
        scanForMalware: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _server = require("next/server");
const _route = require("../../../app/api/images/temp/[filename]/route");
describe('Images API Error Handling', ()=>{
    let errorHandler;
    beforeEach(()=>{
        // errorHandler = GlobalErrorHandler.getInstance();
        errorHandler = {
            errorCount: 0,
            circuitBreakerOpen: false
        };
        jest.clearAllMocks();
    });
    describe('POST /api/images - Upload Image', ()=>{
        let validImageData;
        beforeEach(()=>{
            validImageData = new FormData();
            const mockFile = new File([
                'test image data'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            validImageData.append('category', 'poster');
            validImageData.append('description', 'Test image');
        });
        it('should handle file size limit exceeded', async ()=>{
            const { validateFileSize } = require('../../../lib/utils/file-validator');
            validateFileSize.mockRejectedValue(new Error('File size exceeds 10MB limit'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(413); // Payload too large
            expect(data.error.code).toBe('VALIDATION_ERROR');
            expect(data.error.message).toContain('File size exceeds');
        });
        it('should handle unsupported image format', async ()=>{
            const { validateFileType } = require('../../../lib/utils/file-validator');
            validateFileType.mockRejectedValue(new Error('Unsupported file type: .bmp'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(415); // Unsupported media type
            expect(data.error.message).toContain('Unsupported file type');
        });
        it('should handle corrupted image file', async ()=>{
            const { validateImageFormat } = require('../../../lib/services/image-processor');
            validateImageFormat.mockRejectedValue(new Error('Image file is corrupted or invalid'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('Image file is corrupted');
        });
        it('should handle malware detection', async ()=>{
            const { scanForMalware } = require('../../../lib/utils/file-validator');
            scanForMalware.mockRejectedValue(new Error('Malware detected in uploaded file'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('Malware detected');
        });
        it('should handle storage quota exceeded', async ()=>{
            const { checkStorageQuota } = require('../../../lib/storage/image-store');
            checkStorageQuota.mockRejectedValue(new Error('Storage quota exceeded'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(507); // Insufficient storage
            expect(data.error.message).toContain('Storage quota exceeded');
        });
        it('should handle upload service unavailable', async ()=>{
            const { uploadImage } = require('../../../lib/storage/image-store');
            uploadImage.mockRejectedValue(new Error('Image storage service unavailable'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(503);
            expect(data.error.message).toContain('Image storage service unavailable');
        });
        it('should handle missing required fields', async ()=>{
            const incompleteData = new FormData();
            const mockFile = new File([
                'test'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            incompleteData.append('image', mockFile);
            // Missing category and description
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: incompleteData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.code).toBe('VALIDATION_ERROR');
            expect(data.error.details).toContain('category');
        });
        it('should handle insufficient upload permissions', async ()=>{
            const { checkUploadPermissions } = require('../../../lib/auth/session');
            checkUploadPermissions.mockRejectedValue(new Error('Upload permissions required'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData,
                headers: {
                    'Authorization': 'Bearer user-token'
                }
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(403);
            expect(data.error.code).toBe('AUTHORIZATION_ERROR');
        });
        it('should handle image processing timeout', async ()=>{
            const { processImage } = require('../../../lib/services/image-processor');
            processImage.mockImplementation(()=>new Promise((_, reject)=>setTimeout(()=>reject(new Error('Image processing timeout')), 100)));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(408);
            expect(data.error.message).toContain('Image processing timeout');
        });
        it('should handle duplicate image upload', async ()=>{
            const { uploadImage } = require('../../../lib/storage/image-store');
            uploadImage.mockRejectedValue(new Error('Image with same hash already exists'));
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Image with same hash already exists');
        });
    });
    describe('GET /api/images/[id] - Get Image', ()=>{
        it('should handle image not found', async ()=>{
            const { downloadImage } = require('../../../lib/storage/image-store');
            downloadImage.mockResolvedValue(null);
            const request = new _server.NextRequest('http://localhost:3000/api/images/nonexistent-id');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(404);
            expect(data.error.code).toBe('NOT_FOUND');
            expect(data.error.message).toContain('Image not found');
        });
        it('should handle corrupted image data', async ()=>{
            const { downloadImage } = require('../../../lib/storage/image-store');
            downloadImage.mockRejectedValue(new Error('Image data corrupted'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Image data corrupted');
        });
        it('should handle storage service unavailable', async ()=>{
            const { downloadImage } = require('../../../lib/storage/image-store');
            downloadImage.mockRejectedValue(new Error('Storage service unavailable'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(503);
            expect(data.error.message).toContain('Storage service unavailable');
        });
        it('should handle access denied for private images', async ()=>{
            const { downloadImage } = require('../../../lib/storage/image-store');
            downloadImage.mockRejectedValue(new Error('Access denied: private image'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/private-id');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(403);
            expect(data.error.message).toContain('Access denied');
        });
        it('should handle image download timeout', async ()=>{
            const { downloadImage } = require('../../../lib/storage/image-store');
            downloadImage.mockImplementation(()=>new Promise((_, reject)=>setTimeout(()=>reject(new Error('Download timeout')), 100)));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(408);
            expect(data.error.message).toContain('Download timeout');
        });
    });
    describe('PUT /api/images/[id] - Update Image', ()=>{
        it('should handle image not found for update', async ()=>{
            const { getImageMetadata } = require('../../../lib/storage/image-store');
            getImageMetadata.mockResolvedValue(null);
            const request = new _server.NextRequest('http://localhost:3000/api/images/nonexistent-id', {
                method: 'PUT',
                body: JSON.stringify({
                    description: 'Updated description'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, _route.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(404);
            expect(data.error.code).toBe('NOT_FOUND');
        });
        it('should handle invalid metadata update', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id', {
                method: 'PUT',
                body: JSON.stringify({
                    invalidField: 'value'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, _route.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.code).toBe('VALIDATION_ERROR');
            expect(data.error.message).toContain('Invalid metadata');
        });
        it('should handle concurrent update conflict', async ()=>{
            const { uploadImage } = require('../../../lib/storage/image-store');
            uploadImage.mockRejectedValue(new Error('Concurrent modification detected'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id', {
                method: 'PUT',
                body: JSON.stringify({
                    description: 'Updated'
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, _route.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Concurrent modification detected');
        });
        it('should handle insufficient permissions for update', async ()=>{
            const { checkUploadPermissions } = require('../../../lib/auth/session');
            checkUploadPermissions.mockRejectedValue(new Error('Update permissions required'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id', {
                method: 'PUT',
                body: JSON.stringify({
                    description: 'Updated'
                }),
                headers: {
                    'Authorization': 'Bearer user-token'
                }
            });
            const response = await (0, _route.PUT)(request);
            const data = await response.json();
            expect(response.status).toBe(403);
            expect(data.error.code).toBe('AUTHORIZATION_ERROR');
        });
    });
    describe('DELETE /api/images/[id] - Delete Image', ()=>{
        it('should handle image not found for deletion', async ()=>{
            const { getImageMetadata } = require('../../../lib/storage/image-store');
            getImageMetadata.mockResolvedValue(null);
            const request = new _server.NextRequest('http://localhost:3000/api/images/nonexistent-id', {
                method: 'DELETE'
            });
            const response = await (0, _route.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(404);
            expect(data.error.code).toBe('NOT_FOUND');
        });
        it('should handle image in use by other resources', async ()=>{
            const { deleteImage } = require('../../../lib/storage/image-store');
            deleteImage.mockRejectedValue(new Error('Image is referenced by active posters'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id', {
                method: 'DELETE'
            });
            const response = await (0, _route.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(409);
            expect(data.error.message).toContain('Image is referenced by active posters');
        });
        it('should handle storage deletion failure', async ()=>{
            const { deleteImage } = require('../../../lib/storage/image-store');
            deleteImage.mockRejectedValue(new Error('Failed to delete from storage'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id', {
                method: 'DELETE'
            });
            const response = await (0, _route.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Failed to delete from storage');
        });
        it('should handle insufficient permissions for deletion', async ()=>{
            const { checkUploadPermissions } = require('../../../lib/auth/session');
            checkUploadPermissions.mockRejectedValue(new Error('Delete permissions required'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id', {
                method: 'DELETE',
                headers: {
                    'Authorization': 'Bearer user-token'
                }
            });
            const response = await (0, _route.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(403);
            expect(data.error.code).toBe('AUTHORIZATION_ERROR');
        });
    });
    describe('Image Processing Errors', ()=>{
        it('should handle thumbnail generation failure', async ()=>{
            const { generateThumbnail } = require('../../../lib/services/image-processor');
            generateThumbnail.mockRejectedValue(new Error('Thumbnail generation failed'));
            const validImageData = new FormData();
            const mockFile = new File([
                'test'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            validImageData.append('generateThumbnail', 'true');
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Thumbnail generation failed');
        });
        it('should handle image compression failure', async ()=>{
            const { compressImage } = require('../../../lib/services/image-processor');
            compressImage.mockRejectedValue(new Error('Image compression failed'));
            const validImageData = new FormData();
            const mockFile = new File([
                'test'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            validImageData.append('compress', 'true');
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Image compression failed');
        });
        it('should handle metadata extraction failure', async ()=>{
            const { extractMetadata } = require('../../../lib/services/image-processor');
            extractMetadata.mockRejectedValue(new Error('Failed to extract image metadata'));
            const validImageData = new FormData();
            const mockFile = new File([
                'test'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Failed to extract image metadata');
        });
        it('should handle image optimization failure', async ()=>{
            const { optimizeImage } = require('../../../lib/services/image-processor');
            optimizeImage.mockRejectedValue(new Error('Image optimization failed'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id/optimize', {
                method: 'POST'
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Image optimization failed');
        });
        it('should handle unsupported image dimensions', async ()=>{
            const { validateImageFormat } = require('../../../lib/services/image-processor');
            validateImageFormat.mockRejectedValue(new Error('Image dimensions exceed maximum allowed size'));
            const validImageData = new FormData();
            const mockFile = new File([
                'test'
            ], 'large.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(400);
            expect(data.error.message).toContain('Image dimensions exceed maximum');
        });
    });
    describe('Image URL Generation Errors', ()=>{
        it('should handle URL generation failure', async ()=>{
            const { generateImageUrl } = require('../../../lib/storage/image-store');
            generateImageUrl.mockRejectedValue(new Error('Failed to generate image URL'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id/url');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(500);
            expect(data.error.message).toContain('Failed to generate image URL');
        });
        it('should handle expired URL access', async ()=>{
            const { generateImageUrl } = require('../../../lib/storage/image-store');
            generateImageUrl.mockRejectedValue(new Error('Image URL has expired'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id/url');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(410); // Gone
            expect(data.error.message).toContain('Image URL has expired');
        });
        it('should handle CDN service unavailable', async ()=>{
            const { generateImageUrl } = require('../../../lib/storage/image-store');
            generateImageUrl.mockRejectedValue(new Error('CDN service unavailable'));
            const request = new _server.NextRequest('http://localhost:3000/api/images/test-id/url');
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            expect(response.status).toBe(503);
            expect(data.error.message).toContain('CDN service unavailable');
        });
    });
    describe('Batch Image Operations', ()=>{
        it('should handle batch upload with partial failures', async ()=>{
            const { uploadImage } = require('../../../lib/storage/image-store');
            uploadImage.mockImplementation((file)=>{
                if (file.name === 'fail.jpg') {
                    throw new Error('Upload failed for this file');
                }
                return Promise.resolve({
                    id: 'success-id',
                    url: 'test-url'
                });
            });
            const batchData = new FormData();
            const file1 = new File([
                'test1'
            ], 'success.jpg', {
                type: 'image/jpeg'
            });
            const file2 = new File([
                'test2'
            ], 'fail.jpg', {
                type: 'image/jpeg'
            });
            batchData.append('images', file1);
            batchData.append('images', file2);
            const request = new _server.NextRequest('http://localhost:3000/api/images/batch', {
                method: 'POST',
                body: batchData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(response.status).toBe(207); // Multi-status
            expect(data.results).toBeDefined();
            expect(data.errors).toBeDefined();
        });
        it('should handle batch delete with dependency conflicts', async ()=>{
            const { deleteImage } = require('../../../lib/storage/image-store');
            deleteImage.mockImplementation((id)=>{
                if (id === 'in-use-id') {
                    throw new Error('Image is in use and cannot be deleted');
                }
                return Promise.resolve();
            });
            const request = new _server.NextRequest('http://localhost:3000/api/images/batch', {
                method: 'DELETE',
                body: JSON.stringify({
                    imageIds: [
                        'deletable-id',
                        'in-use-id'
                    ]
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, _route.DELETE)(request);
            const data = await response.json();
            expect(response.status).toBe(207);
            expect(data.results).toBeDefined();
            expect(data.errors).toBeDefined();
        });
    });
    describe('Error Recovery and Monitoring', ()=>{
        it('should provide image operation recovery suggestions', async ()=>{
            const { uploadImage } = require('../../../lib/storage/image-store');
            uploadImage.mockRejectedValue(new Error('Temporary storage service outage'));
            const validImageData = new FormData();
            const mockFile = new File([
                'test'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(data.error.recovery).toBeDefined();
            expect(data.error.recovery.suggestions).toContain('Retry upload');
        });
        it('should track image operation metrics', async ()=>{
            const { uploadImage } = require('../../../lib/storage/image-store');
            uploadImage.mockRejectedValue(new Error('Test error'));
            const validImageData = new FormData();
            const mockFile = new File([
                'test'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            await (0, _route.POST)(request);
            const stats = errorHandler.getErrorStats();
            expect(stats.errorCount).toBeGreaterThan(0);
        });
        it('should include image context in error responses', async ()=>{
            const { uploadImage } = require('../../../lib/storage/image-store');
            uploadImage.mockRejectedValue(new Error('Test error'));
            const validImageData = new FormData();
            const mockFile = new File([
                'test'
            ], 'test.jpg', {
                type: 'image/jpeg'
            });
            validImageData.append('image', mockFile);
            const request = new _server.NextRequest('http://localhost:3000/api/images', {
                method: 'POST',
                body: validImageData
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            expect(data.error.context).toBeDefined();
            expect(data.error.context.operation).toBe('uploadImage');
            expect(data.error.context.fileType).toBe('image/jpeg');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,