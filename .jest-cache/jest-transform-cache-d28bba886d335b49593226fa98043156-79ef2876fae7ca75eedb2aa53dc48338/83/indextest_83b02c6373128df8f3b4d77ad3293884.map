{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\database\\index.test.ts"],"sourcesContent":["/**\n * 数据库服务测试\n * 测试database/index.ts中的DatabaseService类\n */\n\nimport { DatabaseService, prisma, cleanup } from '@/lib/database/index'\nimport { PrismaClient } from '@prisma/client'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\n\nconst mockPrismaInstance = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $queryRaw: jest.fn(),\n  $transaction: jest.fn(),\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrismaInstance as any)\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(),\n  error: jest.spyOn(console, 'error').mockImplementation(),\n}\n\ndescribe('DatabaseService', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    consoleSpy.log.mockClear()\n    consoleSpy.error.mockClear()\n  })\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore()\n    consoleSpy.error.mockRestore()\n  })\n\n  describe('getInstance', () => {\n    it('应该返回Prisma客户端实例', () => {\n      const instance = DatabaseService.getInstance()\n      expect(instance).toBeDefined()\n      expect(PrismaClient).toHaveBeenCalled()\n    })\n\n    it('应该返回相同的实例（单例模式）', () => {\n      const instance1 = DatabaseService.getInstance()\n      const instance2 = DatabaseService.getInstance()\n      expect(instance1).toBe(instance2)\n    })\n  })\n\n  describe('connect', () => {\n    it('应该成功连接数据库', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n\n      await DatabaseService.connect()\n\n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n      expect(consoleSpy.log).toHaveBeenCalledWith('✅ Database connected successfully')\n    })\n\n    it('应该处理连接失败的情况', async () => {\n      const error = new Error('Connection failed')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n\n      await expect(DatabaseService.connect()).rejects.toThrow('Connection failed')\n      expect(consoleSpy.error).toHaveBeenCalledWith('❌ Database connection failed:', error)\n    })\n  })\n\n  describe('disconnect', () => {\n    it('应该成功断开数据库连接', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n\n      await DatabaseService.disconnect()\n\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(consoleSpy.log).toHaveBeenCalledWith('✅ Database disconnected successfully')\n    })\n\n    it('应该处理断开连接失败的情况', async () => {\n      const error = new Error('Disconnection failed')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n\n      await expect(DatabaseService.disconnect()).rejects.toThrow('Disconnection failed')\n      expect(consoleSpy.error).toHaveBeenCalledWith('❌ Database disconnection failed:', error)\n    })\n  })\n\n  describe('healthCheck', () => {\n    it('应该在数据库健康时返回true', async () => {\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ '1': 1 }])\n\n      const result = await DatabaseService.healthCheck()\n\n      expect(result).toBe(true)\n      expect(mockPrismaInstance.$queryRaw).toHaveBeenCalled()\n    })\n\n    it('应该在数据库不健康时返回false', async () => {\n      const error = new Error('Health check failed')\n      mockPrismaInstance.$queryRaw.mockRejectedValue(error)\n\n      const result = await DatabaseService.healthCheck()\n\n      expect(result).toBe(false)\n      expect(consoleSpy.error).toHaveBeenCalledWith('❌ Database health check failed:', error)\n    })\n  })\n\n  describe('runTransaction', () => {\n    it('应该成功执行事务', async () => {\n      const mockCallback = jest.fn().mockResolvedValue('transaction result')\n      mockPrismaInstance.$transaction.mockImplementation((callback) => callback(mockPrismaInstance))\n\n      const result = await DatabaseService.runTransaction(mockCallback)\n\n      expect(result).toBe('transaction result')\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n      expect(mockCallback).toHaveBeenCalledWith(mockPrismaInstance)\n    })\n\n    it('应该处理事务执行失败的情况', async () => {\n      const error = new Error('Transaction failed')\n      const mockCallback = jest.fn().mockRejectedValue(error)\n      mockPrismaInstance.$transaction.mockImplementation((callback) => callback(mockPrismaInstance))\n\n      await expect(DatabaseService.runTransaction(mockCallback)).rejects.toThrow('Transaction failed')\n    })\n  })\n\n  describe('cleanup', () => {\n    it('应该调用disconnect方法', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n\n      await cleanup()\n\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n    })\n  })\n\n  describe('prisma export', () => {\n    it('应该导出prisma实例', () => {\n      expect(prisma).toBeDefined()\n      expect(prisma).toBe(DatabaseService.getInstance())\n    })\n  })\n})\n\n// 测试进程事件监听器\ndescribe('Process Event Listeners', () => {\n  let originalProcess: NodeJS.Process\n\n  beforeAll(() => {\n    originalProcess = global.process\n  })\n\n  afterAll(() => {\n    global.process = originalProcess\n  })\n\n  it('应该注册进程退出事件监听器', () => {\n    const mockProcess = {\n      on: jest.fn(),\n    } as any\n\n    global.process = mockProcess\n\n    // 重新导入模块以触发事件监听器注册\n    jest.resetModules()\n    require('@/lib/database/index')\n\n    expect(mockProcess.on).toHaveBeenCalledWith('beforeExit', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGINT', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGTERM', expect.any(Function))\n  })\n})"],"names":["jest","mock","mockPrismaInstance","$connect","fn","$disconnect","$queryRaw","$transaction","PrismaClient","mockImplementation","consoleSpy","log","spyOn","console","error","describe","beforeEach","clearAllMocks","mockClear","afterAll","mockRestore","it","instance","DatabaseService","getInstance","expect","toBeDefined","toHaveBeenCalled","instance1","instance2","toBe","mockResolvedValue","undefined","connect","toHaveBeenCalledWith","Error","mockRejectedValue","rejects","toThrow","disconnect","result","healthCheck","mockCallback","callback","runTransaction","cleanup","prisma","originalProcess","beforeAll","global","process","mockProcess","on","resetModules","require","any","Function"],"mappings":"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"}