074ea89f358fe09249c2185797caea98
/**
 * Jest 配置验证器测试
 * 测试增强的错误处理和验证机制
 */ "use strict";
const { validateJestConfig, validateTestEnvironment, safeRequire, createSafePolyfills, applySafePolyfills } = require('./jest-config-validator');
describe('Jest 配置验证器', ()=>{
    let originalEnv;
    let originalConsole;
    beforeEach(()=>{
        // 保存原始环境
        originalEnv = {
            ...process.env
        };
        originalConsole = {
            log: console.log,
            warn: console.warn,
            error: console.error
        };
        // Mock console 方法
        console.log = jest.fn();
        console.warn = jest.fn();
        console.error = jest.fn();
    });
    afterEach(()=>{
        // 恢复原始环境
        process.env = originalEnv;
        console.log = originalConsole.log;
        console.warn = originalConsole.warn;
        console.error = originalConsole.error;
    });
    describe('validateJestConfig', ()=>{
        it('应该成功验证有效的 Jest 配置', ()=>{
            expect(()=>validateJestConfig()).not.toThrow();
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Jest 配置验证通过'));
        });
        it('应该检测到缺失的 Jest 配置', ()=>{
            // Mock jest 对象不存在的情况
            const originalJest = global.jest;
            delete global.jest;
            expect(()=>validateJestConfig()).not.toThrow();
            expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('Jest 全局对象未找到'));
            // 恢复 jest 对象
            global.jest = originalJest;
        });
    });
    describe('validateTestEnvironment', ()=>{
        it('应该验证测试环境配置', ()=>{
            process.env.NODE_ENV = 'test';
            expect(()=>validateTestEnvironment()).not.toThrow();
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('测试环境验证通过'));
        });
        it('应该警告非测试环境', ()=>{
            process.env.NODE_ENV = 'development';
            expect(()=>validateTestEnvironment()).not.toThrow();
            expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('当前不在测试环境'));
        });
    });
    describe('safeRequire', ()=>{
        it('应该成功加载存在的模块', ()=>{
            const result = safeRequire('path');
            expect(result).toBeDefined();
            expect(typeof result.join).toBe('function');
        });
        it('应该处理不存在的模块', ()=>{
            const result = safeRequire('non-existent-module');
            expect(result).toBeNull();
            expect(console.warn).toHaveBeenCalledWith(expect.stringContaining('模块加载失败'));
        });
        it('应该使用自定义回退值', ()=>{
            const fallback = {
                custom: 'fallback'
            };
            const result = safeRequire('non-existent-module', fallback);
            expect(result).toBe(fallback);
        });
    });
    describe('createSafePolyfills', ()=>{
        it('应该创建安全的 polyfills', ()=>{
            const polyfills = createSafePolyfills();
            expect(polyfills).toHaveProperty('TextEncoder');
            expect(polyfills).toHaveProperty('TextDecoder');
            expect(typeof polyfills.TextEncoder).toBe('function');
            expect(typeof polyfills.TextDecoder).toBe('function');
        });
        it('应该创建可工作的 TextEncoder polyfill', ()=>{
            const polyfills = createSafePolyfills();
            const encoder = new polyfills.TextEncoder();
            const result = encoder.encode('Hello, 世界!');
            expect(result).toBeInstanceOf(Uint8Array);
        });
        it('应该创建可工作的 TextDecoder polyfill', ()=>{
            const polyfills = createSafePolyfills();
            const decoder = new polyfills.TextDecoder();
            const encoder = new polyfills.TextEncoder();
            const encoded = encoder.encode('Hello, 世界!');
            const decoded = decoder.decode(encoded);
            expect(decoded).toBe('Hello, 世界!');
        });
    });
    describe('applySafePolyfills', ()=>{
        it('应该安全地应用 polyfills', ()=>{
            const polyfills = createSafePolyfills();
            // 验证 polyfills 对象包含必要的属性
            expect(polyfills).toHaveProperty('TextEncoder');
            expect(polyfills).toHaveProperty('TextDecoder');
            expect(typeof polyfills.TextEncoder).toBe('function');
            expect(typeof polyfills.TextDecoder).toBe('function');
            // 验证可以实例化
            expect(()=>new polyfills.TextEncoder()).not.toThrow();
            expect(()=>new polyfills.TextDecoder()).not.toThrow();
            // 应用 polyfills（即使已存在也应该正常工作）
            expect(()=>applySafePolyfills(polyfills)).not.toThrow();
        });
        it('应该不覆盖现有的 polyfills', ()=>{
            const originalTextEncoder = global.TextEncoder;
            const polyfills = createSafePolyfills();
            applySafePolyfills(polyfills);
            expect(global.TextEncoder).toBe(originalTextEncoder);
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('already exists, skipping polyfill'));
        });
        it('应该处理应用 polyfills 时的错误', ()=>{
            const invalidPolyfills = {
                get TextEncoder () {
                    throw new Error('Test error');
                }
            };
            expect(()=>applySafePolyfills(invalidPolyfills)).not.toThrow();
            expect(console.error).toHaveBeenCalledWith(expect.stringContaining('应用 polyfills 时发生错误'));
        });
    });
    describe('集成测试', ()=>{
        it('应该完整地验证和设置测试环境', ()=>{
            process.env.NODE_ENV = 'test';
            // 运行完整的验证流程
            expect(()=>{
                validateJestConfig();
                validateTestEnvironment();
                const polyfills = createSafePolyfills();
                applySafePolyfills(polyfills);
            }).not.toThrow();
            // 验证所有组件都正常工作
            expect(global.TextEncoder).toBeDefined();
            expect(global.TextDecoder).toBeDefined();
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Jest 配置验证通过'));
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('测试环境验证通过'));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,