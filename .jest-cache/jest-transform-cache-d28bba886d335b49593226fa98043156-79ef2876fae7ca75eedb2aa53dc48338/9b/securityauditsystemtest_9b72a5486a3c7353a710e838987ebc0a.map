{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\security\\security-audit-system.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/security/security-audit-system.test.ts\r\n * @description 安全审计系统测试 - 无模拟数据的真实测试\r\n * @author B团队安全测试工程师\r\n * @lastUpdate 2024-12-19\r\n */\r\n\r\nimport {\r\n  SecurityAuditSystem,\r\n  SecurityEventType,\r\n  SecuritySeverity,\r\n  securityAuditSystem,\r\n  recordSecurityEvent,\r\n  scanFile,\r\n  detectThreats,\r\n  analyzeUserBehavior,\r\n  generateSecurityReport\r\n} from '@/lib/security/security-audit-system';\r\n\r\ndescribe('SecurityAuditSystem', () => {\r\n  let auditSystem: SecurityAuditSystem;\r\n\r\n  beforeAll(() => {\r\n    auditSystem = SecurityAuditSystem.getInstance();\r\n  });\r\n\r\n  describe('单例模式', () => {\r\n    it('应该返回同一个实例', () => {\r\n      const instance1 = SecurityAuditSystem.getInstance();\r\n      const instance2 = SecurityAuditSystem.getInstance();\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n\r\n    it('应该与导出的单例实例相同', () => {\r\n      const instance = SecurityAuditSystem.getInstance();\r\n      expect(instance).toBe(securityAuditSystem);\r\n    });\r\n  });\r\n\r\n  describe('安全事件记录', () => {\r\n    it('应该成功记录安全事件', async () => {\r\n      const eventId = await auditSystem.recordEvent({\r\n        type: SecurityEventType.LOGIN_SUCCESS,\r\n        severity: SecuritySeverity.LOW,\r\n        ip: '192.168.1.100',\r\n        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\r\n        details: {\r\n          username: 'testuser',\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n        riskScore: 1,\r\n        userId: 'user123',\r\n      });\r\n\r\n      expect(eventId).toBeDefined();\r\n      expect(typeof eventId).toBe('string');\r\n      expect(eventId).toMatch(/^sec_\\d+_[a-z0-9]+$/);\r\n    });\r\n\r\n    it('应该为高风险事件分配更高的风险评分', async () => {\r\n      const eventId = await auditSystem.recordEvent({\r\n        type: SecurityEventType.MALWARE_DETECTED,\r\n        severity: SecuritySeverity.CRITICAL,\r\n        ip: '10.0.0.1',\r\n        details: {\r\n          fileName: 'suspicious.exe',\r\n          malwareType: 'trojan',\r\n        },\r\n        riskScore: 9,\r\n      });\r\n\r\n      expect(eventId).toBeDefined();\r\n    });\r\n\r\n    it('应该处理本地IP地址', async () => {\r\n      const eventId = await auditSystem.recordEvent({\r\n        type: SecurityEventType.LOGIN_SUCCESS,\r\n        severity: SecuritySeverity.LOW,\r\n        ip: '127.0.0.1',\r\n        details: {\r\n          source: 'localhost',\r\n        },\r\n        riskScore: 1,\r\n      });\r\n\r\n      expect(eventId).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('文件安全扫描', () => {\r\n    it('应该扫描安全的文本文件', async () => {\r\n      const testContent = Buffer.from('This is a safe text file content.');\r\n      const result = await auditSystem.scanFile('/test/safe.txt', testContent, {\r\n        originalName: 'safe.txt',\r\n        mimeType: 'text/plain',\r\n        size: testContent.length,\r\n      });\r\n\r\n      expect(result).toMatchObject({\r\n        safe: true,\r\n        threats: [],\r\n        fileType: 'text/plain',\r\n        size: testContent.length,\r\n      });\r\n      expect(result.hash).toBeDefined();\r\n      expect(result.scanTime).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该检测不安全的文件类型', async () => {\r\n      const testContent = Buffer.from('fake executable content');\r\n      const result = await auditSystem.scanFile('/test/malware.exe', testContent, {\r\n        originalName: 'malware.exe',\r\n        mimeType: 'application/x-executable',\r\n        size: testContent.length,\r\n      });\r\n\r\n      expect(result.safe).toBe(false);\r\n      expect(result.threats.length).toBeGreaterThan(0);\r\n      expect(result.threats[0]).toContain('不允许的文件类型');\r\n    });\r\n\r\n    it('应该检测过大的文件', async () => {\r\n      const largeContent = Buffer.alloc(100 * 1024 * 1024); // 100MB\r\n      const result = await auditSystem.scanFile('/test/large.txt', largeContent, {\r\n        originalName: 'large.txt',\r\n        mimeType: 'text/plain',\r\n        size: largeContent.length,\r\n      });\r\n\r\n      expect(result.safe).toBe(false);\r\n      expect(result.threats.some(threat => threat.includes('文件大小超限'))).toBe(true);\r\n    });\r\n\r\n    it('应该检测危险的文件名', async () => {\r\n      const testContent = Buffer.from('test content');\r\n      const result = await auditSystem.scanFile('/test/../../../etc/passwd', testContent, {\r\n        originalName: '../../../etc/passwd',\r\n        mimeType: 'text/plain',\r\n        size: testContent.length,\r\n      });\r\n\r\n      expect(result.safe).toBe(false);\r\n      expect(result.threats.some(threat => threat.includes('文件名包含危险字符'))).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('威胁检测', () => {\r\n    it('应该检测正常请求', async () => {\r\n      const request = {\r\n        ip: '192.168.1.100',\r\n        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\r\n        path: '/api/users',\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer valid-token',\r\n        },\r\n      };\r\n\r\n      const result = await auditSystem.detectThreats(request);\r\n\r\n      expect(result.blocked).toBe(false);\r\n      expect(result.riskScore).toBeLessThan(5);\r\n    });\r\n\r\n    it('应该检测SQL注入尝试', async () => {\r\n      const request = {\r\n        ip: '10.0.0.1',\r\n        path: '/api/users',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: {\r\n          username: \"admin'; DROP TABLE users; --\",\r\n          password: 'password',\r\n        },\r\n      };\r\n\r\n      const result = await auditSystem.detectThreats(request);\r\n\r\n      expect(result.riskScore).toBeGreaterThan(0);\r\n      expect(result.threats.some(threat => threat.includes('SQL注入'))).toBe(true);\r\n    });\r\n\r\n    it('应该检测XSS尝试', async () => {\r\n      const request = {\r\n        ip: '10.0.0.1',\r\n        path: '/api/comments',\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: {\r\n          comment: '<script>alert(\"XSS\")</script>',\r\n        },\r\n      };\r\n\r\n      const result = await auditSystem.detectThreats(request);\r\n\r\n      expect(result.riskScore).toBeGreaterThan(0);\r\n      expect(result.threats.some(threat => threat.includes('XSS'))).toBe(true);\r\n    });\r\n\r\n    it('应该检测可疑的User-Agent', async () => {\r\n      const request = {\r\n        ip: '10.0.0.1',\r\n        userAgent: 'sqlmap/1.0',\r\n        path: '/api/users',\r\n        method: 'GET',\r\n        headers: {},\r\n      };\r\n\r\n      const result = await auditSystem.detectThreats(request);\r\n\r\n      expect(result.riskScore).toBeGreaterThan(0);\r\n      expect(result.threats.some(threat => threat.includes('User-Agent'))).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('用户行为分析', () => {\r\n    it('应该分析用户行为模式', async () => {\r\n      const userId = 'test-user-123';\r\n\r\n      // 记录一些用户事件\r\n      await auditSystem.recordEvent({\r\n        type: SecurityEventType.LOGIN_SUCCESS,\r\n        severity: SecuritySeverity.LOW,\r\n        ip: '192.168.1.100',\r\n        userId,\r\n        details: { timestamp: new Date().toISOString() },\r\n        riskScore: 1,\r\n      });\r\n\r\n      await auditSystem.recordEvent({\r\n        type: SecurityEventType.API_ACCESS,\r\n        severity: SecuritySeverity.LOW,\r\n        ip: '192.168.1.100',\r\n        userId,\r\n        details: { endpoint: '/api/profile' },\r\n        riskScore: 1,\r\n      });\r\n\r\n      const analysis = await auditSystem.analyzeUserBehavior(userId);\r\n\r\n      expect(analysis).toMatchObject({\r\n        userId,\r\n        riskScore: expect.any(Number),\r\n        anomalies: expect.any(Array),\r\n        patterns: {\r\n          loginTimes: expect.any(Array),\r\n          locations: expect.any(Array),\r\n          devices: expect.any(Array),\r\n          activities: expect.any(Array),\r\n        },\r\n        recommendations: expect.any(Array),\r\n      });\r\n    });\r\n\r\n    it('应该检测异常行为', async () => {\r\n      const userId = 'suspicious-user-456';\r\n\r\n      // 记录多次失败登录\r\n      for (let i = 0; i < 6; i++) {\r\n        await auditSystem.recordEvent({\r\n          type: SecurityEventType.LOGIN_FAILURE,\r\n          severity: SecuritySeverity.MEDIUM,\r\n          ip: '10.0.0.1',\r\n          userId,\r\n          details: { attempt: i + 1 },\r\n          riskScore: 3,\r\n        });\r\n      }\r\n\r\n      const analysis = await auditSystem.analyzeUserBehavior(userId);\r\n\r\n             expect(analysis.riskScore).toBeGreaterThanOrEqual(3);\r\n      expect(analysis.anomalies.some(anomaly => anomaly.includes('频繁登录失败'))).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('安全报告生成', () => {\r\n    it('应该生成安全报告', async () => {\r\n      const timeRange = {\r\n        start: new Date(Date.now() - 24 * 60 * 60 * 1000), // 24小时前\r\n        end: new Date(),\r\n      };\r\n\r\n      // 记录一些测试事件\r\n      await auditSystem.recordEvent({\r\n        type: SecurityEventType.LOGIN_SUCCESS,\r\n        severity: SecuritySeverity.LOW,\r\n        ip: '192.168.1.100',\r\n        details: { test: true },\r\n        riskScore: 1,\r\n      });\r\n\r\n      await auditSystem.recordEvent({\r\n        type: SecurityEventType.SUSPICIOUS_ACTIVITY,\r\n        severity: SecuritySeverity.HIGH,\r\n        ip: '10.0.0.1',\r\n        details: { test: true },\r\n        riskScore: 7,\r\n      });\r\n\r\n      const report = await auditSystem.generateSecurityReport(timeRange);\r\n\r\n      expect(report).toMatchObject({\r\n        summary: {\r\n          totalEvents: expect.any(Number),\r\n          highRiskEvents: expect.any(Number),\r\n          blockedAttacks: expect.any(Number),\r\n          resolvedIncidents: expect.any(Number),\r\n        },\r\n        topThreats: expect.any(Array),\r\n        riskTrends: expect.any(Array),\r\n        recommendations: expect.any(Array),\r\n      });\r\n\r\n      expect(report.summary.totalEvents).toBeGreaterThanOrEqual(2);\r\n      expect(report.summary.highRiskEvents).toBeGreaterThanOrEqual(1);\r\n    });\r\n  });\r\n\r\n  describe('便捷方法', () => {\r\n    it('recordSecurityEvent 方法应该正常工作', async () => {\r\n      const eventId = await recordSecurityEvent({\r\n        type: SecurityEventType.API_ACCESS,\r\n        severity: SecuritySeverity.LOW,\r\n        ip: '192.168.1.100',\r\n        details: { endpoint: '/api/test' },\r\n        riskScore: 1,\r\n      });\r\n\r\n      expect(eventId).toBeDefined();\r\n      expect(typeof eventId).toBe('string');\r\n    });\r\n\r\n    it('scanFile 方法应该正常工作', async () => {\r\n      const testContent = Buffer.from('test file content');\r\n      const result = await scanFile('/test/file.txt', testContent, {\r\n        originalName: 'file.txt',\r\n        mimeType: 'text/plain',\r\n        size: testContent.length,\r\n      });\r\n\r\n      expect(result.safe).toBe(true);\r\n      expect(result.hash).toBeDefined();\r\n    });\r\n\r\n    it('detectThreats 方法应该正常工作', async () => {\r\n      const request = {\r\n        ip: '192.168.1.100',\r\n        path: '/api/test',\r\n        method: 'GET',\r\n        headers: {},\r\n      };\r\n\r\n      const result = await detectThreats(request);\r\n\r\n      expect(result).toMatchObject({\r\n        blocked: expect.any(Boolean),\r\n        threats: expect.any(Array),\r\n        riskScore: expect.any(Number),\r\n      });\r\n    });\r\n\r\n    it('analyzeUserBehavior 方法应该正常工作', async () => {\r\n      const userId = 'test-user-789';\r\n\r\n      // 先记录一个事件\r\n      await recordSecurityEvent({\r\n        type: SecurityEventType.LOGIN_SUCCESS,\r\n        severity: SecuritySeverity.LOW,\r\n        ip: '192.168.1.100',\r\n        userId,\r\n        details: {},\r\n        riskScore: 1,\r\n      });\r\n\r\n      const analysis = await analyzeUserBehavior(userId);\r\n\r\n      expect(analysis.userId).toBe(userId);\r\n      expect(analysis.riskScore).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('generateSecurityReport 方法应该正常工作', async () => {\r\n      const timeRange = {\r\n        start: new Date(Date.now() - 60 * 60 * 1000), // 1小时前\r\n        end: new Date(),\r\n      };\r\n\r\n      const report = await generateSecurityReport(timeRange);\r\n\r\n      expect(report.summary).toBeDefined();\r\n      expect(report.topThreats).toBeInstanceOf(Array);\r\n      expect(report.riskTrends).toBeInstanceOf(Array);\r\n      expect(report.recommendations).toBeInstanceOf(Array);\r\n    });\r\n  });\r\n\r\n  describe('性能测试', () => {\r\n    it('应该在合理时间内处理安全事件', async () => {\r\n      const startTime = Date.now();\r\n\r\n      // 记录多个事件\r\n      const promises = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(auditSystem.recordEvent({\r\n          type: SecurityEventType.API_ACCESS,\r\n          severity: SecuritySeverity.LOW,\r\n          ip: `192.168.1.${100 + i}`,\r\n          details: { index: i },\r\n          riskScore: 1,\r\n        }));\r\n      }\r\n\r\n      await Promise.all(promises);\r\n\r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 应该在5秒内完成\r\n      expect(duration).toBeLessThan(5000);\r\n    });\r\n\r\n    it('应该高效处理文件扫描', async () => {\r\n      const startTime = Date.now();\r\n\r\n      const files = Array.from({ length: 5 }, (_, i) => ({\r\n        content: Buffer.from(`Test file content ${i}`),\r\n        name: `test-${i}.txt`,\r\n      }));\r\n\r\n      const promises = files.map(file =>\r\n        auditSystem.scanFile(`/test/${file.name}`, file.content, {\r\n          originalName: file.name,\r\n          mimeType: 'text/plain',\r\n          size: file.content.length,\r\n        })\r\n      );\r\n\r\n      const results = await Promise.all(promises);\r\n\r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      expect(results.length).toBe(5);\r\n      expect(results.every(result => result.safe)).toBe(true);\r\n      expect(duration).toBeLessThan(10000); // 10秒内完成\r\n    });\r\n  });\r\n}); "],"names":["describe","auditSystem","beforeAll","SecurityAuditSystem","getInstance","it","instance1","instance2","expect","toBe","instance","securityAuditSystem","eventId","recordEvent","type","SecurityEventType","LOGIN_SUCCESS","severity","SecuritySeverity","LOW","ip","userAgent","details","username","timestamp","Date","toISOString","riskScore","userId","toBeDefined","toMatch","MALWARE_DETECTED","CRITICAL","fileName","malwareType","source","testContent","Buffer","from","result","scanFile","originalName","mimeType","size","length","toMatchObject","safe","threats","fileType","hash","scanTime","toBeGreaterThan","toContain","largeContent","alloc","some","threat","includes","request","path","method","headers","detectThreats","blocked","toBeLessThan","body","password","comment","API_ACCESS","endpoint","analysis","analyzeUserBehavior","any","Number","anomalies","Array","patterns","loginTimes","locations","devices","activities","recommendations","i","LOGIN_FAILURE","MEDIUM","attempt","toBeGreaterThanOrEqual","anomaly","timeRange","start","now","end","test","SUSPICIOUS_ACTIVITY","HIGH","report","generateSecurityReport","summary","totalEvents","highRiskEvents","blockedAttacks","resolvedIncidents","topThreats","riskTrends","recordSecurityEvent","Boolean","toBeInstanceOf","startTime","promises","push","index","Promise","all","endTime","duration","files","_","content","name","map","file","results","every"],"mappings":"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"}