{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\shared.test.ts"],"sourcesContent":["/**\n * 共享功能API路由错误处理测试\n * 测试内容共享、权限管理、链接生成等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '@/app/api/shared/route';\n// import { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/sharing-manager', () => ({\n  createShareLink: jest.fn(),\n  validateShareAccess: jest.fn(),\n  updateShareSettings: jest.fn(),\n  revokeShareLink: jest.fn(),\n  getSharedContent: jest.fn(),\n  trackShareActivity: jest.fn(),\n  generateShareToken: jest.fn(),\n  validateShareToken: jest.fn()\n}));\n\njest.mock('../../../lib/storage/content-store', () => ({\n  getContent: jest.fn(),\n  storeSharedContent: jest.fn(),\n  updateContentMetadata: jest.fn(),\n  deleteSharedContent: jest.fn(),\n  checkContentExists: jest.fn(),\n  validateContentAccess: jest.fn()\n}));\n\njest.mock('../../../lib/security/share-security', () => ({\n  validateSharePermissions: jest.fn(),\n  checkShareLimits: jest.fn(),\n  sanitizeShareData: jest.fn(),\n  enforceSharePolicies: jest.fn(),\n  validateExpirationDate: jest.fn(),\n  checkPasswordStrength: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkUserPermissions: jest.fn(),\n  getUserId: jest.fn()\n}));\n\ndescribe('Shared API Error Handling', () => {\n  let errorHandler: any;\n\n  beforeEach(() => {\n    // errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler = { errorCount: 0, circuitBreakerOpen: false };\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/shared - Get Shared Content', () => {\n    it('should handle invalid share token', async () => {\n      const { validateShareToken } = require('../../../lib/services/sharing-manager');\n      validateShareToken.mockRejectedValue(new Error('Invalid share token'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=invalid-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n      expect(data.error.message).toContain('Invalid share token');\n    });\n\n    it('should handle missing share token', async () => {\n      const request = new NextRequest('http://localhost:3000/api/shared');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Share token is required');\n    });\n\n    it('should handle expired share link', async () => {\n      const { validateShareAccess } = require('../../../lib/services/sharing-manager');\n      validateShareAccess.mockRejectedValue(new Error('Share link has expired'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=expired-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(410); // Gone\n      expect(data.error.message).toContain('Share link has expired');\n    });\n\n    it('should handle revoked share link', async () => {\n      const { validateShareAccess } = require('../../../lib/services/sharing-manager');\n      validateShareAccess.mockRejectedValue(new Error('Share link has been revoked'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=revoked-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Share link has been revoked');\n    });\n\n    it('should handle shared content not found', async () => {\n      const { getSharedContent } = require('../../../lib/services/sharing-manager');\n      getSharedContent.mockRejectedValue(new Error('Shared content not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=valid-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Shared content not found');\n    });\n\n    it('should handle password-protected share without password', async () => {\n      const { validateShareAccess } = require('../../../lib/services/sharing-manager');\n      validateShareAccess.mockRejectedValue(new Error('Password required for protected share'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=protected-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Password required for protected share');\n    });\n\n    it('should handle incorrect share password', async () => {\n      const { validateShareAccess } = require('../../../lib/services/sharing-manager');\n      validateShareAccess.mockRejectedValue(new Error('Incorrect share password'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=protected-token&password=wrong');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.message).toContain('Incorrect share password');\n    });\n\n    it('should handle share access limit exceeded', async () => {\n      const { validateShareAccess } = require('../../../lib/services/sharing-manager');\n      validateShareAccess.mockRejectedValue(new Error('Share access limit exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=limited-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.code).toBe('RATE_LIMIT_ERROR');\n      expect(data.error.message).toContain('Share access limit exceeded');\n    });\n\n    it('should handle corrupted shared content', async () => {\n      const { getSharedContent } = require('../../../lib/services/sharing-manager');\n      getSharedContent.mockRejectedValue(new Error('Shared content is corrupted'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=corrupted-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Shared content is corrupted');\n    });\n\n    it('should handle content storage service unavailable', async () => {\n      const { getContent } = require('../../../lib/storage/content-store');\n      getContent.mockRejectedValue(new Error('Content storage service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=valid-token');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Content storage service unavailable');\n    });\n  });\n\n  describe('POST /api/shared - Create Share Link', () => {\n    let validShareData: any;\n\n    beforeEach(() => {\n      validShareData = {\n        contentId: 'content-123',\n        contentType: 'document',\n        permissions: {\n          read: true,\n          download: false,\n          comment: false\n        },\n        settings: {\n          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days\n          maxAccess: 100,\n          requirePassword: false,\n          allowAnonymous: true\n        }\n      };\n    });\n\n    it('should handle missing content ID', async () => {\n      const invalidData = { ...validShareData };\n      delete invalidData.contentId;\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(invalidData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('contentId');\n    });\n\n    it('should handle content not found for sharing', async () => {\n      const { checkContentExists } = require('../../../lib/storage/content-store');\n      checkContentExists.mockRejectedValue(new Error('Content not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Content not found');\n    });\n\n    it('should handle insufficient permissions to share content', async () => {\n      const { validateContentAccess } = require('../../../lib/storage/content-store');\n      validateContentAccess.mockRejectedValue(new Error('Insufficient permissions to share content'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle invalid expiration date', async () => {\n      const { validateExpirationDate } = require('../../../lib/security/share-security');\n      validateExpirationDate.mockRejectedValue(new Error('Invalid expiration date: must be in the future'));\n\n      const invalidExpirationData = {\n        ...validShareData,\n        settings: {\n          ...validShareData.settings,\n          expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() // Yesterday\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(invalidExpirationData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid expiration date');\n    });\n\n    it('should handle weak password for protected share', async () => {\n      const { checkPasswordStrength } = require('../../../lib/security/share-security');\n      checkPasswordStrength.mockRejectedValue(new Error('Password does not meet security requirements'));\n\n      const weakPasswordData = {\n        ...validShareData,\n        settings: {\n          ...validShareData.settings,\n          requirePassword: true,\n          password: '123'\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(weakPasswordData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Password does not meet security requirements');\n    });\n\n    it('should handle share limit exceeded for user', async () => {\n      const { checkShareLimits } = require('../../../lib/security/share-security');\n      checkShareLimits.mockRejectedValue(new Error('User share limit exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.message).toContain('User share limit exceeded');\n    });\n\n    it('should handle share token generation failure', async () => {\n      const { generateShareToken } = require('../../../lib/services/sharing-manager');\n      generateShareToken.mockRejectedValue(new Error('Failed to generate share token'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to generate share token');\n    });\n\n    it('should handle share link creation failure', async () => {\n      const { createShareLink } = require('../../../lib/services/sharing-manager');\n      createShareLink.mockRejectedValue(new Error('Failed to create share link'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to create share link');\n    });\n\n    it('should handle invalid content type for sharing', async () => {\n      const { enforceSharePolicies } = require('../../../lib/security/share-security');\n      enforceSharePolicies.mockRejectedValue(new Error('Content type not allowed for sharing'));\n\n      const invalidTypeData = {\n        ...validShareData,\n        contentType: 'restricted-type'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(invalidTypeData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Content type not allowed for sharing');\n    });\n  });\n\n  describe('PUT /api/shared - Update Share Settings', () => {\n    let validUpdateData: any;\n\n    beforeEach(() => {\n      validUpdateData = {\n        shareId: 'share-123',\n        settings: {\n          expiresAt: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(), // 14 days\n          maxAccess: 200,\n          requirePassword: true,\n          password: 'new-secure-password-123'\n        }\n      };\n    });\n\n    it('should handle share not found for update', async () => {\n      const { updateShareSettings } = require('../../../lib/services/sharing-manager');\n      updateShareSettings.mockRejectedValue(new Error('Share not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'PUT',\n        body: JSON.stringify({ shareId: 'nonexistent-share', settings: {} }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Share not found');\n    });\n\n    it('should handle unauthorized share update', async () => {\n      const { validateSharePermissions } = require('../../../lib/security/share-security');\n      validateSharePermissions.mockRejectedValue(new Error('Not authorized to update this share'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'PUT',\n        body: JSON.stringify(validUpdateData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer unauthorized-token'\n        }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle invalid share settings update', async () => {\n      const { updateShareSettings } = require('../../../lib/services/sharing-manager');\n      updateShareSettings.mockRejectedValue(new Error('Invalid share settings'));\n\n      const invalidSettings = {\n        shareId: 'share-123',\n        settings: {\n          maxAccess: -1, // Invalid negative value\n          expiresAt: 'invalid-date'\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'PUT',\n        body: JSON.stringify(invalidSettings),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle share update conflict', async () => {\n      const { updateShareSettings } = require('../../../lib/services/sharing-manager');\n      updateShareSettings.mockRejectedValue(new Error('Share has been modified by another user'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'PUT',\n        body: JSON.stringify(validUpdateData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Share has been modified by another user');\n    });\n\n    it('should handle share update service failure', async () => {\n      const { updateShareSettings } = require('../../../lib/services/sharing-manager');\n      updateShareSettings.mockRejectedValue(new Error('Share update service temporarily unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'PUT',\n        body: JSON.stringify(validUpdateData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Share update service temporarily unavailable');\n    });\n  });\n\n  describe('DELETE /api/shared - Revoke Share Link', () => {\n    it('should handle share not found for revocation', async () => {\n      const { revokeShareLink } = require('../../../lib/services/sharing-manager');\n      revokeShareLink.mockRejectedValue(new Error('Share not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?shareId=nonexistent-share', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Share not found');\n    });\n\n    it('should handle unauthorized share revocation', async () => {\n      const { validateSharePermissions } = require('../../../lib/security/share-security');\n      validateSharePermissions.mockRejectedValue(new Error('Not authorized to revoke this share'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?shareId=share-123', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer unauthorized-token' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle already revoked share', async () => {\n      const { revokeShareLink } = require('../../../lib/services/sharing-manager');\n      revokeShareLink.mockRejectedValue(new Error('Share has already been revoked'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?shareId=revoked-share', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(410); // Gone\n      expect(data.error.message).toContain('Share has already been revoked');\n    });\n\n    it('should handle share revocation failure', async () => {\n      const { revokeShareLink } = require('../../../lib/services/sharing-manager');\n      revokeShareLink.mockRejectedValue(new Error('Failed to revoke share link'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?shareId=share-123', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to revoke share link');\n    });\n  });\n\n  describe('Share Activity Tracking', () => {\n    it('should handle activity tracking failure', async () => {\n      const { trackShareActivity } = require('../../../lib/services/sharing-manager');\n      trackShareActivity.mockRejectedValue(new Error('Activity tracking service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=valid-token');\n      const response = await GET(request);\n\n      // Should not fail the main request\n      expect(response.status).not.toBe(500);\n    });\n\n    it('should handle activity log storage failure', async () => {\n      const { trackShareActivity } = require('../../../lib/services/sharing-manager');\n      trackShareActivity.mockRejectedValue(new Error('Activity log storage full'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=valid-token');\n      await GET(request);\n\n      // Should continue processing despite logging failure\n      expect(trackShareActivity).toHaveBeenCalled();\n    });\n  });\n\n  describe('Share Security Validation', () => {\n    it('should handle malicious share data', async () => {\n      const { sanitizeShareData } = require('../../../lib/security/share-security');\n      sanitizeShareData.mockRejectedValue(new Error('Malicious content detected in share data'));\n\n      const maliciousData = {\n        contentId: 'content-123',\n        contentType: '<script>alert(\"xss\")</script>',\n        permissions: { read: true }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(maliciousData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Malicious content detected');\n    });\n\n    it('should handle suspicious share access pattern', async () => {\n      const { enforceSharePolicies } = require('../../../lib/security/share-security');\n      enforceSharePolicies.mockRejectedValue(new Error('Suspicious access pattern detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/shared?token=valid-token', {\n        headers: {\n          'User-Agent': 'Bot/1.0',\n          'X-Forwarded-For': '192.168.1.1, 10.0.0.1, 172.16.0.1'\n        }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Suspicious access pattern detected');\n    });\n  });\n\n  describe('Batch Share Operations', () => {\n    it('should handle batch share creation with partial failures', async () => {\n      const { createShareLink } = require('../../../lib/services/sharing-manager');\n      createShareLink.mockImplementation((data) => {\n        if (data.contentId === 'invalid-content') {\n          throw new Error('Content not found');\n        }\n        return Promise.resolve({ shareId: 'share-123', token: 'token-123' });\n      });\n\n      const batchData = {\n        shares: [\n          { contentId: 'content-1', contentType: 'document' },\n          { contentId: 'invalid-content', contentType: 'document' },\n          { contentId: 'content-3', contentType: 'image' }\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared/batch', {\n        method: 'POST',\n        body: JSON.stringify(batchData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n\n    it('should handle batch share revocation with partial failures', async () => {\n      const { revokeShareLink } = require('../../../lib/services/sharing-manager');\n      revokeShareLink.mockImplementation((shareId) => {\n        if (shareId === 'nonexistent-share') {\n          throw new Error('Share not found');\n        }\n        return Promise.resolve();\n      });\n\n      const batchData = {\n        shareIds: ['share-1', 'nonexistent-share', 'share-3']\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared/batch', {\n        method: 'DELETE',\n        body: JSON.stringify(batchData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide share operation recovery suggestions', async () => {\n      const { createShareLink } = require('../../../lib/services/sharing-manager');\n      createShareLink.mockRejectedValue(new Error('Temporary sharing service outage'));\n\n      const validShareData = {\n        contentId: 'content-123',\n        contentType: 'document',\n        permissions: { read: true }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry share creation');\n    });\n\n    it('should track share operation performance', async () => {\n      const { createShareLink } = require('../../../lib/services/sharing-manager');\n      createShareLink.mockRejectedValue(new Error('Test error'));\n\n      const validShareData = {\n        contentId: 'content-123',\n        contentType: 'document',\n        permissions: { read: true }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      await POST(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.shareErrorCount).toBeGreaterThan(0);\n    });\n\n    it('should include share context in error responses', async () => {\n      const { createShareLink } = require('../../../lib/services/sharing-manager');\n      createShareLink.mockRejectedValue(new Error('Test error'));\n\n      const validShareData = {\n        contentId: 'content-123',\n        contentType: 'document',\n        permissions: { read: true }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/shared', {\n        method: 'POST',\n        body: JSON.stringify(validShareData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('createShareLink');\n      expect(data.error.context.contentId).toBe('content-123');\n    });\n  });\n});"],"names":["jest","mock","createShareLink","fn","validateShareAccess","updateShareSettings","revokeShareLink","getSharedContent","trackShareActivity","generateShareToken","validateShareToken","getContent","storeSharedContent","updateContentMetadata","deleteSharedContent","checkContentExists","validateContentAccess","validateSharePermissions","checkShareLimits","sanitizeShareData","enforceSharePolicies","validateExpirationDate","checkPasswordStrength","validateSession","checkUserPermissions","getUserId","describe","errorHandler","beforeEach","errorCount","circuitBreakerOpen","clearAllMocks","it","require","mockRejectedValue","Error","request","NextRequest","response","GET","data","json","expect","status","toBe","success","error","code","message","toContain","validShareData","contentId","contentType","permissions","read","download","comment","settings","expiresAt","Date","now","toISOString","maxAccess","requirePassword","allowAnonymous","invalidData","method","body","JSON","stringify","headers","POST","details","invalidExpirationData","weakPasswordData","password","invalidTypeData","validUpdateData","shareId","PUT","invalidSettings","DELETE","not","toHaveBeenCalled","maliciousData","mockImplementation","Promise","resolve","token","batchData","shares","results","toBeDefined","errors","shareIds","recovery","suggestions","stats","getErrorStats","shareErrorCount","toBeGreaterThan","context","operation"],"mappings":"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"}