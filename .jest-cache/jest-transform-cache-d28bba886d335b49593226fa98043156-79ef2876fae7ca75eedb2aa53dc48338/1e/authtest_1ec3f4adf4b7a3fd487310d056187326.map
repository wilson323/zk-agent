{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\auth.test.ts"],"sourcesContent":["/**\n * @file auth.test.ts\n * @description 认证相关API路由错误处理测试\n * @author ZK-Agent Team\n * @date 2025-01-27\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { NextRequest } from 'next/server';\nimport { POST as loginHandler } from '@/app/api/auth/login/route';\nimport { POST as registerHandler } from '@/app/api/auth/register/route';\nimport { POST as logoutHandler } from '@/app/api/auth/logout/route';\nimport { GET as profileHandler } from '@/app/api/auth/profile/route';\nimport { POST as changePasswordHandler } from '@/app/api/auth/change-password/route';\nimport { POST as refreshHandler } from '@/app/api/auth/refresh/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n\ndescribe('Auth API Routes Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler.reset();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    errorHandler.reset();\n  });\n\n  describe('Login Route (/api/auth/login)', () => {\n    it('should handle missing credentials error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle invalid credentials error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'invalid@example.com',\n          password: 'wrongpassword'\n        })\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('AUTHENTICATION_ERROR');\n    });\n\n    it('should handle malformed JSON error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: 'invalid json'\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle database connection error', async () => {\n      // Mock database error\n      vi.mock('@/lib/database/connection', () => ({\n        default: {\n          user: {\n            findUnique: vi.fn().mockRejectedValue(new Error('Database connection failed'))\n          }\n        }\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123'\n        })\n      });\n\n      const response = await loginHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('DATABASE_ERROR');\n    });\n  });\n\n  describe('Register Route (/api/auth/register)', () => {\n    it('should handle duplicate email error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'existing@example.com',\n          password: 'password123',\n          name: 'Test User'\n        })\n      });\n\n      const response = await registerHandler(request);\n      const data = await response.json();\n\n      expect([400, 409]).toContain(response.status);\n      expect(data.error).toBeDefined();\n    });\n\n    it('should handle weak password error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: '123',\n          name: 'Test User'\n        })\n      });\n\n      const response = await registerHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n  });\n\n  describe('Profile Route (/api/auth/profile)', () => {\n    it('should handle unauthorized access error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/profile', {\n        method: 'GET'\n      });\n\n      const response = await profileHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('AUTHENTICATION_ERROR');\n    });\n\n    it('should handle invalid token error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/profile', {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer invalid_token'\n        }\n      });\n\n      const response = await profileHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('AUTHENTICATION_ERROR');\n    });\n  });\n\n  describe('Change Password Route (/api/auth/change-password)', () => {\n    it('should handle missing current password error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/change-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          newPassword: 'newpassword123'\n        })\n      });\n\n      const response = await changePasswordHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle incorrect current password error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/change-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer valid_token'\n        },\n        body: JSON.stringify({\n          currentPassword: 'wrongpassword',\n          newPassword: 'newpassword123'\n        })\n      });\n\n      const response = await changePasswordHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n    });\n  });\n\n  describe('Error Handler Integration', () => {\n    it('should track error statistics across auth routes', async () => {\n      // Trigger multiple errors\n      const requests = [\n        new NextRequest('http://localhost:3000/api/auth/login', {\n          method: 'POST',\n          body: 'invalid json'\n        }),\n        new NextRequest('http://localhost:3000/api/auth/profile', {\n          method: 'GET'\n        }),\n        new NextRequest('http://localhost:3000/api/auth/register', {\n          method: 'POST',\n          body: JSON.stringify({})\n        })\n      ];\n\n      for (const request of requests) {\n        await loginHandler(request).catch(() => {});\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should trigger circuit breaker on repeated failures', async () => {\n      // Configure low threshold for testing\n      const originalThreshold = errorHandler['errorThreshold'];\n      errorHandler['errorThreshold'] = 2;\n\n      try {\n        // Trigger multiple errors to exceed threshold\n        for (let i = 0; i < 3; i++) {\n          const request = new NextRequest('http://localhost:3000/api/auth/login', {\n            method: 'POST',\n            body: 'invalid json'\n          });\n          await loginHandler(request).catch(() => {});\n        }\n\n        expect(errorHandler.isCircuitBreakerOpen()).toBe(true);\n      } finally {\n        errorHandler['errorThreshold'] = originalThreshold;\n      }\n    });\n  });\n});"],"names":["describe","errorHandler","beforeEach","GlobalErrorHandler","getInstance","reset","vi","clearAllMocks","afterEach","it","request","NextRequest","method","headers","body","JSON","stringify","response","loginHandler","data","json","expect","status","toBe","error","toBeDefined","code","email","password","mock","default","user","findUnique","fn","mockRejectedValue","Error","name","registerHandler","toContain","profileHandler","newPassword","changePasswordHandler","currentPassword","requests","catch","stats","getErrorStats","errorCount","toBeGreaterThan","originalThreshold","i","isCircuitBreakerOpen"],"mappings":"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"}