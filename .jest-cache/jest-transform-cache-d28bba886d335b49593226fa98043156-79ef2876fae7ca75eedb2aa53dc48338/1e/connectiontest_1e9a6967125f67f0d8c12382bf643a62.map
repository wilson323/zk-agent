{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\database\\connection.test.ts"],"sourcesContent":["/**\n * 数据库连接测试\n * 测试database/connection.ts中的所有功能\n */\n\nimport {\n  checkDatabaseConnection,\n  performDatabaseHealthCheck,\n  closeDatabaseConnection,\n  reconnectDatabase,\n  getDatabasePoolStatus,\n  prisma,\n  DatabaseStatus,\n  DatabaseHealthCheck,\n} from '@/lib/database/connection'\nimport { PrismaClient } from '@prisma/client'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\n\nconst mockPrismaInstance = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $queryRaw: jest.fn(),\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrismaInstance as any)\n\n// Mock console methods\nconst consoleSpy = {\n  log: jest.spyOn(console, 'log').mockImplementation(),\n  error: jest.spyOn(console, 'error').mockImplementation(),\n  warn: jest.spyOn(console, 'warn').mockImplementation(),\n}\n\n// Mock Date.now for consistent timing tests\nconst mockDateNow = jest.spyOn(Date, 'now')\n\ndescribe('Database Connection', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    consoleSpy.log.mockClear()\n    consoleSpy.error.mockClear()\n    consoleSpy.warn.mockClear()\n    mockDateNow.mockReturnValue(1000)\n  })\n\n  afterAll(() => {\n    consoleSpy.log.mockRestore()\n    consoleSpy.error.mockRestore()\n    consoleSpy.warn.mockRestore()\n    mockDateNow.mockRestore()\n  })\n\n  describe('checkDatabaseConnection', () => {\n    it('应该成功检查数据库连接', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      // Mock version query\n      mockPrismaInstance.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // First call for connection test\n        .mockResolvedValueOnce([{ version: 'PostgreSQL 14.0' }]) // Second call for version\n\n      mockDateNow\n        .mockReturnValueOnce(1000) // Start time\n        .mockReturnValueOnce(1050) // End time\n\n      const result = await checkDatabaseConnection()\n\n      expect(result.connected).toBe(true)\n      expect(result.latency).toBe(50)\n      expect(result.version).toBe('PostgreSQL 14.0')\n      expect(result.timestamp).toBeInstanceOf(Date)\n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n    })\n\n    it('应该处理连接失败的情况', async () => {\n      const error = new Error('Connection failed')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n      \n      mockDateNow\n        .mockReturnValueOnce(1000) // Start time\n        .mockReturnValueOnce(1100) // End time\n\n      const result = await checkDatabaseConnection()\n\n      expect(result.connected).toBe(false)\n      expect(result.error).toBe('Connection failed')\n      expect(result.latency).toBe(100)\n      expect(consoleSpy.error).toHaveBeenCalledWith('Database connection check failed:', error)\n    })\n\n    it('应该处理版本查询失败的情况', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // Connection test succeeds\n        .mockRejectedValueOnce(new Error('Version query failed')) // Version query fails\n\n      const result = await checkDatabaseConnection()\n\n      expect(result.connected).toBe(true)\n      expect(result.version).toBeUndefined()\n      expect(consoleSpy.warn).toHaveBeenCalledWith(\n        'Failed to get database version:',\n        expect.any(Error)\n      )\n    })\n  })\n\n  describe('performDatabaseHealthCheck', () => {\n    beforeEach(() => {\n      // Mock successful connection by default\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n    })\n\n    it('应该返回健康状态', async () => {\n      const result = await performDatabaseHealthCheck()\n\n      expect(result.status).toBe('healthy')\n      expect(result.checks.connection.connected).toBe(true)\n      expect(result.checks.queries.read).toBe(true)\n      expect(result.checks.queries.write).toBe(true)\n      expect(result.checks.migrations.pending).toBe(0)\n      expect(result.timestamp).toBeInstanceOf(Date)\n    })\n\n    it('应该返回不健康状态当连接失败时', async () => {\n      mockPrismaInstance.$connect.mockRejectedValue(new Error('Connection failed'))\n\n      const result = await performDatabaseHealthCheck()\n\n      expect(result.status).toBe('unhealthy')\n      expect(result.checks.connection.connected).toBe(false)\n    })\n\n    it('应该处理健康检查异常', async () => {\n      // Mock an error that occurs during health check setup\n      mockPrismaInstance.$connect.mockImplementation(() => {\n        throw new Error('Unexpected error')\n      })\n\n      const result = await performDatabaseHealthCheck()\n\n      expect(result.status).toBe('unhealthy')\n      expect(result.checks.connection.connected).toBe(false)\n      expect(consoleSpy.error).toHaveBeenCalledWith(\n        'Database health check failed:',\n        expect.any(Error)\n      )\n    })\n  })\n\n  describe('closeDatabaseConnection', () => {\n    it('应该成功关闭数据库连接', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n\n      await closeDatabaseConnection()\n\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(consoleSpy.log).toHaveBeenCalledWith('Database connection closed successfully')\n    })\n\n    it('应该处理关闭连接时的错误', async () => {\n      const error = new Error('Disconnect failed')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n\n      await closeDatabaseConnection()\n\n      expect(consoleSpy.error).toHaveBeenCalledWith('Error closing database connection:', error)\n    })\n  })\n\n  describe('reconnectDatabase', () => {\n    it('应该成功重新连接数据库', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n\n      const result = await reconnectDatabase()\n\n      expect(result).toBe(true)\n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n    })\n\n    it('应该处理重连失败的情况', async () => {\n      const error = new Error('Reconnection failed')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n\n      const result = await reconnectDatabase()\n\n      expect(result).toBe(false)\n      expect(consoleSpy.error).toHaveBeenCalledWith('Database reconnection failed:', error)\n    })\n  })\n\n  describe('getDatabasePoolStatus', () => {\n    it('应该返回连接池状态', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      mockDateNow\n        .mockReturnValueOnce(1000)\n        .mockReturnValueOnce(1050)\n\n      const result = await getDatabasePoolStatus()\n\n      expect(result.connected).toBe(true)\n      expect(result.latency).toBe(50)\n      expect(result.pool.active).toBe(1)\n      expect(result.pool.idle).toBe(0)\n      expect(result.pool.total).toBe(1)\n    })\n\n    it('应该处理连接池状态检查失败', async () => {\n      mockPrismaInstance.$connect.mockRejectedValue(new Error('Pool status failed'))\n\n      const result = await getDatabasePoolStatus()\n\n      expect(result.connected).toBe(false)\n      expect(result.error).toBe('Pool status failed')\n      expect(result.pool.active).toBe(0)\n      expect(result.pool.total).toBe(0)\n    })\n  })\n\n  describe('prisma export', () => {\n    it('应该导出prisma实例', () => {\n      expect(prisma).toBeDefined()\n    })\n  })\n})\n\n// 测试进程事件监听器\ndescribe('Process Event Listeners', () => {\n  let originalProcess: NodeJS.Process\n  let mockExit: jest.SpyInstance\n\n  beforeAll(() => {\n    originalProcess = global.process\n    mockExit = jest.spyOn(process, 'exit').mockImplementation(() => {\n      throw new Error('process.exit called')\n    })\n  })\n\n  afterAll(() => {\n    global.process = originalProcess\n    mockExit.mockRestore()\n  })\n\n  it('应该注册进程退出事件监听器', () => {\n    const mockProcess = {\n      on: jest.fn(),\n    } as any\n\n    global.process = mockProcess\n\n    // 重新导入模块以触发事件监听器注册\n    jest.resetModules()\n    require('@/lib/database/connection')\n\n    expect(mockProcess.on).toHaveBeenCalledWith('beforeExit', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGINT', expect.any(Function))\n    expect(mockProcess.on).toHaveBeenCalledWith('SIGTERM', expect.any(Function))\n  })\n})"],"names":["jest","mock","mockPrismaInstance","$connect","fn","$disconnect","$queryRaw","PrismaClient","mockImplementation","consoleSpy","log","spyOn","console","error","warn","mockDateNow","Date","describe","beforeEach","clearAllMocks","mockClear","mockReturnValue","afterAll","mockRestore","it","mockResolvedValue","undefined","test","mockResolvedValueOnce","version","mockReturnValueOnce","result","checkDatabaseConnection","expect","connected","toBe","latency","timestamp","toBeInstanceOf","toHaveBeenCalled","Error","mockRejectedValue","toHaveBeenCalledWith","mockRejectedValueOnce","toBeUndefined","any","performDatabaseHealthCheck","status","checks","connection","queries","read","write","migrations","pending","closeDatabaseConnection","reconnectDatabase","getDatabasePoolStatus","pool","active","idle","total","prisma","toBeDefined","originalProcess","mockExit","beforeAll","global","process","mockProcess","on","resetModules","require","Function"],"mappings":"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"}