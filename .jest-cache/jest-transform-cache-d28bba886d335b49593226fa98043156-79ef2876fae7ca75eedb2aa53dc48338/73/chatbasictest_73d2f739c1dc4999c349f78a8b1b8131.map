{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\chat\\chat-basic.test.js"],"sourcesContent":["/**\r\n * 智能对话基础功能测试\r\n * 确保智能对话核心功能100%可靠\r\n */\r\n\r\ndescribe('智能对话基础功能测试', () => {\r\n  \r\n  describe('消息处理测试', () => {\r\n    test('应该正确处理简单文本消息', () => {\r\n      const message = {\r\n        id: 'msg-1',\r\n        content: '你好',\r\n        role: 'user',\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      expect(message).toBeDefined()\r\n      expect(message.content).toBe('你好')\r\n      expect(message.role).toBe('user')\r\n      expect(typeof message.timestamp).toBe('number')\r\n    })\r\n\r\n    test('应该正确验证消息格式', () => {\r\n      const validMessage = {\r\n        id: 'msg-1',\r\n        content: '测试消息',\r\n        role: 'user',\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      // 验证必需字段\r\n      expect(validMessage.id).toBeTruthy()\r\n      expect(validMessage.content).toBeTruthy()\r\n      expect(validMessage.role).toBeTruthy()\r\n      expect(validMessage.timestamp).toBeTruthy()\r\n      \r\n      // 验证字段类型\r\n      expect(typeof validMessage.id).toBe('string')\r\n      expect(typeof validMessage.content).toBe('string')\r\n      expect(typeof validMessage.role).toBe('string')\r\n      expect(typeof validMessage.timestamp).toBe('number')\r\n    })\r\n\r\n    test('应该正确处理多种角色的消息', () => {\r\n      const userMessage = { role: 'user', content: '用户消息' }\r\n      const assistantMessage = { role: 'assistant', content: 'AI回复' }\r\n      const systemMessage = { role: 'system', content: '系统消息' }\r\n      \r\n      expect(userMessage.role).toBe('user')\r\n      expect(assistantMessage.role).toBe('assistant')\r\n      expect(systemMessage.role).toBe('system')\r\n    })\r\n  })\r\n\r\n  describe('会话管理测试', () => {\r\n    test('应该正确生成会话ID', () => {\r\n      const sessionId1 = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\r\n      const sessionId2 = `session_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\r\n      \r\n      expect(sessionId1).toBeTruthy()\r\n      expect(sessionId2).toBeTruthy()\r\n      expect(sessionId1).not.toBe(sessionId2)\r\n      expect(sessionId1.startsWith('session_')).toBe(true)\r\n    })\r\n\r\n    test('应该正确管理会话状态', () => {\r\n      const session = {\r\n        id: 'test-session',\r\n        userId: 'user-1',\r\n        createdAt: Date.now(),\r\n        lastActivity: Date.now(),\r\n        messageCount: 0,\r\n        status: 'active'\r\n      }\r\n      \r\n      expect(session.id).toBe('test-session')\r\n      expect(session.userId).toBe('user-1')\r\n      expect(session.status).toBe('active')\r\n      expect(session.messageCount).toBe(0)\r\n    })\r\n  })\r\n\r\n  describe('错误处理测试', () => {\r\n    test('应该正确处理空消息', () => {\r\n      const emptyMessage = { content: '' }\r\n      const isValid = emptyMessage.content && emptyMessage.content.trim().length > 0\r\n      \r\n      expect(isValid).toBe(false)\r\n    })\r\n\r\n    test('应该正确处理超长消息', () => {\r\n      const longContent = 'a'.repeat(10000)\r\n      const maxLength = 5000\r\n      const isValid = longContent.length <= maxLength\r\n      \r\n      expect(isValid).toBe(false)\r\n      expect(longContent.length).toBeGreaterThan(maxLength)\r\n    })\r\n\r\n    test('应该正确处理无效角色', () => {\r\n      const validRoles = ['user', 'assistant', 'system']\r\n      const invalidRole = 'invalid'\r\n      \r\n      expect(validRoles.includes(invalidRole)).toBe(false)\r\n      expect(validRoles.includes('user')).toBe(true)\r\n      expect(validRoles.includes('assistant')).toBe(true)\r\n      expect(validRoles.includes('system')).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('上下文管理测试', () => {\r\n    test('应该正确管理对话历史', () => {\r\n      const conversationHistory = []\r\n      \r\n      // 添加消息\r\n      conversationHistory.push({\r\n        role: 'user',\r\n        content: '你好',\r\n        timestamp: Date.now()\r\n      })\r\n      \r\n      conversationHistory.push({\r\n        role: 'assistant',\r\n        content: '你好！有什么可以帮助你的吗？',\r\n        timestamp: Date.now() + 1000\r\n      })\r\n      \r\n      expect(conversationHistory).toHaveLength(2)\r\n      expect(conversationHistory[0].role).toBe('user')\r\n      expect(conversationHistory[1].role).toBe('assistant')\r\n    })\r\n\r\n    test('应该正确限制上下文长度', () => {\r\n      const maxMessages = 10\r\n      const messages = Array.from({ length: 15 }, (_, i) => ({\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        content: `消息 ${i}`,\r\n        timestamp: Date.now() + i * 1000\r\n      }))\r\n      \r\n      // 模拟限制上下文长度\r\n      const limitedMessages = messages.slice(-maxMessages)\r\n      \r\n      expect(limitedMessages).toHaveLength(maxMessages)\r\n      expect(limitedMessages[0].content).toBe('消息 5')\r\n      expect(limitedMessages[9].content).toBe('消息 14')\r\n    })\r\n  })\r\n\r\n  describe('消息验证测试', () => {\r\n    test('应该正确验证消息内容安全性', () => {\r\n      const safeMessage = '这是一条安全的消息'\r\n      const unsafeMessage = '<script>alert(\"xss\")</script>'\r\n      \r\n      // 简单的XSS检测\r\n      const containsScript = (content) => {\r\n        return content.toLowerCase().includes('<script') || \r\n               content.toLowerCase().includes('javascript:') ||\r\n               content.toLowerCase().includes('onclick=')\r\n      }\r\n      \r\n      expect(containsScript(safeMessage)).toBe(false)\r\n      expect(containsScript(unsafeMessage)).toBe(true)\r\n    })\r\n\r\n    test('应该正确过滤敏感内容', () => {\r\n      const sensitiveWords = ['密码', 'password', '身份证']\r\n      const message = '请告诉我你的密码'\r\n      \r\n      const containsSensitive = sensitiveWords.some(word => \r\n        message.toLowerCase().includes(word.toLowerCase())\r\n      )\r\n      \r\n      expect(containsSensitive).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('性能测试', () => {\r\n    test('应该在合理时间内处理消息', () => {\r\n      const startTime = Date.now()\r\n      \r\n      // 模拟消息处理\r\n      const message = {\r\n        id: `msg_${Date.now()}`,\r\n        content: '性能测试消息',\r\n        role: 'user',\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      // 简单的处理逻辑\r\n      const processedMessage = {\r\n        ...message,\r\n        processed: true,\r\n        processingTime: Date.now() - startTime\r\n      }\r\n      \r\n      const endTime = Date.now()\r\n      const processingTime = endTime - startTime\r\n      \r\n      expect(processingTime).toBeLessThan(100) // 100ms内完成\r\n      expect(processedMessage.processed).toBe(true)\r\n    })\r\n\r\n    test('应该正确处理并发消息', () => {\r\n      const messages = Array.from({ length: 100 }, (_, i) => ({\r\n        id: `msg_${i}`,\r\n        content: `并发消息 ${i}`,\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        timestamp: Date.now() + i\r\n      }))\r\n      \r\n      // 模拟并发处理\r\n      const processedMessages = messages.map(msg => ({\r\n        ...msg,\r\n        processed: true\r\n      }))\r\n      \r\n      expect(processedMessages).toHaveLength(100)\r\n      expect(processedMessages.every(msg => msg.processed)).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('数据结构测试', () => {\r\n    test('应该正确定义消息数据结构', () => {\r\n      const messageSchema = {\r\n        id: 'string',\r\n        content: 'string',\r\n        role: 'string',\r\n        timestamp: 'number',\r\n        sessionId: 'string'\r\n      }\r\n      \r\n      const testMessage = {\r\n        id: 'msg-1',\r\n        content: '测试消息',\r\n        role: 'user',\r\n        timestamp: Date.now(),\r\n        sessionId: 'session-1'\r\n      }\r\n      \r\n      // 验证数据结构\r\n      Object.keys(messageSchema).forEach(key => {\r\n        expect(testMessage).toHaveProperty(key)\r\n        expect(typeof testMessage[key]).toBe(messageSchema[key])\r\n      })\r\n    })\r\n\r\n    test('应该正确定义会话数据结构', () => {\r\n      const sessionSchema = {\r\n        id: 'string',\r\n        userId: 'string',\r\n        createdAt: 'number',\r\n        lastActivity: 'number',\r\n        messageCount: 'number',\r\n        status: 'string'\r\n      }\r\n      \r\n      const testSession = {\r\n        id: 'session-1',\r\n        userId: 'user-1',\r\n        createdAt: Date.now(),\r\n        lastActivity: Date.now(),\r\n        messageCount: 5,\r\n        status: 'active'\r\n      }\r\n      \r\n      // 验证数据结构\r\n      Object.keys(sessionSchema).forEach(key => {\r\n        expect(testSession).toHaveProperty(key)\r\n        expect(typeof testSession[key]).toBe(sessionSchema[key])\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('工具函数测试', () => {\r\n    test('应该正确生成唯一ID', () => {\r\n      const generateId = () => `${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\r\n      \r\n      const id1 = generateId()\r\n      const id2 = generateId()\r\n      \r\n      expect(id1).toBeTruthy()\r\n      expect(id2).toBeTruthy()\r\n      expect(id1).not.toBe(id2)\r\n    })\r\n\r\n    test('应该正确格式化时间戳', () => {\r\n      const timestamp = Date.now()\r\n      const date = new Date(timestamp)\r\n      \r\n      expect(date.getTime()).toBe(timestamp)\r\n      expect(date instanceof Date).toBe(true)\r\n    })\r\n\r\n    test('应该正确计算消息长度', () => {\r\n      const message = '这是一条测试消息'\r\n      const length = message.length\r\n      \r\n      expect(length).toBe(8)\r\n      expect(typeof length).toBe('number')\r\n    })\r\n  })\r\n}) "],"names":["describe","test","message","id","content","role","timestamp","Date","now","expect","toBeDefined","toBe","validMessage","toBeTruthy","userMessage","assistantMessage","systemMessage","sessionId1","Math","random","toString","substring","sessionId2","not","startsWith","session","userId","createdAt","lastActivity","messageCount","status","emptyMessage","isValid","trim","length","longContent","repeat","maxLength","toBeGreaterThan","validRoles","invalidRole","includes","conversationHistory","push","toHaveLength","maxMessages","messages","Array","from","_","i","limitedMessages","slice","safeMessage","unsafeMessage","containsScript","toLowerCase","sensitiveWords","containsSensitive","some","word","startTime","processedMessage","processed","processingTime","endTime","toBeLessThan","processedMessages","map","msg","every","messageSchema","sessionId","testMessage","Object","keys","forEach","key","toHaveProperty","sessionSchema","testSession","generateId","id1","id2","date","getTime"],"mappings":"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"}