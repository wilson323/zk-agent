{"version":3,"sources":["E:\\zk-agent\\lib\\database\\poster-config.ts"],"sourcesContent":["// @ts-nocheck\n/**\n * 海报配置数据库操作\n */\n\nimport { PrismaClient } from \"@prisma/client\"\nimport type { PosterStyle, ColorPalette, PosterSize, SecurityTemplate, IndustryConfig } from \"@/types/poster\"\n\nconst prisma = new PrismaClient()\n\nexport class PosterConfigDB {\n  /**\n   * 获取所有海报风格\n   */\n  static async getStyles(): Promise<PosterStyle[]> {\n    try {\n      const styles = await prisma.posterStyle.findMany({\n        where: { isActive: true },\n        orderBy: { order: \"asc\" },\n      })\n      return styles.map((style) => ({\n        id: style.id,\n        name: style.name,\n        description: style.description,\n        preview: style.previewUrl,\n        category: style.category as any,\n        tags: style.tags,\n        industrySpecific: style.industrySpecific,\n        parameters: style.parameters as any,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get poster styles:\", error)\n      return []\n    }\n  }\n\n  /**\n   * 获取安防行业模板\n   */\n  static async getSecurityTemplates(): Promise<SecurityTemplate[]> {\n    try {\n      const templates = await prisma.posterTemplate.findMany({\n        where: {\n          isActive: true,\n          industry: \"security\",\n        },\n        include: {\n          elements: true,\n          tags: true,\n        },\n        orderBy: { popularity: \"desc\" },\n      })\n\n      return templates.map((template) => ({\n        id: template.id,\n        name: template.name,\n        description: template.description,\n        thumbnail: template.thumbnailUrl,\n        category: template.category,\n        industry: template.industry,\n        productType: template.productType,\n        useCase: template.useCase,\n        tags: template.tags.map((t) => t.name),\n        elements: template.elements,\n        popularity: template.popularity,\n        isNew: template.isNew,\n        isPremium: template.isPremium,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get security templates:\", error)\n      return []\n    }\n  }\n\n  /**\n   * 获取配色方案\n   */\n  static async getColorPalettes(): Promise<ColorPalette[]> {\n    try {\n      const palettes = await prisma.colorPalette.findMany({\n        where: { isActive: true },\n        orderBy: { order: \"asc\" },\n      })\n      return palettes.map((palette) => ({\n        id: palette.id,\n        name: palette.name,\n        colors: palette.colors,\n        description: palette.description,\n        category: palette.category as any,\n        industryRecommended: palette.industryRecommended,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get color palettes:\", error)\n      return []\n    }\n  }\n\n  /**\n   * 获取海报尺寸配置\n   */\n  static async getPosterSizes(): Promise<PosterSize[]> {\n    try {\n      const sizes = await prisma.posterSize.findMany({\n        where: { isActive: true },\n        orderBy: { order: \"asc\" },\n      })\n      return sizes.map((size) => ({\n        id: size.id,\n        name: size.name,\n        dimensions: size.dimensions,\n        ratio: size.ratio,\n        width: size.width,\n        height: size.height,\n        dpi: size.dpi,\n        category: size.category,\n        recommended: size.recommended,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get poster sizes:\", error)\n      return []\n    }\n  }\n\n  /**\n   * 保存用户生成历史\n   */\n  static async saveGenerationHistory(data: {\n    userId: string\n    prompt: string\n    style: string\n    template?: string\n    settings: any\n    imageUrl: string\n    industry?: string\n  }) {\n    try {\n      return await prisma.posterGeneration.create({\n        data: {\n          userId: data.userId,\n          prompt: data.prompt,\n          style: data.style,\n          templateId: data.template,\n          settings: data.settings,\n          imageUrl: data.imageUrl,\n          industry: data.industry,\n          createdAt: new Date(),\n        },\n      })\n    } catch (error) {\n      console.error(\"Failed to save generation history:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * 获取用户生成历史\n   */\n  static async getUserHistory(userId: string, limit = 20) {\n    try {\n      return await prisma.posterGeneration.findMany({\n        where: { userId },\n        include: {\n          template: true,\n        },\n        orderBy: { createdAt: \"desc\" },\n        take: limit,\n      })\n    } catch (error) {\n      console.error(\"Failed to get user history:\", error)\n      return []\n    }\n  }\n\n  /**\n   * 更新模板使用统计\n   */\n  static async updateTemplateUsage(templateId: string) {\n    try {\n      await prisma.posterTemplate.update({\n        where: { id: templateId },\n        data: {\n          usageCount: { increment: 1 },\n          lastUsed: new Date(),\n        },\n      })\n    } catch (error) {\n      console.error(\"Failed to update template usage:\", error)\n    }\n  }\n\n  /**\n   * 获取行业配置\n   */\n  static async getIndustryConfig(industry: string): Promise<IndustryConfig | null> {\n    try {\n      const config = await prisma.industryConfig.findUnique({\n        where: { industry },\n        include: {\n          recommendedStyles: true,\n          recommendedPalettes: true,\n          brandGuidelines: true,\n        },\n      })\n      return config\n    } catch (error) {\n      console.error(\"Failed to get industry config:\", error)\n      return null\n    }\n  }\n}\n"],"names":["PosterConfigDB","prisma","PrismaClient","getStyles","styles","posterStyle","findMany","where","isActive","orderBy","order","map","style","id","name","description","preview","previewUrl","category","tags","industrySpecific","parameters","error","console","getSecurityTemplates","templates","posterTemplate","industry","include","elements","popularity","template","thumbnail","thumbnailUrl","productType","useCase","t","isNew","isPremium","getColorPalettes","palettes","colorPalette","palette","colors","industryRecommended","getPosterSizes","sizes","posterSize","size","dimensions","ratio","width","height","dpi","recommended","saveGenerationHistory","data","posterGeneration","create","userId","prompt","templateId","settings","imageUrl","createdAt","Date","getUserHistory","limit","take","updateTemplateUsage","update","usageCount","increment","lastUsed","getIndustryConfig","config","industryConfig","findUnique","recommendedStyles","recommendedPalettes","brandGuidelines"],"mappings":"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"}