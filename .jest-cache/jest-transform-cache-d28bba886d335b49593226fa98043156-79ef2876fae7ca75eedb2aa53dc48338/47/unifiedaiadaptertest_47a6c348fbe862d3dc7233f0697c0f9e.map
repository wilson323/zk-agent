{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\ai\\unified-ai-adapter.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/ai/unified-ai-adapter.test.ts\r\n * @description 统一AI适配器测试 - 100%覆盖率目标\r\n * @author B团队测试架构师\r\n * @lastUpdate 2024-12-19\r\n */\r\n\r\nimport { UnifiedAIAdapter, AIProvider, unifiedAIAdapter, getOptimalAIProvider } from '@/lib/ai/unified-ai-adapter';\r\n\r\n// Mock fetch\r\nglobal.fetch = jest.fn();\r\n\r\ndescribe('UnifiedAIAdapter', () => {\r\n  let aiAdapter: UnifiedAIAdapter;\r\n  const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>;\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    aiAdapter = UnifiedAIAdapter.getInstance();\r\n    \r\n    // 重置熔断器状态\r\n    Object.values(AIProvider).forEach(provider => {\r\n      aiAdapter.resetCircuitBreaker(provider);\r\n    });\r\n  });\r\n\r\n  describe('单例模式', () => {\r\n    it('应该返回相同的实例', () => {\r\n      const instance1 = UnifiedAIAdapter.getInstance();\r\n      const instance2 = UnifiedAIAdapter.getInstance();\r\n      expect(instance1).toBe(instance2);\r\n    });\r\n\r\n    it('应该返回导出的单例实例', () => {\r\n      expect(unifiedAIAdapter).toBeInstanceOf(UnifiedAIAdapter);\r\n    });\r\n  });\r\n\r\n  describe('FastGPT服务调用', () => {\r\n    it('应该成功调用FastGPT', async () => {\r\n      const mockResponse = {\r\n        id: 'chatcmpl-test',\r\n        object: 'chat.completion',\r\n        created: Date.now(),\r\n        model: 'gpt-3.5-turbo',\r\n        choices: [{\r\n          index: 0,\r\n          message: {\r\n            role: 'assistant',\r\n            content: 'Test response from FastGPT',\r\n          },\r\n          finish_reason: 'stop',\r\n        }],\r\n        usage: {\r\n          prompt_tokens: 20,\r\n          completion_tokens: 30,\r\n          total_tokens: 50,\r\n        },\r\n      };\r\n\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => mockResponse,\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n        temperature: 0.7,\r\n        maxTokens: 1000,\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n\r\n      expect(response.success).toBe(true);\r\n      expect(response.data).toEqual(mockResponse);\r\n      expect(response.provider).toBe(AIProvider.FASTGPT);\r\n      expect(response.latency).toBeGreaterThanOrEqual(0);\r\n      expect(mockFetch).toHaveBeenCalledWith(\r\n        expect.stringContaining('fastgpt'),\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          headers: expect.objectContaining({\r\n            'Content-Type': 'application/json',\r\n            'Authorization': expect.stringContaining('Bearer'),\r\n          }),\r\n        })\r\n      );\r\n    });\r\n\r\n    it('应该处理FastGPT错误响应', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        status: 500,\r\n        statusText: 'Internal Server Error',\r\n        json: async () => ({ error: 'Service unavailable' }),\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n\r\n      expect(response.success).toBe(false);\r\n      expect(response.error).toContain('HTTP 500');\r\n    });\r\n  });\r\n\r\n  describe('千问服务调用', () => {\r\n    it('应该成功调用千问', async () => {\r\n      const mockResponse = {\r\n        output: {\r\n          text: 'Test response from Qianwen',\r\n        },\r\n        usage: {\r\n          input_tokens: 20,\r\n          output_tokens: 30,\r\n          total_tokens: 50,\r\n        },\r\n        request_id: 'test-qwen-request-id',\r\n      };\r\n\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => mockResponse,\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n        temperature: 0.7,\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.QIANWEN, request);\r\n\r\n      expect(response.success).toBe(true);\r\n      expect(response.data).toEqual(mockResponse);\r\n      expect(response.provider).toBe(AIProvider.QIANWEN);\r\n      expect(mockFetch).toHaveBeenCalledWith(\r\n        expect.stringContaining('dashscope'),\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          headers: expect.objectContaining({\r\n            'Content-Type': 'application/json',\r\n            'Authorization': expect.stringContaining('Bearer'),\r\n          }),\r\n        })\r\n      );\r\n    });\r\n\r\n    it('应该处理千问错误响应', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: false,\r\n        status: 401,\r\n        statusText: 'Unauthorized',\r\n        json: async () => ({ error: 'Invalid API key' }),\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.QIANWEN, request);\r\n\r\n      expect(response.success).toBe(false);\r\n      expect(response.error).toContain('HTTP 401');\r\n    });\r\n  });\r\n\r\n  describe('硅基流动服务调用', () => {\r\n    it('应该成功调用硅基流动', async () => {\r\n      const mockResponse = {\r\n        id: 'chatcmpl-test-sf',\r\n        object: 'chat.completion',\r\n        created: Date.now(),\r\n        model: 'deepseek-chat',\r\n        choices: [{\r\n          index: 0,\r\n          message: {\r\n            role: 'assistant',\r\n            content: 'Test response from SiliconFlow',\r\n          },\r\n          finish_reason: 'stop',\r\n        }],\r\n        usage: {\r\n          prompt_tokens: 20,\r\n          completion_tokens: 30,\r\n          total_tokens: 50,\r\n        },\r\n      };\r\n\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => mockResponse,\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n        model: 'deepseek-chat',\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.SILICONFLOW, request);\r\n\r\n      expect(response.success).toBe(true);\r\n      expect(response.data).toEqual(mockResponse);\r\n      expect(response.provider).toBe(AIProvider.SILICONFLOW);\r\n      expect(mockFetch).toHaveBeenCalledWith(\r\n        expect.stringContaining('siliconflow'),\r\n        expect.objectContaining({\r\n          method: 'POST',\r\n          headers: expect.objectContaining({\r\n            'Content-Type': 'application/json',\r\n            'Authorization': expect.stringContaining('Bearer'),\r\n          }),\r\n        })\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('熔断器机制', () => {\r\n    it('应该在连续失败后触发熔断器', async () => {\r\n      // 模拟连续失败\r\n      mockFetch.mockResolvedValue({\r\n        ok: false,\r\n        status: 500,\r\n        statusText: 'Internal Server Error',\r\n        json: async () => ({ error: 'Service unavailable' }),\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      // 连续调用直到熔断器触发\r\n      for (let i = 0; i < 6; i++) {\r\n        await aiAdapter.call(AIProvider.FASTGPT, request);\r\n      }\r\n\r\n      // 下一次调用应该被熔断器阻止\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n      expect(response.success).toBe(false);\r\n      expect(response.error).toContain('Circuit breaker is open');\r\n    });\r\n\r\n    it('应该能够重置熔断器', async () => {\r\n      // 先触发熔断器\r\n      mockFetch.mockResolvedValue({\r\n        ok: false,\r\n        status: 500,\r\n        statusText: 'Internal Server Error',\r\n        json: async () => ({ error: 'Service unavailable' }),\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        await aiAdapter.call(AIProvider.FASTGPT, request);\r\n      }\r\n\r\n      // 重置熔断器\r\n      aiAdapter.resetCircuitBreaker(AIProvider.FASTGPT);\r\n\r\n      // 模拟成功响应\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => ({\r\n          id: 'test',\r\n          choices: [{ message: { content: 'Success' } }],\r\n        }),\r\n      } as Response);\r\n\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n      expect(response.success).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('负载均衡', () => {\r\n    it('应该返回最优的AI提供商', async () => {\r\n      // Mock健康状态\r\n      jest.spyOn(aiAdapter, 'getHealthStatus').mockResolvedValue({\r\n        [AIProvider.FASTGPT]: {\r\n          healthy: true,\r\n          latency: 200,\r\n          circuitBreakerState: 'closed',\r\n          lastChecked: new Date().toISOString(),\r\n        },\r\n        [AIProvider.QIANWEN]: {\r\n          healthy: true,\r\n          latency: 150,\r\n          circuitBreakerState: 'closed',\r\n          lastChecked: new Date().toISOString(),\r\n        },\r\n        [AIProvider.SILICONFLOW]: {\r\n          healthy: false,\r\n          latency: 0,\r\n          circuitBreakerState: 'open',\r\n          lastChecked: new Date().toISOString(),\r\n        },\r\n      });\r\n\r\n      const optimalProvider = await getOptimalAIProvider();\r\n      expect(optimalProvider).toBe(AIProvider.QIANWEN); // 最低延迟的健康服务\r\n    });\r\n\r\n    it('应该处理没有健康服务的情况', async () => {\r\n      jest.spyOn(aiAdapter, 'getHealthStatus').mockResolvedValue({\r\n        [AIProvider.FASTGPT]: {\r\n          healthy: false,\r\n          latency: 0,\r\n          circuitBreakerState: 'open',\r\n          lastChecked: new Date().toISOString(),\r\n        },\r\n        [AIProvider.QIANWEN]: {\r\n          healthy: false,\r\n          latency: 0,\r\n          circuitBreakerState: 'open',\r\n          lastChecked: new Date().toISOString(),\r\n        },\r\n        [AIProvider.SILICONFLOW]: {\r\n          healthy: false,\r\n          latency: 0,\r\n          circuitBreakerState: 'open',\r\n          lastChecked: new Date().toISOString(),\r\n        },\r\n      });\r\n\r\n      await expect(getOptimalAIProvider()).rejects.toThrow('No healthy AI services available');\r\n    });\r\n  });\r\n\r\n  describe('健康检查', () => {\r\n    it('应该返回所有服务的健康状态', async () => {\r\n      // Mock成功响应\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => ({ test: 'response' }),\r\n      } as Response);\r\n\r\n      const healthStatus = await aiAdapter.getHealthStatus();\r\n\r\n      expect(healthStatus).toHaveProperty(AIProvider.FASTGPT);\r\n      expect(healthStatus).toHaveProperty(AIProvider.QIANWEN);\r\n      expect(healthStatus).toHaveProperty(AIProvider.SILICONFLOW);\r\n\r\n      Object.values(healthStatus).forEach(status => {\r\n        expect(status).toHaveProperty('healthy');\r\n        expect(status).toHaveProperty('latency');\r\n        expect(status).toHaveProperty('circuitBreakerState');\r\n        expect(status).toHaveProperty('lastChecked');\r\n      });\r\n    });\r\n\r\n    it('应该正确标记不健康的服务', async () => {\r\n      // Mock失败响应\r\n      mockFetch.mockRejectedValue(new Error('Network error'));\r\n\r\n      const healthStatus = await aiAdapter.getHealthStatus();\r\n\r\n      Object.values(healthStatus).forEach(status => {\r\n        expect(status.healthy).toBe(false);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('配置管理', () => {\r\n    it('应该返回配置的服务列表', () => {\r\n      const configuredServices = aiAdapter.getConfiguredServices();\r\n      expect(Array.isArray(configuredServices)).toBe(true);\r\n      expect(configuredServices.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('应该验证服务配置', () => {\r\n      const isConfigured = aiAdapter.isServiceConfigured(AIProvider.FASTGPT);\r\n      expect(typeof isConfigured).toBe('boolean');\r\n    });\r\n  });\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理网络错误', async () => {\r\n      mockFetch.mockRejectedValue(new Error('Network error'));\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n\r\n      expect(response.success).toBe(false);\r\n      expect(response.error).toContain('Network error');\r\n    });\r\n\r\n    it('应该处理超时错误', async () => {\r\n      mockFetch.mockImplementation(() => \r\n        new Promise((_, reject) => \r\n          setTimeout(() => reject(new Error('Timeout')), 100)\r\n        )\r\n      );\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n\r\n      expect(response.success).toBe(false);\r\n      expect(response.error).toContain('Timeout');\r\n    });\r\n\r\n    it('应该处理无效的JSON响应', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => {\r\n          throw new Error('Invalid JSON');\r\n        },\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n\r\n      expect(response.success).toBe(false);\r\n      expect(response.error).toContain('Invalid JSON');\r\n    });\r\n  });\r\n\r\n  describe('性能测试', () => {\r\n    it('应该在合理时间内完成调用', async () => {\r\n      mockFetch.mockResolvedValueOnce({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => ({\r\n          id: 'test',\r\n          choices: [{ message: { content: 'Fast response' } }],\r\n        }),\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const { result, duration } = await performanceUtils.measureTime(async () => {\r\n        return await aiAdapter.call(AIProvider.FASTGPT, request);\r\n      });\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(duration).toBeLessThan(1000); // 应该在1秒内完成\r\n    });\r\n\r\n    it('应该正确测量响应延迟', async () => {\r\n      mockFetch.mockImplementation(async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 100)); // 100ms延迟\r\n        return {\r\n          ok: true,\r\n          status: 200,\r\n          json: async () => ({\r\n            id: 'test',\r\n            choices: [{ message: { content: 'Delayed response' } }],\r\n          }),\r\n        } as Response;\r\n      });\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const response = await aiAdapter.call(AIProvider.FASTGPT, request);\r\n\r\n      expect(response.success).toBe(true);\r\n      expect(response.latency).toBeGreaterThanOrEqual(100);\r\n    });\r\n  });\r\n\r\n  describe('并发处理', () => {\r\n    it('应该正确处理并发请求', async () => {\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => ({\r\n          id: 'test',\r\n          choices: [{ message: { content: 'Concurrent response' } }],\r\n        }),\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      const promises = Array.from({ length: 10 }, () => \r\n        aiAdapter.call(AIProvider.FASTGPT, request)\r\n      );\r\n\r\n      const responses = await Promise.all(promises);\r\n\r\n      responses.forEach(response => {\r\n        expect(response.success).toBe(true);\r\n      });\r\n\r\n      expect(mockFetch).toHaveBeenCalledTimes(10);\r\n    });\r\n  });\r\n\r\n  describe('内存管理', () => {\r\n    it('应该正确管理熔断器状态', async () => {\r\n      // 测试大量请求不会导致内存泄漏\r\n      mockFetch.mockResolvedValue({\r\n        ok: true,\r\n        status: 200,\r\n        json: async () => ({ test: 'response' }),\r\n      } as Response);\r\n\r\n      const request = {\r\n        messages: [{ role: 'user' as const, content: 'Hello' }],\r\n      };\r\n\r\n      // 执行大量请求\r\n      const promises = Array.from({ length: 100 }, () => \r\n        aiAdapter.call(AIProvider.FASTGPT, request)\r\n      );\r\n\r\n      await Promise.all(promises);\r\n\r\n      // 验证熔断器状态仍然正常\r\n      const healthStatus = await aiAdapter.getHealthStatus();\r\n      expect(healthStatus[AIProvider.FASTGPT].healthy).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('流式响应', () => {\r\n    it('应该支持流式响应处理', async () => {\r\n      // 这里可以添加流式响应的测试\r\n      // 目前先跳过，因为需要更复杂的Mock设置\r\n      expect(true).toBe(true);\r\n    });\r\n  });\r\n}); "],"names":["global","fetch","jest","fn","describe","aiAdapter","mockFetch","beforeEach","clearAllMocks","UnifiedAIAdapter","getInstance","Object","values","AIProvider","forEach","provider","resetCircuitBreaker","it","instance1","instance2","expect","toBe","unifiedAIAdapter","toBeInstanceOf","mockResponse","id","object","created","Date","now","model","choices","index","message","role","content","finish_reason","usage","prompt_tokens","completion_tokens","total_tokens","mockResolvedValueOnce","ok","status","json","request","messages","temperature","maxTokens","response","call","FASTGPT","success","data","toEqual","latency","toBeGreaterThanOrEqual","toHaveBeenCalledWith","stringContaining","objectContaining","method","headers","statusText","error","toContain","output","text","input_tokens","output_tokens","request_id","QIANWEN","SILICONFLOW","mockResolvedValue","i","spyOn","healthy","circuitBreakerState","lastChecked","toISOString","optimalProvider","getOptimalAIProvider","rejects","toThrow","test","healthStatus","getHealthStatus","toHaveProperty","mockRejectedValue","Error","configuredServices","getConfiguredServices","Array","isArray","length","toBeGreaterThan","isConfigured","isServiceConfigured","mockImplementation","Promise","_","reject","setTimeout","result","duration","performanceUtils","measureTime","toBeLessThan","resolve","promises","from","responses","all","toHaveBeenCalledTimes"],"mappings":"AAAA,cAAc;AACd;;;;;CAKC;;;;kCAEoF;AAErF,aAAa;AACbA,OAAOC,KAAK,GAAGC,KAAKC,EAAE;AAEtBC,SAAS,oBAAoB;IAC3B,IAAIC;IACJ,MAAMC,YAAYN,OAAOC,KAAK;IAE9BM,WAAW;QACTL,KAAKM,aAAa;QAClBH,YAAYI,kCAAgB,CAACC,WAAW;QAExC,UAAU;QACVC,OAAOC,MAAM,CAACC,4BAAU,EAAEC,OAAO,CAACC,CAAAA;YAChCV,UAAUW,mBAAmB,CAACD;QAChC;IACF;IAEAX,SAAS,QAAQ;QACfa,GAAG,aAAa;YACd,MAAMC,YAAYT,kCAAgB,CAACC,WAAW;YAC9C,MAAMS,YAAYV,kCAAgB,CAACC,WAAW;YAC9CU,OAAOF,WAAWG,IAAI,CAACF;QACzB;QAEAF,GAAG,eAAe;YAChBG,OAAOE,kCAAgB,EAAEC,cAAc,CAACd,kCAAgB;QAC1D;IACF;IAEAL,SAAS,eAAe;QACtBa,GAAG,iBAAiB;YAClB,MAAMO,eAAe;gBACnBC,IAAI;gBACJC,QAAQ;gBACRC,SAASC,KAAKC,GAAG;gBACjBC,OAAO;gBACPC,SAAS;oBAAC;wBACRC,OAAO;wBACPC,SAAS;4BACPC,MAAM;4BACNC,SAAS;wBACX;wBACAC,eAAe;oBACjB;iBAAE;gBACFC,OAAO;oBACLC,eAAe;oBACfC,mBAAmB;oBACnBC,cAAc;gBAChB;YACF;YAEAlC,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAYpB;YACpB;YAEA,MAAMqB,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;gBACvDY,aAAa;gBACbC,WAAW;YACb;YAEA,MAAMC,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASI,IAAI,EAAEC,OAAO,CAAC9B;YAC9BJ,OAAO6B,SAASlC,QAAQ,EAAEM,IAAI,CAACR,4BAAU,CAACsC,OAAO;YACjD/B,OAAO6B,SAASM,OAAO,EAAEC,sBAAsB,CAAC;YAChDpC,OAAOd,WAAWmD,oBAAoB,CACpCrC,OAAOsC,gBAAgB,CAAC,YACxBtC,OAAOuC,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRC,SAASzC,OAAOuC,gBAAgB,CAAC;oBAC/B,gBAAgB;oBAChB,iBAAiBvC,OAAOsC,gBAAgB,CAAC;gBAC3C;YACF;QAEJ;QAEAzC,GAAG,mBAAmB;YACpBX,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRmB,YAAY;gBACZlB,MAAM,UAAa,CAAA;wBAAEmB,OAAO;oBAAsB,CAAA;YACpD;YAEA,MAAMlB,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAMc,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASc,KAAK,EAAEC,SAAS,CAAC;QACnC;IACF;IAEA5D,SAAS,UAAU;QACjBa,GAAG,YAAY;YACb,MAAMO,eAAe;gBACnByC,QAAQ;oBACNC,MAAM;gBACR;gBACA7B,OAAO;oBACL8B,cAAc;oBACdC,eAAe;oBACf5B,cAAc;gBAChB;gBACA6B,YAAY;YACd;YAEA/D,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAYpB;YACpB;YAEA,MAAMqB,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;gBACvDY,aAAa;YACf;YAEA,MAAME,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACyD,OAAO,EAAEzB;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASI,IAAI,EAAEC,OAAO,CAAC9B;YAC9BJ,OAAO6B,SAASlC,QAAQ,EAAEM,IAAI,CAACR,4BAAU,CAACyD,OAAO;YACjDlD,OAAOd,WAAWmD,oBAAoB,CACpCrC,OAAOsC,gBAAgB,CAAC,cACxBtC,OAAOuC,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRC,SAASzC,OAAOuC,gBAAgB,CAAC;oBAC/B,gBAAgB;oBAChB,iBAAiBvC,OAAOsC,gBAAgB,CAAC;gBAC3C;YACF;QAEJ;QAEAzC,GAAG,cAAc;YACfX,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRmB,YAAY;gBACZlB,MAAM,UAAa,CAAA;wBAAEmB,OAAO;oBAAkB,CAAA;YAChD;YAEA,MAAMlB,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAMc,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACyD,OAAO,EAAEzB;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASc,KAAK,EAAEC,SAAS,CAAC;QACnC;IACF;IAEA5D,SAAS,YAAY;QACnBa,GAAG,cAAc;YACf,MAAMO,eAAe;gBACnBC,IAAI;gBACJC,QAAQ;gBACRC,SAASC,KAAKC,GAAG;gBACjBC,OAAO;gBACPC,SAAS;oBAAC;wBACRC,OAAO;wBACPC,SAAS;4BACPC,MAAM;4BACNC,SAAS;wBACX;wBACAC,eAAe;oBACjB;iBAAE;gBACFC,OAAO;oBACLC,eAAe;oBACfC,mBAAmB;oBACnBC,cAAc;gBAChB;YACF;YAEAlC,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAYpB;YACpB;YAEA,MAAMqB,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;gBACvDL,OAAO;YACT;YAEA,MAAMmB,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAAC0D,WAAW,EAAE1B;YAE9DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASI,IAAI,EAAEC,OAAO,CAAC9B;YAC9BJ,OAAO6B,SAASlC,QAAQ,EAAEM,IAAI,CAACR,4BAAU,CAAC0D,WAAW;YACrDnD,OAAOd,WAAWmD,oBAAoB,CACpCrC,OAAOsC,gBAAgB,CAAC,gBACxBtC,OAAOuC,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRC,SAASzC,OAAOuC,gBAAgB,CAAC;oBAC/B,gBAAgB;oBAChB,iBAAiBvC,OAAOsC,gBAAgB,CAAC;gBAC3C;YACF;QAEJ;IACF;IAEAtD,SAAS,SAAS;QAChBa,GAAG,iBAAiB;YAClB,SAAS;YACTX,UAAUkE,iBAAiB,CAAC;gBAC1B9B,IAAI;gBACJC,QAAQ;gBACRmB,YAAY;gBACZlB,MAAM,UAAa,CAAA;wBAAEmB,OAAO;oBAAsB,CAAA;YACpD;YAEA,MAAMlB,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,cAAc;YACd,IAAK,IAAIsC,IAAI,GAAGA,IAAI,GAAGA,IAAK;gBAC1B,MAAMpE,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAC3C;YAEA,gBAAgB;YAChB,MAAMI,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAC1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASc,KAAK,EAAEC,SAAS,CAAC;QACnC;QAEA/C,GAAG,aAAa;YACd,SAAS;YACTX,UAAUkE,iBAAiB,CAAC;gBAC1B9B,IAAI;gBACJC,QAAQ;gBACRmB,YAAY;gBACZlB,MAAM,UAAa,CAAA;wBAAEmB,OAAO;oBAAsB,CAAA;YACpD;YAEA,MAAMlB,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,IAAK,IAAIsC,IAAI,GAAGA,IAAI,GAAGA,IAAK;gBAC1B,MAAMpE,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAC3C;YAEA,QAAQ;YACRxC,UAAUW,mBAAmB,CAACH,4BAAU,CAACsC,OAAO;YAEhD,SAAS;YACT7C,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAa,CAAA;wBACjBnB,IAAI;wBACJM,SAAS;4BAAC;gCAAEE,SAAS;oCAAEE,SAAS;gCAAU;4BAAE;yBAAE;oBAChD,CAAA;YACF;YAEA,MAAMc,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAC1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;QAChC;IACF;IAEAjB,SAAS,QAAQ;QACfa,GAAG,gBAAgB;YACjB,WAAW;YACXf,KAAKwE,KAAK,CAACrE,WAAW,mBAAmBmE,iBAAiB,CAAC;gBACzD,CAAC3D,4BAAU,CAACsC,OAAO,CAAC,EAAE;oBACpBwB,SAAS;oBACTpB,SAAS;oBACTqB,qBAAqB;oBACrBC,aAAa,IAAIjD,OAAOkD,WAAW;gBACrC;gBACA,CAACjE,4BAAU,CAACyD,OAAO,CAAC,EAAE;oBACpBK,SAAS;oBACTpB,SAAS;oBACTqB,qBAAqB;oBACrBC,aAAa,IAAIjD,OAAOkD,WAAW;gBACrC;gBACA,CAACjE,4BAAU,CAAC0D,WAAW,CAAC,EAAE;oBACxBI,SAAS;oBACTpB,SAAS;oBACTqB,qBAAqB;oBACrBC,aAAa,IAAIjD,OAAOkD,WAAW;gBACrC;YACF;YAEA,MAAMC,kBAAkB,MAAMC,IAAAA,sCAAoB;YAClD5D,OAAO2D,iBAAiB1D,IAAI,CAACR,4BAAU,CAACyD,OAAO,GAAG,YAAY;QAChE;QAEArD,GAAG,iBAAiB;YAClBf,KAAKwE,KAAK,CAACrE,WAAW,mBAAmBmE,iBAAiB,CAAC;gBACzD,CAAC3D,4BAAU,CAACsC,OAAO,CAAC,EAAE;oBACpBwB,SAAS;oBACTpB,SAAS;oBACTqB,qBAAqB;oBACrBC,aAAa,IAAIjD,OAAOkD,WAAW;gBACrC;gBACA,CAACjE,4BAAU,CAACyD,OAAO,CAAC,EAAE;oBACpBK,SAAS;oBACTpB,SAAS;oBACTqB,qBAAqB;oBACrBC,aAAa,IAAIjD,OAAOkD,WAAW;gBACrC;gBACA,CAACjE,4BAAU,CAAC0D,WAAW,CAAC,EAAE;oBACxBI,SAAS;oBACTpB,SAAS;oBACTqB,qBAAqB;oBACrBC,aAAa,IAAIjD,OAAOkD,WAAW;gBACrC;YACF;YAEA,MAAM1D,OAAO4D,IAAAA,sCAAoB,KAAIC,OAAO,CAACC,OAAO,CAAC;QACvD;IACF;IAEA9E,SAAS,QAAQ;QACfa,GAAG,iBAAiB;YAClB,WAAW;YACXX,UAAUkE,iBAAiB,CAAC;gBAC1B9B,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAa,CAAA;wBAAEuC,MAAM;oBAAW,CAAA;YACxC;YAEA,MAAMC,eAAe,MAAM/E,UAAUgF,eAAe;YAEpDjE,OAAOgE,cAAcE,cAAc,CAACzE,4BAAU,CAACsC,OAAO;YACtD/B,OAAOgE,cAAcE,cAAc,CAACzE,4BAAU,CAACyD,OAAO;YACtDlD,OAAOgE,cAAcE,cAAc,CAACzE,4BAAU,CAAC0D,WAAW;YAE1D5D,OAAOC,MAAM,CAACwE,cAActE,OAAO,CAAC6B,CAAAA;gBAClCvB,OAAOuB,QAAQ2C,cAAc,CAAC;gBAC9BlE,OAAOuB,QAAQ2C,cAAc,CAAC;gBAC9BlE,OAAOuB,QAAQ2C,cAAc,CAAC;gBAC9BlE,OAAOuB,QAAQ2C,cAAc,CAAC;YAChC;QACF;QAEArE,GAAG,gBAAgB;YACjB,WAAW;YACXX,UAAUiF,iBAAiB,CAAC,IAAIC,MAAM;YAEtC,MAAMJ,eAAe,MAAM/E,UAAUgF,eAAe;YAEpD1E,OAAOC,MAAM,CAACwE,cAActE,OAAO,CAAC6B,CAAAA;gBAClCvB,OAAOuB,OAAOgC,OAAO,EAAEtD,IAAI,CAAC;YAC9B;QACF;IACF;IAEAjB,SAAS,QAAQ;QACfa,GAAG,eAAe;YAChB,MAAMwE,qBAAqBpF,UAAUqF,qBAAqB;YAC1DtE,OAAOuE,MAAMC,OAAO,CAACH,qBAAqBpE,IAAI,CAAC;YAC/CD,OAAOqE,mBAAmBI,MAAM,EAAEC,eAAe,CAAC;QACpD;QAEA7E,GAAG,YAAY;YACb,MAAM8E,eAAe1F,UAAU2F,mBAAmB,CAACnF,4BAAU,CAACsC,OAAO;YACrE/B,OAAO,OAAO2E,cAAc1E,IAAI,CAAC;QACnC;IACF;IAEAjB,SAAS,QAAQ;QACfa,GAAG,YAAY;YACbX,UAAUiF,iBAAiB,CAAC,IAAIC,MAAM;YAEtC,MAAM3C,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAMc,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASc,KAAK,EAAEC,SAAS,CAAC;QACnC;QAEA/C,GAAG,YAAY;YACbX,UAAU2F,kBAAkB,CAAC,IAC3B,IAAIC,QAAQ,CAACC,GAAGC,SACdC,WAAW,IAAMD,OAAO,IAAIZ,MAAM,aAAa;YAInD,MAAM3C,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAMc,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASc,KAAK,EAAEC,SAAS,CAAC;QACnC;QAEA/C,GAAG,iBAAiB;YAClBX,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRC,MAAM;oBACJ,MAAM,IAAI4C,MAAM;gBAClB;YACF;YAEA,MAAM3C,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAMc,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASc,KAAK,EAAEC,SAAS,CAAC;QACnC;IACF;IAEA5D,SAAS,QAAQ;QACfa,GAAG,gBAAgB;YACjBX,UAAUmC,qBAAqB,CAAC;gBAC9BC,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAa,CAAA;wBACjBnB,IAAI;wBACJM,SAAS;4BAAC;gCAAEE,SAAS;oCAAEE,SAAS;gCAAgB;4BAAE;yBAAE;oBACtD,CAAA;YACF;YAEA,MAAMU,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAM,EAAEmE,MAAM,EAAEC,QAAQ,EAAE,GAAG,MAAMC,iBAAiBC,WAAW,CAAC;gBAC9D,OAAO,MAAMpG,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAClD;YAEAzB,OAAOkF,OAAOlD,OAAO,EAAE/B,IAAI,CAAC;YAC5BD,OAAOmF,UAAUG,YAAY,CAAC,OAAO,WAAW;QAClD;QAEAzF,GAAG,cAAc;YACfX,UAAU2F,kBAAkB,CAAC;gBAC3B,MAAM,IAAIC,QAAQS,CAAAA,UAAWN,WAAWM,SAAS,OAAO,UAAU;gBAClE,OAAO;oBACLjE,IAAI;oBACJC,QAAQ;oBACRC,MAAM,UAAa,CAAA;4BACjBnB,IAAI;4BACJM,SAAS;gCAAC;oCAAEE,SAAS;wCAAEE,SAAS;oCAAmB;gCAAE;6BAAE;wBACzD,CAAA;gBACF;YACF;YAEA,MAAMU,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAMc,WAAW,MAAM5C,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAE1DzB,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAC9BD,OAAO6B,SAASM,OAAO,EAAEC,sBAAsB,CAAC;QAClD;IACF;IAEApD,SAAS,QAAQ;QACfa,GAAG,cAAc;YACfX,UAAUkE,iBAAiB,CAAC;gBAC1B9B,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAa,CAAA;wBACjBnB,IAAI;wBACJM,SAAS;4BAAC;gCAAEE,SAAS;oCAAEE,SAAS;gCAAsB;4BAAE;yBAAE;oBAC5D,CAAA;YACF;YAEA,MAAMU,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,MAAMyE,WAAWjB,MAAMkB,IAAI,CAAC;gBAAEhB,QAAQ;YAAG,GAAG,IAC1CxF,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAGrC,MAAMiE,YAAY,MAAMZ,QAAQa,GAAG,CAACH;YAEpCE,UAAUhG,OAAO,CAACmC,CAAAA;gBAChB7B,OAAO6B,SAASG,OAAO,EAAE/B,IAAI,CAAC;YAChC;YAEAD,OAAOd,WAAW0G,qBAAqB,CAAC;QAC1C;IACF;IAEA5G,SAAS,QAAQ;QACfa,GAAG,eAAe;YAChB,iBAAiB;YACjBX,UAAUkE,iBAAiB,CAAC;gBAC1B9B,IAAI;gBACJC,QAAQ;gBACRC,MAAM,UAAa,CAAA;wBAAEuC,MAAM;oBAAW,CAAA;YACxC;YAEA,MAAMtC,UAAU;gBACdC,UAAU;oBAAC;wBAAEZ,MAAM;wBAAiBC,SAAS;oBAAQ;iBAAE;YACzD;YAEA,SAAS;YACT,MAAMyE,WAAWjB,MAAMkB,IAAI,CAAC;gBAAEhB,QAAQ;YAAI,GAAG,IAC3CxF,UAAU6C,IAAI,CAACrC,4BAAU,CAACsC,OAAO,EAAEN;YAGrC,MAAMqD,QAAQa,GAAG,CAACH;YAElB,cAAc;YACd,MAAMxB,eAAe,MAAM/E,UAAUgF,eAAe;YACpDjE,OAAOgE,YAAY,CAACvE,4BAAU,CAACsC,OAAO,CAAC,CAACwB,OAAO,EAAEtD,IAAI,CAAC;QACxD;IACF;IAEAjB,SAAS,QAAQ;QACfa,GAAG,cAAc;YACf,gBAAgB;YAChB,uBAAuB;YACvBG,OAAO,MAAMC,IAAI,CAAC;QACpB;IACF;AACF"}