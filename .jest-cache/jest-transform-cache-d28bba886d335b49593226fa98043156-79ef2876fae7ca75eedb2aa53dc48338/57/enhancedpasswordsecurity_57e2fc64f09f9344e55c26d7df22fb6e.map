{"version":3,"sources":["E:\\zk-agent\\lib\\auth\\enhanced-password-security.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file lib/auth/enhanced-password-security.ts\r\n * @description 增强密码安全模块 - 解决核查报告中的安全问题\r\n * @author B团队安全架构师\r\n * @lastUpdate 2024-12-19\r\n * @security 生产级密码安全实现\r\n */\r\n\r\nimport bcrypt from 'bcryptjs';\r\nimport crypto from 'crypto';\r\nimport { Logger } from '@/lib/utils/logger';\r\n\r\nconst logger = new Logger('PasswordSecurity');\r\n\r\n// 密码安全配置\r\ninterface PasswordSecurityConfig {\r\n  saltRounds: number;\r\n  minLength: number;\r\n  maxLength: number;\r\n  requireUppercase: boolean;\r\n  requireLowercase: boolean;\r\n  requireNumbers: boolean;\r\n  requireSpecialChars: boolean;\r\n  maxAttempts: number;\r\n  lockoutDuration: number; // 毫秒\r\n  passwordHistory: number; // 记住最近N个密码\r\n}\r\n\r\n// 默认安全配置\r\nconst DEFAULT_CONFIG: PasswordSecurityConfig = {\r\n  saltRounds: 12,\r\n  minLength: 8,\r\n  maxLength: 128,\r\n  requireUppercase: true,\r\n  requireLowercase: true,\r\n  requireNumbers: true,\r\n  requireSpecialChars: true,\r\n  maxAttempts: 5,\r\n  lockoutDuration: 15 * 60 * 1000, // 15分钟\r\n  passwordHistory: 5,\r\n};\r\n\r\n// 密码强度等级\r\nexport enum PasswordStrength {\r\n  VERY_WEAK = 0,\r\n  WEAK = 1,\r\n  FAIR = 2,\r\n  GOOD = 3,\r\n  STRONG = 4,\r\n  VERY_STRONG = 5,\r\n}\r\n\r\n// 密码验证结果\r\nexport interface PasswordValidationResult {\r\n  isValid: boolean;\r\n  strength: PasswordStrength;\r\n  score: number;\r\n  errors: string[];\r\n  warnings: string[];\r\n  suggestions: string[];\r\n}\r\n\r\n// 登录尝试记录\r\ninterface LoginAttempt {\r\n  userId: string;\r\n  ip: string;\r\n  timestamp: number;\r\n  success: boolean;\r\n  userAgent?: string;\r\n}\r\n\r\nexport class EnhancedPasswordSecurity {\r\n  private static instance: EnhancedPasswordSecurity;\r\n  private config: PasswordSecurityConfig;\r\n  private loginAttempts: Map<string, LoginAttempt[]> = new Map();\r\n  private lockedAccounts: Map<string, number> = new Map();\r\n  private commonPasswords: Set<string> = new Set();\r\n\r\n  private constructor(config?: Partial<PasswordSecurityConfig>) {\r\n    this.config = { ...DEFAULT_CONFIG, ...config };\r\n    this.loadCommonPasswords();\r\n    this.startCleanupProcess();\r\n  }\r\n\r\n  public static getInstance(config?: Partial<PasswordSecurityConfig>): EnhancedPasswordSecurity {\r\n    if (!EnhancedPasswordSecurity.instance) {\r\n      EnhancedPasswordSecurity.instance = new EnhancedPasswordSecurity(config);\r\n    }\r\n    return EnhancedPasswordSecurity.instance;\r\n  }\r\n\r\n  /**\r\n   * 加载常见密码列表\r\n   */\r\n  private loadCommonPasswords(): void {\r\n    const commonPasswords = [\r\n      'password', '123456', 'password123', 'admin', 'qwerty',\r\n      'letmein', 'welcome', 'monkey', '1234567890', 'abc123',\r\n      'password1', '123456789', 'welcome123', 'admin123',\r\n      'root', 'toor', 'pass', 'test', 'guest', 'demo',\r\n      'user', 'login', 'changeme', 'secret', 'default',\r\n    ];\r\n\r\n    commonPasswords.forEach(pwd => this.commonPasswords.add(pwd.toLowerCase()));\r\n    logger.info('Common passwords loaded', { count: this.commonPasswords.size });\r\n  }\r\n\r\n  /**\r\n   * 验证密码强度\r\n   */\r\n  validatePassword(password: string, userInfo?: {\r\n    email?: string;\r\n    name?: string;\r\n    username?: string;\r\n  }): PasswordValidationResult {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n    const suggestions: string[] = [];\r\n    let score = 0;\r\n\r\n    // 基础长度检查\r\n    if (password.length < this.config.minLength) {\r\n      errors.push(`密码长度至少需要${this.config.minLength}位`);\r\n    } else if (password.length >= this.config.minLength) {\r\n      score += 1;\r\n    }\r\n\r\n    if (password.length > this.config.maxLength) {\r\n      errors.push(`密码长度不能超过${this.config.maxLength}位`);\r\n    }\r\n\r\n    // 字符类型检查\r\n    const hasLowercase = /[a-z]/.test(password);\r\n    const hasUppercase = /[A-Z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChars = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n    if (this.config.requireLowercase && !hasLowercase) {\r\n      errors.push('密码必须包含小写字母');\r\n    } else if (hasLowercase) {\r\n      score += 1;\r\n    }\r\n\r\n    if (this.config.requireUppercase && !hasUppercase) {\r\n      errors.push('密码必须包含大写字母');\r\n    } else if (hasUppercase) {\r\n      score += 1;\r\n    }\r\n\r\n    if (this.config.requireNumbers && !hasNumbers) {\r\n      errors.push('密码必须包含数字');\r\n    } else if (hasNumbers) {\r\n      score += 1;\r\n    }\r\n\r\n    if (this.config.requireSpecialChars && !hasSpecialChars) {\r\n      errors.push('密码必须包含特殊字符');\r\n    } else if (hasSpecialChars) {\r\n      score += 1;\r\n    }\r\n\r\n    // 常见密码检查\r\n    if (this.commonPasswords.has(password.toLowerCase())) {\r\n      errors.push('不能使用常见密码');\r\n      score = Math.max(0, score - 2);\r\n    }\r\n\r\n    // 个人信息检查\r\n    if (userInfo) {\r\n      const personalInfo = [\r\n        userInfo.email?.split('@')[0],\r\n        userInfo.name,\r\n        userInfo.username,\r\n      ].filter(Boolean);\r\n\r\n      for (const info of personalInfo) {\r\n        if (info && password.toLowerCase().includes(info.toLowerCase())) {\r\n          warnings.push('密码不应包含个人信息');\r\n          score = Math.max(0, score - 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // 重复字符检查\r\n    const repeatedChars = /(.)\\1{2,}/.test(password);\r\n    if (repeatedChars) {\r\n      warnings.push('避免使用重复字符');\r\n      score = Math.max(0, score - 1);\r\n    }\r\n\r\n    // 连续字符检查\r\n    const sequentialChars = this.hasSequentialChars(password);\r\n    if (sequentialChars) {\r\n      warnings.push('避免使用连续字符');\r\n      score = Math.max(0, score - 1);\r\n    }\r\n\r\n    // 长度加分\r\n    if (password.length >= 12) score += 1;\r\n    if (password.length >= 16) score += 1;\r\n\r\n    // 复杂度加分\r\n    const uniqueChars = new Set(password).size;\r\n    if (uniqueChars >= password.length * 0.7) score += 1;\r\n\r\n    // 生成建议\r\n    if (score < 3) {\r\n      suggestions.push('使用更长的密码（12位以上）');\r\n      suggestions.push('混合使用大小写字母、数字和特殊字符');\r\n      suggestions.push('避免使用个人信息和常见密码');\r\n    }\r\n\r\n    const strength = this.calculateStrength(score);\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      strength,\r\n      score,\r\n      errors,\r\n      warnings,\r\n      suggestions,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 安全地哈希密码\r\n   */\r\n  async hashPassword(password: string): Promise<string> {\r\n    try {\r\n      const salt = await bcrypt.genSalt(this.config.saltRounds);\r\n      const hash = await bcrypt.hash(password, salt);\r\n      \r\n      logger.info('Password hashed successfully', {\r\n        saltRounds: this.config.saltRounds,\r\n      });\r\n      \r\n      return hash;\r\n    } catch (error) {\r\n      logger.error('Password hashing failed', { error: error.message });\r\n      throw new Error('密码加密失败');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证密码\r\n   */\r\n  async verifyPassword(password: string, hash: string): Promise<boolean> {\r\n    try {\r\n      const isValid = await bcrypt.compare(password, hash);\r\n      \r\n      logger.debug('Password verification completed', {\r\n        success: isValid,\r\n      });\r\n      \r\n      return isValid;\r\n    } catch (error) {\r\n      logger.error('Password verification failed', { error: error.message });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录登录尝试\r\n   */\r\n  recordLoginAttempt(userId: string, ip: string, success: boolean, userAgent?: string): void {\r\n    const attempt: LoginAttempt = {\r\n      userId,\r\n      ip,\r\n      timestamp: Date.now(),\r\n      success,\r\n      userAgent,\r\n    };\r\n\r\n    const key = `${userId}:${ip}`;\r\n    const attempts = this.loginAttempts.get(key) || [];\r\n    attempts.push(attempt);\r\n\r\n    // 只保留最近的尝试记录\r\n    const recentAttempts = attempts.filter(\r\n      a => Date.now() - a.timestamp < this.config.lockoutDuration * 2\r\n    );\r\n\r\n    this.loginAttempts.set(key, recentAttempts);\r\n\r\n    // 检查是否需要锁定账户\r\n    if (!success) {\r\n      this.checkAndLockAccount(userId, ip);\r\n    }\r\n\r\n    logger.info('Login attempt recorded', {\r\n      userId,\r\n      ip,\r\n      success,\r\n      totalAttempts: recentAttempts.length,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 检查账户是否被锁定\r\n   */\r\n  isAccountLocked(userId: string, ip: string): boolean {\r\n    const key = `${userId}:${ip}`;\r\n    const lockTime = this.lockedAccounts.get(key);\r\n    \r\n    if (!lockTime) return false;\r\n    \r\n    if (Date.now() - lockTime > this.config.lockoutDuration) {\r\n      this.lockedAccounts.delete(key);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 获取账户锁定剩余时间\r\n   */\r\n  getLockoutTimeRemaining(userId: string, ip: string): number {\r\n    const key = `${userId}:${ip}`;\r\n    const lockTime = this.lockedAccounts.get(key);\r\n    \r\n    if (!lockTime) return 0;\r\n    \r\n    const remaining = this.config.lockoutDuration - (Date.now() - lockTime);\r\n    return Math.max(0, remaining);\r\n  }\r\n\r\n  /**\r\n   * 手动解锁账户\r\n   */\r\n  unlockAccount(userId: string, ip: string): void {\r\n    const key = `${userId}:${ip}`;\r\n    this.lockedAccounts.delete(key);\r\n    this.loginAttempts.delete(key);\r\n    \r\n    logger.info('Account manually unlocked', { userId, ip });\r\n  }\r\n\r\n  /**\r\n   * 生成安全的随机密码\r\n   */\r\n  generateSecurePassword(length: number = 16): string {\r\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const numbers = '0123456789';\r\n    const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\r\n\r\n    const allChars = lowercase + uppercase + numbers + symbols;\r\n    let password = '';\r\n\r\n    // 确保至少包含每种字符类型\r\n    password += this.getRandomChar(lowercase);\r\n    password += this.getRandomChar(uppercase);\r\n    password += this.getRandomChar(numbers);\r\n    password += this.getRandomChar(symbols);\r\n\r\n    // 填充剩余长度\r\n    for (let i = 4; i < length; i++) {\r\n      password += this.getRandomChar(allChars);\r\n    }\r\n\r\n    // 打乱字符顺序\r\n    return password.split('').sort(() => Math.random() - 0.5).join('');\r\n  }\r\n\r\n  /**\r\n   * 检查密码是否在历史记录中\r\n   */\r\n  async isPasswordInHistory(newPasswordHash: string, passwordHistory: string[]): Promise<boolean> {\r\n    for (const oldHash of passwordHistory) {\r\n      // 注意：这里不能直接比较哈希值，因为每次哈希都会产生不同的结果\r\n      // 实际实现中需要存储原始密码的哈希或使用其他方法\r\n      // 这里仅作为示例\r\n      if (newPasswordHash === oldHash) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：检查连续字符\r\n   */\r\n  private hasSequentialChars(password: string): boolean {\r\n    const sequences = [\r\n      'abcdefghijklmnopqrstuvwxyz',\r\n      '0123456789',\r\n      'qwertyuiopasdfghjklzxcvbnm',\r\n    ];\r\n\r\n    for (const seq of sequences) {\r\n      for (let i = 0; i <= seq.length - 3; i++) {\r\n        const subseq = seq.substring(i, i + 3);\r\n        if (password.toLowerCase().includes(subseq)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：计算密码强度\r\n   */\r\n  private calculateStrength(score: number): PasswordStrength {\r\n    if (score <= 1) return PasswordStrength.VERY_WEAK;\r\n    if (score <= 2) return PasswordStrength.WEAK;\r\n    if (score <= 3) return PasswordStrength.FAIR;\r\n    if (score <= 4) return PasswordStrength.GOOD;\r\n    if (score <= 5) return PasswordStrength.STRONG;\r\n    return PasswordStrength.VERY_STRONG;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：检查并锁定账户\r\n   */\r\n  private checkAndLockAccount(userId: string, ip: string): void {\r\n    const key = `${userId}:${ip}`;\r\n    const attempts = this.loginAttempts.get(key) || [];\r\n    \r\n    const recentFailedAttempts = attempts.filter(\r\n      a => !a.success && Date.now() - a.timestamp < this.config.lockoutDuration\r\n    );\r\n\r\n    if (recentFailedAttempts.length >= this.config.maxAttempts) {\r\n      this.lockedAccounts.set(key, Date.now());\r\n      \r\n      logger.warn('Account locked due to failed attempts', {\r\n        userId,\r\n        ip,\r\n        attempts: recentFailedAttempts.length,\r\n        lockoutDuration: this.config.lockoutDuration,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 私有方法：获取随机字符\r\n   */\r\n  private getRandomChar(chars: string): string {\r\n    return chars[crypto.randomInt(0, chars.length)];\r\n  }\r\n\r\n  /**\r\n   * 私有方法：启动清理进程\r\n   */\r\n  private startCleanupProcess(): void {\r\n    setInterval(() => {\r\n      this.cleanupExpiredData();\r\n    }, 60000); // 每分钟清理一次\r\n\r\n    logger.info('Password security cleanup process started');\r\n  }\r\n\r\n  /**\r\n   * 私有方法：清理过期数据\r\n   */\r\n  private cleanupExpiredData(): void {\r\n    const now = Date.now();\r\n    let cleanedAttempts = 0;\r\n    let cleanedLocks = 0;\r\n\r\n    // 清理过期的登录尝试记录\r\n    for (const [key, attempts] of this.loginAttempts.entries()) {\r\n      const validAttempts = attempts.filter(\r\n        a => now - a.timestamp < this.config.lockoutDuration * 2\r\n      );\r\n      \r\n      if (validAttempts.length === 0) {\r\n        this.loginAttempts.delete(key);\r\n        cleanedAttempts++;\r\n      } else if (validAttempts.length < attempts.length) {\r\n        this.loginAttempts.set(key, validAttempts);\r\n      }\r\n    }\r\n\r\n    // 清理过期的账户锁定\r\n    for (const [key, lockTime] of this.lockedAccounts.entries()) {\r\n      if (now - lockTime > this.config.lockoutDuration) {\r\n        this.lockedAccounts.delete(key);\r\n        cleanedLocks++;\r\n      }\r\n    }\r\n\r\n    if (cleanedAttempts > 0 || cleanedLocks > 0) {\r\n      logger.debug('Expired security data cleaned', {\r\n        cleanedAttempts,\r\n        cleanedLocks,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取安全统计信息\r\n   */\r\n  getSecurityStats(): {\r\n    totalAttempts: number;\r\n    lockedAccounts: number;\r\n    config: PasswordSecurityConfig;\r\n  } {\r\n    return {\r\n      totalAttempts: Array.from(this.loginAttempts.values())\r\n        .reduce((sum, attempts) => sum + attempts.length, 0),\r\n      lockedAccounts: this.lockedAccounts.size,\r\n      config: { ...this.config },\r\n    };\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const enhancedPasswordSecurity = EnhancedPasswordSecurity.getInstance();\r\n\r\n// 导出便捷方法\r\nexport const validatePassword = enhancedPasswordSecurity.validatePassword.bind(enhancedPasswordSecurity);\r\nexport const hashPassword = enhancedPasswordSecurity.hashPassword.bind(enhancedPasswordSecurity);\r\nexport const verifyPassword = enhancedPasswordSecurity.verifyPassword.bind(enhancedPasswordSecurity);\r\nexport const generateSecurePassword = enhancedPasswordSecurity.generateSecurePassword.bind(enhancedPasswordSecurity);\r\nexport const recordLoginAttempt = enhancedPasswordSecurity.recordLoginAttempt.bind(enhancedPasswordSecurity);\r\nexport const isAccountLocked = enhancedPasswordSecurity.isAccountLocked.bind(enhancedPasswordSecurity); "],"names":["EnhancedPasswordSecurity","PasswordStrength","enhancedPasswordSecurity","generateSecurePassword","hashPassword","isAccountLocked","recordLoginAttempt","validatePassword","verifyPassword","logger","Logger","DEFAULT_CONFIG","saltRounds","minLength","maxLength","requireUppercase","requireLowercase","requireNumbers","requireSpecialChars","maxAttempts","lockoutDuration","passwordHistory","config","loginAttempts","Map","lockedAccounts","commonPasswords","Set","loadCommonPasswords","startCleanupProcess","getInstance","instance","forEach","pwd","add","toLowerCase","info","count","size","password","userInfo","errors","warnings","suggestions","score","length","push","hasLowercase","test","hasUppercase","hasNumbers","hasSpecialChars","has","Math","max","personalInfo","email","split","name","username","filter","Boolean","includes","repeatedChars","sequentialChars","hasSequentialChars","uniqueChars","strength","calculateStrength","isValid","salt","bcrypt","genSalt","hash","error","message","Error","compare","debug","success","userId","ip","userAgent","attempt","timestamp","Date","now","key","attempts","get","recentAttempts","a","set","checkAndLockAccount","totalAttempts","lockTime","delete","getLockoutTimeRemaining","remaining","unlockAccount","lowercase","uppercase","numbers","symbols","allChars","getRandomChar","i","sort","random","join","isPasswordInHistory","newPasswordHash","oldHash","sequences","seq","subseq","substring","recentFailedAttempts","warn","chars","crypto","randomInt","setInterval","cleanupExpiredData","cleanedAttempts","cleanedLocks","entries","validAttempts","getSecurityStats","Array","from","values","reduce","sum","bind"],"mappings":"AAAA,cAAc;AACd;;;;;;CAMC;;;;;;;;;;;IAiEYA,wBAAwB;eAAxBA;;IA5BDC,gBAAgB;eAAhBA;;IAqdCC,wBAAwB;eAAxBA;;IAMAC,sBAAsB;eAAtBA;;IAFAC,YAAY;eAAZA;;IAIAC,eAAe;eAAfA;;IADAC,kBAAkB;eAAlBA;;IAJAC,gBAAgB;eAAhBA;;IAEAC,cAAc;eAAdA;;;iEA7fM;+DACA;wBACI;;;;;;AAEvB,MAAMC,SAAS,IAAIC,cAAM,CAAC;AAgB1B,SAAS;AACT,MAAMC,iBAAyC;IAC7CC,YAAY;IACZC,WAAW;IACXC,WAAW;IACXC,kBAAkB;IAClBC,kBAAkB;IAClBC,gBAAgB;IAChBC,qBAAqB;IACrBC,aAAa;IACbC,iBAAiB,KAAK,KAAK;IAC3BC,iBAAiB;AACnB;AAGO,IAAA,AAAKpB,0CAAAA;;;;;;;WAAAA;;AA4BL,MAAMD;IAOX,YAAoBsB,MAAwC,CAAE;aAJtDC,gBAA6C,IAAIC;aACjDC,iBAAsC,IAAID;aAC1CE,kBAA+B,IAAIC;QAGzC,IAAI,CAACL,MAAM,GAAG;YAAE,GAAGX,cAAc;YAAE,GAAGW,MAAM;QAAC;QAC7C,IAAI,CAACM,mBAAmB;QACxB,IAAI,CAACC,mBAAmB;IAC1B;IAEA,OAAcC,YAAYR,MAAwC,EAA4B;QAC5F,IAAI,CAACtB,yBAAyB+B,QAAQ,EAAE;YACtC/B,yBAAyB+B,QAAQ,GAAG,IAAI/B,yBAAyBsB;QACnE;QACA,OAAOtB,yBAAyB+B,QAAQ;IAC1C;IAEA;;GAEC,GACD,AAAQH,sBAA4B;QAClC,MAAMF,kBAAkB;YACtB;YAAY;YAAU;YAAe;YAAS;YAC9C;YAAW;YAAW;YAAU;YAAc;YAC9C;YAAa;YAAa;YAAc;YACxC;YAAQ;YAAQ;YAAQ;YAAQ;YAAS;YACzC;YAAQ;YAAS;YAAY;YAAU;SACxC;QAEDA,gBAAgBM,OAAO,CAACC,CAAAA,MAAO,IAAI,CAACP,eAAe,CAACQ,GAAG,CAACD,IAAIE,WAAW;QACvE1B,OAAO2B,IAAI,CAAC,2BAA2B;YAAEC,OAAO,IAAI,CAACX,eAAe,CAACY,IAAI;QAAC;IAC5E;IAEA;;GAEC,GACD/B,iBAAiBgC,QAAgB,EAAEC,QAIlC,EAA4B;QAC3B,MAAMC,SAAmB,EAAE;QAC3B,MAAMC,WAAqB,EAAE;QAC7B,MAAMC,cAAwB,EAAE;QAChC,IAAIC,QAAQ;QAEZ,SAAS;QACT,IAAIL,SAASM,MAAM,GAAG,IAAI,CAACvB,MAAM,CAACT,SAAS,EAAE;YAC3C4B,OAAOK,IAAI,CAAC,CAAC,QAAQ,EAAE,IAAI,CAACxB,MAAM,CAACT,SAAS,CAAC,CAAC,CAAC;QACjD,OAAO,IAAI0B,SAASM,MAAM,IAAI,IAAI,CAACvB,MAAM,CAACT,SAAS,EAAE;YACnD+B,SAAS;QACX;QAEA,IAAIL,SAASM,MAAM,GAAG,IAAI,CAACvB,MAAM,CAACR,SAAS,EAAE;YAC3C2B,OAAOK,IAAI,CAAC,CAAC,QAAQ,EAAE,IAAI,CAACxB,MAAM,CAACR,SAAS,CAAC,CAAC,CAAC;QACjD;QAEA,SAAS;QACT,MAAMiC,eAAe,QAAQC,IAAI,CAACT;QAClC,MAAMU,eAAe,QAAQD,IAAI,CAACT;QAClC,MAAMW,aAAa,KAAKF,IAAI,CAACT;QAC7B,MAAMY,kBAAkB,yBAAyBH,IAAI,CAACT;QAEtD,IAAI,IAAI,CAACjB,MAAM,CAACN,gBAAgB,IAAI,CAAC+B,cAAc;YACjDN,OAAOK,IAAI,CAAC;QACd,OAAO,IAAIC,cAAc;YACvBH,SAAS;QACX;QAEA,IAAI,IAAI,CAACtB,MAAM,CAACP,gBAAgB,IAAI,CAACkC,cAAc;YACjDR,OAAOK,IAAI,CAAC;QACd,OAAO,IAAIG,cAAc;YACvBL,SAAS;QACX;QAEA,IAAI,IAAI,CAACtB,MAAM,CAACL,cAAc,IAAI,CAACiC,YAAY;YAC7CT,OAAOK,IAAI,CAAC;QACd,OAAO,IAAII,YAAY;YACrBN,SAAS;QACX;QAEA,IAAI,IAAI,CAACtB,MAAM,CAACJ,mBAAmB,IAAI,CAACiC,iBAAiB;YACvDV,OAAOK,IAAI,CAAC;QACd,OAAO,IAAIK,iBAAiB;YAC1BP,SAAS;QACX;QAEA,SAAS;QACT,IAAI,IAAI,CAAClB,eAAe,CAAC0B,GAAG,CAACb,SAASJ,WAAW,KAAK;YACpDM,OAAOK,IAAI,CAAC;YACZF,QAAQS,KAAKC,GAAG,CAAC,GAAGV,QAAQ;QAC9B;QAEA,SAAS;QACT,IAAIJ,UAAU;YACZ,MAAMe,eAAe;gBACnBf,SAASgB,KAAK,EAAEC,MAAM,IAAI,CAAC,EAAE;gBAC7BjB,SAASkB,IAAI;gBACblB,SAASmB,QAAQ;aAClB,CAACC,MAAM,CAACC;YAET,KAAK,MAAMzB,QAAQmB,aAAc;gBAC/B,IAAInB,QAAQG,SAASJ,WAAW,GAAG2B,QAAQ,CAAC1B,KAAKD,WAAW,KAAK;oBAC/DO,SAASI,IAAI,CAAC;oBACdF,QAAQS,KAAKC,GAAG,CAAC,GAAGV,QAAQ;oBAC5B;gBACF;YACF;QACF;QAEA,SAAS;QACT,MAAMmB,gBAAgB,YAAYf,IAAI,CAACT;QACvC,IAAIwB,eAAe;YACjBrB,SAASI,IAAI,CAAC;YACdF,QAAQS,KAAKC,GAAG,CAAC,GAAGV,QAAQ;QAC9B;QAEA,SAAS;QACT,MAAMoB,kBAAkB,IAAI,CAACC,kBAAkB,CAAC1B;QAChD,IAAIyB,iBAAiB;YACnBtB,SAASI,IAAI,CAAC;YACdF,QAAQS,KAAKC,GAAG,CAAC,GAAGV,QAAQ;QAC9B;QAEA,OAAO;QACP,IAAIL,SAASM,MAAM,IAAI,IAAID,SAAS;QACpC,IAAIL,SAASM,MAAM,IAAI,IAAID,SAAS;QAEpC,QAAQ;QACR,MAAMsB,cAAc,IAAIvC,IAAIY,UAAUD,IAAI;QAC1C,IAAI4B,eAAe3B,SAASM,MAAM,GAAG,KAAKD,SAAS;QAEnD,OAAO;QACP,IAAIA,QAAQ,GAAG;YACbD,YAAYG,IAAI,CAAC;YACjBH,YAAYG,IAAI,CAAC;YACjBH,YAAYG,IAAI,CAAC;QACnB;QAEA,MAAMqB,WAAW,IAAI,CAACC,iBAAiB,CAACxB;QAExC,OAAO;YACLyB,SAAS5B,OAAOI,MAAM,KAAK;YAC3BsB;YACAvB;YACAH;YACAC;YACAC;QACF;IACF;IAEA;;GAEC,GACD,MAAMvC,aAAamC,QAAgB,EAAmB;QACpD,IAAI;YACF,MAAM+B,OAAO,MAAMC,iBAAM,CAACC,OAAO,CAAC,IAAI,CAAClD,MAAM,CAACV,UAAU;YACxD,MAAM6D,OAAO,MAAMF,iBAAM,CAACE,IAAI,CAAClC,UAAU+B;YAEzC7D,OAAO2B,IAAI,CAAC,gCAAgC;gBAC1CxB,YAAY,IAAI,CAACU,MAAM,CAACV,UAAU;YACpC;YAEA,OAAO6D;QACT,EAAE,OAAOC,OAAO;YACdjE,OAAOiE,KAAK,CAAC,2BAA2B;gBAAEA,OAAOA,MAAMC,OAAO;YAAC;YAC/D,MAAM,IAAIC,MAAM;QAClB;IACF;IAEA;;GAEC,GACD,MAAMpE,eAAe+B,QAAgB,EAAEkC,IAAY,EAAoB;QACrE,IAAI;YACF,MAAMJ,UAAU,MAAME,iBAAM,CAACM,OAAO,CAACtC,UAAUkC;YAE/ChE,OAAOqE,KAAK,CAAC,mCAAmC;gBAC9CC,SAASV;YACX;YAEA,OAAOA;QACT,EAAE,OAAOK,OAAO;YACdjE,OAAOiE,KAAK,CAAC,gCAAgC;gBAAEA,OAAOA,MAAMC,OAAO;YAAC;YACpE,OAAO;QACT;IACF;IAEA;;GAEC,GACDrE,mBAAmB0E,MAAc,EAAEC,EAAU,EAAEF,OAAgB,EAAEG,SAAkB,EAAQ;QACzF,MAAMC,UAAwB;YAC5BH;YACAC;YACAG,WAAWC,KAAKC,GAAG;YACnBP;YACAG;QACF;QAEA,MAAMK,MAAM,GAAGP,OAAO,CAAC,EAAEC,IAAI;QAC7B,MAAMO,WAAW,IAAI,CAACjE,aAAa,CAACkE,GAAG,CAACF,QAAQ,EAAE;QAClDC,SAAS1C,IAAI,CAACqC;QAEd,aAAa;QACb,MAAMO,iBAAiBF,SAAS5B,MAAM,CACpC+B,CAAAA,IAAKN,KAAKC,GAAG,KAAKK,EAAEP,SAAS,GAAG,IAAI,CAAC9D,MAAM,CAACF,eAAe,GAAG;QAGhE,IAAI,CAACG,aAAa,CAACqE,GAAG,CAACL,KAAKG;QAE5B,aAAa;QACb,IAAI,CAACX,SAAS;YACZ,IAAI,CAACc,mBAAmB,CAACb,QAAQC;QACnC;QAEAxE,OAAO2B,IAAI,CAAC,0BAA0B;YACpC4C;YACAC;YACAF;YACAe,eAAeJ,eAAe7C,MAAM;QACtC;IACF;IAEA;;GAEC,GACDxC,gBAAgB2E,MAAc,EAAEC,EAAU,EAAW;QACnD,MAAMM,MAAM,GAAGP,OAAO,CAAC,EAAEC,IAAI;QAC7B,MAAMc,WAAW,IAAI,CAACtE,cAAc,CAACgE,GAAG,CAACF;QAEzC,IAAI,CAACQ,UAAU,OAAO;QAEtB,IAAIV,KAAKC,GAAG,KAAKS,WAAW,IAAI,CAACzE,MAAM,CAACF,eAAe,EAAE;YACvD,IAAI,CAACK,cAAc,CAACuE,MAAM,CAACT;YAC3B,OAAO;QACT;QAEA,OAAO;IACT;IAEA;;GAEC,GACDU,wBAAwBjB,MAAc,EAAEC,EAAU,EAAU;QAC1D,MAAMM,MAAM,GAAGP,OAAO,CAAC,EAAEC,IAAI;QAC7B,MAAMc,WAAW,IAAI,CAACtE,cAAc,CAACgE,GAAG,CAACF;QAEzC,IAAI,CAACQ,UAAU,OAAO;QAEtB,MAAMG,YAAY,IAAI,CAAC5E,MAAM,CAACF,eAAe,GAAIiE,CAAAA,KAAKC,GAAG,KAAKS,QAAO;QACrE,OAAO1C,KAAKC,GAAG,CAAC,GAAG4C;IACrB;IAEA;;GAEC,GACDC,cAAcnB,MAAc,EAAEC,EAAU,EAAQ;QAC9C,MAAMM,MAAM,GAAGP,OAAO,CAAC,EAAEC,IAAI;QAC7B,IAAI,CAACxD,cAAc,CAACuE,MAAM,CAACT;QAC3B,IAAI,CAAChE,aAAa,CAACyE,MAAM,CAACT;QAE1B9E,OAAO2B,IAAI,CAAC,6BAA6B;YAAE4C;YAAQC;QAAG;IACxD;IAEA;;GAEC,GACD9E,uBAAuB0C,SAAiB,EAAE,EAAU;QAClD,MAAMuD,YAAY;QAClB,MAAMC,YAAY;QAClB,MAAMC,UAAU;QAChB,MAAMC,UAAU;QAEhB,MAAMC,WAAWJ,YAAYC,YAAYC,UAAUC;QACnD,IAAIhE,WAAW;QAEf,eAAe;QACfA,YAAY,IAAI,CAACkE,aAAa,CAACL;QAC/B7D,YAAY,IAAI,CAACkE,aAAa,CAACJ;QAC/B9D,YAAY,IAAI,CAACkE,aAAa,CAACH;QAC/B/D,YAAY,IAAI,CAACkE,aAAa,CAACF;QAE/B,SAAS;QACT,IAAK,IAAIG,IAAI,GAAGA,IAAI7D,QAAQ6D,IAAK;YAC/BnE,YAAY,IAAI,CAACkE,aAAa,CAACD;QACjC;QAEA,SAAS;QACT,OAAOjE,SAASkB,KAAK,CAAC,IAAIkD,IAAI,CAAC,IAAMtD,KAAKuD,MAAM,KAAK,KAAKC,IAAI,CAAC;IACjE;IAEA;;GAEC,GACD,MAAMC,oBAAoBC,eAAuB,EAAE1F,eAAyB,EAAoB;QAC9F,KAAK,MAAM2F,WAAW3F,gBAAiB;YACrC,iCAAiC;YACjC,0BAA0B;YAC1B,UAAU;YACV,IAAI0F,oBAAoBC,SAAS;gBAC/B,OAAO;YACT;QACF;QACA,OAAO;IACT;IAEA;;GAEC,GACD,AAAQ/C,mBAAmB1B,QAAgB,EAAW;QACpD,MAAM0E,YAAY;YAChB;YACA;YACA;SACD;QAED,KAAK,MAAMC,OAAOD,UAAW;YAC3B,IAAK,IAAIP,IAAI,GAAGA,KAAKQ,IAAIrE,MAAM,GAAG,GAAG6D,IAAK;gBACxC,MAAMS,SAASD,IAAIE,SAAS,CAACV,GAAGA,IAAI;gBACpC,IAAInE,SAASJ,WAAW,GAAG2B,QAAQ,CAACqD,SAAS;oBAC3C,OAAO;gBACT;YACF;QACF;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,AAAQ/C,kBAAkBxB,KAAa,EAAoB;QACzD,IAAIA,SAAS,GAAG;QAChB,IAAIA,SAAS,GAAG;QAChB,IAAIA,SAAS,GAAG;QAChB,IAAIA,SAAS,GAAG;QAChB,IAAIA,SAAS,GAAG;QAChB;IACF;IAEA;;GAEC,GACD,AAAQiD,oBAAoBb,MAAc,EAAEC,EAAU,EAAQ;QAC5D,MAAMM,MAAM,GAAGP,OAAO,CAAC,EAAEC,IAAI;QAC7B,MAAMO,WAAW,IAAI,CAACjE,aAAa,CAACkE,GAAG,CAACF,QAAQ,EAAE;QAElD,MAAM8B,uBAAuB7B,SAAS5B,MAAM,CAC1C+B,CAAAA,IAAK,CAACA,EAAEZ,OAAO,IAAIM,KAAKC,GAAG,KAAKK,EAAEP,SAAS,GAAG,IAAI,CAAC9D,MAAM,CAACF,eAAe;QAG3E,IAAIiG,qBAAqBxE,MAAM,IAAI,IAAI,CAACvB,MAAM,CAACH,WAAW,EAAE;YAC1D,IAAI,CAACM,cAAc,CAACmE,GAAG,CAACL,KAAKF,KAAKC,GAAG;YAErC7E,OAAO6G,IAAI,CAAC,yCAAyC;gBACnDtC;gBACAC;gBACAO,UAAU6B,qBAAqBxE,MAAM;gBACrCzB,iBAAiB,IAAI,CAACE,MAAM,CAACF,eAAe;YAC9C;QACF;IACF;IAEA;;GAEC,GACD,AAAQqF,cAAcc,KAAa,EAAU;QAC3C,OAAOA,KAAK,CAACC,eAAM,CAACC,SAAS,CAAC,GAAGF,MAAM1E,MAAM,EAAE;IACjD;IAEA;;GAEC,GACD,AAAQhB,sBAA4B;QAClC6F,YAAY;YACV,IAAI,CAACC,kBAAkB;QACzB,GAAG,QAAQ,UAAU;QAErBlH,OAAO2B,IAAI,CAAC;IACd;IAEA;;GAEC,GACD,AAAQuF,qBAA2B;QACjC,MAAMrC,MAAMD,KAAKC,GAAG;QACpB,IAAIsC,kBAAkB;QACtB,IAAIC,eAAe;QAEnB,cAAc;QACd,KAAK,MAAM,CAACtC,KAAKC,SAAS,IAAI,IAAI,CAACjE,aAAa,CAACuG,OAAO,GAAI;YAC1D,MAAMC,gBAAgBvC,SAAS5B,MAAM,CACnC+B,CAAAA,IAAKL,MAAMK,EAAEP,SAAS,GAAG,IAAI,CAAC9D,MAAM,CAACF,eAAe,GAAG;YAGzD,IAAI2G,cAAclF,MAAM,KAAK,GAAG;gBAC9B,IAAI,CAACtB,aAAa,CAACyE,MAAM,CAACT;gBAC1BqC;YACF,OAAO,IAAIG,cAAclF,MAAM,GAAG2C,SAAS3C,MAAM,EAAE;gBACjD,IAAI,CAACtB,aAAa,CAACqE,GAAG,CAACL,KAAKwC;YAC9B;QACF;QAEA,YAAY;QACZ,KAAK,MAAM,CAACxC,KAAKQ,SAAS,IAAI,IAAI,CAACtE,cAAc,CAACqG,OAAO,GAAI;YAC3D,IAAIxC,MAAMS,WAAW,IAAI,CAACzE,MAAM,CAACF,eAAe,EAAE;gBAChD,IAAI,CAACK,cAAc,CAACuE,MAAM,CAACT;gBAC3BsC;YACF;QACF;QAEA,IAAID,kBAAkB,KAAKC,eAAe,GAAG;YAC3CpH,OAAOqE,KAAK,CAAC,iCAAiC;gBAC5C8C;gBACAC;YACF;QACF;IACF;IAEA;;GAEC,GACDG,mBAIE;QACA,OAAO;YACLlC,eAAemC,MAAMC,IAAI,CAAC,IAAI,CAAC3G,aAAa,CAAC4G,MAAM,IAChDC,MAAM,CAAC,CAACC,KAAK7C,WAAa6C,MAAM7C,SAAS3C,MAAM,EAAE;YACpDpB,gBAAgB,IAAI,CAACA,cAAc,CAACa,IAAI;YACxChB,QAAQ;gBAAE,GAAG,IAAI,CAACA,MAAM;YAAC;QAC3B;IACF;AACF;AAGO,MAAMpB,2BAA2BF,yBAAyB8B,WAAW;AAGrE,MAAMvB,mBAAmBL,yBAAyBK,gBAAgB,CAAC+H,IAAI,CAACpI;AACxE,MAAME,eAAeF,yBAAyBE,YAAY,CAACkI,IAAI,CAACpI;AAChE,MAAMM,iBAAiBN,yBAAyBM,cAAc,CAAC8H,IAAI,CAACpI;AACpE,MAAMC,yBAAyBD,yBAAyBC,sBAAsB,CAACmI,IAAI,CAACpI;AACpF,MAAMI,qBAAqBJ,yBAAyBI,kBAAkB,CAACgI,IAAI,CAACpI;AAC5E,MAAMG,kBAAkBH,yBAAyBG,eAAe,CAACiI,IAAI,CAACpI"}