{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\health.test.ts"],"sourcesContent":["/**\n * 健康检查API路由错误处理测试\n * 测试健康检查端点的各种错误场景和恢复机制\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET } from '@/app/api/health/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\nimport { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/database/connection', () => ({\n  testConnection: jest.fn(),\n  getConnectionStatus: jest.fn()\n}));\n\njest.mock('../../../lib/cache/redis', () => ({\n  ping: jest.fn(),\n  isConnected: jest.fn()\n}));\n\njest.mock('../../../lib/api/fastgpt', () => ({\n  testConnection: jest.fn(),\n  getHealthStatus: jest.fn()\n}));\n\njest.mock('fs/promises', () => ({\n  access: jest.fn(),\n  stat: jest.fn()\n}));\n\ndescribe('Health Check API Error Handling', () => {\n  let mockRequest: NextRequest;\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    mockRequest = new NextRequest('http://localhost:3000/api/health');\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('Database Connection Errors', () => {\n    it('should handle database connection timeout', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Connection timeout'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('SERVICE_UNAVAILABLE');\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Connection timeout');\n    });\n\n    it('should handle database authentication failure', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Authentication failed'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Authentication failed');\n    });\n\n    it('should handle database connection pool exhaustion', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Connection pool exhausted'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Connection pool exhausted');\n    });\n  });\n\n  describe('Redis Connection Errors', () => {\n    it('should handle Redis connection refused', async () => {\n      const { ping } = require('../../../lib/cache/redis');\n      ping.mockRejectedValue(new Error('Connection refused'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.redis.error).toContain('Connection refused');\n    });\n\n    it('should handle Redis authentication error', async () => {\n      const { ping } = require('../../../lib/cache/redis');\n      ping.mockRejectedValue(new Error('NOAUTH Authentication required'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.redis.error).toContain('NOAUTH Authentication required');\n    });\n\n    it('should handle Redis memory limit exceeded', async () => {\n      const { ping } = require('../../../lib/cache/redis');\n      ping.mockRejectedValue(new Error('OOM command not allowed when used memory > maxmemory'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.redis.error).toContain('OOM command not allowed');\n    });\n  });\n\n  describe('FastGPT Service Errors', () => {\n    it('should handle FastGPT API key invalid', async () => {\n      const { testConnection } = require('../../../lib/api/fastgpt');\n      testConnection.mockRejectedValue(new Error('Invalid API key'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.fastgpt.status).toBe('down');\n      expect(data.services.fastgpt.error).toContain('Invalid API key');\n    });\n\n    it('should handle FastGPT service unavailable', async () => {\n      const { testConnection } = require('../../../lib/api/fastgpt');\n      testConnection.mockRejectedValue(new Error('Service temporarily unavailable'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.fastgpt.status).toBe('down');\n      expect(data.services.fastgpt.error).toContain('Service temporarily unavailable');\n    });\n\n    it('should handle FastGPT rate limit exceeded', async () => {\n      const { testConnection } = require('../../../lib/api/fastgpt');\n      testConnection.mockRejectedValue(new Error('Rate limit exceeded'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.fastgpt.status).toBe('down');\n      expect(data.services.fastgpt.error).toContain('Rate limit exceeded');\n    });\n  });\n\n  describe('File System Errors', () => {\n    it('should handle file system permission denied', async () => {\n      const fs = require('fs/promises');\n      fs.access.mockRejectedValue(new Error('EACCES: permission denied'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.filesystem.status).toBe('down');\n      expect(data.services.filesystem.error).toContain('EACCES: permission denied');\n    });\n\n    it('should handle file system disk full', async () => {\n      const fs = require('fs/promises');\n      fs.access.mockRejectedValue(new Error('ENOSPC: no space left on device'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.filesystem.status).toBe('down');\n      expect(data.services.filesystem.error).toContain('ENOSPC: no space left on device');\n    });\n\n    it('should handle file system path not found', async () => {\n      const fs = require('fs/promises');\n      fs.access.mockRejectedValue(new Error('ENOENT: no such file or directory'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.filesystem.status).toBe('down');\n      expect(data.services.filesystem.error).toContain('ENOENT: no such file or directory');\n    });\n  });\n\n  describe('Partial Service Failures', () => {\n    it('should handle mixed service status', async () => {\n      const { testConnection: dbTest } = require('../../../lib/database/connection');\n      const { ping } = require('../../../lib/cache/redis');\n      const { testConnection: fastgptTest } = require('../../../lib/api/fastgpt');\n      const fs = require('fs/promises');\n\n      // Database OK, Redis fails, FastGPT OK, FileSystem OK\n      dbTest.mockResolvedValue(true);\n      ping.mockRejectedValue(new Error('Connection refused'));\n      fastgptTest.mockResolvedValue(true);\n      fs.access.mockResolvedValue(undefined);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.services.database.status).toBe('up');\n      expect(data.services.redis.status).toBe('down');\n      expect(data.services.fastgpt.status).toBe('up');\n      expect(data.services.filesystem.status).toBe('up');\n    });\n\n    it('should return healthy when all services are up', async () => {\n      const { testConnection: dbTest } = require('../../../lib/database/connection');\n      const { ping } = require('../../../lib/cache/redis');\n      const { testConnection: fastgptTest } = require('../../../lib/api/fastgpt');\n      const fs = require('fs/promises');\n\n      dbTest.mockResolvedValue(true);\n      ping.mockResolvedValue('PONG');\n      fastgptTest.mockResolvedValue(true);\n      fs.access.mockResolvedValue(undefined);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.status).toBe('healthy');\n      expect(data.services.database.status).toBe('up');\n      expect(data.services.redis.status).toBe('up');\n      expect(data.services.fastgpt.status).toBe('up');\n      expect(data.services.filesystem.status).toBe('up');\n    });\n  });\n\n  describe('Error Recovery and Circuit Breaker', () => {\n    it('should trigger circuit breaker after multiple failures', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Connection timeout'));\n\n      // Simulate multiple failures to trigger circuit breaker\n      for (let i = 0; i < 5; i++) {\n        await GET(mockRequest);\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include response time metrics', async () => {\n      const { testConnection: dbTest } = require('../../../lib/database/connection');\n      const { ping } = require('../../../lib/cache/redis');\n      const { testConnection: fastgptTest } = require('../../../lib/api/fastgpt');\n      const fs = require('fs/promises');\n\n      dbTest.mockResolvedValue(true);\n      ping.mockResolvedValue('PONG');\n      fastgptTest.mockResolvedValue(true);\n      fs.access.mockResolvedValue(undefined);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(data.services.database.responseTime).toBeDefined();\n      expect(data.services.redis.responseTime).toBeDefined();\n      expect(data.services.fastgpt.responseTime).toBeDefined();\n      expect(data.services.filesystem.responseTime).toBeDefined();\n    });\n\n    it('should handle timeout scenarios gracefully', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      \n      // Simulate a long-running operation\n      testConnection.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Operation timeout')), 100)\n        )\n      );\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.services.database.status).toBe('down');\n      expect(data.services.database.error).toContain('Operation timeout');\n    });\n  });\n\n  describe('Global Error Handler Integration', () => {\n    it('should properly classify health check errors', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      const agentError = new AgentError(\n        AgentErrorType.SERVICE_UNAVAILABLE,\n        'Database service unavailable',\n        ErrorSeverity.CRITICAL\n      );\n      testConnection.mockRejectedValue(agentError);\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.code).toBe('SERVICE_UNAVAILABLE');\n      expect(data.error.severity).toBe('critical');\n    });\n\n    it('should include error correlation ID', async () => {\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Database error'));\n\n      const response = await GET(mockRequest);\n      const data = await response.json();\n\n      expect(data.error.correlationId).toBeDefined();\n      expect(data.timestamp).toBeDefined();\n    });\n\n    it('should log errors for monitoring', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      const { testConnection } = require('../../../lib/database/connection');\n      testConnection.mockRejectedValue(new Error('Critical database error'));\n\n      await GET(mockRequest);\n\n      expect(consoleSpy).toHaveBeenCalled();\n      consoleSpy.mockRestore();\n    });\n  });\n});"],"names":["jest","mock","testConnection","fn","getConnectionStatus","ping","isConnected","getHealthStatus","access","stat","describe","mockRequest","errorHandler","beforeEach","NextRequest","GlobalErrorHandler","getInstance","clearAllMocks","it","require","mockRejectedValue","Error","response","GET","data","json","expect","status","toBe","success","error","code","services","database","toContain","redis","fastgpt","fs","filesystem","dbTest","fastgptTest","mockResolvedValue","undefined","i","stats","getErrorStats","errorCount","toBeGreaterThan","responseTime","toBeDefined","mockImplementation","Promise","_","reject","setTimeout","agentError","AgentError","AgentErrorType","SERVICE_UNAVAILABLE","ErrorSeverity","CRITICAL","severity","correlationId","timestamp","consoleSpy","spyOn","console","toHaveBeenCalled","mockRestore"],"mappings":"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"}