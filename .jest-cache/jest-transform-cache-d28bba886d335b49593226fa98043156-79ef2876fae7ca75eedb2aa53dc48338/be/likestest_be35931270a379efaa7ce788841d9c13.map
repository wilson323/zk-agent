{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\likes.test.ts"],"sourcesContent":["/**\n * 点赞功能API路由错误处理测试\n * 测试点赞、取消点赞、获取点赞状态等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT } from '@/app/api/likes/route';\n// import { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/likes-manager', () => ({\n  addLike: jest.fn(),\n  removeLike: jest.fn(),\n  getLikeStatus: jest.fn(),\n  getLikeCount: jest.fn(),\n  getUserLikes: jest.fn(),\n  getPopularContent: jest.fn(),\n  validateLikePermissions: jest.fn(),\n  checkLikeLimit: jest.fn()\n}));\n\njest.mock('../../../lib/storage/likes-store', () => ({\n  storeLike: jest.fn(),\n  deleteLike: jest.fn(),\n  getLike: jest.fn(),\n  getLikesByUser: jest.fn(),\n  getLikesByContent: jest.fn(),\n  updateLikeMetadata: jest.fn(),\n  checkLikeExists: jest.fn()\n}));\n\njest.mock('../../../lib/services/content-validator', () => ({\n  validateContentExists: jest.fn(),\n  validateContentType: jest.fn(),\n  checkContentAccess: jest.fn(),\n  validateContentStatus: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  getUserId: jest.fn(),\n  checkUserPermissions: jest.fn()\n}));\n\njest.mock('../../../lib/services/notification-manager', () => ({\n  sendLikeNotification: jest.fn(),\n  sendUnlikeNotification: jest.fn()\n}));\n\ndescribe('Likes API Error Handling', () => {\n  let errorHandler: any;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/likes - Get Like Status and Count', () => {\n    it('should handle missing content ID', async () => {\n      const request = new NextRequest('http://localhost:3000/api/likes');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Content ID is required');\n    });\n\n    it('should handle invalid content ID format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=invalid-format');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid content ID format');\n    });\n\n    it('should handle content not found', async () => {\n      const { validateContentExists } = require('../../../lib/services/content-validator');\n      validateContentExists.mockRejectedValue(new Error('Content not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=nonexistent-content');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Content not found');\n    });\n\n    it('should handle content access denied', async () => {\n      const { checkContentAccess } = require('../../../lib/services/content-validator');\n      checkContentAccess.mockRejectedValue(new Error('Access denied to content'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=private-content', {\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Access denied to content');\n    });\n\n    it('should handle likes service unavailable', async () => {\n      const { getLikeStatus } = require('../../../lib/services/likes-manager');\n      getLikeStatus.mockRejectedValue(new Error('Likes service temporarily unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Likes service temporarily unavailable');\n    });\n\n    it('should handle likes storage corruption', async () => {\n      const { getLike } = require('../../../lib/storage/likes-store');\n      getLike.mockRejectedValue(new Error('Likes data corruption detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Likes data corruption detected');\n    });\n\n    it('should handle like count calculation error', async () => {\n      const { getLikeCount } = require('../../../lib/services/likes-manager');\n      getLikeCount.mockRejectedValue(new Error('Failed to calculate like count'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123&action=count');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to calculate like count');\n    });\n\n    it('should handle user likes retrieval timeout', async () => {\n      const { getUserLikes } = require('../../../lib/services/likes-manager');\n      getUserLikes.mockRejectedValue(new Error('User likes retrieval timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?userId=user-123&action=user_likes', {\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error.message).toContain('User likes retrieval timeout');\n    });\n\n    it('should handle popular content query failure', async () => {\n      const { getPopularContent } = require('../../../lib/services/likes-manager');\n      getPopularContent.mockRejectedValue(new Error('Popular content query failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?action=popular&limit=10');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Popular content query failed');\n    });\n\n    it('should handle invalid pagination parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/likes?action=user_likes&page=-1&limit=0');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid pagination parameters');\n    });\n\n    it('should handle excessive pagination limit', async () => {\n      const request = new NextRequest('http://localhost:3000/api/likes?action=user_likes&limit=10000');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Pagination limit exceeds maximum allowed');\n    });\n  });\n\n  describe('POST /api/likes - Add Like', () => {\n    let validLikeData: any;\n\n    beforeEach(() => {\n      validLikeData = {\n        contentId: 'content-123',\n        contentType: 'post',\n        metadata: {\n          source: 'web',\n          timestamp: new Date().toISOString()\n        }\n      };\n    });\n\n    it('should handle missing content ID in like request', async () => {\n      const invalidData = { ...validLikeData };\n      delete invalidData.contentId;\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(invalidData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('contentId');\n    });\n\n    it('should handle unauthenticated like request', async () => {\n      const { validateSession } = require('../../../lib/auth/session');\n      validateSession.mockRejectedValue(new Error('Authentication required'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n      expect(data.error.message).toContain('Authentication required');\n    });\n\n    it('should handle content not found for liking', async () => {\n      const { validateContentExists } = require('../../../lib/services/content-validator');\n      validateContentExists.mockRejectedValue(new Error('Content not found'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify({ ...validLikeData, contentId: 'nonexistent-content' }),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Content not found');\n    });\n\n    it('should handle content type not allowed for liking', async () => {\n      const { validateContentType } = require('../../../lib/services/content-validator');\n      validateContentType.mockRejectedValue(new Error('Content type not allowed for liking'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify({ ...validLikeData, contentType: 'restricted-type' }),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Content type not allowed for liking');\n    });\n\n    it('should handle already liked content', async () => {\n      const { checkLikeExists } = require('../../../lib/storage/likes-store');\n      checkLikeExists.mockResolvedValue(true);\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.code).toBe('CONFLICT');\n      expect(data.error.message).toContain('Content already liked');\n    });\n\n    it('should handle like limit exceeded', async () => {\n      const { checkLikeLimit } = require('../../../lib/services/likes-manager');\n      checkLikeLimit.mockRejectedValue(new Error('Daily like limit exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error.code).toBe('RATE_LIMIT_ERROR');\n      expect(data.error.message).toContain('Daily like limit exceeded');\n    });\n\n    it('should handle insufficient permissions to like content', async () => {\n      const { validateLikePermissions } = require('../../../lib/services/likes-manager');\n      validateLikePermissions.mockRejectedValue(new Error('Insufficient permissions to like this content'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer limited-user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Insufficient permissions');\n    });\n\n    it('should handle like storage failure', async () => {\n      const { storeLike } = require('../../../lib/storage/likes-store');\n      storeLike.mockRejectedValue(new Error('Failed to store like: database write error'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to store like');\n    });\n\n    it('should handle like notification failure', async () => {\n      const { sendLikeNotification } = require('../../../lib/services/notification-manager');\n      sendLikeNotification.mockRejectedValue(new Error('Failed to send like notification'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n\n      // Should not fail the main operation\n      expect(response.status).not.toBe(500);\n    });\n\n    it('should handle content status validation failure', async () => {\n      const { validateContentStatus } = require('../../../lib/services/content-validator');\n      validateContentStatus.mockRejectedValue(new Error('Content is archived and cannot be liked'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Content is archived and cannot be liked');\n    });\n\n    it('should handle self-liking restriction', async () => {\n      const { validateLikePermissions } = require('../../../lib/services/likes-manager');\n      validateLikePermissions.mockRejectedValue(new Error('Cannot like your own content'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer content-owner-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Cannot like your own content');\n    });\n\n    it('should handle concurrent like attempts', async () => {\n      const { addLike } = require('../../../lib/services/likes-manager');\n      addLike.mockRejectedValue(new Error('Concurrent like operation detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Concurrent like operation detected');\n    });\n\n    it('should handle invalid like metadata', async () => {\n      const invalidMetadataData = {\n        ...validLikeData,\n        metadata: {\n          source: 'invalid-source',\n          timestamp: 'invalid-timestamp',\n          maliciousScript: '<script>alert(\"xss\")</script>'\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(invalidMetadataData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid metadata');\n    });\n  });\n\n  describe('DELETE /api/likes - Remove Like', () => {\n    it('should handle missing content ID in unlike request', async () => {\n      // const request = new NextRequest('http://localhost:3000/api/likes', {\n      //   method: 'DELETE'\n      // });\n\n      // // const response = await DELETE(request); // DELETE method not available\n       // const data = await response.json();\n\n      // expect(response.status).toBe(400);\n       // expect(data.error.code).toBe('VALIDATION_ERROR');\n       // expect(data.error.message).toContain('Content ID is required');\n    });\n\n    it('should handle unauthenticated unlike request', async () => {\n      const { validateSession } = require('../../../lib/auth/session');\n      validateSession.mockRejectedValue(new Error('Authentication required'));\n\n      // const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123', {\n      //   method: 'DELETE'\n      // });\n\n      // const response = await DELETE(request); // DELETE method not available\n      // const data = await response.json();\n\n      // expect(response.status).toBe(401);\n       // expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n       // expect(data.error.message).toContain('Authentication required');\n    });\n\n    it('should handle like not found for removal', async () => {\n      const { checkLikeExists } = require('../../../lib/storage/likes-store');\n      checkLikeExists.mockResolvedValue(false);\n\n      // const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123', {\n      //   method: 'DELETE',\n      //   headers: { 'Authorization': 'Bearer user-token' }\n      // });\n\n      // const response = await DELETE(request); // DELETE method not available\n      // const data = await response.json();\n\n      // expect(response.status).toBe(404);\n       // expect(data.error.code).toBe('NOT_FOUND');\n       // expect(data.error.message).toContain('Like not found');\n    });\n\n    it('should handle unauthorized like removal', async () => {\n      const { validateLikePermissions } = require('../../../lib/services/likes-manager');\n      validateLikePermissions.mockRejectedValue(new Error('Cannot remove like: not the original liker'));\n\n      // const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123', {\n      //   method: 'DELETE',\n      //   headers: { 'Authorization': 'Bearer different-user-token' }\n      // });\n\n      // const response = await DELETE(request); // DELETE method not available\n      // const data = await response.json();\n\n      // expect(response.status).toBe(403);\n       // expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n       // expect(data.error.message).toContain('Cannot remove like');\n    });\n\n    it('should handle like removal storage failure', async () => {\n      const { deleteLike } = require('../../../lib/storage/likes-store');\n      deleteLike.mockRejectedValue(new Error('Failed to delete like: database error'));\n\n      // const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123', {\n      //   method: 'DELETE',\n      //   headers: { 'Authorization': 'Bearer user-token' }\n      // });\n\n      // const response = await DELETE(request); // DELETE method not available\n      // const data = await response.json();\n\n      // expect(response.status).toBe(500);\n       // expect(data.error.message).toContain('Failed to delete like');\n    });\n\n    it('should handle unlike notification failure', async () => {\n      const { sendUnlikeNotification } = require('../../../lib/services/notification-manager');\n      sendUnlikeNotification.mockRejectedValue(new Error('Failed to send unlike notification'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await DELETE(request);\n\n      // Should not fail the main operation\n      expect(response.status).not.toBe(500);\n    });\n\n    it('should handle concurrent unlike attempts', async () => {\n      const { removeLike } = require('../../../lib/services/likes-manager');\n      removeLike.mockRejectedValue(new Error('Concurrent unlike operation detected'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=content-123', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Concurrent unlike operation detected');\n    });\n\n    it('should handle like removal from archived content', async () => {\n      const { validateContentStatus } = require('../../../lib/services/content-validator');\n      validateContentStatus.mockRejectedValue(new Error('Cannot remove like from archived content'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes?contentId=archived-content', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Cannot remove like from archived content');\n    });\n  });\n\n  describe('Batch Like Operations', () => {\n    it('should handle batch like with partial failures', async () => {\n      const { addLike } = require('../../../lib/services/likes-manager');\n      addLike.mockImplementation((data) => {\n        if (data.contentId === 'invalid-content') {\n          throw new Error('Content not found');\n        }\n        return Promise.resolve({ likeId: 'like-123' });\n      });\n\n      const batchData = {\n        likes: [\n          { contentId: 'content-1', contentType: 'post' },\n          { contentId: 'invalid-content', contentType: 'post' },\n          { contentId: 'content-3', contentType: 'comment' }\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/likes/batch', {\n        method: 'POST',\n        body: JSON.stringify(batchData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n\n    it('should handle batch unlike with partial failures', async () => {\n      const { removeLike } = require('../../../lib/services/likes-manager');\n      removeLike.mockImplementation((contentId) => {\n        if (contentId === 'not-liked-content') {\n          throw new Error('Like not found');\n        }\n        return Promise.resolve();\n      });\n\n      const batchData = {\n        contentIds: ['content-1', 'not-liked-content', 'content-3']\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/likes/batch', {\n        method: 'DELETE',\n        body: JSON.stringify(batchData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n\n    it('should handle batch operation size limit exceeded', async () => {\n      const largeBatchData = {\n        likes: Array.from({ length: 1001 }, (_, i) => ({\n          contentId: `content-${i}`,\n          contentType: 'post'\n        }))\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/likes/batch', {\n        method: 'POST',\n        body: JSON.stringify(largeBatchData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Batch size exceeds maximum allowed');\n    });\n  });\n\n  describe('Like Analytics and Aggregation', () => {\n    it('should handle like analytics calculation failure', async () => {\n      const { getLikeCount } = require('../../../lib/services/likes-manager');\n      getLikeCount.mockRejectedValue(new Error('Analytics calculation failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes/analytics?contentId=content-123');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Analytics calculation failed');\n    });\n\n    it('should handle like trend analysis timeout', async () => {\n      const { getPopularContent } = require('../../../lib/services/likes-manager');\n      getPopularContent.mockRejectedValue(new Error('Trend analysis timeout'));\n\n      const request = new NextRequest('http://localhost:3000/api/likes/trends?period=7d');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error.message).toContain('Trend analysis timeout');\n    });\n\n    it('should handle invalid analytics parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/likes/analytics?period=invalid&groupBy=unknown');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid analytics parameters');\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide like operation recovery suggestions', async () => {\n      const { addLike } = require('../../../lib/services/likes-manager');\n      addLike.mockRejectedValue(new Error('Temporary likes service outage'));\n\n      const validLikeData = {\n        contentId: 'content-123',\n        contentType: 'post'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry like operation');\n    });\n\n    it('should track like operation performance', async () => {\n      const { addLike } = require('../../../lib/services/likes-manager');\n      addLike.mockRejectedValue(new Error('Test error'));\n\n      const validLikeData = {\n        contentId: 'content-123',\n        contentType: 'post'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      await POST(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.likeErrorCount).toBeGreaterThan(0);\n    });\n\n    it('should include like context in error responses', async () => {\n      const { addLike } = require('../../../lib/services/likes-manager');\n      addLike.mockRejectedValue(new Error('Test error'));\n\n      const validLikeData = {\n        contentId: 'content-123',\n        contentType: 'post'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/likes', {\n        method: 'POST',\n        body: JSON.stringify(validLikeData),\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer user-token'\n        }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('addLike');\n      expect(data.error.context.contentId).toBe('content-123');\n    });\n  });\n});"],"names":["jest","mock","addLike","fn","removeLike","getLikeStatus","getLikeCount","getUserLikes","getPopularContent","validateLikePermissions","checkLikeLimit","storeLike","deleteLike","getLike","getLikesByUser","getLikesByContent","updateLikeMetadata","checkLikeExists","validateContentExists","validateContentType","checkContentAccess","validateContentStatus","validateSession","getUserId","checkUserPermissions","sendLikeNotification","sendUnlikeNotification","describe","errorHandler","beforeEach","GlobalErrorHandler","getInstance","clearAllMocks","it","request","NextRequest","response","GET","data","json","expect","status","toBe","success","error","code","message","toContain","require","mockRejectedValue","Error","headers","validLikeData","contentId","contentType","metadata","source","timestamp","Date","toISOString","invalidData","method","body","JSON","stringify","POST","details","mockResolvedValue","not","invalidMetadataData","maliciousScript","DELETE","mockImplementation","Promise","resolve","likeId","batchData","likes","results","toBeDefined","errors","contentIds","largeBatchData","Array","from","length","_","i","recovery","suggestions","stats","getErrorStats","likeErrorCount","toBeGreaterThan","context","operation"],"mappings":"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"}