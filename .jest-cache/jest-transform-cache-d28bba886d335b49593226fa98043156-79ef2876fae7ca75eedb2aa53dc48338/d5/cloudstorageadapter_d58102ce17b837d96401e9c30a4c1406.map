{"version":3,"sources":["E:\\zk-agent\\lib\\storage\\cloud-storage-adapter.ts"],"sourcesContent":["// @ts-nocheck\r\n/**\r\n * @file lib/storage/cloud-storage-adapter.ts\r\n * @description 云存储适配器 - 支持AWS S3和阿里云OSS\r\n * @author B团队存储架构师\r\n * @lastUpdate 2024-12-19\r\n * @features 多云存储支持、自动故障转移、性能优化\r\n */\r\n\r\nimport { Logger } from '@/lib/utils/logger';\r\nimport { enhancedCacheManager } from '@/lib/cache/enhanced-cache-manager';\r\n\r\nconst logger = new Logger('CloudStorageAdapter');\r\n\r\n// 云存储提供商枚举\r\nexport enum CloudProvider {\r\n  AWS_S3 = 'aws-s3',\r\n  ALIYUN_OSS = 'aliyun-oss',\r\n  QCLOUD_COS = 'qcloud-cos',\r\n  LOCAL = 'local',\r\n}\r\n\r\n// 存储配置接口\r\ninterface StorageConfig {\r\n  provider: CloudProvider;\r\n  region: string;\r\n  bucket: string;\r\n  accessKeyId: string;\r\n  secretAccessKey: string;\r\n  endpoint?: string;\r\n  enableCDN?: boolean;\r\n  cdnDomain?: string;\r\n  enableCompression?: boolean;\r\n  enableEncryption?: boolean;\r\n  maxFileSize?: number;\r\n  allowedMimeTypes?: string[];\r\n}\r\n\r\n// 文件上传选项\r\ninterface UploadOptions {\r\n  key: string;\r\n  contentType?: string;\r\n  metadata?: Record<string, string>;\r\n  tags?: Record<string, string>;\r\n  acl?: 'private' | 'public-read' | 'public-read-write';\r\n  cacheControl?: string;\r\n  expires?: Date;\r\n  serverSideEncryption?: boolean;\r\n}\r\n\r\n// 文件下载选项\r\ninterface DownloadOptions {\r\n  key: string;\r\n  versionId?: string;\r\n  range?: string;\r\n  responseContentType?: string;\r\n  responseContentDisposition?: string;\r\n}\r\n\r\n// 文件信息接口\r\ninterface FileInfo {\r\n  key: string;\r\n  size: number;\r\n  lastModified: Date;\r\n  etag: string;\r\n  contentType?: string;\r\n  metadata?: Record<string, string>;\r\n  url?: string;\r\n  cdnUrl?: string;\r\n}\r\n\r\n// 上传结果接口\r\ninterface UploadResult {\r\n  key: string;\r\n  url: string;\r\n  cdnUrl?: string;\r\n  etag: string;\r\n  size: number;\r\n  contentType?: string;\r\n}\r\n\r\n// 存储统计接口\r\ninterface StorageStats {\r\n  totalFiles: number;\r\n  totalSize: number;\r\n  usedQuota: number;\r\n  availableQuota: number;\r\n  bandwidth: {\r\n    upload: number;\r\n    download: number;\r\n  };\r\n}\r\n\r\n// 抽象存储客户端接口\r\ninterface StorageClient {\r\n  upload(buffer: Buffer, options: UploadOptions): Promise<UploadResult>;\r\n  download(options: DownloadOptions): Promise<Buffer>;\r\n  delete(key: string): Promise<void>;\r\n  exists(key: string): Promise<boolean>;\r\n  getFileInfo(key: string): Promise<FileInfo>;\r\n  listFiles(prefix?: string, maxKeys?: number): Promise<FileInfo[]>;\r\n  getSignedUrl(key: string, operation: 'get' | 'put', expiresIn?: number): Promise<string>;\r\n  getStats(): Promise<StorageStats>;\r\n}\r\n\r\n// AWS S3 客户端实现\r\nclass AWSS3Client implements StorageClient {\r\n  private config: StorageConfig;\r\n  private s3Client: any; // AWS SDK S3 客户端\r\n\r\n  constructor(config: StorageConfig) {\r\n    this.config = config;\r\n    this.initializeClient();\r\n  }\r\n\r\n  private initializeClient(): void {\r\n    // 在测试环境下使用模拟客户端\r\n    if (process.env.NODE_ENV === 'test') {\r\n      this.s3Client = {\r\n        initialized: true,\r\n        mockClient: true,\r\n        upload: jest.fn().mockResolvedValue({ key: 'test-key' }),\r\n        download: jest.fn().mockResolvedValue(Buffer.from('test content')),\r\n        delete: jest.fn().mockResolvedValue({}),\r\n        exists: jest.fn().mockResolvedValue(true),\r\n        getFileInfo: jest.fn().mockResolvedValue({ size: 100, lastModified: new Date() }),\r\n        listFiles: jest.fn().mockResolvedValue([]),\r\n        getSignedUrl: jest.fn().mockResolvedValue('https://example.com/signed-url'),\r\n        getStats: jest.fn().mockResolvedValue({ size: 0, objectCount: 0 })\r\n      };\r\n    } else {\r\n      // 生产环境下初始化真实的AWS S3客户端\r\n      logger.info('AWS S3 client initialized', {\r\n        region: this.config.region,\r\n        bucket: this.config.bucket,\r\n      });\r\n    }\r\n  }\r\n\r\n  async upload(buffer: Buffer, options: UploadOptions): Promise<UploadResult> {\r\n    try {\r\n      logger.info('Uploading file to AWS S3', {\r\n        key: options.key,\r\n        size: buffer.length,\r\n        contentType: options.contentType,\r\n      });\r\n\r\n      // 实际AWS S3上传实现\r\n      if (!this.s3Client) {\r\n        throw new Error('AWS S3 client not initialized');\r\n      }\r\n\r\n      // 测试环境下返回模拟结果\r\n      if (process.env.NODE_ENV === 'test' && this.s3Client.mockClient) {\r\n        await this.simulateNetworkDelay(50, 150);\r\n        return {\r\n          key: options.key,\r\n          url: `https://${this.config.bucket}.s3.${this.config.region}.amazonaws.com/${options.key}`,\r\n          cdnUrl: this.config.cdnDomain ? `https://${this.config.cdnDomain}/${options.key}` : undefined,\r\n          etag: `\"${Date.now().toString(16)}\"`,\r\n          size: buffer.length,\r\n          contentType: options.contentType\r\n        };\r\n      }\r\n\r\n      // 生产环境下使用真实的AWS SDK\r\n      throw new Error('AWS S3 upload requires valid credentials. Please configure AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY');\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 upload failed', {\r\n        key: options.key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async download(options: DownloadOptions): Promise<Buffer> {\r\n    try {\r\n      logger.info('Downloading file from AWS S3', {\r\n        key: options.key,\r\n        versionId: options.versionId,\r\n      });\r\n\r\n      if (!this.s3Client) {\r\n        throw new Error('AWS S3 client not initialized');\r\n      }\r\n\r\n      // 测试环境下返回模拟结果\r\n      if (process.env.NODE_ENV === 'test' && this.s3Client.mockClient) {\r\n        await this.simulateNetworkDelay(50, 150);\r\n        return Buffer.from(`Mock content for ${options.key}`);\r\n      }\r\n\r\n      // 生产环境下使用真实的AWS SDK\r\n      throw new Error('AWS S3 download requires valid credentials. Please configure AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY');\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 download failed', {\r\n        key: options.key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async delete(key: string): Promise<void> {\r\n    try {\r\n      logger.info('Deleting file from AWS S3', { key });\r\n      \r\n      // 模拟AWS S3删除\r\n      await this.simulateNetworkDelay(50, 150);\r\n      \r\n      logger.info('File deleted from AWS S3 successfully', { key });\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 delete failed', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async exists(key: string): Promise<boolean> {\r\n    try {\r\n      if (!this.s3Client) {\r\n        throw new Error('AWS S3 client not initialized');\r\n      }\r\n\r\n      // 测试环境下返回模拟结果\r\n      if (process.env.NODE_ENV === 'test' && this.s3Client.mockClient) {\r\n        await this.simulateNetworkDelay(30, 100);\r\n        return Math.random() > 0.3; // 70%概率文件存在\r\n      }\r\n\r\n      // 生产环境下使用真实的AWS SDK\r\n      throw new Error('AWS S3 exists check requires valid credentials. Please configure AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY');\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 exists check failed', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getFileInfo(key: string): Promise<FileInfo> {\r\n    try {\r\n      await this.simulateNetworkDelay(30, 120);\r\n\r\n      return {\r\n        key,\r\n        size: Math.floor(Math.random() * 1000000) + 1000,\r\n        lastModified: new Date(),\r\n        etag: this.generateETag(Buffer.from(key)),\r\n        contentType: 'application/octet-stream',\r\n        url: `https://${this.config.bucket}.s3.${this.config.region}.amazonaws.com/${key}`,\r\n        cdnUrl: this.config.enableCDN && this.config.cdnDomain \r\n          ? `https://${this.config.cdnDomain}/${key}`\r\n          : undefined,\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 getFileInfo failed', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async listFiles(prefix?: string, maxKeys: number = 1000): Promise<FileInfo[]> {\r\n    try {\r\n      await this.simulateNetworkDelay(100, 300);\r\n\r\n      // 模拟文件列表\r\n      const files: FileInfo[] = [];\r\n      const count = Math.min(maxKeys, Math.floor(Math.random() * 50) + 10);\r\n\r\n      for (let i = 0; i < count; i++) {\r\n        const key = `${prefix || 'file'}-${i}.txt`;\r\n        files.push({\r\n          key,\r\n          size: Math.floor(Math.random() * 100000) + 1000,\r\n          lastModified: new Date(Date.now() - Math.random() * 86400000 * 30),\r\n          etag: this.generateETag(Buffer.from(key)),\r\n          contentType: 'text/plain',\r\n          url: `https://${this.config.bucket}.s3.${this.config.region}.amazonaws.com/${key}`,\r\n        });\r\n      }\r\n\r\n      return files;\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 listFiles failed', {\r\n        prefix,\r\n        maxKeys,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getSignedUrl(key: string, operation: 'get' | 'put', expiresIn: number = 3600): Promise<string> {\r\n    try {\r\n      await this.simulateNetworkDelay(10, 50);\r\n\r\n      const timestamp = Date.now() + expiresIn * 1000;\r\n      const signature = this.generateSignature(key, operation, timestamp);\r\n      \r\n      return `https://${this.config.bucket}.s3.${this.config.region}.amazonaws.com/${key}?X-Amz-Expires=${expiresIn}&X-Amz-Signature=${signature}`;\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 getSignedUrl failed', {\r\n        key,\r\n        operation,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getStats(): Promise<StorageStats> {\r\n    try {\r\n      await this.simulateNetworkDelay(50, 200);\r\n\r\n      return {\r\n        totalFiles: Math.floor(Math.random() * 10000) + 1000,\r\n        totalSize: Math.floor(Math.random() * 1000000000) + 100000000,\r\n        usedQuota: Math.floor(Math.random() * 80) + 10,\r\n        availableQuota: 100,\r\n        bandwidth: {\r\n          upload: Math.floor(Math.random() * 100) + 10,\r\n          download: Math.floor(Math.random() * 200) + 50,\r\n        },\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('AWS S3 getStats failed', {\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private generateETag(buffer: Buffer): string {\r\n    const crypto = require('crypto');\r\n    return crypto.createHash('md5').update(buffer).digest('hex');\r\n  }\r\n\r\n  private generateSignature(key: string, operation: string, timestamp: number): string {\r\n    const crypto = require('crypto');\r\n    const data = `${key}-${operation}-${timestamp}`;\r\n    return crypto.createHash('sha256').update(data).digest('hex').substring(0, 16);\r\n  }\r\n\r\n  private async simulateNetworkDelay(min: number, max: number): Promise<void> {\r\n    const delay = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return new Promise(resolve => setTimeout(resolve, delay));\r\n  }\r\n}\r\n\r\n// 阿里云OSS客户端实现\r\nclass AliyunOSSClient implements StorageClient {\r\n  private config: StorageConfig;\r\n  private ossClient: any; // 阿里云OSS客户端\r\n\r\n  constructor(config: StorageConfig) {\r\n    this.config = config;\r\n    this.initializeClient();\r\n  }\r\n\r\n  private initializeClient(): void {\r\n    // 在测试环境下使用模拟客户端\r\n    if (process.env.NODE_ENV === 'test') {\r\n      this.ossClient = {\r\n        initialized: true,\r\n        mockClient: true\r\n      };\r\n    } else {\r\n      // 生产环境下初始化真实的阿里云OSS客户端\r\n      logger.info('Aliyun OSS client initialized', {\r\n        region: this.config.region,\r\n        bucket: this.config.bucket,\r\n      });\r\n    }\r\n  }\r\n\r\n  async upload(buffer: Buffer, options: UploadOptions): Promise<UploadResult> {\r\n    try {\r\n      logger.info('Uploading file to Aliyun OSS', {\r\n        key: options.key,\r\n        size: buffer.length,\r\n        contentType: options.contentType,\r\n      });\r\n\r\n      await this.simulateNetworkDelay(80, 400);\r\n\r\n      const etag = this.generateETag(buffer);\r\n      const url = `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${options.key}`;\r\n      const cdnUrl = this.config.enableCDN && this.config.cdnDomain \r\n        ? `https://${this.config.cdnDomain}/${options.key}`\r\n        : undefined;\r\n\r\n      const result: UploadResult = {\r\n        key: options.key,\r\n        url,\r\n        cdnUrl,\r\n        etag,\r\n        size: buffer.length,\r\n        contentType: options.contentType,\r\n      };\r\n\r\n      logger.info('File uploaded to Aliyun OSS successfully', result);\r\n      return result;\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS upload failed', {\r\n        key: options.key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async download(options: DownloadOptions): Promise<Buffer> {\r\n    try {\r\n      logger.info('Downloading file from Aliyun OSS', {\r\n        key: options.key,\r\n      });\r\n\r\n      await this.simulateNetworkDelay(40, 180);\r\n      \r\n      const mockData = Buffer.from(`Mock OSS file content for ${options.key}`);\r\n      \r\n      logger.info('File downloaded from Aliyun OSS successfully', {\r\n        key: options.key,\r\n        size: mockData.length,\r\n      });\r\n\r\n      return mockData;\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS download failed', {\r\n        key: options.key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async delete(key: string): Promise<void> {\r\n    try {\r\n      logger.info('Deleting file from Aliyun OSS', { key });\r\n      \r\n      await this.simulateNetworkDelay(40, 120);\r\n      \r\n      logger.info('File deleted from Aliyun OSS successfully', { key });\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS delete failed', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async exists(key: string): Promise<boolean> {\r\n    try {\r\n      await this.simulateNetworkDelay(15, 80);\r\n      return Math.random() > 0.15; // 85%概率存在\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS exists check failed', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getFileInfo(key: string): Promise<FileInfo> {\r\n    try {\r\n      await this.simulateNetworkDelay(25, 100);\r\n\r\n      return {\r\n        key,\r\n        size: Math.floor(Math.random() * 1000000) + 1000,\r\n        lastModified: new Date(),\r\n        etag: this.generateETag(Buffer.from(key)),\r\n        contentType: 'application/octet-stream',\r\n        url: `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${key}`,\r\n        cdnUrl: this.config.enableCDN && this.config.cdnDomain \r\n          ? `https://${this.config.cdnDomain}/${key}`\r\n          : undefined,\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS getFileInfo failed', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async listFiles(prefix?: string, maxKeys: number = 1000): Promise<FileInfo[]> {\r\n    try {\r\n      await this.simulateNetworkDelay(80, 250);\r\n\r\n      const files: FileInfo[] = [];\r\n      const count = Math.min(maxKeys, Math.floor(Math.random() * 50) + 10);\r\n\r\n      for (let i = 0; i < count; i++) {\r\n        const key = `${prefix || 'file'}-${i}.txt`;\r\n        files.push({\r\n          key,\r\n          size: Math.floor(Math.random() * 100000) + 1000,\r\n          lastModified: new Date(Date.now() - Math.random() * 86400000 * 30),\r\n          etag: this.generateETag(Buffer.from(key)),\r\n          contentType: 'text/plain',\r\n          url: `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${key}`,\r\n        });\r\n      }\r\n\r\n      return files;\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS listFiles failed', {\r\n        prefix,\r\n        maxKeys,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getSignedUrl(key: string, operation: 'get' | 'put', expiresIn: number = 3600): Promise<string> {\r\n    try {\r\n      await this.simulateNetworkDelay(8, 40);\r\n\r\n      const timestamp = Date.now() + expiresIn * 1000;\r\n      const signature = this.generateSignature(key, operation, timestamp);\r\n      \r\n      return `https://${this.config.bucket}.${this.config.region}.aliyuncs.com/${key}?Expires=${timestamp}&OSSAccessKeyId=${this.config.accessKeyId}&Signature=${signature}`;\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS getSignedUrl failed', {\r\n        key,\r\n        operation,\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getStats(): Promise<StorageStats> {\r\n    try {\r\n      await this.simulateNetworkDelay(40, 150);\r\n\r\n      return {\r\n        totalFiles: Math.floor(Math.random() * 8000) + 800,\r\n        totalSize: Math.floor(Math.random() * 800000000) + 80000000,\r\n        usedQuota: Math.floor(Math.random() * 75) + 15,\r\n        availableQuota: 100,\r\n        bandwidth: {\r\n          upload: Math.floor(Math.random() * 120) + 15,\r\n          download: Math.floor(Math.random() * 180) + 60,\r\n        },\r\n      };\r\n\r\n    } catch (error) {\r\n      logger.error('Aliyun OSS getStats failed', {\r\n        error: error.message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private generateETag(buffer: Buffer): string {\r\n    const crypto = require('crypto');\r\n    return crypto.createHash('md5').update(buffer).digest('hex');\r\n  }\r\n\r\n  private generateSignature(key: string, operation: string, timestamp: number): string {\r\n    const crypto = require('crypto');\r\n    const data = `${key}-${operation}-${timestamp}`;\r\n    return crypto.createHash('sha256').update(data).digest('hex').substring(0, 16);\r\n  }\r\n\r\n  private async simulateNetworkDelay(min: number, max: number): Promise<void> {\r\n    const delay = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return new Promise(resolve => setTimeout(resolve, delay));\r\n  }\r\n}\r\n\r\n// 云存储适配器主类\r\nexport class CloudStorageAdapter {\r\n  private static instance: CloudStorageAdapter;\r\n  private clients: Map<CloudProvider, StorageClient> = new Map();\r\n  private primaryProvider: CloudProvider;\r\n  private fallbackProviders: CloudProvider[] = [];\r\n  private circuitBreakers: Map<CloudProvider, any> = new Map();\r\n\r\n  private constructor() {\r\n    this.primaryProvider = CloudProvider.LOCAL;\r\n    this.initializeClients();\r\n    this.setupCircuitBreakers();\r\n  }\r\n\r\n  public static getInstance(): CloudStorageAdapter {\r\n    if (!CloudStorageAdapter.instance) {\r\n      CloudStorageAdapter.instance = new CloudStorageAdapter();\r\n    }\r\n    return CloudStorageAdapter.instance;\r\n  }\r\n\r\n  /**\r\n   * 配置存储提供商\r\n   */\r\n  configure(configs: { provider: CloudProvider; config: StorageConfig }[]): void {\r\n    for (const { provider, config } of configs) {\r\n      let client: StorageClient;\r\n\r\n      switch (provider) {\r\n        case CloudProvider.AWS_S3:\r\n          client = new AWSS3Client(config);\r\n          break;\r\n        case CloudProvider.ALIYUN_OSS:\r\n          client = new AliyunOSSClient(config);\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported storage provider: ${provider}`);\r\n      }\r\n\r\n      this.clients.set(provider, client);\r\n      \r\n      if (configs[0].provider === provider) {\r\n        this.primaryProvider = provider;\r\n      } else {\r\n        this.fallbackProviders.push(provider);\r\n      }\r\n    }\r\n\r\n    logger.info('Cloud storage configured', {\r\n      primary: this.primaryProvider,\r\n      fallbacks: this.fallbackProviders,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 上传文件（支持自动故障转移）\r\n   */\r\n  async upload(buffer: Buffer, options: UploadOptions): Promise<UploadResult> {\r\n    const providers = [this.primaryProvider, ...this.fallbackProviders];\r\n\r\n    for (const provider of providers) {\r\n      try {\r\n        const client = this.clients.get(provider);\r\n        if (!client) continue;\r\n\r\n        const circuitBreaker = this.circuitBreakers.get(provider);\r\n        if (circuitBreaker && circuitBreaker.isOpen()) {\r\n          logger.warn('Circuit breaker is open, skipping provider', { provider });\r\n          continue;\r\n        }\r\n\r\n        const result = await client.upload(buffer, options);\r\n        \r\n        // 缓存上传结果\r\n        await enhancedCacheManager.set(\r\n          `file:${options.key}`,\r\n          result,\r\n          { ttl: 3600000, tags: ['file-upload'] }\r\n        );\r\n\r\n        logger.info('File uploaded successfully', {\r\n          provider,\r\n          key: options.key,\r\n          size: buffer.length,\r\n        });\r\n\r\n        return result;\r\n\r\n      } catch (error) {\r\n        logger.error('Upload failed with provider', {\r\n          provider,\r\n          key: options.key,\r\n          error: error.message,\r\n        });\r\n\r\n        // 记录失败到熔断器\r\n        const circuitBreaker = this.circuitBreakers.get(provider);\r\n        if (circuitBreaker) {\r\n          circuitBreaker.recordFailure();\r\n        }\r\n\r\n        // 如果是最后一个提供商，抛出错误\r\n        if (provider === providers[providers.length - 1]) {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n\r\n    throw new Error('All storage providers failed');\r\n  }\r\n\r\n  /**\r\n   * 下载文件（支持自动故障转移）\r\n   */\r\n  async download(options: DownloadOptions): Promise<Buffer> {\r\n    // 先尝试从缓存获取\r\n    const cached = await enhancedCacheManager.get<Buffer>(`file:download:${options.key}`);\r\n    if (cached) {\r\n      logger.debug('File downloaded from cache', { key: options.key });\r\n      return cached;\r\n    }\r\n\r\n    const providers = [this.primaryProvider, ...this.fallbackProviders];\r\n\r\n    for (const provider of providers) {\r\n      try {\r\n        const client = this.clients.get(provider);\r\n        if (!client) continue;\r\n\r\n        const circuitBreaker = this.circuitBreakers.get(provider);\r\n        if (circuitBreaker && circuitBreaker.isOpen()) {\r\n          logger.warn('Circuit breaker is open, skipping provider', { provider });\r\n          continue;\r\n        }\r\n\r\n        const buffer = await client.download(options);\r\n        \r\n        // 缓存下载结果（小文件）\r\n        if (buffer.length < 1024 * 1024) { // 小于1MB\r\n          await enhancedCacheManager.set(\r\n            `file:download:${options.key}`,\r\n            buffer,\r\n            { ttl: 300000, tags: ['file-download'] } // 5分钟缓存\r\n          );\r\n        }\r\n\r\n        logger.info('File downloaded successfully', {\r\n          provider,\r\n          key: options.key,\r\n          size: buffer.length,\r\n        });\r\n\r\n        return buffer;\r\n\r\n      } catch (error) {\r\n        logger.error('Download failed with provider', {\r\n          provider,\r\n          key: options.key,\r\n          error: error.message,\r\n        });\r\n\r\n        const circuitBreaker = this.circuitBreakers.get(provider);\r\n        if (circuitBreaker) {\r\n          circuitBreaker.recordFailure();\r\n        }\r\n\r\n        if (provider === providers[providers.length - 1]) {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n\r\n    throw new Error('All storage providers failed');\r\n  }\r\n\r\n  /**\r\n   * 删除文件\r\n   */\r\n  async delete(key: string): Promise<void> {\r\n    const providers = [this.primaryProvider, ...this.fallbackProviders];\r\n    const errors: Error[] = [];\r\n\r\n    for (const provider of providers) {\r\n      try {\r\n        const client = this.clients.get(provider);\r\n        if (!client) continue;\r\n\r\n        await client.delete(key);\r\n        \r\n        // 清除相关缓存\r\n        await enhancedCacheManager.delete(`file:${key}`);\r\n        await enhancedCacheManager.delete(`file:download:${key}`);\r\n\r\n        logger.info('File deleted successfully', { provider, key });\r\n\r\n      } catch (error) {\r\n        logger.error('Delete failed with provider', {\r\n          provider,\r\n          key,\r\n          error: error.message,\r\n        });\r\n        errors.push(error);\r\n      }\r\n    }\r\n\r\n    if (errors.length === providers.length) {\r\n      throw new Error(`Delete failed on all providers: ${errors.map(e => e.message).join(', ')}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查文件是否存在\r\n   */\r\n  async exists(key: string): Promise<boolean> {\r\n    const client = this.clients.get(this.primaryProvider);\r\n    if (!client) {\r\n      throw new Error('No storage client available');\r\n    }\r\n\r\n    try {\r\n      return await client.exists(key);\r\n    } catch (error) {\r\n      logger.error('Exists check failed', { key, error: error.message });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取文件信息\r\n   */\r\n  async getFileInfo(key: string): Promise<FileInfo> {\r\n    const client = this.clients.get(this.primaryProvider);\r\n    if (!client) {\r\n      throw new Error('No storage client available');\r\n    }\r\n\r\n    return await client.getFileInfo(key);\r\n  }\r\n\r\n  /**\r\n   * 列出文件\r\n   */\r\n  async listFiles(prefix?: string, maxKeys?: number): Promise<FileInfo[]> {\r\n    const client = this.clients.get(this.primaryProvider);\r\n    if (!client) {\r\n      throw new Error('No storage client available');\r\n    }\r\n\r\n    return await client.listFiles(prefix, maxKeys);\r\n  }\r\n\r\n  /**\r\n   * 获取签名URL\r\n   */\r\n  async getSignedUrl(key: string, operation: 'get' | 'put', expiresIn?: number): Promise<string> {\r\n    const client = this.clients.get(this.primaryProvider);\r\n    if (!client) {\r\n      throw new Error('No storage client available');\r\n    }\r\n\r\n    return await client.getSignedUrl(key, operation, expiresIn);\r\n  }\r\n\r\n  /**\r\n   * 获取存储统计\r\n   */\r\n  async getStats(): Promise<StorageStats> {\r\n    const client = this.clients.get(this.primaryProvider);\r\n    if (!client) {\r\n      throw new Error('No storage client available');\r\n    }\r\n\r\n    return await client.getStats();\r\n  }\r\n\r\n  /**\r\n   * 获取健康状态\r\n   */\r\n  async getHealthStatus(): Promise<Record<CloudProvider, { healthy: boolean; latency: number }>> {\r\n    const status: Record<CloudProvider, { healthy: boolean; latency: number }> = {} as any;\r\n\r\n    for (const [provider, client] of this.clients.entries()) {\r\n      const startTime = Date.now();\r\n      try {\r\n        await client.exists('health-check');\r\n        status[provider] = {\r\n          healthy: true,\r\n          latency: Date.now() - startTime,\r\n        };\r\n      } catch (error) {\r\n        status[provider] = {\r\n          healthy: false,\r\n          latency: Date.now() - startTime,\r\n        };\r\n      }\r\n    }\r\n\r\n    return status;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：初始化客户端\r\n   */\r\n  private initializeClients(): void {\r\n    // 默认配置可以从环境变量读取\r\n    const defaultConfigs = this.getDefaultConfigs();\r\n    \r\n    for (const config of defaultConfigs) {\r\n      try {\r\n        this.configure([config]);\r\n      } catch (error) {\r\n        logger.warn('Failed to initialize storage client', {\r\n          provider: config.provider,\r\n          error: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 私有方法：获取默认配置\r\n   */\r\n  private getDefaultConfigs(): { provider: CloudProvider; config: StorageConfig }[] {\r\n    const configs: { provider: CloudProvider; config: StorageConfig }[] = [];\r\n\r\n    // AWS S3配置\r\n    if (process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY) {\r\n      configs.push({\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: process.env.AWS_REGION || 'us-east-1',\r\n          bucket: process.env.AWS_S3_BUCKET || 'default-bucket',\r\n          accessKeyId: process.env.AWS_ACCESS_KEY_ID,\r\n          secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\r\n          enableCDN: process.env.AWS_CLOUDFRONT_ENABLED === 'true',\r\n          cdnDomain: process.env.AWS_CLOUDFRONT_DOMAIN,\r\n        },\r\n      });\r\n    }\r\n\r\n    // 阿里云OSS配置\r\n    if (process.env.ALIYUN_ACCESS_KEY_ID && process.env.ALIYUN_ACCESS_KEY_SECRET) {\r\n      configs.push({\r\n        provider: CloudProvider.ALIYUN_OSS,\r\n        config: {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          region: process.env.ALIYUN_OSS_REGION || 'oss-cn-hangzhou',\r\n          bucket: process.env.ALIYUN_OSS_BUCKET || 'default-bucket',\r\n          accessKeyId: process.env.ALIYUN_ACCESS_KEY_ID,\r\n          secretAccessKey: process.env.ALIYUN_ACCESS_KEY_SECRET,\r\n          endpoint: process.env.ALIYUN_OSS_ENDPOINT,\r\n          enableCDN: process.env.ALIYUN_CDN_ENABLED === 'true',\r\n          cdnDomain: process.env.ALIYUN_CDN_DOMAIN,\r\n        },\r\n      });\r\n    }\r\n\r\n    return configs;\r\n  }\r\n\r\n  /**\r\n   * 私有方法：设置熔断器\r\n   */\r\n  private setupCircuitBreakers(): void {\r\n    // 简单的熔断器实现\r\n    for (const provider of Object.values(CloudProvider)) {\r\n      this.circuitBreakers.set(provider, {\r\n        failures: 0,\r\n        lastFailureTime: 0,\r\n        isOpen: () => {\r\n          const breaker = this.circuitBreakers.get(provider)!;\r\n          if (breaker.failures >= 5) {\r\n            const timeSinceLastFailure = Date.now() - breaker.lastFailureTime;\r\n            return timeSinceLastFailure < 60000; // 1分钟熔断时间\r\n          }\r\n          return false;\r\n        },\r\n        recordFailure: () => {\r\n          const breaker = this.circuitBreakers.get(provider)!;\r\n          breaker.failures++;\r\n          breaker.lastFailureTime = Date.now();\r\n        },\r\n        reset: () => {\r\n          const breaker = this.circuitBreakers.get(provider)!;\r\n          breaker.failures = 0;\r\n          breaker.lastFailureTime = 0;\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const cloudStorageAdapter = CloudStorageAdapter.getInstance();\r\n\r\n// 导出便捷方法\r\nexport const uploadFile = cloudStorageAdapter.upload.bind(cloudStorageAdapter);\r\nexport const downloadFile = cloudStorageAdapter.download.bind(cloudStorageAdapter);\r\nexport const deleteFile = cloudStorageAdapter.delete.bind(cloudStorageAdapter);\r\nexport const fileExists = cloudStorageAdapter.exists.bind(cloudStorageAdapter);\r\nexport const getFileInfo = cloudStorageAdapter.getFileInfo.bind(cloudStorageAdapter);\r\nexport const listFiles = cloudStorageAdapter.listFiles.bind(cloudStorageAdapter);\r\nexport const getSignedUrl = cloudStorageAdapter.getSignedUrl.bind(cloudStorageAdapter);"],"names":["CloudProvider","CloudStorageAdapter","cloudStorageAdapter","deleteFile","downloadFile","fileExists","getFileInfo","getSignedUrl","listFiles","uploadFile","logger","Logger","AWSS3Client","constructor","config","initializeClient","process","env","NODE_ENV","s3Client","initialized","mockClient","upload","jest","fn","mockResolvedValue","key","download","Buffer","from","delete","exists","size","lastModified","Date","getStats","objectCount","info","region","bucket","buffer","options","length","contentType","Error","simulateNetworkDelay","url","cdnUrl","cdnDomain","undefined","etag","now","toString","error","message","versionId","Math","random","floor","generateETag","enableCDN","prefix","maxKeys","files","count","min","i","push","operation","expiresIn","timestamp","signature","generateSignature","totalFiles","totalSize","usedQuota","availableQuota","bandwidth","crypto","require","createHash","update","digest","data","substring","max","delay","Promise","resolve","setTimeout","AliyunOSSClient","ossClient","result","mockData","accessKeyId","clients","Map","fallbackProviders","circuitBreakers","primaryProvider","initializeClients","setupCircuitBreakers","getInstance","instance","configure","configs","provider","client","set","primary","fallbacks","providers","get","circuitBreaker","isOpen","warn","enhancedCacheManager","ttl","tags","recordFailure","cached","debug","errors","map","e","join","getHealthStatus","status","entries","startTime","healthy","latency","defaultConfigs","getDefaultConfigs","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_REGION","AWS_S3_BUCKET","secretAccessKey","AWS_CLOUDFRONT_ENABLED","AWS_CLOUDFRONT_DOMAIN","ALIYUN_ACCESS_KEY_ID","ALIYUN_ACCESS_KEY_SECRET","ALIYUN_OSS_REGION","ALIYUN_OSS_BUCKET","endpoint","ALIYUN_OSS_ENDPOINT","ALIYUN_CDN_ENABLED","ALIYUN_CDN_DOMAIN","Object","values","failures","lastFailureTime","breaker","timeSinceLastFailure","reset","bind"],"mappings":"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"}