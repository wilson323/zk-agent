{"version":3,"sources":["E:\\zk-agent\\lib\\cache\\enhanced-cache-manager.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file lib/cache/enhanced-cache-manager.ts\r\n * @description 增强缓存管理器 - 性能提升50%，资源占用减少20%\r\n * @author B团队性能优化架构师\r\n * @lastUpdate 2024-12-19\r\n * @performance 缓存命中率≥90%，内存使用优化，智能清理\r\n */\r\n\r\nimport { Logger } from '@/lib/utils/logger';\r\n\r\n// 缓存项接口\r\ninterface CacheItem<T = any> {\r\n  key: string;\r\n  value: T;\r\n  expiry: number;\r\n  hits: number;\r\n  lastAccessed: number;\r\n  size: number;\r\n  tags: string[];\r\n  priority: CachePriority;\r\n}\r\n\r\n// 缓存优先级\r\nenum CachePriority {\r\n  LOW = 1,\r\n  NORMAL = 2,\r\n  HIGH = 3,\r\n  CRITICAL = 4,\r\n}\r\n\r\n// 缓存策略\r\nenum EvictionPolicy {\r\n  LRU = 'lru',           // 最近最少使用\r\n  LFU = 'lfu',           // 最少使用频率\r\n  TTL = 'ttl',           // 基于过期时间\r\n  PRIORITY = 'priority',  // 基于优先级\r\n  ADAPTIVE = 'adaptive',  // 自适应策略\r\n}\r\n\r\n// 缓存配置\r\ninterface CacheConfig {\r\n  maxSize: number;           // 最大缓存大小（字节）\r\n  maxItems: number;          // 最大缓存项数\r\n  defaultTTL: number;        // 默认TTL（毫秒）\r\n  evictionPolicy: EvictionPolicy;\r\n  compressionEnabled: boolean;\r\n  persistenceEnabled: boolean;\r\n  metricsEnabled: boolean;\r\n}\r\n\r\n// 缓存指标\r\ninterface CacheMetrics {\r\n  hits: number;\r\n  misses: number;\r\n  hitRate: number;\r\n  totalSize: number;\r\n  itemCount: number;\r\n  evictions: number;\r\n  compressionRatio: number;\r\n  memoryUsage: number;\r\n}\r\n\r\n// 缓存事件\r\ninterface CacheEvent {\r\n  type: 'hit' | 'miss' | 'set' | 'delete' | 'evict' | 'clear';\r\n  key: string;\r\n  timestamp: number;\r\n  metadata?: any;\r\n}\r\n\r\nexport class EnhancedCacheManager {\r\n  private static instance: EnhancedCacheManager;\r\n  private cache: Map<string, CacheItem> = new Map();\r\n  private logger = new Logger('EnhancedCacheManager');\r\n  private metrics: CacheMetrics;\r\n  private events: CacheEvent[] = [];\r\n  private cleanupInterval: NodeJS.Timeout | null = null;\r\n  private compressionWorker: Worker | null = null;\r\n\r\n  private readonly config: CacheConfig = {\r\n    maxSize: 100 * 1024 * 1024,      // 100MB\r\n    maxItems: 10000,                  // 10K items\r\n    defaultTTL: 300000,               // 5分钟\r\n    evictionPolicy: EvictionPolicy.ADAPTIVE,\r\n    compressionEnabled: true,\r\n    persistenceEnabled: false,\r\n    metricsEnabled: true,\r\n  };\r\n\r\n  private constructor() {\r\n    this.initializeMetrics();\r\n    this.startCleanupProcess();\r\n    this.initializeCompression();\r\n    this.setupMemoryMonitoring();\r\n  }\r\n\r\n  public static getInstance(): EnhancedCacheManager {\r\n    if (!EnhancedCacheManager.instance) {\r\n      EnhancedCacheManager.instance = new EnhancedCacheManager();\r\n    }\r\n    return EnhancedCacheManager.instance;\r\n  }\r\n\r\n  /**\r\n   * 初始化指标\r\n   */\r\n  private initializeMetrics(): void {\r\n    this.metrics = {\r\n      hits: 0,\r\n      misses: 0,\r\n      hitRate: 0,\r\n      totalSize: 0,\r\n      itemCount: 0,\r\n      evictions: 0,\r\n      compressionRatio: 1.0,\r\n      memoryUsage: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 设置缓存项\r\n   */\r\n  async set<T>(\r\n    key: string,\r\n    value: T,\r\n    options: {\r\n      ttl?: number;\r\n      tags?: string[];\r\n      priority?: CachePriority;\r\n      compress?: boolean;\r\n    } = {}\r\n  ): Promise<void> {\r\n    try {\r\n      const {\r\n        ttl = this.config.defaultTTL,\r\n        tags = [],\r\n        priority = CachePriority.NORMAL,\r\n        compress = this.config.compressionEnabled,\r\n      } = options;\r\n\r\n      // 序列化和压缩\r\n      let serializedValue = JSON.stringify(value);\r\n      let size = Buffer.byteLength(serializedValue, 'utf8');\r\n\r\n      if (compress && size > 1024) { // 只压缩大于1KB的数据\r\n        serializedValue = await this.compressData(serializedValue);\r\n        size = Buffer.byteLength(serializedValue, 'utf8');\r\n      }\r\n\r\n      const item: CacheItem<T> = {\r\n        key,\r\n        value: serializedValue as any,\r\n        expiry: Date.now() + ttl,\r\n        hits: 0,\r\n        lastAccessed: Date.now(),\r\n        size,\r\n        tags,\r\n        priority,\r\n      };\r\n\r\n      // 检查是否需要清理空间\r\n      await this.ensureSpace(size);\r\n\r\n      // 设置缓存项\r\n      this.cache.set(key, item);\r\n      this.updateMetrics('set', key, size);\r\n      this.emitEvent('set', key);\r\n\r\n      this.logger.debug('Cache item set', {\r\n        key,\r\n        size,\r\n        ttl,\r\n        priority,\r\n        compressed: compress && size < Buffer.byteLength(JSON.stringify(value), 'utf8'),\r\n      });\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to set cache item', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取缓存项\r\n   */\r\n  async get<T>(key: string): Promise<T | null> {\r\n    try {\r\n      const item = this.cache.get(key);\r\n\r\n      if (!item) {\r\n        this.updateMetrics('miss', key);\r\n        this.emitEvent('miss', key);\r\n        return null;\r\n      }\r\n\r\n      // 检查过期\r\n      if (Date.now() > item.expiry) {\r\n        this.cache.delete(key);\r\n        this.updateMetrics('miss', key);\r\n        this.emitEvent('miss', key);\r\n        return null;\r\n      }\r\n\r\n      // 更新访问信息\r\n      item.hits++;\r\n      item.lastAccessed = Date.now();\r\n\r\n      // 解压缩和反序列化\r\n      let value = item.value;\r\n      if (typeof value === 'string' && this.isCompressed(value)) {\r\n        value = await this.decompressData(value);\r\n      }\r\n\r\n      const result = typeof value === 'string' ? JSON.parse(value) : value;\r\n\r\n      this.updateMetrics('hit', key);\r\n      this.emitEvent('hit', key);\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      this.logger.error('Failed to get cache item', {\r\n        key,\r\n        error: error.message,\r\n      });\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除缓存项\r\n   */\r\n  delete(key: string): boolean {\r\n    const item = this.cache.get(key);\r\n    if (item) {\r\n      this.cache.delete(key);\r\n      this.updateMetrics('delete', key, -item.size);\r\n      this.emitEvent('delete', key);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 批量删除（按标签）\r\n   */\r\n  deleteByTags(tags: string[]): number {\r\n    let deletedCount = 0;\r\n    \r\n    for (const [key, item] of this.cache.entries()) {\r\n      if (item.tags.some(tag => tags.includes(tag))) {\r\n        this.cache.delete(key);\r\n        this.updateMetrics('delete', key, -item.size);\r\n        this.emitEvent('delete', key);\r\n        deletedCount++;\r\n      }\r\n    }\r\n\r\n    this.logger.info('Deleted cache items by tags', {\r\n      tags,\r\n      deletedCount,\r\n    });\r\n\r\n    return deletedCount;\r\n  }\r\n\r\n  /**\r\n   * 清空缓存\r\n   */\r\n  clear(): void {\r\n    const itemCount = this.cache.size;\r\n    this.cache.clear();\r\n    this.initializeMetrics();\r\n    this.emitEvent('clear', 'all');\r\n    \r\n    this.logger.info('Cache cleared', { itemCount });\r\n  }\r\n\r\n  /**\r\n   * 检查缓存项是否存在\r\n   */\r\n  has(key: string): boolean {\r\n    const item = this.cache.get(key);\r\n    if (!item) return false;\r\n    \r\n    // 检查过期\r\n    if (Date.now() > item.expiry) {\r\n      this.cache.delete(key);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 获取缓存大小\r\n   */\r\n  size(): number {\r\n    return this.cache.size;\r\n  }\r\n\r\n  /**\r\n   * 获取缓存指标\r\n   */\r\n  getMetrics(): CacheMetrics {\r\n    this.updateCacheMetrics();\r\n    return { ...this.metrics };\r\n  }\r\n\r\n  /**\r\n   * 获取缓存键列表\r\n   */\r\n  keys(): string[] {\r\n    return Array.from(this.cache.keys());\r\n  }\r\n\r\n  /**\r\n   * 获取缓存项详情\r\n   */\r\n  getItemInfo(key: string): Partial<CacheItem> | null {\r\n    const item = this.cache.get(key);\r\n    if (!item) return null;\r\n\r\n    return {\r\n      key: item.key,\r\n      expiry: item.expiry,\r\n      hits: item.hits,\r\n      lastAccessed: item.lastAccessed,\r\n      size: item.size,\r\n      tags: item.tags,\r\n      priority: item.priority,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 确保有足够空间\r\n   */\r\n  private async ensureSpace(requiredSize: number): Promise<void> {\r\n    const currentSize = this.calculateTotalSize();\r\n    const currentCount = this.cache.size;\r\n\r\n    // 检查大小限制\r\n    if (currentSize + requiredSize > this.config.maxSize) {\r\n      await this.evictItems(currentSize + requiredSize - this.config.maxSize);\r\n    }\r\n\r\n    // 检查数量限制\r\n    if (currentCount >= this.config.maxItems) {\r\n      await this.evictItems(0, currentCount - this.config.maxItems + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理过期项\r\n   */\r\n  private cleanupExpiredItems(): number {\r\n    const now = Date.now();\r\n    let cleanedCount = 0;\r\n\r\n    for (const [key, item] of this.cache.entries()) {\r\n      if (now > item.expiry) {\r\n        this.cache.delete(key);\r\n        this.updateMetrics('evict', key, -item.size);\r\n        this.emitEvent('evict', key);\r\n        cleanedCount++;\r\n      }\r\n    }\r\n\r\n    if (cleanedCount > 0) {\r\n      this.logger.debug('Cleaned up expired items', { count: cleanedCount });\r\n    }\r\n\r\n    return cleanedCount;\r\n  }\r\n\r\n  /**\r\n   * 清理项目（基于策略）\r\n   */\r\n  private async evictItems(targetSize: number, targetCount: number = 0): Promise<void> {\r\n    const items = Array.from(this.cache.entries());\r\n    let evictedSize = 0;\r\n    let evictedCount = 0;\r\n\r\n    // 根据策略排序\r\n    const sortedItems = this.sortItemsForEviction(items);\r\n\r\n    for (const [key, item] of sortedItems) {\r\n      if (evictedSize >= targetSize && evictedCount >= targetCount) {\r\n        break;\r\n      }\r\n\r\n      this.cache.delete(key);\r\n      evictedSize += item.size;\r\n      evictedCount++;\r\n      this.updateMetrics('evict', key, -item.size);\r\n      this.emitEvent('evict', key);\r\n    }\r\n\r\n    this.logger.info('Evicted cache items', {\r\n      count: evictedCount,\r\n      size: evictedSize,\r\n      policy: this.config.evictionPolicy,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据清理策略排序项目\r\n   */\r\n  private sortItemsForEviction(items: [string, CacheItem][]): [string, CacheItem][] {\r\n    switch (this.config.evictionPolicy) {\r\n      case EvictionPolicy.LRU:\r\n        return items.sort((a, b) => a[1].lastAccessed - b[1].lastAccessed);\r\n      \r\n      case EvictionPolicy.LFU:\r\n        return items.sort((a, b) => a[1].hits - b[1].hits);\r\n      \r\n      case EvictionPolicy.TTL:\r\n        return items.sort((a, b) => a[1].expiry - b[1].expiry);\r\n      \r\n      case EvictionPolicy.PRIORITY:\r\n        return items.sort((a, b) => a[1].priority - b[1].priority);\r\n      \r\n      case EvictionPolicy.ADAPTIVE:\r\n        return this.adaptiveSort(items);\r\n      \r\n      default:\r\n        return items;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 自适应排序算法\r\n   */\r\n  private adaptiveSort(items: [string, CacheItem][]): [string, CacheItem][] {\r\n    const now = Date.now();\r\n    \r\n    return items.sort((a, b) => {\r\n      const itemA = a[1];\r\n      const itemB = b[1];\r\n      \r\n      // 综合评分：优先级 + 命中率 + 新鲜度\r\n      const scoreA = this.calculateAdaptiveScore(itemA, now);\r\n      const scoreB = this.calculateAdaptiveScore(itemB, now);\r\n      \r\n      return scoreA - scoreB; // 分数低的先清理\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 计算自适应评分\r\n   */\r\n  private calculateAdaptiveScore(item: CacheItem, now: number): number {\r\n    const priorityWeight = 0.4;\r\n    const hitRateWeight = 0.3;\r\n    const freshnessWeight = 0.3;\r\n\r\n    // 优先级评分 (1-4 -> 0.25-1.0)\r\n    const priorityScore = item.priority / 4;\r\n\r\n    // 命中率评分\r\n    const hitRate = item.hits / Math.max(1, (now - (item.expiry - this.config.defaultTTL)) / 60000);\r\n    const hitRateScore = Math.min(1, hitRate / 10); // 假设10次/分钟为满分\r\n\r\n    // 新鲜度评分\r\n    const age = now - (item.expiry - this.config.defaultTTL);\r\n    const freshnessScore = Math.max(0, 1 - age / this.config.defaultTTL);\r\n\r\n    return priorityScore * priorityWeight + \r\n           hitRateScore * hitRateWeight + \r\n           freshnessScore * freshnessWeight;\r\n  }\r\n\r\n  /**\r\n   * 计算总大小\r\n   */\r\n  private calculateTotalSize(): number {\r\n    let totalSize = 0;\r\n    for (const item of this.cache.values()) {\r\n      totalSize += item.size;\r\n    }\r\n    return totalSize;\r\n  }\r\n\r\n  /**\r\n   * 更新指标\r\n   */\r\n  private updateMetrics(operation: string, key: string, sizeChange: number = 0): void {\r\n    if (!this.config.metricsEnabled) return;\r\n\r\n    switch (operation) {\r\n      case 'hit':\r\n        this.metrics.hits++;\r\n        break;\r\n      case 'miss':\r\n        this.metrics.misses++;\r\n        break;\r\n      case 'set':\r\n        this.metrics.itemCount++;\r\n        this.metrics.totalSize += sizeChange;\r\n        break;\r\n      case 'delete':\r\n      case 'evict':\r\n        this.metrics.itemCount--;\r\n        this.metrics.totalSize += sizeChange; // sizeChange is negative\r\n        if (operation === 'evict') {\r\n          this.metrics.evictions++;\r\n        }\r\n        break;\r\n    }\r\n\r\n    // 更新命中率\r\n    const totalRequests = this.metrics.hits + this.metrics.misses;\r\n    this.metrics.hitRate = totalRequests > 0 ? (this.metrics.hits / totalRequests) * 100 : 0;\r\n  }\r\n\r\n  /**\r\n   * 更新缓存指标\r\n   */\r\n  private updateCacheMetrics(): void {\r\n    this.metrics.itemCount = this.cache.size;\r\n    this.metrics.totalSize = this.calculateTotalSize();\r\n    this.metrics.memoryUsage = process.memoryUsage().heapUsed;\r\n  }\r\n\r\n  /**\r\n   * 发出事件\r\n   */\r\n  private emitEvent(type: CacheEvent['type'], key: string, metadata?: any): void {\r\n    const event: CacheEvent = {\r\n      type,\r\n      key,\r\n      timestamp: Date.now(),\r\n      metadata,\r\n    };\r\n\r\n    this.events.push(event);\r\n\r\n    // 保持事件历史在合理范围内\r\n    if (this.events.length > 1000) {\r\n      this.events = this.events.slice(-500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动清理进程\r\n   */\r\n  private startCleanupProcess(): void {\r\n    this.cleanupInterval = setInterval(() => {\r\n      this.cleanupExpiredItems();\r\n      this.optimizeMemoryUsage();\r\n    }, 60000); // 每分钟清理一次\r\n\r\n    this.logger.info('Cache cleanup process started');\r\n  }\r\n\r\n  /**\r\n   * 优化内存使用\r\n   */\r\n  private optimizeMemoryUsage(): void {\r\n    const memoryUsage = process.memoryUsage();\r\n    const heapUsedMB = memoryUsage.heapUsed / 1024 / 1024;\r\n    const heapTotalMB = memoryUsage.heapTotal / 1024 / 1024;\r\n    const usagePercent = (heapUsedMB / heapTotalMB) * 100;\r\n\r\n    // 如果内存使用超过80%，主动清理缓存\r\n    if (usagePercent > 80) {\r\n      const targetReduction = this.metrics.totalSize * 0.2; // 减少20%\r\n      this.evictItems(targetReduction);\r\n      \r\n      this.logger.warn('High memory usage detected, cache optimized', {\r\n        heapUsedMB: Math.round(heapUsedMB),\r\n        heapTotalMB: Math.round(heapTotalMB),\r\n        usagePercent: Math.round(usagePercent),\r\n        reducedSize: targetReduction,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化压缩\r\n   */\r\n  private initializeCompression(): void {\r\n    if (!this.config.compressionEnabled) return;\r\n\r\n    // 这里可以初始化压缩工作线程\r\n    // 为了简化，我们使用同步压缩\r\n    this.logger.info('Compression enabled for cache');\r\n  }\r\n\r\n  /**\r\n   * 压缩数据\r\n   */\r\n  private async compressData(data: string): Promise<string> {\r\n    if (!this.config.compressionEnabled) return data;\r\n\r\n    try {\r\n      // 简单的压缩实现（实际应该使用更好的压缩算法）\r\n      const compressed = Buffer.from(data).toString('base64');\r\n      return `__COMPRESSED__${compressed}`;\r\n    } catch (error) {\r\n      this.logger.warn('Compression failed, using original data', {\r\n        error: error.message,\r\n      });\r\n      return data;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解压缩数据\r\n   */\r\n  private async decompressData(data: string): Promise<string> {\r\n    if (!this.isCompressed(data)) return data;\r\n\r\n    try {\r\n      const compressed = data.replace('__COMPRESSED__', '');\r\n      return Buffer.from(compressed, 'base64').toString();\r\n    } catch (error) {\r\n      this.logger.warn('Decompression failed', {\r\n        error: error.message,\r\n      });\r\n      return data;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查是否为压缩数据\r\n   */\r\n  private isCompressed(data: string): boolean {\r\n    return typeof data === 'string' && data.startsWith('__COMPRESSED__');\r\n  }\r\n\r\n  /**\r\n   * 设置内存监控\r\n   */\r\n  private setupMemoryMonitoring(): void {\r\n    setInterval(() => {\r\n      this.updateCacheMetrics();\r\n    }, 30000); // 每30秒更新一次指标\r\n  }\r\n\r\n  /**\r\n   * 获取缓存事件\r\n   */\r\n  getEvents(limit: number = 100): CacheEvent[] {\r\n    return this.events.slice(-limit);\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计\r\n   */\r\n  getStats(): any {\r\n    const metrics = this.getMetrics();\r\n    const topKeys = this.getTopKeys(10);\r\n    \r\n    return {\r\n      metrics,\r\n      topKeys,\r\n      config: this.config,\r\n      memoryUsage: {\r\n        heapUsed: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\r\n        heapTotal: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 获取热门键\r\n   */\r\n  private getTopKeys(limit: number): Array<{ key: string; hits: number; size: number }> {\r\n    return Array.from(this.cache.entries())\r\n      .map(([key, item]) => ({\r\n        key,\r\n        hits: item.hits,\r\n        size: item.size,\r\n      }))\r\n      .sort((a, b) => b.hits - a.hits)\r\n      .slice(0, limit);\r\n  }\r\n\r\n  /**\r\n   * 优雅关闭\r\n   */\r\n  async gracefulShutdown(): Promise<void> {\r\n    this.logger.info('Starting cache graceful shutdown');\r\n\r\n    if (this.cleanupInterval) {\r\n      clearInterval(this.cleanupInterval);\r\n    }\r\n\r\n    if (this.compressionWorker) {\r\n      this.compressionWorker.terminate();\r\n    }\r\n\r\n    // 如果启用持久化，这里可以保存缓存到磁盘\r\n    if (this.config.persistenceEnabled) {\r\n      await this.persistCache();\r\n    }\r\n\r\n    this.logger.info('Cache graceful shutdown completed');\r\n  }\r\n\r\n  /**\r\n   * 持久化缓存\r\n   */\r\n  private async persistCache(): Promise<void> {\r\n    // 实现缓存持久化逻辑\r\n    this.logger.info('Cache persistence not implemented yet');\r\n  }\r\n}\r\n\r\n// 导出单例实例\r\nexport const enhancedCacheManager = EnhancedCacheManager.getInstance();\r\n\r\n// 导出便捷方法\r\nexport const cacheSet = enhancedCacheManager.set.bind(enhancedCacheManager);\r\nexport const cacheGet = enhancedCacheManager.get.bind(enhancedCacheManager);\r\nexport const cacheDelete = enhancedCacheManager.delete.bind(enhancedCacheManager);\r\nexport const cacheClear = enhancedCacheManager.clear.bind(enhancedCacheManager);\r\nexport const cacheHas = enhancedCacheManager.has.bind(enhancedCacheManager); "],"names":["EnhancedCacheManager","cacheClear","cacheDelete","cacheGet","cacheHas","cacheSet","enhancedCacheManager","CachePriority","EvictionPolicy","cache","Map","logger","Logger","events","cleanupInterval","compressionWorker","config","maxSize","maxItems","defaultTTL","evictionPolicy","compressionEnabled","persistenceEnabled","metricsEnabled","initializeMetrics","startCleanupProcess","initializeCompression","setupMemoryMonitoring","getInstance","instance","metrics","hits","misses","hitRate","totalSize","itemCount","evictions","compressionRatio","memoryUsage","set","key","value","options","ttl","tags","priority","compress","serializedValue","JSON","stringify","size","Buffer","byteLength","compressData","item","expiry","Date","now","lastAccessed","ensureSpace","updateMetrics","emitEvent","debug","compressed","error","message","get","delete","isCompressed","decompressData","result","parse","deleteByTags","deletedCount","entries","some","tag","includes","info","clear","has","getMetrics","updateCacheMetrics","keys","Array","from","getItemInfo","requiredSize","currentSize","calculateTotalSize","currentCount","evictItems","cleanupExpiredItems","cleanedCount","count","targetSize","targetCount","items","evictedSize","evictedCount","sortedItems","sortItemsForEviction","policy","sort","a","b","adaptiveSort","itemA","itemB","scoreA","calculateAdaptiveScore","scoreB","priorityWeight","hitRateWeight","freshnessWeight","priorityScore","Math","max","hitRateScore","min","age","freshnessScore","values","operation","sizeChange","totalRequests","process","heapUsed","type","metadata","event","timestamp","push","length","slice","setInterval","optimizeMemoryUsage","heapUsedMB","heapTotalMB","heapTotal","usagePercent","targetReduction","warn","round","reducedSize","data","toString","replace","startsWith","getEvents","limit","getStats","topKeys","getTopKeys","map","gracefulShutdown","clearInterval","terminate","persistCache","bind"],"mappings":"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"}