{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\db.test.ts"],"sourcesContent":["/**\n * 数据库API路由错误处理测试\n * 测试数据库连接、查询、事务、备份等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '@/app/api/db/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '@/lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/database/connection-manager', () => ({\n  getConnection: jest.fn(),\n  createConnection: jest.fn(),\n  closeConnection: jest.fn(),\n  testConnection: jest.fn(),\n  getConnectionStatus: jest.fn(),\n  resetConnectionPool: jest.fn(),\n  validateConnectionConfig: jest.fn()\n}));\n\njest.mock('../../../lib/database/query-executor', () => ({\n  executeQuery: jest.fn(),\n  executeTransaction: jest.fn(),\n  executeBatch: jest.fn(),\n  validateQuery: jest.fn(),\n  optimizeQuery: jest.fn(),\n  getQueryPlan: jest.fn(),\n  cancelQuery: jest.fn()\n}));\n\njest.mock('../../../lib/database/schema-manager', () => ({\n  validateSchema: jest.fn(),\n  createTable: jest.fn(),\n  alterTable: jest.fn(),\n  dropTable: jest.fn(),\n  createIndex: jest.fn(),\n  dropIndex: jest.fn(),\n  getTableInfo: jest.fn(),\n  validateTableStructure: jest.fn()\n}));\n\njest.mock('../../../lib/database/backup-manager', () => ({\n  createBackup: jest.fn(),\n  restoreBackup: jest.fn(),\n  listBackups: jest.fn(),\n  deleteBackup: jest.fn(),\n  validateBackup: jest.fn(),\n  scheduleBackup: jest.fn(),\n  getBackupStatus: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkAdminPermissions: jest.fn(),\n  checkDatabasePermissions: jest.fn()\n}));\n\ndescribe('Database API Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/db - Database Status and Query', () => {\n    it('should handle database connection failure', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.error.code).toBe('DATABASE_ERROR');\n      expect(data.error.message).toContain('Database connection failed');\n    });\n\n    it('should handle database connection timeout', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Connection timeout after 30 seconds'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error.message).toContain('Connection timeout');\n    });\n\n    it('should handle invalid database credentials', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Authentication failed for database user'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\n      expect(data.error.message).toContain('Authentication failed');\n    });\n\n    it('should handle database not found', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Database \"nonexistent_db\" does not exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status&database=nonexistent_db');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Database \"nonexistent_db\" does not exist');\n    });\n\n    it('should handle connection pool exhaustion', async () => {\n      const { getConnection } = require('../../../lib/database/connection-manager');\n      getConnection.mockRejectedValue(new Error('Connection pool exhausted: maximum 100 connections reached'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Connection pool exhausted');\n    });\n\n    it('should handle invalid SQL query', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Syntax error in SQL query at line 1'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=INVALID SQL');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Syntax error in SQL query');\n    });\n\n    it('should handle query execution timeout', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Query execution timeout after 60 seconds'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM large_table');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error.message).toContain('Query execution timeout');\n    });\n\n    it('should handle insufficient database permissions', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Permission denied for table \"restricted_table\"'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM restricted_table', {\n        headers: { 'Authorization': 'Bearer limited-user-token' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n      expect(data.error.message).toContain('Permission denied');\n    });\n\n    it('should handle table not found', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Table \"nonexistent_table\" doesn\\'t exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM nonexistent_table');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.message).toContain('Table \"nonexistent_table\" doesn\\'t exist');\n    });\n\n    it('should handle database disk space full', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Disk full: cannot write to database'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=INSERT INTO logs VALUES (1, \\'test\\')');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient Storage\n      expect(data.error.message).toContain('Disk full');\n    });\n\n    it('should handle database corruption', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Database corruption detected in table \"users\"'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM users');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Database corruption detected');\n    });\n  });\n\n  describe('POST /api/db - Database Operations', () => {\n    let validOperationData: any;\n\n    beforeEach(() => {\n      validOperationData = {\n        operation: 'create_table',\n        tableName: 'test_table',\n        schema: {\n          columns: [\n            { name: 'id', type: 'INTEGER', primaryKey: true },\n            { name: 'name', type: 'VARCHAR(255)', nullable: false },\n            { name: 'created_at', type: 'TIMESTAMP', default: 'CURRENT_TIMESTAMP' }\n          ]\n        }\n      };\n    });\n\n    it('should handle missing operation type', async () => {\n      const invalidData = { ...validOperationData };\n      delete invalidData.operation;\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(invalidData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('operation');\n    });\n\n    it('should handle invalid table schema', async () => {\n      const { validateSchema } = require('../../../lib/database/schema-manager');\n      validateSchema.mockRejectedValue(new Error('Invalid column type: INVALID_TYPE'));\n\n      const invalidSchemaData = {\n        ...validOperationData,\n        schema: {\n          columns: [\n            { name: 'id', type: 'INVALID_TYPE' }\n          ]\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(invalidSchemaData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid column type');\n    });\n\n    it('should handle table already exists', async () => {\n      const { createTable } = require('../../../lib/database/schema-manager');\n      createTable.mockRejectedValue(new Error('Table \"test_table\" already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(validOperationData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.code).toBe('CONFLICT');\n      expect(data.error.message).toContain('Table \"test_table\" already exists');\n    });\n\n    it('should handle transaction rollback', async () => {\n      const { executeTransaction } = require('../../../lib/database/query-executor');\n      executeTransaction.mockRejectedValue(new Error('Transaction rolled back due to constraint violation'));\n\n      const transactionData = {\n        operation: 'transaction',\n        queries: [\n          'INSERT INTO users (name) VALUES (\\'John\\')',\n          'INSERT INTO users (name) VALUES (\\'Jane\\')',\n          'INSERT INTO users (name) VALUES (NULL)' // This should fail\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(transactionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Transaction rolled back');\n    });\n\n    it('should handle foreign key constraint violation', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Foreign key constraint violation: referenced record does not exist'));\n\n      const insertData = {\n        operation: 'insert',\n        table: 'orders',\n        data: {\n          user_id: 999, // Non-existent user\n          product_id: 1,\n          quantity: 2\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(insertData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Foreign key constraint violation');\n    });\n\n    it('should handle unique constraint violation', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Unique constraint violation: duplicate key value'));\n\n      const insertData = {\n        operation: 'insert',\n        table: 'users',\n        data: {\n          email: 'existing@example.com', // Already exists\n          name: 'New User'\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(insertData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Unique constraint violation');\n    });\n\n    it('should handle deadlock detection', async () => {\n      const { executeTransaction } = require('../../../lib/database/query-executor');\n      executeTransaction.mockRejectedValue(new Error('Deadlock detected and resolved by rolling back transaction'));\n\n      const transactionData = {\n        operation: 'transaction',\n        queries: [\n          'UPDATE accounts SET balance = balance - 100 WHERE id = 1',\n          'UPDATE accounts SET balance = balance + 100 WHERE id = 2'\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(transactionData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Deadlock detected');\n    });\n\n    it('should handle batch operation with partial failures', async () => {\n      const { executeBatch } = require('../../../lib/database/query-executor');\n      executeBatch.mockRejectedValue(new Error('Batch operation failed: 2 of 5 operations succeeded'));\n\n      const batchData = {\n        operation: 'batch',\n        operations: [\n          { type: 'insert', table: 'users', data: { name: 'User1' } },\n          { type: 'insert', table: 'users', data: { name: 'User2' } },\n          { type: 'insert', table: 'users', data: { name: null } }, // Should fail\n          { type: 'insert', table: 'users', data: { name: 'User4' } },\n          { type: 'insert', table: 'users', data: { name: 'User5' } }\n        ]\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(batchData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.error.message).toContain('Batch operation failed');\n    });\n\n    it('should handle database backup creation failure', async () => {\n      const { createBackup } = require('../../../lib/database/backup-manager');\n      createBackup.mockRejectedValue(new Error('Backup creation failed: insufficient disk space'));\n\n      const backupData = {\n        operation: 'backup',\n        type: 'full',\n        destination: '/backups/db_backup_20231201.sql'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(backupData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507);\n      expect(data.error.message).toContain('Backup creation failed');\n    });\n\n    it('should handle database restore failure', async () => {\n      const { restoreBackup } = require('../../../lib/database/backup-manager');\n      restoreBackup.mockRejectedValue(new Error('Restore failed: backup file is corrupted'));\n\n      const restoreData = {\n        operation: 'restore',\n        backupFile: '/backups/corrupted_backup.sql',\n        targetDatabase: 'test_db'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(restoreData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(422);\n      expect(data.error.message).toContain('Restore failed: backup file is corrupted');\n    });\n  });\n\n  describe('PUT /api/db - Database Updates', () => {\n    it('should handle table structure modification failure', async () => {\n      const { alterTable } = require('../../../lib/database/schema-manager');\n      alterTable.mockRejectedValue(new Error('Cannot drop column: column is referenced by foreign key'));\n\n      const alterData = {\n        table: 'users',\n        operation: 'drop_column',\n        column: 'id'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(alterData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot drop column');\n    });\n\n    it('should handle index creation failure', async () => {\n      const { createIndex } = require('../../../lib/database/schema-manager');\n      createIndex.mockRejectedValue(new Error('Index creation failed: column does not exist'));\n\n      const indexData = {\n        table: 'users',\n        operation: 'create_index',\n        indexName: 'idx_nonexistent',\n        columns: ['nonexistent_column']\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(indexData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Index creation failed');\n    });\n\n    it('should handle concurrent schema modification', async () => {\n      const { alterTable } = require('../../../lib/database/schema-manager');\n      alterTable.mockRejectedValue(new Error('Table is being modified by another process'));\n\n      const alterData = {\n        table: 'users',\n        operation: 'add_column',\n        column: { name: 'new_field', type: 'VARCHAR(100)' }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(alterData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Table is being modified by another process');\n    });\n\n    it('should handle data type conversion failure', async () => {\n      const { alterTable } = require('../../../lib/database/schema-manager');\n      alterTable.mockRejectedValue(new Error('Cannot convert VARCHAR to INTEGER: invalid data in column'));\n\n      const alterData = {\n        table: 'users',\n        operation: 'modify_column',\n        column: { name: 'phone', oldType: 'VARCHAR(20)', newType: 'INTEGER' }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'PUT',\n        body: JSON.stringify(alterData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot convert VARCHAR to INTEGER');\n    });\n  });\n\n  describe('DELETE /api/db - Database Deletion Operations', () => {\n    it('should handle table not found for deletion', async () => {\n      const { dropTable } = require('../../../lib/database/schema-manager');\n      dropTable.mockRejectedValue(new Error('Table \"nonexistent_table\" does not exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?table=nonexistent_table', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('Table \"nonexistent_table\" does not exist');\n    });\n\n    it('should handle table with foreign key references', async () => {\n      const { dropTable } = require('../../../lib/database/schema-manager');\n      dropTable.mockRejectedValue(new Error('Cannot drop table: referenced by foreign key constraints'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?table=users', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot drop table: referenced by foreign key constraints');\n    });\n\n    it('should handle backup deletion failure', async () => {\n      const { deleteBackup } = require('../../../lib/database/backup-manager');\n      deleteBackup.mockRejectedValue(new Error('Cannot delete backup: file is in use'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?backup=backup_20231201.sql', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Cannot delete backup: file is in use');\n    });\n\n    it('should handle unauthorized table deletion', async () => {\n      const { checkDatabasePermissions } = require('../../../lib/auth/session');\n      checkDatabasePermissions.mockRejectedValue(new Error('Insufficient permissions to drop table'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?table=critical_table', {\n        method: 'DELETE',\n        headers: { 'Authorization': 'Bearer limited-user-token' }\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n  });\n\n  describe('Database Connection Management', () => {\n    it('should handle connection pool reset failure', async () => {\n      const { resetConnectionPool } = require('../../../lib/database/connection-manager');\n      resetConnectionPool.mockRejectedValue(new Error('Failed to reset connection pool: active connections exist'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=reset_pool', {\n        method: 'POST'\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Failed to reset connection pool');\n    });\n\n    it('should handle invalid connection configuration', async () => {\n      const { validateConnectionConfig } = require('../../../lib/database/connection-manager');\n      validateConnectionConfig.mockRejectedValue(new Error('Invalid connection configuration: missing host'));\n\n      const configData = {\n        operation: 'test_connection',\n        config: {\n          database: 'test_db',\n          user: 'test_user',\n          password: 'test_pass'\n          // Missing host\n        }\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(configData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid connection configuration');\n    });\n\n    it('should handle connection leak detection', async () => {\n      const { getConnectionStatus } = require('../../../lib/database/connection-manager');\n      getConnectionStatus.mockRejectedValue(new Error('Connection leak detected: 95 of 100 connections in use'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=connection_status');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Connection leak detected');\n    });\n  });\n\n  describe('Query Optimization and Performance', () => {\n    it('should handle query optimization failure', async () => {\n      const { optimizeQuery } = require('../../../lib/database/query-executor');\n      optimizeQuery.mockRejectedValue(new Error('Query optimization failed: query too complex'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=optimize&sql=SELECT * FROM users WHERE complex_condition');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(422);\n      expect(data.error.message).toContain('Query optimization failed');\n    });\n\n    it('should handle query plan generation failure', async () => {\n      const { getQueryPlan } = require('../../../lib/database/query-executor');\n      getQueryPlan.mockRejectedValue(new Error('Cannot generate query plan: invalid query structure'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=explain&sql=INVALID QUERY');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Cannot generate query plan');\n    });\n\n    it('should handle query cancellation failure', async () => {\n      const { cancelQuery } = require('../../../lib/database/query-executor');\n      cancelQuery.mockRejectedValue(new Error('Cannot cancel query: query has already completed'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=cancel&queryId=query-123', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(410);\n      expect(data.error.message).toContain('Cannot cancel query: query has already completed');\n    });\n  });\n\n  describe('Database Monitoring and Health', () => {\n    it('should handle database health check failure', async () => {\n      const { testConnection } = require('../../../lib/database/connection-manager');\n      testConnection.mockRejectedValue(new Error('Database health check failed: high CPU usage'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=health');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Database health check failed');\n    });\n\n    it('should handle backup validation failure', async () => {\n      const { validateBackup } = require('../../../lib/database/backup-manager');\n      validateBackup.mockRejectedValue(new Error('Backup validation failed: checksum mismatch'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=validate_backup&file=backup.sql');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(422);\n      expect(data.error.message).toContain('Backup validation failed');\n    });\n\n    it('should handle backup scheduling conflict', async () => {\n      const { scheduleBackup } = require('../../../lib/database/backup-manager');\n      scheduleBackup.mockRejectedValue(new Error('Backup scheduling conflict: another backup is already scheduled'));\n\n      const scheduleData = {\n        operation: 'schedule_backup',\n        schedule: '0 2 * * *', // Daily at 2 AM\n        type: 'full'\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/db', {\n        method: 'POST',\n        body: JSON.stringify(scheduleData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Backup scheduling conflict');\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide database operation recovery suggestions', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Database temporarily unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT 1');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry database operation');\n    });\n\n    it('should track database operation performance', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT 1');\n      await GET(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include database context in error responses', async () => {\n      const { executeQuery } = require('../../../lib/database/query-executor');\n      executeQuery.mockRejectedValue(new Error('Test error'));\n\n      const request = new NextRequest('http://localhost:3000/api/db?action=query&sql=SELECT * FROM users');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('executeQuery');\n      expect(data.error.context.query).toContain('SELECT * FROM users');\n    });\n  });\n});"],"names":["jest","mock","getConnection","fn","createConnection","closeConnection","testConnection","getConnectionStatus","resetConnectionPool","validateConnectionConfig","executeQuery","executeTransaction","executeBatch","validateQuery","optimizeQuery","getQueryPlan","cancelQuery","validateSchema","createTable","alterTable","dropTable","createIndex","dropIndex","getTableInfo","validateTableStructure","createBackup","restoreBackup","listBackups","deleteBackup","validateBackup","scheduleBackup","getBackupStatus","validateSession","checkAdminPermissions","checkDatabasePermissions","describe","errorHandler","beforeEach","GlobalErrorHandler","getInstance","clearAllMocks","it","require","mockRejectedValue","Error","request","NextRequest","response","GET","data","json","expect","status","toBe","success","error","code","message","toContain","headers","validOperationData","operation","tableName","schema","columns","name","type","primaryKey","nullable","default","invalidData","method","body","JSON","stringify","POST","details","invalidSchemaData","transactionData","queries","insertData","table","user_id","product_id","quantity","email","batchData","operations","backupData","destination","restoreData","backupFile","targetDatabase","alterData","column","PUT","indexData","indexName","oldType","newType","DELETE","configData","config","database","user","password","scheduleData","schedule","recovery","toBeDefined","suggestions","stats","getErrorStats","errorCount","toBeGreaterThan","context","query"],"mappings":"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"}