222774b73cfa87a953d3607e6d23dc72
/**
 * @file fastgpt.test.ts
 * @description FastGPT相关API路由错误处理测试
 * @author ZK-Agent Team
 * @date 2025-01-27
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _vitest = require("vitest");
const _server = require("next/server");
const _route = require("../../../app/api/fastgpt/chat/route");
const _route1 = require("../../../app/api/fastgpt/test-connection/route");
const _route2 = require("../../../app/api/fastgpt/health/route");
const _route3 = require("../../../app/api/fastgpt/init-chat/route");
const _route4 = require("../../../app/api/fastgpt/feedback/route");
const _globalerrorhandler = require("../../../lib/middleware/global-error-handler");
(0, _vitest.describe)('FastGPT API Routes Error Handling', ()=>{
    let errorHandler;
    (0, _vitest.beforeEach)(()=>{
        errorHandler = _globalerrorhandler.GlobalErrorHandler.getInstance();
        errorHandler.reset?.();
        _vitest.vi.clearAllMocks();
    });
    (0, _vitest.afterEach)(()=>{
        errorHandler.reset?.();
    });
    (0, _vitest.describe)('Chat Route (/api/fastgpt/chat)', ()=>{
        (0, _vitest.it)('should handle missing API key error', async ()=>{
            // Mock missing API key
            const originalApiKey = process.env['FASTGPT_API_KEY'];
            delete process.env['FASTGPT_API_KEY'];
            try {
                const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        messages: [
                            {
                                role: 'user',
                                content: 'Hello'
                            }
                        ]
                    })
                });
                const response = await (0, _route.POST)(request);
                const data = await response.json();
                (0, _vitest.expect)(response.status).toBe(500);
                (0, _vitest.expect)(data.error).toBeDefined();
                (0, _vitest.expect)(data.code).toBe('CONFIGURATION_ERROR');
            } finally{
                if (originalApiKey) {
                    process.env['FASTGPT_API_KEY'] = originalApiKey;
                }
            }
        });
        (0, _vitest.it)('should handle invalid message format error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: 'invalid format'
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, _vitest.it)('should handle FastGPT API timeout error', async ()=>{
            // Mock fetch to simulate timeout
            global.fetch = _vitest.vi.fn().mockImplementation(()=>new Promise((_, reject)=>setTimeout(()=>reject(new Error('Request timeout')), 100)));
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: [
                        {
                            role: 'user',
                            content: 'Hello'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(504);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('TIMEOUT_ERROR');
        });
        (0, _vitest.it)('should handle FastGPT API rate limit error', async ()=>{
            // Mock fetch to simulate rate limit
            global.fetch = _vitest.vi.fn().mockResolvedValue({
                ok: false,
                status: 429,
                json: ()=>Promise.resolve({
                        error: 'Rate limit exceeded'
                    })
            });
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: [
                        {
                            role: 'user',
                            content: 'Hello'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(429);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('RATE_LIMIT_ERROR');
        });
        (0, _vitest.it)('should handle FastGPT API server error', async ()=>{
            // Mock fetch to simulate server error
            global.fetch = _vitest.vi.fn().mockResolvedValue({
                ok: false,
                status: 500,
                json: ()=>Promise.resolve({
                        error: 'Internal server error'
                    })
            });
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: [
                        {
                            role: 'user',
                            content: 'Hello'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(502);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('EXTERNAL_API_ERROR');
        });
    });
    (0, _vitest.describe)('Test Connection Route (/api/fastgpt/test-connection)', ()=>{
        (0, _vitest.it)('should handle missing base URL error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/test-connection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    useProxy: false
                })
            });
            const response = await (0, _route1.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, _vitest.it)('should handle invalid URL format error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/test-connection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    baseUrl: 'invalid-url',
                    useProxy: false
                })
            });
            const response = await (0, _route1.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, _vitest.it)('should handle connection refused error', async ()=>{
            // Mock fetch to simulate connection refused
            global.fetch = _vitest.vi.fn().mockRejectedValue(new Error('ECONNREFUSED'));
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/test-connection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    baseUrl: 'https://unreachable-server.com',
                    useProxy: false
                })
            });
            const response = await (0, _route1.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(503);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('CONNECTION_ERROR');
        });
    });
    (0, _vitest.describe)('Health Route (/api/fastgpt/health)', ()=>{
        (0, _vitest.it)('should handle service unavailable error', async ()=>{
            // Mock fetch to simulate service unavailable
            global.fetch = _vitest.vi.fn().mockResolvedValue({
                ok: false,
                status: 503,
                json: ()=>Promise.resolve({
                        error: 'Service unavailable'
                    })
            });
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/health', {
                method: 'GET'
            });
            const response = await (0, _route2.GET)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(503);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('SERVICE_UNAVAILABLE');
        });
    });
    (0, _vitest.describe)('Init Chat Route (/api/fastgpt/init-chat)', ()=>{
        (0, _vitest.it)('should handle missing chat configuration error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/init-chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({})
            });
            const response = await (0, _route3.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
    });
    (0, _vitest.describe)('Feedback Route (/api/fastgpt/feedback)', ()=>{
        (0, _vitest.it)('should handle missing feedback data error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/feedback', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({})
            });
            const response = await (0, _route4.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
        (0, _vitest.it)('should handle invalid rating value error', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/feedback', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    rating: 10,
                    comment: 'Test feedback'
                })
            });
            const response = await (0, _route4.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(400);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('VALIDATION_ERROR');
        });
    });
    (0, _vitest.describe)('Error Recovery and Retry Logic', ()=>{
        (0, _vitest.it)('should implement exponential backoff for retries', async ()=>{
            let callCount = 0;
            global.fetch = _vitest.vi.fn().mockImplementation(()=>{
                callCount++;
                if (callCount < 3) {
                    return Promise.reject(new Error('Temporary failure'));
                }
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true
                        })
                });
            });
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: [
                        {
                            role: 'user',
                            content: 'Hello'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(request);
            (0, _vitest.expect)(callCount).toBe(3);
            (0, _vitest.expect)(response.status).toBe(200);
        });
        (0, _vitest.it)('should fallback to cached response on API failure', async ()=>{
            // Mock persistent API failure
            global.fetch = _vitest.vi.fn().mockRejectedValue(new Error('API unavailable'));
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: [
                        {
                            role: 'user',
                            content: 'Hello'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            // Should return fallback response instead of error
            (0, _vitest.expect)(response.status).toBe(200);
            (0, _vitest.expect)(data.fallback).toBe(true);
        });
    });
    (0, _vitest.describe)('Circuit Breaker Integration', ()=>{
        (0, _vitest.it)('should open circuit breaker after consecutive failures', async ()=>{
            // Configure low threshold for testing
            const originalThreshold = errorHandler.errorThreshold;
            Object.defineProperty(errorHandler, 'errorThreshold', {
                value: 2,
                writable: true,
                configurable: true
            });
            try {
                // Mock persistent failures
                global.fetch = _vitest.vi.fn().mockRejectedValue(new Error('API failure'));
                // Trigger multiple failures
                for(let i = 0; i < 3; i++){
                    const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            messages: [
                                {
                                    role: 'user',
                                    content: 'Hello'
                                }
                            ]
                        })
                    });
                    await (0, _route.POST)(request).catch(()=>{});
                }
                (0, _vitest.expect)(errorHandler.isCircuitBreakerOpen()).toBe(true);
            } finally{
                Object.defineProperty(errorHandler, 'errorThreshold', {
                    value: originalThreshold,
                    writable: true,
                    configurable: true
                });
            }
        });
        (0, _vitest.it)('should return circuit breaker response when open', async ()=>{
            // Open circuit breaker
            Object.defineProperty(errorHandler, 'circuitBreakerOpen', {
                value: true,
                writable: true,
                configurable: true
            });
            const request = new _server.NextRequest('http://localhost:3000/api/fastgpt/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messages: [
                        {
                            role: 'user',
                            content: 'Hello'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(request);
            const data = await response.json();
            (0, _vitest.expect)(response.status).toBe(503);
            (0, _vitest.expect)(data.error).toBeDefined();
            (0, _vitest.expect)(data.code).toBe('CIRCUIT_BREAKER_OPEN');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,