{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\cad.test.ts"],"sourcesContent":["/**\n * @file cad.test.ts\n * @description CAD分析相关API路由错误处理测试\n * @author ZK-Agent Team\n * @date 2025-01-27\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { NextRequest } from 'next/server';\nimport { POST as uploadHandler } from '@/app/api/cad/upload/route';\nimport { POST as analyzeHandler } from '@/app/api/cad/analyze/route';\nimport { GET as historyHandler } from '@/app/api/cad/history/route';\nimport { GET as statisticsHandler } from '@/app/api/cad/statistics/route';\nimport { POST as exportHandler } from '@/app/api/cad/export/route';\nimport { POST as uploadEnhancedHandler } from '@/app/api/cad/upload-enhanced/route';\nimport { GlobalErrorHandler } from '@/lib/middleware/global-error-handler';\n\ndescribe('CAD API Routes Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    errorHandler.reset();\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    errorHandler.reset();\n  });\n\n  describe('Upload Route (/api/cad/upload)', () => {\n    it('should handle missing file error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/upload', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n\n      const response = await uploadHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n      expect(data.error).toContain('file');\n    });\n\n    it('should handle unsupported file format error', async () => {\n      const formData = new FormData();\n      const file = new File(['test content'], 'test.txt', { type: 'text/plain' });\n      formData.append('file', file);\n\n      const request = new NextRequest('http://localhost:3000/api/cad/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await uploadHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n      expect(data.error).toContain('format');\n    });\n\n    it('should handle file size limit exceeded error', async () => {\n      const formData = new FormData();\n      // Create a large file (simulate > 100MB)\n      const largeContent = 'x'.repeat(100 * 1024 * 1024 + 1);\n      const file = new File([largeContent], 'large.dwg', { type: 'application/dwg' });\n      formData.append('file', file);\n\n      const request = new NextRequest('http://localhost:3000/api/cad/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await uploadHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(413);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('FILE_TOO_LARGE');\n    });\n\n    it('should handle corrupted file error', async () => {\n      const formData = new FormData();\n      const file = new File(['corrupted data'], 'corrupted.dwg', { type: 'application/dwg' });\n      formData.append('file', file);\n\n      const request = new NextRequest('http://localhost:3000/api/cad/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await uploadHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('FILE_CORRUPTED');\n    });\n\n    it('should handle storage quota exceeded error', async () => {\n      // Mock storage service to simulate quota exceeded\n      vi.mock('@/lib/storage/file-storage', () => ({\n        uploadFile: vi.fn().mockRejectedValue(new Error('Storage quota exceeded'))\n      }));\n\n      const formData = new FormData();\n      const file = new File(['test content'], 'test.dwg', { type: 'application/dwg' });\n      formData.append('file', file);\n\n      const request = new NextRequest('http://localhost:3000/api/cad/upload', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await uploadHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('STORAGE_QUOTA_EXCEEDED');\n    });\n  });\n\n  describe('Analyze Route (/api/cad/analyze)', () => {\n    it('should handle missing file ID error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n\n      const response = await analyzeHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle file not found error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fileId: 'non-existent-file-id'\n        })\n      });\n\n      const response = await analyzeHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('FILE_NOT_FOUND');\n    });\n\n    it('should handle analysis timeout error', async () => {\n      // Mock analysis service to simulate timeout\n      vi.mock('@/lib/cad/analyzer', () => ({\n        analyzeCADFile: vi.fn().mockImplementation(() => \n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Analysis timeout')), 100)\n          )\n        )\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fileId: 'valid-file-id'\n        })\n      });\n\n      const response = await analyzeHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('ANALYSIS_TIMEOUT');\n    });\n\n    it('should handle insufficient memory error', async () => {\n      // Mock analysis service to simulate memory error\n      vi.mock('@/lib/cad/analyzer', () => ({\n        analyzeCADFile: vi.fn().mockRejectedValue(new Error('Insufficient memory'))\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fileId: 'large-file-id'\n        })\n      });\n\n      const response = await analyzeHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('INSUFFICIENT_MEMORY');\n    });\n\n    it('should handle concurrent analysis limit error', async () => {\n      // Mock analysis service to simulate concurrent limit\n      vi.mock('@/lib/cad/analyzer', () => ({\n        analyzeCADFile: vi.fn().mockRejectedValue(new Error('Too many concurrent analyses'))\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fileId: 'valid-file-id'\n        })\n      });\n\n      const response = await analyzeHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(429);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('TOO_MANY_REQUESTS');\n    });\n  });\n\n  describe('History Route (/api/cad/history)', () => {\n    it('should handle unauthorized access error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/history', {\n        method: 'GET'\n      });\n\n      const response = await historyHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('AUTHENTICATION_ERROR');\n    });\n\n    it('should handle invalid pagination parameters error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/history?page=-1&limit=0', {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer valid_token'\n        }\n      });\n\n      const response = await historyHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle database query timeout error', async () => {\n      // Mock database to simulate timeout\n      vi.mock('@/lib/database/connection', () => ({\n        default: {\n          cadAnalysis: {\n            findMany: vi.fn().mockRejectedValue(new Error('Query timeout'))\n          }\n        }\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/history', {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer valid_token'\n        }\n      });\n\n      const response = await historyHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(504);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('DATABASE_TIMEOUT');\n    });\n  });\n\n  describe('Statistics Route (/api/cad/statistics)', () => {\n    it('should handle invalid date range error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/statistics?startDate=invalid&endDate=invalid', {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer valid_token'\n        }\n      });\n\n      const response = await statisticsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle date range too large error', async () => {\n      const startDate = '2020-01-01';\n      const endDate = '2025-12-31';\n      const request = new NextRequest(`http://localhost:3000/api/cad/statistics?startDate=${startDate}&endDate=${endDate}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer valid_token'\n        }\n      });\n\n      const response = await statisticsHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('DATE_RANGE_TOO_LARGE');\n    });\n  });\n\n  describe('Export Route (/api/cad/export)', () => {\n    it('should handle missing analysis ID error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/export', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({})\n      });\n\n      const response = await exportHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle unsupported export format error', async () => {\n      const request = new NextRequest('http://localhost:3000/api/cad/export', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          analysisId: 'valid-analysis-id',\n          format: 'unsupported-format'\n        })\n      });\n\n      const response = await exportHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('UNSUPPORTED_FORMAT');\n    });\n\n    it('should handle export generation failure error', async () => {\n      // Mock export service to simulate failure\n      vi.mock('@/lib/cad/exporter', () => ({\n        generateExport: vi.fn().mockRejectedValue(new Error('Export generation failed'))\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/export', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          analysisId: 'valid-analysis-id',\n          format: 'pdf'\n        })\n      });\n\n      const response = await exportHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('EXPORT_GENERATION_FAILED');\n    });\n  });\n\n  describe('Upload Enhanced Route (/api/cad/upload-enhanced)', () => {\n    it('should handle missing preprocessing options error', async () => {\n      const formData = new FormData();\n      const file = new File(['test content'], 'test.dwg', { type: 'application/dwg' });\n      formData.append('file', file);\n\n      const request = new NextRequest('http://localhost:3000/api/cad/upload-enhanced', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await uploadEnhancedHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('VALIDATION_ERROR');\n    });\n\n    it('should handle preprocessing failure error', async () => {\n      // Mock preprocessing service to simulate failure\n      vi.mock('@/lib/cad/preprocessor', () => ({\n        preprocessCADFile: vi.fn().mockRejectedValue(new Error('Preprocessing failed'))\n      }));\n\n      const formData = new FormData();\n      const file = new File(['test content'], 'test.dwg', { type: 'application/dwg' });\n      formData.append('file', file);\n      formData.append('options', JSON.stringify({ autoFix: true, optimize: true }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/upload-enhanced', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await uploadEnhancedHandler(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBeDefined();\n      expect(data.code).toBe('PREPROCESSING_FAILED');\n    });\n  });\n\n  describe('Error Recovery and Resilience', () => {\n    it('should implement retry logic for transient failures', async () => {\n      let callCount = 0;\n      vi.mock('@/lib/cad/analyzer', () => ({\n        analyzeCADFile: vi.fn().mockImplementation(() => {\n          callCount++;\n          if (callCount < 3) {\n            return Promise.reject(new Error('Transient failure'));\n          }\n          return Promise.resolve({ success: true, results: {} });\n        })\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fileId: 'valid-file-id'\n        })\n      });\n\n      const response = await analyzeHandler(request);\n      \n      expect(callCount).toBe(3);\n      expect(response.status).toBe(200);\n    });\n\n    it('should gracefully degrade when analysis service is unavailable', async () => {\n      // Mock persistent service failure\n      vi.mock('@/lib/cad/analyzer', () => ({\n        analyzeCADFile: vi.fn().mockRejectedValue(new Error('Service unavailable'))\n      }));\n\n      const request = new NextRequest('http://localhost:3000/api/cad/analyze', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          fileId: 'valid-file-id'\n        })\n      });\n\n      const response = await analyzeHandler(request);\n      const data = await response.json();\n\n      // Should return basic analysis instead of complete failure\n      expect(response.status).toBe(200);\n      expect(data.degraded).toBe(true);\n    });\n  });\n\n  describe('Circuit Breaker Integration', () => {\n    it('should track CAD analysis errors in global error handler', async () => {\n      // Mock analysis failures\n      vi.mock('@/lib/cad/analyzer', () => ({\n        analyzeCADFile: vi.fn().mockRejectedValue(new Error('Analysis failed'))\n      }));\n\n      const requests = Array(5).fill(null).map(() => \n        new NextRequest('http://localhost:3000/api/cad/analyze', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ fileId: 'test-file-id' })\n        })\n      );\n\n      for (const request of requests) {\n        await analyzeHandler(request).catch(() => {});\n      }\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n  });\n});"],"names":["describe","errorHandler","beforeEach","GlobalErrorHandler","getInstance","reset","vi","clearAllMocks","afterEach","it","request","NextRequest","method","headers","body","JSON","stringify","response","uploadHandler","data","json","expect","status","toBe","error","toBeDefined","code","toContain","formData","FormData","file","File","type","append","largeContent","repeat","mock","uploadFile","fn","mockRejectedValue","Error","analyzeHandler","fileId","analyzeCADFile","mockImplementation","Promise","_","reject","setTimeout","historyHandler","default","cadAnalysis","findMany","statisticsHandler","startDate","endDate","exportHandler","analysisId","format","generateExport","uploadEnhancedHandler","preprocessCADFile","autoFix","optimize","callCount","resolve","success","results","degraded","requests","Array","fill","map","catch","stats","getErrorStats","errorCount","toBeGreaterThan"],"mappings":"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"}