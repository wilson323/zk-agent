{"version":3,"sources":["E:\\zk-agent\\lib\\validation\\schemas.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file lib/validation/schemas.ts\r\n * @description 基于Zod的统一数据验证模块 - 多智能体平台数据验证中心\r\n * @author zk-agent开发团队\r\n * @lastUpdate 2024-12-19\r\n * @updateLog\r\n *   - 2024-12-19 创建基于zod的统一验证系统\r\n * \r\n * 🔤 命名规范说明：\r\n * - Schema名称：PascalCase + Schema后缀（如：UserInputSchema）\r\n * - 验证函数：validate + 对象名称（如：validateCADFile）\r\n * - 错误类型：ValidationError + 具体类型（如：CADValidationError）\r\n * - 配置常量：VALIDATION_ + 大写描述（如：VALIDATION_LIMITS）\r\n * \r\n * ⚠️ 本模块为现有系统的增强，保持向后兼容性\r\n */\r\n\r\nimport { z } from 'zod'\r\n\r\n// 📝 命名规范：验证配置常量使用VALIDATION_前缀\r\nexport const VALIDATION_LIMITS = {\r\n  // 文件上传限制\r\n  MAX_FILE_SIZE: 100 * 1024 * 1024, // 100MB\r\n  MAX_FILENAME_LENGTH: 255,\r\n  \r\n  // 文本内容限制\r\n  MAX_MESSAGE_LENGTH: 4000,\r\n  MAX_USER_NAME_LENGTH: 100,\r\n  MIN_PASSWORD_LENGTH: 8,\r\n  \r\n  // CAD文件特定限制\r\n  MAX_CAD_ENTITIES: 10000,\r\n  MAX_ANALYSIS_TIMEOUT: 300000, // 5分钟\r\n  \r\n  // 智能体配置限制\r\n  MAX_AGENT_NAME_LENGTH: 50,\r\n  MAX_AGENT_DESCRIPTION_LENGTH: 500,\r\n  MAX_CAPABILITIES_COUNT: 20,\r\n} as const\r\n\r\n// 📝 命名规范：基础Schema使用PascalCase + Schema后缀\r\nexport const BaseFileSchema = z.object({\r\n  name: z.string()\r\n    .min(1, '文件名不能为空')\r\n    .max(VALIDATION_LIMITS.MAX_FILENAME_LENGTH, `文件名不能超过${VALIDATION_LIMITS.MAX_FILENAME_LENGTH}个字符`)\r\n    .regex(/^[^<>:\"/\\\\|?*]+$/, '文件名包含非法字符'),\r\n  \r\n  size: z.number()\r\n    .min(1, '文件大小必须大于0')\r\n    .max(VALIDATION_LIMITS.MAX_FILE_SIZE, `文件大小不能超过${VALIDATION_LIMITS.MAX_FILE_SIZE / 1024 / 1024}MB`),\r\n  \r\n  type: z.string()\r\n    .min(1, '文件类型不能为空'),\r\n  \r\n  lastModified: z.number()\r\n    .optional(),\r\n})\r\n\r\n// 📝 命名规范：CAD相关Schema使用CAD前缀\r\nexport const CADFileSchema = BaseFileSchema.extend({\r\n  name: z.string()\r\n    .regex(/\\.(dwg|dxf|step|stp|iges|igs|stl|obj|gltf|glb)$/i, '不支持的CAD文件格式'),\r\n  \r\n  type: z.enum([\r\n    'application/octet-stream',\r\n    'application/x-dwg',\r\n    'application/x-dxf',\r\n    'application/step',\r\n    'application/iges',\r\n    'model/stl',\r\n    'model/obj',\r\n    'model/gltf+json',\r\n    'model/gltf-binary',\r\n  ], {\r\n    errorMap: () => ({ message: '不支持的CAD文件MIME类型' })\r\n  }),\r\n})\r\n\r\n// 📝 命名规范：分析配置Schema\r\nexport const CADAnalysisConfigSchema = z.object({\r\n  precision: z.enum(['low', 'standard', 'high', 'ultra'], {\r\n    errorMap: () => ({ message: '分析精度必须是 low, standard, high, ultra 之一' })\r\n  }).default('standard'),\r\n  \r\n  enableAI: z.boolean().default(true),\r\n  enableDeviceDetection: z.boolean().default(true),\r\n  enableRiskAssessment: z.boolean().default(true),\r\n  enableManufacturingAnalysis: z.boolean().default(false),\r\n  enableCostEstimation: z.boolean().default(false),\r\n  \r\n  timeout: z.number()\r\n    .min(1000, '超时时间不能少于1秒')\r\n    .max(VALIDATION_LIMITS.MAX_ANALYSIS_TIMEOUT, '超时时间不能超过5分钟')\r\n    .default(60000),\r\n  \r\n  maxEntities: z.number()\r\n    .min(1, '最大实体数不能少于1')\r\n    .max(VALIDATION_LIMITS.MAX_CAD_ENTITIES, `最大实体数不能超过${VALIDATION_LIMITS.MAX_CAD_ENTITIES}`)\r\n    .default(5000),\r\n})\r\n\r\n// 📝 命名规范：用户输入Schema\r\nexport const UserInputSchema = z.object({\r\n  email: z.string()\r\n    .email('邮箱格式不正确')\r\n    .max(254, '邮箱地址过长'),\r\n  \r\n  name: z.string()\r\n    .min(1, '姓名不能为空')\r\n    .max(VALIDATION_LIMITS.MAX_USER_NAME_LENGTH, `姓名不能超过${VALIDATION_LIMITS.MAX_USER_NAME_LENGTH}个字符`)\r\n    .regex(/^[\\u4e00-\\u9fff\\u3400-\\u4dbfa-zA-Z\\s]+$/, '姓名只能包含中文、英文和空格'),\r\n  \r\n  password: z.string()\r\n    .min(VALIDATION_LIMITS.MIN_PASSWORD_LENGTH, `密码不能少于${VALIDATION_LIMITS.MIN_PASSWORD_LENGTH}个字符`)\r\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, '密码必须包含大小写字母和数字'),\r\n})\r\n\r\n// 📝 命名规范：聊天消息Schema\r\nexport const ChatMessageSchema = z.object({\r\n  content: z.string()\r\n    .min(1, '消息内容不能为空')\r\n    .max(VALIDATION_LIMITS.MAX_MESSAGE_LENGTH, `消息内容不能超过${VALIDATION_LIMITS.MAX_MESSAGE_LENGTH}个字符`)\r\n    .refine(\r\n      content => !/<script|javascript:|data:|vbscript:|onload|onerror/i.test(content),\r\n      '消息内容包含潜在的安全风险'\r\n    ),\r\n  \r\n  type: z.enum(['text', 'file', 'image', 'system'], {\r\n    errorMap: () => ({ message: '消息类型必须是 text, file, image, system 之一' })\r\n  }).default('text'),\r\n  \r\n  role: z.enum(['user', 'assistant', 'system', 'tool'], {\r\n    errorMap: () => ({ message: '消息角色必须是 user, assistant, system, tool 之一' })\r\n  }).default('user'),\r\n  \r\n  timestamp: z.date().default(() => new Date()),\r\n  \r\n  metadata: z.record(z.unknown()).optional(),\r\n})\r\n\r\n// 📝 命名规范：智能体配置Schema\r\nexport const AgentConfigSchema = z.object({\r\n  id: z.string()\r\n    .min(1, '智能体ID不能为空')\r\n    .regex(/^[a-zA-Z0-9_-]+$/, '智能体ID只能包含字母、数字、下划线和连字符'),\r\n  \r\n  name: z.string()\r\n    .min(1, '智能体名称不能为空')\r\n    .max(VALIDATION_LIMITS.MAX_AGENT_NAME_LENGTH, `智能体名称不能超过${VALIDATION_LIMITS.MAX_AGENT_NAME_LENGTH}个字符`),\r\n  \r\n  description: z.string()\r\n    .max(VALIDATION_LIMITS.MAX_AGENT_DESCRIPTION_LENGTH, `智能体描述不能超过${VALIDATION_LIMITS.MAX_AGENT_DESCRIPTION_LENGTH}个字符`)\r\n    .optional(),\r\n  \r\n  type: z.enum(['fastgpt', 'cad', 'poster', 'custom'], {\r\n    errorMap: () => ({ message: '智能体类型必须是 fastgpt, cad, poster, custom 之一' })\r\n  }),\r\n  \r\n  capabilities: z.array(z.string())\r\n    .max(VALIDATION_LIMITS.MAX_CAPABILITIES_COUNT, `智能体能力不能超过${VALIDATION_LIMITS.MAX_CAPABILITIES_COUNT}个`)\r\n    .default([]),\r\n  \r\n  config: z.record(z.unknown()).default({}),\r\n  \r\n  enabled: z.boolean().default(true),\r\n  \r\n  priority: z.number()\r\n    .min(0, '优先级不能小于0')\r\n    .max(100, '优先级不能大于100')\r\n    .default(50),\r\n})\r\n\r\n// 📝 命名规范：API请求Schema\r\nexport const APIRequestSchema = z.object({\r\n  method: z.enum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH'], {\r\n    errorMap: () => ({ message: 'HTTP方法不支持' })\r\n  }),\r\n  \r\n  headers: z.record(z.string()).optional(),\r\n  \r\n  query: z.record(z.union([z.string(), z.array(z.string())])).optional(),\r\n  \r\n  body: z.unknown().optional(),\r\n  \r\n  timeout: z.number()\r\n    .min(1000, '请求超时时间不能少于1秒')\r\n    .max(300000, '请求超时时间不能超过5分钟')\r\n    .default(30000),\r\n})\r\n\r\n// 📝 命名规范：响应式配置Schema\r\nexport const ResponsiveConfigSchema = z.object({\r\n  breakpoint: z.enum(['xs', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', '4xl', '5xl', '6xl'], {\r\n    errorMap: () => ({ message: '断点配置不正确' })\r\n  }),\r\n  \r\n  width: z.number().min(320, '屏幕宽度不能小于320px'),\r\n  height: z.number().min(240, '屏幕高度不能小于240px'),\r\n  \r\n  deviceType: z.enum(['mobile', 'tablet', 'desktop', 'tv'], {\r\n    errorMap: () => ({ message: '设备类型必须是 mobile, tablet, desktop, tv 之一' })\r\n  }),\r\n  \r\n  touchOptimized: z.boolean().default(false),\r\n  \r\n  performance: z.object({\r\n    level: z.enum(['low', 'medium', 'high']).default('medium'),\r\n    memory: z.number().min(1).default(4),\r\n    cores: z.number().min(1).default(4),\r\n  }).optional(),\r\n})\r\n\r\n// 📝 命名规范：验证结果类型\r\nexport type ValidationResult<T> = {\r\n  success: true\r\n  data: T\r\n} | {\r\n  success: false\r\n  error: {\r\n    message: string\r\n    issues: Array<{\r\n      path: (string | number)[]\r\n      message: string\r\n      code: string\r\n    }>\r\n  }\r\n}\r\n\r\n// 📝 命名规范：验证函数使用validate前缀\r\nexport const validateCADFile = (file: unknown): ValidationResult<z.infer<typeof CADFileSchema>> => {\r\n  try {\r\n    const data = CADFileSchema.parse(file)\r\n    return { success: true, data }\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: 'CAD文件验证失败',\r\n          issues: error.issues.map(issue => ({\r\n            path: issue.path,\r\n            message: issue.message,\r\n            code: issue.code,\r\n          }))\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: '未知验证错误',\r\n        issues: []\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const validateChatMessage = (message: unknown): ValidationResult<z.infer<typeof ChatMessageSchema>> => {\r\n  try {\r\n    const data = ChatMessageSchema.parse(message)\r\n    return { success: true, data }\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: '聊天消息验证失败',\r\n          issues: error.issues.map(issue => ({\r\n            path: issue.path,\r\n            message: issue.message,\r\n            code: issue.code,\r\n          }))\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: '未知验证错误',\r\n        issues: []\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const validateAgentConfig = (config: unknown): ValidationResult<z.infer<typeof AgentConfigSchema>> => {\r\n  try {\r\n    const data = AgentConfigSchema.parse(config)\r\n    return { success: true, data }\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: '智能体配置验证失败',\r\n          issues: error.issues.map(issue => ({\r\n            path: issue.path,\r\n            message: issue.message,\r\n            code: issue.code,\r\n          }))\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: '未知验证错误',\r\n        issues: []\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const validateUserInput = (input: unknown): ValidationResult<z.infer<typeof UserInputSchema>> => {\r\n  try {\r\n    const data = UserInputSchema.parse(input)\r\n    return { success: true, data }\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: '用户输入验证失败',\r\n          issues: error.issues.map(issue => ({\r\n            path: issue.path,\r\n            message: issue.message,\r\n            code: issue.code,\r\n          }))\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: '未知验证错误',\r\n        issues: []\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 📝 命名规范：通用验证工具函数\r\nexport const createValidator = <T extends z.ZodSchema>(schema: T, errorMessage: string) => {\r\n  return (data: unknown): ValidationResult<z.infer<T>> => {\r\n    try {\r\n      const validData = schema.parse(data)\r\n      return { success: true, data: validData }\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          error: {\r\n            message: errorMessage,\r\n            issues: error.issues.map(issue => ({\r\n              path: issue.path,\r\n              message: issue.message,\r\n              code: issue.code,\r\n            }))\r\n          }\r\n        }\r\n      }\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: '未知验证错误',\r\n          issues: []\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 📝 命名规范：安全验证工具\r\nexport const sanitizeAndValidate = <T extends z.ZodSchema>(\r\n  schema: T,\r\n  data: unknown,\r\n  sanitizers?: Array<(input: any) => any>\r\n): ValidationResult<z.infer<T>> => {\r\n  try {\r\n    let sanitizedData = data\r\n    \r\n    // 应用清理函数\r\n    if (sanitizers) {\r\n      for (const sanitizer of sanitizers) {\r\n        sanitizedData = sanitizer(sanitizedData)\r\n      }\r\n    }\r\n    \r\n    const validData = schema.parse(sanitizedData)\r\n    return { success: true, data: validData }\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      return {\r\n        success: false,\r\n        error: {\r\n          message: '数据验证失败',\r\n          issues: error.issues.map(issue => ({\r\n            path: issue.path,\r\n            message: issue.message,\r\n            code: issue.code,\r\n          }))\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      success: false,\r\n      error: {\r\n        message: '未知验证错误',\r\n        issues: []\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// 导出所有Schema类型\r\nexport type CADFileType = z.infer<typeof CADFileSchema>\r\nexport type CADAnalysisConfigType = z.infer<typeof CADAnalysisConfigSchema>\r\nexport type UserInputType = z.infer<typeof UserInputSchema>\r\nexport type ChatMessageType = z.infer<typeof ChatMessageSchema>\r\nexport type AgentConfigType = z.infer<typeof AgentConfigSchema>\r\nexport type APIRequestType = z.infer<typeof APIRequestSchema>\r\nexport type ResponsiveConfigType = z.infer<typeof ResponsiveConfigSchema> "],"names":["APIRequestSchema","AgentConfigSchema","BaseFileSchema","CADAnalysisConfigSchema","CADFileSchema","ChatMessageSchema","ResponsiveConfigSchema","UserInputSchema","VALIDATION_LIMITS","createValidator","sanitizeAndValidate","validateAgentConfig","validateCADFile","validateChatMessage","validateUserInput","MAX_FILE_SIZE","MAX_FILENAME_LENGTH","MAX_MESSAGE_LENGTH","MAX_USER_NAME_LENGTH","MIN_PASSWORD_LENGTH","MAX_CAD_ENTITIES","MAX_ANALYSIS_TIMEOUT","MAX_AGENT_NAME_LENGTH","MAX_AGENT_DESCRIPTION_LENGTH","MAX_CAPABILITIES_COUNT","z","object","name","string","min","max","regex","size","number","type","lastModified","optional","extend","enum","errorMap","message","precision","default","enableAI","boolean","enableDeviceDetection","enableRiskAssessment","enableManufacturingAnalysis","enableCostEstimation","timeout","maxEntities","email","password","content","refine","test","role","timestamp","date","Date","metadata","record","unknown","id","description","capabilities","array","config","enabled","priority","method","headers","query","union","body","breakpoint","width","height","deviceType","touchOptimized","performance","level","memory","cores","file","data","parse","success","error","ZodError","issues","map","issue","path","code","input","schema","errorMessage","validData","sanitizers","sanitizedData","sanitizer"],"mappings":"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"}