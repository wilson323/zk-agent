{"version":3,"sources":["E:\\zk-agent\\lib\\database\\error-recovery.ts"],"sourcesContent":["/**\n * @file Database Error Recovery System\n * @description 数据库错误恢复和故障转移系统\n * @author ZK-Agent Team\n * @date 2024-12-19\n */\n\nimport { EventEmitter } from 'events'\nimport { enhancedDb, ConnectionState } from './enhanced-connection'\nimport { databaseMonitor, AlertLevel } from './monitoring'\nimport { poolOptimizer } from './pool-optimizer'\n\n// 错误类型\nexport enum ErrorType {\n  CONNECTION_TIMEOUT = 'connection_timeout',\n  CONNECTION_REFUSED = 'connection_refused',\n  AUTHENTICATION_FAILED = 'authentication_failed',\n  DATABASE_UNAVAILABLE = 'database_unavailable',\n  QUERY_TIMEOUT = 'query_timeout',\n  DEADLOCK = 'deadlock',\n  CONSTRAINT_VIOLATION = 'constraint_violation',\n  DISK_FULL = 'disk_full',\n  MEMORY_EXHAUSTED = 'memory_exhausted',\n  NETWORK_ERROR = 'network_error',\n  UNKNOWN = 'unknown'\n}\n\n// 恢复策略\nexport enum RecoveryStrategy {\n  RETRY = 'retry',\n  RECONNECT = 'reconnect',\n  FAILOVER = 'failover',\n  CIRCUIT_BREAKER = 'circuit_breaker',\n  GRACEFUL_DEGRADATION = 'graceful_degradation',\n  EMERGENCY_SHUTDOWN = 'emergency_shutdown'\n}\n\n// 错误分析结果\nexport interface ErrorAnalysis {\n  errorType: ErrorType\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  isRecoverable: boolean\n  recommendedStrategy: RecoveryStrategy\n  estimatedRecoveryTime: number // 毫秒\n  requiresManualIntervention: boolean\n  context: {\n    connectionState: ConnectionState\n    recentErrors: number\n    systemLoad: number\n    availableMemory: number\n  }\n}\n\n// 恢复操作结果\nexport interface RecoveryResult {\n  timestamp: Date\n  errorType: ErrorType\n  strategy: RecoveryStrategy\n  success: boolean\n  duration: number // 毫秒\n  attemptsCount: number\n  error?: string\n  metrics: {\n    beforeRecovery: any\n    afterRecovery: any\n  }\n}\n\n// 恢复配置\nexport interface RecoveryConfiguration {\n  maxRetryAttempts: number\n  retryDelayMs: number\n  exponentialBackoff: boolean\n  circuitBreakerThreshold: number\n  circuitBreakerTimeoutMs: number\n  failoverEnabled: boolean\n  gracefulDegradationEnabled: boolean\n  emergencyShutdownThreshold: number\n  healthCheckIntervalMs: number\n  recoveryTimeoutMs: number\n}\n\n// 熔断器状态\nexport enum CircuitBreakerState {\n  CLOSED = 'closed',\n  OPEN = 'open',\n  HALF_OPEN = 'half_open'\n}\n\n/**\n * 数据库错误恢复系统\n */\nexport class DatabaseErrorRecovery extends EventEmitter {\n  private recoveryHistory: RecoveryResult[] = []\n  private errorCounts: Map<ErrorType, number> = new Map()\n  private circuitBreakerState: CircuitBreakerState = CircuitBreakerState.CLOSED\n  private circuitBreakerOpenTime: Date | null = null\n  private configuration: RecoveryConfiguration\n  private isRecovering: boolean = false\n  private healthCheckInterval: NodeJS.Timeout | null = null\n  private maxHistorySize: number\n  private lastErrorTime: Date | null = null\n  private consecutiveFailures: number = 0\n\n  constructor(\n    config?: Partial<RecoveryConfiguration>,\n    maxHistorySize: number = 1000\n  ) {\n    super()\n\n    this.maxHistorySize = maxHistorySize\n    \n    // 默认恢复配置\n    this.configuration = {\n      maxRetryAttempts: parseInt(process.env.DB_MAX_RETRY_ATTEMPTS || '3'),\n      retryDelayMs: parseInt(process.env.DB_RETRY_DELAY || '1000'),\n      exponentialBackoff: process.env.DB_EXPONENTIAL_BACKOFF === 'true',\n      circuitBreakerThreshold: parseInt(process.env.DB_CIRCUIT_BREAKER_THRESHOLD || '5'),\n      circuitBreakerTimeoutMs: parseInt(process.env.DB_CIRCUIT_BREAKER_TIMEOUT || '60000'),\n      failoverEnabled: process.env.DB_FAILOVER_ENABLED === 'true',\n      gracefulDegradationEnabled: process.env.DB_GRACEFUL_DEGRADATION === 'true',\n      emergencyShutdownThreshold: parseInt(process.env.DB_EMERGENCY_SHUTDOWN_THRESHOLD || '10'),\n      healthCheckIntervalMs: parseInt(process.env.DB_HEALTH_CHECK_INTERVAL || '30000'),\n      recoveryTimeoutMs: parseInt(process.env.DB_RECOVERY_TIMEOUT || '300000'),\n      ...config\n    }\n\n    // 初始化错误计数\n    Object.values(ErrorType).forEach(errorType => {\n      this.errorCounts.set(errorType, 0)\n    })\n\n    // 设置事件监听器\n    this.setupEventListeners()\n\n    // 启动健康检查\n    this.startHealthCheck()\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  private setupEventListeners(): void {\n    // 监听数据库错误事件\n    enhancedDb.on('error', (error: Error) => {\n      this.handleDatabaseError(error)\n    })\n\n    // 监听连接断开事件\n    enhancedDb.on('disconnected', (error?: Error) => {\n      if (error) {\n        this.handleDatabaseError(error)\n      }\n    })\n\n    // 监听监控告警\n    databaseMonitor.on('alert', (alert) => {\n      if (alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.ERROR) {\n        this.handleMonitoringAlert(alert)\n      }\n    })\n  }\n\n  /**\n   * 处理数据库错误\n   */\n  private async handleDatabaseError(error: Error): Promise<void> {\n    try {\n      console.error('Database error detected:', error.message)\n      \n      // 分析错误\n      const analysis = this.analyzeError(error)\n      \n      // 更新错误计数\n      this.updateErrorCounts(analysis.errorType)\n      \n      // 检查熔断器状态\n      this.updateCircuitBreakerState(analysis)\n      \n      // 如果熔断器开启，直接返回\n      if (this.circuitBreakerState === CircuitBreakerState.OPEN) {\n        console.warn('Circuit breaker is open, skipping recovery attempt')\n        return\n      }\n      \n      // 执行恢复策略\n      if (analysis.isRecoverable && !this.isRecovering) {\n        await this.executeRecoveryStrategy(analysis)\n      } else if (!analysis.isRecoverable) {\n        console.error('Error is not recoverable, manual intervention required')\n        this.emit('unrecoverableError', { error, analysis })\n      }\n      \n    } catch (recoveryError) {\n      console.error('Error during error recovery:', recoveryError)\n    }\n  }\n\n  /**\n   * 处理监控告警\n   */\n  private async handleMonitoringAlert(alert: any): Promise<void> {\n    console.warn('Monitoring alert received:', alert.message)\n    \n    // 根据告警类型决定恢复策略\n    if (alert.message.includes('连接') || alert.message.includes('connection')) {\n      const fakeError = new Error(`Monitoring alert: ${alert.message}`)\n      await this.handleDatabaseError(fakeError)\n    }\n  }\n\n  /**\n   * 分析错误\n   */\n  private analyzeError(error: Error): ErrorAnalysis {\n    const errorMessage = error.message.toLowerCase()\n    const stats = enhancedDb.getStats()\n    const memUsage = process.memoryUsage()\n    \n    let errorType = ErrorType.UNKNOWN\n    let severity: 'low' | 'medium' | 'high' | 'critical' = 'medium'\n    let isRecoverable = true\n    let recommendedStrategy = RecoveryStrategy.RETRY\n    let estimatedRecoveryTime = 5000\n    let requiresManualIntervention = false\n\n    // 错误类型识别\n    if (errorMessage.includes('timeout') || errorMessage.includes('超时')) {\n      errorType = ErrorType.CONNECTION_TIMEOUT\n      severity = 'medium'\n      recommendedStrategy = RecoveryStrategy.RETRY\n      estimatedRecoveryTime = 10000\n    } else if (errorMessage.includes('refused') || errorMessage.includes('拒绝')) {\n      errorType = ErrorType.CONNECTION_REFUSED\n      severity = 'high'\n      recommendedStrategy = RecoveryStrategy.RECONNECT\n      estimatedRecoveryTime = 15000\n    } else if (errorMessage.includes('authentication') || errorMessage.includes('认证')) {\n      errorType = ErrorType.AUTHENTICATION_FAILED\n      severity = 'critical'\n      isRecoverable = false\n      requiresManualIntervention = true\n      recommendedStrategy = RecoveryStrategy.EMERGENCY_SHUTDOWN\n    } else if (errorMessage.includes('unavailable') || errorMessage.includes('不可用')) {\n      errorType = ErrorType.DATABASE_UNAVAILABLE\n      severity = 'critical'\n      recommendedStrategy = RecoveryStrategy.FAILOVER\n      estimatedRecoveryTime = 30000\n    } else if (errorMessage.includes('deadlock') || errorMessage.includes('死锁')) {\n      errorType = ErrorType.DEADLOCK\n      severity = 'medium'\n      recommendedStrategy = RecoveryStrategy.RETRY\n      estimatedRecoveryTime = 2000\n    } else if (errorMessage.includes('constraint') || errorMessage.includes('约束')) {\n      errorType = ErrorType.CONSTRAINT_VIOLATION\n      severity = 'low'\n      isRecoverable = false\n      requiresManualIntervention = true\n    } else if (errorMessage.includes('disk') || errorMessage.includes('磁盘')) {\n      errorType = ErrorType.DISK_FULL\n      severity = 'critical'\n      isRecoverable = false\n      requiresManualIntervention = true\n      recommendedStrategy = RecoveryStrategy.EMERGENCY_SHUTDOWN\n    } else if (errorMessage.includes('memory') || errorMessage.includes('内存')) {\n      errorType = ErrorType.MEMORY_EXHAUSTED\n      severity = 'high'\n      recommendedStrategy = RecoveryStrategy.GRACEFUL_DEGRADATION\n      estimatedRecoveryTime = 20000\n    } else if (errorMessage.includes('network') || errorMessage.includes('网络')) {\n      errorType = ErrorType.NETWORK_ERROR\n      severity = 'high'\n      recommendedStrategy = RecoveryStrategy.RECONNECT\n      estimatedRecoveryTime = 15000\n    }\n\n    // 根据连续失败次数调整严重性\n    if (this.consecutiveFailures > 3) {\n      severity = 'critical'\n      if (this.consecutiveFailures > 5) {\n        recommendedStrategy = RecoveryStrategy.CIRCUIT_BREAKER\n      }\n    }\n\n    return {\n      errorType,\n      severity,\n      isRecoverable,\n      recommendedStrategy,\n      estimatedRecoveryTime,\n      requiresManualIntervention,\n      context: {\n        connectionState: stats.state,\n        recentErrors: this.getRecentErrorCount(),\n        systemLoad: this.getSystemLoad(),\n        availableMemory: (memUsage.heapTotal - memUsage.heapUsed) / 1024 / 1024 // MB\n      }\n    }\n  }\n\n  /**\n   * 更新错误计数\n   */\n  private updateErrorCounts(errorType: ErrorType): void {\n    const currentCount = this.errorCounts.get(errorType) || 0\n    this.errorCounts.set(errorType, currentCount + 1)\n    this.lastErrorTime = new Date()\n    this.consecutiveFailures++\n  }\n\n  /**\n   * 更新熔断器状态\n   */\n  private updateCircuitBreakerState(analysis: ErrorAnalysis): void {\n    const recentErrors = this.getRecentErrorCount()\n    \n    switch (this.circuitBreakerState) {\n      case CircuitBreakerState.CLOSED:\n        if (recentErrors >= this.configuration.circuitBreakerThreshold) {\n          this.circuitBreakerState = CircuitBreakerState.OPEN\n          this.circuitBreakerOpenTime = new Date()\n          console.warn('Circuit breaker opened due to high error rate')\n          this.emit('circuitBreakerOpened', { recentErrors, threshold: this.configuration.circuitBreakerThreshold })\n        }\n        break\n        \n      case CircuitBreakerState.OPEN:\n        if (this.circuitBreakerOpenTime && \n            Date.now() - this.circuitBreakerOpenTime.getTime() > this.configuration.circuitBreakerTimeoutMs) {\n          this.circuitBreakerState = CircuitBreakerState.HALF_OPEN\n          console.info('Circuit breaker moved to half-open state')\n          this.emit('circuitBreakerHalfOpen')\n        }\n        break\n        \n      case CircuitBreakerState.HALF_OPEN:\n        if (analysis.severity === 'critical' || analysis.severity === 'high') {\n          this.circuitBreakerState = CircuitBreakerState.OPEN\n          this.circuitBreakerOpenTime = new Date()\n          console.warn('Circuit breaker reopened due to continued errors')\n          this.emit('circuitBreakerReopened')\n        }\n        break\n    }\n  }\n\n  /**\n   * 执行恢复策略\n   */\n  private async executeRecoveryStrategy(analysis: ErrorAnalysis): Promise<void> {\n    this.isRecovering = true\n    const startTime = Date.now()\n    let attempts = 0\n    let success = false\n    let lastError: string | undefined\n    \n    const beforeMetrics = enhancedDb.getStats()\n    \n    try {\n      console.log(`Executing recovery strategy: ${analysis.recommendedStrategy}`)\n      \n      switch (analysis.recommendedStrategy) {\n        case RecoveryStrategy.RETRY:\n          ({ success, attempts, lastError } = await this.executeRetryStrategy())\n          break\n          \n        case RecoveryStrategy.RECONNECT:\n          ({ success, attempts, lastError } = await this.executeReconnectStrategy())\n          break\n          \n        case RecoveryStrategy.FAILOVER:\n          ({ success, attempts, lastError } = await this.executeFailoverStrategy())\n          break\n          \n        case RecoveryStrategy.CIRCUIT_BREAKER:\n          ({ success, attempts, lastError } = await this.executeCircuitBreakerStrategy())\n          break\n          \n        case RecoveryStrategy.GRACEFUL_DEGRADATION:\n          ({ success, attempts, lastError } = await this.executeGracefulDegradationStrategy())\n          break\n          \n        case RecoveryStrategy.EMERGENCY_SHUTDOWN:\n          ({ success, attempts, lastError } = await this.executeEmergencyShutdownStrategy())\n          break\n          \n        default:\n          throw new Error(`Unknown recovery strategy: ${analysis.recommendedStrategy}`)\n      }\n      \n    } catch (error) {\n      lastError = error instanceof Error ? error.message : String(error)\n      console.error('Recovery strategy execution failed:', lastError)\n    }\n    \n    const afterMetrics = enhancedDb.getStats()\n    const duration = Date.now() - startTime\n    \n    // 记录恢复结果\n    const result: RecoveryResult = {\n      timestamp: new Date(),\n      errorType: analysis.errorType,\n      strategy: analysis.recommendedStrategy,\n      success,\n      duration,\n      attemptsCount: attempts,\n      error: lastError,\n      metrics: {\n        beforeRecovery: beforeMetrics,\n        afterRecovery: afterMetrics\n      }\n    }\n    \n    this.addRecoveryResult(result)\n    \n    if (success) {\n      this.consecutiveFailures = 0\n      if (this.circuitBreakerState === CircuitBreakerState.HALF_OPEN) {\n        this.circuitBreakerState = CircuitBreakerState.CLOSED\n        console.info('Circuit breaker closed after successful recovery')\n        this.emit('circuitBreakerClosed')\n      }\n    }\n    \n    this.emit('recoveryCompleted', result)\n    this.isRecovering = false\n  }\n\n  /**\n   * 执行重试策略\n   */\n  private async executeRetryStrategy(): Promise<{ success: boolean; attempts: number; lastError?: string }> {\n    let attempts = 0\n    let lastError: string | undefined\n    \n    for (let i = 0; i < this.configuration.maxRetryAttempts; i++) {\n      attempts++\n      \n      try {\n        // 等待重试延迟\n        const delay = this.configuration.exponentialBackoff \n          ? this.configuration.retryDelayMs * Math.pow(2, i)\n          : this.configuration.retryDelayMs\n          \n        await this.sleep(delay)\n        \n        // 尝试执行健康检查\n        const isHealthy = await enhancedDb.performHealthCheck()\n        if (isHealthy) {\n          console.log(`Retry strategy succeeded on attempt ${attempts}`)\n          return { success: true, attempts }\n        }\n        \n      } catch (error) {\n        lastError = error instanceof Error ? error.message : String(error)\n        console.warn(`Retry attempt ${attempts} failed:`, lastError)\n      }\n    }\n    \n    return { success: false, attempts, lastError }\n  }\n\n  /**\n   * 执行重连策略\n   */\n  private async executeReconnectStrategy(): Promise<{ success: boolean; attempts: number; lastError?: string }> {\n    let attempts = 0\n    let lastError: string | undefined\n    \n    try {\n      attempts++\n      console.log('Attempting database reconnection...')\n      \n      // 断开现有连接\n      await enhancedDb.disconnect()\n      \n      // 等待一段时间\n      await this.sleep(this.configuration.retryDelayMs)\n      \n      // 重新连接\n      await enhancedDb.connect()\n      \n      // 验证连接\n      const isHealthy = await enhancedDb.performHealthCheck()\n      if (isHealthy) {\n        console.log('Database reconnection successful')\n        return { success: true, attempts }\n      }\n      \n    } catch (error) {\n      lastError = error instanceof Error ? error.message : String(error)\n      console.error('Database reconnection failed:', lastError)\n    }\n    \n    return { success: false, attempts, lastError }\n  }\n\n  /**\n   * 执行故障转移策略\n   */\n  private async executeFailoverStrategy(): Promise<{ success: boolean; attempts: number; lastError?: string }> {\n    let attempts = 0\n    let lastError: string | undefined\n    \n    if (!this.configuration.failoverEnabled) {\n      return { success: false, attempts: 0, lastError: 'Failover is not enabled' }\n    }\n    \n    try {\n      attempts++\n      console.log('Attempting database failover...')\n      \n      // 这里应该实现实际的故障转移逻辑\n      // 例如：切换到备用数据库、使用只读副本等\n      \n      // 模拟故障转移\n      await this.sleep(5000)\n      \n      console.log('Failover strategy executed (simulated)')\n      return { success: true, attempts }\n      \n    } catch (error) {\n      lastError = error instanceof Error ? error.message : String(error)\n      console.error('Failover strategy failed:', lastError)\n    }\n    \n    return { success: false, attempts, lastError }\n  }\n\n  /**\n   * 执行熔断器策略\n   */\n  private async executeCircuitBreakerStrategy(): Promise<{ success: boolean; attempts: number; lastError?: string }> {\n    console.log('Circuit breaker strategy activated')\n    \n    this.circuitBreakerState = CircuitBreakerState.OPEN\n    this.circuitBreakerOpenTime = new Date()\n    \n    // 触发连接池优化\n    if (poolOptimizer) {\n      poolOptimizer.emit('emergencyOptimization', 'Circuit breaker activated')\n    }\n    \n    return { success: true, attempts: 1 }\n  }\n\n  /**\n   * 执行优雅降级策略\n   */\n  private async executeGracefulDegradationStrategy(): Promise<{ success: boolean; attempts: number; lastError?: string }> {\n    if (!this.configuration.gracefulDegradationEnabled) {\n      return { success: false, attempts: 0, lastError: 'Graceful degradation is not enabled' }\n    }\n    \n    try {\n      console.log('Executing graceful degradation strategy...')\n      \n      // 这里应该实现优雅降级逻辑\n      // 例如：启用缓存模式、限制功能、使用备用数据源等\n      \n      // 模拟优雅降级\n      await this.sleep(2000)\n      \n      console.log('Graceful degradation activated')\n      this.emit('gracefulDegradationActivated')\n      \n      return { success: true, attempts: 1 }\n      \n    } catch (error) {\n      const lastError = error instanceof Error ? error.message : String(error)\n      console.error('Graceful degradation failed:', lastError)\n      return { success: false, attempts: 1, lastError }\n    }\n  }\n\n  /**\n   * 执行紧急关闭策略\n   */\n  private async executeEmergencyShutdownStrategy(): Promise<{ success: boolean; attempts: number; lastError?: string }> {\n    try {\n      console.error('Executing emergency shutdown strategy...')\n      \n      // 发送紧急告警\n      this.emit('emergencyShutdown', {\n        reason: 'Critical database error requiring manual intervention',\n        timestamp: new Date()\n      })\n      \n      // 优雅关闭数据库连接\n      await enhancedDb.gracefulShutdown()\n      \n      console.error('Emergency shutdown completed')\n      return { success: true, attempts: 1 }\n      \n    } catch (error) {\n      const lastError = error instanceof Error ? error.message : String(error)\n      console.error('Emergency shutdown failed:', lastError)\n      return { success: false, attempts: 1, lastError }\n    }\n  }\n\n  /**\n   * 启动健康检查\n   */\n  private startHealthCheck(): void {\n    this.healthCheckInterval = setInterval(async () => {\n      try {\n        if (this.circuitBreakerState === CircuitBreakerState.HALF_OPEN) {\n          const isHealthy = await enhancedDb.performHealthCheck()\n          if (isHealthy) {\n            this.circuitBreakerState = CircuitBreakerState.CLOSED\n            console.info('Circuit breaker closed after successful health check')\n            this.emit('circuitBreakerClosed')\n          }\n        }\n      } catch (error) {\n        console.error('Health check failed:', error)\n      }\n    }, this.configuration.healthCheckIntervalMs)\n  }\n\n  /**\n   * 停止健康检查\n   */\n  private stopHealthCheck(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval)\n      this.healthCheckInterval = null\n    }\n  }\n\n  /**\n   * 获取最近错误数量\n   */\n  private getRecentErrorCount(timeWindowMs: number = 300000): number {\n    const cutoffTime = Date.now() - timeWindowMs\n    return this.recoveryHistory\n      .filter(result => result.timestamp.getTime() > cutoffTime && !result.success)\n      .length\n  }\n\n  /**\n   * 获取系统负载\n   */\n  private getSystemLoad(): number {\n    // 简单的系统负载计算\n    const cpuUsage = process.cpuUsage()\n    return (cpuUsage.user + cpuUsage.system) / 1000000 // 转换为秒\n  }\n\n  /**\n   * 睡眠函数\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  /**\n   * 添加恢复结果到历史\n   */\n  private addRecoveryResult(result: RecoveryResult): void {\n    this.recoveryHistory.push(result)\n    \n    // 限制历史记录大小\n    if (this.recoveryHistory.length > this.maxHistorySize) {\n      this.recoveryHistory = this.recoveryHistory.slice(-this.maxHistorySize)\n    }\n  }\n\n  /**\n   * 获取恢复历史\n   */\n  getRecoveryHistory(limit?: number): RecoveryResult[] {\n    if (limit) {\n      return this.recoveryHistory.slice(-limit)\n    }\n    return [...this.recoveryHistory]\n  }\n\n  /**\n   * 获取错误统计\n   */\n  getErrorStatistics(): {\n    totalErrors: number\n    errorsByType: { [key in ErrorType]: number }\n    recentErrors: number\n    consecutiveFailures: number\n    lastErrorTime: Date | null\n    circuitBreakerState: CircuitBreakerState\n  } {\n    const errorsByType = {} as { [key in ErrorType]: number }\n    Object.values(ErrorType).forEach(errorType => {\n      errorsByType[errorType] = this.errorCounts.get(errorType) || 0\n    })\n    \n    return {\n      totalErrors: Array.from(this.errorCounts.values()).reduce((sum, count) => sum + count, 0),\n      errorsByType,\n      recentErrors: this.getRecentErrorCount(),\n      consecutiveFailures: this.consecutiveFailures,\n      lastErrorTime: this.lastErrorTime,\n      circuitBreakerState: this.circuitBreakerState\n    }\n  }\n\n  /**\n   * 获取恢复统计\n   */\n  getRecoveryStatistics(): {\n    totalRecoveries: number\n    successfulRecoveries: number\n    failedRecoveries: number\n    successRate: number\n    averageRecoveryTime: number\n    strategiesUsed: { [key in RecoveryStrategy]: number }\n  } {\n    const total = this.recoveryHistory.length\n    const successful = this.recoveryHistory.filter(r => r.success).length\n    const failed = total - successful\n    \n    const strategiesUsed = {} as { [key in RecoveryStrategy]: number }\n    Object.values(RecoveryStrategy).forEach(strategy => {\n      strategiesUsed[strategy] = this.recoveryHistory.filter(r => r.strategy === strategy).length\n    })\n    \n    const avgRecoveryTime = total > 0 \n      ? this.recoveryHistory.reduce((sum, r) => sum + r.duration, 0) / total\n      : 0\n    \n    return {\n      totalRecoveries: total,\n      successfulRecoveries: successful,\n      failedRecoveries: failed,\n      successRate: total > 0 ? (successful / total) * 100 : 0,\n      averageRecoveryTime: avgRecoveryTime,\n      strategiesUsed\n    }\n  }\n\n  /**\n   * 更新配置\n   */\n  updateConfiguration(config: Partial<RecoveryConfiguration>): void {\n    this.configuration = { ...this.configuration, ...config }\n    console.log('Error recovery configuration updated:', config)\n  }\n\n  /**\n   * 重置熔断器\n   */\n  resetCircuitBreaker(): void {\n    this.circuitBreakerState = CircuitBreakerState.CLOSED\n    this.circuitBreakerOpenTime = null\n    console.log('Circuit breaker reset to closed state')\n    this.emit('circuitBreakerReset')\n  }\n\n  /**\n   * 清除历史数据\n   */\n  clearHistory(): void {\n    this.recoveryHistory = []\n    this.errorCounts.clear()\n    Object.values(ErrorType).forEach(errorType => {\n      this.errorCounts.set(errorType, 0)\n    })\n    this.consecutiveFailures = 0\n    this.lastErrorTime = null\n    console.log('Error recovery history cleared')\n  }\n\n  /**\n   * 销毁恢复系统\n   */\n  destroy(): void {\n    this.stopHealthCheck()\n    this.removeAllListeners()\n    console.log('Database error recovery system destroyed')\n  }\n}\n\n// 创建全局错误恢复实例\nexport const errorRecovery = new DatabaseErrorRecovery()\n\n// 监听关键事件\nerrorRecovery.on('emergencyShutdown', (data) => {\n  console.error('EMERGENCY SHUTDOWN TRIGGERED:', data)\n  // 这里可以集成外部告警系统\n})\n\nerrorRecovery.on('circuitBreakerOpened', (data) => {\n  console.warn('CIRCUIT BREAKER OPENED:', data)\n  // 这里可以发送告警通知\n})\n\nerrorRecovery.on('unrecoverableError', (data) => {\n  console.error('UNRECOVERABLE ERROR DETECTED:', data)\n  // 这里可以发送紧急通知\n})\n\n// 导出便捷函数\nexport const getErrorStatistics = () => errorRecovery.getErrorStatistics()\nexport const getRecoveryStatistics = () => errorRecovery.getRecoveryStatistics()\nexport const getRecoveryHistory = (limit?: number) => errorRecovery.getRecoveryHistory(limit)\nexport const resetCircuitBreaker = () => errorRecovery.resetCircuitBreaker()\nexport const updateRecoveryConfiguration = (config: Partial<RecoveryConfiguration>) => \n  errorRecovery.updateConfiguration(config)\n\n// 默认导出错误恢复系统\nexport default errorRecovery"],"names":["CircuitBreakerState","DatabaseErrorRecovery","ErrorType","RecoveryStrategy","errorRecovery","getErrorStatistics","getRecoveryHistory","getRecoveryStatistics","resetCircuitBreaker","updateRecoveryConfiguration","EventEmitter","constructor","config","maxHistorySize","recoveryHistory","errorCounts","Map","circuitBreakerState","circuitBreakerOpenTime","isRecovering","healthCheckInterval","lastErrorTime","consecutiveFailures","configuration","maxRetryAttempts","parseInt","process","env","DB_MAX_RETRY_ATTEMPTS","retryDelayMs","DB_RETRY_DELAY","exponentialBackoff","DB_EXPONENTIAL_BACKOFF","circuitBreakerThreshold","DB_CIRCUIT_BREAKER_THRESHOLD","circuitBreakerTimeoutMs","DB_CIRCUIT_BREAKER_TIMEOUT","failoverEnabled","DB_FAILOVER_ENABLED","gracefulDegradationEnabled","DB_GRACEFUL_DEGRADATION","emergencyShutdownThreshold","DB_EMERGENCY_SHUTDOWN_THRESHOLD","healthCheckIntervalMs","DB_HEALTH_CHECK_INTERVAL","recoveryTimeoutMs","DB_RECOVERY_TIMEOUT","Object","values","forEach","errorType","set","setupEventListeners","startHealthCheck","enhancedDb","on","error","handleDatabaseError","databaseMonitor","alert","level","AlertLevel","CRITICAL","ERROR","handleMonitoringAlert","console","message","analysis","analyzeError","updateErrorCounts","updateCircuitBreakerState","warn","isRecoverable","executeRecoveryStrategy","emit","recoveryError","includes","fakeError","Error","errorMessage","toLowerCase","stats","getStats","memUsage","memoryUsage","severity","recommendedStrategy","estimatedRecoveryTime","requiresManualIntervention","context","connectionState","state","recentErrors","getRecentErrorCount","systemLoad","getSystemLoad","availableMemory","heapTotal","heapUsed","currentCount","get","Date","threshold","now","getTime","info","startTime","attempts","success","lastError","beforeMetrics","log","executeRetryStrategy","executeReconnectStrategy","executeFailoverStrategy","executeCircuitBreakerStrategy","executeGracefulDegradationStrategy","executeEmergencyShutdownStrategy","String","afterMetrics","duration","result","timestamp","strategy","attemptsCount","metrics","beforeRecovery","afterRecovery","addRecoveryResult","i","delay","Math","pow","sleep","isHealthy","performHealthCheck","disconnect","connect","poolOptimizer","reason","gracefulShutdown","setInterval","stopHealthCheck","clearInterval","timeWindowMs","cutoffTime","filter","length","cpuUsage","user","system","ms","Promise","resolve","setTimeout","push","slice","limit","errorsByType","totalErrors","Array","from","reduce","sum","count","total","successful","r","failed","strategiesUsed","avgRecoveryTime","totalRecoveries","successfulRecoveries","failedRecoveries","successRate","averageRecoveryTime","updateConfiguration","clearHistory","clear","destroy","removeAllListeners","data"],"mappings":"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"}