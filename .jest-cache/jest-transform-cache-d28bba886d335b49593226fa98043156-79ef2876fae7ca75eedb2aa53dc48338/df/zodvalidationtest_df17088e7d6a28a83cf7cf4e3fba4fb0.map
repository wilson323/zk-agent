{"version":3,"sources":["E:\\zk-agent\\__tests__\\validation\\zod-validation.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/validation/zod-validation.test.ts\r\n * @description Zod验证系统的完整测试套件\r\n * @author zk-agent开发团队\r\n * @lastUpdate 2024-12-19\r\n */\r\n\r\nimport { describe, it, expect } from '@jest/globals'\r\nimport {\r\n  validateCADFile,\r\n  validateChatMessage,\r\n  validateAgentConfig,\r\n  validateUserInput,\r\n  CADFileSchema,\r\n  ChatMessageSchema,\r\n  AgentConfigSchema,\r\n  UserInputSchema,\r\n  CADAnalysisConfigSchema,\r\n  ResponsiveConfigSchema,\r\n  VALIDATION_LIMITS,\r\n  createValidator,\r\n  sanitizeAndValidate,\r\n} from '@/lib/validation/schemas'\r\n\r\n// 中间件测试暂时注释掉，避免环境依赖问题\r\n// import {\r\n//   withValidation,\r\n//   validateRequest,\r\n//   withSecurity,\r\n//   combineMiddleware,\r\n//   ValidationError,\r\n// } from '@/lib/validation/middleware'\r\n\r\n// import { NextRequest, NextResponse } from 'next/server'\r\n\r\n// 测试数据工厂\r\nconst createMockFile = (overrides: Partial<any> = {}) => ({\r\n  name: 'test.dwg',\r\n  size: 1024 * 1024, // 1MB\r\n  type: 'application/x-dwg',\r\n  lastModified: Date.now(),\r\n  ...overrides,\r\n})\r\n\r\nconst createMockChatMessage = (overrides: Partial<any> = {}) => ({\r\n  content: 'Hello, this is a test message',\r\n  type: 'text',\r\n  role: 'user',\r\n  timestamp: new Date(),\r\n  ...overrides,\r\n})\r\n\r\nconst createMockAgentConfig = (overrides: Partial<any> = {}) => ({\r\n  id: 'test-agent-001',\r\n  name: 'Test Agent',\r\n  description: 'A test agent for validation',\r\n  type: 'fastgpt',\r\n  capabilities: ['chat', 'analysis'],\r\n  config: {},\r\n  enabled: true,\r\n  priority: 50,\r\n  ...overrides,\r\n})\r\n\r\nconst createMockUserInput = (overrides: Partial<any> = {}) => ({\r\n  email: 'test@example.com',\r\n  name: 'Test User',\r\n  password: 'TestPass123',\r\n  ...overrides,\r\n})\r\n\r\ndescribe('Zod验证系统测试', () => {\r\n  describe('CAD文件验证', () => {\r\n    it('应该验证有效的CAD文件', () => {\r\n      const validFile = createMockFile()\r\n      const result = validateCADFile(validFile)\r\n      \r\n      expect(result.success).toBe(true)\r\n      if (result.success) {\r\n        expect(result.data.name).toBe('test.dwg')\r\n        expect(result.data.size).toBe(1024 * 1024)\r\n        expect(result.data.type).toBe('application/x-dwg')\r\n      }\r\n    })\r\n\r\n    it('应该拒绝不支持的文件格式', () => {\r\n      const invalidFile = createMockFile({\r\n        name: 'test.txt',\r\n        type: 'text/plain'\r\n      })\r\n      const result = validateCADFile(invalidFile)\r\n      \r\n      expect(result.success).toBe(false)\r\n      if (!result.success) {\r\n        expect(result.error.message).toBe('CAD文件验证失败')\r\n        expect(result.error.issues).toHaveLength(2) // name和type都不符合\r\n      }\r\n    })\r\n\r\n    it('应该拒绝过大的文件', () => {\r\n      const largeFile = createMockFile({\r\n        size: VALIDATION_LIMITS.MAX_FILE_SIZE + 1\r\n      })\r\n      const result = validateCADFile(largeFile)\r\n      \r\n      expect(result.success).toBe(false)\r\n      if (!result.success) {\r\n        expect(result.error.issues.some(issue => \r\n          issue.message.includes('文件大小不能超过')\r\n        )).toBe(true)\r\n      }\r\n    })\r\n\r\n    it('应该拒绝空文件名', () => {\r\n      const emptyNameFile = createMockFile({ name: '' })\r\n      const result = validateCADFile(emptyNameFile)\r\n      \r\n      expect(result.success).toBe(false)\r\n    })\r\n\r\n    it('应该支持所有CAD文件格式', () => {\r\n      const formats = [\r\n        { name: 'test.dwg', type: 'application/x-dwg' },\r\n        { name: 'test.dxf', type: 'application/x-dxf' },\r\n        { name: 'test.step', type: 'application/step' },\r\n        { name: 'test.iges', type: 'application/iges' },\r\n        { name: 'test.stl', type: 'model/stl' },\r\n        { name: 'test.obj', type: 'model/obj' },\r\n        { name: 'test.gltf', type: 'model/gltf+json' },\r\n        { name: 'test.glb', type: 'model/gltf-binary' },\r\n      ]\r\n\r\n      formats.forEach(format => {\r\n        const file = createMockFile(format)\r\n        const result = validateCADFile(file)\r\n        expect(result.success).toBe(true)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('聊天消息验证', () => {\r\n    it('应该验证有效的聊天消息', () => {\r\n      const validMessage = createMockChatMessage()\r\n      const result = validateChatMessage(validMessage)\r\n      \r\n      expect(result.success).toBe(true)\r\n      if (result.success) {\r\n        expect(result.data.content).toBe('Hello, this is a test message')\r\n        expect(result.data.type).toBe('text')\r\n        expect(result.data.role).toBe('user')\r\n      }\r\n    })\r\n\r\n    it('应该拒绝空消息内容', () => {\r\n      const emptyMessage = createMockChatMessage({ content: '' })\r\n      const result = validateChatMessage(emptyMessage)\r\n      \r\n      expect(result.success).toBe(false)\r\n    })\r\n\r\n    it('应该拒绝过长的消息', () => {\r\n      const longMessage = createMockChatMessage({\r\n        content: 'a'.repeat(VALIDATION_LIMITS.MAX_MESSAGE_LENGTH + 1)\r\n      })\r\n      const result = validateChatMessage(longMessage)\r\n      \r\n      expect(result.success).toBe(false)\r\n    })\r\n\r\n    it('应该检测潜在的XSS攻击', () => {\r\n      const maliciousMessages = [\r\n        '<script>alert(\"xss\")</script>',\r\n        'javascript:alert(\"xss\")',\r\n        'data:text/html,<script>alert(\"xss\")</script>',\r\n        'vbscript:msgbox(\"xss\")',\r\n        '<img onload=\"alert(\\'xss\\')\" src=\"x\">',\r\n        '<div onerror=\"alert(\\'xss\\')\">test</div>'\r\n      ]\r\n\r\n      maliciousMessages.forEach(content => {\r\n        const maliciousMessage = createMockChatMessage({ content })\r\n        const result = validateChatMessage(maliciousMessage)\r\n        expect(result.success).toBe(false)\r\n        if (!result.success) {\r\n          expect(result.error.issues.some(issue => \r\n            issue.message.includes('安全风险')\r\n          )).toBe(true)\r\n        }\r\n      })\r\n    })\r\n\r\n    it('应该支持所有消息类型和角色', () => {\r\n      const types = ['text', 'file', 'image', 'system']\r\n      const roles = ['user', 'assistant', 'system', 'tool']\r\n\r\n      types.forEach(type => {\r\n        roles.forEach(role => {\r\n          const message = createMockChatMessage({ type, role })\r\n          const result = validateChatMessage(message)\r\n          expect(result.success).toBe(true)\r\n        })\r\n      })\r\n    })\r\n\r\n    it('应该自动设置默认值', () => {\r\n      const minimalMessage = { content: 'test' }\r\n      const result = ChatMessageSchema.parse(minimalMessage)\r\n      \r\n      expect(result.type).toBe('text')\r\n      expect(result.role).toBe('user')\r\n      expect(result.timestamp).toBeInstanceOf(Date)\r\n    })\r\n  })\r\n\r\n  describe('智能体配置验证', () => {\r\n    it('应该验证有效的智能体配置', () => {\r\n      const validConfig = createMockAgentConfig()\r\n      const result = validateAgentConfig(validConfig)\r\n      \r\n      expect(result.success).toBe(true)\r\n      if (result.success) {\r\n        expect(result.data.id).toBe('test-agent-001')\r\n        expect(result.data.name).toBe('Test Agent')\r\n        expect(result.data.type).toBe('fastgpt')\r\n      }\r\n    })\r\n\r\n    it('应该拒绝无效的智能体ID', () => {\r\n      const invalidIds = [\r\n        '', // 空ID\r\n        'test agent', // 包含空格\r\n        'test@agent', // 包含特殊字符\r\n        'test.agent', // 包含点号\r\n        'test/agent', // 包含斜杠\r\n      ]\r\n\r\n      invalidIds.forEach(id => {\r\n        const config = createMockAgentConfig({ id })\r\n        const result = validateAgentConfig(config)\r\n        expect(result.success).toBe(false)\r\n      })\r\n    })\r\n\r\n    it('应该支持所有智能体类型', () => {\r\n      const types = ['fastgpt', 'cad', 'poster', 'custom']\r\n      \r\n      types.forEach(type => {\r\n        const config = createMockAgentConfig({ type })\r\n        const result = validateAgentConfig(config)\r\n        expect(result.success).toBe(true)\r\n      })\r\n    })\r\n\r\n    it('应该限制能力数量', () => {\r\n      const tooManyCapabilities = Array(VALIDATION_LIMITS.MAX_CAPABILITIES_COUNT + 1)\r\n        .fill(0)\r\n        .map((_, i) => `capability-${i}`)\r\n      \r\n      const config = createMockAgentConfig({ capabilities: tooManyCapabilities })\r\n      const result = validateAgentConfig(config)\r\n      \r\n      expect(result.success).toBe(false)\r\n    })\r\n\r\n    it('应该验证优先级范围', () => {\r\n      const invalidPriorities = [-1, 101, 999]\r\n      \r\n      invalidPriorities.forEach(priority => {\r\n        const config = createMockAgentConfig({ priority })\r\n        const result = validateAgentConfig(config)\r\n        expect(result.success).toBe(false)\r\n      })\r\n    })\r\n\r\n    it('应该设置默认值', () => {\r\n      const minimalConfig = {\r\n        id: 'test',\r\n        name: 'Test',\r\n        type: 'fastgpt'\r\n      }\r\n      const result = AgentConfigSchema.parse(minimalConfig)\r\n      \r\n      expect(result.capabilities).toEqual([])\r\n      expect(result.config).toEqual({})\r\n      expect(result.enabled).toBe(true)\r\n      expect(result.priority).toBe(50)\r\n    })\r\n  })\r\n\r\n  describe('用户输入验证', () => {\r\n    it('应该验证有效的用户输入', () => {\r\n      const validInput = createMockUserInput()\r\n      const result = validateUserInput(validInput)\r\n      \r\n      expect(result.success).toBe(true)\r\n      if (result.success) {\r\n        expect(result.data.email).toBe('test@example.com')\r\n        expect(result.data.name).toBe('Test User')\r\n      }\r\n    })\r\n\r\n    it('应该拒绝无效的邮箱格式', () => {\r\n      const invalidEmails = [\r\n        'invalid-email',\r\n        '@example.com',\r\n        'test@',\r\n        'test..test@example.com',\r\n        'test@example',\r\n      ]\r\n\r\n      invalidEmails.forEach(email => {\r\n        const input = createMockUserInput({ email })\r\n        const result = validateUserInput(input)\r\n        expect(result.success).toBe(false)\r\n      })\r\n    })\r\n\r\n    it('应该验证密码强度', () => {\r\n      const weakPasswords = [\r\n        'short', // 太短\r\n        'nouppercase123', // 没有大写字母\r\n        'NOLOWERCASE123', // 没有小写字母\r\n        'NoNumbers', // 没有数字\r\n      ]\r\n\r\n      weakPasswords.forEach(password => {\r\n        const input = createMockUserInput({ password })\r\n        const result = validateUserInput(input)\r\n        expect(result.success).toBe(false)\r\n      })\r\n    })\r\n\r\n    it('应该验证姓名格式', () => {\r\n      const validNames = [\r\n        '张三',\r\n        'John Doe',\r\n        '李小明',\r\n        'Mary Jane',\r\n        '王二小',\r\n      ]\r\n\r\n      validNames.forEach(name => {\r\n        const input = createMockUserInput({ name })\r\n        const result = validateUserInput(input)\r\n        expect(result.success).toBe(true)\r\n      })\r\n\r\n      const invalidNames = [\r\n        'John123', // 包含数字\r\n        'Test@User', // 包含特殊字符\r\n        'User_Name', // 包含下划线\r\n      ]\r\n\r\n      invalidNames.forEach(name => {\r\n        const input = createMockUserInput({ name })\r\n        const result = validateUserInput(input)\r\n        expect(result.success).toBe(false)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('CAD分析配置验证', () => {\r\n    it('应该验证有效的分析配置', () => {\r\n      const config = {\r\n        precision: 'high',\r\n        enableAI: true,\r\n        enableDeviceDetection: false,\r\n        timeout: 120000,\r\n        maxEntities: 1000,\r\n      }\r\n      \r\n      const result = CADAnalysisConfigSchema.parse(config)\r\n      expect(result.precision).toBe('high')\r\n      expect(result.enableAI).toBe(true)\r\n      expect(result.enableDeviceDetection).toBe(false)\r\n    })\r\n\r\n    it('应该设置默认值', () => {\r\n      const result = CADAnalysisConfigSchema.parse({})\r\n      \r\n      expect(result.precision).toBe('standard')\r\n      expect(result.enableAI).toBe(true)\r\n      expect(result.enableDeviceDetection).toBe(true)\r\n      expect(result.timeout).toBe(60000)\r\n      expect(result.maxEntities).toBe(5000)\r\n    })\r\n\r\n    it('应该验证超时时间范围', () => {\r\n      const invalidTimeouts = [500, VALIDATION_LIMITS.MAX_ANALYSIS_TIMEOUT + 1]\r\n      \r\n      invalidTimeouts.forEach(timeout => {\r\n        expect(() => CADAnalysisConfigSchema.parse({ timeout })).toThrow()\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('响应式配置验证', () => {\r\n    it('应该验证有效的响应式配置', () => {\r\n      const config = {\r\n        breakpoint: 'lg',\r\n        width: 1024,\r\n        height: 768,\r\n        deviceType: 'desktop',\r\n        touchOptimized: false,\r\n        performance: {\r\n          level: 'high',\r\n          memory: 8,\r\n          cores: 4,\r\n        }\r\n      }\r\n      \r\n      const result = ResponsiveConfigSchema.parse(config)\r\n      expect(result.breakpoint).toBe('lg')\r\n      expect(result.deviceType).toBe('desktop')\r\n      expect(result.performance?.level).toBe('high')\r\n    })\r\n\r\n    it('应该验证屏幕尺寸限制', () => {\r\n      const invalidSizes = [\r\n        { width: 319, height: 768 }, // 宽度太小\r\n        { width: 1024, height: 239 }, // 高度太小\r\n      ]\r\n\r\n      invalidSizes.forEach(size => {\r\n        expect(() => ResponsiveConfigSchema.parse(size)).toThrow()\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('验证工具函数', () => {\r\n    it('createValidator应该创建自定义验证器', () => {\r\n      const customSchema = CADFileSchema\r\n      const validator = createValidator(customSchema, '自定义错误消息')\r\n      \r\n      const validFile = createMockFile()\r\n      const result = validator(validFile)\r\n      \r\n      expect(result.success).toBe(true)\r\n      \r\n      const invalidFile = createMockFile({ name: 'invalid.txt' })\r\n      const invalidResult = validator(invalidFile)\r\n      \r\n      expect(invalidResult.success).toBe(false)\r\n      if (!invalidResult.success) {\r\n        expect(invalidResult.error.message).toBe('自定义错误消息')\r\n      }\r\n    })\r\n\r\n    it('sanitizeAndValidate应该清理并验证数据', () => {\r\n      const schema = ChatMessageSchema\r\n      const dirtyData = {\r\n        content: '  Hello World  ',\r\n        type: 'text',\r\n        role: 'user',\r\n      }\r\n      \r\n      const sanitizers = [\r\n        (data: any) => ({\r\n          ...data,\r\n          content: data.content?.trim?.() || data.content\r\n        })\r\n      ]\r\n      \r\n      const result = sanitizeAndValidate(schema, dirtyData, sanitizers)\r\n      \r\n      expect(result.success).toBe(true)\r\n      if (result.success) {\r\n        expect(result.data.content).toBe('Hello World')\r\n      }\r\n    })\r\n  })\r\n\r\n  describe('验证限制常量', () => {\r\n    it('应该定义所有必要的限制', () => {\r\n      expect(VALIDATION_LIMITS.MAX_FILE_SIZE).toBe(100 * 1024 * 1024)\r\n      expect(VALIDATION_LIMITS.MAX_FILENAME_LENGTH).toBe(255)\r\n      expect(VALIDATION_LIMITS.MAX_MESSAGE_LENGTH).toBe(4000)\r\n      expect(VALIDATION_LIMITS.MAX_USER_NAME_LENGTH).toBe(100)\r\n      expect(VALIDATION_LIMITS.MIN_PASSWORD_LENGTH).toBe(8)\r\n      expect(VALIDATION_LIMITS.MAX_CAD_ENTITIES).toBe(10000)\r\n      expect(VALIDATION_LIMITS.MAX_ANALYSIS_TIMEOUT).toBe(300000)\r\n      expect(VALIDATION_LIMITS.MAX_AGENT_NAME_LENGTH).toBe(50)\r\n      expect(VALIDATION_LIMITS.MAX_AGENT_DESCRIPTION_LENGTH).toBe(500)\r\n      expect(VALIDATION_LIMITS.MAX_CAPABILITIES_COUNT).toBe(20)\r\n    })\r\n  })\r\n\r\n  describe('边界值测试', () => {\r\n    it('应该处理边界值情况', () => {\r\n      // 最大允许的文件大小\r\n      const maxSizeFile = createMockFile({ \r\n        size: VALIDATION_LIMITS.MAX_FILE_SIZE \r\n      })\r\n      expect(validateCADFile(maxSizeFile).success).toBe(true)\r\n      \r\n      // 最大允许的消息长度\r\n      const maxLengthMessage = createMockChatMessage({\r\n        content: 'a'.repeat(VALIDATION_LIMITS.MAX_MESSAGE_LENGTH)\r\n      })\r\n      expect(validateChatMessage(maxLengthMessage).success).toBe(true)\r\n      \r\n      // 最小密码长度\r\n      const minPasswordUser = createMockUserInput({\r\n        password: 'A'.repeat(VALIDATION_LIMITS.MIN_PASSWORD_LENGTH - 1) + 'a1'\r\n      })\r\n      expect(validateUserInput(minPasswordUser).success).toBe(true)\r\n    })\r\n  })\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理非预期的输入类型', () => {\r\n      const invalidInputs = [\r\n        null,\r\n        undefined,\r\n        'string',\r\n        123,\r\n        [],\r\n        true,\r\n      ]\r\n\r\n      invalidInputs.forEach(input => {\r\n        const result = validateCADFile(input)\r\n        expect(result.success).toBe(false)\r\n      })\r\n    })\r\n\r\n    it('应该提供详细的错误信息', () => {\r\n      const invalidFile = {\r\n        name: '', // 空名称\r\n        size: -1, // 负数大小\r\n        type: 'invalid/type', // 无效类型\r\n      }\r\n      \r\n      const result = validateCADFile(invalidFile)\r\n      expect(result.success).toBe(false)\r\n      \r\n      if (!result.success) {\r\n        expect(result.error.issues.length).toBeGreaterThan(0)\r\n        result.error.issues.forEach(issue => {\r\n          expect(issue.path).toBeDefined()\r\n          expect(issue.message).toBeDefined()\r\n          expect(issue.code).toBeDefined()\r\n        })\r\n      }\r\n    })\r\n  })\r\n})\r\n\r\n// 中间件测试暂时注释掉，避免Next.js环境依赖问题\r\n// describe('验证中间件测试', () => {\r\n//   // 测试代码已注释，可在完整环境中启用\r\n// }) "],"names":["createMockFile","overrides","name","size","type","lastModified","Date","now","createMockChatMessage","content","role","timestamp","createMockAgentConfig","id","description","capabilities","config","enabled","priority","createMockUserInput","email","password","describe","it","validFile","result","validateCADFile","expect","success","toBe","data","invalidFile","error","message","issues","toHaveLength","largeFile","VALIDATION_LIMITS","MAX_FILE_SIZE","some","issue","includes","emptyNameFile","formats","forEach","format","file","validMessage","validateChatMessage","emptyMessage","longMessage","repeat","MAX_MESSAGE_LENGTH","maliciousMessages","maliciousMessage","types","roles","minimalMessage","ChatMessageSchema","parse","toBeInstanceOf","validConfig","validateAgentConfig","invalidIds","tooManyCapabilities","Array","MAX_CAPABILITIES_COUNT","fill","map","_","i","invalidPriorities","minimalConfig","AgentConfigSchema","toEqual","validInput","validateUserInput","invalidEmails","input","weakPasswords","validNames","invalidNames","precision","enableAI","enableDeviceDetection","timeout","maxEntities","CADAnalysisConfigSchema","invalidTimeouts","MAX_ANALYSIS_TIMEOUT","toThrow","breakpoint","width","height","deviceType","touchOptimized","performance","level","memory","cores","ResponsiveConfigSchema","invalidSizes","customSchema","CADFileSchema","validator","createValidator","invalidResult","schema","dirtyData","sanitizers","trim","sanitizeAndValidate","MAX_FILENAME_LENGTH","MAX_USER_NAME_LENGTH","MIN_PASSWORD_LENGTH","MAX_CAD_ENTITIES","MAX_AGENT_NAME_LENGTH","MAX_AGENT_DESCRIPTION_LENGTH","maxSizeFile","maxLengthMessage","minPasswordUser","invalidInputs","undefined","length","toBeGreaterThan","path","toBeDefined","code"],"mappings":"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"}