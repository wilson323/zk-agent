{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\sharing.test.ts"],"sourcesContent":["/**\r\n * Sharing API路由错误处理测试\r\n * 测试分享功能相关的各种错误场景\r\n */\r\n\r\nimport { NextRequest } from 'next/server';\r\nimport { GET, POST, PUT, DELETE } from '../../../app/api/sharing/route';\r\n// import { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\r\n// import { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';\r\n\r\n// Mock dependencies\r\njest.mock('../../../lib/services/sharing-service', () => ({\r\n  createShare: jest.fn(),\r\n  getShare: jest.fn(),\r\n  updateShare: jest.fn(),\r\n  deleteShare: jest.fn(),\r\n  validateShareToken: jest.fn(),\r\n  generateShareLink: jest.fn(),\r\n  checkSharePermissions: jest.fn(),\r\n  getShareAnalytics: jest.fn(),\r\n  trackShareAccess: jest.fn(),\r\n  validateShareExpiration: jest.fn()\r\n}));\r\n\r\njest.mock('../../../lib/services/content-service', () => ({\r\n  getContent: jest.fn(),\r\n  validateContentAccess: jest.fn(),\r\n  checkContentOwnership: jest.fn(),\r\n  getContentMetadata: jest.fn(),\r\n  validateContentType: jest.fn()\r\n}));\r\n\r\njest.mock('../../../lib/services/notification-service', () => ({\r\n  sendShareNotification: jest.fn(),\r\n  notifyShareAccess: jest.fn(),\r\n  sendShareExpiredNotification: jest.fn()\r\n}));\r\n\r\njest.mock('../../../lib/auth/session', () => ({\r\n  validateSession: jest.fn(),\r\n  getUserPermissions: jest.fn(),\r\n  checkUserAccess: jest.fn()\r\n}));\r\n\r\njest.mock('../../../lib/storage/share-store', () => ({\r\n  storeShare: jest.fn(),\r\n  getShare: jest.fn(),\r\n  updateShare: jest.fn(),\r\n  deleteShare: jest.fn(),\r\n  listShares: jest.fn(),\r\n  cleanupExpiredShares: jest.fn()\r\n}));\r\n\r\njest.mock('../../../lib/security/access-control', () => ({\r\n  validateShareAccess: jest.fn(),\r\n  checkRateLimit: jest.fn(),\r\n  detectSuspiciousActivity: jest.fn(),\r\n  validateIPAccess: jest.fn()\r\n}));\r\n\r\ndescribe('Sharing API Error Handling', () => {\r\n  let errorHandler: any;\r\n\r\n  beforeEach(() => {\r\n    // errorHandler = GlobalErrorHandler.getInstance();\r\n    errorHandler = { errorCount: 0, circuitBreakerOpen: false };\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('GET /api/sharing - Get Share Information', () => {\r\n    it('should handle invalid share token', async () => {\r\n      const { validateShareToken } = require('../../../lib/services/sharing-service');\r\n      validateShareToken.mockRejectedValue(new Error('Invalid or malformed share token'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=invalid-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.message).toContain('Invalid or malformed share token');\r\n    });\r\n\r\n    it('should handle expired share token', async () => {\r\n      const { validateShareExpiration } = require('../../../lib/services/sharing-service');\r\n      validateShareExpiration.mockRejectedValue(new Error('Share token has expired'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=expired-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(410);\r\n      expect(data.error.code).toBe('EXPIRED');\r\n      expect(data.error.message).toContain('Share token has expired');\r\n    });\r\n\r\n    it('should handle share not found', async () => {\r\n      const { getShare } = require('../../../lib/services/sharing-service');\r\n      getShare.mockRejectedValue(new Error('Share not found'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=nonexistent-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(data.error.code).toBe('NOT_FOUND');\r\n      expect(data.error.message).toContain('Share not found');\r\n    });\r\n\r\n    it('should handle share access denied', async () => {\r\n      const { checkSharePermissions } = require('../../../lib/services/sharing-service');\r\n      checkSharePermissions.mockRejectedValue(new Error('Access denied: insufficient permissions'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=restricted-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(403);\r\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\r\n      expect(data.error.message).toContain('Access denied');\r\n    });\r\n\r\n    it('should handle password protected share without password', async () => {\r\n      const { getShare } = require('../../../lib/services/sharing-service');\r\n      getShare.mockRejectedValue(new Error('Password required for protected share'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=protected-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\r\n      expect(data.error.message).toContain('Password required');\r\n    });\r\n\r\n    it('should handle incorrect share password', async () => {\r\n      const { validateShareToken } = require('../../../lib/services/sharing-service');\r\n      validateShareToken.mockRejectedValue(new Error('Incorrect password for protected share'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=protected-token&password=wrong');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(401);\r\n      expect(data.error.code).toBe('AUTHENTICATION_ERROR');\r\n      expect(data.error.message).toContain('Incorrect password');\r\n    });\r\n\r\n    it('should handle share access limit exceeded', async () => {\r\n      const { trackShareAccess } = require('../../../lib/services/sharing-service');\r\n      trackShareAccess.mockRejectedValue(new Error('Share access limit exceeded'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=limited-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(429);\r\n      expect(data.error.code).toBe('RATE_LIMIT_ERROR');\r\n      expect(data.error.message).toContain('Share access limit exceeded');\r\n    });\r\n\r\n    it('should handle corrupted share content', async () => {\r\n      const { getContent } = require('../../../lib/services/content-service');\r\n      getContent.mockRejectedValue(new Error('Share content is corrupted or unavailable'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=corrupted-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(422);\r\n      expect(data.error.message).toContain('Share content is corrupted');\r\n    });\r\n\r\n    it('should handle sharing service unavailable', async () => {\r\n      const { getShare } = require('../../../lib/services/sharing-service');\r\n      getShare.mockRejectedValue(new Error('Sharing service temporarily unavailable'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=valid-token');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(503);\r\n      expect(data.error.message).toContain('Sharing service temporarily unavailable');\r\n    });\r\n\r\n    it('should handle missing share token parameter', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/sharing');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.message).toContain('Share token is required');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/sharing - Create Share', () => {\r\n    let validShareData: any;\r\n\r\n    beforeEach(() => {\r\n      validShareData = {\r\n        contentId: 'content-123',\r\n        contentType: 'document',\r\n        permissions: ['read'],\r\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n        password: null,\r\n        maxAccess: 10\r\n      };\r\n    });\r\n\r\n    it('should handle missing content ID', async () => {\r\n      const invalidData = { ...validShareData };\r\n      delete invalidData.contentId;\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(invalidData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.details).toContain('contentId');\r\n    });\r\n\r\n    it('should handle content not found', async () => {\r\n      const { getContent } = require('../../../lib/services/content-service');\r\n      getContent.mockRejectedValue(new Error('Content not found'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ ...validShareData, contentId: 'nonexistent-content' }),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(data.error.code).toBe('NOT_FOUND');\r\n      expect(data.error.message).toContain('Content not found');\r\n    });\r\n\r\n    it('should handle insufficient permissions to share content', async () => {\r\n      const { checkContentOwnership } = require('../../../lib/services/content-service');\r\n      checkContentOwnership.mockRejectedValue(new Error('Insufficient permissions to share this content'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(validShareData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer limited-user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(403);\r\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\r\n      expect(data.error.message).toContain('Insufficient permissions');\r\n    });\r\n\r\n    it('should handle invalid expiration date', async () => {\r\n      const invalidExpirationData = {\r\n        ...validShareData,\r\n        expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() // Past date\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(invalidExpirationData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.message).toContain('Invalid expiration date');\r\n    });\r\n\r\n    it('should handle weak password for protected share', async () => {\r\n      const weakPasswordData = {\r\n        ...validShareData,\r\n        password: '123' // Too weak\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(weakPasswordData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.message).toContain('Password too weak');\r\n    });\r\n\r\n    it('should handle share limit exceeded for user', async () => {\r\n      const { createShare } = require('../../../lib/services/sharing-service');\r\n      createShare.mockRejectedValue(new Error('Share limit exceeded for user'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(validShareData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(429);\r\n      expect(data.error.code).toBe('RATE_LIMIT_ERROR');\r\n      expect(data.error.message).toContain('Share limit exceeded');\r\n    });\r\n\r\n    it('should handle share token generation failure', async () => {\r\n      const { generateShareLink } = require('../../../lib/services/sharing-service');\r\n      generateShareLink.mockRejectedValue(new Error('Failed to generate share token'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(validShareData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.error.message).toContain('Failed to generate share token');\r\n    });\r\n\r\n    it('should handle invalid content type for sharing', async () => {\r\n      const { validateContentType } = require('../../../lib/services/content-service');\r\n      validateContentType.mockRejectedValue(new Error('Content type not supported for sharing'));\r\n\r\n      const invalidContentTypeData = {\r\n        ...validShareData,\r\n        contentType: 'unsupported-type'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(invalidContentTypeData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(415);\r\n      expect(data.error.message).toContain('Content type not supported');\r\n    });\r\n\r\n    it('should handle share storage failure', async () => {\r\n      const { storeShare } = require('../../../lib/storage/share-store');\r\n      storeShare.mockRejectedValue(new Error('Failed to store share: database error'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(validShareData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.error.message).toContain('Failed to store share');\r\n    });\r\n\r\n    it('should handle notification service failure', async () => {\r\n      const { sendShareNotification } = require('../../../lib/services/notification-service');\r\n      sendShareNotification.mockRejectedValue(new Error('Failed to send share notification'));\r\n\r\n      const notificationData = {\r\n        ...validShareData,\r\n        notifyUsers: ['user@example.com']\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(notificationData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.error.message).toContain('Failed to send share notification');\r\n    });\r\n  });\r\n\r\n  describe('PUT /api/sharing - Update Share', () => {\r\n    it('should handle share not found for update', async () => {\r\n      const { getShare } = require('../../../lib/storage/share-store');\r\n      getShare.mockRejectedValue(new Error('Share not found'));\r\n\r\n      const updateData = {\r\n        shareId: 'nonexistent-share',\r\n        expiresAt: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString()\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updateData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(data.error.code).toBe('NOT_FOUND');\r\n      expect(data.error.message).toContain('Share not found');\r\n    });\r\n\r\n    it('should handle unauthorized share update', async () => {\r\n      const { checkSharePermissions } = require('../../../lib/services/sharing-service');\r\n      checkSharePermissions.mockRejectedValue(new Error('Unauthorized to update this share'));\r\n\r\n      const updateData = {\r\n        shareId: 'share-123',\r\n        maxAccess: 20\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updateData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer other-user-token'\r\n        }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(403);\r\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\r\n      expect(data.error.message).toContain('Unauthorized to update');\r\n    });\r\n\r\n    it('should handle invalid share update data', async () => {\r\n      const invalidUpdateData = {\r\n        shareId: 'share-123',\r\n        maxAccess: -1, // Invalid value\r\n        expiresAt: 'invalid-date'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(invalidUpdateData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.message).toContain('Invalid update data');\r\n    });\r\n\r\n    it('should handle concurrent share update conflict', async () => {\r\n      const { updateShare } = require('../../../lib/services/sharing-service');\r\n      updateShare.mockRejectedValue(new Error('Concurrent update detected: share modified by another user'));\r\n\r\n      const updateData = {\r\n        shareId: 'share-123',\r\n        version: 1,\r\n        maxAccess: 15\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updateData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(409);\r\n      expect(data.error.code).toBe('CONFLICT');\r\n      expect(data.error.message).toContain('Concurrent update detected');\r\n    });\r\n\r\n    it('should handle share update storage failure', async () => {\r\n      const { updateShare } = require('../../../lib/storage/share-store');\r\n      updateShare.mockRejectedValue(new Error('Failed to update share: storage error'));\r\n\r\n      const updateData = {\r\n        shareId: 'share-123',\r\n        maxAccess: 15\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'PUT',\r\n        body: JSON.stringify(updateData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await PUT(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.error.message).toContain('Failed to update share');\r\n    });\r\n  });\r\n\r\n  describe('DELETE /api/sharing - Delete Share', () => {\r\n    it('should handle share not found for deletion', async () => {\r\n      const { getShare } = require('../../../lib/storage/share-store');\r\n      getShare.mockRejectedValue(new Error('Share not found'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?shareId=nonexistent-share', {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': 'Bearer user-token' }\r\n      });\r\n\r\n      const response = await DELETE(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(404);\r\n      expect(data.error.code).toBe('NOT_FOUND');\r\n      expect(data.error.message).toContain('Share not found');\r\n    });\r\n\r\n    it('should handle unauthorized share deletion', async () => {\r\n      const { checkSharePermissions } = require('../../../lib/services/sharing-service');\r\n      checkSharePermissions.mockRejectedValue(new Error('Unauthorized to delete this share'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?shareId=share-123', {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': 'Bearer other-user-token' }\r\n      });\r\n\r\n      const response = await DELETE(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(403);\r\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\r\n      expect(data.error.message).toContain('Unauthorized to delete');\r\n    });\r\n\r\n    it('should handle share deletion storage failure', async () => {\r\n      const { deleteShare } = require('../../../lib/storage/share-store');\r\n      deleteShare.mockRejectedValue(new Error('Failed to delete share: storage error'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?shareId=share-123', {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': 'Bearer user-token' }\r\n      });\r\n\r\n      const response = await DELETE(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.error.message).toContain('Failed to delete share');\r\n    });\r\n\r\n    it('should handle missing share ID parameter', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'DELETE',\r\n        headers: { 'Authorization': 'Bearer user-token' }\r\n      });\r\n\r\n      const response = await DELETE(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('VALIDATION_ERROR');\r\n      expect(data.error.message).toContain('Share ID is required');\r\n    });\r\n  });\r\n\r\n  describe('Security and Access Control', () => {\r\n    it('should handle malicious share data injection', async () => {\r\n      const maliciousData = {\r\n        contentId: '<script>alert(\"xss\")</script>',\r\n        contentType: 'document',\r\n        permissions: ['read', 'execute'] // Suspicious permission\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(maliciousData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(400);\r\n      expect(data.error.code).toBe('SECURITY_VIOLATION');\r\n      expect(data.error.message).toContain('Malicious data detected');\r\n    });\r\n\r\n    it('should handle suspicious share access patterns', async () => {\r\n      const { detectSuspiciousActivity } = require('../../../lib/security/access-control');\r\n      detectSuspiciousActivity.mockRejectedValue(new Error('Suspicious access pattern detected'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=valid-token', {\r\n        headers: { 'X-Forwarded-For': '192.168.1.100' }\r\n      });\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(403);\r\n      expect(data.error.code).toBe('SECURITY_VIOLATION');\r\n      expect(data.error.message).toContain('Suspicious access pattern');\r\n    });\r\n\r\n    it('should handle IP address restriction violations', async () => {\r\n      const { validateIPAccess } = require('../../../lib/security/access-control');\r\n      validateIPAccess.mockRejectedValue(new Error('Access denied: IP address not allowed'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing?token=restricted-token', {\r\n        headers: { 'X-Forwarded-For': '10.0.0.1' }\r\n      });\r\n\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(403);\r\n      expect(data.error.code).toBe('ACCESS_DENIED');\r\n      expect(data.error.message).toContain('IP address not allowed');\r\n    });\r\n\r\n    it('should handle share rate limiting', async () => {\r\n      const { checkRateLimit } = require('../../../lib/security/access-control');\r\n      checkRateLimit.mockRejectedValue(new Error('Rate limit exceeded for sharing operations'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          contentId: 'content-123',\r\n          contentType: 'document'\r\n        }),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(429);\r\n      expect(data.error.code).toBe('RATE_LIMIT_ERROR');\r\n      expect(data.error.message).toContain('Rate limit exceeded');\r\n    });\r\n  });\r\n\r\n  describe('Batch Operations and Analytics', () => {\r\n    it('should handle batch share creation with partial failures', async () => {\r\n      const { createShare } = require('../../../lib/services/sharing-service');\r\n      createShare.mockImplementation((data: any) => {\r\n        if (data.contentId === 'invalid-content') {\r\n          throw new Error('Content not found');\r\n        }\r\n        return Promise.resolve({ shareId: 'share-' + data.contentId });\r\n      });\r\n\r\n      const batchData = {\r\n        shares: [\r\n          { contentId: 'content-1', contentType: 'document' },\r\n          { contentId: 'invalid-content', contentType: 'document' },\r\n          { contentId: 'content-3', contentType: 'document' }\r\n        ]\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing/batch', {\r\n        method: 'POST',\r\n        body: JSON.stringify(batchData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(207); // Multi-status\r\n      expect(data.results).toHaveLength(3);\r\n      expect(data.results[1].error).toBeDefined();\r\n    });\r\n\r\n    it('should handle share analytics calculation failure', async () => {\r\n      const { getShareAnalytics } = require('../../../lib/services/sharing-service');\r\n      getShareAnalytics.mockRejectedValue(new Error('Failed to calculate share analytics'));\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing/analytics?shareId=share-123');\r\n      const response = await GET(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(500);\r\n      expect(data.error.message).toContain('Failed to calculate share analytics');\r\n    });\r\n\r\n    it('should handle large batch operation size limit', async () => {\r\n      const largeBatchData = {\r\n        shares: Array(1001).fill({ contentId: 'content-1', contentType: 'document' })\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing/batch', {\r\n        method: 'POST',\r\n        body: JSON.stringify(largeBatchData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(response.status).toBe(413);\r\n      expect(data.error.code).toBe('PAYLOAD_TOO_LARGE');\r\n      expect(data.error.message).toContain('Batch size exceeds limit');\r\n    });\r\n  });\r\n\r\n  describe('Error Recovery and Monitoring', () => {\r\n    it('should provide sharing operation recovery suggestions', async () => {\r\n      const { createShare } = require('../../../lib/services/sharing-service');\r\n      createShare.mockRejectedValue(new Error('Temporary sharing service outage'));\r\n\r\n      const validShareData = {\r\n        contentId: 'content-123',\r\n        contentType: 'document'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(validShareData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(data.error.recovery).toBeDefined();\r\n      expect(data.error.recovery.suggestions).toContain('Retry share creation');\r\n    });\r\n\r\n    it('should track sharing operation performance', async () => {\r\n      const { createShare } = require('../../../lib/services/sharing-service');\r\n      createShare.mockRejectedValue(new Error('Test error'));\r\n\r\n      const validShareData = {\r\n        contentId: 'content-123',\r\n        contentType: 'document'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(validShareData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      await POST(request);\r\n\r\n      const stats = errorHandler.getErrorStats();\r\n      expect(stats.errorCount).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should include sharing context in error responses', async () => {\r\n      const { createShare } = require('../../../lib/services/sharing-service');\r\n      createShare.mockRejectedValue(new Error('Test error'));\r\n\r\n      const validShareData = {\r\n        contentId: 'content-123',\r\n        contentType: 'document'\r\n      };\r\n\r\n      const request = new NextRequest('http://localhost:3000/api/sharing', {\r\n        method: 'POST',\r\n        body: JSON.stringify(validShareData),\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': 'Bearer user-token'\r\n        }\r\n      });\r\n\r\n      const response = await POST(request);\r\n      const data = await response.json();\r\n\r\n      expect(data.error.context).toBeDefined();\r\n      expect(data.error.context.operation).toBe('createShare');\r\n      expect(data.error.context.contentId).toBe('content-123');\r\n    });\r\n  });\r\n});"],"names":["jest","mock","createShare","fn","getShare","updateShare","deleteShare","validateShareToken","generateShareLink","checkSharePermissions","getShareAnalytics","trackShareAccess","validateShareExpiration","getContent","validateContentAccess","checkContentOwnership","getContentMetadata","validateContentType","sendShareNotification","notifyShareAccess","sendShareExpiredNotification","validateSession","getUserPermissions","checkUserAccess","storeShare","listShares","cleanupExpiredShares","validateShareAccess","checkRateLimit","detectSuspiciousActivity","validateIPAccess","describe","errorHandler","beforeEach","errorCount","circuitBreakerOpen","clearAllMocks","it","require","mockRejectedValue","Error","request","NextRequest","response","GET","data","json","expect","status","toBe","error","code","message","toContain","validShareData","contentId","contentType","permissions","expiresAt","Date","now","toISOString","password","maxAccess","invalidData","method","body","JSON","stringify","headers","POST","details","invalidExpirationData","weakPasswordData","invalidContentTypeData","notificationData","notifyUsers","updateData","shareId","PUT","invalidUpdateData","version","DELETE","maliciousData","mockImplementation","Promise","resolve","batchData","shares","results","toHaveLength","toBeDefined","largeBatchData","Array","fill","recovery","suggestions","stats","getErrorStats","toBeGreaterThan","context","operation"],"mappings":"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"}