{"version":3,"sources":["E:\\zk-agent\\tests\\api\\routes\\metrics.test.ts"],"sourcesContent":["/**\n * 指标监控API路由错误处理测试\n * 测试系统指标收集、监控、报警等各种错误场景\n */\n\nimport { NextRequest } from 'next/server';\nimport { GET, POST, PUT, DELETE } from '../../../app/api/metrics/route';\nimport { GlobalErrorHandler } from '../../../lib/middleware/global-error-handler';\n// import { AgentError, AgentErrorType, ErrorSeverity } from '../../../lib/errors/agent-errors';\n\n// Mock dependencies\njest.mock('../../../lib/services/metrics-collector', () => ({\n  collectSystemMetrics: jest.fn(),\n  collectApplicationMetrics: jest.fn(),\n  collectPerformanceMetrics: jest.fn(),\n  collectErrorMetrics: jest.fn(),\n  aggregateMetrics: jest.fn(),\n  validateMetricData: jest.fn(),\n  calculateMetricTrends: jest.fn()\n}));\n\njest.mock('../../../lib/storage/metrics-store', () => ({\n  storeMetrics: jest.fn(),\n  retrieveMetrics: jest.fn(),\n  deleteMetrics: jest.fn(),\n  queryMetrics: jest.fn(),\n  getMetricHistory: jest.fn(),\n  checkStorageCapacity: jest.fn()\n}));\n\njest.mock('../../../lib/services/alert-manager', () => ({\n  checkAlertThresholds: jest.fn(),\n  triggerAlert: jest.fn(),\n  resolveAlert: jest.fn(),\n  getActiveAlerts: jest.fn(),\n  validateAlertRules: jest.fn()\n}));\n\njest.mock('../../../lib/auth/session', () => ({\n  validateSession: jest.fn(),\n  checkMetricsPermissions: jest.fn()\n}));\n\ndescribe('Metrics API Error Handling', () => {\n  let errorHandler: GlobalErrorHandler;\n\n  beforeEach(() => {\n    errorHandler = GlobalErrorHandler.getInstance();\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/metrics - Get Metrics', () => {\n    it('should handle metrics collection service unavailable', async () => {\n      const { collectSystemMetrics } = require('../../../lib/services/metrics-collector');\n      collectSystemMetrics.mockRejectedValue(new Error('Metrics collection service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=system');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.success).toBe(false);\n      expect(data.error.message).toContain('Metrics collection service unavailable');\n    });\n\n    it('should handle invalid metric type parameter', async () => {\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=invalid');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid metric type');\n    });\n\n    it('should handle invalid time range parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/metrics?from=invalid&to=invalid');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid time range');\n    });\n\n    it('should handle metrics storage query failure', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockRejectedValue(new Error('Metrics database query failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=application');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Metrics database query failed');\n    });\n\n    it('should handle metrics data corruption', async () => {\n      const { retrieveMetrics } = require('../../../lib/storage/metrics-store');\n      retrieveMetrics.mockRejectedValue(new Error('Metrics data corrupted'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?type=performance');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Metrics data corrupted');\n    });\n\n    it('should handle insufficient permissions for metrics access', async () => {\n      const { checkMetricsPermissions } = require('../../../lib/auth/session');\n      checkMetricsPermissions.mockRejectedValue(new Error('Metrics access permissions required'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        headers: { 'Authorization': 'Bearer user-token' }\n      });\n\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.code).toBe('AUTHORIZATION_ERROR');\n    });\n\n    it('should handle metrics aggregation timeout', async () => {\n      const { aggregateMetrics } = require('../../../lib/services/metrics-collector');\n      aggregateMetrics.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Metrics aggregation timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?aggregate=true');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Metrics aggregation timeout');\n    });\n\n    it('should handle missing metrics data for requested period', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockResolvedValue([]);\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?from=2023-01-01&to=2023-01-02');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('No metrics data found');\n    });\n  });\n\n  describe('POST /api/metrics - Store Custom Metrics', () => {\n    let validMetricData: any;\n\n    beforeEach(() => {\n      validMetricData = {\n        name: 'custom.api.response_time',\n        value: 150,\n        unit: 'ms',\n        timestamp: new Date().toISOString(),\n        tags: {\n          endpoint: '/api/test',\n          method: 'GET',\n          status: '200'\n        },\n        metadata: {\n          source: 'application',\n          environment: 'production'\n        }\n      };\n    });\n\n    it('should handle invalid metric data format', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Invalid metric data format'));\n\n      const invalidData = { name: 'test', value: 'invalid' };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(invalidData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid metric data format');\n    });\n\n    it('should handle missing required metric fields', async () => {\n      const incompleteData = { name: 'test.metric' }; // Missing value, timestamp\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(incompleteData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.details).toContain('value');\n    });\n\n    it('should handle metric name validation failure', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Invalid metric name: must follow naming convention'));\n\n      const invalidNameData = { ...validMetricData, name: 'invalid-metric-name!' };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(invalidNameData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid metric name');\n    });\n\n    it('should handle metrics storage capacity exceeded', async () => {\n      const { checkStorageCapacity } = require('../../../lib/storage/metrics-store');\n      checkStorageCapacity.mockRejectedValue(new Error('Metrics storage capacity exceeded'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(507); // Insufficient storage\n      expect(data.error.message).toContain('Metrics storage capacity exceeded');\n    });\n\n    it('should handle metrics storage service unavailable', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Metrics storage service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Metrics storage service unavailable');\n    });\n\n    it('should handle duplicate metric timestamp conflict', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Metric with same name and timestamp already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Metric with same name and timestamp already exists');\n    });\n\n    it('should handle metric value out of range', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Metric value exceeds allowed range'));\n\n      const outOfRangeData = { ...validMetricData, value: Number.MAX_SAFE_INTEGER + 1 };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(outOfRangeData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Metric value exceeds allowed range');\n    });\n\n    it('should handle invalid timestamp format', async () => {\n      const { validateMetricData } = require('../../../lib/services/metrics-collector');\n      validateMetricData.mockRejectedValue(new Error('Invalid timestamp format'));\n\n      const invalidTimestampData = { ...validMetricData, timestamp: 'invalid-date' };\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(invalidTimestampData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid timestamp format');\n    });\n  });\n\n  describe('PUT /api/metrics/alerts - Update Alert Rules', () => {\n    let validAlertRule: any;\n\n    beforeEach(() => {\n      validAlertRule = {\n        name: 'high_response_time',\n        metric: 'api.response_time',\n        condition: 'greater_than',\n        threshold: 1000,\n        duration: '5m',\n        severity: 'warning',\n        enabled: true,\n        notifications: {\n          email: ['admin@example.com'],\n          webhook: 'https://hooks.example.com/alert'\n        }\n      };\n    });\n\n    it('should handle invalid alert rule format', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Invalid alert rule format'));\n\n      const invalidRule = { name: 'test' }; // Missing required fields\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(invalidRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid alert rule format');\n    });\n\n    it('should handle unsupported alert condition', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Unsupported alert condition: invalid_condition'));\n\n      const invalidConditionRule = { ...validAlertRule, condition: 'invalid_condition' };\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(invalidConditionRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Unsupported alert condition');\n    });\n\n    it('should handle alert rule conflict', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Alert rule with same name already exists'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(validAlertRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Alert rule with same name already exists');\n    });\n\n    it('should handle invalid notification configuration', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Invalid notification webhook URL'));\n\n      const invalidNotificationRule = {\n        ...validAlertRule,\n        notifications: { webhook: 'invalid-url' }\n      };\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(invalidNotificationRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Invalid notification webhook URL');\n    });\n\n    it('should handle alert manager service unavailable', async () => {\n      const { validateAlertRules } = require('../../../lib/services/alert-manager');\n      validateAlertRules.mockRejectedValue(new Error('Alert manager service unavailable'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts', {\n        method: 'PUT',\n        body: JSON.stringify(validAlertRule),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await PUT(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(503);\n      expect(data.error.message).toContain('Alert manager service unavailable');\n    });\n  });\n\n  describe('DELETE /api/metrics - Delete Metrics', () => {\n    it('should handle metrics not found for deletion', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockResolvedValue([]);\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=nonexistent.metric', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(data.error.code).toBe('NOT_FOUND');\n      expect(data.error.message).toContain('No metrics found');\n    });\n\n    it('should handle metrics deletion failure', async () => {\n      const { deleteMetrics } = require('../../../lib/storage/metrics-store');\n      deleteMetrics.mockRejectedValue(new Error('Failed to delete metrics from storage'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=test.metric', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to delete metrics from storage');\n    });\n\n    it('should handle attempt to delete system metrics', async () => {\n      const { deleteMetrics } = require('../../../lib/storage/metrics-store');\n      deleteMetrics.mockRejectedValue(new Error('Cannot delete system metrics'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=system.cpu.usage', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(403);\n      expect(data.error.message).toContain('Cannot delete system metrics');\n    });\n\n    it('should handle metrics in use by active alerts', async () => {\n      const { deleteMetrics } = require('../../../lib/storage/metrics-store');\n      deleteMetrics.mockRejectedValue(new Error('Metrics are referenced by active alert rules'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics?name=api.response_time', {\n        method: 'DELETE'\n      });\n\n      const response = await DELETE(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(409);\n      expect(data.error.message).toContain('Metrics are referenced by active alert rules');\n    });\n  });\n\n  describe('Alert Management Errors', () => {\n    it('should handle alert threshold check failure', async () => {\n      const { checkAlertThresholds } = require('../../../lib/services/alert-manager');\n      checkAlertThresholds.mockRejectedValue(new Error('Alert threshold check failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/check');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Alert threshold check failed');\n    });\n\n    it('should handle alert trigger failure', async () => {\n      const { triggerAlert } = require('../../../lib/services/alert-manager');\n      triggerAlert.mockRejectedValue(new Error('Failed to trigger alert notification'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/trigger', {\n        method: 'POST',\n        body: JSON.stringify({ alertName: 'high_cpu_usage' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to trigger alert notification');\n    });\n\n    it('should handle alert resolution failure', async () => {\n      const { resolveAlert } = require('../../../lib/services/alert-manager');\n      resolveAlert.mockRejectedValue(new Error('Failed to resolve alert'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/resolve', {\n        method: 'POST',\n        body: JSON.stringify({ alertId: 'alert-123' }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to resolve alert');\n    });\n\n    it('should handle active alerts retrieval failure', async () => {\n      const { getActiveAlerts } = require('../../../lib/services/alert-manager');\n      getActiveAlerts.mockRejectedValue(new Error('Failed to retrieve active alerts'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/alerts/active');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error.message).toContain('Failed to retrieve active alerts');\n    });\n  });\n\n  describe('Metrics Trend Analysis Errors', () => {\n    it('should handle trend calculation failure', async () => {\n      const { calculateMetricTrends } = require('../../../lib/services/metrics-collector');\n      calculateMetricTrends.mockRejectedValue(new Error('Trend calculation failed: insufficient data'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/trends?metric=api.response_time');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.message).toContain('Trend calculation failed');\n    });\n\n    it('should handle invalid trend analysis parameters', async () => {\n      const request = new NextRequest('http://localhost:3000/api/metrics/trends?period=invalid');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error.code).toBe('VALIDATION_ERROR');\n      expect(data.error.message).toContain('Invalid trend analysis parameters');\n    });\n\n    it('should handle trend analysis timeout', async () => {\n      const { calculateMetricTrends } = require('../../../lib/services/metrics-collector');\n      calculateMetricTrends.mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Trend analysis timeout')), 100)\n        )\n      );\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/trends?metric=system.cpu.usage');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(408);\n      expect(data.error.message).toContain('Trend analysis timeout');\n    });\n  });\n\n  describe('Batch Metrics Operations', () => {\n    it('should handle batch metrics ingestion with partial failures', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockImplementation((metrics: any) => {\n        if (metrics.some((m: any) => m.name === 'invalid.metric')) {\n          throw new Error('Invalid metric in batch');\n        }\n        return Promise.resolve();\n      });\n\n      const batchMetrics = [\n        { name: 'valid.metric', value: 100, timestamp: new Date().toISOString() },\n        { name: 'invalid.metric', value: 'invalid', timestamp: new Date().toISOString() }\n      ];\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/batch', {\n        method: 'POST',\n        body: JSON.stringify({ metrics: batchMetrics }),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(207); // Multi-status\n      expect(data.results).toBeDefined();\n      expect(data.errors).toBeDefined();\n    });\n\n    it('should handle batch metrics query with large result set', async () => {\n      const { queryMetrics } = require('../../../lib/storage/metrics-store');\n      queryMetrics.mockRejectedValue(new Error('Query result set too large'));\n\n      const request = new NextRequest('http://localhost:3000/api/metrics/batch?names=metric1,metric2,metric3');\n      const response = await GET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(413); // Payload too large\n      expect(data.error.message).toContain('Query result set too large');\n    });\n  });\n\n  describe('Error Recovery and Monitoring', () => {\n    it('should provide metrics operation recovery suggestions', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Temporary metrics storage outage'));\n\n      const validMetricData = {\n        name: 'test.metric',\n        value: 100,\n        timestamp: new Date().toISOString()\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.recovery).toBeDefined();\n      expect(data.error.recovery.suggestions).toContain('Retry metric storage');\n    });\n\n    it('should track metrics operation performance', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Test error'));\n\n      const validMetricData = {\n        name: 'test.metric',\n        value: 100,\n        timestamp: new Date().toISOString()\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      await POST(request);\n\n      const stats = errorHandler.getErrorStats();\n      expect(stats.errorCount).toBeGreaterThan(0);\n    });\n\n    it('should include metrics context in error responses', async () => {\n      const { storeMetrics } = require('../../../lib/storage/metrics-store');\n      storeMetrics.mockRejectedValue(new Error('Test error'));\n\n      const validMetricData = {\n        name: 'test.metric',\n        value: 100,\n        timestamp: new Date().toISOString()\n      };\n\n      const request = new NextRequest('http://localhost:3000/api/metrics', {\n        method: 'POST',\n        body: JSON.stringify(validMetricData),\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      const response = await POST(request);\n      const data = await response.json();\n\n      expect(data.error.context).toBeDefined();\n      expect(data.error.context.operation).toBe('storeMetrics');\n      expect(data.error.context.metricName).toBe('test.metric');\n    });\n  });\n});"],"names":["jest","mock","collectSystemMetrics","fn","collectApplicationMetrics","collectPerformanceMetrics","collectErrorMetrics","aggregateMetrics","validateMetricData","calculateMetricTrends","storeMetrics","retrieveMetrics","deleteMetrics","queryMetrics","getMetricHistory","checkStorageCapacity","checkAlertThresholds","triggerAlert","resolveAlert","getActiveAlerts","validateAlertRules","validateSession","checkMetricsPermissions","describe","errorHandler","beforeEach","GlobalErrorHandler","getInstance","clearAllMocks","it","require","mockRejectedValue","Error","request","NextRequest","response","GET","data","json","expect","status","toBe","success","error","message","toContain","code","headers","mockImplementation","Promise","_","reject","setTimeout","mockResolvedValue","validMetricData","name","value","unit","timestamp","Date","toISOString","tags","endpoint","method","metadata","source","environment","invalidData","body","JSON","stringify","POST","incompleteData","details","invalidNameData","outOfRangeData","Number","MAX_SAFE_INTEGER","invalidTimestampData","validAlertRule","metric","condition","threshold","duration","severity","enabled","notifications","email","webhook","invalidRule","PUT","invalidConditionRule","invalidNotificationRule","DELETE","alertName","alertId","metrics","some","m","resolve","batchMetrics","results","toBeDefined","errors","recovery","suggestions","stats","getErrorStats","errorCount","toBeGreaterThan","context","operation","metricName"],"mappings":"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"}