{"version":3,"sources":["E:\\zk-agent\\__tests__\\database\\connection.test.js"],"sourcesContent":["const { checkDatabaseConnection, getDatabasePoolStatus } = require('../../lib/database/connection')\n\n// Mock Prisma Client for testing\njest.mock('@prisma/client', () => {\n  return {\n    PrismaClient: jest.fn().mockImplementation(() => ({\n      $connect: jest.fn().mockResolvedValue(undefined),\n      $disconnect: jest.fn().mockResolvedValue(undefined),\n      $queryRaw: jest.fn().mockResolvedValue([{ version: '14.0' }]),\n      user: {\n        findFirst: jest.fn().mockResolvedValue({ id: 1, name: 'test' })\n      }\n    }))\n  }\n})\n\n// Mock enhanced database connection\njest.mock('../../lib/database/enhanced-connection', () => {\n  const mockEnhancedDb = {\n    isConnected: jest.fn().mockReturnValue(true),\n    connect: jest.fn().mockResolvedValue(true),\n    disconnect: jest.fn().mockResolvedValue(true),\n    getClient: jest.fn().mockReturnValue({\n      $connect: jest.fn().mockResolvedValue(undefined),\n      $queryRaw: jest.fn().mockResolvedValue([{ version: '14.0' }]),\n      user: {\n        findFirst: jest.fn().mockResolvedValue({ id: 1, name: 'test' })\n      }\n    }),\n    getStats: jest.fn().mockReturnValue({\n      state: 'connected',\n      uptime: 10000,\n      totalQueries: 5,\n      failedQueries: 0,\n      avgLatency: 50,\n      reconnectAttempts: 0,\n      lastHealthCheck: new Date(),\n      isHealthy: true\n    }),\n    getDetailedStats: jest.fn().mockReturnValue({\n      state: 'connected',\n      uptime: 10000,\n      totalQueries: 5,\n      failedQueries: 0,\n      avgLatency: 50,\n      reconnectAttempts: 0,\n      lastHealthCheck: new Date(),\n      isHealthy: true,\n      configuration: {\n        pool: { maxConnections: 10, minConnections: 2 },\n        recovery: { maxRetries: 3, retryDelay: 1000 }\n      },\n      performance: {\n        successRate: 100,\n        queriesPerSecond: 0.5,\n        avgResponseTime: 50\n      }\n    })\n  }\n  \n  return {\n    enhancedDb: mockEnhancedDb\n  }\n})\n\ndescribe('Database Connection Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Set environment variable for enhanced connection\n    process.env.ENHANCED_DB_CONNECTION = 'true'\n  })\n\n  afterEach(() => {\n    delete process.env.ENHANCED_DB_CONNECTION\n  })\n\n  describe('checkDatabaseConnection', () => {\n    it('should successfully connect to database with enhanced connection', async () => {\n      const result = await checkDatabaseConnection()\n      \n      expect(result).toHaveProperty('connected')\n      expect(result).toHaveProperty('message')\n      expect(result).toHaveProperty('stats')\n      \n      if (result.connected) {\n        expect(result.stats).toHaveProperty('totalQueries')\n        expect(result.stats).toHaveProperty('failedQueries')\n        expect(result.stats).toHaveProperty('avgLatency')\n        expect(result.stats).toHaveProperty('reconnectAttempts')\n      }\n    })\n\n    it('should handle connection errors gracefully', async () => {\n      // Mock enhanced db to simulate connection failure\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.isConnected.mockReturnValue(false)\n      enhancedDb.getClient.mockReturnValue(null)\n      \n      const result = await checkDatabaseConnection()\n      \n      expect(result).toHaveProperty('connected')\n      expect(result).toHaveProperty('message')\n      expect(typeof result.connected).toBe('boolean')\n      expect(typeof result.message).toBe('string')\n    })\n\n    it('should provide detailed error information on failure', async () => {\n      // Mock enhanced db to throw error\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.getClient.mockImplementation(() => {\n        throw new Error('Connection timeout')\n      })\n      \n      const result = await checkDatabaseConnection()\n      \n      expect(result.connected).toBe(false)\n      expect(result.message).toContain('Connection timeout')\n    })\n  })\n\n  describe('getDatabasePoolStatus', () => {\n    it('should return comprehensive pool status with enhanced connection', async () => {\n      const result = await getDatabasePoolStatus()\n      \n      expect(result).toHaveProperty('status')\n      expect(result).toHaveProperty('connections')\n      expect(result).toHaveProperty('performance')\n      expect(result).toHaveProperty('configuration')\n      \n      // Check enhanced connection specific fields\n      if (result.connections) {\n        expect(result.connections).toHaveProperty('state')\n        expect(result.connections).toHaveProperty('uptime')\n        expect(result.connections).toHaveProperty('reconnectAttempts')\n      }\n      \n      if (result.performance) {\n        expect(result.performance).toHaveProperty('successRate')\n        expect(result.performance).toHaveProperty('avgLatency')\n      }\n    })\n\n    it('should handle enhanced connection unavailable scenario', async () => {\n      // Mock enhanced db as disconnected\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.isConnected.mockReturnValue(false)\n      \n      const result = await getDatabasePoolStatus()\n      \n      expect(result).toHaveProperty('status')\n      expect(result.status).toBe('disconnected')\n    })\n\n    it('should provide fallback status when enhanced connection fails', async () => {\n      // Mock enhanced db to throw error\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      enhancedDb.getDetailedStats.mockImplementation(() => {\n        throw new Error('Stats unavailable')\n      })\n      \n      const result = await getDatabasePoolStatus()\n      \n      expect(result).toHaveProperty('status')\n      expect(typeof result.status).toBe('string')\n    })\n  })\n\n  describe('Database Connection Integration', () => {\n    it('should maintain connection state consistency', async () => {\n      const connectionResult = await checkDatabaseConnection()\n      const poolStatus = await getDatabasePoolStatus()\n      \n      // If connection is successful, pool should reflect that\n      if (connectionResult.connected) {\n        expect(poolStatus.status).not.toBe('error')\n      }\n    })\n\n    it('should provide performance metrics', async () => {\n      const poolStatus = await getDatabasePoolStatus()\n      \n      if (poolStatus.performance) {\n        expect(typeof poolStatus.performance.successRate).toBe('number')\n        expect(typeof poolStatus.performance.avgLatency).toBe('number')\n        expect(poolStatus.performance.successRate).toBeGreaterThanOrEqual(0)\n        expect(poolStatus.performance.successRate).toBeLessThanOrEqual(100)\n      }\n    })\n\n    it('should handle configuration information', async () => {\n      const poolStatus = await getDatabasePoolStatus()\n      \n      if (poolStatus.configuration) {\n        expect(poolStatus.configuration).toHaveProperty('pool')\n        if (poolStatus.configuration.pool) {\n          expect(typeof poolStatus.configuration.pool).toBe('object')\n        }\n      }\n    })\n  })\n\n  describe('Error Recovery and Resilience', () => {\n    it('should handle database reconnection scenarios', async () => {\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      \n      // Simulate reconnection scenario\n      enhancedDb.getStats.mockReturnValue({\n        state: 'connected',\n        uptime: 5000,\n        totalQueries: 10,\n        failedQueries: 2,\n        avgLatency: 75,\n        reconnectAttempts: 1,\n        lastHealthCheck: new Date(),\n        isHealthy: true\n      })\n      \n      const result = await checkDatabaseConnection()\n      \n      expect(result.connected).toBe(true)\n      expect(result.stats.reconnectAttempts).toBe(1)\n    })\n\n    it('should track query performance over time', async () => {\n      const { enhancedDb } = require('../../lib/database/enhanced-connection')\n      \n      // Simulate performance tracking\n      enhancedDb.getDetailedStats.mockReturnValue({\n        state: 'connected',\n        uptime: 60000,\n        totalQueries: 100,\n        failedQueries: 5,\n        avgLatency: 45,\n        reconnectAttempts: 0,\n        lastHealthCheck: new Date(),\n        isHealthy: true,\n        configuration: {\n          pool: { maxConnections: 20, minConnections: 5 },\n          recovery: { maxRetries: 5, retryDelay: 2000 }\n        },\n        performance: {\n          successRate: 95,\n          queriesPerSecond: 1.67,\n          avgResponseTime: 45\n        }\n      })\n      \n      const poolStatus = await getDatabasePoolStatus()\n      \n      expect(poolStatus.performance.successRate).toBe(95)\n      expect(poolStatus.performance.queriesPerSecond).toBeCloseTo(1.67, 1)\n      expect(poolStatus.connections.totalQueries).toBe(100)\n      expect(poolStatus.connections.failedQueries).toBe(5)\n    })\n  })\n})"],"names":["jest","mock","PrismaClient","fn","mockImplementation","$connect","mockResolvedValue","undefined","$disconnect","$queryRaw","version","user","findFirst","id","name","mockEnhancedDb","isConnected","mockReturnValue","connect","disconnect","getClient","getStats","state","uptime","totalQueries","failedQueries","avgLatency","reconnectAttempts","lastHealthCheck","Date","isHealthy","getDetailedStats","configuration","pool","maxConnections","minConnections","recovery","maxRetries","retryDelay","performance","successRate","queriesPerSecond","avgResponseTime","enhancedDb","checkDatabaseConnection","getDatabasePoolStatus","require","describe","beforeEach","clearAllMocks","process","env","ENHANCED_DB_CONNECTION","afterEach","it","result","expect","toHaveProperty","connected","stats","toBe","message","Error","toContain","connections","status","connectionResult","poolStatus","not","toBeGreaterThanOrEqual","toBeLessThanOrEqual","toBeCloseTo"],"mappings":"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"}