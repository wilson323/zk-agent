b4ccbf7ccf403a1a45044e8da923085c
/**
 * @file Enhanced Database Connection Tests
 * @description 增强数据库连接管理器的测试文件
 * @author ZK-Agent Team
 * @date 2024-12-19
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _enhancedconnection = require("../../lib/database/enhanced-connection");
const _client = require("@prisma/client");
// 模拟Prisma客户端
_globals.jest.mock('@prisma/client');
const MockedPrismaClient = _client.PrismaClient;
(0, _globals.describe)('增强数据库连接管理器测试', ()=>{
    let connection;
    let mockPrismaClient;
    (0, _globals.beforeEach)(()=>{
        // 重置所有模拟
        _globals.jest.clearAllMocks();
        // 创建模拟的Prisma客户端
        mockPrismaClient = {
            $connect: _globals.jest.fn(),
            $disconnect: _globals.jest.fn(),
            $queryRaw: _globals.jest.fn()
        };
        MockedPrismaClient.mockImplementation(()=>mockPrismaClient);
        // 创建新的连接实例
        connection = new _enhancedconnection.EnhancedDatabaseConnection({
            maxConnections: 10,
            minConnections: 2
        }, {
            enabled: true,
            maxRetries: 3
        }, {
            enabled: true,
            intervalMs: 5000
        });
    });
    (0, _globals.afterEach)(async ()=>{
        // 清理连接
        if (connection.isConnected()) {
            await connection.disconnect();
        }
    });
    (0, _globals.describe)('连接管理', ()=>{
        (0, _globals.it)('应该成功连接到数据库', async ()=>{
            // 模拟成功连接
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            (0, _globals.expect)(connection.isConnected()).toBe(true);
            (0, _globals.expect)(connection.getState()).toBe(_enhancedconnection.ConnectionState.CONNECTED);
            (0, _globals.expect)(mockPrismaClient.$connect).toHaveBeenCalled();
        });
        (0, _globals.it)('应该处理连接失败', async ()=>{
            // 模拟连接失败
            const connectionError = new Error('Connection failed');
            mockPrismaClient.$connect.mockRejectedValue(connectionError);
            await (0, _globals.expect)(connection.connect()).rejects.toThrow('Connection failed');
            (0, _globals.expect)(connection.getState()).toBe(_enhancedconnection.ConnectionState.FAILED);
        });
        (0, _globals.it)('应该成功断开连接', async ()=>{
            // 先连接
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            // 模拟断开连接
            mockPrismaClient.$disconnect.mockResolvedValue(undefined);
            await connection.disconnect();
            (0, _globals.expect)(connection.isConnected()).toBe(false);
            (0, _globals.expect)(connection.getState()).toBe(_enhancedconnection.ConnectionState.DISCONNECTED);
            (0, _globals.expect)(mockPrismaClient.$disconnect).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('重连机制', ()=>{
        (0, _globals.it)('应该在连接失败后自动重连', async ()=>{
            // 配置重连
            connection.updateConfig(undefined, {
                enabled: true,
                maxRetries: 2,
                retryDelayMs: 100
            });
            // 第一次连接失败
            mockPrismaClient.$connect.mockRejectedValueOnce(new Error('First attempt failed')).mockResolvedValueOnce(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            // 监听重连事件
            const reconnectingPromise = new Promise((resolve)=>{
                connection.once('reconnecting', resolve);
            });
            const reconnectedPromise = new Promise((resolve)=>{
                connection.once('reconnected', resolve);
            });
            // 尝试连接（会失败并触发重连）
            await (0, _globals.expect)(connection.connect()).rejects.toThrow('First attempt failed');
            // 等待重连事件
            await reconnectingPromise;
            await reconnectedPromise;
            (0, _globals.expect)(connection.isConnected()).toBe(true);
        }, 10000);
        (0, _globals.it)('应该在达到最大重试次数后停止重连', async ()=>{
            // 配置重连
            connection.updateConfig(undefined, {
                enabled: true,
                maxRetries: 1,
                retryDelayMs: 100
            });
            // 所有连接尝试都失败
            mockPrismaClient.$connect.mockRejectedValue(new Error('Connection always fails'));
            // 监听错误事件
            const errorPromise = new Promise((resolve)=>{
                connection.once('error', resolve);
            });
            // 尝试连接
            await (0, _globals.expect)(connection.connect()).rejects.toThrow('Connection always fails');
            // 等待错误事件
            await errorPromise;
            // 等待重连尝试完成
            await new Promise((resolve)=>setTimeout(resolve, 500));
            (0, _globals.expect)(connection.getState()).toBe(_enhancedconnection.ConnectionState.FAILED);
        }, 10000);
    });
    (0, _globals.describe)('健康检查', ()=>{
        (0, _globals.it)('应该定期执行健康检查', async ()=>{
            // 启用健康检查
            connection.updateConfig(undefined, undefined, {
                enabled: true,
                intervalMs: 200
            });
            // 模拟成功连接和健康检查
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    health_check: 1
                }
            ]);
            await connection.connect();
            // 监听健康检查事件
            const healthCheckPromise = new Promise((resolve)=>{
                connection.once('healthCheck', resolve);
            });
            // 等待健康检查执行
            const result = await healthCheckPromise;
            (0, _globals.expect)(result).toBe(true);
            (0, _globals.expect)(mockPrismaClient.$queryRaw).toHaveBeenCalledWith(_globals.expect.arrayContaining([
                _globals.expect.stringContaining('health_check')
            ]));
        }, 5000);
        (0, _globals.it)('应该处理健康检查失败', async ()=>{
            // 启用健康检查
            connection.updateConfig(undefined, undefined, {
                enabled: true,
                intervalMs: 200,
                timeoutMs: 100
            });
            // 模拟成功连接但健康检查失败
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValueOnce([
                {
                    test: 1
                }
            ]) // 初始连接验证
            .mockRejectedValue(new Error('Health check failed')) // 健康检查失败
            ;
            await connection.connect();
            // 监听健康检查失败事件
            const healthCheckPromise = new Promise((resolve)=>{
                connection.once('healthCheck', resolve);
            });
            // 等待健康检查失败
            const result = await healthCheckPromise;
            (0, _globals.expect)(result).toBe(false);
        }, 5000);
    });
    (0, _globals.describe)('查询执行', ()=>{
        (0, _globals.it)('应该成功执行查询并更新统计信息', async ()=>{
            // 连接数据库
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            // 执行查询
            const queryResult = await connection.executeQuery(async (client)=>{
                return await client.$queryRaw`SELECT * FROM users LIMIT 1`;
            });
            (0, _globals.expect)(queryResult).toEqual([
                {
                    test: 1
                }
            ]);
            // 检查统计信息
            const stats = connection.getStats();
            (0, _globals.expect)(stats.totalQueries).toBeGreaterThan(0);
            (0, _globals.expect)(stats.avgLatency).toBeGreaterThan(0);
        });
        (0, _globals.it)('应该处理查询失败并更新失败统计', async ()=>{
            // 连接数据库
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValueOnce([
                {
                    test: 1
                }
            ]) // 连接验证
            .mockRejectedValueOnce(new Error('Query failed')) // 查询失败
            ;
            await connection.connect();
            // 执行失败的查询
            await (0, _globals.expect)(connection.executeQuery(async (client)=>{
                return await client.$queryRaw`SELECT * FROM non_existent_table`;
            })).rejects.toThrow('Query failed');
            // 检查失败统计
            const stats = connection.getStats();
            (0, _globals.expect)(stats.failedQueries).toBeGreaterThan(0);
        });
        (0, _globals.it)('应该在未连接时拒绝查询', async ()=>{
            // 确保未连接
            (0, _globals.expect)(connection.isConnected()).toBe(false);
            // 尝试执行查询
            await (0, _globals.expect)(connection.executeQuery(async (client)=>{
                return await client.$queryRaw`SELECT 1`;
            })).rejects.toThrow('Database not connected');
        });
    });
    (0, _globals.describe)('统计信息', ()=>{
        (0, _globals.it)('应该正确跟踪连接统计信息', async ()=>{
            // 连接数据库
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            // 获取统计信息
            const stats = connection.getStats();
            (0, _globals.expect)(stats.state).toBe(_enhancedconnection.ConnectionState.CONNECTED);
            (0, _globals.expect)(stats.connectedAt).toBeInstanceOf(Date);
            (0, _globals.expect)(stats.reconnectAttempts).toBe(0);
            (0, _globals.expect)(stats.uptime).toBeGreaterThanOrEqual(0);
        });
        (0, _globals.it)('应该正确计算运行时间', async ()=>{
            // 连接数据库
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            // 等待一段时间
            await new Promise((resolve)=>setTimeout(resolve, 100));
            // 检查运行时间
            const stats = connection.getStats();
            (0, _globals.expect)(stats.uptime).toBeGreaterThan(90) // 至少90ms
            ;
        });
    });
    (0, _globals.describe)('配置更新', ()=>{
        (0, _globals.it)('应该允许动态更新连接池配置', ()=>{
            const newPoolConfig = {
                maxConnections: 20,
                minConnections: 5
            };
            connection.updateConfig(newPoolConfig);
            // 配置应该已更新（无法直接验证私有属性，但不应抛出错误）
            (0, _globals.expect)(()=>connection.updateConfig(newPoolConfig)).not.toThrow();
        });
        (0, _globals.it)('应该允许动态更新重连配置', ()=>{
            const newReconnectionConfig = {
                enabled: false,
                maxRetries: 5
            };
            connection.updateConfig(undefined, newReconnectionConfig);
            // 配置应该已更新
            (0, _globals.expect)(()=>connection.updateConfig(undefined, newReconnectionConfig)).not.toThrow();
        });
        (0, _globals.it)('应该允许动态更新健康检查配置', async ()=>{
            // 先连接
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            const newHealthCheckConfig = {
                enabled: true,
                intervalMs: 1000
            };
            connection.updateConfig(undefined, undefined, newHealthCheckConfig);
            // 配置应该已更新
            (0, _globals.expect)(()=>connection.updateConfig(undefined, undefined, newHealthCheckConfig)).not.toThrow();
        });
    });
    (0, _globals.describe)('全局实例测试', ()=>{
        (0, _globals.it)('应该提供全局数据库连接实例', ()=>{
            (0, _globals.expect)(_enhancedconnection.enhancedDb).toBeInstanceOf(_enhancedconnection.EnhancedDatabaseConnection);
        });
        (0, _globals.it)('应该提供便捷的连接函数', async ()=>{
            // 模拟成功连接
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await (0, _enhancedconnection.connectDatabase)();
            (0, _globals.expect)((0, _enhancedconnection.isDatabaseConnected)()).toBe(true);
            const stats = (0, _enhancedconnection.getDatabaseStats)();
            (0, _globals.expect)(stats.state).toBe(_enhancedconnection.ConnectionState.CONNECTED);
            await (0, _enhancedconnection.disconnectDatabase)();
            (0, _globals.expect)((0, _enhancedconnection.isDatabaseConnected)()).toBe(false);
        });
        (0, _globals.it)('应该提供便捷的查询执行函数', async ()=>{
            // 模拟成功连接
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    result: 'success'
                }
            ]);
            await (0, _enhancedconnection.connectDatabase)();
            const result = await (0, _enhancedconnection.executeQuery)(async (client)=>{
                return await client.$queryRaw`SELECT 'success' as result`;
            });
            (0, _globals.expect)(result).toEqual([
                {
                    result: 'success'
                }
            ]);
            await (0, _enhancedconnection.disconnectDatabase)();
        });
    });
    (0, _globals.describe)('错误处理', ()=>{
        (0, _globals.it)('应该正确识别连接相关错误', async ()=>{
            // 连接数据库
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValueOnce([
                {
                    test: 1
                }
            ]) // 连接验证
            .mockRejectedValueOnce(new Error('ECONNREFUSED: Connection refused')) // 连接错误
            ;
            await connection.connect();
            // 监听错误事件
            const errorPromise = new Promise((resolve)=>{
                connection.once('error', resolve);
            });
            // 执行会导致连接错误的查询
            await (0, _globals.expect)(connection.executeQuery(async (client)=>{
                return await client.$queryRaw`SELECT 1`;
            })).rejects.toThrow('ECONNREFUSED');
            // 等待错误事件
            await errorPromise;
        });
        (0, _globals.it)('应该处理优雅关闭', async ()=>{
            // 连接数据库
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            mockPrismaClient.$disconnect.mockResolvedValue(undefined);
            await connection.connect();
            // 执行优雅关闭
            await (0, _globals.expect)(connection.gracefulShutdown()).resolves.not.toThrow();
        });
    });
    (0, _globals.describe)('事件系统', ()=>{
        (0, _globals.it)('应该正确触发连接事件', async ()=>{
            // 监听连接事件
            const connectedPromise = new Promise((resolve)=>{
                connection.once('connected', resolve);
            });
            // 模拟成功连接
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            // 等待连接事件
            await connectedPromise;
        });
        (0, _globals.it)('应该正确触发断开连接事件', async ()=>{
            // 先连接
            mockPrismaClient.$connect.mockResolvedValue(undefined);
            mockPrismaClient.$queryRaw.mockResolvedValue([
                {
                    test: 1
                }
            ]);
            await connection.connect();
            // 监听断开连接事件
            const disconnectedPromise = new Promise((resolve)=>{
                connection.once('disconnected', resolve);
            });
            // 模拟断开连接
            mockPrismaClient.$disconnect.mockResolvedValue(undefined);
            await connection.disconnect();
            // 等待断开连接事件
            await disconnectedPromise;
        });
        (0, _globals.it)('应该正确触发错误事件', async ()=>{
            // 监听错误事件
            const errorPromise = new Promise((resolve)=>{
                connection.once('error', resolve);
            });
            // 模拟连接失败
            const connectionError = new Error('Connection failed');
            mockPrismaClient.$connect.mockRejectedValue(connectionError);
            await (0, _globals.expect)(connection.connect()).rejects.toThrow('Connection failed');
            // 等待错误事件
            const error = await errorPromise;
            (0, _globals.expect)(error).toBe(connectionError);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,