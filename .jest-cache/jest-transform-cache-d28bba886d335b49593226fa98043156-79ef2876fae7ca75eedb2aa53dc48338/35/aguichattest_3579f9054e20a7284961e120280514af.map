{"version":3,"sources":["E:\\zk-agent\\__tests__\\api\\chat\\ag-ui-chat.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * AG-UI智能对话API测试\r\n * 确保智能对话API接口100%可靠\r\n */\r\n\r\nimport { NextRequest } from 'next/server'\r\nimport { POST } from '@/app/api/ag-ui/chat/route'\r\n\r\n// 模拟依赖\r\njest.mock('@/lib/auth/session-manager', () => ({\r\n  validateSession: jest.fn()\r\n}))\r\n\r\njest.mock('@/lib/ai/unified-ai-adapter', () => ({\r\n  UnifiedAIAdapter: jest.fn().mockImplementation(() => ({\r\n    chatCompletion: jest.fn(),\r\n    streamChatCompletion: jest.fn()\r\n  }))\r\n}))\r\n\r\njest.mock('@/lib/chat/context-memory-manager', () => ({\r\n  ContextMemoryManager: jest.fn().mockImplementation(() => ({\r\n    addMessage: jest.fn(),\r\n    getMessages: jest.fn().mockReturnValue([]),\r\n    getRelevantContext: jest.fn().mockReturnValue([])\r\n  }))\r\n}))\r\n\r\njest.mock('@/lib/chat/error-retry-manager', () => ({\r\n  ErrorRetryManager: jest.fn().mockImplementation(() => ({\r\n    executeWithRetry: jest.fn()\r\n  }))\r\n}))\r\n\r\ndescribe('AG-UI Chat API - 智能对话接口测试', () => {\r\n  let mockValidateSession: jest.Mock\r\n  let mockAIAdapter: any\r\n  let mockContextManager: any\r\n  let mockErrorRetryManager: any\r\n\r\n  beforeEach(() => {\r\n    // 重置所有模拟\r\n    jest.clearAllMocks()\r\n    \r\n    // 设置模拟\r\n    const { validateSession } = require('@/lib/auth/session-manager')\r\n    mockValidateSession = validateSession as jest.Mock\r\n    \r\n    const { UnifiedAIAdapter } = require('@/lib/ai/unified-ai-adapter')\r\n    mockAIAdapter = new UnifiedAIAdapter()\r\n    \r\n    const { ContextMemoryManager } = require('@/lib/chat/context-memory-manager')\r\n    mockContextManager = new ContextMemoryManager()\r\n    \r\n    const { ErrorRetryManager } = require('@/lib/chat/error-retry-manager')\r\n    mockErrorRetryManager = new ErrorRetryManager()\r\n  })\r\n\r\n  describe('请求验证测试', () => {\r\n    test('应该拒绝无效的HTTP方法', async () => {\r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'GET'\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(405)\r\n    })\r\n\r\n    test('应该拒绝未认证的请求', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: false, error: 'Unauthorized' })\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(401)\r\n    })\r\n\r\n    test('应该验证请求体格式', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          // 缺少必需字段\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(400)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('validation')\r\n    })\r\n\r\n    test('应该验证消息内容长度', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n      \r\n      const longMessage = 'a'.repeat(10000) // 超长消息\r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: longMessage,\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(400)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('too long')\r\n    })\r\n  })\r\n\r\n  describe('消息处理测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该正确处理简单文本消息', async () => {\r\n      const mockResponse = {\r\n        content: '你好！我是AI助手，有什么可以帮助你的吗？',\r\n        usage: { prompt_tokens: 10, completion_tokens: 20, total_tokens: 30 }\r\n      }\r\n      \r\n      mockAIAdapter.chatCompletion.mockResolvedValue(mockResponse)\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      const data = await response.json()\r\n      expect(data.content).toBe(mockResponse.content)\r\n      expect(data.usage).toEqual(mockResponse.usage)\r\n    })\r\n\r\n    test('应该正确处理多轮对话', async () => {\r\n      const conversationHistory = [\r\n        { role: 'user', content: '你好' },\r\n        { role: 'assistant', content: '你好！有什么可以帮助你的吗？' },\r\n        { role: 'user', content: '请介绍一下你的功能' }\r\n      ]\r\n      \r\n      mockContextManager.getMessages.mockReturnValue(conversationHistory.slice(0, 2))\r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '我是一个AI助手，可以帮助你解答问题、提供信息和协助完成各种任务。',\r\n        usage: { prompt_tokens: 50, completion_tokens: 30, total_tokens: 80 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '请介绍一下你的功能',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      // 验证上下文管理器被正确调用\r\n      expect(mockContextManager.getMessages).toHaveBeenCalledWith('test-session')\r\n      expect(mockContextManager.addMessage).toHaveBeenCalledTimes(2) // 用户消息和AI回复\r\n    })\r\n\r\n    test('应该正确处理流式响应', async () => {\r\n      const mockStream = {\r\n        async *[Symbol.asyncIterator]() {\r\n          yield { content: '我是' }\r\n          yield { content: 'AI助手' }\r\n          yield { content: '，很高兴为你服务！' }\r\n        }\r\n      }\r\n      \r\n      mockAIAdapter.streamChatCompletion.mockResolvedValue(mockStream)\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session',\r\n          stream: true\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      expect(response.headers.get('content-type')).toContain('text/stream')\r\n    })\r\n  })\r\n\r\n  describe('错误处理测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该正确处理AI服务错误', async () => {\r\n      const aiError = new Error('AI service unavailable')\r\n      mockAIAdapter.chatCompletion.mockRejectedValue(aiError)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(aiError)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(500)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('AI service')\r\n    })\r\n\r\n    test('应该正确处理网络超时', async () => {\r\n      const timeoutError = new Error('Request timeout')\r\n      timeoutError.name = 'TimeoutError'\r\n      \r\n      mockAIAdapter.chatCompletion.mockRejectedValue(timeoutError)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(timeoutError)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(408)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('timeout')\r\n    })\r\n\r\n    test('应该正确处理速率限制', async () => {\r\n      const rateLimitError = new Error('Rate limit exceeded')\r\n      rateLimitError.name = 'RateLimitError'\r\n      \r\n      mockAIAdapter.chatCompletion.mockRejectedValue(rateLimitError)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(rateLimitError)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(429)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('rate limit')\r\n    })\r\n  })\r\n\r\n  describe('上下文管理测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该正确管理对话上下文', async () => {\r\n      const existingMessages = [\r\n        { role: 'user', content: '你好' },\r\n        { role: 'assistant', content: '你好！有什么可以帮助你的吗？' }\r\n      ]\r\n      \r\n      mockContextManager.getMessages.mockReturnValue(existingMessages)\r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '当然可以！',\r\n        usage: { prompt_tokens: 20, completion_tokens: 10, total_tokens: 30 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你能帮我写代码吗？',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      // 验证上下文被正确传递给AI\r\n      expect(mockAIAdapter.chatCompletion).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          messages: expect.arrayContaining([\r\n            ...existingMessages,\r\n            { role: 'user', content: '你能帮我写代码吗？' }\r\n          ])\r\n        })\r\n      )\r\n    })\r\n\r\n    test('应该正确限制上下文长度', async () => {\r\n      // 模拟大量历史消息\r\n      const longHistory = Array.from({ length: 100 }, (_, i) => ({\r\n        role: i % 2 === 0 ? 'user' : 'assistant',\r\n        content: `消息 ${i}`\r\n      }))\r\n      \r\n      mockContextManager.getMessages.mockReturnValue(longHistory)\r\n      mockContextManager.getRelevantContext.mockReturnValue(longHistory.slice(-10)) // 返回最近10条\r\n      \r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '好的，我明白了。',\r\n        usage: { prompt_tokens: 100, completion_tokens: 15, total_tokens: 115 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '总结一下我们的对话',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(200)\r\n      \r\n      // 验证使用了相关上下文而不是全部历史\r\n      expect(mockContextManager.getRelevantContext).toHaveBeenCalled()\r\n    })\r\n  })\r\n\r\n  describe('性能测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该在合理时间内响应', async () => {\r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '快速响应',\r\n        usage: { prompt_tokens: 5, completion_tokens: 5, total_tokens: 10 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const startTime = Date.now()\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '快速测试',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      const endTime = Date.now()\r\n      \r\n      expect(response.status).toBe(200)\r\n      expect(endTime - startTime).toBeLessThan(5000) // 5秒内响应\r\n    })\r\n\r\n    test('应该正确处理并发请求', async () => {\r\n      mockAIAdapter.chatCompletion.mockImplementation(async () => {\r\n        await new Promise(resolve => setTimeout(resolve, 100)) // 模拟处理时间\r\n        return {\r\n          content: '并发响应',\r\n          usage: { prompt_tokens: 10, completion_tokens: 10, total_tokens: 20 }\r\n        }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const requests = Array.from({ length: 5 }, (_, i) => \r\n        new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            message: `并发消息 ${i}`,\r\n            sessionId: `test-session-${i}`\r\n          })\r\n        })\r\n      )\r\n\r\n      const responses = await Promise.all(requests.map(req => POST(req)))\r\n      \r\n      responses.forEach(response => {\r\n        expect(response.status).toBe(200)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('安全性测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该过滤恶意输入', async () => {\r\n      const maliciousInput = '<script>alert(\"xss\")</script>'\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: maliciousInput,\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(400)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('invalid content')\r\n    })\r\n\r\n    test('应该限制请求频率', async () => {\r\n      // 模拟快速连续请求\r\n      const requests = Array.from({ length: 10 }, () => \r\n        new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            message: '频率测试',\r\n            sessionId: 'test-session'\r\n          })\r\n        })\r\n      )\r\n\r\n      const responses = await Promise.all(requests.map(req => POST(req)))\r\n      \r\n      // 应该有一些请求被限制\r\n      const rateLimitedResponses = responses.filter(res => res.status === 429)\r\n      expect(rateLimitedResponses.length).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该验证会话所有权', async () => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '你好',\r\n          sessionId: 'other-user-session' // 其他用户的会话\r\n        })\r\n      })\r\n\r\n      const response = await POST(request)\r\n      expect(response.status).toBe(403)\r\n      \r\n      const data = await response.json()\r\n      expect(data.error).toContain('access denied')\r\n    })\r\n  })\r\n\r\n  describe('监控和日志测试', () => {\r\n    beforeEach(() => {\r\n      mockValidateSession.mockResolvedValue({ valid: true, userId: 'user-1' })\r\n    })\r\n\r\n    test('应该记录请求日志', async () => {\r\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation()\r\n      \r\n      mockAIAdapter.chatCompletion.mockResolvedValue({\r\n        content: '测试响应',\r\n        usage: { prompt_tokens: 10, completion_tokens: 10, total_tokens: 20 }\r\n      })\r\n      mockErrorRetryManager.executeWithRetry.mockImplementation(fn => fn())\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '日志测试',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      await POST(request)\r\n      \r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        expect.stringContaining('Chat request processed')\r\n      )\r\n      \r\n      consoleSpy.mockRestore()\r\n    })\r\n\r\n    test('应该记录错误日志', async () => {\r\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation()\r\n      \r\n      const error = new Error('测试错误')\r\n      mockAIAdapter.chatCompletion.mockRejectedValue(error)\r\n      mockErrorRetryManager.executeWithRetry.mockRejectedValue(error)\r\n      \r\n      const request = new NextRequest('http://localhost:3000/api/ag-ui/chat', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          message: '错误测试',\r\n          sessionId: 'test-session'\r\n        })\r\n      })\r\n\r\n      await POST(request)\r\n      \r\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\r\n        expect.stringContaining('Chat API error'),\r\n        expect.any(Error)\r\n      )\r\n      \r\n      consoleErrorSpy.mockRestore()\r\n    })\r\n  })\r\n}) "],"names":["jest","mock","validateSession","fn","UnifiedAIAdapter","mockImplementation","chatCompletion","streamChatCompletion","ContextMemoryManager","addMessage","getMessages","mockReturnValue","getRelevantContext","ErrorRetryManager","executeWithRetry","describe","mockValidateSession","mockAIAdapter","mockContextManager","mockErrorRetryManager","beforeEach","clearAllMocks","require","test","request","NextRequest","method","response","POST","expect","status","toBe","mockResolvedValue","valid","error","body","JSON","stringify","message","sessionId","userId","data","json","toContain","longMessage","repeat","mockResponse","content","usage","prompt_tokens","completion_tokens","total_tokens","toEqual","conversationHistory","role","slice","toHaveBeenCalledWith","toHaveBeenCalledTimes","mockStream","Symbol","asyncIterator","stream","headers","get","aiError","Error","mockRejectedValue","timeoutError","name","rateLimitError","existingMessages","objectContaining","messages","arrayContaining","longHistory","Array","from","length","_","i","toHaveBeenCalled","startTime","Date","now","endTime","toBeLessThan","Promise","resolve","setTimeout","requests","responses","all","map","req","forEach","maliciousInput","rateLimitedResponses","filter","res","toBeGreaterThan","consoleSpy","spyOn","console","stringContaining","mockRestore","consoleErrorSpy","any"],"mappings":"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"}