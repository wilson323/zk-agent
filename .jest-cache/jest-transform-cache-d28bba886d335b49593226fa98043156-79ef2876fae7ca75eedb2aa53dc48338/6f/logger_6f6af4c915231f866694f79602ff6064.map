{"version":3,"sources":["E:\\zk-agent\\lib\\utils\\logger.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file 日志管理工具\r\n * @description 统一的日志记录和管理\r\n * @author ZK-Agent Team\r\n * @date 2024-01-20\r\n */\r\n\r\nimport winston from 'winston';\r\nimport { monitoringConfig, isDevelopment, isProduction } from '@/config/env';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\n// 确保日志目录存在\r\nconst logDir = monitoringConfig.logFilePath;\r\nif (!fs.existsSync(logDir)) {\r\n  fs.mkdirSync(logDir, { recursive: true });\r\n}\r\n\r\n// 自定义日志格式\r\nconst logFormat = winston.format.combine(\r\n  winston.format.timestamp({\r\n    format: 'YYYY-MM-DD HH:mm:ss',\r\n  }),\r\n  winston.format.errors({ stack: true }),\r\n  winston.format.json(),\r\n  winston.format.printf(({ timestamp, level, message, stack, ...meta }) => {\r\n    let log = `${timestamp} [${level.toUpperCase()}]: ${message}`;\r\n    \r\n    if (Object.keys(meta).length > 0) {\r\n      log += ` ${JSON.stringify(meta)}`;\r\n    }\r\n    \r\n    if (stack) {\r\n      log += `\\n${stack}`;\r\n    }\r\n    \r\n    return log;\r\n  })\r\n);\r\n\r\n// 控制台格式（开发环境）\r\nconst consoleFormat = winston.format.combine(\r\n  winston.format.colorize(),\r\n  winston.format.simple(),\r\n  winston.format.printf(({ timestamp, level, message, stack }) => {\r\n    let log = `${timestamp} ${level}: ${message}`;\r\n    if (stack) {\r\n      log += `\\n${stack}`;\r\n    }\r\n    return log;\r\n  })\r\n);\r\n\r\n// 创建传输器\r\nconst transports: winston.transport[] = [];\r\n\r\n// 控制台输出（开发环境）\r\nif (isDevelopment) {\r\n  transports.push(\r\n    new winston.transports.Console({\r\n      format: consoleFormat,\r\n      level: 'debug',\r\n    })\r\n  );\r\n}\r\n\r\n// 文件输出（生产环境）\r\nif (isProduction) {\r\n  // 错误日志\r\n  transports.push(\r\n    new winston.transports.File({\r\n      filename: path.join(logDir, 'error.log'),\r\n      level: 'error',\r\n      format: logFormat,\r\n      maxsize: 10 * 1024 * 1024, // 10MB\r\n      maxFiles: 5,\r\n    })\r\n  );\r\n\r\n  // 组合日志\r\n  transports.push(\r\n    new winston.transports.File({\r\n      filename: path.join(logDir, 'combined.log'),\r\n      format: logFormat,\r\n      maxsize: 10 * 1024 * 1024, // 10MB\r\n      maxFiles: 10,\r\n    })\r\n  );\r\n\r\n  // 访问日志\r\n  transports.push(\r\n    new winston.transports.File({\r\n      filename: path.join(logDir, 'access.log'),\r\n      level: 'info',\r\n      format: logFormat,\r\n      maxsize: 10 * 1024 * 1024, // 10MB\r\n      maxFiles: 10,\r\n    })\r\n  );\r\n}\r\n\r\n// 创建 logger 实例\r\nconst logger = winston.createLogger({\r\n  level: monitoringConfig.logLevel,\r\n  format: logFormat,\r\n  transports,\r\n  exitOnError: false,\r\n});\r\n\r\n// 日志级别枚举\r\nexport enum LogLevel {\r\n  ERROR = 'error',\r\n  WARN = 'warn',\r\n  INFO = 'info',\r\n  DEBUG = 'debug',\r\n}\r\n\r\n// 日志上下文接口\r\nexport interface ILogContext {\r\n  userId?: string;\r\n  requestId?: string;\r\n  ip?: string;\r\n  userAgent?: string;\r\n  method?: string;\r\n  url?: string;\r\n  statusCode?: number;\r\n  duration?: number;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * 日志管理类\r\n */\r\nexport class Logger {\r\n  private context: ILogContext;\r\n\r\n  constructor(context: ILogContext | string = {}) {\r\n    if (typeof context === 'string') {\r\n      this.context = { component: context };\r\n    } else {\r\n      this.context = context;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建带上下文的日志实例\r\n   */\r\n  static withContext(context: ILogContext): Logger {\r\n    return new Logger(context);\r\n  }\r\n\r\n  /**\r\n   * 记录错误日志\r\n   */\r\n  error(message: string, error?: Error | any, meta: ILogContext = {}): void {\r\n    const logMeta = { ...this.context, ...meta };\r\n    \r\n    if (error instanceof Error) {\r\n      logMeta.stack = error.stack;\r\n      logMeta.errorName = error.name;\r\n      logMeta.errorMessage = error.message;\r\n    } else if (error) {\r\n      logMeta.error = error;\r\n    }\r\n\r\n    logger.error(message, logMeta);\r\n  }\r\n\r\n  /**\r\n   * 记录警告日志\r\n   */\r\n  warn(message: string, meta: ILogContext = {}): void {\r\n    logger.warn(message, { ...this.context, ...meta });\r\n  }\r\n\r\n  /**\r\n   * 记录信息日志\r\n   */\r\n  info(message: string, meta: ILogContext = {}): void {\r\n    logger.info(message, { ...this.context, ...meta });\r\n  }\r\n\r\n  /**\r\n   * 记录调试日志\r\n   */\r\n  debug(message: string, meta: ILogContext = {}): void {\r\n    logger.debug(message, { ...this.context, ...meta });\r\n  }\r\n\r\n  /**\r\n   * 记录API访问日志\r\n   */\r\n  access(meta: ILogContext): void {\r\n    const { method, url, statusCode, duration, userId, ip } = meta;\r\n    const message = `${method} ${url} ${statusCode} ${duration}ms`;\r\n    \r\n    this.info(message, {\r\n      type: 'access',\r\n      userId,\r\n      ip,\r\n      ...meta,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 记录业务操作日志\r\n   */\r\n  business(action: string, meta: ILogContext = {}): void {\r\n    this.info(`业务操作: ${action}`, {\r\n      type: 'business',\r\n      action,\r\n      ...this.context,\r\n      ...meta,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 记录安全事件日志\r\n   */\r\n  security(event: string, meta: ILogContext = {}): void {\r\n    this.warn(`安全事件: ${event}`, {\r\n      type: 'security',\r\n      event,\r\n      ...this.context,\r\n      ...meta,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 记录性能日志\r\n   */\r\n  performance(operation: string, duration: number, meta: ILogContext = {}): void {\r\n    const level = duration > 1000 ? 'warn' : 'info';\r\n    const message = `性能监控: ${operation} 耗时 ${duration}ms`;\r\n    \r\n    logger.log(level, message, {\r\n      type: 'performance',\r\n      operation,\r\n      duration,\r\n      ...this.context,\r\n      ...meta,\r\n    });\r\n  }\r\n}\r\n\r\n// 默认日志实例\r\nexport const defaultLogger = new Logger();\r\n\r\n// 便捷方法\r\nexport const log = {\r\n  error: (message: string, error?: Error | any, meta?: ILogContext) => \r\n    defaultLogger.error(message, error, meta),\r\n  warn: (message: string, meta?: ILogContext) => \r\n    defaultLogger.warn(message, meta),\r\n  info: (message: string, meta?: ILogContext) => \r\n    defaultLogger.info(message, meta),\r\n  debug: (message: string, meta?: ILogContext) => \r\n    defaultLogger.debug(message, meta),\r\n  access: (meta: ILogContext) => \r\n    defaultLogger.access(meta),\r\n  business: (action: string, meta?: ILogContext) => \r\n    defaultLogger.business(action, meta),\r\n  security: (event: string, meta?: ILogContext) => \r\n    defaultLogger.security(event, meta),\r\n  performance: (operation: string, duration: number, meta?: ILogContext) => \r\n    defaultLogger.performance(operation, duration, meta),\r\n};\r\n\r\nexport default logger; "],"names":["LogLevel","Logger","defaultLogger","log","logDir","monitoringConfig","logFilePath","fs","existsSync","mkdirSync","recursive","logFormat","winston","format","combine","timestamp","errors","stack","json","printf","level","message","meta","toUpperCase","Object","keys","length","JSON","stringify","consoleFormat","colorize","simple","transports","isDevelopment","push","Console","isProduction","File","filename","path","join","maxsize","maxFiles","logger","createLogger","logLevel","exitOnError","constructor","context","component","withContext","error","logMeta","Error","errorName","name","errorMessage","warn","info","debug","access","method","url","statusCode","duration","userId","ip","type","business","action","security","event","performance","operation"],"mappings":"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"}