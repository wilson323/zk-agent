{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\chat\\error-retry-manager.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * 错误重试管理器测试\r\n * 确保智能对话的错误处理和重试机制100%可靠\r\n */\r\n\r\nimport { ErrorRetryManager } from '@/lib/chat/error-retry-manager'\r\n\r\ndescribe('ErrorRetryManager - 智能对话错误重试管理', () => {\r\n  let errorRetryManager: ErrorRetryManager\r\n  \r\n  beforeEach(() => {\r\n    errorRetryManager = new ErrorRetryManager()\r\n  })\r\n  \r\n  afterEach(() => {\r\n    jest.clearAllMocks()\r\n  })\r\n\r\n  describe('基础功能测试', () => {\r\n    test('应该正确初始化错误重试管理器', () => {\r\n      expect(errorRetryManager).toBeDefined()\r\n      expect(errorRetryManager).toBeInstanceOf(ErrorRetryManager)\r\n    })\r\n\r\n    test('应该正确设置默认配置', () => {\r\n      const config = errorRetryManager.getConfig()\r\n      expect(config).toMatchObject({\r\n        maxRetries: expect.any(Number),\r\n        baseDelay: expect.any(Number),\r\n        maxDelay: expect.any(Number),\r\n        backoffMultiplier: expect.any(Number)\r\n      })\r\n    })\r\n  })\r\n\r\n  describe('错误分类测试', () => {\r\n    test('应该正确识别网络错误', () => {\r\n      const networkError = new Error('Network request failed')\r\n      networkError.name = 'NetworkError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(networkError)\r\n      expect(isRetryable).toBe(true)\r\n    })\r\n\r\n    test('应该正确识别超时错误', () => {\r\n      const timeoutError = new Error('Request timeout')\r\n      timeoutError.name = 'TimeoutError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(timeoutError)\r\n      expect(isRetryable).toBe(true)\r\n    })\r\n\r\n    test('应该正确识别服务器错误', () => {\r\n      const serverError = new Error('Internal server error')\r\n      serverError.name = 'ServerError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(serverError)\r\n      expect(isRetryable).toBe(true)\r\n    })\r\n\r\n    test('应该正确识别不可重试错误', () => {\r\n      const authError = new Error('Unauthorized')\r\n      authError.name = 'AuthError'\r\n      \r\n      const isRetryable = errorRetryManager.isRetryableError(authError)\r\n      expect(isRetryable).toBe(false)\r\n    })\r\n  })\r\n\r\n  describe('重试延迟计算测试', () => {\r\n    test('应该正确计算指数退避延迟', () => {\r\n      const delay1 = errorRetryManager.calculateDelay(1)\r\n      const delay2 = errorRetryManager.calculateDelay(2)\r\n      const delay3 = errorRetryManager.calculateDelay(3)\r\n      \r\n      expect(delay1).toBeGreaterThan(0)\r\n      expect(delay2).toBeGreaterThan(delay1)\r\n      expect(delay3).toBeGreaterThan(delay2)\r\n    })\r\n\r\n    test('应该限制最大延迟时间', () => {\r\n      const maxDelay = errorRetryManager.getConfig().maxDelay\r\n      const delay = errorRetryManager.calculateDelay(10)\r\n      \r\n      expect(delay).toBeLessThanOrEqual(maxDelay)\r\n    })\r\n\r\n    test('应该添加随机抖动', () => {\r\n      const delay1 = errorRetryManager.calculateDelay(1)\r\n      const delay2 = errorRetryManager.calculateDelay(1)\r\n      \r\n      // 由于随机抖动，两次计算的延迟可能不同\r\n      expect(delay1).toBeGreaterThan(0)\r\n      expect(delay2).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  describe('重试执行测试', () => {\r\n    test('应该在成功时立即返回结果', async () => {\r\n      const successFn = jest.fn().mockResolvedValue('success')\r\n      \r\n      const result = await errorRetryManager.executeWithRetry(successFn)\r\n      \r\n      expect(result).toBe('success')\r\n      expect(successFn).toHaveBeenCalledTimes(1)\r\n    })\r\n\r\n    test('应该在可重试错误时进行重试', async () => {\r\n      const retryableFn = jest.fn()\r\n        .mockRejectedValueOnce(new Error('Network error'))\r\n        .mockRejectedValueOnce(new Error('Timeout error'))\r\n        .mockResolvedValue('success')\r\n      \r\n      const result = await errorRetryManager.executeWithRetry(retryableFn)\r\n      \r\n      expect(result).toBe('success')\r\n      expect(retryableFn).toHaveBeenCalledTimes(3)\r\n    })\r\n\r\n    test('应该在达到最大重试次数后抛出错误', async () => {\r\n      const failingFn = jest.fn().mockRejectedValue(new Error('Persistent error'))\r\n      \r\n      await expect(errorRetryManager.executeWithRetry(failingFn))\r\n        .rejects.toThrow('Persistent error')\r\n      \r\n      const maxRetries = errorRetryManager.getConfig().maxRetries\r\n      expect(failingFn).toHaveBeenCalledTimes(maxRetries + 1)\r\n    })\r\n\r\n    test('应该在不可重试错误时立即抛出', async () => {\r\n      const authError = new Error('Unauthorized')\r\n      authError.name = 'AuthError'\r\n      const nonRetryableFn = jest.fn().mockRejectedValue(authError)\r\n      \r\n      await expect(errorRetryManager.executeWithRetry(nonRetryableFn))\r\n        .rejects.toThrow('Unauthorized')\r\n      \r\n      expect(nonRetryableFn).toHaveBeenCalledTimes(1)\r\n    })\r\n  })\r\n\r\n  describe('错误统计测试', () => {\r\n    test('应该正确记录错误统计', async () => {\r\n      const failingFn = jest.fn().mockRejectedValue(new Error('Test error'))\r\n      \r\n      try {\r\n        await errorRetryManager.executeWithRetry(failingFn)\r\n      } catch (error) {\r\n        // 预期的错误\r\n      }\r\n      \r\n      const stats = errorRetryManager.getErrorStats()\r\n      expect(stats.totalErrors).toBeGreaterThan(0)\r\n      expect(stats.retryAttempts).toBeGreaterThan(0)\r\n    })\r\n\r\n    test('应该正确分类错误类型统计', async () => {\r\n      const networkError = new Error('Network error')\r\n      networkError.name = 'NetworkError'\r\n      const networkFn = jest.fn().mockRejectedValue(networkError)\r\n      \r\n      try {\r\n        await errorRetryManager.executeWithRetry(networkFn)\r\n      } catch (error) {\r\n        // 预期的错误\r\n      }\r\n      \r\n      const stats = errorRetryManager.getErrorStats()\r\n      expect(stats.errorTypes['NetworkError']).toBeGreaterThan(0)\r\n    })\r\n  })\r\n\r\n  describe('配置更新测试', () => {\r\n    test('应该允许更新重试配置', () => {\r\n      const newConfig = {\r\n        maxRetries: 5,\r\n        baseDelay: 2000,\r\n        maxDelay: 30000,\r\n        backoffMultiplier: 3\r\n      }\r\n      \r\n      errorRetryManager.updateConfig(newConfig)\r\n      const updatedConfig = errorRetryManager.getConfig()\r\n      \r\n      expect(updatedConfig).toMatchObject(newConfig)\r\n    })\r\n\r\n    test('应该验证配置参数的有效性', () => {\r\n      const invalidConfig = {\r\n        maxRetries: -1,\r\n        baseDelay: 0,\r\n        maxDelay: -1000,\r\n        backoffMultiplier: 0\r\n      }\r\n      \r\n      expect(() => errorRetryManager.updateConfig(invalidConfig))\r\n        .toThrow('Invalid configuration')\r\n    })\r\n  })\r\n\r\n  describe('并发处理测试', () => {\r\n    test('应该正确处理并发重试请求', async () => {\r\n      const concurrentFns = Array.from({ length: 5 }, (_, i) => \r\n        jest.fn()\r\n          .mockRejectedValueOnce(new Error(`Error ${i}`))\r\n          .mockResolvedValue(`Success ${i}`)\r\n      )\r\n      \r\n      const promises = concurrentFns.map(fn => \r\n        errorRetryManager.executeWithRetry(fn)\r\n      )\r\n      \r\n      const results = await Promise.all(promises)\r\n      \r\n      expect(results).toEqual([\r\n        'Success 0',\r\n        'Success 1', \r\n        'Success 2',\r\n        'Success 3',\r\n        'Success 4'\r\n      ])\r\n    })\r\n  })\r\n\r\n  describe('内存管理测试', () => {\r\n    test('应该正确清理过期的错误记录', () => {\r\n      // 模拟大量错误记录\r\n      for (let i = 0; i < 1000; i++) {\r\n        errorRetryManager.recordError(new Error(`Error ${i}`))\r\n      }\r\n      \r\n      const statsBefore = errorRetryManager.getErrorStats()\r\n      expect(statsBefore.totalErrors).toBe(1000)\r\n      \r\n      // 清理过期记录\r\n      errorRetryManager.cleanup()\r\n      \r\n      const statsAfter = errorRetryManager.getErrorStats()\r\n      expect(statsAfter.totalErrors).toBeLessThan(1000)\r\n    })\r\n  })\r\n}) "],"names":["describe","errorRetryManager","beforeEach","ErrorRetryManager","afterEach","jest","clearAllMocks","test","expect","toBeDefined","toBeInstanceOf","config","getConfig","toMatchObject","maxRetries","any","Number","baseDelay","maxDelay","backoffMultiplier","networkError","Error","name","isRetryable","isRetryableError","toBe","timeoutError","serverError","authError","delay1","calculateDelay","delay2","delay3","toBeGreaterThan","delay","toBeLessThanOrEqual","successFn","fn","mockResolvedValue","result","executeWithRetry","toHaveBeenCalledTimes","retryableFn","mockRejectedValueOnce","failingFn","mockRejectedValue","rejects","toThrow","nonRetryableFn","error","stats","getErrorStats","totalErrors","retryAttempts","networkFn","errorTypes","newConfig","updateConfig","updatedConfig","invalidConfig","concurrentFns","Array","from","length","_","i","promises","map","results","Promise","all","toEqual","recordError","statsBefore","cleanup","statsAfter","toBeLessThan"],"mappings":"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"}