{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\services\\agent-service.test.ts"],"sourcesContent":["// @ts-nocheck\n/**\r\n * @file __tests__/lib/services/agent-service.test.ts\r\n * @description 智能体服务层单元测试\r\n * @author zk-agent开发团队\r\n * @lastUpdate 2024-12-19\r\n * @updateLog\r\n *   - 2024-12-19 初始创建智能体服务测试\r\n */\r\n\r\nimport { AgentService } from '@/lib/services/agent-service';\r\nimport { AgentType, AgentStatus } from '@/types/agents';\r\nimport { prisma } from '@/lib/database';\r\n\r\n// Mock Prisma\r\njest.mock('@/lib/database', () => ({\r\n  prisma: {\r\n    agentConfig: {\r\n      findMany: jest.fn(),\r\n      findUnique: jest.fn(),\r\n      create: jest.fn(),\r\n      update: jest.fn(),\r\n      delete: jest.fn(),\r\n      count: jest.fn(),\r\n    },\r\n  },\r\n}));\r\n\r\nconst mockPrisma = prisma as jest.Mocked<typeof prisma>;\r\n\r\ndescribe('AgentService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('getAgents', () => {\r\n    it('应该返回智能体列表和分页信息', async () => {\r\n      const mockAgents = [\r\n        {\r\n          id: '1',\r\n          name: 'Test Agent',\r\n          description: 'Test Description',\r\n          type: AgentType.CHAT,\r\n          status: AgentStatus.ACTIVE,\r\n          tags: ['test'],\r\n          apiEndpoint: 'https://api.test.com',\r\n          capabilities: ['chat'],\r\n          configuration: {},\r\n          metrics: {\r\n            totalRequests: 100,\r\n            successfulRequests: 95,\r\n            failedRequests: 5,\r\n            averageResponseTime: 200,\r\n            dailyActiveUsers: 10,\r\n            weeklyActiveUsers: 50,\r\n            monthlyActiveUsers: 200,\r\n            rating: 4.5,\r\n            reviewCount: 10,\r\n            uptime: 99.9\r\n          },\r\n          version: '1.0.0',\r\n          isPublic: true,\r\n          ownerId: null,\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          _count: { sessions: 5, messages: 100 }\r\n        }\r\n      ];\r\n\r\n      mockPrisma.agentConfig.findMany.mockResolvedValue(mockAgents);\r\n      mockPrisma.agentConfig.count.mockResolvedValue(1);\r\n\r\n      const result = await AgentService.getAgents({\r\n        page: 1,\r\n        limit: 10\r\n      });\r\n\r\n      expect(result.agents).toHaveLength(1);\r\n      expect(result.pagination).toEqual({\r\n        page: 1,\r\n        limit: 10,\r\n        total: 1,\r\n        totalPages: 1\r\n      });\r\n      expect(mockPrisma.agentConfig.findMany).toHaveBeenCalledWith({\r\n        where: {},\r\n        skip: 0,\r\n        take: 10,\r\n        orderBy: { createdAt: 'desc' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('应该支持搜索功能', async () => {\r\n      mockPrisma.agentConfig.findMany.mockResolvedValue([]);\r\n      mockPrisma.agentConfig.count.mockResolvedValue(0);\r\n\r\n      await AgentService.getAgents({\r\n        search: 'test query'\r\n      });\r\n\r\n      expect(mockPrisma.agentConfig.findMany).toHaveBeenCalledWith({\r\n        where: {\r\n          OR: [\r\n            { name: { contains: 'test query', mode: 'insensitive' } },\r\n            { description: { contains: 'test query', mode: 'insensitive' } },\r\n            { capabilities: { hasSome: ['test query'] } }\r\n          ]\r\n        },\r\n        skip: 0,\r\n        take: 10,\r\n        orderBy: { createdAt: 'desc' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('应该支持标签筛选', async () => {\r\n      mockPrisma.agentConfig.findMany.mockResolvedValue([]);\r\n      mockPrisma.agentConfig.count.mockResolvedValue(0);\r\n\r\n      await AgentService.getAgents({\r\n        tags: ['chat', 'ai']\r\n      });\r\n\r\n      expect(mockPrisma.agentConfig.findMany).toHaveBeenCalledWith({\r\n        where: {\r\n          tags: { hasSome: ['chat', 'ai'] }\r\n        },\r\n        skip: 0,\r\n        take: 10,\r\n        orderBy: { createdAt: 'desc' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('getAgentById', () => {\r\n    it('应该返回单个智能体', async () => {\r\n      const mockAgent = {\r\n        id: '1',\r\n        name: 'Test Agent',\r\n        description: 'Test Description',\r\n        type: AgentType.CHAT,\r\n        status: AgentStatus.ACTIVE,\r\n        tags: ['test'],\r\n        apiEndpoint: 'https://api.test.com',\r\n        capabilities: ['chat'],\r\n        configuration: {},\r\n        metrics: {},\r\n        version: '1.0.0',\r\n        isPublic: true,\r\n        ownerId: null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        _count: { sessions: 5, messages: 100 }\r\n      };\r\n\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue(mockAgent);\r\n\r\n      const result = await AgentService.getAgentById('1');\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result?.id).toBe('1');\r\n      expect(mockPrisma.agentConfig.findUnique).toHaveBeenCalledWith({\r\n        where: { id: '1' },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('找不到智能体时应该返回null', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue(null);\r\n\r\n      const result = await AgentService.getAgentById('nonexistent');\r\n\r\n      expect(result).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('createAgent', () => {\r\n    it('应该创建新的智能体', async () => {\r\n      const createData = {\r\n        name: 'New Agent',\r\n        description: 'New Description',\r\n        type: AgentType.CHAT,\r\n        tags: ['new'],\r\n        apiEndpoint: 'https://api.new.com',\r\n        capabilities: ['chat'],\r\n        configuration: {\r\n          model: 'gpt-4',\r\n          temperature: 0.7,\r\n          maxTokens: 2000,\r\n          systemPrompt: 'You are a helpful assistant',\r\n          tools: [],\r\n          rateLimits: {\r\n            requestsPerMinute: 60,\r\n            requestsPerHour: 1000,\r\n            requestsPerDay: 10000\r\n          },\r\n          security: {\r\n            requireAuth: true,\r\n            allowedRoles: ['USER']\r\n          }\r\n        }\r\n      };\r\n\r\n      const mockCreatedAgent = {\r\n        id: '2',\r\n        ...createData,\r\n        status: AgentStatus.ACTIVE,\r\n        version: '1.0.0',\r\n        isPublic: true,\r\n        ownerId: 'user1',\r\n        metrics: {\r\n          totalRequests: 0,\r\n          successfulRequests: 0,\r\n          failedRequests: 0,\r\n          averageResponseTime: 0,\r\n          dailyActiveUsers: 0,\r\n          weeklyActiveUsers: 0,\r\n          monthlyActiveUsers: 0,\r\n          rating: 0,\r\n          reviewCount: 0,\r\n          uptime: 0\r\n        },\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        _count: { sessions: 0, messages: 0 }\r\n      };\r\n\r\n      mockPrisma.agentConfig.create.mockResolvedValue(mockCreatedAgent);\r\n\r\n      const result = await AgentService.createAgent(createData, 'user1');\r\n\r\n      expect(result.id).toBe('2');\r\n      expect(result.name).toBe('New Agent');\r\n      expect(mockPrisma.agentConfig.create).toHaveBeenCalledWith({\r\n        data: {\r\n          name: 'New Agent',\r\n          description: 'New Description',\r\n          type: AgentType.CHAT,\r\n          status: AgentStatus.ACTIVE,\r\n          tags: ['new'],\r\n          apiEndpoint: 'https://api.new.com',\r\n          capabilities: ['chat'],\r\n          configuration: createData.configuration,\r\n          version: '1.0.0',\r\n          isPublic: true,\r\n          ownerId: 'user1',\r\n          metrics: expect.any(Object)\r\n        },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('updateAgent', () => {\r\n    it('应该更新智能体', async () => {\r\n      const updateData = {\r\n        name: 'Updated Agent',\r\n        description: 'Updated Description'\r\n      };\r\n\r\n      const mockUpdatedAgent = {\r\n        id: '1',\r\n        name: 'Updated Agent',\r\n        description: 'Updated Description',\r\n        type: AgentType.CHAT,\r\n        status: AgentStatus.ACTIVE,\r\n        tags: ['updated'],\r\n        apiEndpoint: 'https://api.updated.com',\r\n        capabilities: ['chat'],\r\n        configuration: {},\r\n        metrics: {},\r\n        version: '1.0.0',\r\n        isPublic: true,\r\n        ownerId: 'user1',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        _count: { sessions: 5, messages: 100 }\r\n      };\r\n\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'user1'\r\n      } as any);\r\n      mockPrisma.agentConfig.update.mockResolvedValue(mockUpdatedAgent);\r\n\r\n      const result = await AgentService.updateAgent('1', updateData, 'user1');\r\n\r\n      expect(result?.name).toBe('Updated Agent');\r\n      expect(mockPrisma.agentConfig.update).toHaveBeenCalledWith({\r\n        where: { id: '1' },\r\n        data: {\r\n          name: 'Updated Agent',\r\n          description: 'Updated Description'\r\n        },\r\n        include: {\r\n          _count: {\r\n            select: {\r\n              sessions: true,\r\n              messages: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    it('无权限时应该抛出错误', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'other-user'\r\n      } as any);\r\n\r\n      await expect(\r\n        AgentService.updateAgent('1', { name: 'Updated' }, 'user1')\r\n      ).rejects.toThrow('Unauthorized to update this agent');\r\n    });\r\n  });\r\n\r\n  describe('deleteAgent', () => {\r\n    it('应该删除智能体', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'user1'\r\n      } as any);\r\n      mockPrisma.agentConfig.delete.mockResolvedValue({} as any);\r\n\r\n      const result = await AgentService.deleteAgent('1', 'user1');\r\n\r\n      expect(result).toBe(true);\r\n      expect(mockPrisma.agentConfig.delete).toHaveBeenCalledWith({\r\n        where: { id: '1' }\r\n      });\r\n    });\r\n\r\n    it('无权限时应该抛出错误', async () => {\r\n      mockPrisma.agentConfig.findUnique.mockResolvedValue({\r\n        ownerId: 'other-user'\r\n      } as any);\r\n\r\n      await expect(\r\n        AgentService.deleteAgent('1', 'user1')\r\n      ).rejects.toThrow('Unauthorized to delete this agent');\r\n    });\r\n  });\r\n}); "],"names":["jest","mock","prisma","agentConfig","findMany","fn","findUnique","create","update","delete","count","mockPrisma","describe","beforeEach","clearAllMocks","it","mockAgents","id","name","description","type","AgentType","CHAT","status","AgentStatus","ACTIVE","tags","apiEndpoint","capabilities","configuration","metrics","totalRequests","successfulRequests","failedRequests","averageResponseTime","dailyActiveUsers","weeklyActiveUsers","monthlyActiveUsers","rating","reviewCount","uptime","version","isPublic","ownerId","createdAt","Date","updatedAt","_count","sessions","messages","mockResolvedValue","result","AgentService","getAgents","page","limit","expect","agents","toHaveLength","pagination","toEqual","total","totalPages","toHaveBeenCalledWith","where","skip","take","orderBy","include","select","search","OR","contains","mode","hasSome","mockAgent","getAgentById","toBeDefined","toBe","toBeNull","createData","model","temperature","maxTokens","systemPrompt","tools","rateLimits","requestsPerMinute","requestsPerHour","requestsPerDay","security","requireAuth","allowedRoles","mockCreatedAgent","createAgent","data","any","Object","updateData","mockUpdatedAgent","updateAgent","rejects","toThrow","deleteAgent"],"mappings":"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"}