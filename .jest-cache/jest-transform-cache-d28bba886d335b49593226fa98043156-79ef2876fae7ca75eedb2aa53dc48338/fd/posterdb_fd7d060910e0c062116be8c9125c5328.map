{"version":3,"sources":["E:\\zk-agent\\lib\\database\\poster-db.ts"],"sourcesContent":["// @ts-nocheck\n/**\n * 海报数据库操作层\n * 严格按照设计文档的数据结构要求\n */\n\nimport { PrismaClient } from \"@prisma/client\"\nimport type { PosterStyle, PosterSize, ColorPalette, PosterTask, PosterGenerationResult } from \"@/types/poster\"\n\nconst prisma = new PrismaClient()\n\nexport class PosterDatabase {\n  /**\n   * 获取所有海报风格\n   */\n  static async getStyles(): Promise<PosterStyle[]> {\n    try {\n      const styles = await prisma.posterStyle.findMany({\n        where: { isActive: true },\n        orderBy: { order: \"asc\" },\n      })\n\n      return styles.map((style) => ({\n        id: style.id,\n        name: style.name,\n        description: style.description,\n        category: style.category,\n        previewUrl: style.previewUrl,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get poster styles:\", error)\n      throw new Error(\"获取海报风格失败\")\n    }\n  }\n\n  /**\n   * 获取所有海报尺寸\n   */\n  static async getSizes(): Promise<PosterSize[]> {\n    try {\n      const sizes = await prisma.posterSize.findMany({\n        where: { isActive: true },\n        orderBy: { order: \"asc\" },\n      })\n\n      return sizes.map((size) => ({\n        id: size.id,\n        name: size.name,\n        dimensions: size.dimensions,\n        ratio: size.ratio,\n        width: size.width,\n        height: size.height,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get poster sizes:\", error)\n      throw new Error(\"获取海报尺寸失败\")\n    }\n  }\n\n  /**\n   * 获取所有配色方案\n   */\n  static async getColorPalettes(): Promise<ColorPalette[]> {\n    try {\n      const palettes = await prisma.colorPalette.findMany({\n        where: { isActive: true },\n        orderBy: { order: \"asc\" },\n      })\n\n      return palettes.map((palette) => ({\n        id: palette.id,\n        name: palette.name,\n        colors: palette.colors,\n        description: palette.description,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get color palettes:\", error)\n      throw new Error(\"获取配色方案失败\")\n    }\n  }\n\n  /**\n   * 创建海报任务\n   */\n  static async createPosterTask(data: {\n    userId: string\n    description: string\n    style: string\n    size: string\n    palette: string\n    referenceImageUrl?: string\n    templateId?: string\n  }): Promise<PosterTask> {\n    try {\n      const task = await prisma.posterTask.create({\n        data: {\n          userId: data.userId,\n          description: data.description,\n          style: data.style,\n          size: data.size,\n          palette: data.palette,\n          referenceImageUrl: data.referenceImageUrl,\n          templateId: data.templateId,\n          resultImageUrl: \"\", // 初始为空，生成后更新\n          status: \"pending\",\n        },\n      })\n\n      return {\n        id: task.id,\n        userId: task.userId,\n        description: task.description,\n        style: task.style,\n        size: task.size,\n        palette: task.palette,\n        referenceImageUrl: task.referenceImageUrl,\n        resultImageUrl: task.resultImageUrl,\n        createdAt: task.createdAt,\n      }\n    } catch (error) {\n      console.error(\"Failed to create poster task:\", error)\n      throw new Error(\"创建海报任务失败\")\n    }\n  }\n\n  /**\n   * 更新海报任务结果\n   */\n  static async updatePosterTaskResult(taskId: string, resultImageUrl: string): Promise<void> {\n    try {\n      await prisma.posterTask.update({\n        where: { id: taskId },\n        data: {\n          resultImageUrl,\n          status: \"completed\",\n          updatedAt: new Date(),\n        },\n      })\n    } catch (error) {\n      console.error(\"Failed to update poster task result:\", error)\n      throw new Error(\"更新海报任务结果失败\")\n    }\n  }\n\n  /**\n   * 保存生成历史\n   */\n  static async saveGenerationHistory(data: {\n    userId: string\n    prompt: string\n    style: string\n    size: string\n    palette: string\n    templateId?: string\n    imageUrl: string\n    thumbnailUrl?: string\n    settings: any\n    metadata?: any\n  }): Promise<PosterGenerationResult> {\n    try {\n      const generation = await prisma.posterGeneration.create({\n        data: {\n          userId: data.userId,\n          prompt: data.prompt,\n          style: data.style,\n          size: data.size,\n          palette: data.palette,\n          templateId: data.templateId,\n          imageUrl: data.imageUrl,\n          thumbnailUrl: data.thumbnailUrl,\n          settings: data.settings,\n          metadata: data.metadata,\n        },\n      })\n\n      return {\n        id: generation.id,\n        imageUrl: generation.imageUrl,\n        thumbnailUrl: generation.thumbnailUrl,\n        metadata: {\n          generationTime: data.metadata?.generationTime || 0,\n          style: data.style,\n          size: data.size,\n          palette: data.palette,\n        },\n        createdAt: generation.createdAt,\n      }\n    } catch (error) {\n      console.error(\"Failed to save generation history:\", error)\n      throw new Error(\"保存生成历史失败\")\n    }\n  }\n\n  /**\n   * 获取用户生成历史\n   */\n  static async getUserGenerationHistory(userId: string, limit = 20) {\n    try {\n      const history = await prisma.posterGeneration.findMany({\n        where: { userId },\n        include: {\n          styleRef: true,\n          sizeRef: true,\n          paletteRef: true,\n          templateRef: true,\n        },\n        orderBy: { createdAt: \"desc\" },\n        take: limit,\n      })\n\n      return history.map((item) => ({\n        id: item.id,\n        prompt: item.prompt,\n        style: item.styleRef.name,\n        size: item.sizeRef.name,\n        palette: item.paletteRef.name,\n        template: item.templateRef?.name,\n        imageUrl: item.imageUrl,\n        thumbnailUrl: item.thumbnailUrl,\n        settings: item.settings,\n        metadata: item.metadata,\n        rating: item.rating,\n        feedback: item.feedback,\n        createdAt: item.createdAt,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get user generation history:\", error)\n      throw new Error(\"获取用户生成历史失败\")\n    }\n  }\n\n  /**\n   * 获取模板列表\n   */\n  static async getTemplates(filters?: {\n    category?: string\n    industry?: string\n    productType?: string\n  }) {\n    try {\n      const where: any = { isActive: true }\n\n      if (filters?.category) where.category = filters.category\n      if (filters?.industry) where.industry = filters.industry\n      if (filters?.productType) where.productType = filters.productType\n\n      const templates = await prisma.posterTemplate.findMany({\n        where,\n        include: {\n          tags: true,\n        },\n        orderBy: { popularity: \"desc\" },\n      })\n\n      return templates.map((template) => ({\n        id: template.id,\n        name: template.name,\n        description: template.description,\n        thumbnailUrl: template.thumbnailUrl,\n        category: template.category,\n        industry: template.industry,\n        productType: template.productType,\n        useCase: template.useCase,\n        tags: template.tags.map((tag) => tag.name),\n        popularity: template.popularity,\n        usageCount: template.usageCount,\n        isNew: template.isNew,\n        isPremium: template.isPremium,\n      }))\n    } catch (error) {\n      console.error(\"Failed to get templates:\", error)\n      throw new Error(\"获取模板列表失败\")\n    }\n  }\n\n  /**\n   * 更新模板使用统计\n   */\n  static async updateTemplateUsage(templateId: string): Promise<void> {\n    try {\n      await prisma.posterTemplate.update({\n        where: { id: templateId },\n        data: {\n          usageCount: { increment: 1 },\n          popularity: { increment: 1 },\n          lastUsed: new Date(),\n        },\n      })\n    } catch (error) {\n      console.error(\"Failed to update template usage:\", error)\n      // 不抛出错误，统计失败不影响主流程\n    }\n  }\n\n  /**\n   * 记录使用统计\n   */\n  static async recordUsageStats(data: {\n    userId?: string\n    agentType: string\n    action: string\n    metadata?: any\n  }): Promise<void> {\n    try {\n      await prisma.usageStats.create({\n        data: {\n          userId: data.userId,\n          agentType: data.agentType,\n          action: data.action,\n          metadata: data.metadata,\n        },\n      })\n    } catch (error) {\n      console.error(\"Failed to record usage stats:\", error)\n      // 不抛出错误，统计失败不影响主流程\n    }\n  }\n}\n"],"names":["PosterDatabase","prisma","PrismaClient","getStyles","styles","posterStyle","findMany","where","isActive","orderBy","order","map","style","id","name","description","category","previewUrl","error","console","Error","getSizes","sizes","posterSize","size","dimensions","ratio","width","height","getColorPalettes","palettes","colorPalette","palette","colors","createPosterTask","data","task","posterTask","create","userId","referenceImageUrl","templateId","resultImageUrl","status","createdAt","updatePosterTaskResult","taskId","update","updatedAt","Date","saveGenerationHistory","generation","posterGeneration","prompt","imageUrl","thumbnailUrl","settings","metadata","generationTime","getUserGenerationHistory","limit","history","include","styleRef","sizeRef","paletteRef","templateRef","take","item","template","rating","feedback","getTemplates","filters","industry","productType","templates","posterTemplate","tags","popularity","useCase","tag","usageCount","isNew","isPremium","updateTemplateUsage","increment","lastUsed","recordUsageStats","usageStats","agentType","action"],"mappings":"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"}