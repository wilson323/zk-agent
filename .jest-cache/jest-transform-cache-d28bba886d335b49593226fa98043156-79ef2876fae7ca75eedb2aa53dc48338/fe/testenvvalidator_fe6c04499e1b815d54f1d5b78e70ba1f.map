{"version":3,"sources":["E:\\zk-agent\\__tests__\\config\\test-env-validator.js"],"sourcesContent":["/**\n * @file test-env-validator.js\n * @description 测试环境变量验证器\n * @author Jest修复团队\n * @lastUpdate 2024-12-19\n */\n\nconst crypto = require('crypto');\n\n/**\n * 验证环境变量配置\n * @param {Object} env - 环境变量对象\n * @returns {Object} 验证结果\n */\nfunction validateTestEnvironment(env = process.env) {\n  const errors = [];\n  const warnings = [];\n  const validatedConfig = {};\n\n  // 必需的环境变量\n  const requiredVars = [\n    'NODE_ENV',\n    'DATABASE_URL',\n    'JWT_SECRET',\n    'NEXTAUTH_SECRET',\n    'NEXTAUTH_URL'\n  ];\n\n  // 检查必需变量\n  requiredVars.forEach(varName => {\n    if (!env[varName]) {\n      errors.push(`Missing required environment variable: ${varName}`);\n    } else {\n      validatedConfig[varName] = env[varName];\n    }\n  });\n\n  // 验证密钥长度\n  const secretVars = [\n    'JWT_SECRET',\n    'NEXTAUTH_SECRET',\n    'TEST_ENCRYPTION_KEY',\n    'TEST_CSRF_SECRET',\n    'WEBHOOK_SECRET'\n  ];\n\n  secretVars.forEach(varName => {\n    if (env[varName]) {\n      if (env[varName].length < 32) {\n        errors.push(`${varName} must be at least 32 characters long`);\n      } else {\n        validatedConfig[varName] = env[varName];\n      }\n    }\n  });\n\n  // 验证URL格式\n  const urlVars = [\n    { name: 'DATABASE_URL', pattern: /^postgresql:\\/\\// },\n    { name: 'REDIS_URL', pattern: /^redis:\\/\\// },\n    { name: 'NEXTAUTH_URL', pattern: /^https?:\\/\\// },\n    { name: 'FASTGPT_API_URL', pattern: /^https?:\\/\\// },\n    { name: 'QWEN_BASE_URL', pattern: /^https?:\\/\\// },\n    { name: 'SILICONFLOW_BASE_URL', pattern: /^https?:\\/\\// }\n  ];\n\n  urlVars.forEach(({ name, pattern }) => {\n    if (env[name] && !pattern.test(env[name])) {\n      errors.push(`${name} has invalid URL format`);\n    } else if (env[name]) {\n      validatedConfig[name] = env[name];\n    }\n  });\n\n  // 验证数值类型\n  const numericVars = [\n    { name: 'TEST_TIMEOUT', min: 1000, max: 300000 },\n    { name: 'MEMORY_LIMIT_MB', min: 128, max: 8192 },\n    { name: 'MAX_FILE_SIZE', min: 1024, max: 104857600 },\n    { name: 'SMTP_PORT', min: 1, max: 65535 },\n    { name: 'API_RATE_LIMIT', min: 1, max: 10000 },\n    { name: 'API_RATE_WINDOW', min: 60, max: 86400 },\n    { name: 'CACHE_TTL', min: 1, max: 3600 },\n    { name: 'CACHE_MAX_SIZE', min: 1, max: 10000 }\n  ];\n\n  numericVars.forEach(({ name, min, max }) => {\n    if (env[name]) {\n      const value = parseInt(env[name], 10);\n      if (isNaN(value)) {\n        errors.push(`${name} must be a valid number`);\n      } else if (value < min || value > max) {\n        warnings.push(`${name} value ${value} is outside recommended range [${min}, ${max}]`);\n      } else {\n        validatedConfig[name] = value;\n      }\n    }\n  });\n\n  // 验证布尔值\n  const booleanVars = [\n    'ENABLE_MOCKS',\n    'TEST_VERBOSE',\n    'MOCK_EXTERNAL_APIS',\n    'MOCK_DATABASE',\n    'MOCK_REDIS',\n    'TEST_LOG_SILENT',\n    'PERF_TEST_ENABLED',\n    'MONITORING_ENABLED',\n    'METRICS_ENABLED',\n    'FEATURE_FLAG_NEW_UI',\n    'FEATURE_FLAG_ADVANCED_ANALYTICS',\n    'FEATURE_FLAG_BETA_FEATURES'\n  ];\n\n  booleanVars.forEach(varName => {\n    if (env[varName]) {\n      const value = env[varName].toLowerCase();\n      if (!['true', 'false', '1', '0'].includes(value)) {\n        errors.push(`${varName} must be a boolean value (true/false)`);\n      } else {\n        validatedConfig[varName] = value === 'true' || value === '1';\n      }\n    }\n  });\n\n  // 验证邮箱格式\n  const emailVars = ['SMTP_USER', 'SMTP_FROM'];\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  emailVars.forEach(varName => {\n    if (env[varName] && !emailPattern.test(env[varName])) {\n      errors.push(`${varName} has invalid email format`);\n    } else if (env[varName]) {\n      validatedConfig[varName] = env[varName];\n    }\n  });\n\n  // 验证日志级别\n  if (env.LOG_LEVEL) {\n    const validLevels = ['error', 'warn', 'info', 'debug', 'trace'];\n    if (!validLevels.includes(env.LOG_LEVEL.toLowerCase())) {\n      errors.push(`LOG_LEVEL must be one of: ${validLevels.join(', ')}`);\n    } else {\n      validatedConfig.LOG_LEVEL = env.LOG_LEVEL.toLowerCase();\n    }\n  }\n\n  // 生成动态密钥（如果需要）\n  if (!env.JWT_SECRET || env.JWT_SECRET.includes('test-jwt-secret')) {\n    warnings.push('Using default test JWT secret. Consider generating a unique one.');\n    validatedConfig.GENERATED_JWT_SECRET = crypto.randomBytes(32).toString('hex');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n    config: validatedConfig,\n    summary: {\n      totalChecked: Object.keys(env).length,\n      errorsCount: errors.length,\n      warningsCount: warnings.length,\n      validatedCount: Object.keys(validatedConfig).length\n    }\n  };\n}\n\n/**\n * 生成安全的测试密钥\n * @param {number} length - 密钥长度\n * @returns {string} 生成的密钥\n */\nfunction generateTestSecret(length = 32) {\n  return crypto.randomBytes(Math.ceil(length / 2)).toString('hex').slice(0, length);\n}\n\n/**\n * 创建测试环境配置\n * @param {Object} overrides - 覆盖配置\n * @returns {Object} 测试配置\n */\nfunction createTestConfig(overrides = {}) {\n  const defaultConfig = {\n    NODE_ENV: 'test',\n    DATABASE_URL: 'postgresql://test:test@localhost:5432/test_db',\n    JWT_SECRET: generateTestSecret(32),\n    NEXTAUTH_SECRET: generateTestSecret(32),\n    NEXTAUTH_URL: 'http://localhost:3000',\n    REDIS_URL: 'redis://localhost:6379',\n    ENABLE_MOCKS: true,\n    TEST_TIMEOUT: 30000,\n    TEST_VERBOSE: false,\n    LOG_LEVEL: 'error',\n    TEST_LOG_SILENT: true\n  };\n\n  return { ...defaultConfig, ...overrides };\n}\n\n/**\n * 安全地设置环境变量\n * @param {Object} config - 配置对象\n * @param {boolean} force - 是否强制覆盖现有值\n */\nfunction setTestEnvironment(config, force = false) {\n  Object.entries(config).forEach(([key, value]) => {\n    if (force || !process.env[key]) {\n      process.env[key] = String(value);\n    }\n  });\n}\n\n/**\n * 清理测试环境变量\n * @param {Array<string>} keys - 要清理的环境变量键\n */\nfunction cleanupTestEnvironment(keys = []) {\n  const testKeys = keys.length > 0 ? keys : [\n    'DATABASE_URL',\n    'JWT_SECRET',\n    'NEXTAUTH_SECRET',\n    'REDIS_URL',\n    'FASTGPT_API_KEY',\n    'QWEN_API_KEY',\n    'SILICONFLOW_API_KEY'\n  ];\n\n  testKeys.forEach(key => {\n    delete process.env[key];\n  });\n}\n\nmodule.exports = {\n  validateTestEnvironment,\n  generateTestSecret,\n  createTestConfig,\n  setTestEnvironment,\n  cleanupTestEnvironment\n};"],"names":["crypto","require","validateTestEnvironment","env","process","errors","warnings","validatedConfig","requiredVars","forEach","varName","push","secretVars","length","urlVars","name","pattern","test","numericVars","min","max","value","parseInt","isNaN","booleanVars","toLowerCase","includes","emailVars","emailPattern","LOG_LEVEL","validLevels","join","JWT_SECRET","GENERATED_JWT_SECRET","randomBytes","toString","isValid","config","summary","totalChecked","Object","keys","errorsCount","warningsCount","validatedCount","generateTestSecret","Math","ceil","slice","createTestConfig","overrides","defaultConfig","NODE_ENV","DATABASE_URL","NEXTAUTH_SECRET","NEXTAUTH_URL","REDIS_URL","ENABLE_MOCKS","TEST_TIMEOUT","TEST_VERBOSE","TEST_LOG_SILENT","setTestEnvironment","force","entries","key","String","cleanupTestEnvironment","testKeys","module","exports"],"mappings":"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"}