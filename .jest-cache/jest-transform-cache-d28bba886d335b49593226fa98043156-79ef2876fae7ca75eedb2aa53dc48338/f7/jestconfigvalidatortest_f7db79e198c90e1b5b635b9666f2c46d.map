{"version":3,"sources":["E:\\zk-agent\\__tests__\\config\\jest-config-validator.test.js"],"sourcesContent":["/**\n * Jest 配置验证器测试\n * 测试增强的错误处理和验证机制\n */\n\nconst {\n  validateJestConfig,\n  validateTestEnvironment,\n  safeRequire,\n  createSafePolyfills,\n  applySafePolyfills\n} = require('./jest-config-validator');\n\ndescribe('Jest 配置验证器', () => {\n  let originalEnv;\n  let originalConsole;\n\n  beforeEach(() => {\n    // 保存原始环境\n    originalEnv = { ...process.env };\n    originalConsole = {\n      log: console.log,\n      warn: console.warn,\n      error: console.error\n    };\n    \n    // Mock console 方法\n    console.log = jest.fn();\n    console.warn = jest.fn();\n    console.error = jest.fn();\n  });\n\n  afterEach(() => {\n    // 恢复原始环境\n    process.env = originalEnv;\n    console.log = originalConsole.log;\n    console.warn = originalConsole.warn;\n    console.error = originalConsole.error;\n  });\n\n  describe('validateJestConfig', () => {\n    it('应该成功验证有效的 Jest 配置', () => {\n      const result = validateJestConfig();\n      expect(result).toHaveProperty('valid');\n      expect(result).toHaveProperty('errors');\n      expect(result).toHaveProperty('warnings');\n    });\n\n    it('应该检测到缺失的 Jest 配置', () => {\n      // Mock jest 对象不存在的情况\n      const originalJest = global.jest;\n      delete global.jest;\n      \n      expect(() => validateJestConfig()).not.toThrow();\n      expect(console.warn).toHaveBeenCalledWith(\n        'Failed to require E:\\\\zk-agent\\\\jest.config.fixed.js:',\n        expect.any(String)\n      );\n      \n      // 恢复 jest 对象\n      global.jest = originalJest;\n    });\n  });\n\n  describe('validateTestEnvironment', () => {\n    it('应该验证测试环境配置', () => {\n      process.env.NODE_ENV = 'test';\n      \n      const result = validateTestEnvironment();\n      expect(result).toHaveProperty('isValid');\n      expect(result).toHaveProperty('errors');\n      expect(result).toHaveProperty('warnings');\n      expect(result).toHaveProperty('info');\n    });\n\n    it('应该警告非测试环境', () => {\n      process.env.NODE_ENV = 'development';\n      \n      const result = validateTestEnvironment();\n      expect(result.warnings).toContain('NODE_ENV is not set to \"test\"');\n    });\n  });\n\n  describe('safeRequire', () => {\n    it('应该成功加载存在的模块', () => {\n      const result = safeRequire('path');\n      expect(result).toBeDefined();\n      expect(typeof result.join).toBe('function');\n    });\n\n    it('应该处理不存在的模块', () => {\n      const result = safeRequire('non-existent-module');\n      expect(result).toBeNull();\n      expect(console.warn).toHaveBeenCalledWith(\n        'Failed to require non-existent-module:',\n        expect.stringContaining('Cannot find module')\n      );\n    });\n\n    it('应该使用自定义回退值', () => {\n      const fallback = { custom: 'fallback' };\n      const result = safeRequire('non-existent-module', fallback);\n      expect(result).toBe(fallback);\n    });\n  });\n\n  describe('createSafePolyfills', () => {\n    it('should create necessary polyfills', () => {\n      const polyfills = createSafePolyfills();\n      \n      expect(polyfills).toHaveProperty('TextEncoder');\n      expect(polyfills).toHaveProperty('TextDecoder');\n      expect(typeof polyfills.TextEncoder).toBe('function');\n      expect(typeof polyfills.TextDecoder).toBe('function');\n    });\n\n    it('should create working TextEncoder polyfill', () => {\n      const polyfills = createSafePolyfills();\n      expect(() => new polyfills.TextEncoder()).not.toThrow();\n    });\n\n    it('should create working TextDecoder polyfill', () => {\n      const polyfills = createSafePolyfills();\n      expect(() => new polyfills.TextDecoder()).not.toThrow();\n    });\n  });\n\n  describe('applySafePolyfills', () => {\n    it('should apply polyfills safely', () => {\n      const polyfills = createSafePolyfills();\n      \n      expect(polyfills).toHaveProperty('TextEncoder');\n      expect(polyfills).toHaveProperty('TextDecoder');\n      \n      expect(() => applySafePolyfills(polyfills)).not.toThrow();\n    });\n\n    it('should not override existing polyfills', () => {\n      const originalTextEncoder = global.TextEncoder;\n      \n      const polyfills = createSafePolyfills();\n      applySafePolyfills(polyfills);\n      \n      expect(global.TextEncoder).toBe(originalTextEncoder);\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining('already exists, skipping polyfill')\n      );\n    });\n\n    it('应该处理应用 polyfills 时的错误', () => {\n      const invalidPolyfills = {\n        get TextEncoder() {\n          throw new Error('Test error');\n        }\n      };\n      \n      expect(() => applySafePolyfills(invalidPolyfills)).not.toThrow();\n      expect(console.error).toHaveBeenCalledWith(\n        '应用 polyfills 时发生错误:',\n        'Test error'\n      );\n    });\n  });\n\n  describe('集成测试', () => {\n    it('应该完整地验证和设置测试环境', () => {\n      process.env.NODE_ENV = 'test';\n      \n      // 运行完整的验证流程\n      expect(() => {\n        validateJestConfig();\n        validateTestEnvironment();\n        const polyfills = createSafePolyfills();\n        applySafePolyfills(polyfills);\n      }).not.toThrow();\n      \n      // 验证所有组件都正常工作\n      expect(global.TextEncoder).toBeDefined();\n      expect(global.TextDecoder).toBeDefined();\n      expect(console.log).toHaveBeenCalledWith(\n        expect.stringContaining('Jest 配置验证通过')\n      );\n    });\n  });\n});"],"names":["validateJestConfig","validateTestEnvironment","safeRequire","createSafePolyfills","applySafePolyfills","require","describe","originalEnv","originalConsole","beforeEach","process","env","log","console","warn","error","jest","fn","afterEach","it","result","expect","toHaveProperty","originalJest","global","not","toThrow","toHaveBeenCalledWith","any","String","NODE_ENV","warnings","toContain","toBeDefined","join","toBe","toBeNull","stringContaining","fallback","custom","polyfills","TextEncoder","TextDecoder","originalTextEncoder","invalidPolyfills","Error"],"mappings":"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"}