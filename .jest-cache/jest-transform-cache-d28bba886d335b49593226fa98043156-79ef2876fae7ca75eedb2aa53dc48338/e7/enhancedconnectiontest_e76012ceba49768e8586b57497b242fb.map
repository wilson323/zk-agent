{"version":3,"sources":["E:\\zk-agent\\tests\\database\\enhanced-connection.test.ts"],"sourcesContent":["/**\n * @file Enhanced Database Connection Tests\n * @description 增强数据库连接管理器的测试文件\n * @author ZK-Agent Team\n * @date 2024-12-19\n */\n\nimport { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals'\nimport { \n  EnhancedDatabaseConnection, \n  ConnectionState,\n  enhancedDb,\n  connectDatabase,\n  disconnectDatabase,\n  getDatabaseStats,\n  isDatabaseConnected,\n  executeQuery\n} from '../../lib/database/enhanced-connection'\nimport { PrismaClient } from '@prisma/client'\n\n// 模拟Prisma客户端\njest.mock('@prisma/client')\nconst MockedPrismaClient = PrismaClient as jest.MockedClass<typeof PrismaClient>\n\ndescribe('增强数据库连接管理器测试', () => {\n  let connection: EnhancedDatabaseConnection\n  let mockPrismaClient: jest.Mocked<PrismaClient>\n\n  beforeEach(() => {\n    // 重置所有模拟\n    jest.clearAllMocks()\n    \n    // 创建模拟的Prisma客户端\n    mockPrismaClient = {\n      $connect: jest.fn(),\n      $disconnect: jest.fn(),\n      $queryRaw: jest.fn(),\n    } as any\n    \n    MockedPrismaClient.mockImplementation(() => mockPrismaClient)\n    \n    // 创建新的连接实例\n    connection = new EnhancedDatabaseConnection(\n      { maxConnections: 10, minConnections: 2 },\n      { enabled: true, maxRetries: 3 },\n      { enabled: true, intervalMs: 5000 }\n    )\n  })\n\n  afterEach(async () => {\n    // 清理连接\n    if (connection.isConnected()) {\n      await connection.disconnect()\n    }\n  })\n\n  describe('连接管理', () => {\n    it('应该成功连接到数据库', async () => {\n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      await connection.connect()\n      \n      expect(connection.isConnected()).toBe(true)\n      expect(connection.getState()).toBe(ConnectionState.CONNECTED)\n      expect(mockPrismaClient.$connect).toHaveBeenCalled()\n    })\n\n    it('应该处理连接失败', async () => {\n      // 模拟连接失败\n      const connectionError = new Error('Connection failed')\n      mockPrismaClient.$connect.mockRejectedValue(connectionError)\n      \n      await expect(connection.connect()).rejects.toThrow('Connection failed')\n      expect(connection.getState()).toBe(ConnectionState.FAILED)\n    })\n\n    it('应该成功断开连接', async () => {\n      // 先连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 模拟断开连接\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined)\n      \n      await connection.disconnect()\n      \n      expect(connection.isConnected()).toBe(false)\n      expect(connection.getState()).toBe(ConnectionState.DISCONNECTED)\n      expect(mockPrismaClient.$disconnect).toHaveBeenCalled()\n    })\n  })\n\n  describe('重连机制', () => {\n    it('应该在连接失败后自动重连', async () => {\n      // 配置重连\n      connection.updateConfig(undefined, { \n        enabled: true, \n        maxRetries: 2, \n        retryDelayMs: 100 \n      })\n      \n      // 第一次连接失败\n      mockPrismaClient.$connect\n        .mockRejectedValueOnce(new Error('First attempt failed'))\n        .mockResolvedValueOnce(undefined)\n      \n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      // 监听重连事件\n      const reconnectingPromise = new Promise(resolve => {\n        connection.once('reconnecting', resolve)\n      })\n      \n      const reconnectedPromise = new Promise(resolve => {\n        connection.once('reconnected', resolve)\n      })\n      \n      // 尝试连接（会失败并触发重连）\n      await expect(connection.connect()).rejects.toThrow('First attempt failed')\n      \n      // 等待重连事件\n      await reconnectingPromise\n      await reconnectedPromise\n      \n      expect(connection.isConnected()).toBe(true)\n    }, 10000)\n\n    it('应该在达到最大重试次数后停止重连', async () => {\n      // 配置重连\n      connection.updateConfig(undefined, { \n        enabled: true, \n        maxRetries: 1, \n        retryDelayMs: 100 \n      })\n      \n      // 所有连接尝试都失败\n      mockPrismaClient.$connect.mockRejectedValue(new Error('Connection always fails'))\n      \n      // 监听错误事件\n      const errorPromise = new Promise(resolve => {\n        connection.once('error', resolve)\n      })\n      \n      // 尝试连接\n      await expect(connection.connect()).rejects.toThrow('Connection always fails')\n      \n      // 等待错误事件\n      await errorPromise\n      \n      // 等待重连尝试完成\n      await new Promise(resolve => setTimeout(resolve, 500))\n      \n      expect(connection.getState()).toBe(ConnectionState.FAILED)\n    }, 10000)\n  })\n\n  describe('健康检查', () => {\n    it('应该定期执行健康检查', async () => {\n      // 启用健康检查\n      connection.updateConfig(undefined, undefined, { \n        enabled: true, \n        intervalMs: 200 \n      })\n      \n      // 模拟成功连接和健康检查\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ health_check: 1 }])\n      \n      await connection.connect()\n      \n      // 监听健康检查事件\n      const healthCheckPromise = new Promise(resolve => {\n        connection.once('healthCheck', resolve)\n      })\n      \n      // 等待健康检查执行\n      const result = await healthCheckPromise\n      \n      expect(result).toBe(true)\n      expect(mockPrismaClient.$queryRaw).toHaveBeenCalledWith(\n        expect.arrayContaining([expect.stringContaining('health_check')])\n      )\n    }, 5000)\n\n    it('应该处理健康检查失败', async () => {\n      // 启用健康检查\n      connection.updateConfig(undefined, undefined, { \n        enabled: true, \n        intervalMs: 200,\n        timeoutMs: 100\n      })\n      \n      // 模拟成功连接但健康检查失败\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // 初始连接验证\n        .mockRejectedValue(new Error('Health check failed')) // 健康检查失败\n      \n      await connection.connect()\n      \n      // 监听健康检查失败事件\n      const healthCheckPromise = new Promise(resolve => {\n        connection.once('healthCheck', resolve)\n      })\n      \n      // 等待健康检查失败\n      const result = await healthCheckPromise\n      \n      expect(result).toBe(false)\n    }, 5000)\n  })\n\n  describe('查询执行', () => {\n    it('应该成功执行查询并更新统计信息', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 执行查询\n      const queryResult = await connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT * FROM users LIMIT 1`\n      })\n      \n      expect(queryResult).toEqual([{ test: 1 }])\n      \n      // 检查统计信息\n      const stats = connection.getStats()\n      expect(stats.totalQueries).toBeGreaterThan(0)\n      expect(stats.avgLatency).toBeGreaterThan(0)\n    })\n\n    it('应该处理查询失败并更新失败统计', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // 连接验证\n        .mockRejectedValueOnce(new Error('Query failed')) // 查询失败\n      \n      await connection.connect()\n      \n      // 执行失败的查询\n      await expect(connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT * FROM non_existent_table`\n      })).rejects.toThrow('Query failed')\n      \n      // 检查失败统计\n      const stats = connection.getStats()\n      expect(stats.failedQueries).toBeGreaterThan(0)\n    })\n\n    it('应该在未连接时拒绝查询', async () => {\n      // 确保未连接\n      expect(connection.isConnected()).toBe(false)\n      \n      // 尝试执行查询\n      await expect(connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT 1`\n      })).rejects.toThrow('Database not connected')\n    })\n  })\n\n  describe('统计信息', () => {\n    it('应该正确跟踪连接统计信息', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 获取统计信息\n      const stats = connection.getStats()\n      \n      expect(stats.state).toBe(ConnectionState.CONNECTED)\n      expect(stats.connectedAt).toBeInstanceOf(Date)\n      expect(stats.reconnectAttempts).toBe(0)\n      expect(stats.uptime).toBeGreaterThanOrEqual(0)\n    })\n\n    it('应该正确计算运行时间', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 等待一段时间\n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      // 检查运行时间\n      const stats = connection.getStats()\n      expect(stats.uptime).toBeGreaterThan(90) // 至少90ms\n    })\n  })\n\n  describe('配置更新', () => {\n    it('应该允许动态更新连接池配置', () => {\n      const newPoolConfig = {\n        maxConnections: 20,\n        minConnections: 5\n      }\n      \n      connection.updateConfig(newPoolConfig)\n      \n      // 配置应该已更新（无法直接验证私有属性，但不应抛出错误）\n      expect(() => connection.updateConfig(newPoolConfig)).not.toThrow()\n    })\n\n    it('应该允许动态更新重连配置', () => {\n      const newReconnectionConfig = {\n        enabled: false,\n        maxRetries: 5\n      }\n      \n      connection.updateConfig(undefined, newReconnectionConfig)\n      \n      // 配置应该已更新\n      expect(() => connection.updateConfig(undefined, newReconnectionConfig)).not.toThrow()\n    })\n\n    it('应该允许动态更新健康检查配置', async () => {\n      // 先连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      const newHealthCheckConfig = {\n        enabled: true,\n        intervalMs: 1000\n      }\n      \n      connection.updateConfig(undefined, undefined, newHealthCheckConfig)\n      \n      // 配置应该已更新\n      expect(() => connection.updateConfig(undefined, undefined, newHealthCheckConfig)).not.toThrow()\n    })\n  })\n\n  describe('全局实例测试', () => {\n    it('应该提供全局数据库连接实例', () => {\n      expect(enhancedDb).toBeInstanceOf(EnhancedDatabaseConnection)\n    })\n\n    it('应该提供便捷的连接函数', async () => {\n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      await connectDatabase()\n      \n      expect(isDatabaseConnected()).toBe(true)\n      \n      const stats = getDatabaseStats()\n      expect(stats.state).toBe(ConnectionState.CONNECTED)\n      \n      await disconnectDatabase()\n      expect(isDatabaseConnected()).toBe(false)\n    })\n\n    it('应该提供便捷的查询执行函数', async () => {\n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ result: 'success' }])\n      \n      await connectDatabase()\n      \n      const result = await executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT 'success' as result`\n      })\n      \n      expect(result).toEqual([{ result: 'success' }])\n      \n      await disconnectDatabase()\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该正确识别连接相关错误', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw\n        .mockResolvedValueOnce([{ test: 1 }]) // 连接验证\n        .mockRejectedValueOnce(new Error('ECONNREFUSED: Connection refused')) // 连接错误\n      \n      await connection.connect()\n      \n      // 监听错误事件\n      const errorPromise = new Promise(resolve => {\n        connection.once('error', resolve)\n      })\n      \n      // 执行会导致连接错误的查询\n      await expect(connection.executeQuery(async (client) => {\n        return await client.$queryRaw`SELECT 1`\n      })).rejects.toThrow('ECONNREFUSED')\n      \n      // 等待错误事件\n      await errorPromise\n    })\n\n    it('应该处理优雅关闭', async () => {\n      // 连接数据库\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined)\n      \n      await connection.connect()\n      \n      // 执行优雅关闭\n      await expect(connection.gracefulShutdown()).resolves.not.toThrow()\n    })\n  })\n\n  describe('事件系统', () => {\n    it('应该正确触发连接事件', async () => {\n      // 监听连接事件\n      const connectedPromise = new Promise(resolve => {\n        connection.once('connected', resolve)\n      })\n      \n      // 模拟成功连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      \n      await connection.connect()\n      \n      // 等待连接事件\n      await connectedPromise\n    })\n\n    it('应该正确触发断开连接事件', async () => {\n      // 先连接\n      mockPrismaClient.$connect.mockResolvedValue(undefined)\n      mockPrismaClient.$queryRaw.mockResolvedValue([{ test: 1 }])\n      await connection.connect()\n      \n      // 监听断开连接事件\n      const disconnectedPromise = new Promise(resolve => {\n        connection.once('disconnected', resolve)\n      })\n      \n      // 模拟断开连接\n      mockPrismaClient.$disconnect.mockResolvedValue(undefined)\n      \n      await connection.disconnect()\n      \n      // 等待断开连接事件\n      await disconnectedPromise\n    })\n\n    it('应该正确触发错误事件', async () => {\n      // 监听错误事件\n      const errorPromise = new Promise(resolve => {\n        connection.once('error', resolve)\n      })\n      \n      // 模拟连接失败\n      const connectionError = new Error('Connection failed')\n      mockPrismaClient.$connect.mockRejectedValue(connectionError)\n      \n      await expect(connection.connect()).rejects.toThrow('Connection failed')\n      \n      // 等待错误事件\n      const error = await errorPromise\n      expect(error).toBe(connectionError)\n    })\n  })\n})"],"names":["jest","mock","MockedPrismaClient","PrismaClient","describe","connection","mockPrismaClient","beforeEach","clearAllMocks","$connect","fn","$disconnect","$queryRaw","mockImplementation","EnhancedDatabaseConnection","maxConnections","minConnections","enabled","maxRetries","intervalMs","afterEach","isConnected","disconnect","it","mockResolvedValue","undefined","test","connect","expect","toBe","getState","ConnectionState","CONNECTED","toHaveBeenCalled","connectionError","Error","mockRejectedValue","rejects","toThrow","FAILED","DISCONNECTED","updateConfig","retryDelayMs","mockRejectedValueOnce","mockResolvedValueOnce","reconnectingPromise","Promise","resolve","once","reconnectedPromise","errorPromise","setTimeout","health_check","healthCheckPromise","result","toHaveBeenCalledWith","arrayContaining","stringContaining","timeoutMs","queryResult","executeQuery","client","toEqual","stats","getStats","totalQueries","toBeGreaterThan","avgLatency","failedQueries","state","connectedAt","toBeInstanceOf","Date","reconnectAttempts","uptime","toBeGreaterThanOrEqual","newPoolConfig","not","newReconnectionConfig","newHealthCheckConfig","enhancedDb","connectDatabase","isDatabaseConnected","getDatabaseStats","disconnectDatabase","gracefulShutdown","resolves","connectedPromise","disconnectedPromise","error"],"mappings":"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"}