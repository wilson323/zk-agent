{"version":3,"sources":["E:\\zk-agent\\lib\\database\\pool-optimizer.ts"],"sourcesContent":["/**\n * @file Database Connection Pool Optimizer\n * @description 数据库连接池动态优化器\n * @author ZK-Agent Team\n * @date 2024-12-19\n */\n\nimport { EventEmitter } from 'events'\nimport { enhancedDb } from './enhanced-connection'\nimport { databaseMonitor, DatabaseMetrics, AlertLevel } from './monitoring'\n\n// 连接池配置\nexport interface PoolConfiguration {\n  connectionLimit: number\n  acquireTimeoutMillis: number\n  createTimeoutMillis: number\n  destroyTimeoutMillis: number\n  idleTimeoutMillis: number\n  reapIntervalMillis: number\n  createRetryIntervalMillis: number\n  min: number\n  max: number\n}\n\n// 优化策略\nexport interface OptimizationStrategy {\n  name: string\n  description: string\n  enabled: boolean\n  priority: number\n  conditions: {\n    minMetricsCount: number\n    timeWindowMs: number\n    triggers: {\n      highLatency?: number\n      highFailureRate?: number\n      lowThroughput?: number\n      highCpuUsage?: number\n      highMemoryUsage?: number\n    }\n  }\n  actions: {\n    adjustConnectionLimit?: {\n      increment?: number\n      decrement?: number\n      maxLimit?: number\n      minLimit?: number\n    }\n    adjustTimeouts?: {\n      acquireTimeout?: number\n      createTimeout?: number\n      idleTimeout?: number\n    }\n    adjustPoolSize?: {\n      minConnections?: number\n      maxConnections?: number\n    }\n  }\n}\n\n// 优化结果\nexport interface OptimizationResult {\n  timestamp: Date\n  strategy: string\n  previousConfig: Partial<PoolConfiguration>\n  newConfig: Partial<PoolConfiguration>\n  reason: string\n  metrics: DatabaseMetrics\n  success: boolean\n  error?: string\n}\n\n/**\n * 数据库连接池优化器\n */\nexport class DatabasePoolOptimizer extends EventEmitter {\n  private isOptimizing: boolean = false\n  private optimizationInterval: NodeJS.Timeout | null = null\n  private optimizationHistory: OptimizationResult[] = []\n  private strategies: OptimizationStrategy[]\n  private currentConfig: PoolConfiguration\n  private intervalMs: number\n  private maxHistorySize: number\n  private lastOptimization: Date | null = null\n  private cooldownMs: number\n\n  constructor(\n    intervalMs: number = 60000, // 1分钟检查一次\n    maxHistorySize: number = 100,\n    cooldownMs: number = 300000 // 5分钟冷却期\n  ) {\n    super()\n\n    this.intervalMs = intervalMs\n    this.maxHistorySize = maxHistorySize\n    this.cooldownMs = cooldownMs\n\n    // 初始化当前配置\n    this.currentConfig = this.getDefaultConfiguration()\n\n    // 初始化优化策略\n    this.strategies = this.getDefaultStrategies()\n\n    // 监听数据库监控事件\n    this.setupMonitoringEventListeners()\n  }\n\n  /**\n   * 获取默认配置\n   */\n  private getDefaultConfiguration(): PoolConfiguration {\n    return {\n      connectionLimit: parseInt(process.env.DB_CONNECTION_LIMIT || '10'),\n      acquireTimeoutMillis: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000'),\n      createTimeoutMillis: parseInt(process.env.DB_CREATE_TIMEOUT || '30000'),\n      destroyTimeoutMillis: parseInt(process.env.DB_DESTROY_TIMEOUT || '5000'),\n      idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT || '300000'),\n      reapIntervalMillis: parseInt(process.env.DB_REAP_INTERVAL || '1000'),\n      createRetryIntervalMillis: parseInt(process.env.DB_CREATE_RETRY_INTERVAL || '200'),\n      min: parseInt(process.env.DB_MIN_CONNECTIONS || '2'),\n      max: parseInt(process.env.DB_MAX_CONNECTIONS || '20')\n    }\n  }\n\n  /**\n   * 获取默认优化策略\n   */\n  private getDefaultStrategies(): OptimizationStrategy[] {\n    return [\n      {\n        name: 'high_latency_scale_up',\n        description: '高延迟时增加连接数',\n        enabled: true,\n        priority: 1,\n        conditions: {\n          minMetricsCount: 5,\n          timeWindowMs: 300000, // 5分钟\n          triggers: {\n            highLatency: parseFloat(process.env.DB_HIGH_LATENCY_THRESHOLD || '1000')\n          }\n        },\n        actions: {\n          adjustConnectionLimit: {\n            increment: 2,\n            maxLimit: parseInt(process.env.DB_MAX_CONNECTIONS || '20')\n          },\n          adjustPoolSize: {\n            maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '20')\n          }\n        }\n      },\n      {\n        name: 'high_failure_rate_timeout_increase',\n        description: '高失败率时增加超时时间',\n        enabled: true,\n        priority: 2,\n        conditions: {\n          minMetricsCount: 3,\n          timeWindowMs: 180000, // 3分钟\n          triggers: {\n            highFailureRate: parseFloat(process.env.DB_HIGH_FAILURE_RATE_THRESHOLD || '5')\n          }\n        },\n        actions: {\n          adjustTimeouts: {\n            acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000') * 1.5,\n            createTimeout: parseInt(process.env.DB_CREATE_TIMEOUT || '30000') * 1.5\n          }\n        }\n      },\n      {\n        name: 'low_usage_scale_down',\n        description: '低使用率时减少连接数',\n        enabled: true,\n        priority: 3,\n        conditions: {\n          minMetricsCount: 10,\n          timeWindowMs: 600000, // 10分钟\n          triggers: {\n            lowThroughput: parseFloat(process.env.DB_LOW_THROUGHPUT_THRESHOLD || '0.1')\n          }\n        },\n        actions: {\n          adjustConnectionLimit: {\n            decrement: 1,\n            minLimit: parseInt(process.env.DB_MIN_CONNECTIONS || '2')\n          },\n          adjustPoolSize: {\n            minConnections: parseInt(process.env.DB_MIN_CONNECTIONS || '2')\n          }\n        }\n      },\n      {\n        name: 'high_memory_usage_optimize',\n        description: '高内存使用时优化连接池',\n        enabled: true,\n        priority: 4,\n        conditions: {\n          minMetricsCount: 3,\n          timeWindowMs: 180000,\n          triggers: {\n            highMemoryUsage: parseFloat(process.env.DB_HIGH_MEMORY_THRESHOLD || '80') // 80% 内存使用率\n          }\n        },\n        actions: {\n          adjustTimeouts: {\n            idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '300000') * 0.5 // 减少空闲超时\n          },\n          adjustConnectionLimit: {\n            decrement: 1,\n            minLimit: parseInt(process.env.DB_MIN_CONNECTIONS || '2')\n          }\n        }\n      },\n      {\n        name: 'connection_recovery',\n        description: '连接恢复优化',\n        enabled: true,\n        priority: 5,\n        conditions: {\n          minMetricsCount: 2,\n          timeWindowMs: 120000, // 2分钟\n          triggers: {\n            highFailureRate: 10 // 10% 失败率触发恢复\n          }\n        },\n        actions: {\n          adjustTimeouts: {\n            createTimeout: parseInt(process.env.DB_CREATE_TIMEOUT || '30000') * 2,\n            acquireTimeout: parseInt(process.env.DB_ACQUIRE_TIMEOUT || '60000') * 2\n          },\n          adjustPoolSize: {\n            minConnections: Math.max(1, parseInt(process.env.DB_MIN_CONNECTIONS || '2') - 1)\n          }\n        }\n      }\n    ]\n  }\n\n  /**\n   * 设置监控事件监听器\n   */\n  private setupMonitoringEventListeners(): void {\n    databaseMonitor.on('alert', (alert) => {\n      if (alert.level === AlertLevel.CRITICAL || alert.level === AlertLevel.ERROR) {\n        // 紧急情况下立即触发优化\n        this.triggerImmediateOptimization(alert.message)\n      }\n    })\n\n    databaseMonitor.on('metrics', (metrics) => {\n      // 定期检查是否需要优化\n      if (this.shouldTriggerOptimization(metrics)) {\n        this.performOptimization()\n      }\n    })\n  }\n\n  /**\n   * 开始优化\n   */\n  startOptimization(): void {\n    if (this.isOptimizing) {\n      console.log('Database pool optimization is already running')\n      return\n    }\n\n    console.log(`Starting database pool optimization (interval: ${this.intervalMs}ms)`)\n    this.isOptimizing = true\n\n    this.optimizationInterval = setInterval(() => {\n      this.performOptimization()\n    }, this.intervalMs)\n\n    // 立即执行一次优化检查\n    this.performOptimization()\n  }\n\n  /**\n   * 停止优化\n   */\n  stopOptimization(): void {\n    if (!this.isOptimizing) {\n      return\n    }\n\n    console.log('Stopping database pool optimization')\n    this.isOptimizing = false\n\n    if (this.optimizationInterval) {\n      clearInterval(this.optimizationInterval)\n      this.optimizationInterval = null\n    }\n  }\n\n  /**\n   * 判断是否应该触发优化\n   */\n  private shouldTriggerOptimization(metrics: DatabaseMetrics): boolean {\n    // 检查冷却期\n    if (this.lastOptimization && \n        Date.now() - this.lastOptimization.getTime() < this.cooldownMs) {\n      return false\n    }\n\n    // 检查是否有策略被触发\n    return this.strategies.some(strategy => \n      strategy.enabled && this.isStrategyTriggered(strategy, metrics)\n    )\n  }\n\n  /**\n   * 检查策略是否被触发\n   */\n  private isStrategyTriggered(strategy: OptimizationStrategy, currentMetrics: DatabaseMetrics): boolean {\n    const recentMetrics = databaseMonitor.getMetricsHistory()\n      .filter(m => Date.now() - m.timestamp.getTime() <= strategy.conditions.timeWindowMs)\n\n    if (recentMetrics.length < strategy.conditions.minMetricsCount) {\n      return false\n    }\n\n    const triggers = strategy.conditions.triggers\n\n    // 检查高延迟\n    if (triggers.highLatency !== undefined) {\n      const avgLatency = recentMetrics.reduce((sum, m) => sum + m.avgLatency, 0) / recentMetrics.length\n      if (avgLatency > triggers.highLatency) {\n        return true\n      }\n    }\n\n    // 检查高失败率\n    if (triggers.highFailureRate !== undefined) {\n      const avgFailureRate = recentMetrics.reduce((sum, m) => sum + (100 - m.successRate), 0) / recentMetrics.length\n      if (avgFailureRate > triggers.highFailureRate) {\n        return true\n      }\n    }\n\n    // 检查低吞吐量\n    if (triggers.lowThroughput !== undefined) {\n      const totalQueries = currentMetrics.totalQueries\n      const timeSpanMs = recentMetrics.length > 1 \n        ? recentMetrics[recentMetrics.length - 1].timestamp.getTime() - recentMetrics[0].timestamp.getTime()\n        : strategy.conditions.timeWindowMs\n      const throughput = totalQueries / (timeSpanMs / 1000) // 每秒查询数\n      if (throughput < triggers.lowThroughput) {\n        return true\n      }\n    }\n\n    // 检查高CPU使用率\n    if (triggers.highCpuUsage !== undefined) {\n      const avgCpuUsage = recentMetrics.reduce((sum, m) => sum + m.cpuUsage.user + m.cpuUsage.system, 0) / recentMetrics.length\n      if (avgCpuUsage > triggers.highCpuUsage) {\n        return true\n      }\n    }\n\n    // 检查高内存使用率\n    if (triggers.highMemoryUsage !== undefined) {\n      const avgMemoryUsage = recentMetrics.reduce((sum, m) => {\n        const usagePercent = (m.memoryUsage.heapUsed / m.memoryUsage.heapTotal) * 100\n        return sum + usagePercent\n      }, 0) / recentMetrics.length\n      if (avgMemoryUsage > triggers.highMemoryUsage) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * 执行优化\n   */\n  private async performOptimization(): Promise<void> {\n    try {\n      const currentMetrics = databaseMonitor.getMetricsHistory(1)[0]\n      if (!currentMetrics) {\n        return\n      }\n\n      // 找到优先级最高的被触发策略\n      const triggeredStrategies = this.strategies\n        .filter(strategy => strategy.enabled && this.isStrategyTriggered(strategy, currentMetrics))\n        .sort((a, b) => a.priority - b.priority)\n\n      if (triggeredStrategies.length === 0) {\n        return\n      }\n\n      const strategy = triggeredStrategies[0]\n      const previousConfig = { ...this.currentConfig }\n      const newConfig = this.applyStrategy(strategy, this.currentConfig)\n\n      if (this.hasConfigurationChanged(previousConfig, newConfig)) {\n        const result = await this.applyConfiguration(newConfig, strategy, currentMetrics, previousConfig)\n        this.addOptimizationResult(result)\n        this.lastOptimization = new Date()\n        \n        this.emit('optimization', result)\n        \n        if (result.success) {\n          this.currentConfig = { ...this.currentConfig, ...newConfig }\n          console.log(`Database pool optimized using strategy: ${strategy.name}`)\n        } else {\n          console.error(`Failed to apply optimization strategy: ${strategy.name}`, result.error)\n        }\n      }\n\n    } catch (error) {\n      console.error('Error during database pool optimization:', error)\n    }\n  }\n\n  /**\n   * 应用策略\n   */\n  private applyStrategy(strategy: OptimizationStrategy, currentConfig: PoolConfiguration): Partial<PoolConfiguration> {\n    const newConfig: Partial<PoolConfiguration> = {}\n\n    // 调整连接限制\n    if (strategy.actions.adjustConnectionLimit) {\n      const adjust = strategy.actions.adjustConnectionLimit\n      let newLimit = currentConfig.connectionLimit\n\n      if (adjust.increment) {\n        newLimit += adjust.increment\n      }\n      if (adjust.decrement) {\n        newLimit -= adjust.decrement\n      }\n      if (adjust.maxLimit) {\n        newLimit = Math.min(newLimit, adjust.maxLimit)\n      }\n      if (adjust.minLimit) {\n        newLimit = Math.max(newLimit, adjust.minLimit)\n      }\n\n      newConfig.connectionLimit = newLimit\n    }\n\n    // 调整超时时间\n    if (strategy.actions.adjustTimeouts) {\n      const timeouts = strategy.actions.adjustTimeouts\n      if (timeouts.acquireTimeout) {\n        newConfig.acquireTimeoutMillis = timeouts.acquireTimeout\n      }\n      if (timeouts.createTimeout) {\n        newConfig.createTimeoutMillis = timeouts.createTimeout\n      }\n      if (timeouts.idleTimeout) {\n        newConfig.idleTimeoutMillis = timeouts.idleTimeout\n      }\n    }\n\n    // 调整连接池大小\n    if (strategy.actions.adjustPoolSize) {\n      const poolSize = strategy.actions.adjustPoolSize\n      if (poolSize.minConnections) {\n        newConfig.min = poolSize.minConnections\n      }\n      if (poolSize.maxConnections) {\n        newConfig.max = poolSize.maxConnections\n      }\n    }\n\n    return newConfig\n  }\n\n  /**\n   * 检查配置是否有变化\n   */\n  private hasConfigurationChanged(oldConfig: PoolConfiguration, newConfig: Partial<PoolConfiguration>): boolean {\n    return Object.keys(newConfig).some(key => {\n      const configKey = key as keyof PoolConfiguration\n      return oldConfig[configKey] !== newConfig[configKey]\n    })\n  }\n\n  /**\n   * 应用配置\n   */\n  private async applyConfiguration(\n    newConfig: Partial<PoolConfiguration>,\n    strategy: OptimizationStrategy,\n    metrics: DatabaseMetrics,\n    previousConfig: PoolConfiguration\n  ): Promise<OptimizationResult> {\n    const result: OptimizationResult = {\n      timestamp: new Date(),\n      strategy: strategy.name,\n      previousConfig,\n      newConfig,\n      reason: strategy.description,\n      metrics,\n      success: false\n    }\n\n    try {\n      // 这里应该调用实际的配置更新方法\n      // 由于Prisma的连接池配置在初始化时设定，这里我们模拟配置更新\n      await this.updateDatabaseConfiguration(newConfig)\n      \n      result.success = true\n      console.log('Database configuration updated successfully:', newConfig)\n      \n    } catch (error) {\n      result.error = error instanceof Error ? error.message : String(error)\n      console.error('Failed to update database configuration:', error)\n    }\n\n    return result\n  }\n\n  /**\n   * 更新数据库配置（模拟实现）\n   */\n  private async updateDatabaseConfiguration(config: Partial<PoolConfiguration>): Promise<void> {\n    // 在实际实现中，这里应该：\n    // 1. 更新环境变量或配置文件\n    // 2. 重新初始化数据库连接池\n    // 3. 验证新配置是否生效\n    \n    // 模拟配置更新延迟\n    await new Promise(resolve => setTimeout(resolve, 100))\n    \n    // 这里可以调用enhancedDb的配置更新方法\n    if (enhancedDb && typeof enhancedDb.updateConfiguration === 'function') {\n      await enhancedDb.updateConfiguration(config)\n    }\n  }\n\n  /**\n   * 立即触发优化\n   */\n  private async triggerImmediateOptimization(reason: string): Promise<void> {\n    console.log(`Triggering immediate optimization due to: ${reason}`)\n    await this.performOptimization()\n  }\n\n  /**\n   * 添加优化结果到历史\n   */\n  private addOptimizationResult(result: OptimizationResult): void {\n    this.optimizationHistory.push(result)\n\n    // 限制历史记录大小\n    if (this.optimizationHistory.length > this.maxHistorySize) {\n      this.optimizationHistory = this.optimizationHistory.slice(-this.maxHistorySize)\n    }\n  }\n\n  /**\n   * 获取优化历史\n   */\n  getOptimizationHistory(limit?: number): OptimizationResult[] {\n    if (limit) {\n      return this.optimizationHistory.slice(-limit)\n    }\n    return [...this.optimizationHistory]\n  }\n\n  /**\n   * 获取当前配置\n   */\n  getCurrentConfiguration(): PoolConfiguration {\n    return { ...this.currentConfig }\n  }\n\n  /**\n   * 获取策略列表\n   */\n  getStrategies(): OptimizationStrategy[] {\n    return [...this.strategies]\n  }\n\n  /**\n   * 更新策略\n   */\n  updateStrategy(name: string, updates: Partial<OptimizationStrategy>): boolean {\n    const strategyIndex = this.strategies.findIndex(s => s.name === name)\n    if (strategyIndex === -1) {\n      return false\n    }\n\n    this.strategies[strategyIndex] = { ...this.strategies[strategyIndex], ...updates }\n    console.log(`Strategy '${name}' updated successfully`)\n    return true\n  }\n\n  /**\n   * 添加新策略\n   */\n  addStrategy(strategy: OptimizationStrategy): void {\n    // 检查策略名称是否已存在\n    if (this.strategies.some(s => s.name === strategy.name)) {\n      throw new Error(`Strategy with name '${strategy.name}' already exists`)\n    }\n\n    this.strategies.push(strategy)\n    console.log(`Strategy '${strategy.name}' added successfully`)\n  }\n\n  /**\n   * 删除策略\n   */\n  removeStrategy(name: string): boolean {\n    const strategyIndex = this.strategies.findIndex(s => s.name === name)\n    if (strategyIndex === -1) {\n      return false\n    }\n\n    this.strategies.splice(strategyIndex, 1)\n    console.log(`Strategy '${name}' removed successfully`)\n    return true\n  }\n\n  /**\n   * 获取优化统计\n   */\n  getOptimizationStats(): {\n    totalOptimizations: number\n    successfulOptimizations: number\n    failedOptimizations: number\n    successRate: number\n    lastOptimization: Date | null\n    strategiesUsed: { [key: string]: number }\n  } {\n    const total = this.optimizationHistory.length\n    const successful = this.optimizationHistory.filter(r => r.success).length\n    const failed = total - successful\n    \n    const strategiesUsed: { [key: string]: number } = {}\n    this.optimizationHistory.forEach(result => {\n      strategiesUsed[result.strategy] = (strategiesUsed[result.strategy] || 0) + 1\n    })\n\n    return {\n      totalOptimizations: total,\n      successfulOptimizations: successful,\n      failedOptimizations: failed,\n      successRate: total > 0 ? (successful / total) * 100 : 0,\n      lastOptimization: this.lastOptimization,\n      strategiesUsed\n    }\n  }\n\n  /**\n   * 重置优化器\n   */\n  reset(): void {\n    this.stopOptimization()\n    this.optimizationHistory = []\n    this.lastOptimization = null\n    this.currentConfig = this.getDefaultConfiguration()\n    this.strategies = this.getDefaultStrategies()\n    console.log('Database pool optimizer reset successfully')\n  }\n}\n\n// 创建全局优化器实例\nexport const poolOptimizer = new DatabasePoolOptimizer()\n\n// 如果启用了优化，自动开始优化\nif (process.env.DB_POOL_OPTIMIZATION_ENABLED === 'true') {\n  poolOptimizer.startOptimization()\n  \n  // 监听优化事件\n  poolOptimizer.on('optimization', (result: OptimizationResult) => {\n    console.log('Database pool optimization completed:', {\n      strategy: result.strategy,\n      success: result.success,\n      changes: result.newConfig\n    })\n  })\n}\n\n// 导出便捷函数\nexport const startPoolOptimization = () => poolOptimizer.startOptimization()\nexport const stopPoolOptimization = () => poolOptimizer.stopOptimization()\nexport const getPoolConfiguration = () => poolOptimizer.getCurrentConfiguration()\nexport const getOptimizationHistory = (limit?: number) => poolOptimizer.getOptimizationHistory(limit)\nexport const getOptimizationStats = () => poolOptimizer.getOptimizationStats()\n\n// 默认导出优化器\nexport default poolOptimizer"],"names":["DatabasePoolOptimizer","getOptimizationHistory","getOptimizationStats","getPoolConfiguration","poolOptimizer","startPoolOptimization","stopPoolOptimization","EventEmitter","constructor","intervalMs","maxHistorySize","cooldownMs","isOptimizing","optimizationInterval","optimizationHistory","lastOptimization","currentConfig","getDefaultConfiguration","strategies","getDefaultStrategies","setupMonitoringEventListeners","connectionLimit","parseInt","process","env","DB_CONNECTION_LIMIT","acquireTimeoutMillis","DB_ACQUIRE_TIMEOUT","createTimeoutMillis","DB_CREATE_TIMEOUT","destroyTimeoutMillis","DB_DESTROY_TIMEOUT","idleTimeoutMillis","DB_IDLE_TIMEOUT","reapIntervalMillis","DB_REAP_INTERVAL","createRetryIntervalMillis","DB_CREATE_RETRY_INTERVAL","min","DB_MIN_CONNECTIONS","max","DB_MAX_CONNECTIONS","name","description","enabled","priority","conditions","minMetricsCount","timeWindowMs","triggers","highLatency","parseFloat","DB_HIGH_LATENCY_THRESHOLD","actions","adjustConnectionLimit","increment","maxLimit","adjustPoolSize","maxConnections","highFailureRate","DB_HIGH_FAILURE_RATE_THRESHOLD","adjustTimeouts","acquireTimeout","createTimeout","lowThroughput","DB_LOW_THROUGHPUT_THRESHOLD","decrement","minLimit","minConnections","highMemoryUsage","DB_HIGH_MEMORY_THRESHOLD","idleTimeout","Math","databaseMonitor","on","alert","level","AlertLevel","CRITICAL","ERROR","triggerImmediateOptimization","message","metrics","shouldTriggerOptimization","performOptimization","startOptimization","console","log","setInterval","stopOptimization","clearInterval","Date","now","getTime","some","strategy","isStrategyTriggered","currentMetrics","recentMetrics","getMetricsHistory","filter","m","timestamp","length","undefined","avgLatency","reduce","sum","avgFailureRate","successRate","totalQueries","timeSpanMs","throughput","highCpuUsage","avgCpuUsage","cpuUsage","user","system","avgMemoryUsage","usagePercent","memoryUsage","heapUsed","heapTotal","triggeredStrategies","sort","a","b","previousConfig","newConfig","applyStrategy","hasConfigurationChanged","result","applyConfiguration","addOptimizationResult","emit","success","error","adjust","newLimit","timeouts","poolSize","oldConfig","Object","keys","key","configKey","reason","updateDatabaseConfiguration","Error","String","config","Promise","resolve","setTimeout","enhancedDb","updateConfiguration","push","slice","limit","getCurrentConfiguration","getStrategies","updateStrategy","updates","strategyIndex","findIndex","s","addStrategy","removeStrategy","splice","total","successful","r","failed","strategiesUsed","forEach","totalOptimizations","successfulOptimizations","failedOptimizations","reset","DB_POOL_OPTIMIZATION_ENABLED","changes"],"mappings":"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"}