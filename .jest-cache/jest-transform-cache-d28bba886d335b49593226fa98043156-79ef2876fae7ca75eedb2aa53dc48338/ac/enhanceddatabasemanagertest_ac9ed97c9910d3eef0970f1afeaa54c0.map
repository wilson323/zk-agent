{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\database\\enhanced-database-manager.test.ts"],"sourcesContent":["/**\n * Enhanced Database Manager 测试\n * 测试lib/database/enhanced-database-manager.ts中的所有功能\n */\n\nimport { EnhancedDatabaseManager } from '@/lib/database/enhanced-database-manager'\nimport { PrismaClient } from '@prisma/client'\nimport { Logger } from '@/lib/logger'\n\n// Mock Prisma Client\njest.mock('@prisma/client')\n\n// Mock Logger\njest.mock('@/lib/logger')\n\n// Mock fetch for external API calls\nglobal.fetch = jest.fn()\n\nconst mockPrismaInstance = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  $transaction: jest.fn(),\n  $queryRaw: jest.fn(),\n  $executeRaw: jest.fn(),\n  user: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  post: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n}\n\nconst mockLogger = {\n  info: jest.fn(),\n  error: jest.fn(),\n  warn: jest.fn(),\n  debug: jest.fn(),\n}\n\n;(PrismaClient as jest.MockedClass<typeof PrismaClient>).mockImplementation(() => mockPrismaInstance as any)\n;(Logger as jest.MockedClass<typeof Logger>).mockImplementation(() => mockLogger as any)\n\n// Helper function to execute queries\nconst executeQuery = async (queryFn: () => Promise<any>) => {\n  return await queryFn()\n}\n\ndescribe('EnhancedDatabaseManager', () => {\n  let dbManager: EnhancedDatabaseManager\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Reset singleton instance\n    ;(EnhancedDatabaseManager as any).instance = null\n    dbManager = EnhancedDatabaseManager.getInstance()\n  })\n\n  afterEach(async () => {\n    await dbManager.disconnect()\n  })\n\n  describe('单例模式', () => {\n    it('应该返回相同的实例', () => {\n      const instance1 = EnhancedDatabaseManager.getInstance()\n      const instance2 = EnhancedDatabaseManager.getInstance()\n      expect(instance1).toBe(instance2)\n    })\n  })\n\n  describe('初始化', () => {\n    it('应该成功初始化数据库连接', async () => {\n      mockPrismaInstance.$connect.mockResolvedValue(undefined)\n      \n      await dbManager.initialize()\n      \n      expect(mockPrismaInstance.$connect).toHaveBeenCalled()\n      expect(mockLogger.info).toHaveBeenCalledWith('数据库连接已建立')\n    })\n\n    it('应该处理初始化错误', async () => {\n      const error = new Error('连接失败')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n      \n      await expect(dbManager.initialize()).rejects.toThrow('连接失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('数据库初始化失败:', error)\n    })\n  })\n\n  describe('事务执行', () => {\n    it('应该成功执行事务', async () => {\n      const mockResult = { id: 1, name: 'test' }\n      mockPrismaInstance.$transaction.mockResolvedValue(mockResult)\n      \n      const transactionFn = jest.fn().mockResolvedValue(mockResult)\n      const result = await dbManager.executeTransaction(transactionFn)\n      \n      expect(result).toEqual(mockResult)\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalledWith(transactionFn)\n    })\n\n    it('应该处理事务错误', async () => {\n      const error = new Error('事务失败')\n      mockPrismaInstance.$transaction.mockRejectedValue(error)\n      \n      const transactionFn = jest.fn()\n      await expect(dbManager.executeTransaction(transactionFn)).rejects.toThrow('事务失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('事务执行失败:', error)\n    })\n  })\n\n  describe('查询执行', () => {\n    it('应该成功执行查询', async () => {\n      const mockResult = [{ id: 1, name: 'test' }]\n      const queryFn = jest.fn().mockResolvedValue(mockResult)\n      \n      const result = await dbManager.executeQuery(queryFn)\n      \n      expect(result).toEqual(mockResult)\n      expect(queryFn).toHaveBeenCalled()\n    })\n\n    it('应该处理查询错误', async () => {\n      const error = new Error('查询失败')\n      const queryFn = jest.fn().mockRejectedValue(error)\n      \n      await expect(dbManager.executeQuery(queryFn)).rejects.toThrow('查询失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('查询执行失败:', error)\n    })\n  })\n\n  describe('健康检查', () => {\n    it('应该返回健康状态', async () => {\n      mockPrismaInstance.$queryRaw.mockResolvedValue([{ result: 1 }])\n      \n      const health = await dbManager.healthCheck()\n      \n      expect(health.status).toBe('healthy')\n      expect(health.timestamp).toBeDefined()\n      expect(mockPrismaInstance.$queryRaw).toHaveBeenCalledWith`SELECT 1 as result`\n    })\n\n    it('应该处理健康检查错误', async () => {\n      const error = new Error('健康检查失败')\n      mockPrismaInstance.$queryRaw.mockRejectedValue(error)\n      \n      const health = await dbManager.healthCheck()\n      \n      expect(health.status).toBe('unhealthy')\n      expect(health.error).toBe('健康检查失败')\n    })\n  })\n\n  describe('批量操作', () => {\n    it('应该成功执行批量创建', async () => {\n      const mockData = [{ name: 'test1' }, { name: 'test2' }]\n      const mockResult = [{ id: 1, name: 'test1' }, { id: 2, name: 'test2' }]\n      \n      mockPrismaInstance.$transaction.mockImplementation(async (operations) => {\n        return await Promise.all(operations.map(() => mockResult[0]))\n      })\n      \n      const result = await dbManager.batchCreate('user', mockData)\n      \n      expect(result).toBeDefined()\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n    })\n\n    it('应该成功执行批量更新', async () => {\n      const mockUpdates = [{ id: 1, name: 'updated1' }, { id: 2, name: 'updated2' }]\n      \n      mockPrismaInstance.$transaction.mockImplementation(async (operations) => {\n        return await Promise.all(operations.map(() => ({ count: 1 })))\n      })\n      \n      const result = await dbManager.batchUpdate('user', mockUpdates)\n      \n      expect(result).toBeDefined()\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n    })\n\n    it('应该成功执行批量删除', async () => {\n      const mockIds = [1, 2, 3]\n      \n      mockPrismaInstance.$transaction.mockImplementation(async (operations) => {\n        return await Promise.all(operations.map(() => ({ count: 1 })))\n      })\n      \n      const result = await dbManager.batchDelete('user', mockIds)\n      \n      expect(result).toBeDefined()\n      expect(mockPrismaInstance.$transaction).toHaveBeenCalled()\n    })\n  })\n\n  describe('查询分析', () => {\n    it('应该返回查询分析数据', () => {\n      const analytics = dbManager.getQueryAnalytics()\n      \n      expect(analytics).toBeDefined()\n      expect(analytics.totalQueries).toBeDefined()\n      expect(analytics.averageExecutionTime).toBeDefined()\n      expect(analytics.slowQueries).toBeDefined()\n    })\n\n    it('应该重置查询分析数据', () => {\n      dbManager.resetQueryAnalytics()\n      \n      const analytics = dbManager.getQueryAnalytics()\n      expect(analytics.totalQueries).toBe(0)\n      expect(analytics.averageExecutionTime).toBe(0)\n      expect(analytics.slowQueries).toHaveLength(0)\n    })\n  })\n\n  describe('连接池管理', () => {\n    it('应该返回连接池状态', () => {\n      const poolStatus = dbManager.getConnectionPoolStatus()\n      \n      expect(poolStatus).toBeDefined()\n      expect(poolStatus.activeConnections).toBeDefined()\n      expect(poolStatus.idleConnections).toBeDefined()\n      expect(poolStatus.totalConnections).toBeDefined()\n    })\n  })\n\n  describe('缓存管理', () => {\n    it('应该设置和获取缓存', () => {\n      const key = 'test-key'\n      const value = { data: 'test' }\n      \n      dbManager.setCache(key, value)\n      const cachedValue = dbManager.getCache(key)\n      \n      expect(cachedValue).toEqual(value)\n    })\n\n    it('应该清除缓存', () => {\n      const key = 'test-key'\n      const value = { data: 'test' }\n      \n      dbManager.setCache(key, value)\n      dbManager.clearCache(key)\n      const cachedValue = dbManager.getCache(key)\n      \n      expect(cachedValue).toBeNull()\n    })\n\n    it('应该清除所有缓存', () => {\n      dbManager.setCache('key1', 'value1')\n      dbManager.setCache('key2', 'value2')\n      \n      dbManager.clearAllCache()\n      \n      expect(dbManager.getCache('key1')).toBeNull()\n      expect(dbManager.getCache('key2')).toBeNull()\n    })\n  })\n\n  describe('优雅关闭', () => {\n    it('应该优雅地断开数据库连接', async () => {\n      mockPrismaInstance.$disconnect.mockResolvedValue(undefined)\n      \n      await dbManager.disconnect()\n      \n      expect(mockPrismaInstance.$disconnect).toHaveBeenCalled()\n      expect(mockLogger.info).toHaveBeenCalledWith('数据库连接已断开')\n    })\n\n    it('应该处理断开连接时的错误', async () => {\n      const error = new Error('断开连接失败')\n      mockPrismaInstance.$disconnect.mockRejectedValue(error)\n      \n      await dbManager.disconnect()\n      \n      expect(mockLogger.error).toHaveBeenCalledWith('断开数据库连接时发生错误:', error)\n    })\n  })\n\n  describe('Prisma客户端访问', () => {\n    it('应该提供对Prisma客户端的访问', () => {\n      const prismaClient = dbManager.getPrismaClient()\n      \n      expect(prismaClient).toBeDefined()\n      expect(prismaClient).toBe(mockPrismaInstance)\n    })\n  })\n\n  describe('性能测试', () => {\n    it('应该在合理时间内完成查询', async () => {\n      const startTime = Date.now()\n      const queryFn = jest.fn().mockResolvedValue({ id: 1 })\n      \n      await dbManager.executeQuery(queryFn)\n      \n      const endTime = Date.now()\n      const executionTime = endTime - startTime\n      \n      expect(executionTime).toBeLessThan(1000) // 应该在1秒内完成\n    })\n\n    it('应该在合理时间内完成事务', async () => {\n      const startTime = Date.now()\n      const transactionFn = jest.fn().mockResolvedValue({ id: 1 })\n      mockPrismaInstance.$transaction.mockResolvedValue({ id: 1 })\n      \n      await dbManager.executeTransaction(transactionFn)\n      \n      const endTime = Date.now()\n      const executionTime = endTime - startTime\n      \n      expect(executionTime).toBeLessThan(2000) // 事务应该在2秒内完成\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理数据库连接错误', async () => {\n      const error = new Error('数据库连接失败')\n      mockPrismaInstance.$connect.mockRejectedValue(error)\n      \n      await expect(dbManager.initialize()).rejects.toThrow('数据库连接失败')\n      expect(mockLogger.error).toHaveBeenCalledWith('数据库初始化失败:', error)\n    })\n\n    it('应该处理查询超时', async () => {\n      const timeoutError = new Error('查询超时')\n      const queryFn = jest.fn().mockRejectedValue(timeoutError)\n      \n      await expect(dbManager.executeQuery(queryFn)).rejects.toThrow('查询超时')\n      expect(mockLogger.error).toHaveBeenCalledWith('查询执行失败:', timeoutError)\n    })\n  })\n\n  describe('内存管理', () => {\n    it('应该正确管理查询指标内存', async () => {\n      // 模拟大量查询以测试内存管理\n      const promises = Array.from({ length: 1500 }, async (_, i) => {\n        const queryFn = jest.fn().mockResolvedValue({ id: i.toString() })\n        return executeQuery(queryFn)\n      })\n\n      await Promise.all(promises)\n\n      // 验证查询指标不会无限增长\n      const analytics = dbManager.getQueryAnalytics()\n      expect(analytics).toBeDefined()\n    })\n  })\n})"],"names":["jest","mock","global","fetch","fn","mockPrismaInstance","$connect","$disconnect","$transaction","$queryRaw","$executeRaw","user","findMany","create","update","delete","post","mockLogger","info","error","warn","debug","PrismaClient","mockImplementation","Logger","executeQuery","queryFn","describe","dbManager","beforeEach","clearAllMocks","EnhancedDatabaseManager","instance","getInstance","afterEach","disconnect","it","instance1","instance2","expect","toBe","mockResolvedValue","undefined","initialize","toHaveBeenCalled","toHaveBeenCalledWith","Error","mockRejectedValue","rejects","toThrow","mockResult","id","name","transactionFn","result","executeTransaction","toEqual","health","healthCheck","status","timestamp","toBeDefined","mockData","operations","Promise","all","map","batchCreate","mockUpdates","count","batchUpdate","mockIds","batchDelete","analytics","getQueryAnalytics","totalQueries","averageExecutionTime","slowQueries","resetQueryAnalytics","toHaveLength","poolStatus","getConnectionPoolStatus","activeConnections","idleConnections","totalConnections","key","value","data","setCache","cachedValue","getCache","clearCache","toBeNull","clearAllCache","prismaClient","getPrismaClient","startTime","Date","now","endTime","executionTime","toBeLessThan","timeoutError","promises","Array","from","length","_","i","toString"],"mappings":"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"}