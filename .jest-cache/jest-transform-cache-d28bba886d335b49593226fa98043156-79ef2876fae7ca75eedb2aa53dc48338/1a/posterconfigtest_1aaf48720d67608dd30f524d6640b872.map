{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\database\\poster-config.test.ts"],"sourcesContent":["/**\n * 海报配置数据库操作测试\n */\n\nimport { PrismaClient } from '@prisma/client'\n\n// Mock Prisma Client\nconst mockPrismaInstance = {\n  posterStyle: {\n    findMany: jest.fn(),\n  },\n  posterTemplate: {\n    findMany: jest.fn(),\n    update: jest.fn(),\n  },\n  colorPalette: {\n    findMany: jest.fn(),\n  },\n  posterSize: {\n    findMany: jest.fn(),\n  },\n  posterGeneration: {\n    create: jest.fn(),\n    findMany: jest.fn(),\n  },\n  industryConfig: {\n    findUnique: jest.fn(),\n  },\n}\n\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => mockPrismaInstance),\n}))\n\n// Mock the poster-config module to use our mocked prisma\njest.mock('../../../lib/database/poster-config', () => {\n  const originalModule = jest.requireActual('../../../lib/database/poster-config')\n  return {\n    ...originalModule,\n    PosterConfigDB: {\n      getStyles: jest.fn(),\n      getSecurityTemplates: jest.fn(),\n      getColorPalettes: jest.fn(),\n      getPosterSizes: jest.fn(),\n      saveGenerationHistory: jest.fn(),\n      getUserHistory: jest.fn(),\n      updateTemplateUsage: jest.fn(),\n      getIndustryConfig: jest.fn(),\n    }\n  }\n})\n\nimport { PosterConfigDB } from '../../../lib/database/poster-config'\n\n// Mock console.error\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => {})\n\ndescribe('PosterConfigDB', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    mockConsoleError.mockClear()\n  })\n\n  describe('getStyles', () => {\n    it('应该成功获取海报风格', async () => {\n      const mockResult = [\n        {\n          id: '1',\n          name: 'Modern',\n          description: 'Modern style',\n          preview: 'preview.jpg',\n          category: 'business',\n          tags: ['modern', 'clean'],\n          industrySpecific: false,\n          parameters: { color: 'blue' },\n        },\n      ]\n\n      ;(PosterConfigDB.getStyles as jest.Mock).mockResolvedValue(mockResult)\n\n      const result = await PosterConfigDB.getStyles()\n\n      expect(PosterConfigDB.getStyles).toHaveBeenCalled()\n      expect(result).toEqual(mockResult)\n    })\n\n    it('应该处理获取风格失败的情况', async () => {\n      ;(PosterConfigDB.getStyles as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getStyles()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('getSecurityTemplates', () => {\n    it('应该成功获取安全模板', async () => {\n      const mockResult = [\n        {\n          id: '1',\n          name: 'Corporate',\n          description: 'Corporate template',\n          preview: 'preview.jpg',\n          category: 'business',\n          securityLevel: 'high',\n          complianceStandards: ['ISO27001'],\n          parameters: { encryption: true },\n        },\n      ]\n\n      ;(PosterConfigDB.getSecurityTemplates as jest.Mock).mockResolvedValue(mockResult)\n\n      const result = await PosterConfigDB.getSecurityTemplates()\n\n      expect(PosterConfigDB.getSecurityTemplates).toHaveBeenCalled()\n      expect(result).toEqual(mockResult)\n    })\n\n    it('应该处理获取安全模板失败的情况', async () => {\n      ;(PosterConfigDB.getSecurityTemplates as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getSecurityTemplates()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('getColorPalettes', () => {\n    it('应该成功获取配色方案', async () => {\n      const mockPalettes = [\n        {\n          id: '1',\n          name: 'Blue Palette',\n          colors: ['#0000FF', '#FFFFFF'],\n          description: 'Blue color scheme',\n          category: 'business',\n          industryRecommended: ['tech'],\n        },\n      ]\n\n      ;(PosterConfigDB.getColorPalettes as jest.Mock).mockResolvedValue(mockPalettes)\n\n      const result = await PosterConfigDB.getColorPalettes()\n\n      expect(PosterConfigDB.getColorPalettes).toHaveBeenCalled()\n      expect(result).toEqual(mockPalettes)\n    })\n\n    it('应该处理获取配色方案失败的情况', async () => {\n      ;(PosterConfigDB.getColorPalettes as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getColorPalettes()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('getPosterSizes', () => {\n    it('应该成功获取海报尺寸', async () => {\n      const mockSizes = [\n        {\n          id: '1',\n          name: 'A4',\n          dimensions: '210x297mm',\n          ratio: '1:1.414',\n          width: 210,\n          height: 297,\n          dpi: 300,\n          category: 'standard',\n          recommended: true,\n        },\n      ]\n\n      ;(PosterConfigDB.getPosterSizes as jest.Mock).mockResolvedValue(mockSizes)\n\n      const result = await PosterConfigDB.getPosterSizes()\n\n      expect(PosterConfigDB.getPosterSizes).toHaveBeenCalled()\n      expect(result).toEqual(mockSizes)\n    })\n\n    it('应该处理获取海报尺寸失败的情况', async () => {\n      ;(PosterConfigDB.getPosterSizes as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getPosterSizes()\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('saveGenerationHistory', () => {\n    it('应该成功保存生成历史', async () => {\n      const mockData = {\n        userId: 'user1',\n        prompt: 'Create a poster',\n        style: 'modern',\n        template: 'template1',\n        settings: { color: 'blue' },\n        imageUrl: 'image.jpg',\n        industry: 'tech',\n      }\n\n      const mockResult = { id: '1', ...mockData }\n      ;(PosterConfigDB.saveGenerationHistory as jest.Mock).mockResolvedValue(mockResult)\n\n      const result = await PosterConfigDB.saveGenerationHistory(mockData)\n\n      expect(PosterConfigDB.saveGenerationHistory).toHaveBeenCalledWith(mockData)\n      expect(result).toEqual(mockResult)\n    })\n\n    it('应该处理保存生成历史失败的情况', async () => {\n      const mockData = {\n        userId: 'user1',\n        prompt: 'Create a poster',\n        style: 'modern',\n        settings: { color: 'blue' },\n        imageUrl: 'image.jpg',\n      }\n\n      ;(PosterConfigDB.saveGenerationHistory as jest.Mock).mockResolvedValue(undefined)\n\n      const result = await PosterConfigDB.saveGenerationHistory(mockData)\n\n      expect(result).toBeUndefined()\n    })\n  })\n\n  describe('getUserHistory', () => {\n    it('应该成功获取用户历史', async () => {\n      const mockHistory = [\n        {\n          id: '1',\n          userId: 'user1',\n          prompt: 'Create a poster',\n          template: { name: 'Template 1' },\n        },\n      ]\n\n      ;(PosterConfigDB.getUserHistory as jest.Mock).mockResolvedValue(mockHistory)\n\n      const result = await PosterConfigDB.getUserHistory('user1', 10)\n\n      expect(PosterConfigDB.getUserHistory).toHaveBeenCalledWith('user1', 10)\n      expect(result).toEqual(mockHistory)\n    })\n\n    it('应该使用默认限制', async () => {\n      ;(PosterConfigDB.getUserHistory as jest.Mock).mockResolvedValue([])\n\n      await PosterConfigDB.getUserHistory('user1')\n\n      expect(PosterConfigDB.getUserHistory).toHaveBeenCalledWith('user1')\n    })\n\n    it('应该处理获取用户历史失败的情况', async () => {\n      ;(PosterConfigDB.getUserHistory as jest.Mock).mockResolvedValue([])\n\n      const result = await PosterConfigDB.getUserHistory('user1')\n\n      expect(result).toEqual([])\n    })\n  })\n\n  describe('updateTemplateUsage', () => {\n    it('应该成功更新模板使用次数', async () => {\n      ;(PosterConfigDB.updateTemplateUsage as jest.Mock).mockResolvedValue(undefined)\n\n      await PosterConfigDB.updateTemplateUsage('template1')\n\n      expect(PosterConfigDB.updateTemplateUsage).toHaveBeenCalledWith('template1')\n    })\n\n    it('应该处理更新模板使用次数失败的情况', async () => {\n      ;(PosterConfigDB.updateTemplateUsage as jest.Mock).mockResolvedValue(undefined)\n\n      await PosterConfigDB.updateTemplateUsage('template1')\n\n      expect(PosterConfigDB.updateTemplateUsage).toHaveBeenCalledWith('template1')\n    })\n  })\n\n  describe('getIndustryConfig', () => {\n    it('应该成功获取行业配置', async () => {\n      const mockConfig = {\n        id: '1',\n        industry: 'tech',\n        name: 'Technology',\n        description: 'Tech industry config',\n        recommendedStyles: [],\n        recommendedPalettes: [],\n        brandGuidelines: [],\n      }\n\n      ;(PosterConfigDB.getIndustryConfig as jest.Mock).mockResolvedValue(mockConfig)\n\n      const result = await PosterConfigDB.getIndustryConfig('tech')\n\n      expect(PosterConfigDB.getIndustryConfig).toHaveBeenCalledWith('tech')\n      expect(result).toEqual(mockConfig)\n    })\n\n    it('应该处理获取行业配置失败的情况', async () => {\n      ;(PosterConfigDB.getIndustryConfig as jest.Mock).mockResolvedValue(null)\n\n      const result = await PosterConfigDB.getIndustryConfig('tech')\n\n      expect(result).toBeNull()\n    })\n  })\n})"],"names":["jest","mock","PrismaClient","fn","mockImplementation","mockPrismaInstance","originalModule","requireActual","PosterConfigDB","getStyles","getSecurityTemplates","getColorPalettes","getPosterSizes","saveGenerationHistory","getUserHistory","updateTemplateUsage","getIndustryConfig","posterStyle","findMany","posterTemplate","update","colorPalette","posterSize","posterGeneration","create","industryConfig","findUnique","mockConsoleError","spyOn","console","describe","beforeEach","clearAllMocks","afterEach","mockClear","it","mockResult","id","name","description","preview","category","tags","industrySpecific","parameters","color","mockResolvedValue","result","expect","toHaveBeenCalled","toEqual","securityLevel","complianceStandards","encryption","mockPalettes","colors","industryRecommended","mockSizes","dimensions","ratio","width","height","dpi","recommended","mockData","userId","prompt","style","template","settings","imageUrl","industry","toHaveBeenCalledWith","undefined","toBeUndefined","mockHistory","mockConfig","recommendedStyles","recommendedPalettes","brandGuidelines","toBeNull"],"mappings":"AAAA;;CAEC;AA4BDA,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCC,cAAcF,KAAKG,EAAE,GAAGC,kBAAkB,CAAC,IAAMC;IACnD,CAAA;AAEA,yDAAyD;AACzDL,KAAKC,IAAI,CAAC,uCAAuC;IAC/C,MAAMK,iBAAiBN,KAAKO,aAAa,CAAC;IAC1C,OAAO;QACL,GAAGD,cAAc;QACjBE,gBAAgB;YACdC,WAAWT,KAAKG,EAAE;YAClBO,sBAAsBV,KAAKG,EAAE;YAC7BQ,kBAAkBX,KAAKG,EAAE;YACzBS,gBAAgBZ,KAAKG,EAAE;YACvBU,uBAAuBb,KAAKG,EAAE;YAC9BW,gBAAgBd,KAAKG,EAAE;YACvBY,qBAAqBf,KAAKG,EAAE;YAC5Ba,mBAAmBhB,KAAKG,EAAE;QAC5B;IACF;AACF;;;;8BAE+B;AA9C/B,qBAAqB;AACrB,MAAME,qBAAqB;IACzBY,aAAa;QACXC,UAAUlB,KAAKG,EAAE;IACnB;IACAgB,gBAAgB;QACdD,UAAUlB,KAAKG,EAAE;QACjBiB,QAAQpB,KAAKG,EAAE;IACjB;IACAkB,cAAc;QACZH,UAAUlB,KAAKG,EAAE;IACnB;IACAmB,YAAY;QACVJ,UAAUlB,KAAKG,EAAE;IACnB;IACAoB,kBAAkB;QAChBC,QAAQxB,KAAKG,EAAE;QACfe,UAAUlB,KAAKG,EAAE;IACnB;IACAsB,gBAAgB;QACdC,YAAY1B,KAAKG,EAAE;IACrB;AACF;AA0BA,qBAAqB;AACrB,MAAMwB,mBAAmB3B,KAAK4B,KAAK,CAACC,SAAS,SAASzB,kBAAkB,CAAC,KAAO;AAEhF0B,SAAS,kBAAkB;IACzBC,WAAW;QACT/B,KAAKgC,aAAa;IACpB;IAEAC,UAAU;QACRN,iBAAiBO,SAAS;IAC5B;IAEAJ,SAAS,aAAa;QACpBK,GAAG,cAAc;YACf,MAAMC,aAAa;gBACjB;oBACEC,IAAI;oBACJC,MAAM;oBACNC,aAAa;oBACbC,SAAS;oBACTC,UAAU;oBACVC,MAAM;wBAAC;wBAAU;qBAAQ;oBACzBC,kBAAkB;oBAClBC,YAAY;wBAAEC,OAAO;oBAAO;gBAC9B;aACD;YAECrC,4BAAc,CAACC,SAAS,CAAeqC,iBAAiB,CAACV;YAE3D,MAAMW,SAAS,MAAMvC,4BAAc,CAACC,SAAS;YAE7CuC,OAAOxC,4BAAc,CAACC,SAAS,EAAEwC,gBAAgB;YACjDD,OAAOD,QAAQG,OAAO,CAACd;QACzB;QAEAD,GAAG,iBAAiB;;YAChB3B,4BAAc,CAACC,SAAS,CAAeqC,iBAAiB,CAAC,EAAE;YAE7D,MAAMC,SAAS,MAAMvC,4BAAc,CAACC,SAAS;YAE7CuC,OAAOD,QAAQG,OAAO,CAAC,EAAE;QAC3B;IACF;IAEApB,SAAS,wBAAwB;QAC/BK,GAAG,cAAc;YACf,MAAMC,aAAa;gBACjB;oBACEC,IAAI;oBACJC,MAAM;oBACNC,aAAa;oBACbC,SAAS;oBACTC,UAAU;oBACVU,eAAe;oBACfC,qBAAqB;wBAAC;qBAAW;oBACjCR,YAAY;wBAAES,YAAY;oBAAK;gBACjC;aACD;YAEC7C,4BAAc,CAACE,oBAAoB,CAAeoC,iBAAiB,CAACV;YAEtE,MAAMW,SAAS,MAAMvC,4BAAc,CAACE,oBAAoB;YAExDsC,OAAOxC,4BAAc,CAACE,oBAAoB,EAAEuC,gBAAgB;YAC5DD,OAAOD,QAAQG,OAAO,CAACd;QACzB;QAEAD,GAAG,mBAAmB;;YAClB3B,4BAAc,CAACE,oBAAoB,CAAeoC,iBAAiB,CAAC,EAAE;YAExE,MAAMC,SAAS,MAAMvC,4BAAc,CAACE,oBAAoB;YAExDsC,OAAOD,QAAQG,OAAO,CAAC,EAAE;QAC3B;IACF;IAEApB,SAAS,oBAAoB;QAC3BK,GAAG,cAAc;YACf,MAAMmB,eAAe;gBACnB;oBACEjB,IAAI;oBACJC,MAAM;oBACNiB,QAAQ;wBAAC;wBAAW;qBAAU;oBAC9BhB,aAAa;oBACbE,UAAU;oBACVe,qBAAqB;wBAAC;qBAAO;gBAC/B;aACD;YAEChD,4BAAc,CAACG,gBAAgB,CAAemC,iBAAiB,CAACQ;YAElE,MAAMP,SAAS,MAAMvC,4BAAc,CAACG,gBAAgB;YAEpDqC,OAAOxC,4BAAc,CAACG,gBAAgB,EAAEsC,gBAAgB;YACxDD,OAAOD,QAAQG,OAAO,CAACI;QACzB;QAEAnB,GAAG,mBAAmB;;YAClB3B,4BAAc,CAACG,gBAAgB,CAAemC,iBAAiB,CAAC,EAAE;YAEpE,MAAMC,SAAS,MAAMvC,4BAAc,CAACG,gBAAgB;YAEpDqC,OAAOD,QAAQG,OAAO,CAAC,EAAE;QAC3B;IACF;IAEApB,SAAS,kBAAkB;QACzBK,GAAG,cAAc;YACf,MAAMsB,YAAY;gBAChB;oBACEpB,IAAI;oBACJC,MAAM;oBACNoB,YAAY;oBACZC,OAAO;oBACPC,OAAO;oBACPC,QAAQ;oBACRC,KAAK;oBACLrB,UAAU;oBACVsB,aAAa;gBACf;aACD;YAECvD,4BAAc,CAACI,cAAc,CAAekC,iBAAiB,CAACW;YAEhE,MAAMV,SAAS,MAAMvC,4BAAc,CAACI,cAAc;YAElDoC,OAAOxC,4BAAc,CAACI,cAAc,EAAEqC,gBAAgB;YACtDD,OAAOD,QAAQG,OAAO,CAACO;QACzB;QAEAtB,GAAG,mBAAmB;;YAClB3B,4BAAc,CAACI,cAAc,CAAekC,iBAAiB,CAAC,EAAE;YAElE,MAAMC,SAAS,MAAMvC,4BAAc,CAACI,cAAc;YAElDoC,OAAOD,QAAQG,OAAO,CAAC,EAAE;QAC3B;IACF;IAEApB,SAAS,yBAAyB;QAChCK,GAAG,cAAc;YACf,MAAM6B,WAAW;gBACfC,QAAQ;gBACRC,QAAQ;gBACRC,OAAO;gBACPC,UAAU;gBACVC,UAAU;oBAAExB,OAAO;gBAAO;gBAC1ByB,UAAU;gBACVC,UAAU;YACZ;YAEA,MAAMnC,aAAa;gBAAEC,IAAI;gBAAK,GAAG2B,QAAQ;YAAC;YACxCxD,4BAAc,CAACK,qBAAqB,CAAeiC,iBAAiB,CAACV;YAEvE,MAAMW,SAAS,MAAMvC,4BAAc,CAACK,qBAAqB,CAACmD;YAE1DhB,OAAOxC,4BAAc,CAACK,qBAAqB,EAAE2D,oBAAoB,CAACR;YAClEhB,OAAOD,QAAQG,OAAO,CAACd;QACzB;QAEAD,GAAG,mBAAmB;YACpB,MAAM6B,WAAW;gBACfC,QAAQ;gBACRC,QAAQ;gBACRC,OAAO;gBACPE,UAAU;oBAAExB,OAAO;gBAAO;gBAC1ByB,UAAU;YACZ;YAEE9D,4BAAc,CAACK,qBAAqB,CAAeiC,iBAAiB,CAAC2B;YAEvE,MAAM1B,SAAS,MAAMvC,4BAAc,CAACK,qBAAqB,CAACmD;YAE1DhB,OAAOD,QAAQ2B,aAAa;QAC9B;IACF;IAEA5C,SAAS,kBAAkB;QACzBK,GAAG,cAAc;YACf,MAAMwC,cAAc;gBAClB;oBACEtC,IAAI;oBACJ4B,QAAQ;oBACRC,QAAQ;oBACRE,UAAU;wBAAE9B,MAAM;oBAAa;gBACjC;aACD;YAEC9B,4BAAc,CAACM,cAAc,CAAegC,iBAAiB,CAAC6B;YAEhE,MAAM5B,SAAS,MAAMvC,4BAAc,CAACM,cAAc,CAAC,SAAS;YAE5DkC,OAAOxC,4BAAc,CAACM,cAAc,EAAE0D,oBAAoB,CAAC,SAAS;YACpExB,OAAOD,QAAQG,OAAO,CAACyB;QACzB;QAEAxC,GAAG,YAAY;;YACX3B,4BAAc,CAACM,cAAc,CAAegC,iBAAiB,CAAC,EAAE;YAElE,MAAMtC,4BAAc,CAACM,cAAc,CAAC;YAEpCkC,OAAOxC,4BAAc,CAACM,cAAc,EAAE0D,oBAAoB,CAAC;QAC7D;QAEArC,GAAG,mBAAmB;;YAClB3B,4BAAc,CAACM,cAAc,CAAegC,iBAAiB,CAAC,EAAE;YAElE,MAAMC,SAAS,MAAMvC,4BAAc,CAACM,cAAc,CAAC;YAEnDkC,OAAOD,QAAQG,OAAO,CAAC,EAAE;QAC3B;IACF;IAEApB,SAAS,uBAAuB;QAC9BK,GAAG,gBAAgB;;YACf3B,4BAAc,CAACO,mBAAmB,CAAe+B,iBAAiB,CAAC2B;YAErE,MAAMjE,4BAAc,CAACO,mBAAmB,CAAC;YAEzCiC,OAAOxC,4BAAc,CAACO,mBAAmB,EAAEyD,oBAAoB,CAAC;QAClE;QAEArC,GAAG,qBAAqB;;YACpB3B,4BAAc,CAACO,mBAAmB,CAAe+B,iBAAiB,CAAC2B;YAErE,MAAMjE,4BAAc,CAACO,mBAAmB,CAAC;YAEzCiC,OAAOxC,4BAAc,CAACO,mBAAmB,EAAEyD,oBAAoB,CAAC;QAClE;IACF;IAEA1C,SAAS,qBAAqB;QAC5BK,GAAG,cAAc;YACf,MAAMyC,aAAa;gBACjBvC,IAAI;gBACJkC,UAAU;gBACVjC,MAAM;gBACNC,aAAa;gBACbsC,mBAAmB,EAAE;gBACrBC,qBAAqB,EAAE;gBACvBC,iBAAiB,EAAE;YACrB;YAEEvE,4BAAc,CAACQ,iBAAiB,CAAe8B,iBAAiB,CAAC8B;YAEnE,MAAM7B,SAAS,MAAMvC,4BAAc,CAACQ,iBAAiB,CAAC;YAEtDgC,OAAOxC,4BAAc,CAACQ,iBAAiB,EAAEwD,oBAAoB,CAAC;YAC9DxB,OAAOD,QAAQG,OAAO,CAAC0B;QACzB;QAEAzC,GAAG,mBAAmB;;YAClB3B,4BAAc,CAACQ,iBAAiB,CAAe8B,iBAAiB,CAAC;YAEnE,MAAMC,SAAS,MAAMvC,4BAAc,CAACQ,iBAAiB,CAAC;YAEtDgC,OAAOD,QAAQiC,QAAQ;QACzB;IACF;AACF"}