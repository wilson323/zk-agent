314e8301be7919d27033dd810289fde8
// @ts-nocheck
/**
 * @file lib/auth/enhanced-password-security.ts
 * @description 增强密码安全模块 - 解决核查报告中的安全问题
 * @author B团队安全架构师
 * @lastUpdate 2024-12-19
 * @security 生产级密码安全实现
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EnhancedPasswordSecurity: function() {
        return EnhancedPasswordSecurity;
    },
    PasswordStrength: function() {
        return PasswordStrength;
    },
    enhancedPasswordSecurity: function() {
        return enhancedPasswordSecurity;
    },
    generateSecurePassword: function() {
        return generateSecurePassword;
    },
    hashPassword: function() {
        return hashPassword;
    },
    isAccountLocked: function() {
        return isAccountLocked;
    },
    recordLoginAttempt: function() {
        return recordLoginAttempt;
    },
    validatePassword: function() {
        return validatePassword;
    },
    verifyPassword: function() {
        return verifyPassword;
    }
});
const _bcryptjs = /*#__PURE__*/ _interop_require_default(require("bcryptjs"));
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
const _logger = require("../utils/logger");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const logger = new _logger.Logger('PasswordSecurity');
// 默认安全配置
const DEFAULT_CONFIG = {
    saltRounds: 12,
    minLength: 8,
    maxLength: 128,
    requireUppercase: true,
    requireLowercase: true,
    requireNumbers: true,
    requireSpecialChars: true,
    maxAttempts: 5,
    lockoutDuration: 15 * 60 * 1000,
    passwordHistory: 5
};
var PasswordStrength = /*#__PURE__*/ function(PasswordStrength) {
    PasswordStrength[PasswordStrength["VERY_WEAK"] = 0] = "VERY_WEAK";
    PasswordStrength[PasswordStrength["WEAK"] = 1] = "WEAK";
    PasswordStrength[PasswordStrength["FAIR"] = 2] = "FAIR";
    PasswordStrength[PasswordStrength["GOOD"] = 3] = "GOOD";
    PasswordStrength[PasswordStrength["STRONG"] = 4] = "STRONG";
    PasswordStrength[PasswordStrength["VERY_STRONG"] = 5] = "VERY_STRONG";
    return PasswordStrength;
}({});
class EnhancedPasswordSecurity {
    constructor(config){
        this.loginAttempts = new Map();
        this.lockedAccounts = new Map();
        this.commonPasswords = new Set();
        this.config = {
            ...DEFAULT_CONFIG,
            ...config
        };
        this.loadCommonPasswords();
        this.startCleanupProcess();
    }
    static getInstance(config) {
        if (!EnhancedPasswordSecurity.instance) {
            EnhancedPasswordSecurity.instance = new EnhancedPasswordSecurity(config);
        }
        return EnhancedPasswordSecurity.instance;
    }
    /**
   * 加载常见密码列表
   */ loadCommonPasswords() {
        const commonPasswords = [
            'password',
            '123456',
            'password123',
            'admin',
            'qwerty',
            'letmein',
            'welcome',
            'monkey',
            '1234567890',
            'abc123',
            'password1',
            '123456789',
            'welcome123',
            'admin123',
            'root',
            'toor',
            'pass',
            'test',
            'guest',
            'demo',
            'user',
            'login',
            'changeme',
            'secret',
            'default'
        ];
        commonPasswords.forEach((pwd)=>this.commonPasswords.add(pwd.toLowerCase()));
        logger.info('Common passwords loaded', {
            count: this.commonPasswords.size
        });
    }
    /**
   * 验证密码强度
   */ validatePassword(password, userInfo) {
        const errors = [];
        const warnings = [];
        const suggestions = [];
        let score = 0;
        // 基础长度检查
        if (password.length < this.config.minLength) {
            errors.push(`密码长度至少需要${this.config.minLength}位`);
        } else if (password.length >= this.config.minLength) {
            score += 1;
        }
        if (password.length > this.config.maxLength) {
            errors.push(`密码长度不能超过${this.config.maxLength}位`);
        }
        // 字符类型检查
        const hasLowercase = /[a-z]/.test(password);
        const hasUppercase = /[A-Z]/.test(password);
        const hasNumbers = /\d/.test(password);
        const hasSpecialChars = /[!@#$%^&*(),.?":{}|<>]/.test(password);
        if (this.config.requireLowercase && !hasLowercase) {
            errors.push('密码必须包含小写字母');
        } else if (hasLowercase) {
            score += 1;
        }
        if (this.config.requireUppercase && !hasUppercase) {
            errors.push('密码必须包含大写字母');
        } else if (hasUppercase) {
            score += 1;
        }
        if (this.config.requireNumbers && !hasNumbers) {
            errors.push('密码必须包含数字');
        } else if (hasNumbers) {
            score += 1;
        }
        if (this.config.requireSpecialChars && !hasSpecialChars) {
            errors.push('密码必须包含特殊字符');
        } else if (hasSpecialChars) {
            score += 1;
        }
        // 常见密码检查
        if (this.commonPasswords.has(password.toLowerCase())) {
            errors.push('不能使用常见密码');
            score = Math.max(0, score - 2);
        }
        // 个人信息检查
        if (userInfo) {
            const personalInfo = [
                userInfo.email?.split('@')[0],
                userInfo.name,
                userInfo.username
            ].filter(Boolean);
            for (const info of personalInfo){
                if (info && password.toLowerCase().includes(info.toLowerCase())) {
                    warnings.push('密码不应包含个人信息');
                    score = Math.max(0, score - 1);
                    break;
                }
            }
        }
        // 重复字符检查
        const repeatedChars = /(.)\1{2,}/.test(password);
        if (repeatedChars) {
            warnings.push('避免使用重复字符');
            score = Math.max(0, score - 1);
        }
        // 连续字符检查
        const sequentialChars = this.hasSequentialChars(password);
        if (sequentialChars) {
            warnings.push('避免使用连续字符');
            score = Math.max(0, score - 1);
        }
        // 长度加分
        if (password.length >= 12) score += 1;
        if (password.length >= 16) score += 1;
        // 复杂度加分
        const uniqueChars = new Set(password).size;
        if (uniqueChars >= password.length * 0.7) score += 1;
        // 生成建议
        if (score < 3) {
            suggestions.push('使用更长的密码（12位以上）');
            suggestions.push('混合使用大小写字母、数字和特殊字符');
            suggestions.push('避免使用个人信息和常见密码');
        }
        const strength = this.calculateStrength(score);
        return {
            isValid: errors.length === 0,
            strength,
            score,
            errors,
            warnings,
            suggestions
        };
    }
    /**
   * 安全地哈希密码
   */ async hashPassword(password) {
        try {
            const salt = await _bcryptjs.default.genSalt(this.config.saltRounds);
            const hash = await _bcryptjs.default.hash(password, salt);
            logger.info('Password hashed successfully', {
                saltRounds: this.config.saltRounds
            });
            return hash;
        } catch (error) {
            logger.error('Password hashing failed', {
                error: error.message
            });
            throw new Error('密码加密失败');
        }
    }
    /**
   * 验证密码
   */ async verifyPassword(password, hash) {
        try {
            const isValid = await _bcryptjs.default.compare(password, hash);
            logger.debug('Password verification completed', {
                success: isValid
            });
            return isValid;
        } catch (error) {
            logger.error('Password verification failed', {
                error: error.message
            });
            return false;
        }
    }
    /**
   * 记录登录尝试
   */ recordLoginAttempt(userId, ip, success, userAgent) {
        const attempt = {
            userId,
            ip,
            timestamp: Date.now(),
            success,
            userAgent
        };
        const key = `${userId}:${ip}`;
        const attempts = this.loginAttempts.get(key) || [];
        attempts.push(attempt);
        // 只保留最近的尝试记录
        const recentAttempts = attempts.filter((a)=>Date.now() - a.timestamp < this.config.lockoutDuration * 2);
        this.loginAttempts.set(key, recentAttempts);
        // 检查是否需要锁定账户
        if (!success) {
            this.checkAndLockAccount(userId, ip);
        }
        logger.info('Login attempt recorded', {
            userId,
            ip,
            success,
            totalAttempts: recentAttempts.length
        });
    }
    /**
   * 检查账户是否被锁定
   */ isAccountLocked(userId, ip) {
        const key = `${userId}:${ip}`;
        const lockTime = this.lockedAccounts.get(key);
        if (!lockTime) return false;
        if (Date.now() - lockTime > this.config.lockoutDuration) {
            this.lockedAccounts.delete(key);
            return false;
        }
        return true;
    }
    /**
   * 获取账户锁定剩余时间
   */ getLockoutTimeRemaining(userId, ip) {
        const key = `${userId}:${ip}`;
        const lockTime = this.lockedAccounts.get(key);
        if (!lockTime) return 0;
        const remaining = this.config.lockoutDuration - (Date.now() - lockTime);
        return Math.max(0, remaining);
    }
    /**
   * 手动解锁账户
   */ unlockAccount(userId, ip) {
        const key = `${userId}:${ip}`;
        this.lockedAccounts.delete(key);
        this.loginAttempts.delete(key);
        logger.info('Account manually unlocked', {
            userId,
            ip
        });
    }
    /**
   * 生成安全的随机密码
   */ generateSecurePassword(length = 16) {
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';
        const allChars = lowercase + uppercase + numbers + symbols;
        let password = '';
        // 确保至少包含每种字符类型
        password += this.getRandomChar(lowercase);
        password += this.getRandomChar(uppercase);
        password += this.getRandomChar(numbers);
        password += this.getRandomChar(symbols);
        // 填充剩余长度
        for(let i = 4; i < length; i++){
            password += this.getRandomChar(allChars);
        }
        // 打乱字符顺序
        return password.split('').sort(()=>Math.random() - 0.5).join('');
    }
    /**
   * 检查密码是否在历史记录中
   */ async isPasswordInHistory(newPasswordHash, passwordHistory) {
        for (const oldHash of passwordHistory){
            // 注意：这里不能直接比较哈希值，因为每次哈希都会产生不同的结果
            // 实际实现中需要存储原始密码的哈希或使用其他方法
            // 这里仅作为示例
            if (newPasswordHash === oldHash) {
                return true;
            }
        }
        return false;
    }
    /**
   * 私有方法：检查连续字符
   */ hasSequentialChars(password) {
        const sequences = [
            'abcdefghijklmnopqrstuvwxyz',
            '0123456789',
            'qwertyuiopasdfghjklzxcvbnm'
        ];
        for (const seq of sequences){
            for(let i = 0; i <= seq.length - 3; i++){
                const subseq = seq.substring(i, i + 3);
                if (password.toLowerCase().includes(subseq)) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
   * 私有方法：计算密码强度
   */ calculateStrength(score) {
        if (score <= 1) return 0;
        if (score <= 2) return 1;
        if (score <= 3) return 2;
        if (score <= 4) return 3;
        if (score <= 5) return 4;
        return 5;
    }
    /**
   * 私有方法：检查并锁定账户
   */ checkAndLockAccount(userId, ip) {
        const key = `${userId}:${ip}`;
        const attempts = this.loginAttempts.get(key) || [];
        const recentFailedAttempts = attempts.filter((a)=>!a.success && Date.now() - a.timestamp < this.config.lockoutDuration);
        if (recentFailedAttempts.length >= this.config.maxAttempts) {
            this.lockedAccounts.set(key, Date.now());
            logger.warn('Account locked due to failed attempts', {
                userId,
                ip,
                attempts: recentFailedAttempts.length,
                lockoutDuration: this.config.lockoutDuration
            });
        }
    }
    /**
   * 私有方法：获取随机字符
   */ getRandomChar(chars) {
        return chars[_crypto.default.randomInt(0, chars.length)];
    }
    /**
   * 私有方法：启动清理进程
   */ startCleanupProcess() {
        setInterval(()=>{
            this.cleanupExpiredData();
        }, 60000); // 每分钟清理一次
        logger.info('Password security cleanup process started');
    }
    /**
   * 私有方法：清理过期数据
   */ cleanupExpiredData() {
        const now = Date.now();
        let cleanedAttempts = 0;
        let cleanedLocks = 0;
        // 清理过期的登录尝试记录
        for (const [key, attempts] of this.loginAttempts.entries()){
            const validAttempts = attempts.filter((a)=>now - a.timestamp < this.config.lockoutDuration * 2);
            if (validAttempts.length === 0) {
                this.loginAttempts.delete(key);
                cleanedAttempts++;
            } else if (validAttempts.length < attempts.length) {
                this.loginAttempts.set(key, validAttempts);
            }
        }
        // 清理过期的账户锁定
        for (const [key, lockTime] of this.lockedAccounts.entries()){
            if (now - lockTime > this.config.lockoutDuration) {
                this.lockedAccounts.delete(key);
                cleanedLocks++;
            }
        }
        if (cleanedAttempts > 0 || cleanedLocks > 0) {
            logger.debug('Expired security data cleaned', {
                cleanedAttempts,
                cleanedLocks
            });
        }
    }
    /**
   * 获取安全统计信息
   */ getSecurityStats() {
        return {
            totalAttempts: Array.from(this.loginAttempts.values()).reduce((sum, attempts)=>sum + attempts.length, 0),
            lockedAccounts: this.lockedAccounts.size,
            config: {
                ...this.config
            }
        };
    }
}
const enhancedPasswordSecurity = EnhancedPasswordSecurity.getInstance();
const validatePassword = enhancedPasswordSecurity.validatePassword.bind(enhancedPasswordSecurity);
const hashPassword = enhancedPasswordSecurity.hashPassword.bind(enhancedPasswordSecurity);
const verifyPassword = enhancedPasswordSecurity.verifyPassword.bind(enhancedPasswordSecurity);
const generateSecurePassword = enhancedPasswordSecurity.generateSecurePassword.bind(enhancedPasswordSecurity);
const recordLoginAttempt = enhancedPasswordSecurity.recordLoginAttempt.bind(enhancedPasswordSecurity);
const isAccountLocked = enhancedPasswordSecurity.isAccountLocked.bind(enhancedPasswordSecurity);

//# sourceMappingURL=data:application/json;base64,