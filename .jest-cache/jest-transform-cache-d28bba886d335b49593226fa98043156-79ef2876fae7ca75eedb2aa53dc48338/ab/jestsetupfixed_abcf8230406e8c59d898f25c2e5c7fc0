a7219538b36129e90c73f781a19b8f51
/**
 * @file jest.setup.fixed.js
 * @description Fixed Jest setup - Resolves infinite loop and security issues
 * @author Jest Fix Team
 * @lastUpdate 2024-12-19
 */ // Load test environment variables from .env.test file
"use strict";
// Next.js Router Mock
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            }),
        useSearchParams: ()=>({
                get: jest.fn(),
                getAll: jest.fn(),
                has: jest.fn(),
                keys: jest.fn(),
                values: jest.fn(),
                entries: jest.fn(),
                forEach: jest.fn(),
                toString: jest.fn()
            }),
        usePathname: ()=>'/test-path'
    }));
// Prisma Mock
jest.mock('@prisma/client', ()=>({
        PrismaClient: jest.fn().mockImplementation(()=>({
                $connect: jest.fn(),
                $disconnect: jest.fn(),
                $transaction: jest.fn(),
                $queryRaw: jest.fn(),
                $executeRaw: jest.fn(),
                user: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    findFirst: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn(),
                    count: jest.fn()
                },
                agentConfig: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn()
                },
                chatSession: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn()
                },
                chatMessage: {
                    findMany: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn()
                },
                posterTask: {
                    findMany: jest.fn(),
                    findUnique: jest.fn(),
                    create: jest.fn(),
                    update: jest.fn(),
                    delete: jest.fn()
                },
                errorLog: {
                    create: jest.fn(),
                    findMany: jest.fn()
                },
                usageStats: {
                    create: jest.fn(),
                    findMany: jest.fn()
                }
            })),
        Prisma: {
            TransactionIsolationLevel: {
                ReadCommitted: 'ReadCommitted',
                ReadUncommitted: 'ReadUncommitted',
                RepeatableRead: 'RepeatableRead',
                Serializable: 'Serializable'
            }
        }
    }));
// File System Mock
jest.mock('fs/promises', ()=>({
        readFile: jest.fn(),
        writeFile: jest.fn(),
        unlink: jest.fn(),
        mkdir: jest.fn(),
        readdir: jest.fn(),
        stat: jest.fn(),
        access: jest.fn()
    }));
require('dotenv').config({
    path: '.env.test'
});
// Import required modules with error handling
require('@testing-library/jest-dom');
const { validateTestEnvironment, createTestConfig, setTestEnvironment } = require('./__tests__/config/test-env-validator');
// Import Jest configuration validator
const { validateJestConfig, validateTestEnvironment: validateJestTestEnv, createSafePolyfills, applySafePolyfills } = require('./__tests__/config/jest-config-validator');
// Apply safe polyfills with enhanced error handling
const safePolyfills = createSafePolyfills();
applySafePolyfills(safePolyfills);
// Validate and setup test environment
const envValidation = validateTestEnvironment();
if (!envValidation.isValid) {
    console.error('Environment validation failed:');
    envValidation.errors.forEach((error)=>console.error(`  - ${error}`));
    // Use fallback configuration
    console.warn('Using fallback test configuration...');
    const fallbackConfig = createTestConfig();
    setTestEnvironment(fallbackConfig, false);
}
if (envValidation.warnings.length > 0) {
    console.warn('Environment validation warnings:');
    envValidation.warnings.forEach((warning)=>console.warn(`  - ${warning}`));
}
// Validate Jest configuration
validateJestConfig();
validateJestTestEnv();
// Ensure test environment
process.env.NODE_ENV = 'test';
// Fix EventEmitter memory leak warnings
require('events').EventEmitter.defaultMaxListeners = 20;
// Mock process.exit to prevent Jest from exiting
const originalExit = process.exit;
process.exit = jest.fn((code)=>{
    if (process.env.NODE_ENV === 'test') {
        console.warn(`process.exit(${code}) called in test environment - mocked`);
        return;
    }
    return originalExit(code);
});
// Global Mock setup
global.fetch = jest.fn();
global.console = {
    ...console,
    // 在测试中静默某些日志
    log: jest.fn(),
    debug: jest.fn(),
    info: jest.fn(),
    warn: console.warn,
    error: console.error
};
// Crypto Mock
Object.defineProperty(global, 'crypto', {
    value: {
        randomUUID: ()=>'test-uuid-' + Math.random().toString(36).substr(2, 9),
        getRandomValues: (arr)=>{
            for(let i = 0; i < arr.length; i++){
                arr[i] = Math.floor(Math.random() * 256);
            }
            return arr;
        }
    }
});
// MSW Server Setup - 移除MSW依赖，使用简化版本
// beforeAll(() => {
//   server.listen({
//     onUnhandledRequest: 'error',
//   });
// });
afterEach(()=>{
    // server.resetHandlers(); // 移除MSW依赖
    jest.clearAllMocks();
    jest.clearAllTimers();
    jest.useRealTimers();
});
// afterAll(() => {
//   server.close();
// });
// 测试工具函数
global.testUtils = {
    // 创建Mock用户
    createMockUser: (overrides = {})=>({
            id: 'test-user-id',
            email: 'test@example.com',
            username: 'testuser',
            role: 'USER',
            status: 'ACTIVE',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            ...overrides
        }),
    // 创建Mock智能体
    createMockAgent: (overrides = {})=>({
            id: 'test-agent-id',
            name: 'Test Agent',
            description: 'Test agent description',
            systemPrompt: 'You are a test agent',
            model: 'gpt-3.5-turbo',
            temperature: 0.7,
            maxTokens: 1000,
            isPublic: true,
            createdBy: 'test-user-id',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            ...overrides
        }),
    // 创建Mock聊天会话
    createMockChatSession: (overrides = {})=>({
            id: 'test-session-id',
            title: 'Test Chat Session',
            userId: 'test-user-id',
            agentId: 'test-agent-id',
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            ...overrides
        }),
    // 创建Mock API响应
    createMockApiResponse: (data, status = 200)=>({
            ok: status >= 200 && status < 300,
            status,
            statusText: status === 200 ? 'OK' : 'Error',
            json: jest.fn().mockResolvedValue(data),
            text: jest.fn().mockResolvedValue(JSON.stringify(data)),
            headers: new Map()
        }),
    // 等待异步操作
    waitFor: (ms = 0)=>new Promise((resolve)=>setTimeout(resolve, ms)),
    // 模拟网络延迟
    simulateNetworkDelay: (min = 100, max = 500)=>{
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        return new Promise((resolve)=>setTimeout(resolve, delay));
    },
    createMockSecurityEvent: ()=>({
            id: 'test-event-123',
            type: 'login_success',
            severity: 'low',
            timestamp: new Date(),
            ip: '192.168.1.100',
            userId: 'test-user-123',
            details: {},
            riskScore: 1,
            resolved: false
        }),
    sleep: (ms)=>new Promise((resolve)=>setTimeout(resolve, ms))
};
// 性能测试工具
global.performanceUtils = {
    // 测量函数执行时间
    measureTime: async (fn)=>{
        const start = performance.now();
        const result = await fn();
        const end = performance.now();
        return {
            result,
            duration: end - start
        };
    },
    // 内存使用测试
    measureMemory: ()=>{
        if (performance.memory) {
            return {
                used: performance.memory.usedJSHeapSize,
                total: performance.memory.totalJSHeapSize,
                limit: performance.memory.jsHeapSizeLimit
            };
        }
        return null;
    }
};
// 错误处理增强
const originalConsoleError = console.error;
console.error = (...args)=>{
    // 忽略某些预期的测试错误
    const message = args[0];
    if (typeof message === 'string' && (message.includes('Warning: ReactDOM.render is deprecated') || message.includes('Warning: componentWillReceiveProps has been renamed'))) {
        return;
    }
    originalConsoleError.apply(console, args);
};
// 全局测试配置
jest.setTimeout(30000); // 30秒超时
// 移除导致死循环的模块强制加载
// 注释：原来的 global.beforeAll 中的 require 语句会导致循环引用
// 这些模块应该在需要时才加载，而不是在全局设置中强制加载
console.log('Fixed Jest setup completed - 死循环问题已解决');

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6XFx6ay1hZ2VudFxcamVzdC5zZXR1cC5maXhlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIGplc3Quc2V0dXAuZml4ZWQuanNcbiAqIEBkZXNjcmlwdGlvbiBGaXhlZCBKZXN0IHNldHVwIC0gUmVzb2x2ZXMgaW5maW5pdGUgbG9vcCBhbmQgc2VjdXJpdHkgaXNzdWVzXG4gKiBAYXV0aG9yIEplc3QgRml4IFRlYW1cbiAqIEBsYXN0VXBkYXRlIDIwMjQtMTItMTlcbiAqL1xuXG4vLyBMb2FkIHRlc3QgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gLmVudi50ZXN0IGZpbGVcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZyh7IHBhdGg6ICcuZW52LnRlc3QnIH0pO1xuXG4vLyBJbXBvcnQgcmVxdWlyZWQgbW9kdWxlcyB3aXRoIGVycm9yIGhhbmRsaW5nXG5yZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tJyk7XG5jb25zdCB7IHZhbGlkYXRlVGVzdEVudmlyb25tZW50LCBjcmVhdGVUZXN0Q29uZmlnLCBzZXRUZXN0RW52aXJvbm1lbnQgfSA9IHJlcXVpcmUoJy4vX190ZXN0c19fL2NvbmZpZy90ZXN0LWVudi12YWxpZGF0b3InKTtcblxuLy8gSW1wb3J0IEplc3QgY29uZmlndXJhdGlvbiB2YWxpZGF0b3JcbmNvbnN0IHsgXG4gIHZhbGlkYXRlSmVzdENvbmZpZywgXG4gIHZhbGlkYXRlVGVzdEVudmlyb25tZW50OiB2YWxpZGF0ZUplc3RUZXN0RW52LFxuICBjcmVhdGVTYWZlUG9seWZpbGxzLFxuICBhcHBseVNhZmVQb2x5ZmlsbHMgXG59ID0gcmVxdWlyZSgnLi9fX3Rlc3RzX18vY29uZmlnL2plc3QtY29uZmlnLXZhbGlkYXRvcicpO1xuXG4vLyBBcHBseSBzYWZlIHBvbHlmaWxscyB3aXRoIGVuaGFuY2VkIGVycm9yIGhhbmRsaW5nXG5jb25zdCBzYWZlUG9seWZpbGxzID0gY3JlYXRlU2FmZVBvbHlmaWxscygpO1xuYXBwbHlTYWZlUG9seWZpbGxzKHNhZmVQb2x5ZmlsbHMpO1xuXG4vLyBWYWxpZGF0ZSBhbmQgc2V0dXAgdGVzdCBlbnZpcm9ubWVudFxuY29uc3QgZW52VmFsaWRhdGlvbiA9IHZhbGlkYXRlVGVzdEVudmlyb25tZW50KCk7XG5pZiAoIWVudlZhbGlkYXRpb24uaXNWYWxpZCkge1xuICBjb25zb2xlLmVycm9yKCdFbnZpcm9ubWVudCB2YWxpZGF0aW9uIGZhaWxlZDonKTtcbiAgZW52VmFsaWRhdGlvbi5lcnJvcnMuZm9yRWFjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGAgIC0gJHtlcnJvcn1gKSk7XG4gIFxuICAvLyBVc2UgZmFsbGJhY2sgY29uZmlndXJhdGlvblxuICBjb25zb2xlLndhcm4oJ1VzaW5nIGZhbGxiYWNrIHRlc3QgY29uZmlndXJhdGlvbi4uLicpO1xuICBjb25zdCBmYWxsYmFja0NvbmZpZyA9IGNyZWF0ZVRlc3RDb25maWcoKTtcbiAgc2V0VGVzdEVudmlyb25tZW50KGZhbGxiYWNrQ29uZmlnLCBmYWxzZSk7XG59XG5cbmlmIChlbnZWYWxpZGF0aW9uLndhcm5pbmdzLmxlbmd0aCA+IDApIHtcbiAgY29uc29sZS53YXJuKCdFbnZpcm9ubWVudCB2YWxpZGF0aW9uIHdhcm5pbmdzOicpO1xuICBlbnZWYWxpZGF0aW9uLndhcm5pbmdzLmZvckVhY2god2FybmluZyA9PiBjb25zb2xlLndhcm4oYCAgLSAke3dhcm5pbmd9YCkpO1xufVxuXG4vLyBWYWxpZGF0ZSBKZXN0IGNvbmZpZ3VyYXRpb25cbnZhbGlkYXRlSmVzdENvbmZpZygpO1xudmFsaWRhdGVKZXN0VGVzdEVudigpO1xuXG4vLyBFbnN1cmUgdGVzdCBlbnZpcm9ubWVudFxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG5cbi8vIEZpeCBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgd2FybmluZ3NcbnJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMjA7XG5cbi8vIE1vY2sgcHJvY2Vzcy5leGl0IHRvIHByZXZlbnQgSmVzdCBmcm9tIGV4aXRpbmdcbmNvbnN0IG9yaWdpbmFsRXhpdCA9IHByb2Nlc3MuZXhpdDtcbnByb2Nlc3MuZXhpdCA9IGplc3QuZm4oKGNvZGUpID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcpIHtcbiAgICBjb25zb2xlLndhcm4oYHByb2Nlc3MuZXhpdCgke2NvZGV9KSBjYWxsZWQgaW4gdGVzdCBlbnZpcm9ubWVudCAtIG1vY2tlZGApO1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gb3JpZ2luYWxFeGl0KGNvZGUpO1xufSk7XG5cbi8vIEdsb2JhbCBNb2NrIHNldHVwXG5nbG9iYWwuZmV0Y2ggPSBqZXN0LmZuKCk7XG5nbG9iYWwuY29uc29sZSA9IHtcbiAgLi4uY29uc29sZSxcbiAgLy8g5Zyo5rWL6K+V5Lit6Z2Z6buY5p+Q5Lqb5pel5b+XXG4gIGxvZzogamVzdC5mbigpLFxuICBkZWJ1ZzogamVzdC5mbigpLFxuICBpbmZvOiBqZXN0LmZuKCksXG4gIHdhcm46IGNvbnNvbGUud2FybixcbiAgZXJyb3I6IGNvbnNvbGUuZXJyb3IsXG59O1xuXG4vLyBOZXh0LmpzIFJvdXRlciBNb2NrXG5qZXN0Lm1vY2soJ25leHQvbmF2aWdhdGlvbicsICgpID0+ICh7XG4gIHVzZVJvdXRlcjogKCkgPT4gKHtcbiAgICBwdXNoOiBqZXN0LmZuKCksXG4gICAgcmVwbGFjZTogamVzdC5mbigpLFxuICAgIGJhY2s6IGplc3QuZm4oKSxcbiAgICBmb3J3YXJkOiBqZXN0LmZuKCksXG4gICAgcmVmcmVzaDogamVzdC5mbigpLFxuICAgIHByZWZldGNoOiBqZXN0LmZuKCksXG4gIH0pLFxuICB1c2VTZWFyY2hQYXJhbXM6ICgpID0+ICh7XG4gICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgZ2V0QWxsOiBqZXN0LmZuKCksXG4gICAgaGFzOiBqZXN0LmZuKCksXG4gICAga2V5czogamVzdC5mbigpLFxuICAgIHZhbHVlczogamVzdC5mbigpLFxuICAgIGVudHJpZXM6IGplc3QuZm4oKSxcbiAgICBmb3JFYWNoOiBqZXN0LmZuKCksXG4gICAgdG9TdHJpbmc6IGplc3QuZm4oKSxcbiAgfSksXG4gIHVzZVBhdGhuYW1lOiAoKSA9PiAnL3Rlc3QtcGF0aCcsXG59KSk7XG5cbi8vIFByaXNtYSBNb2NrXG5qZXN0Lm1vY2soJ0BwcmlzbWEvY2xpZW50JywgKCkgPT4gKHtcbiAgUHJpc21hQ2xpZW50OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgJGNvbm5lY3Q6IGplc3QuZm4oKSxcbiAgICAkZGlzY29ubmVjdDogamVzdC5mbigpLFxuICAgICR0cmFuc2FjdGlvbjogamVzdC5mbigpLFxuICAgICRxdWVyeVJhdzogamVzdC5mbigpLFxuICAgICRleGVjdXRlUmF3OiBqZXN0LmZuKCksXG4gICAgdXNlcjoge1xuICAgICAgZmluZE1hbnk6IGplc3QuZm4oKSxcbiAgICAgIGZpbmRVbmlxdWU6IGplc3QuZm4oKSxcbiAgICAgIGZpbmRGaXJzdDogamVzdC5mbigpLFxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpLFxuICAgICAgY291bnQ6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIGFnZW50Q29uZmlnOiB7XG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICAgIGRlbGV0ZTogamVzdC5mbigpLFxuICAgIH0sXG4gICAgY2hhdFNlc3Npb246IHtcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXG4gICAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXG4gICAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgICBjaGF0TWVzc2FnZToge1xuICAgICAgZmluZE1hbnk6IGplc3QuZm4oKSxcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgICBkZWxldGU6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIHBvc3RlclRhc2s6IHtcbiAgICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXG4gICAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXG4gICAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICAgIHVwZGF0ZTogamVzdC5mbigpLFxuICAgICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gICAgfSxcbiAgICBlcnJvckxvZzoge1xuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxuICAgIH0sXG4gICAgdXNhZ2VTdGF0czoge1xuICAgICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgICBmaW5kTWFueTogamVzdC5mbigpLFxuICAgIH0sXG4gIH0pKSxcbiAgUHJpc21hOiB7XG4gICAgVHJhbnNhY3Rpb25Jc29sYXRpb25MZXZlbDoge1xuICAgICAgUmVhZENvbW1pdHRlZDogJ1JlYWRDb21taXR0ZWQnLFxuICAgICAgUmVhZFVuY29tbWl0dGVkOiAnUmVhZFVuY29tbWl0dGVkJyxcbiAgICAgIFJlcGVhdGFibGVSZWFkOiAnUmVwZWF0YWJsZVJlYWQnLFxuICAgICAgU2VyaWFsaXphYmxlOiAnU2VyaWFsaXphYmxlJyxcbiAgICB9LFxuICB9LFxufSkpO1xuXG4vLyBGaWxlIFN5c3RlbSBNb2NrXG5qZXN0Lm1vY2soJ2ZzL3Byb21pc2VzJywgKCkgPT4gKHtcbiAgcmVhZEZpbGU6IGplc3QuZm4oKSxcbiAgd3JpdGVGaWxlOiBqZXN0LmZuKCksXG4gIHVubGluazogamVzdC5mbigpLFxuICBta2RpcjogamVzdC5mbigpLFxuICByZWFkZGlyOiBqZXN0LmZuKCksXG4gIHN0YXQ6IGplc3QuZm4oKSxcbiAgYWNjZXNzOiBqZXN0LmZuKCksXG59KSk7XG5cbi8vIENyeXB0byBNb2NrXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCAnY3J5cHRvJywge1xuICB2YWx1ZToge1xuICAgIHJhbmRvbVVVSUQ6ICgpID0+ICd0ZXN0LXV1aWQtJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KSxcbiAgICBnZXRSYW5kb21WYWx1ZXM6IChhcnIpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycltpXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1Nik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0sXG4gIH0sXG59KTtcblxuLy8gTVNXIFNlcnZlciBTZXR1cCAtIOenu+mZpE1TV+S+nei1lu+8jOS9v+eUqOeugOWMlueJiOacrFxuLy8gYmVmb3JlQWxsKCgpID0+IHtcbi8vICAgc2VydmVyLmxpc3Rlbih7XG4vLyAgICAgb25VbmhhbmRsZWRSZXF1ZXN0OiAnZXJyb3InLFxuLy8gICB9KTtcbi8vIH0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICAvLyBzZXJ2ZXIucmVzZXRIYW5kbGVycygpOyAvLyDnp7vpmaRNU1fkvp3otZZcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIGplc3QuY2xlYXJBbGxUaW1lcnMoKTtcbiAgamVzdC51c2VSZWFsVGltZXJzKCk7XG59KTtcblxuLy8gYWZ0ZXJBbGwoKCkgPT4ge1xuLy8gICBzZXJ2ZXIuY2xvc2UoKTtcbi8vIH0pO1xuXG4vLyDmtYvor5Xlt6Xlhbflh73mlbBcbmdsb2JhbC50ZXN0VXRpbHMgPSB7XG4gIC8vIOWIm+W7uk1vY2vnlKjmiLdcbiAgY3JlYXRlTW9ja1VzZXI6IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcbiAgICBpZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICB1c2VybmFtZTogJ3Rlc3R1c2VyJyxcbiAgICByb2xlOiAnVVNFUicsXG4gICAgc3RhdHVzOiAnQUNUSVZFJyxcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAuLi5vdmVycmlkZXMsXG4gIH0pLFxuXG4gIC8vIOWIm+W7uk1vY2vmmbrog73kvZNcbiAgY3JlYXRlTW9ja0FnZW50OiAob3ZlcnJpZGVzID0ge30pID0+ICh7XG4gICAgaWQ6ICd0ZXN0LWFnZW50LWlkJyxcbiAgICBuYW1lOiAnVGVzdCBBZ2VudCcsXG4gICAgZGVzY3JpcHRpb246ICdUZXN0IGFnZW50IGRlc2NyaXB0aW9uJyxcbiAgICBzeXN0ZW1Qcm9tcHQ6ICdZb3UgYXJlIGEgdGVzdCBhZ2VudCcsXG4gICAgbW9kZWw6ICdncHQtMy41LXR1cmJvJyxcbiAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgIG1heFRva2VuczogMTAwMCxcbiAgICBpc1B1YmxpYzogdHJ1ZSxcbiAgICBjcmVhdGVkQnk6ICd0ZXN0LXVzZXItaWQnLFxuICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIC4uLm92ZXJyaWRlcyxcbiAgfSksXG5cbiAgLy8g5Yib5bu6TW9ja+iBiuWkqeS8muivnVxuICBjcmVhdGVNb2NrQ2hhdFNlc3Npb246IChvdmVycmlkZXMgPSB7fSkgPT4gKHtcbiAgICBpZDogJ3Rlc3Qtc2Vzc2lvbi1pZCcsXG4gICAgdGl0bGU6ICdUZXN0IENoYXQgU2Vzc2lvbicsXG4gICAgdXNlcklkOiAndGVzdC11c2VyLWlkJyxcbiAgICBhZ2VudElkOiAndGVzdC1hZ2VudC1pZCcsXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgLi4ub3ZlcnJpZGVzLFxuICB9KSxcblxuICAvLyDliJvlu7pNb2NrIEFQSeWTjeW6lFxuICBjcmVhdGVNb2NrQXBpUmVzcG9uc2U6IChkYXRhLCBzdGF0dXMgPSAyMDApID0+ICh7XG4gICAgb2s6IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwLFxuICAgIHN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiBzdGF0dXMgPT09IDIwMCA/ICdPSycgOiAnRXJyb3InLFxuICAgIGpzb246IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShkYXRhKSxcbiAgICB0ZXh0OiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoSlNPTi5zdHJpbmdpZnkoZGF0YSkpLFxuICAgIGhlYWRlcnM6IG5ldyBNYXAoKSxcbiAgfSksXG5cbiAgLy8g562J5b6F5byC5q2l5pON5L2cXG4gIHdhaXRGb3I6IChtcyA9IDApID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpLFxuXG4gIC8vIOaooeaLn+e9kee7nOW7tui/n1xuICBzaW11bGF0ZU5ldHdvcmtEZWxheTogKG1pbiA9IDEwMCwgbWF4ID0gNTAwKSA9PiB7XG4gICAgY29uc3QgZGVsYXkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcbiAgfSxcblxuICBjcmVhdGVNb2NrU2VjdXJpdHlFdmVudDogKCkgPT4gKHtcbiAgICBpZDogJ3Rlc3QtZXZlbnQtMTIzJyxcbiAgICB0eXBlOiAnbG9naW5fc3VjY2VzcycsXG4gICAgc2V2ZXJpdHk6ICdsb3cnLFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICBpcDogJzE5Mi4xNjguMS4xMDAnLFxuICAgIHVzZXJJZDogJ3Rlc3QtdXNlci0xMjMnLFxuICAgIGRldGFpbHM6IHt9LFxuICAgIHJpc2tTY29yZTogMSxcbiAgICByZXNvbHZlZDogZmFsc2UsXG4gIH0pLFxuICBcbiAgc2xlZXA6IChtcykgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSksXG59O1xuXG4vLyDmgKfog73mtYvor5Xlt6Xlhbdcbmdsb2JhbC5wZXJmb3JtYW5jZVV0aWxzID0ge1xuICAvLyDmtYvph4/lh73mlbDmiafooYzml7bpl7RcbiAgbWVhc3VyZVRpbWU6IGFzeW5jIChmbikgPT4ge1xuICAgIGNvbnN0IHN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oKTtcbiAgICBjb25zdCBlbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0LFxuICAgICAgZHVyYXRpb246IGVuZCAtIHN0YXJ0LFxuICAgIH07XG4gIH0sXG5cbiAgLy8g5YaF5a2Y5L2/55So5rWL6K+VXG4gIG1lYXN1cmVNZW1vcnk6ICgpID0+IHtcbiAgICBpZiAocGVyZm9ybWFuY2UubWVtb3J5KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1c2VkOiBwZXJmb3JtYW5jZS5tZW1vcnkudXNlZEpTSGVhcFNpemUsXG4gICAgICAgIHRvdGFsOiBwZXJmb3JtYW5jZS5tZW1vcnkudG90YWxKU0hlYXBTaXplLFxuICAgICAgICBsaW1pdDogcGVyZm9ybWFuY2UubWVtb3J5LmpzSGVhcFNpemVMaW1pdCxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxufTtcblxuLy8g6ZSZ6K+v5aSE55CG5aKe5by6XG5jb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG5jb25zb2xlLmVycm9yID0gKC4uLmFyZ3MpID0+IHtcbiAgLy8g5b+955Wl5p+Q5Lqb6aKE5pyf55qE5rWL6K+V6ZSZ6K+vXG4gIGNvbnN0IG1lc3NhZ2UgPSBhcmdzWzBdO1xuICBpZiAoXG4gICAgdHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnICYmXG4gICAgKG1lc3NhZ2UuaW5jbHVkZXMoJ1dhcm5pbmc6IFJlYWN0RE9NLnJlbmRlciBpcyBkZXByZWNhdGVkJykgfHxcbiAgICAgbWVzc2FnZS5pbmNsdWRlcygnV2FybmluZzogY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBoYXMgYmVlbiByZW5hbWVkJykpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBvcmlnaW5hbENvbnNvbGVFcnJvci5hcHBseShjb25zb2xlLCBhcmdzKTtcbn07XG5cbi8vIOWFqOWxgOa1i+ivlemFjee9rlxuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTsgLy8gMzDnp5LotoXml7ZcblxuLy8g56e76Zmk5a+86Ie05q275b6q546v55qE5qih5Z2X5by65Yi25Yqg6L29XG4vLyDms6jph4rvvJrljp/mnaXnmoQgZ2xvYmFsLmJlZm9yZUFsbCDkuK3nmoQgcmVxdWlyZSDor63lj6XkvJrlr7zoh7Tlvqrnjq/lvJXnlKhcbi8vIOi/meS6m+aooeWdl+W6lOivpeWcqOmcgOimgeaXtuaJjeWKoOi9ve+8jOiAjOS4jeaYr+WcqOWFqOWxgOiuvue9ruS4reW8uuWItuWKoOi9vVxuXG5jb25zb2xlLmxvZygnRml4ZWQgSmVzdCBzZXR1cCBjb21wbGV0ZWQgLSDmrbvlvqrnjq/pl67popjlt7Lop6PlhrMnKTsiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJ1c2VSb3V0ZXIiLCJwdXNoIiwiZm4iLCJyZXBsYWNlIiwiYmFjayIsImZvcndhcmQiLCJyZWZyZXNoIiwicHJlZmV0Y2giLCJ1c2VTZWFyY2hQYXJhbXMiLCJnZXQiLCJnZXRBbGwiLCJoYXMiLCJrZXlzIiwidmFsdWVzIiwiZW50cmllcyIsImZvckVhY2giLCJ0b1N0cmluZyIsInVzZVBhdGhuYW1lIiwiUHJpc21hQ2xpZW50IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiJGNvbm5lY3QiLCIkZGlzY29ubmVjdCIsIiR0cmFuc2FjdGlvbiIsIiRxdWVyeVJhdyIsIiRleGVjdXRlUmF3IiwidXNlciIsImZpbmRNYW55IiwiZmluZFVuaXF1ZSIsImZpbmRGaXJzdCIsImNyZWF0ZSIsInVwZGF0ZSIsImRlbGV0ZSIsImNvdW50IiwiYWdlbnRDb25maWciLCJjaGF0U2Vzc2lvbiIsImNoYXRNZXNzYWdlIiwicG9zdGVyVGFzayIsImVycm9yTG9nIiwidXNhZ2VTdGF0cyIsIlByaXNtYSIsIlRyYW5zYWN0aW9uSXNvbGF0aW9uTGV2ZWwiLCJSZWFkQ29tbWl0dGVkIiwiUmVhZFVuY29tbWl0dGVkIiwiUmVwZWF0YWJsZVJlYWQiLCJTZXJpYWxpemFibGUiLCJyZWFkRmlsZSIsIndyaXRlRmlsZSIsInVubGluayIsIm1rZGlyIiwicmVhZGRpciIsInN0YXQiLCJhY2Nlc3MiLCJyZXF1aXJlIiwiY29uZmlnIiwicGF0aCIsInZhbGlkYXRlVGVzdEVudmlyb25tZW50IiwiY3JlYXRlVGVzdENvbmZpZyIsInNldFRlc3RFbnZpcm9ubWVudCIsInZhbGlkYXRlSmVzdENvbmZpZyIsInZhbGlkYXRlSmVzdFRlc3RFbnYiLCJjcmVhdGVTYWZlUG9seWZpbGxzIiwiYXBwbHlTYWZlUG9seWZpbGxzIiwic2FmZVBvbHlmaWxscyIsImVudlZhbGlkYXRpb24iLCJpc1ZhbGlkIiwiY29uc29sZSIsImVycm9yIiwiZXJyb3JzIiwid2FybiIsImZhbGxiYWNrQ29uZmlnIiwid2FybmluZ3MiLCJsZW5ndGgiLCJ3YXJuaW5nIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiRXZlbnRFbWl0dGVyIiwiZGVmYXVsdE1heExpc3RlbmVycyIsIm9yaWdpbmFsRXhpdCIsImV4aXQiLCJjb2RlIiwiZ2xvYmFsIiwiZmV0Y2giLCJsb2ciLCJkZWJ1ZyIsImluZm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwicmFuZG9tVVVJRCIsIk1hdGgiLCJyYW5kb20iLCJzdWJzdHIiLCJnZXRSYW5kb21WYWx1ZXMiLCJhcnIiLCJpIiwiZmxvb3IiLCJhZnRlckVhY2giLCJjbGVhckFsbE1vY2tzIiwiY2xlYXJBbGxUaW1lcnMiLCJ1c2VSZWFsVGltZXJzIiwidGVzdFV0aWxzIiwiY3JlYXRlTW9ja1VzZXIiLCJvdmVycmlkZXMiLCJpZCIsImVtYWlsIiwidXNlcm5hbWUiLCJyb2xlIiwic3RhdHVzIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidXBkYXRlZEF0IiwiY3JlYXRlTW9ja0FnZW50IiwibmFtZSIsImRlc2NyaXB0aW9uIiwic3lzdGVtUHJvbXB0IiwibW9kZWwiLCJ0ZW1wZXJhdHVyZSIsIm1heFRva2VucyIsImlzUHVibGljIiwiY3JlYXRlZEJ5IiwiY3JlYXRlTW9ja0NoYXRTZXNzaW9uIiwidGl0bGUiLCJ1c2VySWQiLCJhZ2VudElkIiwiY3JlYXRlTW9ja0FwaVJlc3BvbnNlIiwiZGF0YSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInRleHQiLCJKU09OIiwic3RyaW5naWZ5IiwiaGVhZGVycyIsIk1hcCIsIndhaXRGb3IiLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInNpbXVsYXRlTmV0d29ya0RlbGF5IiwibWluIiwibWF4IiwiZGVsYXkiLCJjcmVhdGVNb2NrU2VjdXJpdHlFdmVudCIsInR5cGUiLCJzZXZlcml0eSIsInRpbWVzdGFtcCIsImlwIiwiZGV0YWlscyIsInJpc2tTY29yZSIsInJlc29sdmVkIiwic2xlZXAiLCJwZXJmb3JtYW5jZVV0aWxzIiwibWVhc3VyZVRpbWUiLCJzdGFydCIsInBlcmZvcm1hbmNlIiwibm93IiwicmVzdWx0IiwiZW5kIiwiZHVyYXRpb24iLCJtZWFzdXJlTWVtb3J5IiwibWVtb3J5IiwidXNlZCIsInVzZWRKU0hlYXBTaXplIiwidG90YWwiLCJ0b3RhbEpTSGVhcFNpemUiLCJsaW1pdCIsImpzSGVhcFNpemVMaW1pdCIsIm9yaWdpbmFsQ29uc29sZUVycm9yIiwiYXJncyIsIm1lc3NhZ2UiLCJpbmNsdWRlcyIsImFwcGx5Il0sIm1hcHBpbmdz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