{"version":3,"sources":["E:\\zk-agent\\jest.setup.fixed.js"],"sourcesContent":["/**\n * @file jest.setup.fixed.js\n * @description Fixed Jest setup - Resolves infinite loop and security issues\n * @author Jest Fix Team\n * @lastUpdate 2024-12-19\n */\n\n// Load test environment variables from .env.test file\nrequire('dotenv').config({ path: '.env.test' });\n\n// Import required modules with error handling\nrequire('@testing-library/jest-dom');\nconst { validateTestEnvironment, createTestConfig, setTestEnvironment } = require('./__tests__/config/test-env-validator');\n\n// Import Jest configuration validator\nconst { \n  validateJestConfig, \n  validateTestEnvironment: validateJestTestEnv,\n  createSafePolyfills,\n  applySafePolyfills \n} = require('./__tests__/config/jest-config-validator');\n\n// Apply safe polyfills with enhanced error handling\nconst safePolyfills = createSafePolyfills();\napplySafePolyfills(safePolyfills);\n\n// Validate and setup test environment\nconst envValidation = validateTestEnvironment();\nif (!envValidation.isValid) {\n  console.error('Environment validation failed:');\n  envValidation.errors.forEach(error => console.error(`  - ${error}`));\n  \n  // Use fallback configuration\n  console.warn('Using fallback test configuration...');\n  const fallbackConfig = createTestConfig();\n  setTestEnvironment(fallbackConfig, false);\n}\n\nif (envValidation.warnings.length > 0) {\n  console.warn('Environment validation warnings:');\n  envValidation.warnings.forEach(warning => console.warn(`  - ${warning}`));\n}\n\n// Validate Jest configuration\nvalidateJestConfig();\nvalidateJestTestEnv();\n\n// Ensure test environment\nprocess.env.NODE_ENV = 'test';\n\n// Fix EventEmitter memory leak warnings\nrequire('events').EventEmitter.defaultMaxListeners = 20;\n\n// Mock process.exit to prevent Jest from exiting\nconst originalExit = process.exit;\nprocess.exit = jest.fn((code) => {\n  if (process.env.NODE_ENV === 'test') {\n    console.warn(`process.exit(${code}) called in test environment - mocked`);\n    return;\n  }\n  return originalExit(code);\n});\n\n// Global Mock setup\nglobal.fetch = jest.fn();\nglobal.console = {\n  ...console,\n  // 在测试中静默某些日志\n  log: jest.fn(),\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: console.warn,\n  error: console.error,\n};\n\n// Next.js Router Mock\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n  useSearchParams: () => ({\n    get: jest.fn(),\n    getAll: jest.fn(),\n    has: jest.fn(),\n    keys: jest.fn(),\n    values: jest.fn(),\n    entries: jest.fn(),\n    forEach: jest.fn(),\n    toString: jest.fn(),\n  }),\n  usePathname: () => '/test-path',\n}));\n\n// Prisma Mock\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => ({\n    $connect: jest.fn(),\n    $disconnect: jest.fn(),\n    $transaction: jest.fn(),\n    $queryRaw: jest.fn(),\n    $executeRaw: jest.fn(),\n    user: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      findFirst: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n      count: jest.fn(),\n    },\n    agentConfig: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    chatSession: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    chatMessage: {\n      findMany: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    posterTask: {\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    errorLog: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n    },\n    usageStats: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n    },\n  })),\n  Prisma: {\n    TransactionIsolationLevel: {\n      ReadCommitted: 'ReadCommitted',\n      ReadUncommitted: 'ReadUncommitted',\n      RepeatableRead: 'RepeatableRead',\n      Serializable: 'Serializable',\n    },\n  },\n}));\n\n// File System Mock\njest.mock('fs/promises', () => ({\n  readFile: jest.fn(),\n  writeFile: jest.fn(),\n  unlink: jest.fn(),\n  mkdir: jest.fn(),\n  readdir: jest.fn(),\n  stat: jest.fn(),\n  access: jest.fn(),\n}));\n\n// Crypto Mock\nObject.defineProperty(global, 'crypto', {\n  value: {\n    randomUUID: () => 'test-uuid-' + Math.random().toString(36).substr(2, 9),\n    getRandomValues: (arr) => {\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = Math.floor(Math.random() * 256);\n      }\n      return arr;\n    },\n  },\n});\n\n// MSW Server Setup - 移除MSW依赖，使用简化版本\n// beforeAll(() => {\n//   server.listen({\n//     onUnhandledRequest: 'error',\n//   });\n// });\n\nafterEach(() => {\n  // server.resetHandlers(); // 移除MSW依赖\n  jest.clearAllMocks();\n  jest.clearAllTimers();\n  jest.useRealTimers();\n});\n\n// afterAll(() => {\n//   server.close();\n// });\n\n// 测试工具函数\nglobal.testUtils = {\n  // 创建Mock用户\n  createMockUser: (overrides = {}) => ({\n    id: 'test-user-id',\n    email: 'test@example.com',\n    username: 'testuser',\n    role: 'USER',\n    status: 'ACTIVE',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    ...overrides,\n  }),\n\n  // 创建Mock智能体\n  createMockAgent: (overrides = {}) => ({\n    id: 'test-agent-id',\n    name: 'Test Agent',\n    description: 'Test agent description',\n    systemPrompt: 'You are a test agent',\n    model: 'gpt-3.5-turbo',\n    temperature: 0.7,\n    maxTokens: 1000,\n    isPublic: true,\n    createdBy: 'test-user-id',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    ...overrides,\n  }),\n\n  // 创建Mock聊天会话\n  createMockChatSession: (overrides = {}) => ({\n    id: 'test-session-id',\n    title: 'Test Chat Session',\n    userId: 'test-user-id',\n    agentId: 'test-agent-id',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    ...overrides,\n  }),\n\n  // 创建Mock API响应\n  createMockApiResponse: (data, status = 200) => ({\n    ok: status >= 200 && status < 300,\n    status,\n    statusText: status === 200 ? 'OK' : 'Error',\n    json: jest.fn().mockResolvedValue(data),\n    text: jest.fn().mockResolvedValue(JSON.stringify(data)),\n    headers: new Map(),\n  }),\n\n  // 等待异步操作\n  waitFor: (ms = 0) => new Promise(resolve => setTimeout(resolve, ms)),\n\n  // 模拟网络延迟\n  simulateNetworkDelay: (min = 100, max = 500) => {\n    const delay = Math.floor(Math.random() * (max - min + 1)) + min;\n    return new Promise(resolve => setTimeout(resolve, delay));\n  },\n\n  createMockSecurityEvent: () => ({\n    id: 'test-event-123',\n    type: 'login_success',\n    severity: 'low',\n    timestamp: new Date(),\n    ip: '192.168.1.100',\n    userId: 'test-user-123',\n    details: {},\n    riskScore: 1,\n    resolved: false,\n  }),\n  \n  sleep: (ms) => new Promise(resolve => setTimeout(resolve, ms)),\n};\n\n// 性能测试工具\nglobal.performanceUtils = {\n  // 测量函数执行时间\n  measureTime: async (fn) => {\n    const start = performance.now();\n    const result = await fn();\n    const end = performance.now();\n    return {\n      result,\n      duration: end - start,\n    };\n  },\n\n  // 内存使用测试\n  measureMemory: () => {\n    if (performance.memory) {\n      return {\n        used: performance.memory.usedJSHeapSize,\n        total: performance.memory.totalJSHeapSize,\n        limit: performance.memory.jsHeapSizeLimit,\n      };\n    }\n    return null;\n  },\n};\n\n// 错误处理增强\nconst originalConsoleError = console.error;\nconsole.error = (...args) => {\n  // 忽略某些预期的测试错误\n  const message = args[0];\n  if (\n    typeof message === 'string' &&\n    (message.includes('Warning: ReactDOM.render is deprecated') ||\n     message.includes('Warning: componentWillReceiveProps has been renamed'))\n  ) {\n    return;\n  }\n  originalConsoleError.apply(console, args);\n};\n\n// 全局测试配置\njest.setTimeout(30000); // 30秒超时\n\n// 移除导致死循环的模块强制加载\n// 注释：原来的 global.beforeAll 中的 require 语句会导致循环引用\n// 这些模块应该在需要时才加载，而不是在全局设置中强制加载\n\nconsole.log('Fixed Jest setup completed - 死循环问题已解决');"],"names":["jest","mock","useRouter","push","fn","replace","back","forward","refresh","prefetch","useSearchParams","get","getAll","has","keys","values","entries","forEach","toString","usePathname","PrismaClient","mockImplementation","$connect","$disconnect","$transaction","$queryRaw","$executeRaw","user","findMany","findUnique","findFirst","create","update","delete","count","agentConfig","chatSession","chatMessage","posterTask","errorLog","usageStats","Prisma","TransactionIsolationLevel","ReadCommitted","ReadUncommitted","RepeatableRead","Serializable","readFile","writeFile","unlink","mkdir","readdir","stat","access","require","config","path","validateTestEnvironment","createTestConfig","setTestEnvironment","validateJestConfig","validateJestTestEnv","createSafePolyfills","applySafePolyfills","safePolyfills","envValidation","isValid","console","error","errors","warn","fallbackConfig","warnings","length","warning","process","env","NODE_ENV","EventEmitter","defaultMaxListeners","originalExit","exit","code","global","fetch","log","debug","info","Object","defineProperty","value","randomUUID","Math","random","substr","getRandomValues","arr","i","floor","afterEach","clearAllMocks","clearAllTimers","useRealTimers","testUtils","createMockUser","overrides","id","email","username","role","status","createdAt","Date","toISOString","updatedAt","createMockAgent","name","description","systemPrompt","model","temperature","maxTokens","isPublic","createdBy","createMockChatSession","title","userId","agentId","createMockApiResponse","data","ok","statusText","json","mockResolvedValue","text","JSON","stringify","headers","Map","waitFor","ms","Promise","resolve","setTimeout","simulateNetworkDelay","min","max","delay","createMockSecurityEvent","type","severity","timestamp","ip","details","riskScore","resolved","sleep","performanceUtils","measureTime","start","performance","now","result","end","duration","measureMemory","memory","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","originalConsoleError","args","message","includes","apply"],"mappings":"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"}