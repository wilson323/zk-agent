{"version":3,"sources":["E:\\zk-agent\\__tests__\\lib\\storage\\cloud-storage-adapter.test.ts"],"sourcesContent":["// @ts-nocheck\r\n/**\r\n * @file __tests__/lib/storage/cloud-storage-adapter.test.ts\r\n * @description 云存储适配器测试套件\r\n * @author B团队测试工程师\r\n * @lastUpdate 2024-12-19\r\n * @coverage 100%测试覆盖率目标\r\n */\r\n\r\nimport {\r\n  CloudStorageAdapter,\r\n  CloudProvider,\r\n  uploadFile,\r\n  downloadFile,\r\n  deleteFile,\r\n  fileExists,\r\n  getFileInfo,\r\n  listFiles,\r\n  getSignedUrl,\r\n} from '@/lib/storage/cloud-storage-adapter';\r\n\r\n// Mock dependencies\r\njest.mock('@/lib/utils/logger');\r\njest.mock('@/lib/cache/enhanced-cache-manager', () => ({\r\n  EnhancedCacheManager: {\r\n    getInstance: jest.fn(() => ({\r\n      get: jest.fn(),\r\n      set: jest.fn(),\r\n      delete: jest.fn(),\r\n      clear: jest.fn(),\r\n      getStats: jest.fn(() => ({ hits: 0, misses: 0, size: 0 })),\r\n      updateCacheMetrics: jest.fn(),\r\n      setupMemoryMonitoring: jest.fn()\r\n    }))\r\n  }\r\n}));\r\n\r\n// Mock AWS SDK - 使用虚拟模块避免依赖问题\r\njest.doMock('@aws-sdk/client-s3', () => ({\r\n  S3Client: jest.fn().mockImplementation(() => ({\r\n    send: jest.fn().mockResolvedValue({ Body: Buffer.from('test content') })\r\n  })),\r\n  PutObjectCommand: jest.fn(),\r\n  GetObjectCommand: jest.fn(),\r\n  DeleteObjectCommand: jest.fn(),\r\n  HeadObjectCommand: jest.fn(),\r\n  ListObjectsV2Command: jest.fn()\r\n}), { virtual: true });\r\n\r\n// Mock Aliyun OSS - 使用虚拟模块避免依赖问题\r\njest.doMock('ali-oss', () => {\r\n  return jest.fn().mockImplementation(() => ({\r\n    put: jest.fn().mockResolvedValue({ name: 'test.txt' }),\r\n    get: jest.fn().mockResolvedValue({ content: Buffer.from('test content') }),\r\n    delete: jest.fn().mockResolvedValue({}),\r\n    head: jest.fn().mockResolvedValue({ status: 200 }),\r\n    list: jest.fn().mockResolvedValue({ objects: [] }),\r\n    signatureUrl: jest.fn().mockReturnValue('https://example.com/signed-url')\r\n  }));\r\n}, { virtual: true });\r\n\r\ndescribe('CloudStorageAdapter', () => {\r\n  let adapter: CloudStorageAdapter;\r\n\r\n  beforeEach(() => {\r\n    // 确保测试环境变量正确设置\r\n    process.env.NODE_ENV = 'test';\r\n    adapter = CloudStorageAdapter.getInstance();\r\n    \r\n    // 配置默认的存储客户端以避免 'No storage client available' 错误\r\n    adapter.configure([\r\n      {\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket-aws',\r\n          accessKeyId: 'test-aws-key',\r\n          secretAccessKey: 'test-aws-secret',\r\n        },\r\n      },\r\n      {\r\n        provider: CloudProvider.ALIYUN_OSS,\r\n        config: {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          region: 'oss-cn-hangzhou',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n          endpoint: 'oss-cn-hangzhou.aliyuncs.com',\r\n        },\r\n      }\r\n    ]);\r\n    \r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('单例模式', () => {\r\n    it('应该返回同一个实例', () => {\r\n      const instance1 = CloudStorageAdapter.getInstance();\r\n      const instance2 = CloudStorageAdapter.getInstance();\r\n      \r\n      expect(instance1).toBe(instance2);\r\n    });\r\n  });\r\n\r\n  describe('配置管理', () => {\r\n    it('应该正确配置AWS S3', () => {\r\n      const config = {\r\n        provider: CloudProvider.AWS_S3,\r\n        region: 'us-east-1',\r\n        bucket: 'test-bucket',\r\n        accessKeyId: 'test-key',\r\n        secretAccessKey: 'test-secret',\r\n        enableCDN: true,\r\n        cdnDomain: 'cdn.example.com',\r\n      };\r\n\r\n      expect(() => {\r\n        adapter.configure([{ provider: CloudProvider.AWS_S3, config }]);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该正确配置阿里云OSS', () => {\r\n      const config = {\r\n        provider: CloudProvider.ALIYUN_OSS,\r\n        region: 'oss-cn-hangzhou',\r\n        bucket: 'test-bucket',\r\n        accessKeyId: 'test-key',\r\n        secretAccessKey: 'test-secret',\r\n        endpoint: 'oss-cn-hangzhou.aliyuncs.com',\r\n      };\r\n\r\n      expect(() => {\r\n        adapter.configure([{ provider: CloudProvider.ALIYUN_OSS, config }]);\r\n      }).not.toThrow();\r\n    });\r\n\r\n    it('应该拒绝不支持的提供商', () => {\r\n      const config = {\r\n        provider: 'unsupported' as CloudProvider,\r\n        region: 'test',\r\n        bucket: 'test',\r\n        accessKeyId: 'test',\r\n        secretAccessKey: 'test',\r\n      };\r\n\r\n      expect(() => {\r\n        adapter.configure([{ provider: 'unsupported' as CloudProvider, config }]);\r\n      }).toThrow('Unsupported storage provider');\r\n    });\r\n\r\n    it('应该设置主要和备用提供商', () => {\r\n      const configs = [\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'primary-bucket',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'fallback-bucket',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ];\r\n\r\n      expect(() => {\r\n        adapter.configure(configs);\r\n      }).not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('文件上传', () => {\r\n    beforeEach(() => {\r\n      // 配置测试提供商\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该成功上传文件', async () => {\r\n      const buffer = Buffer.from('test file content');\r\n      const options = {\r\n        key: 'test-file.txt',\r\n        contentType: 'text/plain',\r\n        metadata: { purpose: 'test' },\r\n      };\r\n\r\n      const result = await uploadFile(buffer, options);\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.key).toBe(options.key);\r\n      expect(result.size).toBe(buffer.length);\r\n      expect(result.url).toContain('test-bucket');\r\n      expect(result.etag).toBeDefined();\r\n    });\r\n\r\n    it('应该处理上传选项', async () => {\r\n      const buffer = Buffer.from('test content');\r\n      const options = {\r\n        key: 'test-file.txt',\r\n        contentType: 'text/plain',\r\n        acl: 'public-read' as const,\r\n        cacheControl: 'max-age=3600',\r\n        serverSideEncryption: true,\r\n        tags: { environment: 'test' },\r\n      };\r\n\r\n      const result = await uploadFile(buffer, options);\r\n\r\n      expect(result).toBeDefined();\r\n      expect(result.contentType).toBe(options.contentType);\r\n    });\r\n\r\n    it('应该在主提供商失败时使用备用提供商', async () => {\r\n      // 配置多个提供商\r\n      adapter.configure([\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'primary-bucket',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'fallback-bucket',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ]);\r\n\r\n      const buffer = Buffer.from('test content');\r\n      const options = { key: 'test-file.txt' };\r\n\r\n      // 即使主提供商可能失败，也应该成功（通过备用提供商）\r\n      const result = await uploadFile(buffer, options);\r\n      expect(result).toBeDefined();\r\n    });\r\n\r\n    it('应该缓存上传结果', async () => {\r\n      const buffer = Buffer.from('test content');\r\n      const options = { key: 'cached-file.txt' };\r\n\r\n      await uploadFile(buffer, options);\r\n\r\n      // 验证缓存调用\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      expect(enhancedCacheManager.set).toHaveBeenCalledWith(\r\n        `file:${options.key}`,\r\n        expect.any(Object),\r\n        { ttl: 3600000, tags: ['file-upload'] }\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('文件下载', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该成功下载文件', async () => {\r\n      const options = { key: 'test-file.txt' };\r\n      const mockClient = adapter.getClient(CloudProvider.AWS_S3);\r\n      \r\n      const buffer = await downloadFile(options);\r\n      \r\n      expect(buffer).toBeInstanceOf(Buffer);\r\n      expect(buffer.length).toBeGreaterThan(0);\r\n      \r\n      // 验证mock客户端download方法被调用\r\n      expect(mockClient.download).toHaveBeenCalledWith(options);\r\n    });\r\n\r\n    it('应该支持下载选项', async () => {\r\n      const options = {\r\n        key: 'test-file.txt',\r\n        versionId: 'v123',\r\n        range: 'bytes=0-1023',\r\n        responseContentType: 'application/octet-stream',\r\n      };\r\n\r\n      const buffer = await downloadFile(options);\r\n      expect(buffer).toBeInstanceOf(Buffer);\r\n    });\r\n\r\n    it('应该从缓存返回文件', async () => {\r\n      const cachedBuffer = Buffer.from('cached content');\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      enhancedCacheManager.get.mockResolvedValue(cachedBuffer);\r\n\r\n      const options = { key: 'cached-file.txt' };\r\n      const buffer = await downloadFile(options);\r\n\r\n      expect(buffer).toBe(cachedBuffer);\r\n      expect(enhancedCacheManager.get).toHaveBeenCalledWith('file:download:cached-file.txt');\r\n    });\r\n\r\n    it('应该缓存小文件下载结果', async () => {\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      enhancedCacheManager.get.mockResolvedValue(null); // 缓存未命中\r\n\r\n      const options = { key: 'small-file.txt' };\r\n      await downloadFile(options);\r\n\r\n      // 验证缓存设置（对于小文件）\r\n      expect(enhancedCacheManager.set).toHaveBeenCalledWith(\r\n        `file:download:${options.key}`,\r\n        expect.any(Buffer),\r\n        { ttl: 300000, tags: ['file-download'] }\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('文件删除', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该成功删除文件', async () => {\r\n      const key = 'test-file.txt';\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n      \r\n      await expect(deleteFile(key)).resolves.not.toThrow();\r\n      \r\n      // 验证mock客户端delete方法被调用\r\n      const mockClient = adapter.getClient(CloudProvider.AWS_S3);\r\n      expect(mockClient.delete).toHaveBeenCalledWith(key);\r\n      \r\n      // 验证缓存被清除\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:${key}`);\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:download:${key}`);\r\n    });\r\n\r\n    it('应该清除相关缓存', async () => {\r\n      const key = 'test-file.txt';\r\n      const { enhancedCacheManager } = require('@/lib/cache/enhanced-cache-manager');\r\n\r\n      await deleteFile(key);\r\n\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:${key}`);\r\n      expect(enhancedCacheManager.delete).toHaveBeenCalledWith(`file:download:${key}`);\r\n    });\r\n\r\n    it('应该在所有提供商上删除文件', async () => {\r\n      // 配置多个提供商\r\n      adapter.configure([\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'bucket1',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'bucket2',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ]);\r\n\r\n      const key = 'test-file.txt';\r\n      await expect(deleteFile(key)).resolves.not.toThrow();\r\n    });\r\n  });\r\n\r\n  describe('文件存在检查', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该检查文件是否存在', async () => {\r\n      const key = 'test-file.txt';\r\n\r\n      const exists = await fileExists(key);\r\n\r\n      expect(typeof exists).toBe('boolean');\r\n    });\r\n\r\n    it('应该处理检查错误', async () => {\r\n      const key = 'error-file.txt';\r\n\r\n      // 即使出错也应该返回false而不是抛出异常\r\n      const exists = await fileExists(key);\r\n      expect(typeof exists).toBe('boolean');\r\n    });\r\n  });\r\n\r\n  describe('文件信息获取', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该获取文件信息', async () => {\r\n      const key = 'test-file.txt';\r\n\r\n      const info = await getFileInfo(key);\r\n\r\n      expect(info).toBeDefined();\r\n      expect(info.key).toBe(key);\r\n      expect(info.size).toBeGreaterThan(0);\r\n      expect(info.lastModified).toBeInstanceOf(Date);\r\n      expect(info.etag).toBeDefined();\r\n      expect(info.url).toContain('test-bucket');\r\n    });\r\n\r\n    it('应该包含CDN URL（如果启用）', async () => {\r\n      // 重新配置启用CDN\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n          enableCDN: true,\r\n          cdnDomain: 'cdn.example.com',\r\n        },\r\n      }]);\r\n\r\n      const key = 'test-file.txt';\r\n      const info = await getFileInfo(key);\r\n\r\n      expect(info.cdnUrl).toContain('cdn.example.com');\r\n    });\r\n  });\r\n\r\n  describe('文件列表', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该列出文件', async () => {\r\n      const files = await listFiles();\r\n\r\n      expect(Array.isArray(files)).toBe(true);\r\n      expect(files.length).toBeGreaterThan(0);\r\n      \r\n      files.forEach(file => {\r\n        expect(file.key).toBeDefined();\r\n        expect(file.size).toBeGreaterThan(0);\r\n        expect(file.lastModified).toBeInstanceOf(Date);\r\n        expect(file.etag).toBeDefined();\r\n      });\r\n    });\r\n\r\n    it('应该支持前缀过滤', async () => {\r\n      const prefix = 'images/';\r\n      const files = await listFiles(prefix);\r\n\r\n      expect(Array.isArray(files)).toBe(true);\r\n      files.forEach(file => {\r\n        expect(file.key).toContain(prefix);\r\n      });\r\n    });\r\n\r\n    it('应该支持最大数量限制', async () => {\r\n      const maxKeys = 10;\r\n      const files = await listFiles(undefined, maxKeys);\r\n\r\n      expect(Array.isArray(files)).toBe(true);\r\n      expect(files.length).toBeLessThanOrEqual(maxKeys);\r\n    });\r\n  });\r\n\r\n  describe('签名URL生成', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该生成GET签名URL', async () => {\r\n      const key = 'test-file.txt';\r\n      const url = await getSignedUrl(key, 'get');\r\n\r\n      expect(url).toBeDefined();\r\n      expect(url).toContain('test-bucket');\r\n      expect(url).toContain(key);\r\n      expect(url).toContain('X-Amz-Signature');\r\n    });\r\n\r\n    it('应该生成PUT签名URL', async () => {\r\n      const key = 'test-file.txt';\r\n      const url = await getSignedUrl(key, 'put');\r\n\r\n      expect(url).toBeDefined();\r\n      expect(url).toContain('test-bucket');\r\n      expect(url).toContain(key);\r\n    });\r\n\r\n    it('应该支持自定义过期时间', async () => {\r\n      const key = 'test-file.txt';\r\n      const expiresIn = 7200; // 2小时\r\n      const url = await getSignedUrl(key, 'get', expiresIn);\r\n\r\n      expect(url).toBeDefined();\r\n      expect(url).toContain(`X-Amz-Expires=${expiresIn}`);\r\n    });\r\n  });\r\n\r\n  describe('存储统计', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该获取存储统计', async () => {\r\n      const stats = await adapter.getStats();\r\n\r\n      expect(stats).toBeDefined();\r\n      expect(typeof stats.totalFiles).toBe('number');\r\n      expect(typeof stats.totalSize).toBe('number');\r\n      expect(typeof stats.usedQuota).toBe('number');\r\n      expect(typeof stats.availableQuota).toBe('number');\r\n      expect(stats.bandwidth).toBeDefined();\r\n      expect(typeof stats.bandwidth.upload).toBe('number');\r\n      expect(typeof stats.bandwidth.download).toBe('number');\r\n    });\r\n  });\r\n\r\n  describe('健康状态检查', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([\r\n        {\r\n          provider: CloudProvider.AWS_S3,\r\n          config: {\r\n            provider: CloudProvider.AWS_S3,\r\n            region: 'us-east-1',\r\n            bucket: 'bucket1',\r\n            accessKeyId: 'key1',\r\n            secretAccessKey: 'secret1',\r\n          },\r\n        },\r\n        {\r\n          provider: CloudProvider.ALIYUN_OSS,\r\n          config: {\r\n            provider: CloudProvider.ALIYUN_OSS,\r\n            region: 'oss-cn-hangzhou',\r\n            bucket: 'bucket2',\r\n            accessKeyId: 'key2',\r\n            secretAccessKey: 'secret2',\r\n          },\r\n        },\r\n      ]);\r\n    });\r\n\r\n    it('应该检查所有提供商的健康状态', async () => {\r\n      const status = await adapter.getHealthStatus();\r\n\r\n      expect(status).toBeDefined();\r\n      expect(status[CloudProvider.AWS_S3]).toBeDefined();\r\n      expect(status[CloudProvider.ALIYUN_OSS]).toBeDefined();\r\n\r\n      Object.values(status).forEach(providerStatus => {\r\n        expect(typeof providerStatus.healthy).toBe('boolean');\r\n        expect(typeof providerStatus.latency).toBe('number');\r\n        expect(providerStatus.latency).toBeGreaterThanOrEqual(0);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('熔断器机制', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该在多次失败后触发熔断器', async () => {\r\n      // 这个测试需要模拟失败情况\r\n      // 由于我们使用的是模拟实现，这里主要测试熔断器逻辑存在\r\n      expect(adapter).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('错误处理', () => {\r\n    it('应该处理没有配置客户端的情况', async () => {\r\n      // 创建一个新的适配器实例，不使用单例以避免共享配置\r\n      const emptyAdapter = new (CloudStorageAdapter as any)();\r\n      \r\n      await expect(emptyAdapter.exists('test')).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.getFileInfo('test')).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.listFiles()).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.getSignedUrl('test', 'get')).rejects.toThrow('No storage client available');\r\n      await expect(emptyAdapter.getStats()).rejects.toThrow('No storage client available');\r\n    });\r\n\r\n    it('应该处理网络错误', async () => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n\r\n      // 测试各种操作的错误处理\r\n      // 由于使用模拟实现，这些操作通常会成功\r\n      // 在实际实现中，可以通过模拟网络错误来测试\r\n      expect(adapter).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('环境变量配置', () => {\r\n    const originalEnv = process.env;\r\n\r\n    beforeEach(() => {\r\n      jest.resetModules();\r\n      process.env = { ...originalEnv };\r\n    });\r\n\r\n    afterEach(() => {\r\n      process.env = originalEnv;\r\n    });\r\n\r\n    it('应该从环境变量读取AWS配置', () => {\r\n      process.env.AWS_ACCESS_KEY_ID = 'test-aws-key';\r\n      process.env.AWS_SECRET_ACCESS_KEY = 'test-aws-secret';\r\n      process.env.AWS_REGION = 'us-west-2';\r\n      process.env.AWS_S3_BUCKET = 'test-aws-bucket';\r\n\r\n      // 重新创建实例以读取环境变量\r\n      const newAdapter = CloudStorageAdapter.getInstance();\r\n      expect(newAdapter).toBeDefined();\r\n    });\r\n\r\n    it('应该从环境变量读取阿里云配置', () => {\r\n      process.env.ALIYUN_ACCESS_KEY_ID = 'test-aliyun-key';\r\n      process.env.ALIYUN_ACCESS_KEY_SECRET = 'test-aliyun-secret';\r\n      process.env.ALIYUN_OSS_REGION = 'oss-cn-beijing';\r\n      process.env.ALIYUN_OSS_BUCKET = 'test-aliyun-bucket';\r\n\r\n      const newAdapter = CloudStorageAdapter.getInstance();\r\n      expect(newAdapter).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('性能测试', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该在合理时间内完成文件操作', async () => {\r\n      const buffer = Buffer.from('test content');\r\n      const options = { key: 'performance-test.txt' };\r\n\r\n      const startTime = Date.now();\r\n      \r\n      await uploadFile(buffer, options);\r\n      await downloadFile(options);\r\n      await fileExists(options.key);\r\n      await getFileInfo(options.key);\r\n      \r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 所有操作应该在5秒内完成\r\n      expect(duration).toBeLessThan(5000);\r\n    });\r\n\r\n    it('应该高效处理批量操作', async () => {\r\n      const startTime = Date.now();\r\n      \r\n      const promises = [];\r\n      for (let i = 0; i < 10; i++) {\r\n        promises.push(fileExists(`batch-test-${i}.txt`));\r\n      }\r\n      \r\n      await Promise.all(promises);\r\n      \r\n      const endTime = Date.now();\r\n      const duration = endTime - startTime;\r\n\r\n      // 10个并发检查应该在3秒内完成\r\n      expect(duration).toBeLessThan(3000);\r\n    });\r\n  });\r\n\r\n  describe('并发安全', () => {\r\n    beforeEach(() => {\r\n      adapter.configure([{\r\n        provider: CloudProvider.AWS_S3,\r\n        config: {\r\n          provider: CloudProvider.AWS_S3,\r\n          region: 'us-east-1',\r\n          bucket: 'test-bucket',\r\n          accessKeyId: 'test-key',\r\n          secretAccessKey: 'test-secret',\r\n        },\r\n      }]);\r\n    });\r\n\r\n    it('应该安全处理并发上传', async () => {\r\n      const promises = [];\r\n      \r\n      for (let i = 0; i < 20; i++) {\r\n        const buffer = Buffer.from(`concurrent content ${i}`);\r\n        const options = { key: `concurrent-${i}.txt` };\r\n        promises.push(uploadFile(buffer, options));\r\n      }\r\n      \r\n      const results = await Promise.all(promises);\r\n      \r\n      expect(results).toHaveLength(20);\r\n      results.forEach((result, index) => {\r\n        expect(result.key).toBe(`concurrent-${index}.txt`);\r\n      });\r\n    });\r\n\r\n    it('应该安全处理并发下载', async () => {\r\n      const promises = [];\r\n      \r\n      for (let i = 0; i < 15; i++) {\r\n        promises.push(downloadFile({ key: `concurrent-download-${i}.txt` }));\r\n      }\r\n      \r\n      const results = await Promise.all(promises);\r\n      \r\n      expect(results).toHaveLength(15);\r\n      results.forEach(buffer => {\r\n        expect(buffer).toBeInstanceOf(Buffer);\r\n      });\r\n    });\r\n  });\r\n});"],"names":["jest","mock","EnhancedCacheManager","getInstance","fn","get","set","delete","clear","getStats","hits","misses","size","updateCacheMetrics","setupMemoryMonitoring","doMock","S3Client","mockImplementation","send","mockResolvedValue","Body","Buffer","from","PutObjectCommand","GetObjectCommand","DeleteObjectCommand","HeadObjectCommand","ListObjectsV2Command","virtual","put","name","content","head","status","list","objects","signatureUrl","mockReturnValue","describe","adapter","beforeEach","process","env","NODE_ENV","CloudStorageAdapter","configure","provider","CloudProvider","AWS_S3","config","region","bucket","accessKeyId","secretAccessKey","ALIYUN_OSS","endpoint","clearAllMocks","it","instance1","instance2","expect","toBe","enableCDN","cdnDomain","not","toThrow","configs","buffer","options","key","contentType","metadata","purpose","result","uploadFile","toBeDefined","length","url","toContain","etag","acl","cacheControl","serverSideEncryption","tags","environment","enhancedCacheManager","require","toHaveBeenCalledWith","any","Object","ttl","mockClient","getClient","downloadFile","toBeInstanceOf","toBeGreaterThan","download","versionId","range","responseContentType","cachedBuffer","deleteFile","resolves","exists","fileExists","info","getFileInfo","lastModified","Date","cdnUrl","files","listFiles","Array","isArray","forEach","file","prefix","maxKeys","undefined","toBeLessThanOrEqual","getSignedUrl","expiresIn","stats","totalFiles","totalSize","usedQuota","availableQuota","bandwidth","upload","getHealthStatus","values","providerStatus","healthy","latency","toBeGreaterThanOrEqual","emptyAdapter","rejects","originalEnv","resetModules","afterEach","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_REGION","AWS_S3_BUCKET","newAdapter","ALIYUN_ACCESS_KEY_ID","ALIYUN_ACCESS_KEY_SECRET","ALIYUN_OSS_REGION","ALIYUN_OSS_BUCKET","startTime","now","endTime","duration","toBeLessThan","promises","i","push","Promise","all","results","toHaveLength","index"],"mappings":"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"}