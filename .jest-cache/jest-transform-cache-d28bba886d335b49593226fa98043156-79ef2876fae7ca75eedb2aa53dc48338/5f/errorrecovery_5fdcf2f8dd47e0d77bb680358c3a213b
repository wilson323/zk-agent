7f78dd6a28cf1d5deec8bfffdbc13ac7
/**
 * @file Database Error Recovery System
 * @description 数据库错误恢复和故障转移系统
 * @author ZK-Agent Team
 * @date 2024-12-19
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CircuitBreakerState: function() {
        return CircuitBreakerState;
    },
    DatabaseErrorRecovery: function() {
        return DatabaseErrorRecovery;
    },
    ErrorType: function() {
        return ErrorType;
    },
    RecoveryStrategy: function() {
        return RecoveryStrategy;
    },
    // 默认导出错误恢复系统
    default: function() {
        return _default;
    },
    errorRecovery: function() {
        return errorRecovery;
    },
    getErrorStatistics: function() {
        return getErrorStatistics;
    },
    getRecoveryHistory: function() {
        return getRecoveryHistory;
    },
    getRecoveryStatistics: function() {
        return getRecoveryStatistics;
    },
    resetCircuitBreaker: function() {
        return resetCircuitBreaker;
    },
    updateRecoveryConfiguration: function() {
        return updateRecoveryConfiguration;
    }
});
const _events = require("events");
const _enhancedconnection = require("./enhanced-connection");
const _monitoring = require("./monitoring");
const _pooloptimizer = require("./pool-optimizer");
var ErrorType = /*#__PURE__*/ function(ErrorType) {
    ErrorType["CONNECTION_TIMEOUT"] = "connection_timeout";
    ErrorType["CONNECTION_REFUSED"] = "connection_refused";
    ErrorType["AUTHENTICATION_FAILED"] = "authentication_failed";
    ErrorType["DATABASE_UNAVAILABLE"] = "database_unavailable";
    ErrorType["QUERY_TIMEOUT"] = "query_timeout";
    ErrorType["DEADLOCK"] = "deadlock";
    ErrorType["CONSTRAINT_VIOLATION"] = "constraint_violation";
    ErrorType["DISK_FULL"] = "disk_full";
    ErrorType["MEMORY_EXHAUSTED"] = "memory_exhausted";
    ErrorType["NETWORK_ERROR"] = "network_error";
    ErrorType["UNKNOWN"] = "unknown";
    return ErrorType;
}({});
var RecoveryStrategy = /*#__PURE__*/ function(RecoveryStrategy) {
    RecoveryStrategy["RETRY"] = "retry";
    RecoveryStrategy["RECONNECT"] = "reconnect";
    RecoveryStrategy["FAILOVER"] = "failover";
    RecoveryStrategy["CIRCUIT_BREAKER"] = "circuit_breaker";
    RecoveryStrategy["GRACEFUL_DEGRADATION"] = "graceful_degradation";
    RecoveryStrategy["EMERGENCY_SHUTDOWN"] = "emergency_shutdown";
    return RecoveryStrategy;
}({});
var CircuitBreakerState = /*#__PURE__*/ function(CircuitBreakerState) {
    CircuitBreakerState["CLOSED"] = "closed";
    CircuitBreakerState["OPEN"] = "open";
    CircuitBreakerState["HALF_OPEN"] = "half_open";
    return CircuitBreakerState;
}({});
class DatabaseErrorRecovery extends _events.EventEmitter {
    constructor(config, maxHistorySize = 1000){
        super(), this.recoveryHistory = [], this.errorCounts = new Map(), this.circuitBreakerState = "closed", this.circuitBreakerOpenTime = null, this.isRecovering = false, this.healthCheckInterval = null, this.lastErrorTime = null, this.consecutiveFailures = 0;
        this.maxHistorySize = maxHistorySize;
        // 默认恢复配置
        this.configuration = {
            maxRetryAttempts: parseInt(process.env.DB_MAX_RETRY_ATTEMPTS || '3'),
            retryDelayMs: parseInt(process.env.DB_RETRY_DELAY || '1000'),
            exponentialBackoff: process.env.DB_EXPONENTIAL_BACKOFF === 'true',
            circuitBreakerThreshold: parseInt(process.env.DB_CIRCUIT_BREAKER_THRESHOLD || '5'),
            circuitBreakerTimeoutMs: parseInt(process.env.DB_CIRCUIT_BREAKER_TIMEOUT || '60000'),
            failoverEnabled: process.env.DB_FAILOVER_ENABLED === 'true',
            gracefulDegradationEnabled: process.env.DB_GRACEFUL_DEGRADATION === 'true',
            emergencyShutdownThreshold: parseInt(process.env.DB_EMERGENCY_SHUTDOWN_THRESHOLD || '10'),
            healthCheckIntervalMs: parseInt(process.env.DB_HEALTH_CHECK_INTERVAL || '30000'),
            recoveryTimeoutMs: parseInt(process.env.DB_RECOVERY_TIMEOUT || '300000'),
            ...config
        };
        // 初始化错误计数
        Object.values(ErrorType).forEach((errorType)=>{
            this.errorCounts.set(errorType, 0);
        });
        // 设置事件监听器
        this.setupEventListeners();
        // 启动健康检查
        this.startHealthCheck();
    }
    /**
   * 设置事件监听器
   */ setupEventListeners() {
        // 监听数据库错误事件
        _enhancedconnection.enhancedDb.on('error', (error)=>{
            this.handleDatabaseError(error);
        });
        // 监听连接断开事件
        _enhancedconnection.enhancedDb.on('disconnected', (error)=>{
            if (error) {
                this.handleDatabaseError(error);
            }
        });
        // 监听监控告警
        _monitoring.databaseMonitor.on('alert', (alert)=>{
            if (alert.level === _monitoring.AlertLevel.CRITICAL || alert.level === _monitoring.AlertLevel.ERROR) {
                this.handleMonitoringAlert(alert);
            }
        });
    }
    /**
   * 处理数据库错误
   */ async handleDatabaseError(error) {
        try {
            console.error('Database error detected:', error.message);
            // 分析错误
            const analysis = this.analyzeError(error);
            // 更新错误计数
            this.updateErrorCounts(analysis.errorType);
            // 检查熔断器状态
            this.updateCircuitBreakerState(analysis);
            // 如果熔断器开启，直接返回
            if (this.circuitBreakerState === "open") {
                console.warn('Circuit breaker is open, skipping recovery attempt');
                return;
            }
            // 执行恢复策略
            if (analysis.isRecoverable && !this.isRecovering) {
                await this.executeRecoveryStrategy(analysis);
            } else if (!analysis.isRecoverable) {
                console.error('Error is not recoverable, manual intervention required');
                this.emit('unrecoverableError', {
                    error,
                    analysis
                });
            }
        } catch (recoveryError) {
            console.error('Error during error recovery:', recoveryError);
        }
    }
    /**
   * 处理监控告警
   */ async handleMonitoringAlert(alert) {
        console.warn('Monitoring alert received:', alert.message);
        // 根据告警类型决定恢复策略
        if (alert.message.includes('连接') || alert.message.includes('connection')) {
            const fakeError = new Error(`Monitoring alert: ${alert.message}`);
            await this.handleDatabaseError(fakeError);
        }
    }
    /**
   * 分析错误
   */ analyzeError(error) {
        const errorMessage = error.message.toLowerCase();
        const stats = _enhancedconnection.enhancedDb.getStats();
        const memUsage = process.memoryUsage();
        let errorType = "unknown";
        let severity = 'medium';
        let isRecoverable = true;
        let recommendedStrategy = "retry";
        let estimatedRecoveryTime = 5000;
        let requiresManualIntervention = false;
        // 错误类型识别
        if (errorMessage.includes('timeout') || errorMessage.includes('超时')) {
            errorType = "connection_timeout";
            severity = 'medium';
            recommendedStrategy = "retry";
            estimatedRecoveryTime = 10000;
        } else if (errorMessage.includes('refused') || errorMessage.includes('拒绝')) {
            errorType = "connection_refused";
            severity = 'high';
            recommendedStrategy = "reconnect";
            estimatedRecoveryTime = 15000;
        } else if (errorMessage.includes('authentication') || errorMessage.includes('认证')) {
            errorType = "authentication_failed";
            severity = 'critical';
            isRecoverable = false;
            requiresManualIntervention = true;
            recommendedStrategy = "emergency_shutdown";
        } else if (errorMessage.includes('unavailable') || errorMessage.includes('不可用')) {
            errorType = "database_unavailable";
            severity = 'critical';
            recommendedStrategy = "failover";
            estimatedRecoveryTime = 30000;
        } else if (errorMessage.includes('deadlock') || errorMessage.includes('死锁')) {
            errorType = "deadlock";
            severity = 'medium';
            recommendedStrategy = "retry";
            estimatedRecoveryTime = 2000;
        } else if (errorMessage.includes('constraint') || errorMessage.includes('约束')) {
            errorType = "constraint_violation";
            severity = 'low';
            isRecoverable = false;
            requiresManualIntervention = true;
        } else if (errorMessage.includes('disk') || errorMessage.includes('磁盘')) {
            errorType = "disk_full";
            severity = 'critical';
            isRecoverable = false;
            requiresManualIntervention = true;
            recommendedStrategy = "emergency_shutdown";
        } else if (errorMessage.includes('memory') || errorMessage.includes('内存')) {
            errorType = "memory_exhausted";
            severity = 'high';
            recommendedStrategy = "graceful_degradation";
            estimatedRecoveryTime = 20000;
        } else if (errorMessage.includes('network') || errorMessage.includes('网络')) {
            errorType = "network_error";
            severity = 'high';
            recommendedStrategy = "reconnect";
            estimatedRecoveryTime = 15000;
        }
        // 根据连续失败次数调整严重性
        if (this.consecutiveFailures > 3) {
            severity = 'critical';
            if (this.consecutiveFailures > 5) {
                recommendedStrategy = "circuit_breaker";
            }
        }
        return {
            errorType,
            severity,
            isRecoverable,
            recommendedStrategy,
            estimatedRecoveryTime,
            requiresManualIntervention,
            context: {
                connectionState: stats.state,
                recentErrors: this.getRecentErrorCount(),
                systemLoad: this.getSystemLoad(),
                availableMemory: (memUsage.heapTotal - memUsage.heapUsed) / 1024 / 1024 // MB
            }
        };
    }
    /**
   * 更新错误计数
   */ updateErrorCounts(errorType) {
        const currentCount = this.errorCounts.get(errorType) || 0;
        this.errorCounts.set(errorType, currentCount + 1);
        this.lastErrorTime = new Date();
        this.consecutiveFailures++;
    }
    /**
   * 更新熔断器状态
   */ updateCircuitBreakerState(analysis) {
        const recentErrors = this.getRecentErrorCount();
        switch(this.circuitBreakerState){
            case "closed":
                if (recentErrors >= this.configuration.circuitBreakerThreshold) {
                    this.circuitBreakerState = "open";
                    this.circuitBreakerOpenTime = new Date();
                    console.warn('Circuit breaker opened due to high error rate');
                    this.emit('circuitBreakerOpened', {
                        recentErrors,
                        threshold: this.configuration.circuitBreakerThreshold
                    });
                }
                break;
            case "open":
                if (this.circuitBreakerOpenTime && Date.now() - this.circuitBreakerOpenTime.getTime() > this.configuration.circuitBreakerTimeoutMs) {
                    this.circuitBreakerState = "half_open";
                    console.info('Circuit breaker moved to half-open state');
                    this.emit('circuitBreakerHalfOpen');
                }
                break;
            case "half_open":
                if (analysis.severity === 'critical' || analysis.severity === 'high') {
                    this.circuitBreakerState = "open";
                    this.circuitBreakerOpenTime = new Date();
                    console.warn('Circuit breaker reopened due to continued errors');
                    this.emit('circuitBreakerReopened');
                }
                break;
        }
    }
    /**
   * 执行恢复策略
   */ async executeRecoveryStrategy(analysis) {
        this.isRecovering = true;
        const startTime = Date.now();
        let attempts = 0;
        let success = false;
        let lastError;
        const beforeMetrics = _enhancedconnection.enhancedDb.getStats();
        try {
            console.log(`Executing recovery strategy: ${analysis.recommendedStrategy}`);
            switch(analysis.recommendedStrategy){
                case "retry":
                    ({ success, attempts, lastError } = await this.executeRetryStrategy());
                    break;
                case "reconnect":
                    ({ success, attempts, lastError } = await this.executeReconnectStrategy());
                    break;
                case "failover":
                    ({ success, attempts, lastError } = await this.executeFailoverStrategy());
                    break;
                case "circuit_breaker":
                    ({ success, attempts, lastError } = await this.executeCircuitBreakerStrategy());
                    break;
                case "graceful_degradation":
                    ({ success, attempts, lastError } = await this.executeGracefulDegradationStrategy());
                    break;
                case "emergency_shutdown":
                    ({ success, attempts, lastError } = await this.executeEmergencyShutdownStrategy());
                    break;
                default:
                    throw new Error(`Unknown recovery strategy: ${analysis.recommendedStrategy}`);
            }
        } catch (error) {
            lastError = error instanceof Error ? error.message : String(error);
            console.error('Recovery strategy execution failed:', lastError);
        }
        const afterMetrics = _enhancedconnection.enhancedDb.getStats();
        const duration = Date.now() - startTime;
        // 记录恢复结果
        const result = {
            timestamp: new Date(),
            errorType: analysis.errorType,
            strategy: analysis.recommendedStrategy,
            success,
            duration,
            attemptsCount: attempts,
            error: lastError,
            metrics: {
                beforeRecovery: beforeMetrics,
                afterRecovery: afterMetrics
            }
        };
        this.addRecoveryResult(result);
        if (success) {
            this.consecutiveFailures = 0;
            if (this.circuitBreakerState === "half_open") {
                this.circuitBreakerState = "closed";
                console.info('Circuit breaker closed after successful recovery');
                this.emit('circuitBreakerClosed');
            }
        }
        this.emit('recoveryCompleted', result);
        this.isRecovering = false;
    }
    /**
   * 执行重试策略
   */ async executeRetryStrategy() {
        let attempts = 0;
        let lastError;
        for(let i = 0; i < this.configuration.maxRetryAttempts; i++){
            attempts++;
            try {
                // 等待重试延迟
                const delay = this.configuration.exponentialBackoff ? this.configuration.retryDelayMs * Math.pow(2, i) : this.configuration.retryDelayMs;
                await this.sleep(delay);
                // 尝试执行健康检查
                const isHealthy = await _enhancedconnection.enhancedDb.performHealthCheck();
                if (isHealthy) {
                    console.log(`Retry strategy succeeded on attempt ${attempts}`);
                    return {
                        success: true,
                        attempts
                    };
                }
            } catch (error) {
                lastError = error instanceof Error ? error.message : String(error);
                console.warn(`Retry attempt ${attempts} failed:`, lastError);
            }
        }
        return {
            success: false,
            attempts,
            lastError
        };
    }
    /**
   * 执行重连策略
   */ async executeReconnectStrategy() {
        let attempts = 0;
        let lastError;
        try {
            attempts++;
            console.log('Attempting database reconnection...');
            // 断开现有连接
            await _enhancedconnection.enhancedDb.disconnect();
            // 等待一段时间
            await this.sleep(this.configuration.retryDelayMs);
            // 重新连接
            await _enhancedconnection.enhancedDb.connect();
            // 验证连接
            const isHealthy = await _enhancedconnection.enhancedDb.performHealthCheck();
            if (isHealthy) {
                console.log('Database reconnection successful');
                return {
                    success: true,
                    attempts
                };
            }
        } catch (error) {
            lastError = error instanceof Error ? error.message : String(error);
            console.error('Database reconnection failed:', lastError);
        }
        return {
            success: false,
            attempts,
            lastError
        };
    }
    /**
   * 执行故障转移策略
   */ async executeFailoverStrategy() {
        let attempts = 0;
        let lastError;
        if (!this.configuration.failoverEnabled) {
            return {
                success: false,
                attempts: 0,
                lastError: 'Failover is not enabled'
            };
        }
        try {
            attempts++;
            console.log('Attempting database failover...');
            // 这里应该实现实际的故障转移逻辑
            // 例如：切换到备用数据库、使用只读副本等
            // 模拟故障转移
            await this.sleep(5000);
            console.log('Failover strategy executed (simulated)');
            return {
                success: true,
                attempts
            };
        } catch (error) {
            lastError = error instanceof Error ? error.message : String(error);
            console.error('Failover strategy failed:', lastError);
        }
        return {
            success: false,
            attempts,
            lastError
        };
    }
    /**
   * 执行熔断器策略
   */ async executeCircuitBreakerStrategy() {
        console.log('Circuit breaker strategy activated');
        this.circuitBreakerState = "open";
        this.circuitBreakerOpenTime = new Date();
        // 触发连接池优化
        if (_pooloptimizer.poolOptimizer) {
            _pooloptimizer.poolOptimizer.emit('emergencyOptimization', 'Circuit breaker activated');
        }
        return {
            success: true,
            attempts: 1
        };
    }
    /**
   * 执行优雅降级策略
   */ async executeGracefulDegradationStrategy() {
        if (!this.configuration.gracefulDegradationEnabled) {
            return {
                success: false,
                attempts: 0,
                lastError: 'Graceful degradation is not enabled'
            };
        }
        try {
            console.log('Executing graceful degradation strategy...');
            // 这里应该实现优雅降级逻辑
            // 例如：启用缓存模式、限制功能、使用备用数据源等
            // 模拟优雅降级
            await this.sleep(2000);
            console.log('Graceful degradation activated');
            this.emit('gracefulDegradationActivated');
            return {
                success: true,
                attempts: 1
            };
        } catch (error) {
            const lastError = error instanceof Error ? error.message : String(error);
            console.error('Graceful degradation failed:', lastError);
            return {
                success: false,
                attempts: 1,
                lastError
            };
        }
    }
    /**
   * 执行紧急关闭策略
   */ async executeEmergencyShutdownStrategy() {
        try {
            console.error('Executing emergency shutdown strategy...');
            // 发送紧急告警
            this.emit('emergencyShutdown', {
                reason: 'Critical database error requiring manual intervention',
                timestamp: new Date()
            });
            // 优雅关闭数据库连接
            await _enhancedconnection.enhancedDb.gracefulShutdown();
            console.error('Emergency shutdown completed');
            return {
                success: true,
                attempts: 1
            };
        } catch (error) {
            const lastError = error instanceof Error ? error.message : String(error);
            console.error('Emergency shutdown failed:', lastError);
            return {
                success: false,
                attempts: 1,
                lastError
            };
        }
    }
    /**
   * 启动健康检查
   */ startHealthCheck() {
        this.healthCheckInterval = setInterval(async ()=>{
            try {
                if (this.circuitBreakerState === "half_open") {
                    const isHealthy = await _enhancedconnection.enhancedDb.performHealthCheck();
                    if (isHealthy) {
                        this.circuitBreakerState = "closed";
                        console.info('Circuit breaker closed after successful health check');
                        this.emit('circuitBreakerClosed');
                    }
                }
            } catch (error) {
                console.error('Health check failed:', error);
            }
        }, this.configuration.healthCheckIntervalMs);
    }
    /**
   * 停止健康检查
   */ stopHealthCheck() {
        if (this.healthCheckInterval) {
            clearInterval(this.healthCheckInterval);
            this.healthCheckInterval = null;
        }
    }
    /**
   * 获取最近错误数量
   */ getRecentErrorCount(timeWindowMs = 300000) {
        const cutoffTime = Date.now() - timeWindowMs;
        return this.recoveryHistory.filter((result)=>result.timestamp.getTime() > cutoffTime && !result.success).length;
    }
    /**
   * 获取系统负载
   */ getSystemLoad() {
        // 简单的系统负载计算
        const cpuUsage = process.cpuUsage();
        return (cpuUsage.user + cpuUsage.system) / 1000000 // 转换为秒
        ;
    }
    /**
   * 睡眠函数
   */ sleep(ms) {
        return new Promise((resolve)=>setTimeout(resolve, ms));
    }
    /**
   * 添加恢复结果到历史
   */ addRecoveryResult(result) {
        this.recoveryHistory.push(result);
        // 限制历史记录大小
        if (this.recoveryHistory.length > this.maxHistorySize) {
            this.recoveryHistory = this.recoveryHistory.slice(-this.maxHistorySize);
        }
    }
    /**
   * 获取恢复历史
   */ getRecoveryHistory(limit) {
        if (limit) {
            return this.recoveryHistory.slice(-limit);
        }
        return [
            ...this.recoveryHistory
        ];
    }
    /**
   * 获取错误统计
   */ getErrorStatistics() {
        const errorsByType = {};
        Object.values(ErrorType).forEach((errorType)=>{
            errorsByType[errorType] = this.errorCounts.get(errorType) || 0;
        });
        return {
            totalErrors: Array.from(this.errorCounts.values()).reduce((sum, count)=>sum + count, 0),
            errorsByType,
            recentErrors: this.getRecentErrorCount(),
            consecutiveFailures: this.consecutiveFailures,
            lastErrorTime: this.lastErrorTime,
            circuitBreakerState: this.circuitBreakerState
        };
    }
    /**
   * 获取恢复统计
   */ getRecoveryStatistics() {
        const total = this.recoveryHistory.length;
        const successful = this.recoveryHistory.filter((r)=>r.success).length;
        const failed = total - successful;
        const strategiesUsed = {};
        Object.values(RecoveryStrategy).forEach((strategy)=>{
            strategiesUsed[strategy] = this.recoveryHistory.filter((r)=>r.strategy === strategy).length;
        });
        const avgRecoveryTime = total > 0 ? this.recoveryHistory.reduce((sum, r)=>sum + r.duration, 0) / total : 0;
        return {
            totalRecoveries: total,
            successfulRecoveries: successful,
            failedRecoveries: failed,
            successRate: total > 0 ? successful / total * 100 : 0,
            averageRecoveryTime: avgRecoveryTime,
            strategiesUsed
        };
    }
    /**
   * 更新配置
   */ updateConfiguration(config) {
        this.configuration = {
            ...this.configuration,
            ...config
        };
        console.log('Error recovery configuration updated:', config);
    }
    /**
   * 重置熔断器
   */ resetCircuitBreaker() {
        this.circuitBreakerState = "closed";
        this.circuitBreakerOpenTime = null;
        console.log('Circuit breaker reset to closed state');
        this.emit('circuitBreakerReset');
    }
    /**
   * 清除历史数据
   */ clearHistory() {
        this.recoveryHistory = [];
        this.errorCounts.clear();
        Object.values(ErrorType).forEach((errorType)=>{
            this.errorCounts.set(errorType, 0);
        });
        this.consecutiveFailures = 0;
        this.lastErrorTime = null;
        console.log('Error recovery history cleared');
    }
    /**
   * 销毁恢复系统
   */ destroy() {
        this.stopHealthCheck();
        this.removeAllListeners();
        console.log('Database error recovery system destroyed');
    }
}
const errorRecovery = new DatabaseErrorRecovery();
// 监听关键事件
errorRecovery.on('emergencyShutdown', (data)=>{
    console.error('EMERGENCY SHUTDOWN TRIGGERED:', data);
// 这里可以集成外部告警系统
});
errorRecovery.on('circuitBreakerOpened', (data)=>{
    console.warn('CIRCUIT BREAKER OPENED:', data);
// 这里可以发送告警通知
});
errorRecovery.on('unrecoverableError', (data)=>{
    console.error('UNRECOVERABLE ERROR DETECTED:', data);
// 这里可以发送紧急通知
});
const getErrorStatistics = ()=>errorRecovery.getErrorStatistics();
const getRecoveryStatistics = ()=>errorRecovery.getRecoveryStatistics();
const getRecoveryHistory = (limit)=>errorRecovery.getRecoveryHistory(limit);
const resetCircuitBreaker = ()=>errorRecovery.resetCircuitBreaker();
const updateRecoveryConfiguration = (config)=>errorRecovery.updateConfiguration(config);
const _default = errorRecovery;

//# sourceMappingURL=data:application/json;base64,