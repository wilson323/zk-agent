# 部署工作流
# 支持开发、测试、预生产和生产环境的自动化部署

name: Deploy Application

on:
  push:
    branches:
      - main        # 生产环境
      - develop     # 开发环境
      - staging     # 预生产环境
    tags:
      - 'v*'        # 版本标签部署
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - 'development'
          - 'staging'
          - 'production'
      version:
        description: 'Version to deploy (optional)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 确定部署环境
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      version: ${{ steps.env.outputs.version }}
    steps:
      - name: Determine deployment environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            VERSION="${{ github.event.inputs.version || github.sha }}"
            SHOULD_DEPLOY="true"
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            ENVIRONMENT="production"
            VERSION="${{ github.ref_name }}"
            SHOULD_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENVIRONMENT="production"
            VERSION="${{ github.sha }}"
            SHOULD_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            ENVIRONMENT="staging"
            VERSION="${{ github.sha }}"
            SHOULD_DEPLOY="true"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            ENVIRONMENT="development"
            VERSION="${{ github.sha }}"
            SHOULD_DEPLOY="true"
          else
            ENVIRONMENT="none"
            VERSION="${{ github.sha }}"
            SHOULD_DEPLOY="false"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          
          echo "🎯 部署环境: $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "📦 部署版本: $VERSION" >> $GITHUB_STEP_SUMMARY

  # 预部署检查
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: zkagent_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/zkagent_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/zkagent_test

      - name: Run tests
        run: npm run test:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/zkagent_test
          REDIS_URL: redis://localhost:6379
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Run linting
        run: npm run lint
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Check TypeScript
        run: npx tsc --noEmit
        continue-on-error: ${{ github.event.inputs.force_deploy == 'true' }}

      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  # 构建和推送 Docker 镜像
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deployment-checks]
    if: needs.determine-environment.outputs.should_deploy == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.determine-environment.outputs.environment }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1

      - name: Generate image reference
        id: image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-environment.outputs.environment }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          echo "🐳 构建镜像: $IMAGE" >> $GITHUB_STEP_SUMMARY

  # 开发环境部署
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'development'
    environment:
      name: development
      url: https://dev.zkagent.example.com
    steps:
      - name: Deploy to development
        run: |
          echo "🚀 部署到开发环境" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像**: ${{ needs.build-and-push.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ needs.determine-environment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          
          # 这里添加实际的部署逻辑
          # 例如：kubectl、docker-compose、或其他部署工具
          
          # 模拟部署过程
          echo "正在更新开发环境..."
          sleep 10
          echo "✅ 开发环境部署完成"

      - name: Run smoke tests
        run: |
          echo "🧪 运行冒烟测试"
          # 添加基本的健康检查
          # curl -f https://dev.zkagent.example.com/api/health
          echo "✅ 冒烟测试通过"

      - name: Notify development team
        run: |
          echo "📢 通知开发团队部署完成"
          # 这里可以添加 Slack、Teams 或邮件通知

  # 预生产环境部署
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.zkagent.example.com
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 部署到预生产环境" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像**: ${{ needs.build-and-push.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ needs.determine-environment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          
          # 预生产环境部署逻辑
          echo "正在更新预生产环境..."
          sleep 15
          echo "✅ 预生产环境部署完成"

      - name: Run integration tests
        run: |
          echo "🔧 运行集成测试"
          # 运行更全面的测试套件
          echo "✅ 集成测试通过"

      - name: Performance baseline check
        run: |
          echo "📊 性能基线检查"
          # 运行性能测试，确保没有回归
          echo "✅ 性能检查通过"

  # 生产环境部署
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'production'
    environment:
      name: production
      url: https://zkagent.example.com
    steps:
      - name: Create deployment backup
        run: |
          echo "💾 创建部署备份"
          # 备份当前生产环境状态
          echo "✅ 备份完成"

      - name: Deploy to production
        run: |
          echo "🚀 部署到生产环境" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像**: ${{ needs.build-and-push.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ needs.determine-environment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          
          # 生产环境部署逻辑（蓝绿部署或滚动更新）
          echo "正在执行蓝绿部署..."
          sleep 20
          echo "✅ 生产环境部署完成"

      - name: Run production health checks
        run: |
          echo "🏥 运行生产环境健康检查"
          # 全面的健康检查
          echo "✅ 健康检查通过"

      - name: Update monitoring and alerts
        run: |
          echo "📊 更新监控和告警"
          # 更新监控仪表板和告警规则
          echo "✅ 监控更新完成"

      - name: Notify stakeholders
        run: |
          echo "📢 通知相关人员"
          # 通知产品团队、运维团队等
          echo "✅ 通知发送完成"

  # 部署后验证
  post-deployment-verification:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-development, deploy-staging, deploy-production]
    if: always() && needs.determine-environment.outputs.should_deploy == 'true'
    steps:
      - name: Verify deployment
        run: |
          ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
          
          echo "## 🔍 部署后验证" >> $GITHUB_STEP_SUMMARY
          echo "- **环境**: $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          
          case $ENVIRONMENT in
            "development")
              if [ "${{ needs.deploy-development.result }}" = "success" ]; then
                echo "✅ 开发环境部署成功" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ 开发环境部署失败" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
            "staging")
              if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
                echo "✅ 预生产环境部署成功" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ 预生产环境部署失败" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
            "production")
              if [ "${{ needs.deploy-production.result }}" = "success" ]; then
                echo "✅ 生产环境部署成功" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ 生产环境部署失败" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
          esac

      - name: Generate deployment report
        run: |
          cat > deployment-report.md << EOF
          # 部署报告
          
          ## 基本信息
          - **部署时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **部署环境**: ${{ needs.determine-environment.outputs.environment }}
          - **部署版本**: ${{ needs.determine-environment.outputs.version }}
          - **触发方式**: ${{ github.event_name }}
          - **部署人员**: ${{ github.actor }}
          
          ## 部署状态
          - **预检查**: ${{ needs.pre-deployment-checks.result }}
          - **镜像构建**: ${{ needs.build-and-push.result }}
          - **环境部署**: ${{ 
            needs.determine-environment.outputs.environment == 'development' && needs.deploy-development.result ||
            needs.determine-environment.outputs.environment == 'staging' && needs.deploy-staging.result ||
            needs.determine-environment.outputs.environment == 'production' && needs.deploy-production.result
          }}
          
          ## 镜像信息
          - **镜像**: ${{ needs.build-and-push.outputs.image }}
          - **摘要**: ${{ needs.build-and-push.outputs.digest }}
          
          ## 后续步骤
          - [ ] 监控应用性能指标
          - [ ] 检查错误日志
          - [ ] 验证关键功能
          - [ ] 更新文档
          EOF

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ needs.determine-environment.outputs.environment }}
          path: deployment-report.md
          retention-days: 90

  # 回滚准备
  prepare-rollback:
    name: Prepare Rollback
    runs-on: ubuntu-latest
    needs: [determine-environment, post-deployment-verification]
    if: failure() && needs.determine-environment.outputs.environment == 'production'
    steps:
      - name: Prepare rollback information
        run: |
          echo "## 🔄 回滚准备" >> $GITHUB_STEP_SUMMARY
          echo "生产环境部署失败，准备回滚信息：" >> $GITHUB_STEP_SUMMARY
          echo "- **失败版本**: ${{ needs.determine-environment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **回滚命令**: 请手动执行回滚操作" >> $GITHUB_STEP_SUMMARY
          
          # 创建回滚脚本
          cat > rollback.sh << 'EOF'
          #!/bin/bash
          echo "执行生产环境回滚..."
          # 添加实际的回滚逻辑
          # kubectl rollout undo deployment/zkagent
          # 或其他回滚命令
          echo "回滚完成"
          EOF
          
          chmod +x rollback.sh

      - name: Upload rollback script
        uses: actions/upload-artifact@v4
        with:
          name: rollback-script
          path: rollback.sh
          retention-days: 30

      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 生产环境部署失败 - 需要回滚 (${new Date().toISOString().split('T')[0]})`;
            const body = `## 部署失败报告\n\n` +
              `生产环境部署失败，需要立即回滚：\n\n` +
              `- **失败版本**: ${{ needs.determine-environment.outputs.version }}\n` +
              `- **部署时间**: ${new Date().toISOString()}\n` +
              `- **工作流**: ${context.workflow}\n` +
              `- **运行ID**: ${context.runId}\n\n` +
              `### 回滚步骤\n` +
              `1. 下载回滚脚本\n` +
              `2. 执行回滚操作\n` +
              `3. 验证回滚结果\n` +
              `4. 更新监控状态\n\n` +
              `### 后续行动\n` +
              `- [ ] 分析失败原因\n` +
              `- [ ] 修复问题\n` +
              `- [ ] 重新部署\n` +
              `- [ ] 更新部署流程`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['deployment', 'production', 'critical', 'rollback-needed'],
              assignees: ['${{ github.actor }}']
            });