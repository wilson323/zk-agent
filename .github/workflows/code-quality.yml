# 代码质量检查工作流
# 专门用于代码质量、安全性和最佳实践检查

name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'

jobs:
  # ESLint 检查
  eslint:
    name: ESLint Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file=eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

  # TypeScript 类型检查
  typescript:
    name: TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: TypeScript compilation check
        run: npx tsc --noEmit

      - name: TypeScript strict check
        run: npx tsc --noEmit --strict
        continue-on-error: true

  # 代码格式检查
  prettier:
    name: Prettier Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run format:check

      - name: Generate formatting diff
        if: failure()
        run: |
          npm run format:write
          git diff --name-only
          git diff

  # 安全漏洞扫描
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
        continue-on-error: true

  # 依赖检查
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated packages
        run: npm outdated || true

      - name: Check for unused dependencies
        run: npx depcheck
        continue-on-error: true

      - name: License compliance check
        run: npx license-checker --summary
        continue-on-error: true

  # 代码复杂度分析
  complexity-analysis:
    name: Code Complexity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install complexity tools
        run: npm install -g complexity-report jscpd

      - name: Run complexity analysis
        run: |
          find . -name "*.ts" -not -path "./node_modules/*" -not -path "./.next/*" | \
          xargs complexity-report --format json > complexity-report.json
        continue-on-error: true

      - name: Check code duplication
        run: jscpd --threshold 5 --reporters html,json --output ./duplication-report .
        continue-on-error: true

      - name: Upload complexity reports
        uses: actions/upload-artifact@v4
        with:
          name: complexity-reports
          path: |
            complexity-report.json
            duplication-report/
          retention-days: 30

  # 代码覆盖率检查
  coverage-check:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: zkagent_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/zkagent_test" >> .env.test

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/zkagent_test

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/zkagent_test

      - name: Check coverage thresholds
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Current coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage is below 70% threshold"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 性能基准测试
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run bundle analyzer
        run: npm run analyze
        continue-on-error: true

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(du -sh .next/static | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          # 可以添加大小限制检查

  # 文档检查
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README exists
        run: test -f README.md

      - name: Check API documentation
        run: |
          if [ -d "docs/api" ]; then
            echo "API documentation found"
          else
            echo "Warning: No API documentation found"
          fi

      - name: Check code comments
        run: |
          # 检查关键文件是否有足够的注释
          find lib -name "*.ts" -exec grep -L "//\|/\*" {} \; | head -10
        continue-on-error: true

  # 汇总报告
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [eslint, typescript, prettier, security-audit, dependency-check, complexity-analysis, coverage-check]
    if: always()
    steps:
      - name: Generate quality report
        run: |
          echo "## 代码质量检查汇总" >> $GITHUB_STEP_SUMMARY
          echo "| 检查项 | 状态 |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ needs.eslint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ${{ needs.typescript.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Prettier | ${{ needs.prettier.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Complexity | ${{ needs.complexity-analysis.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              eslint: '${{ needs.eslint.result }}',
              typescript: '${{ needs.typescript.result }}',
              prettier: '${{ needs.prettier.result }}',
              security: '${{ needs.security-audit.result }}',
              dependencies: '${{ needs.dependency-check.result }}',
              complexity: '${{ needs.complexity-analysis.result }}',
              coverage: '${{ needs.coverage-check.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            const comment = `## 🔍 代码质量检查结果\n\n` +
              `**通过率: ${passed}/${total} (${Math.round(passed/total*100)}%)**\n\n` +
              Object.entries(results).map(([key, result]) => 
                `- ${key}: ${result === 'success' ? '✅' : '❌'}`
              ).join('\n');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });